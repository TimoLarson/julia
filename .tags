!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/a3c87ab5/
"	test/show.jl	/^@test_repr "(1 => 2) => 3"$/;"	f
"""	base/special/trig.jl	/^        """ ($finv)(z::Number) = inv(($f)(z))$/;"	f
"""	base/special/trig.jl	/^        """ ($finvd)(z::Number) = inv(($fd)(z))$/;"	f
"""	base/special/trig.jl	/^        """ ($finvh)(z::Number) = inv(($fh)(z))$/;"	f
"""	stdlib/LinearAlgebra/src/dense.jl	/^        """ ($finv)(A::AbstractMatrix{T}) where {T} = inv(($f)(A))$/;"	f
"""	stdlib/LinearAlgebra/src/dense.jl	/^        """ ($finvh)(A::AbstractMatrix{T}) where {T} = inv(($fh)(A))$/;"	f
"1	test/show.jl	/^@test_repr "1 => (2 => 3)"$/;"	v
"1	test/show.jl	/^@test_repr "1 => 2 => 3"$/;"	v
"=	stdlib/LinearAlgebra/test/special.jl	/^@testset "== for structured matrices" begin$/;"	v
"=	test/missing.jl	/^@testset "== and != on arrays" begin$/;"	v
"=	test/missing.jl	/^@testset "== and != on tuples" begin$/;"	v
"Value types"	doc/src/manual/types.md	/^## "Value types"$/;"	s
"a	test/show.jl	/^@test_repr "a => b in c"$/;"	v
"angle	test/numbers.jl	/^@testset "angle(z::Real) = atan(zero(z), z)" begin$/;"	f
"foo"	base/pair.jl	/^"foo" => 7$/;"	v
"get!	test/show.jl	/^@test_repr "get! => 2"$/;"	v
"getindex	test/numbers.jl	/^@testset "getindex(x::Number) = x" begin$/;"	f
"in	test/numbers.jl	/^@testset "in(x::Number, y::Number) = x == y" begin$/;"	f
"map	test/numbers.jl	/^@testset "map(f::Callable, x::Number, ys::Number...) = f(x)" begin$/;"	f
"sum	base/logging.jl	/^    "sum(A) = \\$sA is an expensive operation, evaluated only when `shouldlog` returns true"$/;"	f
"sum	test/logging.jl	/^        "sum(A) = $(sum(A))"$/;"	f
"w	test/show.jl	/^@test_repr "w = ((x = y) = z)" # parens aren't necessary, but not wrong$/;"	v
"w	test/show.jl	/^@test_repr "w = ((x, y) = z)" # parens aren't necessary, but not wrong$/;"	v
"x	test/show.jl	/^@test_repr "x = ~y"$/;"	v
$	base/Enums.jl	/^        function $(esc(typename))(x::Integer)$/;"	f
$	base/atomics.jl	/^    @eval function $(Symbol("atomic_", opname, "!"))(var::Atomic{T}, val::T) where T<:FloatTypes$/;"	f
$	base/missing.jl	/^    @eval function $(f)(::Type{Union{T, Missing}}) where T$/;"	f
$	stdlib/LinearAlgebra/src/triangular.jl	/^        function $(f)(A::UnitLowerTriangular, B::LowerTriangular)$/;"	f
$	stdlib/SparseArrays/src/sparsevector.jl	/^        function $(op)(x::AbstractSparseVector{Tv,<:Integer}) where Tv<:$(TF)$/;"	f
$	stdlib/SparseArrays/src/sparsevector.jl	/^        function $(op)(x::AbstractSparseVector{Tv,Ti}) where Tv<:$(TF) where Ti<:Integer$/;"	f
$	test/core.jl	/^        function $(esc(:f5876))(::Type{T}) where T$/;"	f
$	test/core.jl	/^        function $(f)(x)$/;"	f
$	test/core.jl	/^        mutable struct $(esc(Y)) <: U$/;"	f
$	test/docs.jl	/^abstract type $(curmod_prefix)Undocumented.A <: Any$/;"	f
$	test/docs.jl	/^abstract type $(curmod_prefix)Undocumented.B <: $(curmod_prefix)Undocumented.A$/;"	f
$	test/docs.jl	/^mutable struct $(curmod_prefix)Undocumented.C <: $(curmod_prefix)Undocumented.A$/;"	f
$	test/docs.jl	/^struct $(curmod_prefix)Undocumented.D <: $(curmod_prefix)Undocumented.B$/;"	f
$	test/goto.jl	/^            function $(esc(:goto_test8))()$/;"	f
$	test/keywordargs.jl	/^        function $(esc(:test4538))(x=1)$/;"	f
$	test/keywordargs.jl	/^        function $(esc(:test4538_2))(;x=1)$/;"	f
$	test/keywordargs.jl	/^        function $(esc(:test4538_foo_2))(;x=1)$/;"	f
$	test/precompile.jl	/^              module $(Test1_module)$/;"	f
$	test/precompile.jl	/^              module $(Test2_module)$/;"	f
$	test/precompile.jl	/^              module $(Test3_module)$/;"	f
$$(id -un)	contrib/mac/framework/Makefile	/^	chown -R $$(id -un):$$(id -gn) $(DESTDIR)$(prefix)\/$(framework_directory)$/;"	t
$(ACLOCAL_M4)	deps/srccache/patchelf-0.9/Makefile.in	/^$(ACLOCAL_M4):  $(am__aclocal_m4_deps)$/;"	t
$(ACLOCAL_M4)	deps/srccache/patchelf-0.9/src/Makefile.in	/^$(ACLOCAL_M4):  $(am__aclocal_m4_deps)$/;"	t
$(ACLOCAL_M4)	deps/srccache/patchelf-0.9/tests/Makefile.in	/^$(ACLOCAL_M4):  $(am__aclocal_m4_deps)$/;"	t
$(BIN)/LocalModule.jl	test/embedding/Makefile	/^$(BIN)\/LocalModule.jl: $(SRCDIR)\/LocalModule.jl$/;"	t
$(BIN)/LocalModule.jl	test/gcext/Makefile	/^$(BIN)\/LocalModule.jl: $(SRCDIR)\/LocalModule.jl$/;"	t
$(BIN)/embedding$(EXE)	test/embedding/Makefile	/^$(BIN)\/embedding$(EXE): $(SRCDIR)\/embedding.c$/;"	t
$(BIN)/embedding-debug$(EXE)	test/embedding/Makefile	/^$(BIN)\/embedding-debug$(EXE): $(SRCDIR)\/embedding.c$/;"	t
$(BIN)/gcext$(EXE)	test/gcext/Makefile	/^$(BIN)\/gcext$(EXE): $(SRCDIR)\/gcext.c$/;"	t
$(BIN)/gcext-debug$(EXE)	test/gcext/Makefile	/^$(BIN)\/gcext-debug$(EXE): $(SRCDIR)\/gcext.c$/;"	t
$(BUILDDIR)	src/Makefile	/^$(BUILDDIR):$/;"	t
$(BUILDDIR)	src/flisp/Makefile	/^$(BUILDDIR):$/;"	t
$(BUILDDIR)	src/support/Makefile	/^$(BUILDDIR):$/;"	t
$(BUILDDIR)/$(EXENAME)$(EXE)	src/flisp/Makefile	/^$(BUILDDIR)\/$(EXENAME)$(EXE): $(OBJS) $(LIBFILES_release) $(BUILDDIR)\/$(LIBTARGET).a $(BUILDDI/;"	t
$(BUILDDIR)/$(EXENAME)-debug$(EXE)	src/flisp/Makefile	/^$(BUILDDIR)\/$(EXENAME)-debug$(EXE): $(DOBJS) $(LIBFILES_debug) $(BUILDDIR)\/$(LIBTARGET)-debug./;"	t
$(BUILDDIR)/$(LIBGIT2_SRC_DIR)/build-checked	deps/libgit2.mk	/^$(BUILDDIR)\/$(LIBGIT2_SRC_DIR)\/build-checked: $(BUILDDIR)\/$(LIBGIT2_SRC_DIR)\/build-compiled$/;"	t
$(BUILDDIR)/$(LIBGIT2_SRC_DIR)/build-compiled	deps/libgit2.mk	/^$(BUILDDIR)\/$(LIBGIT2_SRC_DIR)\/build-compiled: $(BUILDDIR)\/$(LIBGIT2_SRC_DIR)\/build-configur/;"	t
$(BUILDDIR)/$(LIBGIT2_SRC_DIR)/build-configured	deps/libgit2.mk	/^$(BUILDDIR)\/$(LIBGIT2_SRC_DIR)\/build-configured: $(LIBGIT2_SRC_PATH)\/source-extracted$/;"	t
$(BUILDDIR)/$(LIBGIT2_SRC_DIR)/build-configured	deps/libgit2.mk	/^$(BUILDDIR)\/$(LIBGIT2_SRC_DIR)\/build-configured: \\$/;"	t
$(BUILDDIR)/$(LIBGIT2_SRC_DIR)/build-configured	deps/libgit2.mk	/^$(BUILDDIR)\/$(LIBGIT2_SRC_DIR)\/build-configured: | $(build_prefix)\/manifest\/curl$/;"	t
$(BUILDDIR)/$(LIBGIT2_SRC_DIR)/build-configured	deps/libgit2.mk	/^$(BUILDDIR)\/$(LIBGIT2_SRC_DIR)\/build-configured: | $(build_prefix)\/manifest\/libssh2$/;"	t
$(BUILDDIR)/$(LIBGIT2_SRC_DIR)/build-configured	deps/libgit2.mk	/^$(BUILDDIR)\/$(LIBGIT2_SRC_DIR)\/build-configured: | $(build_prefix)\/manifest\/mbedtls$/;"	t
$(BUILDDIR)/$(LIBSSH2_SRC_DIR)/build-checked	deps/libssh2.mk	/^$(BUILDDIR)\/$(LIBSSH2_SRC_DIR)\/build-checked: $(BUILDDIR)\/$(LIBSSH2_SRC_DIR)\/build-compiled$/;"	t
$(BUILDDIR)/$(LIBSSH2_SRC_DIR)/build-compiled	deps/libssh2.mk	/^$(BUILDDIR)\/$(LIBSSH2_SRC_DIR)\/build-compiled: $(BUILDDIR)\/$(LIBSSH2_SRC_DIR)\/build-configur/;"	t
$(BUILDDIR)/$(LIBSSH2_SRC_DIR)/build-configured	deps/libssh2.mk	/^$(BUILDDIR)\/$(LIBSSH2_SRC_DIR)\/build-configured: $(SRCCACHE)\/$(LIBSSH2_SRC_DIR)\/source-extra/;"	t
$(BUILDDIR)/$(LIBSSH2_SRC_DIR)/build-configured	deps/libssh2.mk	/^$(BUILDDIR)\/$(LIBSSH2_SRC_DIR)\/build-configured: | $(build_prefix)\/manifest\/mbedtls$/;"	t
$(BUILDDIR)/$(LIBTARGET)-debug.a	src/flisp/Makefile	/^$(BUILDDIR)\/$(LIBTARGET)-debug.a: $(DOBJS) | $(BUILDDIR)$/;"	t
$(BUILDDIR)/$(LIBTARGET).a	src/flisp/Makefile	/^$(BUILDDIR)\/$(LIBTARGET).a: $(OBJS) | $(BUILDDIR)$/;"	t
$(BUILDDIR)/$(LIBWHICH_SRC_DIR)/build-checked	deps/libwhich.mk	/^$(BUILDDIR)\/$(LIBWHICH_SRC_DIR)\/build-checked: $(BUILDDIR)\/$(LIBWHICH_SRC_DIR)\/build-compile/;"	t
$(BUILDDIR)/$(LIBWHICH_SRC_DIR)/build-compiled	deps/libwhich.mk	/^$(BUILDDIR)\/$(LIBWHICH_SRC_DIR)\/build-compiled: $(BUILDDIR)\/$(LIBWHICH_SRC_DIR)\/source-extra/;"	t
$(BUILDDIR)/$(MBEDTLS_SRC)/build-checked	deps/mbedtls.mk	/^$(BUILDDIR)\/$(MBEDTLS_SRC)\/build-checked: $(BUILDDIR)\/$(MBEDTLS_SRC)\/build-compiled$/;"	t
$(BUILDDIR)/$(MBEDTLS_SRC)/build-compiled	deps/mbedtls.mk	/^$(BUILDDIR)\/$(MBEDTLS_SRC)\/build-compiled: $(BUILDDIR)\/$(MBEDTLS_SRC)\/build-configured$/;"	t
$(BUILDDIR)/$(MBEDTLS_SRC)/build-configured	deps/mbedtls.mk	/^$(BUILDDIR)\/$(MBEDTLS_SRC)\/build-configured: $(SRCCACHE)\/$(MBEDTLS_SRC)\/source-extracted$/;"	t
$(BUILDDIR)/$(OPENBLAS_SRC_DIR)/build-compiled	deps/blas.mk	/^$(BUILDDIR)\/$(OPENBLAS_SRC_DIR)\/build-compiled: $(BUILDDIR)\/$(OPENBLAS_SRC_DIR)\/build-config/;"	t
$(BUILDDIR)/$(OPENBLAS_SRC_DIR)/build-compiled	deps/blas.mk	/^$(BUILDDIR)\/$(OPENBLAS_SRC_DIR)\/build-compiled: | $(BUILDDIR)\/objconv\/build-compiled$/;"	t
$(BUILDDIR)/$(OPENBLAS_SRC_DIR)/build-configured	deps/blas.mk	/^$(BUILDDIR)\/$(OPENBLAS_SRC_DIR)\/build-configured: $(BUILDDIR)\/$(OPENBLAS_SRC_DIR)\/openblas-s/;"	t
$(BUILDDIR)/$(OPENBLAS_SRC_DIR)/openblas-skylakexdgemm.patch-applied	deps/blas.mk	/^$(BUILDDIR)\/$(OPENBLAS_SRC_DIR)\/openblas-skylakexdgemm.patch-applied: $(BUILDDIR)\/$(OPENBLAS_/;"	t
$(BUILDDIR)/$(OPENLIBM_SRC_DIR)/build-compiled	deps/openlibm.mk	/^$(BUILDDIR)\/$(OPENLIBM_SRC_DIR)\/build-compiled: $(BUILDDIR)\/$(OPENLIBM_SRC_DIR)\/source-extra/;"	t
$(BUILDDIR)/%.dbg.obj	src/Makefile	/^$(BUILDDIR)\/%.dbg.obj: $(SRCDIR)\/%.c $(HEADERS) | $(BUILDDIR)$/;"	t
$(BUILDDIR)/%.dbg.obj	src/Makefile	/^$(BUILDDIR)\/%.dbg.obj: $(SRCDIR)\/%.cpp $(SRCDIR)\/llvm-version.h $(HEADERS) $(LLVM_CONFIG_ABSO/;"	t
$(BUILDDIR)/%.dbg.obj	src/flisp/Makefile	/^$(BUILDDIR)\/%.dbg.obj: $(SRCDIR)\/%.c $(HEADERS) | $(BUILDDIR)$/;"	t
$(BUILDDIR)/%.dbg.obj	src/support/Makefile	/^$(BUILDDIR)\/%.dbg.obj: $(SRCDIR)\/%.S | $(BUILDDIR)$/;"	t
$(BUILDDIR)/%.dbg.obj	src/support/Makefile	/^$(BUILDDIR)\/%.dbg.obj: $(SRCDIR)\/%.c $(HEADERS) | $(BUILDDIR)$/;"	t
$(BUILDDIR)/%.dbg.obj	ui/Makefile	/^$(BUILDDIR)\/%.dbg.obj: $(SRCDIR)\/%.c $(HEADERS)$/;"	t
$(BUILDDIR)/%.o	src/Makefile	/^$(BUILDDIR)\/%.o: $(SRCDIR)\/%.c $(HEADERS) | $(BUILDDIR)$/;"	t
$(BUILDDIR)/%.o	src/Makefile	/^$(BUILDDIR)\/%.o: $(SRCDIR)\/%.cpp $(SRCDIR)\/llvm-version.h $(HEADERS) $(LLVM_CONFIG_ABSOLUTE) /;"	t
$(BUILDDIR)/%.o	src/flisp/Makefile	/^$(BUILDDIR)\/%.o: $(SRCDIR)\/%.c $(HEADERS) | $(BUILDDIR)$/;"	t
$(BUILDDIR)/%.o	src/support/Makefile	/^$(BUILDDIR)\/%.o: $(SRCDIR)\/%.S | $(BUILDDIR)$/;"	t
$(BUILDDIR)/%.o	src/support/Makefile	/^$(BUILDDIR)\/%.o: $(SRCDIR)\/%.c $(HEADERS) | $(BUILDDIR)$/;"	t
$(BUILDDIR)/%.o	ui/Makefile	/^$(BUILDDIR)\/%.o: $(SRCDIR)\/%.c $(HEADERS)$/;"	t
$(BUILDDIR)/Info.plist	ui/Makefile	/^$(BUILDDIR)\/Info.plist: $(JULIAHOME)\/VERSION$/;"	t
$(BUILDDIR)/SuiteSparse-$(SUITESPARSE_VER)/SuiteSparse-shlib.patch-applied	deps/suitesparse.mk	/^$(BUILDDIR)\/SuiteSparse-$(SUITESPARSE_VER)\/SuiteSparse-shlib.patch-applied: $(BUILDDIR)\/Suite/;"	t
$(BUILDDIR)/SuiteSparse-$(SUITESPARSE_VER)/SuiteSparse-winclang.patch-applied	deps/suitesparse.mk	/^$(BUILDDIR)\/SuiteSparse-$(SUITESPARSE_VER)\/SuiteSparse-winclang.patch-applied: $(BUILDDIR)\/Su/;"	t
$(BUILDDIR)/SuiteSparse-$(SUITESPARSE_VER)/build-checked	deps/suitesparse.mk	/^$(BUILDDIR)\/SuiteSparse-$(SUITESPARSE_VER)\/build-checked: $(BUILDDIR)\/SuiteSparse-$(SUITESPAR/;"	t
$(BUILDDIR)/SuiteSparse-$(SUITESPARSE_VER)/build-compiled	deps/suitesparse.mk	/^$(BUILDDIR)\/SuiteSparse-$(SUITESPARSE_VER)\/build-compiled: $(BUILDDIR)\/SuiteSparse-$(SUITESPA/;"	t
$(BUILDDIR)/SuiteSparse-$(SUITESPARSE_VER)/build-compiled	deps/suitesparse.mk	/^$(BUILDDIR)\/SuiteSparse-$(SUITESPARSE_VER)\/build-compiled: | $(build_prefix)\/manifest\/lapack$/;"	t
$(BUILDDIR)/SuiteSparse-$(SUITESPARSE_VER)/build-compiled	deps/suitesparse.mk	/^$(BUILDDIR)\/SuiteSparse-$(SUITESPARSE_VER)\/build-compiled: | $(build_prefix)\/manifest\/openbl/;"	t
$(BUILDDIR)/SuiteSparse-$(SUITESPARSE_VER)/source-extracted	deps/suitesparse.mk	/^$(BUILDDIR)\/SuiteSparse-$(SUITESPARSE_VER)\/source-extracted: $(SRCCACHE)\/SuiteSparse-$(SUITES/;"	t
$(BUILDDIR)/anticodegen.dbg.obj	src/Makefile	/^$(BUILDDIR)\/anticodegen.o $(BUILDDIR)\/anticodegen.dbg.obj: $(SRCDIR)\/intrinsics.h$/;"	t
$(BUILDDIR)/anticodegen.o	src/Makefile	/^$(BUILDDIR)\/anticodegen.o $(BUILDDIR)\/anticodegen.dbg.obj: $(SRCDIR)\/intrinsics.h$/;"	t
$(BUILDDIR)/ast.dbg.obj	src/Makefile	/^$(BUILDDIR)\/ast.o $(BUILDDIR)\/ast.dbg.obj: $(BUILDDIR)\/julia_flisp.boot.inc $(SRCDIR)\/flisp\//;"	t
$(BUILDDIR)/ast.o	src/Makefile	/^$(BUILDDIR)\/ast.o $(BUILDDIR)\/ast.dbg.obj: $(BUILDDIR)\/julia_flisp.boot.inc $(SRCDIR)\/flisp\//;"	t
$(BUILDDIR)/build_h.jl.phony	base/Makefile	/^$(BUILDDIR)\/build_h.jl.phony:$/;"	t
$(BUILDDIR)/builtins.dbg.obj	src/Makefile	/^$(BUILDDIR)\/builtins.o $(BUILDDIR)\/builtins.dbg.obj: $(SRCDIR)\/table.c$/;"	t
$(BUILDDIR)/builtins.o	src/Makefile	/^$(BUILDDIR)\/builtins.o $(BUILDDIR)\/builtins.dbg.obj: $(SRCDIR)\/table.c$/;"	t
$(BUILDDIR)/codegen.dbg.obj	src/Makefile	/^$(BUILDDIR)\/codegen.o $(BUILDDIR)\/codegen.dbg.obj: $(addprefix $(SRCDIR)\/,\\$/;"	t
$(BUILDDIR)/codegen.o	src/Makefile	/^$(BUILDDIR)\/codegen.o $(BUILDDIR)\/codegen.dbg.obj: $(addprefix $(SRCDIR)\/,\\$/;"	t
$(BUILDDIR)/curl-$(CURL_VER)/build-checked	deps/curl.mk	/^$(BUILDDIR)\/curl-$(CURL_VER)\/build-checked: $(BUILDDIR)\/curl-$(CURL_VER)\/build-compiled$/;"	t
$(BUILDDIR)/curl-$(CURL_VER)/build-compiled	deps/curl.mk	/^$(BUILDDIR)\/curl-$(CURL_VER)\/build-compiled: $(BUILDDIR)\/curl-$(CURL_VER)\/build-configured$/;"	t
$(BUILDDIR)/curl-$(CURL_VER)/build-configured	deps/curl.mk	/^$(BUILDDIR)\/curl-$(CURL_VER)\/build-configured: $(SRCCACHE)\/curl-$(CURL_VER)\/source-extracted$/;"	t
$(BUILDDIR)/curl-$(CURL_VER)/build-configured	deps/curl.mk	/^$(BUILDDIR)\/curl-$(CURL_VER)\/build-configured: | $(build_prefix)\/manifest\/libssh2$/;"	t
$(BUILDDIR)/curl-$(CURL_VER)/build-configured	deps/curl.mk	/^$(BUILDDIR)\/curl-$(CURL_VER)\/build-configured: | $(build_prefix)\/manifest\/mbedtls$/;"	t
$(BUILDDIR)/debuginfo.dbg.obj	src/Makefile	/^$(BUILDDIR)\/debuginfo.o $(BUILDDIR)\/debuginfo.dbg.obj: \\$/;"	t
$(BUILDDIR)/debuginfo.o	src/Makefile	/^$(BUILDDIR)\/debuginfo.o $(BUILDDIR)\/debuginfo.dbg.obj: \\$/;"	t
$(BUILDDIR)/disasm.dbg.obj	src/Makefile	/^$(BUILDDIR)\/disasm.o $(BUILDDIR)\/disasm.dbg.obj: $(SRCDIR)\/debuginfo.h $(SRCDIR)\/processor.h$/;"	t
$(BUILDDIR)/disasm.o	src/Makefile	/^$(BUILDDIR)\/disasm.o $(BUILDDIR)\/disasm.dbg.obj: $(SRCDIR)\/debuginfo.h $(SRCDIR)\/processor.h$/;"	t
$(BUILDDIR)/dsfmt-$(DSFMT_VER)/build-checked	deps/dsfmt.mk	/^$(BUILDDIR)\/dsfmt-$(DSFMT_VER)\/build-checked: $(BUILDDIR)\/dsfmt-$(DSFMT_VER)\/build-compiled$/;"	t
$(BUILDDIR)/dsfmt-$(DSFMT_VER)/build-compiled	deps/dsfmt.mk	/^$(BUILDDIR)\/dsfmt-$(DSFMT_VER)\/build-compiled: $(BUILDDIR)\/dsfmt-$(DSFMT_VER)\/source-extract/;"	t
$(BUILDDIR)/dsfmt-$(DSFMT_VER)/source-extracted	deps/dsfmt.mk	/^$(BUILDDIR)\/dsfmt-$(DSFMT_VER)\/source-extracted: $(SRCCACHE)\/dsfmt-$(DSFMT_VER).tar.gz$/;"	t
$(BUILDDIR)/dump.dbg.obj	src/Makefile	/^$(BUILDDIR)\/dump.o $(BUILDDIR)\/dump.dbg.obj: $(addprefix $(SRCDIR)\/,common_symbols1.inc commo/;"	t
$(BUILDDIR)/dump.o	src/Makefile	/^$(BUILDDIR)\/dump.o $(BUILDDIR)\/dump.dbg.obj: $(addprefix $(SRCDIR)\/,common_symbols1.inc commo/;"	t
$(BUILDDIR)/errno_h.jl	base/Makefile	/^$(BUILDDIR)\/errno_h.jl:$/;"	t
$(BUILDDIR)/file_constants.jl	base/Makefile	/^$(BUILDDIR)\/file_constants.jl: $(SRCDIR)\/..\/src\/file_constants.h$/;"	t
$(BUILDDIR)/flisp.boot	src/flisp/Makefile	/^$(BUILDDIR)\/flisp.boot: $(SRCDIR)\/flisp.boot | $(BUILDDIR)$/;"	t
$(BUILDDIR)/flisp.dbg.obj	src/flisp/Makefile	/^$(BUILDDIR)\/flisp.dbg.obj: $(FLISP_SRCS)$/;"	t
$(BUILDDIR)/flisp.o	src/flisp/Makefile	/^$(BUILDDIR)\/flisp.o: $(FLISP_SRCS)$/;"	t
$(BUILDDIR)/flisp/libflisp-debug.a	src/Makefile	/^$(BUILDDIR)\/flisp\/libflisp-debug.a: $(addprefix $(SRCDIR)\/,flisp\/*.h flisp\/*.c) $(BUILDDIR)/;"	t
$(BUILDDIR)/flisp/libflisp.a	src/Makefile	/^$(BUILDDIR)\/flisp\/libflisp.a: $(addprefix $(SRCDIR)\/flisp\/,*.h *.c) $(BUILDDIR)\/support\/li/;"	t
$(BUILDDIR)/flmain.dbg.obj	src/flisp/Makefile	/^$(BUILDDIR)\/flmain.dbg.obj: $(FLMAIN_SRCS)$/;"	t
$(BUILDDIR)/flmain.o	src/flisp/Makefile	/^$(BUILDDIR)\/flmain.o: $(FLMAIN_SRCS)$/;"	t
$(BUILDDIR)/gc-debug.dbg.obj	src/Makefile	/^$(BUILDDIR)\/gc-debug.o $(BUILDDIR)\/gc-debug.dbg.obj: $(SRCDIR)\/gc.h$/;"	t
$(BUILDDIR)/gc-debug.o	src/Makefile	/^$(BUILDDIR)\/gc-debug.o $(BUILDDIR)\/gc-debug.dbg.obj: $(SRCDIR)\/gc.h$/;"	t
$(BUILDDIR)/gc-pages.dbg.obj	src/Makefile	/^$(BUILDDIR)\/gc-pages.o $(BUILDDIR)\/gc-pages.dbg.obj: $(SRCDIR)\/gc.h$/;"	t
$(BUILDDIR)/gc-pages.o	src/Makefile	/^$(BUILDDIR)\/gc-pages.o $(BUILDDIR)\/gc-pages.dbg.obj: $(SRCDIR)\/gc.h$/;"	t
$(BUILDDIR)/gc.dbg.obj	src/Makefile	/^$(BUILDDIR)\/gc.o $(BUILDDIR)\/gc.dbg.obj: $(SRCDIR)\/gc.h$/;"	t
$(BUILDDIR)/gc.o	src/Makefile	/^$(BUILDDIR)\/gc.o $(BUILDDIR)\/gc.dbg.obj: $(SRCDIR)\/gc.h$/;"	t
$(BUILDDIR)/gmp-$(GMP_VER)/build-checked	deps/gmp.mk	/^$(BUILDDIR)\/gmp-$(GMP_VER)\/build-checked: $(BUILDDIR)\/gmp-$(GMP_VER)\/build-compiled$/;"	t
$(BUILDDIR)/gmp-$(GMP_VER)/build-compiled	deps/gmp.mk	/^$(BUILDDIR)\/gmp-$(GMP_VER)\/build-compiled: $(BUILDDIR)\/gmp-$(GMP_VER)\/build-configured$/;"	t
$(BUILDDIR)/gmp-$(GMP_VER)/build-configured	deps/gmp.mk	/^$(BUILDDIR)\/gmp-$(GMP_VER)\/build-configured: $(SRCCACHE)\/gmp-$(GMP_VER)\/gmp-config-ldflags.p/;"	t
$(BUILDDIR)/gmp-$(GMP_VER)/build-configured	deps/gmp.mk	/^$(BUILDDIR)\/gmp-$(GMP_VER)\/build-configured: $(SRCCACHE)\/gmp-$(GMP_VER)\/source-extracted$/;"	t
$(BUILDDIR)/host/$(EXENAME)	src/flisp/Makefile	/^$(BUILDDIR)\/host\/$(EXENAME): $(BUILDDIR)\/host\/Makefile$/;"	t
$(BUILDDIR)/host/Makefile	src/flisp/Makefile	/^$(BUILDDIR)\/host\/Makefile:$/;"	t
$(BUILDDIR)/host/Makefile	src/support/Makefile	/^$(BUILDDIR)\/host\/Makefile:$/;"	t
$(BUILDDIR)/host/libsupport-debug.a	src/support/Makefile	/^$(BUILDDIR)\/host\/libsupport-debug.a: $(BUILDDIR)\/host\/Makefile$/;"	t
$(BUILDDIR)/host/libsupport.a	src/support/Makefile	/^$(BUILDDIR)\/host\/libsupport.a: $(BUILDDIR)\/host\/Makefile$/;"	t
$(BUILDDIR)/interpreter.dbg.obj	src/Makefile	/^$(BUILDDIR)\/interpreter.o $(BUILDDIR)\/interpreter.dbg.obj: $(SRCDIR)\/interpreter-stacktrace.c$/;"	t
$(BUILDDIR)/interpreter.o	src/Makefile	/^$(BUILDDIR)\/interpreter.o $(BUILDDIR)\/interpreter.dbg.obj: $(SRCDIR)\/interpreter-stacktrace.c$/;"	t
$(BUILDDIR)/jitlayers.dbg.obj	src/Makefile	/^$(BUILDDIR)\/jitlayers.o $(BUILDDIR)\/jitlayers.dbg.obj: $(SRCDIR)\/jitlayers.h$/;"	t
$(BUILDDIR)/jitlayers.o	src/Makefile	/^$(BUILDDIR)\/jitlayers.o $(BUILDDIR)\/jitlayers.dbg.obj: $(SRCDIR)\/jitlayers.h$/;"	t
$(BUILDDIR)/julia_flisp.boot	src/Makefile	/^$(BUILDDIR)\/julia_flisp.boot: $(addprefix $(SRCDIR)\/,jlfrontend.scm flisp\/aliases.scm flisp\//;"	t
$(BUILDDIR)/julia_flisp.boot.inc	src/Makefile	/^$(BUILDDIR)\/julia_flisp.boot.inc: $(BUILDDIR)\/julia_flisp.boot $(FLISP_EXECUTABLE_release)$/;"	t
$(BUILDDIR)/julia_res.o	ui/Makefile	/^$(BUILDDIR)\/julia_res.o: $(JULIAHOME)\/contrib\/windows\/julia.rc $(JULIAHOME)\/VERSION$/;"	t
$(BUILDDIR)/julia_version.h	src/Makefile	/^$(BUILDDIR)\/julia_version.h: $(JULIAHOME)\/VERSION$/;"	t
$(BUILDDIR)/lapack-$(LAPACK_VER)/build-checked	deps/blas.mk	/^$(BUILDDIR)\/lapack-$(LAPACK_VER)\/build-checked: $(BUILDDIR)\/lapack-$(LAPACK_VER)\/build-compi/;"	t
$(BUILDDIR)/lapack-$(LAPACK_VER)/build-compiled	deps/blas.mk	/^$(BUILDDIR)\/lapack-$(LAPACK_VER)\/build-compiled: $(BUILDDIR)\/lapack-$(LAPACK_VER)\/build-comp/;"	t
$(BUILDDIR)/lapack-$(LAPACK_VER)/build-compiled0	deps/blas.mk	/^$(BUILDDIR)\/lapack-$(LAPACK_VER)\/build-compiled0: $(BUILDDIR)\/lapack-$(LAPACK_VER)\/source-ex/;"	t
$(BUILDDIR)/lapack-$(LAPACK_VER)/build-compiled0	deps/blas.mk	/^$(BUILDDIR)\/lapack-$(LAPACK_VER)\/build-compiled0: | $(build_prefix)\/manifest\/openblas$/;"	t
$(BUILDDIR)/lapack-$(LAPACK_VER)/build-compiled0	deps/blas.mk	/^$(BUILDDIR)\/lapack-$(LAPACK_VER)\/build-compiled0: | $(build_shlibdir)\/libgfortblas.$(SHLIB_EX/;"	t
$(BUILDDIR)/lapack-$(LAPACK_VER)/source-extracted	deps/blas.mk	/^$(BUILDDIR)\/lapack-$(LAPACK_VER)\/source-extracted: $(SRCCACHE)\/lapack-$(LAPACK_VER).tgz$/;"	t
$(BUILDDIR)/libgfortblas.$(SHLIB_EXT)	deps/blas.mk	/^$(BUILDDIR)\/libgfortblas.$(SHLIB_EXT): $(SRCDIR)\/gfortblas.c $(SRCDIR)\/gfortblas.alias$/;"	t
$(BUILDDIR)/libjulia-debug.a	src/Makefile	/^$(BUILDDIR)\/libjulia-debug.a: $(SRCDIR)\/julia.expmap $(DOBJS) $(BUILDDIR)\/flisp\/libflisp-deb/;"	t
$(BUILDDIR)/libjulia.a	src/Makefile	/^$(BUILDDIR)\/libjulia.a: julia.expmap $(OBJS) $(BUILDDIR)\/flisp\/libflisp.a $(BUILDDIR)\/suppor/;"	t
$(BUILDDIR)/libosxunwind-$(OSXUNWIND_VER)/build-compiled	deps/unwind.mk	/^$(BUILDDIR)\/libosxunwind-$(OSXUNWIND_VER)\/build-compiled: $(BUILDDIR)\/libosxunwind-$(OSXUNWIN/;"	t
$(BUILDDIR)/libosxunwind-$(OSXUNWIND_VER)/source-extracted	deps/unwind.mk	/^$(BUILDDIR)\/libosxunwind-$(OSXUNWIND_VER)\/source-extracted: $(SRCCACHE)\/libosxunwind-$(OSXUNW/;"	t
$(BUILDDIR)/libsupport-debug.a	src/support/Makefile	/^$(BUILDDIR)\/libsupport-debug.a: $(DOBJS) | $(BUILDDIR)$/;"	t
$(BUILDDIR)/libsupport.a	src/support/Makefile	/^$(BUILDDIR)\/libsupport.a: $(OBJS) | $(BUILDIR)$/;"	t
$(BUILDDIR)/libunwind-$(UNWIND_VER)/build-checked	deps/unwind.mk	/^$(BUILDDIR)\/libunwind-$(UNWIND_VER)\/build-checked: $(BUILDDIR)\/libunwind-$(UNWIND_VER)\/build/;"	t
$(BUILDDIR)/libunwind-$(UNWIND_VER)/build-compiled	deps/unwind.mk	/^$(BUILDDIR)\/libunwind-$(UNWIND_VER)\/build-compiled: $(BUILDDIR)\/libunwind-$(UNWIND_VER)\/buil/;"	t
$(BUILDDIR)/libunwind-$(UNWIND_VER)/build-configured	deps/unwind.mk	/^$(BUILDDIR)\/libunwind-$(UNWIND_VER)\/build-configured: $(SRCCACHE)\/libunwind-$(UNWIND_VER)\/so/;"	t
$(BUILDDIR)/llvm-final-gc-lowering.dbg.obj	src/Makefile	/^$(BUILDDIR)\/llvm-final-gc-lowering.o $(BUILDDIR)\/llvm-final-gc-lowering.dbg.obj: $(SRCDIR)\/ll/;"	t
$(BUILDDIR)/llvm-final-gc-lowering.o	src/Makefile	/^$(BUILDDIR)\/llvm-final-gc-lowering.o $(BUILDDIR)\/llvm-final-gc-lowering.dbg.obj: $(SRCDIR)\/ll/;"	t
$(BUILDDIR)/llvm-late-gc-lowering.dbg.obj	src/Makefile	/^$(BUILDDIR)\/llvm-late-gc-lowering.o $(BUILDDIR)\/llvm-late-gc-lowering.dbg.obj: $(SRCDIR)\/llvm/;"	t
$(BUILDDIR)/llvm-late-gc-lowering.o	src/Makefile	/^$(BUILDDIR)\/llvm-late-gc-lowering.o $(BUILDDIR)\/llvm-late-gc-lowering.dbg.obj: $(SRCDIR)\/llvm/;"	t
$(BUILDDIR)/llvm-pass-helpers.dbg.obj	src/Makefile	/^$(BUILDDIR)\/llvm-pass-helpers.o $(BUILDDIR)\/llvm-pass-helpers.dbg.obj: $(SRCDIR)\/llvm-pass-he/;"	t
$(BUILDDIR)/llvm-pass-helpers.o	src/Makefile	/^$(BUILDDIR)\/llvm-pass-helpers.o $(BUILDDIR)\/llvm-pass-helpers.dbg.obj: $(SRCDIR)\/llvm-pass-he/;"	t
$(BUILDDIR)/mpfr-$(MPFR_VER)/build-checked	deps/mpfr.mk	/^$(BUILDDIR)\/mpfr-$(MPFR_VER)\/build-checked: $(BUILDDIR)\/mpfr-$(MPFR_VER)\/build-compiled$/;"	t
$(BUILDDIR)/mpfr-$(MPFR_VER)/build-compiled	deps/mpfr.mk	/^$(BUILDDIR)\/mpfr-$(MPFR_VER)\/build-compiled: $(BUILDDIR)\/mpfr-$(MPFR_VER)\/build-configured$/;"	t
$(BUILDDIR)/mpfr-$(MPFR_VER)/build-configured	deps/mpfr.mk	/^$(BUILDDIR)\/mpfr-$(MPFR_VER)\/build-configured: $(SRCCACHE)\/mpfr-$(MPFR_VER)\/source-extracted$/;"	t
$(BUILDDIR)/mpfr-$(MPFR_VER)/build-configured	deps/mpfr.mk	/^$(BUILDDIR)\/mpfr-$(MPFR_VER)\/build-configured: | $(build_prefix)\/manifest\/gmp$/;"	t
$(BUILDDIR)/objconv/build-compiled	deps/objconv.mk	/^$(BUILDDIR)\/objconv\/build-compiled: $(BUILDDIR)\/objconv\/source-extracted$/;"	t
$(BUILDDIR)/objconv/source-extracted	deps/objconv.mk	/^$(BUILDDIR)\/objconv\/source-extracted: $(SRCCACHE)\/objconv.zip$/;"	t
$(BUILDDIR)/patchelf-$(PATCHELF_VER)/build-checked	deps/patchelf.mk	/^$(BUILDDIR)\/patchelf-$(PATCHELF_VER)\/build-checked: $(BUILDDIR)\/patchelf-$(PATCHELF_VER)\/bui/;"	t
$(BUILDDIR)/patchelf-$(PATCHELF_VER)/build-compiled	deps/patchelf.mk	/^$(BUILDDIR)\/patchelf-$(PATCHELF_VER)\/build-compiled: $(BUILDDIR)\/patchelf-$(PATCHELF_VER)\/bu/;"	t
$(BUILDDIR)/patchelf-$(PATCHELF_VER)/build-configured	deps/patchelf.mk	/^$(BUILDDIR)\/patchelf-$(PATCHELF_VER)\/build-configured: $(SRCCACHE)\/patchelf-$(PATCHELF_VER)\//;"	t
$(BUILDDIR)/pcre2-$(PCRE_VER)/build-checked	deps/pcre.mk	/^$(BUILDDIR)\/pcre2-$(PCRE_VER)\/build-checked: $(BUILDDIR)\/pcre2-$(PCRE_VER)\/build-compiled$/;"	t
$(BUILDDIR)/pcre2-$(PCRE_VER)/build-compiled	deps/pcre.mk	/^$(BUILDDIR)\/pcre2-$(PCRE_VER)\/build-compiled: $(BUILDDIR)\/pcre2-$(PCRE_VER)\/build-configured$/;"	t
$(BUILDDIR)/pcre2-$(PCRE_VER)/build-configured	deps/pcre.mk	/^$(BUILDDIR)\/pcre2-$(PCRE_VER)\/build-configured: $(SRCCACHE)\/pcre2-$(PCRE_VER)\/source-extract/;"	t
$(BUILDDIR)/pcre_h.jl	base/Makefile	/^$(BUILDDIR)\/pcre_h.jl: $(PCRE_INCL_PATH)$/;"	t
$(BUILDDIR)/processor.dbg.obj	src/Makefile	/^$(BUILDDIR)\/processor.o $(BUILDDIR)\/processor.dbg.obj: $(addprefix $(SRCDIR)\/,processor_*.cpp/;"	t
$(BUILDDIR)/processor.o	src/Makefile	/^$(BUILDDIR)\/processor.o $(BUILDDIR)\/processor.dbg.obj: $(addprefix $(SRCDIR)\/,processor_*.cpp/;"	t
$(BUILDDIR)/signal-handling.dbg.obj	src/Makefile	/^$(BUILDDIR)\/signal-handling.o $(BUILDDIR)\/signal-handling.dbg.obj: $(addprefix $(SRCDIR)\/,sig/;"	t
$(BUILDDIR)/signal-handling.o	src/Makefile	/^$(BUILDDIR)\/signal-handling.o $(BUILDDIR)\/signal-handling.dbg.obj: $(addprefix $(SRCDIR)\/,sig/;"	t
$(BUILDDIR)/staticdata.dbg.obj	src/Makefile	/^$(BUILDDIR)\/staticdata.o $(BUILDDIR)\/staticdata.dbg.obj: $(SRCDIR)\/processor.h$/;"	t
$(BUILDDIR)/staticdata.o	src/Makefile	/^$(BUILDDIR)\/staticdata.o $(BUILDDIR)\/staticdata.dbg.obj: $(SRCDIR)\/processor.h$/;"	t
$(BUILDDIR)/support/libsupport-debug.a	src/Makefile	/^$(BUILDDIR)\/support\/libsupport-debug.a: $(addprefix $(SRCDIR)\/support\/,*.h *.c *.S) $(SRCDIR/;"	t
$(BUILDDIR)/support/libsupport.a	src/Makefile	/^$(BUILDDIR)\/support\/libsupport.a: $(addprefix $(SRCDIR)\/support\/,*.h *.c *.S) $(SRCDIR)\/sup/;"	t
$(BUILDDIR)/uv_constants.jl	base/Makefile	/^$(BUILDDIR)\/uv_constants.jl: $(SRCDIR)\/..\/src\/uv_constants.h $(build_includedir)\/uv\/errno./;"	t
$(BUILDDIR)/version_git.jl.phony	base/Makefile	/^$(BUILDDIR)\/version_git.jl.phony: $(SRCDIR)\/version_git.sh$/;"	t
$(BUILDDIRMAKE)	Makefile	/^$(BUILDDIRMAKE): | $(BUILDDIRS)$/;"	t
$(BUILDROOT)/$(FRAMEWORK_NAME)-framework.pkg	contrib/mac/frameworkapp/Makefile	/^$(BUILDROOT)\/$(FRAMEWORK_NAME)-framework.pkg: $(JULIA_FRAMEWORK_LIB) $(BUILDROOT)\/framework-co/;"	t
$(BUILDROOT)/$(FRAMEWORK_NAME).dist	contrib/mac/frameworkapp/Makefile	/^$(BUILDROOT)\/$(FRAMEWORK_NAME).dist: $(JULIAHOME)\/contrib\/mac\/frameworkapp\/Julia.dist$/;"	t
$(BUILDROOT)/doc/_build/html/en/index.html	Makefile	/^$(BUILDROOT)\/doc\/_build\/html\/en\/index.html: $(shell find $(BUILDROOT)\/base $(BUILDROOT)\/d/;"	t
$(BUILDROOT)/framework-component.plist	contrib/mac/frameworkapp/Makefile	/^$(BUILDROOT)\/framework-component.plist: $(JULIAHOME)\/contrib\/mac\/frameworkapp\/framework-com/;"	t
$(BUILDROOT)/launcher.pkg	contrib/mac/frameworkapp/Makefile	/^$(BUILDROOT)\/launcher.pkg: $(XCEXPORT)\/Julia.app\/Contents\/MacOS\/Julia$/;"	t
$(BUILDROOT)/xcodebuild-export.plist	contrib/mac/frameworkapp/Makefile	/^$(BUILDROOT)\/xcodebuild-export.plist:$/;"	t
$(DESTDIR)$(prefix)/$(framework_currver)/bin	contrib/mac/framework/Makefile	/^$(DESTDIR)$(prefix)\/$(framework_currver)\/bin: | $(framework_destdirs)$/;"	t
$(DESTDIR)$(prefix)/$(framework_currver)/etc	contrib/mac/framework/Makefile	/^$(DESTDIR)$(prefix)\/$(framework_currver)\/etc: | $(framework_destdirs)$/;"	t
$(DESTDIR)$(prefix)/$(framework_currver)/include	contrib/mac/framework/Makefile	/^$(DESTDIR)$(prefix)\/$(framework_currver)\/include: | $(framework_destdirs)$/;"	t
$(DESTDIR)$(prefix)/$(framework_currver)/lib/libjulia-debug.$(SOMAJOR).$(SOMINOR).dylib	contrib/mac/framework/Makefile	/^$(DESTDIR)$(prefix)\/$(framework_currver)\/lib\/libjulia-debug.$(SOMAJOR).$(SOMINOR).dylib: | $(/;"	t
$(DESTDIR)$(prefix)/$(framework_currver)/lib/libjulia-debug.$(SOMAJOR).dylib	contrib/mac/framework/Makefile	/^$(DESTDIR)$(prefix)\/$(framework_currver)\/lib\/libjulia-debug.$(SOMAJOR).dylib: | $(framework_d/;"	t
$(DESTDIR)$(prefix)/$(framework_currver)/lib/libjulia-debug.dylib	contrib/mac/framework/Makefile	/^$(DESTDIR)$(prefix)\/$(framework_currver)\/lib\/libjulia-debug.dylib: | $(framework_destdirs)$/;"	t
$(DESTDIR)$(prefix)/$(framework_currver)/lib/libjulia.$(SOMAJOR).$(SOMINOR).dylib	contrib/mac/framework/Makefile	/^$(DESTDIR)$(prefix)\/$(framework_currver)\/lib\/libjulia.$(SOMAJOR).$(SOMINOR).dylib: | $(framew/;"	t
$(DESTDIR)$(prefix)/$(framework_currver)/lib/libjulia.$(SOMAJOR).dylib	contrib/mac/framework/Makefile	/^$(DESTDIR)$(prefix)\/$(framework_currver)\/lib\/libjulia.$(SOMAJOR).dylib: | $(framework_destdir/;"	t
$(DESTDIR)$(prefix)/$(framework_currver)/lib/libjulia.dylib	contrib/mac/framework/Makefile	/^$(DESTDIR)$(prefix)\/$(framework_currver)\/lib\/libjulia.dylib: | $(framework_destdirs)$/;"	t
$(DESTDIR)$(prefix)/$(framework_currver)/libexec	contrib/mac/framework/Makefile	/^$(DESTDIR)$(prefix)\/$(framework_currver)\/libexec: | $(framework_destdirs)$/;"	t
$(DESTDIR)$(prefix)/$(framework_currver)/share	contrib/mac/framework/Makefile	/^$(DESTDIR)$(prefix)\/$(framework_currver)\/share: | $(framework_destdirs)$/;"	t
$(DESTDIR)$(prefix)/$(framework_infoplist)	contrib/mac/framework/Makefile	/^$(DESTDIR)$(prefix)\/$(framework_infoplist): | $(framework_destdirs)$/;"	t
$(DMG_NAME)	contrib/mac/app/Makefile	/^$(DMG_NAME): dmg\/$(APP_NAME) dmg\/.VolumeIcon.icns dmg\/Applications$/;"	t
$(FLISP_EXECUTABLE_debug)	src/Makefile	/^$(FLISP_EXECUTABLE_debug): $(BUILDDIR)\/flisp\/libflisp-debug.a$/;"	t
$(FLISP_EXECUTABLE_release)	src/Makefile	/^$(FLISP_EXECUTABLE_release): $(BUILDDIR)\/flisp\/libflisp.a$/;"	t
$(JULIA_FRAMEWORK_LIB)	contrib/mac/frameworkapp/Makefile	/^$(JULIA_FRAMEWORK_LIB):$/;"	t
$(LIBGIT2_SRC_PATH)/libgit2-agent-nonfatal.patch-applied	deps/libgit2.mk	/^$(LIBGIT2_SRC_PATH)\/libgit2-agent-nonfatal.patch-applied: $(LIBGIT2_SRC_PATH)\/source-extracted$/;"	t
$(LIBUV_BUILDDIR)/build-checked	deps/libuv.mk	/^$(LIBUV_BUILDDIR)\/build-checked: $(LIBUV_BUILDDIR)\/build-compiled$/;"	t
$(LIBUV_BUILDDIR)/build-compiled	deps/libuv.mk	/^$(LIBUV_BUILDDIR)\/build-compiled: $(LIBUV_BUILDDIR)\/build-configured$/;"	t
$(LIBUV_BUILDDIR)/build-configured	deps/libuv.mk	/^$(LIBUV_BUILDDIR)\/build-configured: $(SRCCACHE)\/$(LIBUV_SRC_DIR)\/source-extracted$/;"	t
$(LLT_debug)	src/flisp/Makefile	/^$(LLT_debug): $(LLTSRCDIR)\/*.h $(LLTSRCDIR)\/*.c$/;"	t
$(LLT_release)	src/flisp/Makefile	/^$(LLT_release): $(LLTSRCDIR)\/*.h $(LLTSRCDIR)\/*.c$/;"	t
$(LLVM_BUILDDIR_withtype)/build-checked	deps/llvm.mk	/^$(LLVM_BUILDDIR_withtype)\/build-checked: $(LLVM_BUILDDIR_withtype)\/build-compiled | $(llvm_pyt/;"	t
$(LLVM_BUILDDIR_withtype)/build-compiled	deps/llvm.mk	/^$(LLVM_BUILDDIR_withtype)\/build-compiled: $(LLVM_BUILDDIR_withtype)\/build-configured | $(llvm_/;"	t
$(LLVM_BUILDDIR_withtype)/build-configured	deps/llvm.mk	/^$(LLVM_BUILDDIR_withtype)\/build-configured: $(LLVM_SRC_DIR)\/source-extracted | $(llvm_python_w/;"	t
$(LLVM_BUILDDIR_withtype)/build-configured	deps/llvm.mk	/^$(LLVM_BUILDDIR_withtype)\/build-configured: | $(LLVM_PATCH_PREV)$/;"	t
$(LLVM_BUILD_DIR)/libcxx-build/Makefile	deps/llvm.mk	/^$(LLVM_BUILD_DIR)\/libcxx-build\/Makefile: | $(LLVM_SRC_DIR)\/projects\/libcxx $(LLVM_SRC_DIR)\//;"	t
$(LLVM_BUILD_DIR)/libcxxabi-build/Makefile	deps/llvm.mk	/^$(LLVM_BUILD_DIR)\/libcxxabi-build\/Makefile: | $(LLVM_SRC_DIR)\/projects\/libcxxabi $(LLVM_SRC_/;"	t
$(LLVM_CLANG_TAR)	deps/llvm.mk	/^$(LLVM_CLANG_TAR): | $(SRCCACHE)$/;"	t
$(LLVM_COMPILER_RT_TAR)	deps/llvm.mk	/^$(LLVM_COMPILER_RT_TAR): | $(SRCCACHE)$/;"	t
$(LLVM_LIBCXX_TAR)	deps/llvm.mk	/^$(LLVM_LIBCXX_TAR): | $(SRCCACHE)$/;"	t
$(LLVM_LLDB_TAR)	deps/llvm.mk	/^$(LLVM_LLDB_TAR): | $(SRCCACHE)$/;"	t
$(LLVM_SRC_DIR)/projects/libcxx	deps/llvm.mk	/^$(LLVM_SRC_DIR)\/projects\/libcxx: $(LLVM_LIBCXX_TAR) | $(LLVM_SRC_DIR)\/source-extracted$/;"	t
$(LLVM_SRC_DIR)/projects/libcxx/.git/HEAD	deps/llvm.mk	/^$(LLVM_SRC_DIR)\/projects\/libcxx\/.git\/HEAD: | $(LLVM_SRC_DIR)\/projects\/libcxx$/;"	t
$(LLVM_SRC_DIR)/projects/libcxxabi	deps/llvm.mk	/^$(LLVM_SRC_DIR)\/projects\/libcxxabi: $(LLVM_LIBCXXABI_TAR) | $(LLVM_SRC_DIR)\/source-extracted$/;"	t
$(LLVM_SRC_DIR)/projects/libcxxabi/.git/HEAD	deps/llvm.mk	/^$(LLVM_SRC_DIR)\/projects\/libcxxabi\/.git\/HEAD: | $(LLVM_SRC_DIR)\/projects\/libcxxabi$/;"	t
$(LLVM_SRC_DIR)/source-extracted	deps/llvm.mk	/^$(LLVM_SRC_DIR)\/source-extracted: $(LLVM_SRC_DIR)\/tools\/lldb$/;"	t
$(LLVM_SRC_DIR)/source-extracted	deps/llvm.mk	/^$(LLVM_SRC_DIR)\/source-extracted: | $(LLVM_TAR) $(LLVM_CLANG_TAR) $(LLVM_COMPILER_RT_TAR) $(LLV/;"	t
$(LLVM_SRC_DIR)/tools/lldb	deps/llvm.mk	/^$(LLVM_SRC_DIR)\/tools\/lldb:$/;"	t
$(LLVM_TAR)	deps/llvm.mk	/^$(LLVM_TAR): | $(SRCCACHE)$/;"	t
$(PRODUCTARCHIVE)	contrib/mac/frameworkapp/Makefile	/^$(PRODUCTARCHIVE): $(BUILDROOT)\/launcher.pkg $(BUILDROOT)\/$(FRAMEWORK_NAME)-framework.pkg $(BU/;"	t
$(SRCCACHE)/$(MBEDTLS_SRC).tgz	deps/mbedtls.mk	/^$(SRCCACHE)\/$(MBEDTLS_SRC).tgz: | $(SRCCACHE)$/;"	t
$(SRCCACHE)/$(MBEDTLS_SRC)/source-extracted	deps/mbedtls.mk	/^$(SRCCACHE)\/$(MBEDTLS_SRC)\/source-extracted: $(SRCCACHE)\/$(MBEDTLS_SRC).tgz$/;"	t
$(SRCCACHE)/SuiteSparse-$(SUITESPARSE_VER).tar.gz	deps/suitesparse.mk	/^$(SRCCACHE)\/SuiteSparse-$(SUITESPARSE_VER).tar.gz: | $(SRCCACHE)$/;"	t
$(SRCCACHE)/UnicodeData.txt	doc/Makefile	/^$(SRCCACHE)\/UnicodeData.txt:$/;"	t
$(SRCCACHE)/cacert-$(MOZILLA_CACERT_VERSION).pem	deps/libgit2.mk	/^$(SRCCACHE)\/cacert-$(MOZILLA_CACERT_VERSION).pem:$/;"	t
$(SRCCACHE)/curl-$(CURL_VER).tar.bz2	deps/curl.mk	/^$(SRCCACHE)\/curl-$(CURL_VER).tar.bz2: | $(SRCCACHE)$/;"	t
$(SRCCACHE)/curl-$(CURL_VER)/source-extracted	deps/curl.mk	/^$(SRCCACHE)\/curl-$(CURL_VER)\/source-extracted: $(SRCCACHE)\/curl-$(CURL_VER).tar.bz2$/;"	t
$(SRCCACHE)/dsfmt-$(DSFMT_VER).tar.gz	deps/dsfmt.mk	/^$(SRCCACHE)\/dsfmt-$(DSFMT_VER).tar.gz: | $(SRCCACHE)$/;"	t
$(SRCCACHE)/gmp-$(GMP_VER).tar.bz2	deps/gmp.mk	/^$(SRCCACHE)\/gmp-$(GMP_VER).tar.bz2: | $(SRCCACHE)$/;"	t
$(SRCCACHE)/gmp-$(GMP_VER)/build-patched	deps/gmp.mk	/^$(SRCCACHE)\/gmp-$(GMP_VER)\/build-patched: $(SRCCACHE)\/gmp-$(GMP_VER)\/source-extracted$/;"	t
$(SRCCACHE)/gmp-$(GMP_VER)/gmp-config-ldflags.patch-applied	deps/gmp.mk	/^$(SRCCACHE)\/gmp-$(GMP_VER)\/gmp-config-ldflags.patch-applied: | $(SRCCACHE)\/gmp-$(GMP_VER)\/bu/;"	t
$(SRCCACHE)/gmp-$(GMP_VER)/source-extracted	deps/gmp.mk	/^$(SRCCACHE)\/gmp-$(GMP_VER)\/source-extracted: $(SRCCACHE)\/gmp-$(GMP_VER).tar.bz2$/;"	t
$(SRCCACHE)/lapack-$(LAPACK_VER).tgz	deps/blas.mk	/^$(SRCCACHE)\/lapack-$(LAPACK_VER).tgz: | $(SRCCACHE)$/;"	t
$(SRCCACHE)/libosxunwind-$(OSXUNWIND_VER).tar.gz	deps/unwind.mk	/^$(SRCCACHE)\/libosxunwind-$(OSXUNWIND_VER).tar.gz: | $(SRCCACHE)$/;"	t
$(SRCCACHE)/libunwind-$(UNWIND_VER).tar.gz	deps/unwind.mk	/^$(SRCCACHE)\/libunwind-$(UNWIND_VER).tar.gz: | $(SRCCACHE)$/;"	t
$(SRCCACHE)/libunwind-$(UNWIND_VER)/libunwind-prefer-extbl.patch-applied	deps/unwind.mk	/^$(SRCCACHE)\/libunwind-$(UNWIND_VER)\/libunwind-prefer-extbl.patch-applied: $(SRCCACHE)\/libunwi/;"	t
$(SRCCACHE)/libunwind-$(UNWIND_VER)/libunwind-static-arm.patch-applied	deps/unwind.mk	/^$(SRCCACHE)\/libunwind-$(UNWIND_VER)\/libunwind-static-arm.patch-applied: $(SRCCACHE)\/libunwind/;"	t
$(SRCCACHE)/libunwind-$(UNWIND_VER)/source-extracted	deps/unwind.mk	/^$(SRCCACHE)\/libunwind-$(UNWIND_VER)\/source-extracted: $(SRCCACHE)\/libunwind-$(UNWIND_VER).tar/;"	t
$(SRCCACHE)/mpfr-$(MPFR_VER).tar.bz2	deps/mpfr.mk	/^$(SRCCACHE)\/mpfr-$(MPFR_VER).tar.bz2: | $(SRCCACHE)$/;"	t
$(SRCCACHE)/mpfr-$(MPFR_VER)/source-extracted	deps/mpfr.mk	/^$(SRCCACHE)\/mpfr-$(MPFR_VER)\/source-extracted: $(SRCCACHE)\/mpfr-$(MPFR_VER).tar.bz2$/;"	t
$(SRCCACHE)/objconv.zip	deps/objconv.mk	/^$(SRCCACHE)\/objconv.zip: | $(SRCCACHE)$/;"	t
$(SRCCACHE)/patchelf-$(PATCHELF_VER).tar.gz	deps/patchelf.mk	/^$(SRCCACHE)\/patchelf-$(PATCHELF_VER).tar.gz: | $(SRCCACHE)$/;"	t
$(SRCCACHE)/patchelf-$(PATCHELF_VER)/source-extracted	deps/patchelf.mk	/^$(SRCCACHE)\/patchelf-$(PATCHELF_VER)\/source-extracted: $(SRCCACHE)\/patchelf-$(PATCHELF_VER).t/;"	t
$(SRCCACHE)/pcre2-$(PCRE_VER).tar.bz2	deps/pcre.mk	/^$(SRCCACHE)\/pcre2-$(PCRE_VER).tar.bz2: | $(SRCCACHE)$/;"	t
$(SRCCACHE)/pcre2-$(PCRE_VER)/source-extracted	deps/pcre.mk	/^$(SRCCACHE)\/pcre2-$(PCRE_VER)\/source-extracted: $(SRCCACHE)\/pcre2-$(PCRE_VER).tar.bz2$/;"	t
$(TESTS)	test/Makefile	/^$(TESTS):$/;"	t
$(TEST_LOGS)	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am--fnord $(TEST_LOGS) $(TEST_LOGS:.log=.trs): $(am__force_recheck)$/;"	t
$(TEST_LOGS:.log=.trs)	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am--fnord $(TEST_LOGS) $(TEST_LOGS:.log=.trs): $(am__force_recheck)$/;"	t
$(TEST_SUITE_LOG)	deps/srccache/patchelf-0.9/tests/Makefile.in	/^$(TEST_SUITE_LOG): $(TEST_LOGS)$/;"	t
$(UTF8PROC_BUILDDIR)/build-checked	deps/utf8proc.mk	/^$(UTF8PROC_BUILDDIR)\/build-checked: $(UTF8PROC_BUILDDIR)\/build-compiled$/;"	t
$(UTF8PROC_BUILDDIR)/build-compiled	deps/utf8proc.mk	/^$(UTF8PROC_BUILDDIR)\/build-compiled: $(UTF8PROC_BUILDDIR)\/source-extracted$/;"	t
$(XCARCHIVE)/Info.plist	contrib/mac/frameworkapp/Makefile	/^$(XCARCHIVE)\/Info.plist: $(JULIA_FRAMEWORK_LIB)$/;"	t
$(XCEXPORT)/Julia.app/Contents/MacOS/Julia	contrib/mac/frameworkapp/Makefile	/^$(XCEXPORT)\/Julia.app\/Contents\/MacOS\/Julia: $(XCARCHIVE)\/Info.plist $(BUILDROOT)\/xcodebuil/;"	t
$(addprefix $(BUILDDIR)/,APInt-C.o APInt-C.dbg.obj runtime_intrinsics.o runtime_intrinsics.dbg.obj)	src/Makefile	/^$(addprefix $(BUILDDIR)\/,APInt-C.o APInt-C.dbg.obj runtime_intrinsics.o runtime_intrinsics.dbg./;"	t
$(addprefix $(BUILDDIR)/,threading.o threading.dbg.obj gc.o gc.dbg.obj init.c init.dbg.obj task.o task.dbg.obj)	src/Makefile	/^$(addprefix $(BUILDDIR)\/,threading.o threading.dbg.obj gc.o gc.dbg.obj init.c init.dbg.obj task/;"	t
$(am__aclocal_m4_deps)	deps/srccache/patchelf-0.9/Makefile.in	/^$(am__aclocal_m4_deps):$/;"	t
$(am__aclocal_m4_deps)	deps/srccache/patchelf-0.9/src/Makefile.in	/^$(am__aclocal_m4_deps):$/;"	t
$(am__aclocal_m4_deps)	deps/srccache/patchelf-0.9/tests/Makefile.in	/^$(am__aclocal_m4_deps):$/;"	t
$(am__recursive_targets)	deps/srccache/patchelf-0.9/Makefile.in	/^$(am__recursive_targets):$/;"	t
$(build_bindir)/julia$(EXE)	ui/Makefile	/^$(build_bindir)\/julia$(EXE): $(BUILDDIR)\/Info.plist$/;"	t
$(build_bindir)/julia$(EXE)	ui/Makefile	/^$(build_bindir)\/julia$(EXE): $(OBJS)$/;"	t
$(build_bindir)/julia-debug$(EXE)	ui/Makefile	/^$(build_bindir)\/julia-debug$(EXE): $(BUILDDIR)\/Info.plist$/;"	t
$(build_bindir)/julia-debug$(EXE)	ui/Makefile	/^$(build_bindir)\/julia-debug$(EXE): $(DOBJS)$/;"	t
$(build_datarootdir)/julia/cert.pem	deps/libgit2.mk	/^$(build_datarootdir)\/julia\/cert.pem: $(SRCCACHE)\/cacert-$(MOZILLA_CACERT_VERSION).pem | $(bui/;"	t
$(build_datarootdir)/julia/julia-config.jl	Makefile	/^$(build_datarootdir)\/julia\/julia-config.jl: $(JULIAHOME)\/contrib\/julia-config.jl | $(build_d/;"	t
$(build_datarootdir)/julia/stdlib/$(VERSDIR)	stdlib/Makefile	/^$(build_datarootdir)\/julia\/stdlib\/$(VERSDIR):$/;"	t
$(build_depsbindir)/stringreplace	Makefile	/^$(build_depsbindir)\/stringreplace: $(JULIAHOME)\/contrib\/stringreplace.c | $(build_depsbindir)$/;"	t
$(build_man1dir)/julia.1	Makefile	/^$(build_man1dir)\/julia.1: $(JULIAHOME)\/doc\/man\/julia.1 | $(build_man1dir)$/;"	t
$(build_prefix)	deps/tools/common.mk	/^$(build_prefix): | $(DIRS)$/;"	t
$(build_prefix)/manifest/libgit2	deps/libgit2.mk	/^$(build_prefix)\/manifest\/libgit2: $(build_datarootdir)\/julia\/cert.pem # use libgit2 install /;"	t
$(build_prefix)/manifest/llvm	deps/llvm.mk	/^$(build_prefix)\/manifest\/llvm: | $(llvm_python_workaround)$/;"	t
$(build_prefix)/manifest/osxunwind	deps/unwind.mk	/^$(build_prefix)\/manifest\/osxunwind: $(BUILDDIR)\/libosxunwind-$(OSXUNWIND_VER)\/build-compiled/;"	t
$(build_prefix)/manifest/suitesparse	deps/suitesparse.mk	/^$(build_prefix)\/manifest\/suitesparse: $(BUILDDIR)\/SuiteSparse-$(SUITESPARSE_VER)\/build-compi/;"	t
$(build_private_libdir)/%.$(SHLIB_EXT)	sysimage.mk	/^$(build_private_libdir)\/%.$(SHLIB_EXT): $(build_private_libdir)\/%-o.a$/;"	t
$(build_private_libdir)/corecompiler.ji	sysimage.mk	/^$(build_private_libdir)\/corecompiler.ji: $(COMPILER_SRCS)$/;"	t
$(build_private_libdir)/libLLVM.$(SHLIB_EXT)	base/Makefile	/^$(build_private_libdir)\/libLLVM.$(SHLIB_EXT):$/;"	t
$(build_private_libdir)/sys.ji	sysimage.mk	/^$(build_private_libdir)\/sys.ji: $(build_private_libdir)\/corecompiler.ji $(JULIAHOME)\/VERSION /;"	t
$(build_shlibdir)/libGCCheckerPlugin.$(SHLIB_EXT)	src/Makefile	/^$(build_shlibdir)\/libGCCheckerPlugin.$(SHLIB_EXT): $(SRCDIR)\/clangsa\/GCChecker.cpp$/;"	t
$(build_shlibdir)/libccalltest.$(SHLIB_EXT)	src/Makefile	/^$(build_shlibdir)\/libccalltest.$(SHLIB_EXT): $(SRCDIR)\/ccalltest.c$/;"	t
$(build_shlibdir)/libgfortblas.$(SHLIB_EXT)	deps/blas.mk	/^$(build_shlibdir)\/libgfortblas.$(SHLIB_EXT): $(BUILDDIR)\/libgfortblas.$(SHLIB_EXT)$/;"	t
$(build_shlibdir)/libjulia-debug.$(JL_MAJOR_MINOR_SHLIB_EXT)	src/Makefile	/^$(build_shlibdir)\/libjulia-debug.$(JL_MAJOR_MINOR_SHLIB_EXT): $(SRCDIR)\/julia.expmap $(DOBJS) /;"	t
$(build_shlibdir)/libjulia.$(JL_MAJOR_MINOR_SHLIB_EXT)	src/Makefile	/^$(build_shlibdir)\/libjulia.$(JL_MAJOR_MINOR_SHLIB_EXT): $(SRCDIR)\/julia.expmap $(OBJS) $(BUILD/;"	t
$(build_shlibdir)/libllvmcalltest.$(SHLIB_EXT)	src/Makefile	/^$(build_shlibdir)\/libllvmcalltest.$(SHLIB_EXT): $(SRCDIR)\/llvmcalltest.cpp $(LLVM_CONFIG_ABSOL/;"	t
$(build_shlibdir)/libsuitesparse_wrapper.$(SHLIB_EXT)	deps/suitesparse.mk	/^$(build_shlibdir)\/libsuitesparse_wrapper.$(SHLIB_EXT): $(SRCDIR)\/SuiteSparse_wrapper.c$/;"	t
$(build_shlibdir)/libsuitesparse_wrapper.$(SHLIB_EXT)	deps/suitesparse.mk	/^$(build_shlibdir)\/libsuitesparse_wrapper.$(SHLIB_EXT): $(build_prefix)\/manifest\/suitesparse$/;"	t
$(build_sysconfdir)/julia/startup.jl	Makefile	/^$(build_sysconfdir)\/julia\/startup.jl: $(JULIAHOME)\/etc\/startup.jl | $(build_sysconfdir)\/jul/;"	t
$(framework_current_symlinks)	contrib/mac/framework/Makefile	/^$(framework_current_symlinks): | $(framework_destdirs)$/;"	t
$(framework_destdirs)	contrib/mac/framework/Makefile	/^$(framework_destdirs):$/;"	t
$(framework_version_symlink)	contrib/mac/framework/Makefile	/^$(framework_version_symlink): | $(framework_destdirs)$/;"	t
$(llvm_python_workaround)	deps/llvm.mk	/^$(llvm_python_workaround):$/;"	t
$(no_rpath_arch_TESTS)	deps/srccache/patchelf-0.9/tests/Makefile.am	/^$(no_rpath_arch_TESTS): no-rpath-prebuild.sh$/;"	t
$(no_rpath_arch_TESTS)	deps/srccache/patchelf-0.9/tests/Makefile.in	/^$(no_rpath_arch_TESTS): no-rpath-prebuild.sh$/;"	t
$(srcdir)/Makefile.in	deps/srccache/patchelf-0.9/Makefile.in	/^$(srcdir)\/Makefile.in:  $(srcdir)\/Makefile.am  $(am__configure_deps)$/;"	t
$(srcdir)/Makefile.in	deps/srccache/patchelf-0.9/src/Makefile.in	/^$(srcdir)\/Makefile.in:  $(srcdir)\/Makefile.am  $(am__configure_deps)$/;"	t
$(srcdir)/Makefile.in	deps/srccache/patchelf-0.9/tests/Makefile.in	/^$(srcdir)\/Makefile.in:  $(srcdir)\/Makefile.am  $(am__configure_deps)$/;"	t
$(top_builddir)/config.status	deps/srccache/patchelf-0.9/Makefile.in	/^$(top_builddir)\/config.status: $(top_srcdir)\/configure $(CONFIG_STATUS_DEPENDENCIES)$/;"	t
$(top_builddir)/config.status	deps/srccache/patchelf-0.9/src/Makefile.in	/^$(top_builddir)\/config.status: $(top_srcdir)\/configure $(CONFIG_STATUS_DEPENDENCIES)$/;"	t
$(top_builddir)/config.status	deps/srccache/patchelf-0.9/tests/Makefile.in	/^$(top_builddir)\/config.status: $(top_srcdir)\/configure $(CONFIG_STATUS_DEPENDENCIES)$/;"	t
$(top_srcdir)/configure	deps/srccache/patchelf-0.9/Makefile.in	/^$(top_srcdir)\/configure:  $(am__configure_deps)$/;"	t
$(top_srcdir)/configure	deps/srccache/patchelf-0.9/src/Makefile.in	/^$(top_srcdir)\/configure:  $(am__configure_deps)$/;"	t
$(top_srcdir)/configure	deps/srccache/patchelf-0.9/tests/Makefile.in	/^$(top_srcdir)\/configure:  $(am__configure_deps)$/;"	t
$A_module	test/precompile.jl	/^          module $A_module$/;"	f
$B_module	test/precompile.jl	/^          module $B_module$/;"	f
$F	base/stream.jl	/^    @eval function $F(f::Function, stream)$/;"	f
$Foo2_module	test/precompile.jl	/^          module $Foo2_module$/;"	f
$FooBase_module	test/precompile.jl	/^          module $FooBase_module$/;"	f
$Foo_module	test/precompile.jl	/^          module $Foo_module$/;"	f
$ModuleA	test/precompile.jl	/^            module $ModuleA$/;"	f
$ModuleB	test/precompile.jl	/^            module $ModuleB$/;"	f
$S	stdlib/LinearAlgebra/src/symmetric.jl	/^        function $S(A::$H, uplo::Symbol)$/;"	f
$S	stdlib/LinearAlgebra/src/symmetric.jl	/^        function $S(A::$S, uplo::Symbol)$/;"	f
$T	stdlib/Dates/src/types.jl	/^    @eval struct $T <: DatePeriod$/;"	f
$T	stdlib/Dates/src/types.jl	/^    @eval struct $T <: TimePeriod$/;"	f
$Test_module	test/precompile.jl	/^              module $Test_module$/;"	f
$Time_module	test/precompile.jl	/^              module $Time_module$/;"	f
$f	base/mpfr.jl	/^    @eval function $f(x::BigFloat)$/;"	f
$f	base/range.jl	/^        function $f(r1::LinRange{T}, r2::LinRange{T}) where T$/;"	f
$f	base/range.jl	/^        function $f(r1::OrdinalRange, r2::OrdinalRange)$/;"	f
$f	stdlib/LinearAlgebra/src/uniformscaling.jl	/^        function $f(A::Union{AbstractVecOrMat,UniformScaling}...)$/;"	f
$f	stdlib/SHA/src/SHA.jl	/^        function $f(data::AbstractBytes)$/;"	f
$f	stdlib/SHA/src/SHA.jl	/^        function $f(io::IO, chunk_size=4*1024)$/;"	f
$f	test/testhelpers/Furlongs.jl	/^    @eval @generated function $f(v::T, ::Furlong{p}, ::Union{Furlong{q},Val{q}}) where {T,p,q}$/;"	f
$fn	stdlib/Dates/src/query.jl	/^    @eval @inline function $fn(word::AbstractString, locale::DateLocale)$/;"	f
$fname	base/array.jl	/^        function $fname(::Type{T}, dims::NTuple{N, Integer}) where {T,N}$/;"	f
$fname	base/array.jl	/^        function $fname(::Type{T}, dims::Tuple{}) where {T}$/;"	f
$g	stdlib/SHA/src/SHA.jl	/^        function $g(key::Vector{UInt8}, data::AbstractBytes)$/;"	f
$g	stdlib/SHA/src/SHA.jl	/^        function $g(key::Vector{UInt8}, io::IO, chunk_size=4*1024)$/;"	f
$name	test/loading.jl	/^        module $name$/;"	f
$op	base/int.jl	/^    @eval function $op(a::Integer, b::Integer)$/;"	f
$op	test/testhelpers/Furlongs.jl	/^    @eval function $op(x::Furlong{p}, y::Furlong{p}) where {p}$/;"	f
$pkgname	contrib/generate_precompile.jl	/^              module $pkgname$/;"	f
$randfun!	stdlib/Random/src/normal.jl	/^        function $randfun!(rng::AbstractRNG, A::AbstractArray{T}) where T$/;"	f
$t	stdlib/LinearAlgebra/src/triangular.jl	/^            function $t{T,S}(data) where {T,S<:AbstractMatrix{T}}$/;"	f
$t	stdlib/LinearAlgebra/src/triangular.jl	/^        function $t(A::AbstractMatrix)$/;"	f
$t	stdlib/LinearAlgebra/src/triangular.jl	/^        function $t{T}(A::$t) where T$/;"	f
$t	stdlib/LinearAlgebra/src/triangular.jl	/^        function $t{T}(A::AbstractMatrix) where T$/;"	f
$t	stdlib/LinearAlgebra/src/triangular.jl	/^        struct $t{T,S<:AbstractMatrix{T}} <: AbstractTriangular{T,S}$/;"	f
$typ	stdlib/LibGit2/src/types.jl	/^            function $typ(owner::$owntyp, ptr::Ptr{Cvoid}, fin::Bool=true)$/;"	f
$typ	stdlib/LibGit2/src/types.jl	/^            function $typ(ptr::Ptr{Cvoid}, fin::Bool=true)$/;"	f
$typ	stdlib/LibGit2/src/types.jl	/^        @eval mutable struct $typ <: $sup$/;"	f
%	Makefile	/^debug release : % : julia-%$/;"	t
%	base/operators.jl	/^const % = rem$/;"	v
%	src/Makefile	/^release debug: %: libjulia-%$/;"	t
%	ui/Makefile	/^release debug :  % : julia-%$/;"	t
%jl_value_t	test/llvmpasses/alloc-opt.jl	/^%jl_value_t = type opaque$/;"	v
%jl_value_t	test/llvmpasses/alloc-opt2.jl	/^%jl_value_t = type opaque$/;"	v
%jl_value_t	test/llvmpasses/safepoint_stress.jl	/^%jl_value_t = type opaque$/;"	v
&	base/bool.jl	/^(&)(x::Bool, y::Bool) = and_int(x, y)$/;"	f
&	base/cmd.jl	/^(&)(left::AbstractCmd, right::AbstractCmd) = AndCmds(left, right)$/;"	f
&	base/int.jl	/^(&)(x::T, y::T) where {T<:BitInteger} = and_int(x, y)$/;"	f
&	base/missing.jl	/^(&)(::Integer, ::Missing) = missing$/;"	f
&	base/missing.jl	/^(&)(::Missing, ::Integer) = missing$/;"	f
&	base/missing.jl	/^(&)(::Missing, ::Missing) = missing$/;"	f
&	base/missing.jl	/^(&)(a::Missing, b::Bool) = ifelse(b, missing, false)$/;"	f
&	base/missing.jl	/^(&)(b::Bool, a::Missing) = ifelse(b, missing, false)$/;"	f
&	base/operators.jl	/^(&)(x::Integer) = x$/;"	f
&	base/promotion.jl	/^(&)(x::T, y::T) where {T<:Integer} = no_op_err("&", T)$/;"	f
)	stdlib/REPL/src/REPL.jl	/^) = setup_interface(repl, hascolor, extra_repl_keymap)$/;"	v
*	base/abstractarraymath.jl	/^*(x::AbstractArray{<:Number,2}) = x$/;"	f
*	base/bool.jl	/^*(x::Bool, y::Bool) = x & y$/;"	f
*	base/bool.jl	/^*(y::AbstractFloat, x::Bool) = x * y$/;"	f
*	base/bool.jl	/^function *(x::Bool, y::T)::promote_type(Bool,T) where T<:AbstractFloat$/;"	f
*	base/complex.jl	/^*(x::Bool, z::Complex) = Complex(x * real(z), x * imag(z))$/;"	f
*	base/complex.jl	/^*(x::Bool, z::Complex{Bool}) = Complex(x * real(z), x * imag(z))$/;"	f
*	base/complex.jl	/^*(x::Real, z::Complex) = Complex(x * real(z), x * imag(z))$/;"	f
*	base/complex.jl	/^*(x::Real, z::Complex{Bool}) = Complex(x * real(z), x * imag(z))$/;"	f
*	base/complex.jl	/^*(z::Complex, w::Complex) = Complex(real(z) * real(w) - imag(z) * imag(w),$/;"	f
*	base/complex.jl	/^*(z::Complex, x::Bool) = Complex(real(z) * x, imag(z) * x)$/;"	f
*	base/complex.jl	/^*(z::Complex, x::Real) = Complex(x * real(z), x * imag(z))$/;"	f
*	base/complex.jl	/^*(z::Complex{Bool}, x::Bool) = Complex(real(z) * x, imag(z) * x)$/;"	f
*	base/complex.jl	/^*(z::Complex{Bool}, x::Real) = Complex(real(z) * x, imag(z) * x)$/;"	f
*	base/float.jl	/^*(x::Float32, y::Float32) = mul_float(x, y)$/;"	f
*	base/float.jl	/^*(x::Float64, y::Float64) = mul_float(x, y)$/;"	f
*	base/gmp.jl	/^*(c::ClongMax, x::BigInt) = x * c$/;"	f
*	base/gmp.jl	/^*(c::CulongMax, x::BigInt) = x * c$/;"	f
*	base/gmp.jl	/^*(x::BigInt, c::ClongMax) = MPZ.mul_si(x, c)$/;"	f
*	base/gmp.jl	/^*(x::BigInt, c::CulongMax) = MPZ.mul_ui(x, c)$/;"	f
*	base/int.jl	/^    *(x::T, y::T) where {T<:Union{Int128,UInt128}}  = mul_int(x, y)$/;"	f
*	base/int.jl	/^    function *(u::Int128, v::Int128)$/;"	f
*	base/int.jl	/^    function *(u::UInt128, v::UInt128)$/;"	f
*	base/int.jl	/^(*)(x::T, y::T) where {T<:BitInteger} = mul_int(x, y)$/;"	f
*	base/irrationals.jl	/^*(x::Bool, y::AbstractIrrational) = ifelse(x, Float64(y), 0.0)$/;"	f
*	base/missing.jl	/^*(d::AbstractString, x::Missing) = missing$/;"	f
*	base/missing.jl	/^*(d::Missing, x::AbstractString) = missing$/;"	f
*	base/multidimensional.jl	/^    @inline (*)(a::Integer, index::CartesianIndex{N}) where {N} = CartesianIndex{N}(map(x->a*x, /;"	f
*	base/multidimensional.jl	/^    @inline (*)(index::CartesianIndex, a::Integer) = *(a,index)$/;"	f
*	base/operators.jl	/^*(x::Number) = x$/;"	f
*	base/promotion.jl	/^(*)(x::T, y::T) where {T<:Number} = no_op_err("*", T)$/;"	f
*	base/promotion.jl	/^*(x::Number, y::Number) = *(promote(x,y)...)$/;"	f
*	base/rational.jl	/^function *(x::Rational, y::Rational)$/;"	f
*	base/regex.jl	/^*(r::Regex) = r # avoids wrapping r in a useless subpattern$/;"	f
*	base/regex.jl	/^function *(r1::Union{Regex,AbstractString,AbstractChar}, rs::Union{Regex,AbstractString,Abstract/;"	f
*	base/strings/basic.jl	/^(*)(s1::Union{AbstractChar, AbstractString}, ss::Union{AbstractChar, AbstractString}...) = strin/;"	f
*	base/twiceprecision.jl	/^*(r::StepRangeLen{<:Real,<:TwicePrecision}, x::Real) = x*r$/;"	f
*	base/twiceprecision.jl	/^*(v::Number, x::TwicePrecision) = x*v$/;"	f
*	base/twiceprecision.jl	/^*(x::Real, r::StepRangeLen{<:Real,<:TwicePrecision}) =$/;"	f
*	base/twiceprecision.jl	/^*(x::TwicePrecision, y::TwicePrecision) = *(promote(x, y)...)$/;"	f
*	base/twiceprecision.jl	/^function *(x::TwicePrecision, v::Number)$/;"	f
*	base/twiceprecision.jl	/^function *(x::TwicePrecision{<:IEEEFloat}, v::Integer)$/;"	f
*	base/twiceprecision.jl	/^function *(x::TwicePrecision{T}, y::TwicePrecision{T}) where {T}$/;"	f
*	deps/srccache/patchelf-0.9/configure	/^s\/[	 `~#$^&*(){}\\\\|;'\\''"<>?]\/\\\\&\/g$/;"	f
*	stdlib/Dates/src/periods.jl	/^(*)(x::P, y::Real) where {P<:Period} = P(value(x) * Int64(y))$/;"	f
*	stdlib/Dates/src/periods.jl	/^(*)(y::Real, x::Period) = x * y$/;"	f
*	stdlib/LinearAlgebra/src/adjtrans.jl	/^(*)(u::AdjointAbsVec,   v::AdjointAbsVec{<:Any,<:TransposeAbsVec}) =$/;"	f
*	stdlib/LinearAlgebra/src/adjtrans.jl	/^(*)(u::AdjointAbsVec,   v::TransposeAbsVec{<:Any,<:AdjointAbsVec}) =$/;"	f
*	stdlib/LinearAlgebra/src/adjtrans.jl	/^(*)(u::TransposeAbsVec, v::AdjointAbsVec{<:Any,<:TransposeAbsVec}) =$/;"	f
*	stdlib/LinearAlgebra/src/adjtrans.jl	/^(*)(u::TransposeAbsVec, v::TransposeAbsVec{<:Any,<:AdjointAbsVec}) =$/;"	f
*	stdlib/LinearAlgebra/src/adjtrans.jl	/^*(u::AbstractVector, v::AdjOrTransAbsVec) = broadcast(*, u, v)$/;"	f
*	stdlib/LinearAlgebra/src/adjtrans.jl	/^*(u::AdjointAbsVec, v::AbstractVector) = dot(u.parent, v)$/;"	f
*	stdlib/LinearAlgebra/src/adjtrans.jl	/^*(u::AdjointAbsVec, v::AdjointAbsVec) = throw(MethodError(*, (u, v)))$/;"	f
*	stdlib/LinearAlgebra/src/adjtrans.jl	/^*(u::TransposeAbsVec, v::TransposeAbsVec) = throw(MethodError(*, (u, v)))$/;"	f
*	stdlib/LinearAlgebra/src/adjtrans.jl	/^*(u::TransposeAbsVec{T}, v::AbstractVector{T}) where {T<:Real} = dot(u.parent, v)$/;"	f
*	stdlib/LinearAlgebra/src/adjtrans.jl	/^function *(u::TransposeAbsVec, v::AbstractVector)$/;"	f
*	stdlib/LinearAlgebra/src/bidiag.jl	/^*(A::Bidiagonal, B::Number) = Bidiagonal(A.dv*B, A.ev*B, A.uplo)$/;"	f
*	stdlib/LinearAlgebra/src/bidiag.jl	/^*(B::Number, A::Bidiagonal) = A*B$/;"	f
*	stdlib/LinearAlgebra/src/bidiag.jl	/^function *(A::AbstractTriangular, B::Union{SymTridiagonal, Tridiagonal})$/;"	f
*	stdlib/LinearAlgebra/src/bidiag.jl	/^function *(A::BiTri, B::Diagonal)$/;"	f
*	stdlib/LinearAlgebra/src/bidiag.jl	/^function *(A::Bidiagonal, B::LowerTriangular)$/;"	f
*	stdlib/LinearAlgebra/src/bidiag.jl	/^function *(A::Bidiagonal, B::UpperTriangular)$/;"	f
*	stdlib/LinearAlgebra/src/bidiag.jl	/^function *(A::Diagonal, B::BiTri)$/;"	f
*	stdlib/LinearAlgebra/src/bidiag.jl	/^function *(A::Diagonal, B::SymTridiagonal)$/;"	f
*	stdlib/LinearAlgebra/src/bidiag.jl	/^function *(A::LowerTriangular, B::Bidiagonal)$/;"	f
*	stdlib/LinearAlgebra/src/bidiag.jl	/^function *(A::SymTridiagonal, B::Diagonal)$/;"	f
*	stdlib/LinearAlgebra/src/bidiag.jl	/^function *(A::Union{SymTridiagonal, Tridiagonal}, B::AbstractTriangular)$/;"	f
*	stdlib/LinearAlgebra/src/bidiag.jl	/^function *(A::UpperTriangular, B::Bidiagonal)$/;"	f
*	stdlib/LinearAlgebra/src/diagonal.jl	/^(*)(A::AbstractMatrix, D::Diagonal) =$/;"	f
*	stdlib/LinearAlgebra/src/diagonal.jl	/^(*)(A::AbstractTriangular, D::Diagonal) = rmul!(copy(A), D)$/;"	f
*	stdlib/LinearAlgebra/src/diagonal.jl	/^(*)(D::Diagonal, A::AbstractMatrix) =$/;"	f
*	stdlib/LinearAlgebra/src/diagonal.jl	/^(*)(D::Diagonal, B::AbstractTriangular) = lmul!(D, copy(B))$/;"	f
*	stdlib/LinearAlgebra/src/diagonal.jl	/^(*)(D::Diagonal, V::AbstractVector) = D.diag .* V$/;"	f
*	stdlib/LinearAlgebra/src/diagonal.jl	/^(*)(D::Diagonal, x::Number) = Diagonal(D.diag * x)$/;"	f
*	stdlib/LinearAlgebra/src/diagonal.jl	/^(*)(Da::Diagonal, Db::Diagonal) = Diagonal(Da.diag .* Db.diag)$/;"	f
*	stdlib/LinearAlgebra/src/diagonal.jl	/^(*)(x::Number, D::Diagonal) = Diagonal(x * D.diag)$/;"	f
*	stdlib/LinearAlgebra/src/diagonal.jl	/^*(A::Adjoint{<:Any,<:AbstractTriangular}, D::Diagonal) = rmul!(copy(A), D)$/;"	f
*	stdlib/LinearAlgebra/src/diagonal.jl	/^*(A::Diagonal, adjB::Adjoint{<:Any,<:RealHermSymComplexHerm}) = A * adjB.parent$/;"	f
*	stdlib/LinearAlgebra/src/diagonal.jl	/^*(A::Diagonal, transB::Transpose{<:Any,<:RealHermSymComplexSym}) = A * transB.parent$/;"	f
*	stdlib/LinearAlgebra/src/diagonal.jl	/^*(A::Transpose{<:Any,<:AbstractTriangular}, D::Diagonal) = rmul!(copy(A), D)$/;"	f
*	stdlib/LinearAlgebra/src/diagonal.jl	/^*(D::Adjoint{<:Any,<:Diagonal}, B::Adjoint{<:Any,<:Diagonal}) =$/;"	f
*	stdlib/LinearAlgebra/src/diagonal.jl	/^*(D::Adjoint{<:Any,<:Diagonal}, B::Diagonal) = Diagonal(adjoint.(D.parent.diag) .* B.diag)$/;"	f
*	stdlib/LinearAlgebra/src/diagonal.jl	/^*(D::Diagonal, B::Adjoint{<:Any,<:AbstractTriangular}) = lmul!(D, collect(B))$/;"	f
*	stdlib/LinearAlgebra/src/diagonal.jl	/^*(D::Diagonal, B::Adjoint{<:Any,<:Diagonal}) = Diagonal(D.diag .* adjoint.(B.parent.diag))$/;"	f
*	stdlib/LinearAlgebra/src/diagonal.jl	/^*(D::Diagonal, B::Transpose{<:Any,<:AbstractTriangular}) = lmul!(D, copy(B))$/;"	f
*	stdlib/LinearAlgebra/src/diagonal.jl	/^*(D::Diagonal, B::Transpose{<:Any,<:Diagonal}) = Diagonal(D.diag .* transpose.(B.parent.diag))$/;"	f
*	stdlib/LinearAlgebra/src/diagonal.jl	/^*(D::Diagonal, adjQ::Adjoint{<:Any,<:Union{QRCompactWYQ,QRPackedQ}}) = (Q = adjQ.parent; rmul!(A/;"	f
*	stdlib/LinearAlgebra/src/diagonal.jl	/^*(D::Transpose{<:Any,<:Diagonal}, B::Diagonal) = Diagonal(transpose.(D.parent.diag) .* B.diag)$/;"	f
*	stdlib/LinearAlgebra/src/diagonal.jl	/^*(D::Transpose{<:Any,<:Diagonal}, B::Transpose{<:Any,<:Diagonal}) =$/;"	f
*	stdlib/LinearAlgebra/src/diagonal.jl	/^*(adjA::Adjoint{<:Any,<:RealHermSymComplexHerm}, B::Diagonal) = adjA.parent * B$/;"	f
*	stdlib/LinearAlgebra/src/diagonal.jl	/^*(adjA::Adjoint{<:Any,<:RealHermSymComplexHerm}, adjD::Adjoint{<:Any,<:Diagonal}) = adjA.parent /;"	f
*	stdlib/LinearAlgebra/src/diagonal.jl	/^*(adjD::Adjoint{<:Any,<:Diagonal}, adjA::Adjoint{<:Any,<:RealHermSymComplexHerm}) = adjD * adjA./;"	f
*	stdlib/LinearAlgebra/src/diagonal.jl	/^*(transA::Transpose{<:Any,<:RealHermSymComplexSym}, B::Diagonal) = transA.parent * B$/;"	f
*	stdlib/LinearAlgebra/src/diagonal.jl	/^*(transA::Transpose{<:Any,<:RealHermSymComplexSym}, transD::Transpose{<:Any,<:Diagonal}) = trans/;"	f
*	stdlib/LinearAlgebra/src/diagonal.jl	/^*(transD::Transpose{<:Any,<:Diagonal}, transA::Transpose{<:Any,<:RealHermSymComplexSym}) = trans/;"	f
*	stdlib/LinearAlgebra/src/diagonal.jl	/^*(x::Adjoint{<:Any,<:AbstractVector}, D::Diagonal) = Adjoint(map((t,s) -> t'*s, D.diag, parent(x/;"	f
*	stdlib/LinearAlgebra/src/diagonal.jl	/^*(x::Adjoint{<:Any,<:AbstractVector}, D::Diagonal, y::AbstractVector) =$/;"	f
*	stdlib/LinearAlgebra/src/diagonal.jl	/^*(x::Transpose{<:Any,<:AbstractVector}, D::Diagonal) = Transpose(map((t,s) -> transpose(t)*s, D./;"	f
*	stdlib/LinearAlgebra/src/diagonal.jl	/^*(x::Transpose{<:Any,<:AbstractVector}, D::Diagonal, y::AbstractVector) =$/;"	f
*	stdlib/LinearAlgebra/src/diagonal.jl	/^function *(D::Diagonal, adjA::Adjoint{<:Any,<:AbstractMatrix})$/;"	f
*	stdlib/LinearAlgebra/src/diagonal.jl	/^function *(D::Diagonal, transA::Transpose{<:Any,<:AbstractMatrix})$/;"	f
*	stdlib/LinearAlgebra/src/diagonal.jl	/^function *(adjA::Adjoint{<:Any,<:AbstractMatrix}, D::Diagonal)$/;"	f
*	stdlib/LinearAlgebra/src/diagonal.jl	/^function *(transA::Transpose{<:Any,<:AbstractMatrix}, D::Diagonal)$/;"	f
*	stdlib/LinearAlgebra/src/givens.jl	/^(*)(A::AbstractMatrix, adjR::Adjoint{<:Any,<:AbstractRotation}) = _absvecormat_mul_adjrot(A, adj/;"	f
*	stdlib/LinearAlgebra/src/givens.jl	/^(*)(A::AbstractVector, adjR::Adjoint{<:Any,<:AbstractRotation}) = _absvecormat_mul_adjrot(A, adj/;"	f
*	stdlib/LinearAlgebra/src/givens.jl	/^*(A::AbstractTriangular, B::Adjoint{<:Any,<:AbstractRotation}) = A * copy(B)$/;"	f
*	stdlib/LinearAlgebra/src/givens.jl	/^*(A::Adjoint{<:Any,<:AbstractMatrix}, B::Adjoint{<:Any,<:AbstractRotation}) = copy(A) * B$/;"	f
*	stdlib/LinearAlgebra/src/givens.jl	/^*(A::Adjoint{<:Any,<:AbstractTriangular}, B::Adjoint{<:Any,<:AbstractRotation}) = copy(A) * B$/;"	f
*	stdlib/LinearAlgebra/src/givens.jl	/^*(A::Adjoint{<:Any,<:AbstractVector}, B::Adjoint{<:Any,<:AbstractRotation}) = copy(A) * B$/;"	f
*	stdlib/LinearAlgebra/src/givens.jl	/^*(A::Adjoint{<:Any,<:RealHermSymComplexHerm}, B::Adjoint{<:Any,<:AbstractRotation}) = copy(A) * /;"	f
*	stdlib/LinearAlgebra/src/givens.jl	/^*(A::Diagonal, B::Adjoint{<:Any,<:AbstractRotation}) = A * copy(B)$/;"	f
*	stdlib/LinearAlgebra/src/givens.jl	/^*(A::Transpose{<:Any,<:AbstractMatrix}, B::Adjoint{<:Any,<:AbstractRotation}) = copy(A) * B$/;"	f
*	stdlib/LinearAlgebra/src/givens.jl	/^*(A::Transpose{<:Any,<:AbstractTriangular}, B::Adjoint{<:Any,<:AbstractRotation}) = copy(A) * B$/;"	f
*	stdlib/LinearAlgebra/src/givens.jl	/^*(A::Transpose{<:Any,<:AbstractVector}, B::Adjoint{<:Any,<:AbstractRotation}) = copy(A) * B$/;"	f
*	stdlib/LinearAlgebra/src/givens.jl	/^*(A::Transpose{<:Any,<:RealHermSymComplexSym}, B::Adjoint{<:Any,<:AbstractRotation}) = copy(A) */;"	f
*	stdlib/LinearAlgebra/src/givens.jl	/^*(G1::Givens{T}, G2::Givens{T}) where {T} = Rotation(push!(push!(Givens{T}[], G2), G1))$/;"	f
*	stdlib/LinearAlgebra/src/lq.jl	/^function *(A::LQPackedQ, adjB::Adjoint{<:Any,<:StridedVecOrMat})$/;"	f
*	stdlib/LinearAlgebra/src/lq.jl	/^function *(A::LQ{TA}, B::StridedVecOrMat{TB}) where {TA,TB}$/;"	f
*	stdlib/LinearAlgebra/src/lq.jl	/^function *(A::StridedVecOrMat, Q::LQPackedQ)$/;"	f
*	stdlib/LinearAlgebra/src/lq.jl	/^function *(A::StridedVecOrMat, adjQ::Adjoint{<:Any,<:LQPackedQ})$/;"	f
*	stdlib/LinearAlgebra/src/lq.jl	/^function *(adjA::Adjoint{<:Any,<:LQPackedQ}, B::StridedVecOrMat)$/;"	f
*	stdlib/LinearAlgebra/src/lq.jl	/^function *(adjA::Adjoint{<:Any,<:LQPackedQ}, adjB::Adjoint{<:Any,<:StridedVecOrMat})$/;"	f
*	stdlib/LinearAlgebra/src/lq.jl	/^function *(adjA::Adjoint{<:Any,<:StridedMatrix}, Q::LQPackedQ)$/;"	f
*	stdlib/LinearAlgebra/src/lq.jl	/^function *(adjA::Adjoint{<:Any,<:StridedMatrix}, adjQ::Adjoint{<:Any,<:LQPackedQ})$/;"	f
*	stdlib/LinearAlgebra/src/matmul.jl	/^(*)(a::AbstractVector, B::AbstractMatrix) = reshape(a,length(a),1)*B$/;"	f
*	stdlib/LinearAlgebra/src/matmul.jl	/^(*)(x::AdjointAbsVec,   A::AbstractMatrix) = (A'*x')'$/;"	f
*	stdlib/LinearAlgebra/src/matmul.jl	/^(*)(x::TransposeAbsVec, A::AbstractMatrix) = transpose(transpose(A)*transpose(x))$/;"	f
*	stdlib/LinearAlgebra/src/matmul.jl	/^function *(a::AbstractVector, adjB::Adjoint{<:Any,<:AbstractMatrix})$/;"	f
*	stdlib/LinearAlgebra/src/matmul.jl	/^function *(a::AbstractVector, transB::Transpose{<:Any,<:AbstractMatrix})$/;"	f
*	stdlib/LinearAlgebra/src/matmul.jl	/^function *(adjA::Adjoint{<:Any,<:AbstractMatrix{T}}, x::AbstractVector{S}) where {T,S}$/;"	f
*	stdlib/LinearAlgebra/src/matmul.jl	/^function *(adjA::Adjoint{<:Any,<:StridedMatrix{T}}, x::StridedVector{S}) where {T<:BlasFloat,S}$/;"	f
*	stdlib/LinearAlgebra/src/matmul.jl	/^function *(transA::Transpose{<:Any,<:AbstractMatrix{T}}, x::AbstractVector{S}) where {T,S}$/;"	f
*	stdlib/LinearAlgebra/src/matmul.jl	/^function *(transA::Transpose{<:Any,<:StridedMatrix{T}}, x::StridedVector{S}) where {T<:BlasFloat/;"	f
*	stdlib/LinearAlgebra/src/matmul.jl	/^function *(transx::Transpose{<:Any,<:StridedVector{T}}, y::StridedVector{T}) where {T<:BlasCompl/;"	f
*	stdlib/LinearAlgebra/src/qr.jl	/^*(u::AdjointAbsVec, A::Adjoint{<:Any,<:AbstractQ}) = adjoint(A.parent * u.parent)$/;"	f
*	stdlib/LinearAlgebra/src/qr.jl	/^function *(A::StridedMatrix, adjB::Adjoint{<:Any,<:AbstractQ})$/;"	f
*	stdlib/LinearAlgebra/src/qr.jl	/^function *(Q::AbstractQ, adjB::Adjoint{<:Any,<:StridedVecOrMat})$/;"	f
*	stdlib/LinearAlgebra/src/qr.jl	/^function *(adjA::Adjoint{<:Any,<:StridedVecOrMat}, Q::AbstractQ)$/;"	f
*	stdlib/LinearAlgebra/src/qr.jl	/^function *(adjA::Adjoint{<:Any,<:StridedVecOrMat}, adjQ::Adjoint{<:Any,<:AbstractQ})$/;"	f
*	stdlib/LinearAlgebra/src/qr.jl	/^function *(adjQ::Adjoint{<:Any,<:AbstractQ}, B::StridedVecOrMat)$/;"	f
*	stdlib/LinearAlgebra/src/qr.jl	/^function *(adjQ::Adjoint{<:Any,<:AbstractQ}, adjB::Adjoint{<:Any,<:StridedVecOrMat})$/;"	f
*	stdlib/LinearAlgebra/src/special.jl	/^*(A::AbstractTriangular, adjB::Adjoint{<:Any,<:Union{QRCompactWYQ,QRPackedQ}}) =$/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(A::AbstractMatrix, adjB::Adjoint{<:Any,<:RealHermSymComplexHerm}) = A * adjB.parent$/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(A::AbstractMatrix, transB::Transpose{<:Any,<:RealHermSymComplexSym}) = A * transB.parent$/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(A::AbstractTriangular, adjB::Adjoint{<:Any,<:RealHermSymComplexHerm}) = A * adjB.parent$/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(A::AbstractTriangular, transB::Transpose{<:Any,<:RealHermSymComplexSym}) = A * transB.parent$/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(A::Adjoint{<:Any,<:AbstractMatrix}, B::Adjoint{<:Any,<:RealHermSymComplexHerm}) = A * B.parent$/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(A::Adjoint{<:Any,<:AbstractMatrix}, B::Transpose{<:Any,<:RealHermSymComplexSym}) = A * B.paren/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(A::Adjoint{<:Any,<:AbstractTriangular}, B::Adjoint{<:Any,<:RealHermSymComplexHerm}) = A * B.pa/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(A::Adjoint{<:Any,<:AbstractTriangular}, B::Transpose{<:Any,<:RealHermSymComplexSym}) = A * B.p/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(A::Adjoint{<:Any,<:AbstractVector}, B::Adjoint{<:Any,<:RealHermSymComplexHerm}) = A * B.parent$/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(A::Adjoint{<:Any,<:AbstractVector}, B::Transpose{<:Any,<:RealHermSymComplexSym}) = A * B.paren/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(A::Adjoint{<:Any,<:RealHermSymComplexHerm}, B::Adjoint{<:Any,<:AbstractMatrix}) = A.parent * B$/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(A::Adjoint{<:Any,<:RealHermSymComplexHerm}, B::Adjoint{<:Any,<:AbstractTriangular}) = A.parent/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(A::Adjoint{<:Any,<:RealHermSymComplexHerm}, B::Adjoint{<:Any,<:AbstractVector}) = A.parent * B$/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(A::Adjoint{<:Any,<:RealHermSymComplexHerm}, B::Transpose{<:Any,<:AbstractMatrix}) = A.parent */;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(A::Adjoint{<:Any,<:RealHermSymComplexHerm}, B::Transpose{<:Any,<:AbstractTriangular}) = A.pare/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(A::Adjoint{<:Any,<:RealHermSymComplexHerm}, B::Transpose{<:Any,<:AbstractVector}) = A.parent */;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(A::Adjoint{<:Any,<:RealHermSymComplexHerm}, B::Transpose{<:Any,<:RealHermSymComplexSym}) = A.p/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(A::HermOrSym, B::HermOrSym) = A * copyto!(similar(parent(B)), B)$/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(A::Hermitian, x::Real) = Hermitian(A.data*x, sym_uplo(A.uplo))$/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(A::Symmetric, x::Number) = Symmetric(A.data*x, sym_uplo(A.uplo))$/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(A::Transpose{<:Any,<:AbstractMatrix}, B::Adjoint{<:Any,<:RealHermSymComplexHerm}) = A * B.pare/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(A::Transpose{<:Any,<:AbstractMatrix}, B::Transpose{<:Any,<:RealHermSymComplexSym}) = A * B.par/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(A::Transpose{<:Any,<:AbstractTriangular}, B::Adjoint{<:Any,<:RealHermSymComplexHerm}) = A * B./;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(A::Transpose{<:Any,<:AbstractTriangular}, B::Transpose{<:Any,<:RealHermSymComplexSym}) = A * B/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(A::Transpose{<:Any,<:AbstractVector}, B::Adjoint{<:Any,<:RealHermSymComplexHerm}) = A * B.pare/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(A::Transpose{<:Any,<:AbstractVector}, B::Transpose{<:Any,<:RealHermSymComplexSym}) = A * B.par/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(A::Transpose{<:Any,<:RealHermSymComplexSym}, B::Adjoint{<:Any,<:AbstractMatrix}) = A.parent * /;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(A::Transpose{<:Any,<:RealHermSymComplexSym}, B::Adjoint{<:Any,<:AbstractTriangular}) = A.paren/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(A::Transpose{<:Any,<:RealHermSymComplexSym}, B::Adjoint{<:Any,<:AbstractVector}) = A.parent * /;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(A::Transpose{<:Any,<:RealHermSymComplexSym}, B::Adjoint{<:Any,<:RealHermSymComplexHerm}) = A.p/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(A::Transpose{<:Any,<:RealHermSymComplexSym}, B::Transpose{<:Any,<:AbstractMatrix}) = A.parent /;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(A::Transpose{<:Any,<:RealHermSymComplexSym}, B::Transpose{<:Any,<:AbstractTriangular}) = A.par/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(A::Transpose{<:Any,<:RealHermSymComplexSym}, B::Transpose{<:Any,<:AbstractVector}) = A.parent /;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(adjA::Adjoint{<:Any,<:RealHermSymComplexHerm}, B::AbstractMatrix) = adjA.parent * B$/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(adjA::Adjoint{<:Any,<:RealHermSymComplexHerm}, B::AbstractTriangular) = adjA.parent * B$/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(adjA::Adjoint{<:Any,<:RealHermSymComplexHerm}, B::AbstractVector) = adjA.parent * B$/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(adjA::Adjoint{<:Any,<:RealHermSymComplexHerm}, adjB::Adjoint{<:Any,<:RealHermSymComplexHerm}) /;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(adjA::Adjoint{<:Any,<:RealHermSymComplexHerm}, adjB::Adjoint{<:Any,<:RealHermSymComplexSym}) =/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(adjA::Adjoint{<:Any,<:RealHermSymComplexHerm}, adjB::Adjoint{<:Any,<:RealHermSym}) = adjA.pare/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(adjA::Adjoint{<:Any,<:RealHermSymComplexSym}, adjB::Adjoint{<:Any,<:RealHermSymComplexHerm}) =/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(adjA::Adjoint{<:Any,<:RealHermSym}, adjB::Adjoint{<:Any,<:RealHermSymComplexHerm}) = adjA * ad/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(adjA::Adjoint{<:Any,<:RealHermSym}, adjB::Adjoint{<:Any,<:RealHermSym}) = adjA * adjB.parent$/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(transA::Transpose{<:Any,<:RealHermSymComplexHerm}, transB::Transpose{<:Any,<:RealHermSymComple/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(transA::Transpose{<:Any,<:RealHermSymComplexSym}, B::AbstractMatrix) = transA.parent * B$/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(transA::Transpose{<:Any,<:RealHermSymComplexSym}, B::AbstractTriangular) = transA.parent * B$/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(transA::Transpose{<:Any,<:RealHermSymComplexSym}, B::AbstractVector) = transA.parent * B$/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(transA::Transpose{<:Any,<:RealHermSymComplexSym}, transB::Transpose{<:Any,<:RealHermSymComplex/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(transA::Transpose{<:Any,<:RealHermSymComplexSym}, transB::Transpose{<:Any,<:RealHermSym}) = tr/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(transA::Transpose{<:Any,<:RealHermSym}, transB::Transpose{<:Any,<:RealHermSymComplexSym}) = tr/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(transA::Transpose{<:Any,<:RealHermSym}, transB::Transpose{<:Any,<:RealHermSym}) = transA * tra/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(x::Number, A::Symmetric) = Symmetric(x*A.data, sym_uplo(A.uplo))$/;"	f
*	stdlib/LinearAlgebra/src/symmetric.jl	/^*(x::Real, A::Hermitian) = Hermitian(x*A.data, sym_uplo(A.uplo))$/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^        (*)(A::$t, x::Number) = $t(A.data*x)$/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^        (*)(x::Number, A::$t) = $t(x*A.data)$/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^        function *(A::AbstractTriangular, B::$mat)$/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^        function *(adjA::Adjoint{<:Any,<:AbstractTriangular}, B::$mat)$/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^        function *(transA::Transpose{<:Any,<:AbstractTriangular}, B::$mat)$/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^*(A::AbstractTriangular, B::Adjoint{<:Any,<:AbstractMatrix}) = A * copy(B)$/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^*(A::AbstractTriangular, B::Adjoint{<:Any,<:AbstractVector}) = adjoint(adjoint(B) * adjoint(A))$/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^*(A::AbstractTriangular, B::Transpose{<:Any,<:AbstractMatrix}) = A * copy(B)$/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^*(A::AbstractTriangular, B::Transpose{<:Any,<:AbstractVector}) = transpose(transpose(B) * transp/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^*(A::Adjoint{<:Any,<:AbstractMatrix}, B::AbstractTriangular) = copy(A) * B$/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^*(A::Adjoint{<:Any,<:AbstractMatrix}, B::Adjoint{<:Any,<:AbstractTriangular}) = copy(A) * B$/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^*(A::Adjoint{<:Any,<:AbstractMatrix}, B::Transpose{<:Any,<:AbstractTriangular}) = copy(A) * B$/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^*(A::Adjoint{<:Any,<:AbstractTriangular}, B::Adjoint{<:Any,<:AbstractMatrix}) = A * copy(B)$/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^*(A::Adjoint{<:Any,<:AbstractTriangular}, B::Adjoint{<:Any,<:AbstractTriangular}) = A * copy(B)$/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^*(A::Adjoint{<:Any,<:AbstractTriangular}, B::Adjoint{<:Any,<:AbstractVector}) = adjoint(adjoint(/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^*(A::Adjoint{<:Any,<:AbstractTriangular}, B::Transpose{<:Any,<:AbstractMatrix}) = A * copy(B)$/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^*(A::Adjoint{<:Any,<:AbstractTriangular}, B::Transpose{<:Any,<:AbstractTriangular}) = copy(A) * /;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^*(A::Adjoint{<:Any,<:AbstractTriangular}, B::Transpose{<:Any,<:AbstractVector}) = transpose(tran/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^*(A::Adjoint{<:Any,<:AbstractVector}, B::Transpose{<:Any,<:AbstractTriangular}) = adjoint(adjoin/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^*(A::Transpose{<:Any,<:AbstractMatrix}, B::AbstractTriangular) = copy(A) * B$/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^*(A::Transpose{<:Any,<:AbstractMatrix}, B::Adjoint{<:Any,<:AbstractTriangular}) = copy(A) * B$/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^*(A::Transpose{<:Any,<:AbstractMatrix}, B::Transpose{<:Any,<:AbstractTriangular}) = copy(A) * B$/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^*(A::Transpose{<:Any,<:AbstractTriangular}, B::Adjoint{<:Any,<:AbstractMatrix}) = A * copy(B)$/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^*(A::Transpose{<:Any,<:AbstractTriangular}, B::Adjoint{<:Any,<:AbstractTriangular}) = copy(A) * /;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^*(A::Transpose{<:Any,<:AbstractTriangular}, B::Adjoint{<:Any,<:AbstractVector}) = adjoint(adjoin/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^*(A::Transpose{<:Any,<:AbstractTriangular}, B::Transpose{<:Any,<:AbstractMatrix}) = A * copy(B)$/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^*(A::Transpose{<:Any,<:AbstractTriangular}, B::Transpose{<:Any,<:AbstractTriangular}) = A * copy/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^*(A::Transpose{<:Any,<:AbstractTriangular}, B::Transpose{<:Any,<:AbstractVector}) = transpose(tr/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^*(A::Transpose{<:Any,<:AbstractVector}, B::Adjoint{<:Any,<:AbstractTriangular}) = transpose(tran/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^*(v::AdjointAbsVec, A::AbstractTriangular) = adjoint(adjoint(A) * v.parent)$/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^*(v::AdjointAbsVec, A::Adjoint{<:Any,<:AbstractTriangular}) = adjoint(A.parent * v.parent)$/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^*(v::TransposeAbsVec, A::AbstractTriangular) = transpose(transpose(A) * v.parent)$/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^*(v::TransposeAbsVec, A::Transpose{<:Any,<:AbstractTriangular}) = transpose(A.parent * v.parent)$/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^function *(A::AbstractMatrix, B::AbstractTriangular)$/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^function *(A::AbstractMatrix, adjB::Adjoint{<:Any,<:AbstractTriangular})$/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^function *(A::AbstractMatrix, transB::Transpose{<:Any,<:AbstractTriangular})$/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^function *(A::AbstractTriangular, B::AbstractTriangular)$/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^function *(A::AbstractTriangular, adjB::Adjoint{<:Any,<:AbstractTriangular})$/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^function *(A::AbstractTriangular, transB::Transpose{<:Any,<:AbstractTriangular})$/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^function *(adjA::Adjoint{<:Any,<:AbstractTriangular}, B::AbstractTriangular)$/;"	f
*	stdlib/LinearAlgebra/src/triangular.jl	/^function *(transA::Transpose{<:Any,<:AbstractTriangular}, B::AbstractTriangular)$/;"	f
*	stdlib/LinearAlgebra/src/tridiag.jl	/^*(A::SymTridiagonal, B::Number) = SymTridiagonal(A.dv*B, A.ev*B)$/;"	f
*	stdlib/LinearAlgebra/src/tridiag.jl	/^*(A::Tridiagonal, B::Number) = Tridiagonal(A.dl*B, A.d*B, A.du*B)$/;"	f
*	stdlib/LinearAlgebra/src/tridiag.jl	/^*(B::Number, A::SymTridiagonal) = A*B$/;"	f
*	stdlib/LinearAlgebra/src/tridiag.jl	/^*(B::Number, A::Tridiagonal) = A*B$/;"	f
*	stdlib/LinearAlgebra/src/uniformscaling.jl	/^*(A::AbstractMatrix, J::UniformScaling) = A*J.λ$/;"	f
*	stdlib/LinearAlgebra/src/uniformscaling.jl	/^*(B::BitArray{2}, J::UniformScaling) = *(Array(B), J::UniformScaling)$/;"	f
*	stdlib/LinearAlgebra/src/uniformscaling.jl	/^*(J1::UniformScaling, J2::UniformScaling) = UniformScaling(J1.λ*J2.λ)$/;"	f
*	stdlib/LinearAlgebra/src/uniformscaling.jl	/^*(J::UniformScaling, A::AbstractVecOrMat) = J.λ*A$/;"	f
*	stdlib/LinearAlgebra/src/uniformscaling.jl	/^*(J::UniformScaling, B::BitArray{2}) = *(J::UniformScaling, Array(B))$/;"	f
*	stdlib/LinearAlgebra/src/uniformscaling.jl	/^*(J::UniformScaling, x::Number) = UniformScaling(J.λ*x)$/;"	f
*	stdlib/LinearAlgebra/src/uniformscaling.jl	/^*(x::Number, J::UniformScaling) = UniformScaling(x*J.λ)$/;"	f
*	stdlib/LinearAlgebra/test/matmul.jl	/^    (*)(a::TypeA, x::Int) = TypeB(a.x*x)$/;"	f
*	stdlib/LinearAlgebra/test/matmul.jl	/^    (*)(x::Int, a::TypeA) = TypeB(x*a.x)$/;"	f
*	stdlib/LinearAlgebra/test/matmul.jl	/^(*)(x::RootInt, y::RootInt) = x.i*y.i$/;"	f
*	stdlib/SparseArrays/src/SparseArrays.jl	/^function *(A::BiTriSym, B::BiTriSym)$/;"	f
*	stdlib/SparseArrays/src/linalg.jl	/^(*)(L::TriangularSparse, B::AbstractSparseMatrixCSC) = lmul!(L, Array(B))$/;"	f
*	stdlib/SparseArrays/src/linalg.jl	/^*(A::AbstractSparseMatrixCSC{TA,S}, B::StridedMatrix{Tx}) where {TA,S,Tx} =$/;"	f
*	stdlib/SparseArrays/src/linalg.jl	/^*(A::AbstractSparseMatrixCSC{TA,S}, x::StridedVector{Tx}) where {TA,S,Tx} =$/;"	f
*	stdlib/SparseArrays/src/linalg.jl	/^*(A::AbstractSparseMatrixCSC{Tv,Ti}, B::AbstractSparseMatrixCSC{Tv,Ti}) where {Tv,Ti} = spmatmul/;"	f
*	stdlib/SparseArrays/src/linalg.jl	/^*(A::AbstractSparseMatrixCSC{Tv,Ti}, B::Adjoint{<:Any,<:AbstractSparseMatrixCSC{Tv,Ti}}) where {/;"	f
*	stdlib/SparseArrays/src/linalg.jl	/^*(A::AbstractSparseMatrixCSC{Tv,Ti}, B::Transpose{<:Any,<:AbstractSparseMatrixCSC{Tv,Ti}}) where/;"	f
*	stdlib/SparseArrays/src/linalg.jl	/^*(A::AbstractSparseMatrixCSC{TvA,TiA}, B::AbstractSparseMatrixCSC{TvB,TiB}) where {TvA,TiA,TvB,T/;"	f
*	stdlib/SparseArrays/src/linalg.jl	/^*(A::AbstractSparseMatrixCSC{TvA,TiA}, adjB::Adjoint{<:Any,<:AbstractSparseMatrixCSC{TvB,TiB}}) /;"	f
*	stdlib/SparseArrays/src/linalg.jl	/^*(A::AbstractSparseMatrixCSC{TvA,TiA}, transB::Transpose{<:Any,<:AbstractSparseMatrixCSC{TvB,TiB/;"	f
*	stdlib/SparseArrays/src/linalg.jl	/^*(A::Adjoint{<:Any,<:AbstractSparseMatrixCSC{Tv,Ti}}, B::AbstractSparseMatrixCSC{Tv,Ti}) where {/;"	f
*	stdlib/SparseArrays/src/linalg.jl	/^*(A::Adjoint{<:Any,<:AbstractSparseMatrixCSC{Tv,Ti}}, B::Adjoint{<:Any,<:AbstractSparseMatrixCSC/;"	f
*	stdlib/SparseArrays/src/linalg.jl	/^*(A::Transpose{<:Any,<:AbstractSparseMatrixCSC{Tv,Ti}}, B::AbstractSparseMatrixCSC{Tv,Ti}) where/;"	f
*	stdlib/SparseArrays/src/linalg.jl	/^*(A::Transpose{<:Any,<:AbstractSparseMatrixCSC{Tv,Ti}}, B::Transpose{<:Any,<:AbstractSparseMatri/;"	f
*	stdlib/SparseArrays/src/linalg.jl	/^*(X::AdjOrTransStridedMatrix{TX}, A::AbstractSparseMatrixCSC{TvA,TiA}) where {TX,TvA,TiA} =$/;"	f
*	stdlib/SparseArrays/src/linalg.jl	/^*(X::AdjOrTransStridedMatrix{TX}, adjA::Adjoint{<:Any,<:AbstractSparseMatrixCSC{TvA,TiA}}) where/;"	f
*	stdlib/SparseArrays/src/linalg.jl	/^*(X::AdjOrTransStridedMatrix{TX}, transA::Transpose{<:Any,<:AbstractSparseMatrixCSC{TvA,TiA}}) w/;"	f
*	stdlib/SparseArrays/src/linalg.jl	/^*(adjA::Adjoint{<:Any,<:AbstractSparseMatrixCSC{TA,S}}, B::AdjOrTransStridedMatrix{Tx}) where {T/;"	f
*	stdlib/SparseArrays/src/linalg.jl	/^*(adjA::Adjoint{<:Any,<:AbstractSparseMatrixCSC{TA,S}}, x::StridedVector{Tx}) where {TA,S,Tx} =$/;"	f
*	stdlib/SparseArrays/src/linalg.jl	/^*(adjA::Adjoint{<:Any,<:AbstractSparseMatrixCSC{TvA,TiA}}, B::AbstractSparseMatrixCSC{TvB,TiB}) /;"	f
*	stdlib/SparseArrays/src/linalg.jl	/^*(adjA::Adjoint{<:Any,<:AbstractSparseMatrixCSC{TvA,TiA}}, adjB::Adjoint{<:Any,<:AbstractSparseM/;"	f
*	stdlib/SparseArrays/src/linalg.jl	/^*(transA::Transpose{<:Any,<:AbstractSparseMatrixCSC{TA,S}}, B::AdjOrTransStridedMatrix{Tx}) wher/;"	f
*	stdlib/SparseArrays/src/linalg.jl	/^*(transA::Transpose{<:Any,<:AbstractSparseMatrixCSC{TA,S}}, x::StridedVector{Tx}) where {TA,S,Tx/;"	f
*	stdlib/SparseArrays/src/linalg.jl	/^*(transA::Transpose{<:Any,<:AbstractSparseMatrixCSC{TvA,TiA}}, B::AbstractSparseMatrixCSC{TvB,Ti/;"	f
*	stdlib/SparseArrays/src/linalg.jl	/^*(transA::Transpose{<:Any,<:AbstractSparseMatrixCSC{TvA,TiA}}, transB::Transpose{<:Any,<:Abstrac/;"	f
*	stdlib/SparseArrays/src/sparsevector.jl	/^(*)(a::Number, x::SparseVectorUnion) = SparseVector(length(x), copy(nonzeroinds(x)), a * nonzero/;"	f
*	stdlib/SparseArrays/src/sparsevector.jl	/^(*)(x::SparseVectorUnion, a::Number) = SparseVector(length(x), copy(nonzeroinds(x)), nonzeros(x)/;"	f
*	stdlib/SparseArrays/src/sparsevector.jl	/^*(adjA::Adjoint{<:Any,<:AbstractSparseMatrixCSC}, x::AbstractSparseVector) =$/;"	f
*	stdlib/SparseArrays/src/sparsevector.jl	/^*(transA::Transpose{<:Any,<:AbstractSparseMatrixCSC}, x::AbstractSparseVector) =$/;"	f
*	stdlib/SparseArrays/src/sparsevector.jl	/^function *(A::AbstractSparseMatrixCSC, x::AbstractSparseVector)$/;"	f
*	stdlib/SparseArrays/src/sparsevector.jl	/^function *(adjA::Adjoint{<:Any,<:StridedMatrix{Ta}}, x::AbstractSparseVector{Tx}) where {Ta,Tx}$/;"	f
*	stdlib/SparseArrays/src/sparsevector.jl	/^function *(transA::Transpose{<:Any,<:StridedMatrix{Ta}}, x::AbstractSparseVector{Tx}) where {Ta,/;"	f
*	stdlib/SuiteSparse/src/cholmod.jl	/^(*)(A::Sparse, B::Dense) = sdmult!(A, false, 1., 0., B, zeros(size(A, 1), size(B, 2)))$/;"	f
*	stdlib/SuiteSparse/src/cholmod.jl	/^(*)(A::Sparse, B::Sparse) = ssmult(A, B, 0, true, true)$/;"	f
*	stdlib/SuiteSparse/src/cholmod.jl	/^(*)(A::Sparse, B::VecOrMat) = (*)(A, Dense(B))$/;"	f
*	stdlib/SuiteSparse/src/cholmod.jl	/^*(adjA::Adjoint{<:Any,<:Sparse}, B::Dense) =$/;"	f
*	stdlib/SuiteSparse/src/cholmod.jl	/^*(adjA::Adjoint{<:Any,<:Sparse}, B::VecOrMat) =$/;"	f
*	stdlib/SuiteSparse/src/cholmod.jl	/^function *(A::Sparse{Tv}, adjB::Adjoint{Tv,Sparse{Tv}}) where Tv<:VRealTypes$/;"	f
*	stdlib/SuiteSparse/src/cholmod.jl	/^function *(adjA::Adjoint{<:Any,<:Sparse}, B::Sparse)$/;"	f
*	test/arrayops.jl	/^    (*)(x::Int, y::MeterUnits{T,pow}) where {T,pow} = MeterUnits{typeof(x*one(T)),pow}(x*y.val)$/;"	f
*	test/arrayops.jl	/^    (*)(x::MeterUnits{T,1}, y::MeterUnits{T,1}) where {T} = MeterUnits{T,2}(x.val*y.val)$/;"	f
*	test/core.jl	/^*(x::SI{m1, s1, kg1}, y::SI{m2, s2, kg2}) where {m1, m2, s1, s2, kg1, kg2} = SI{m1 + m2, s1 + s2/;"	f
*banner*	src/flisp/system.lsp	/^(define *banner* (string.tail "$/;"	f
*builtins*	src/flisp/system.lsp	/^(define *builtins*$/;"	f
*current-gensyms*	src/ast.scm	/^(define *current-gensyms* '())$/;"	f
*depwarn-opt*	src/jlfrontend.scm	/^(define *depwarn-opt* 1)$/;"	f
*gensy-counter*	src/ast.scm	/^(define *gensy-counter* 1)$/;"	f
*gensyms*	src/ast.scm	/^(define *gensyms* '())$/;"	f
*in-expand*	src/jlfrontend.scm	/^(define *in-expand* #f)$/;"	f
*very-linear-mode*	src/julia-syntax.scm	/^(define *very-linear-mode* #t)$/;"	f
*ₛ	stdlib/LinearAlgebra/src/diagonal.jl	/^function *ₛ end$/;"	f
+	base/abstractarraymath.jl	/^+(x::AbstractArray{<:Number}) = x$/;"	f
+	base/arraymath.jl	/^function +(A::Array, Bs::Array...)$/;"	f
+	base/bool.jl	/^+(x::Bool) =  Int(x)$/;"	f
+	base/bool.jl	/^+(x::Bool, y::Bool) = Int(x) + Int(y)$/;"	f
+	base/bool.jl	/^+(y::AbstractFloat, x::Bool) = x + y$/;"	f
+	base/bool.jl	/^function +(x::Bool, y::T)::promote_type(Bool,T) where T<:AbstractFloat$/;"	f
+	base/char.jl	/^@inline +(x::Integer, y::AbstractChar) = y + x$/;"	f
+	base/char.jl	/^@inline +(x::T, y::Integer) where {T<:AbstractChar} = T(Int32(x) + Int32(y))$/;"	f
+	base/complex.jl	/^+(x::Bool, z::Complex) = Complex(x + real(z), imag(z))$/;"	f
+	base/complex.jl	/^+(x::Bool, z::Complex{Bool}) = Complex(x + real(z), imag(z))$/;"	f
+	base/complex.jl	/^+(x::Real, z::Complex) = Complex(x + real(z), imag(z))$/;"	f
+	base/complex.jl	/^+(x::Real, z::Complex{Bool}) = Complex(x + real(z), imag(z))$/;"	f
+	base/complex.jl	/^+(z::Complex) = Complex(+real(z), +imag(z))$/;"	f
+	base/complex.jl	/^+(z::Complex, w::Complex) = Complex(real(z) + real(w), imag(z) + imag(w))$/;"	f
+	base/complex.jl	/^+(z::Complex, x::Bool) = Complex(real(z) + x, imag(z))$/;"	f
+	base/complex.jl	/^+(z::Complex, x::Real) = Complex(x + real(z), imag(z))$/;"	f
+	base/complex.jl	/^+(z::Complex{Bool}, x::Bool) = Complex(real(z) + x, imag(z))$/;"	f
+	base/complex.jl	/^+(z::Complex{Bool}, x::Real) = Complex(real(z) + x, imag(z))$/;"	f
+	base/float.jl	/^+(x::Float32, y::Float32) = add_float(x, y)$/;"	f
+	base/float.jl	/^+(x::Float64, y::Float64) = add_float(x, y)$/;"	f
+	base/gmp.jl	/^+(c::ClongMax, x::BigInt) = c < 0 ? -(x, -(c % Culong)) : x + convert(Culong, c)$/;"	f
+	base/gmp.jl	/^+(c::CulongMax, x::BigInt) = x + c$/;"	f
+	base/gmp.jl	/^+(x::BigInt, c::ClongMax) = c < 0 ? -(x, -(c % Culong)) : x + convert(Culong, c)$/;"	f
+	base/gmp.jl	/^+(x::BigInt, c::CulongMax) = MPZ.add_ui(x, c)$/;"	f
+	base/int.jl	/^(+)(x::T, y::T) where {T<:BitInteger} = add_int(x, y)$/;"	f
+	base/logging.jl	/^+(level::LogLevel, inc::Integer) = LogLevel(level.level+inc)$/;"	f
+	base/multidimensional.jl	/^    @inline (+)(index1::CartesianIndex{N}, index2::CartesianIndex{N}) where {N} =$/;"	f
+	base/operators.jl	/^+(x::Number) = x$/;"	f
+	base/pointer.jl	/^+(x::Integer, y::Ptr) = y + x$/;"	f
+	base/pointer.jl	/^+(x::Ptr, y::Integer) = oftype(x, add_ptr(UInt(x), (y % UInt) % UInt))$/;"	f
+	base/promotion.jl	/^(+)(x::T, y::T) where {T<:Number} = no_op_err("+", T)$/;"	f
+	base/promotion.jl	/^+(x::Number, y::Number) = +(promote(x,y)...)$/;"	f
+	base/range.jl	/^function +(r1::StepRangeLen{T,S}, r2::StepRangeLen{T,S}) where {T,S}$/;"	f
+	base/rational.jl	/^+(x::Rational) = (+x.num) \/\/ x.den$/;"	f
+	base/twiceprecision.jl	/^+(x::Number, y::TwicePrecision) = y+x$/;"	f
+	base/twiceprecision.jl	/^+(x::TwicePrecision, y::TwicePrecision) = +(promote(x, y)...)$/;"	f
+	base/twiceprecision.jl	/^function +(r1::StepRangeLen{T,R}, r2::StepRangeLen{T,R}) where T where R<:TwicePrecision$/;"	f
+	base/twiceprecision.jl	/^function +(x::TwicePrecision, y::Number)$/;"	f
+	base/twiceprecision.jl	/^function +(x::TwicePrecision{T}, y::TwicePrecision{T}) where T$/;"	f
+	stdlib/Dates/src/arithmetic.jl	/^(+)(dt::Date, t::Time) = DateTime(dt ,t)$/;"	f
+	stdlib/Dates/src/arithmetic.jl	/^(+)(t::Time, dt::Date) = DateTime(dt, t)$/;"	f
+	stdlib/Dates/src/arithmetic.jl	/^(+)(x::Date, y::Day)  = return Date(UTD(value(x) + value(y)))$/;"	f
+	stdlib/Dates/src/arithmetic.jl	/^(+)(x::Date, y::Week) = return Date(UTD(value(x) + 7 * value(y)))$/;"	f
+	stdlib/Dates/src/arithmetic.jl	/^(+)(x::DateTime, y::Period) = return DateTime(UTM(value(x) + toms(y)))$/;"	f
+	stdlib/Dates/src/arithmetic.jl	/^(+)(x::Instant) = x$/;"	f
+	stdlib/Dates/src/arithmetic.jl	/^(+)(x::Time, y::TimePeriod) = return Time(Nanosecond(value(x) + tons(y)))$/;"	f
+	stdlib/Dates/src/arithmetic.jl	/^(+)(x::TimeType) = x$/;"	f
+	stdlib/Dates/src/arithmetic.jl	/^(+)(y::Period, x::TimeType) = x + y$/;"	f
+	stdlib/Dates/src/periods.jl	/^(+)(a::TimeType, b::Period, c::Period) = (+)(a, b + c)$/;"	f
+	stdlib/Dates/src/periods.jl	/^(+)(a::TimeType, b::Period, c::Period, d::Period...) = (+)((+)(a, b + c), d...)$/;"	f
+	stdlib/Dates/src/periods.jl	/^(+)(x::CompoundPeriod, y::CompoundPeriod) = CompoundPeriod(vcat(x.periods, y.periods))$/;"	f
+	stdlib/Dates/src/periods.jl	/^(+)(x::CompoundPeriod, y::Period) = CompoundPeriod(vcat(x.periods, y))$/;"	f
+	stdlib/Dates/src/periods.jl	/^(+)(x::CompoundPeriod, y::TimeType) = y + x$/;"	f
+	stdlib/Dates/src/periods.jl	/^(+)(x::GeneralPeriod) = x$/;"	f
+	stdlib/Dates/src/periods.jl	/^(+)(x::Period,y::Period) = CompoundPeriod(Period[x, y])$/;"	f
+	stdlib/Dates/src/periods.jl	/^(+)(y::Period, x::CompoundPeriod) = x + y$/;"	f
+	stdlib/Dates/src/ranges.jl	/^+(r::AbstractRange{<:TimeType}, x::Period) = x + r$/;"	f
+	stdlib/Dates/src/ranges.jl	/^+(x::Period, r::AbstractRange{<:TimeType}) = (x + first(r)):step(r):(x + last(r))$/;"	f
+	stdlib/LinearAlgebra/src/bidiag.jl	/^function +(A::Bidiagonal, B::Bidiagonal)$/;"	f
+	stdlib/LinearAlgebra/src/diagonal.jl	/^(+)(Da::Diagonal, Db::Diagonal) = Diagonal(Da.diag + Db.diag)$/;"	f
+	stdlib/LinearAlgebra/src/hessenberg.jl	/^+(A::UpperHessenberg, B::UpperHessenberg) = UpperHessenberg(A.data+B.data)$/;"	f
+	stdlib/LinearAlgebra/src/hessenberg.jl	/^+(F::Hessenberg, J::UniformScaling) = Hessenberg(F, F.μ + J.λ)$/;"	f
+	stdlib/LinearAlgebra/src/hessenberg.jl	/^+(H::UpperHessenberg, J::UniformScaling) = UpperHessenberg(H.data + J)$/;"	f
+	stdlib/LinearAlgebra/src/hessenberg.jl	/^+(J::UniformScaling, F::Hessenberg) = Hessenberg(F, J.λ + F.μ)$/;"	f
+	stdlib/LinearAlgebra/src/special.jl	/^+(A::SymTridiagonal, B::Tridiagonal) = Tridiagonal(A.ev+B.dl, A.dv+B.d, A.ev+B.du)$/;"	f
+	stdlib/LinearAlgebra/src/special.jl	/^+(A::Tridiagonal, B::SymTridiagonal) = Tridiagonal(A.dl+B.ev, A.d+B.dv, A.du+B.ev)$/;"	f
+	stdlib/LinearAlgebra/src/triangular.jl	/^+(A::AbstractTriangular, B::AbstractTriangular) = copyto!(similar(parent(A)), A) + copyto!(simil/;"	f
+	stdlib/LinearAlgebra/src/triangular.jl	/^+(A::LowerTriangular, B::LowerTriangular) = LowerTriangular(A.data + B.data)$/;"	f
+	stdlib/LinearAlgebra/src/triangular.jl	/^+(A::LowerTriangular, B::UnitLowerTriangular) = LowerTriangular(A.data + tril(B.data, -1) + I)$/;"	f
+	stdlib/LinearAlgebra/src/triangular.jl	/^+(A::UnitLowerTriangular, B::LowerTriangular) = LowerTriangular(tril(A.data, -1) + B.data + I)$/;"	f
+	stdlib/LinearAlgebra/src/triangular.jl	/^+(A::UnitLowerTriangular, B::UnitLowerTriangular) = LowerTriangular(tril(A.data, -1) + tril(B.da/;"	f
+	stdlib/LinearAlgebra/src/triangular.jl	/^+(A::UnitUpperTriangular, B::UnitUpperTriangular) = UpperTriangular(triu(A.data, 1) + triu(B.dat/;"	f
+	stdlib/LinearAlgebra/src/triangular.jl	/^+(A::UnitUpperTriangular, B::UpperTriangular) = UpperTriangular(triu(A.data, 1) + B.data + I)$/;"	f
+	stdlib/LinearAlgebra/src/triangular.jl	/^+(A::UpperTriangular, B::UnitUpperTriangular) = UpperTriangular(A.data + triu(B.data, 1) + I)$/;"	f
+	stdlib/LinearAlgebra/src/triangular.jl	/^+(A::UpperTriangular, B::UpperTriangular) = UpperTriangular(A.data + B.data)$/;"	f
+	stdlib/LinearAlgebra/src/tridiag.jl	/^+(A::SymTridiagonal, B::SymTridiagonal) = SymTridiagonal(A.dv+B.dv, A.ev+B.ev)$/;"	f
+	stdlib/LinearAlgebra/src/tridiag.jl	/^+(A::Tridiagonal, B::Tridiagonal) = Tridiagonal(A.dl+B.dl, A.d+B.d, A.du+B.du)$/;"	f
+	stdlib/LinearAlgebra/src/uniformscaling.jl	/^(+)(B::BitArray{2}, J::UniformScaling)      = Array(B) + J$/;"	f
+	stdlib/LinearAlgebra/src/uniformscaling.jl	/^(+)(J1::UniformScaling, J2::UniformScaling) = UniformScaling(J1.λ+J2.λ)$/;"	f
+	stdlib/LinearAlgebra/src/uniformscaling.jl	/^(+)(J::UniformScaling, A::AbstractMatrix)   = A + J$/;"	f
+	stdlib/LinearAlgebra/src/uniformscaling.jl	/^(+)(J::UniformScaling, B::BitArray{2})      = J + Array(B)$/;"	f
+	stdlib/LinearAlgebra/src/uniformscaling.jl	/^(+)(J::UniformScaling, x::Number) = J.λ + x$/;"	f
+	stdlib/LinearAlgebra/src/uniformscaling.jl	/^(+)(x::Number, J::UniformScaling) = x + J.λ$/;"	f
+	stdlib/LinearAlgebra/test/matmul.jl	/^    (+)(a::Union{TypeB,TypeC}, b::Union{TypeB,TypeC}) = TypeC(a.x+b.x)$/;"	f
+	stdlib/SparseArrays/src/sparsematrix.jl	/^(+)(A::AbstractSparseMatrixCSC, B::AbstractSparseMatrixCSC) = map(+, A, B)$/;"	f
+	stdlib/SparseArrays/src/sparsematrix.jl	/^(+)(A::AbstractSparseMatrixCSC, B::Array) = Array(A) + B$/;"	f
+	stdlib/SparseArrays/src/sparsematrix.jl	/^(+)(A::AbstractSparseMatrixCSC, J::UniformScaling) = A + sparse(J, size(A)...)$/;"	f
+	stdlib/SparseArrays/src/sparsematrix.jl	/^(+)(A::Array, B::AbstractSparseMatrixCSC) = A + Array(B)$/;"	f
+	test/arrayops.jl	/^    (+)(x::MeterUnits{T,pow}, y::MeterUnits{T,pow}) where {T,pow} = MeterUnits{T,pow}(x.val+y.va/;"	f
+	test/core.jl	/^+(a::type_1{T}, b::type_1{T}) where {T <: Number} = a$/;"	f
+	test/core.jl	/^+(x::A6142, y::AbstractArray) = "AbstractArray method called"$/;"	f
+	test/core.jl	/^+(x::A6142, y::AbstractRange) = "AbstractRange method called" #16324 ambiguity$/;"	f
+	test/core.jl	/^+(x::A6142, y::UniformScaling) = "UniformScaling method called"$/;"	f
+	test/errorshow.jl	/^+() = nothing$/;"	f
+	test/llvmcall.jl	/^    function +(x::Int32, y::Int32)$/;"	f
+	test/show.jl	/^function + end$/;"	f
-	base/bool.jl	/^-(x::Bool) = -Int(x)$/;"	f
-	base/bool.jl	/^-(x::Bool, y::Bool) = Int(x) - Int(y)$/;"	f
-	base/char.jl	/^@inline -(x::AbstractChar, y::AbstractChar) = Int(x) - Int(y)$/;"	f
-	base/char.jl	/^@inline -(x::T, y::Integer) where {T<:AbstractChar} = T(Int32(x) - Int32(y))$/;"	f
-	base/complex.jl	/^-(x::Bool, z::Complex) = Complex(x - real(z), - imag(z))$/;"	f
-	base/complex.jl	/^-(x::Bool, z::Complex{Bool}) = Complex(x - real(z), - imag(z))$/;"	f
-	base/complex.jl	/^-(z::Complex) = Complex(-real(z), -imag(z))$/;"	f
-	base/complex.jl	/^-(z::Complex, w::Complex) = Complex(real(z) - real(w), imag(z) - imag(w))$/;"	f
-	base/complex.jl	/^-(z::Complex, x::Bool) = Complex(real(z) - x, imag(z))$/;"	f
-	base/complex.jl	/^-(z::Complex, x::Real) = Complex(real(z) - x, imag(z))$/;"	f
-	base/complex.jl	/^-(z::Complex{Bool}, x::Bool) = Complex(real(z) - x, imag(z))$/;"	f
-	base/complex.jl	/^-(z::Complex{Bool}, x::Real) = Complex(real(z) - x, imag(z))$/;"	f
-	base/complex.jl	/^function -(x::Real, z::Complex)$/;"	f
-	base/complex.jl	/^function -(x::Real, z::Complex{Bool})$/;"	f
-	base/float.jl	/^-(x::Float16) = reinterpret(Float16, reinterpret(UInt16, x) ⊻ 0x8000)$/;"	f
-	base/float.jl	/^-(x::Float32) = neg_float(x)$/;"	f
-	base/float.jl	/^-(x::Float32, y::Float32) = sub_float(x, y)$/;"	f
-	base/float.jl	/^-(x::Float64) = neg_float(x)$/;"	f
-	base/float.jl	/^-(x::Float64, y::Float64) = sub_float(x, y)$/;"	f
-	base/gmp.jl	/^(-)(x::BigInt) = MPZ.neg(x)$/;"	f
-	base/gmp.jl	/^-(c::ClongMax, x::BigInt) = c < 0 ? -(x + -(c % Culong)) : -(convert(Culong, c), x)$/;"	f
-	base/gmp.jl	/^-(c::CulongMax, x::BigInt) = MPZ.ui_sub(c, x)$/;"	f
-	base/gmp.jl	/^-(x::BigInt, c::ClongMax) = c < 0 ? +(x, -(c % Culong)) : -(x, convert(Culong, c))$/;"	f
-	base/gmp.jl	/^-(x::BigInt, c::CulongMax) = MPZ.sub_ui(x, c)$/;"	f
-	base/grisu/float.jl	/^(-)(a::Float,b::Float) = Float(a.s - b.s,a.e,a.de)$/;"	f
-	base/int.jl	/^(-)(x::BitInteger)                    = neg_int(x)$/;"	f
-	base/int.jl	/^(-)(x::T, y::T) where {T<:BitInteger} = sub_int(x, y)$/;"	f
-	base/irrationals.jl	/^-(x::AbstractIrrational) = -Float64(x)$/;"	f
-	base/logging.jl	/^-(level::LogLevel, inc::Integer) = LogLevel(level.level-inc)$/;"	f
-	base/mpfr.jl	/^function -(c::BigInt, x::BigFloat)$/;"	f
-	base/mpfr.jl	/^function -(x::BigFloat)$/;"	f
-	base/multidimensional.jl	/^    @inline (-)(index1::CartesianIndex{N}, index2::CartesianIndex{N}) where {N} =$/;"	f
-	base/multidimensional.jl	/^    @inline (-)(index::CartesianIndex{N}) where {N} =$/;"	f
-	base/pointer.jl	/^-(x::Ptr,  y::Ptr) = UInt(x) - UInt(y)$/;"	f
-	base/pointer.jl	/^-(x::Ptr, y::Integer) = oftype(x, sub_ptr(UInt(x), (y % UInt) % UInt))$/;"	f
-	base/promotion.jl	/^(-)(x::T, y::T) where {T<:Number} = no_op_err("-", T)$/;"	f
-	base/promotion.jl	/^-(x::Number, y::Number) = -(promote(x,y)...)$/;"	f
-	base/range.jl	/^-(r1::StepRangeLen, r2::StepRangeLen) = +(r1, -r2)$/;"	f
-	base/range.jl	/^-(r::LinRange) = LinRange(-r.start, -r.stop, length(r))$/;"	f
-	base/range.jl	/^-(r::OrdinalRange) = range(-first(r), step=-step(r), length=length(r))$/;"	f
-	base/range.jl	/^-(r::StepRangeLen{T,R,S}) where {T,R,S} =$/;"	f
-	base/rational.jl	/^-(x::Rational) = (-x.num) \/\/ x.den$/;"	f
-	base/rational.jl	/^function -(x::Rational{T}) where T<:BitSigned$/;"	f
-	base/rational.jl	/^function -(x::Rational{T}) where T<:Unsigned$/;"	f
-	base/twiceprecision.jl	/^-(x::Number, y::TwicePrecision) = x + (-y)$/;"	f
-	base/twiceprecision.jl	/^-(x::TwicePrecision) = TwicePrecision(-x.hi, -x.lo)$/;"	f
-	base/twiceprecision.jl	/^-(x::TwicePrecision, y::Number) = x + (-y)$/;"	f
-	base/twiceprecision.jl	/^-(x::TwicePrecision, y::TwicePrecision) = x + (-y)$/;"	f
-	stdlib/Dates/src/arithmetic.jl	/^(-)(x::AbstractRange{T}, y::AbstractRange{T}) where {T<:TimeType} = Vector(x) - Vector(y)$/;"	f
-	stdlib/Dates/src/arithmetic.jl	/^(-)(x::Date, y::Day)  = return Date(UTD(value(x) - value(y)))$/;"	f
-	stdlib/Dates/src/arithmetic.jl	/^(-)(x::Date, y::Week) = return Date(UTD(value(x) - 7 * value(y)))$/;"	f
-	stdlib/Dates/src/arithmetic.jl	/^(-)(x::DateTime, y::Period) = return DateTime(UTM(value(x) - toms(y)))$/;"	f
-	stdlib/Dates/src/arithmetic.jl	/^(-)(x::OrdinalRange{T}, y::OrdinalRange{T}) where {T<:TimeType} = Vector(x) - Vector(y)$/;"	f
-	stdlib/Dates/src/arithmetic.jl	/^(-)(x::T, y::T) where {T<:Instant} = x.periods - y.periods$/;"	f
-	stdlib/Dates/src/arithmetic.jl	/^(-)(x::T, y::T) where {T<:TimeType} = x.instant - y.instant$/;"	f
-	stdlib/Dates/src/arithmetic.jl	/^(-)(x::Time, y::TimePeriod) = return Time(Nanosecond(value(x) - tons(y)))$/;"	f
-	stdlib/Dates/src/periods.jl	/^(-)(x::CompoundPeriod) = CompoundPeriod(-x.periods)$/;"	f
-	stdlib/Dates/src/periods.jl	/^(-)(x::CompoundPeriod, y::Period) = CompoundPeriod(vcat(x.periods, -y))$/;"	f
-	stdlib/Dates/src/periods.jl	/^(-)(x::P) where {P<:Period} = P(-value(x))$/;"	f
-	stdlib/Dates/src/periods.jl	/^(-)(x::Period, y::Period) = CompoundPeriod(Period[x, -y])$/;"	f
-	stdlib/Dates/src/periods.jl	/^(-)(y::Union{Period, CompoundPeriod}, x::CompoundPeriod) = (-x) + y$/;"	f
-	stdlib/Dates/src/ranges.jl	/^-(r::AbstractRange{<:TimeType}, x::Period) = (first(r)-x):step(r):(last(r)-x)$/;"	f
-	stdlib/LinearAlgebra/src/adjtrans.jl	/^(-)(A::Adjoint)   = Adjoint(  -A.parent)$/;"	f
-	stdlib/LinearAlgebra/src/adjtrans.jl	/^(-)(A::Transpose) = Transpose(-A.parent)$/;"	f
-	stdlib/LinearAlgebra/src/bidiag.jl	/^-(A::Bidiagonal)=Bidiagonal(-A.dv,-A.ev,A.uplo)$/;"	f
-	stdlib/LinearAlgebra/src/bidiag.jl	/^function -(A::Bidiagonal, B::Bidiagonal)$/;"	f
-	stdlib/LinearAlgebra/src/diagonal.jl	/^(-)(A::Diagonal) = Diagonal(-A.diag)$/;"	f
-	stdlib/LinearAlgebra/src/diagonal.jl	/^(-)(Da::Diagonal, Db::Diagonal) = Diagonal(Da.diag - Db.diag)$/;"	f
-	stdlib/LinearAlgebra/src/hessenberg.jl	/^-(A::UpperHessenberg) = UpperHessenberg(-A.data)$/;"	f
-	stdlib/LinearAlgebra/src/hessenberg.jl	/^-(A::UpperHessenberg, B::UpperHessenberg) = UpperHessenberg(A.data-B.data)$/;"	f
-	stdlib/LinearAlgebra/src/hessenberg.jl	/^-(F::Hessenberg) = F * -one(eltype(F.H))$/;"	f
-	stdlib/LinearAlgebra/src/hessenberg.jl	/^-(F::Hessenberg, J::UniformScaling) = Hessenberg(F, F.μ - J.λ)$/;"	f
-	stdlib/LinearAlgebra/src/hessenberg.jl	/^-(J::UniformScaling, F::Hessenberg) = Hessenberg(-F, J.λ - F.μ)$/;"	f
-	stdlib/LinearAlgebra/src/hessenberg.jl	/^-(J::UniformScaling, H::UpperHessenberg) = UpperHessenberg(J - H.data)$/;"	f
-	stdlib/LinearAlgebra/src/special.jl	/^-(A::SymTridiagonal, B::Tridiagonal) = Tridiagonal(A.ev-B.dl, A.dv-B.d, A.ev-B.du)$/;"	f
-	stdlib/LinearAlgebra/src/special.jl	/^-(A::Tridiagonal, B::SymTridiagonal) = Tridiagonal(A.dl-B.ev, A.d-B.dv, A.du-B.ev)$/;"	f
-	stdlib/LinearAlgebra/src/symmetric.jl	/^(-)(A::Hermitian) = Hermitian(-A.data, sym_uplo(A.uplo))$/;"	f
-	stdlib/LinearAlgebra/src/symmetric.jl	/^(-)(A::Symmetric) = Symmetric(-A.data, sym_uplo(A.uplo))$/;"	f
-	stdlib/LinearAlgebra/src/triangular.jl	/^-(A::AbstractTriangular, B::AbstractTriangular) = copyto!(similar(parent(A)), A) - copyto!(simil/;"	f
-	stdlib/LinearAlgebra/src/triangular.jl	/^-(A::LowerTriangular) = LowerTriangular(-A.data)$/;"	f
-	stdlib/LinearAlgebra/src/triangular.jl	/^-(A::LowerTriangular, B::LowerTriangular) = LowerTriangular(A.data - B.data)$/;"	f
-	stdlib/LinearAlgebra/src/triangular.jl	/^-(A::LowerTriangular, B::UnitLowerTriangular) = LowerTriangular(A.data - tril(B.data, -1) - I)$/;"	f
-	stdlib/LinearAlgebra/src/triangular.jl	/^-(A::UnitLowerTriangular, B::LowerTriangular) = LowerTriangular(tril(A.data, -1) - B.data + I)$/;"	f
-	stdlib/LinearAlgebra/src/triangular.jl	/^-(A::UnitLowerTriangular, B::UnitLowerTriangular) = LowerTriangular(tril(A.data, -1) - tril(B.da/;"	f
-	stdlib/LinearAlgebra/src/triangular.jl	/^-(A::UnitUpperTriangular, B::UnitUpperTriangular) = UpperTriangular(triu(A.data, 1) - triu(B.dat/;"	f
-	stdlib/LinearAlgebra/src/triangular.jl	/^-(A::UnitUpperTriangular, B::UpperTriangular) = UpperTriangular(triu(A.data, 1) - B.data + I)$/;"	f
-	stdlib/LinearAlgebra/src/triangular.jl	/^-(A::UpperTriangular) = UpperTriangular(-A.data)$/;"	f
-	stdlib/LinearAlgebra/src/triangular.jl	/^-(A::UpperTriangular, B::UnitUpperTriangular) = UpperTriangular(A.data - triu(B.data, 1) - I)$/;"	f
-	stdlib/LinearAlgebra/src/triangular.jl	/^-(A::UpperTriangular, B::UpperTriangular) = UpperTriangular(A.data - B.data)$/;"	f
-	stdlib/LinearAlgebra/src/triangular.jl	/^function -(A::UnitLowerTriangular)$/;"	f
-	stdlib/LinearAlgebra/src/triangular.jl	/^function -(A::UnitUpperTriangular)$/;"	f
-	stdlib/LinearAlgebra/src/tridiag.jl	/^-(A::SymTridiagonal, B::SymTridiagonal) = SymTridiagonal(A.dv-B.dv, A.ev-B.ev)$/;"	f
-	stdlib/LinearAlgebra/src/tridiag.jl	/^-(A::Tridiagonal, B::Tridiagonal) = Tridiagonal(A.dl-B.dl, A.d-B.d, A.du-B.du)$/;"	f
-	stdlib/LinearAlgebra/src/uniformscaling.jl	/^(-)(A::AbstractMatrix, J::UniformScaling)   = A + (-J)$/;"	f
-	stdlib/LinearAlgebra/src/uniformscaling.jl	/^(-)(B::BitArray{2}, J::UniformScaling)      = Array(B) - J$/;"	f
-	stdlib/LinearAlgebra/src/uniformscaling.jl	/^(-)(J1::UniformScaling, J2::UniformScaling) = UniformScaling(J1.λ-J2.λ)$/;"	f
-	stdlib/LinearAlgebra/src/uniformscaling.jl	/^(-)(J::UniformScaling)                      = UniformScaling(-J.λ)$/;"	f
-	stdlib/LinearAlgebra/src/uniformscaling.jl	/^(-)(J::UniformScaling, B::BitArray{2})      = J - Array(B)$/;"	f
-	stdlib/LinearAlgebra/src/uniformscaling.jl	/^(-)(J::UniformScaling, x::Number) = J.λ - x$/;"	f
-	stdlib/LinearAlgebra/src/uniformscaling.jl	/^(-)(x::Number, J::UniformScaling) = x - J.λ$/;"	f
-	stdlib/SparseArrays/src/sparsematrix.jl	/^(-)(A::AbstractSparseMatrixCSC, B::AbstractSparseMatrixCSC) = map(-, A, B)$/;"	f
-	stdlib/SparseArrays/src/sparsematrix.jl	/^(-)(A::AbstractSparseMatrixCSC, B::Array) = Array(A) - B$/;"	f
-	stdlib/SparseArrays/src/sparsematrix.jl	/^(-)(A::AbstractSparseMatrixCSC, J::UniformScaling) = A - sparse(J, size(A)...)$/;"	f
-	stdlib/SparseArrays/src/sparsematrix.jl	/^(-)(A::Array, B::AbstractSparseMatrixCSC) = A - Array(B)$/;"	f
-	stdlib/SparseArrays/src/sparsematrix.jl	/^(-)(J::UniformScaling, A::AbstractSparseMatrixCSC) = sparse(J, size(A)...) - A$/;"	f
-	stdlib/SparseArrays/src/sparsevector.jl	/^-(x::SparseVector) = SparseVector(length(x), copy(nonzeroinds(x)), -(nonzeros(x)))$/;"	f
-0,0 +1,113	deps/patches/llvm-rL327898.patch	/^@@ -0,0 +1,113 @@$/;"	h	newFile:b/test/CodeGen/SystemZ/pr36164.ll
-0,0 +1,18	deps/patches/llvm-D27629-AArch64-large_model_4.0.patch	/^@@ -0,0 +1,18 @@$/;"	h	newFile:b/test/ExecutionEngine/RuntimeDyld/AArch64/ELF_ARM64_BE-large-relocations.s
-0,0 +1,18	deps/patches/llvm-D27629-AArch64-large_model_4.0.patch	/^@@ -0,0 +1,18 @@$/;"	h	newFile:b/test/ExecutionEngine/RuntimeDyld/AArch64/ELF_ARM64_large-relocations.s
-0,0 +1,18	deps/patches/llvm-D51842-win64-byval-cc.patch	/^@@ -0,0 +1,18 @@$/;"	h	newFile:b/test/CodeGen/X86/win64-byval.ll
-0,0 +1,18	deps/patches/llvm7-D51842-win64-byval-cc.patch	/^@@ -0,0 +1,18 @@$/;"	h	newFile:b/test/CodeGen/X86/win64-byval.ll
-0,0 +1,20	deps/patches/llvm-D27629-AArch64-large_model_6.0.1.patch	/^@@ -0,0 +1,20 @@$/;"	h	newFile:b/test/ExecutionEngine/RuntimeDyld/AArch64/ELF_ARM64_large-relocations.s
-0,0 +1,23	deps/patches/llvm-D44892-Perf-integration.patch	/^@@ -0,0 +1,23 @@$/;"	h	newFile:b/lib/ExecutionEngine/PerfJITEvents/LLVMBuild.txt
-0,0 +1,24	deps/patches/llvm-rL332680.patch	/^@@ -0,0 +1,24 @@$/;"	h	modifiedFile:a/test/CodeGen/X86/domain-reassignment-implicit-def.ll
-0,0 +1,25	deps/patches/llvm-6.0.0-ifconv-D45819.patch	/^@@ -0,0 +1,25 @@$/;"	h	newFile:test/CodeGen/Hexagon/ifcvt-diamond-ret.mir
-0,0 +1,33	deps/patches/llvm-rL327898.patch	/^@@ -0,0 +1,33 @@$/;"	h	newFile:b/test/CodeGen/X86/pr36274.ll
-0,0 +1,34	deps/patches/llvm-6.0.0-ifconv-D45819.patch	/^@@ -0,0 +1,34 @@$/;"	h	newFile:test/CodeGen/MIR/PowerPC/ifcvt-diamond-ret.mir
-0,0 +1,35	deps/patches/llvm-rL327898.patch	/^@@ -0,0 +1,35 @@$/;"	h	newFile:b/test/CodeGen/X86/pr36312.ll
-0,0 +1,37	deps/patches/llvm-rL332682.patch	/^@@ -0,0 +1,37 @@$/;"	h	modifiedFile:a/test/CodeGen/X86/domain-reassignment-test.ll
-0,0 +1,492	deps/patches/llvm-D44892-Perf-integration.patch	/^@@ -0,0 +1,492 @@$/;"	h	newFile:b/lib/ExecutionEngine/PerfJITEvents/PerfJITEventListener.cpp
-0,0 +1,5	deps/patches/llvm-D44892-Perf-integration.patch	/^@@ -0,0 +1,5 @@$/;"	h	newFile:b/lib/ExecutionEngine/PerfJITEvents/CMakeLists.txt
-0,0 +1,50	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -0,0 +1,50 @@$/;"	h	newFile:b/test/Analysis/LoopAccessAnalysis/memcheck-ni.ll
-0,0 +1,50	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -0,0 +1,50 @@$/;"	h	newFile:b/test/Analysis/LoopAccessAnalysis/memcheck-ni.ll
-0,0 +1,50	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -0,0 +1,50 @@$/;"	h	newFile:b/test/Analysis/LoopAccessAnalysis/memcheck-ni.ll
-0,0 +1,73	deps/patches/llvm-D49832-SCEVPred.patch	/^@@ -0,0 +1,73 @@$/;"	h	newFile:b/test/Analysis/LoopAccessAnalysis/wrapping-pointer-ni.ll
-0,0 +1,99	deps/patches/llvm-D42260.patch	/^@@ -0,0 +1,99 @@$/;"	h	modifiedFile:a/test/Transforms/JumpThreading/header-succ.ll
-1 +1	deps/patches/llvm-symver-jlprefix.patch	/^@@ -1 +1 @@$/;"	h	modifiedFile:a/tools/llvm-shlib/simple_version_script.map.in
-1 +1	deps/patches/llvm7-symver-jlprefix.patch	/^@@ -1 +1 @@$/;"	h	modifiedFile:a/tools/llvm-shlib/simple_version_script.map.in
-1,11 +1,18	deps/patches/llvm-rL327898.patch	/^@@ -1,11 +1,18 @@$/;"	h	modifiedFile:a/test/CodeGen/X86/testb-je-fusion.ll
-1,135 +0,0	deps/patches/llvm-rL327898.patch	/^@@ -1,135 +0,0 @@$/;"	h	deletedFile:a/test/CodeGen/X86/i256-add.ll
-1,1459 +0,0	deps/patches/llvm-rL327898.patch	/^@@ -1,1459 +0,0 @@$/;"	h	deletedFile:a/test/CodeGen/X86/var-permute-256.ll
-1,1683 +0,0	deps/patches/llvm-rL327898.patch	/^@@ -1,1683 +0,0 @@$/;"	h	deletedFile:a/test/CodeGen/X86/subvector-broadcast.ll
-1,18 +1,39	deps/patches/llvm-rL327898.patch	/^@@ -1,18 +1,39 @@$/;"	h	modifiedFile:a/test/CodeGen/X86/test-shrink-bug.ll
-1,3 +1,4	deps/patches/llvm-rL327898.patch	/^@@ -1,3 +1,4 @@$/;"	h	modifiedFile:a/test/CodeGen/X86/vastart-defs-eflags.ll
-1,33 +0,0	deps/patches/llvm-rL327898.patch	/^@@ -1,33 +0,0 @@$/;"	h	deletedFile:a/test/CodeGen/X86/2012-01-16-mfence-nosse-flags.ll
-1,5 +1,5	deps/patches/llvm-rL332694.patch	/^@@ -1,5 +1,5 @@$/;"	h	modifiedFile:a/test/CodeGen/X86/domain-reassignment-test.ll
-1,6 +1,6	deps/patches/llvm-D50010-VNCoercion-ni.patch	/^@@ -1,6 +1,6 @@$/;"	h	modifiedFile:a/test/Transforms/GVN/non-integral-pointers.ll
-1,6 +1,6	deps/patches/llvm7-D50010-VNCoercion-ni.patch	/^@@ -1,6 +1,6 @@$/;"	h	modifiedFile:a/test/Transforms/GVN/non-integral-pointers.ll
-1,8 +1,8	deps/patches/llvm-rL327898.patch	/^@@ -1,8 +1,8 @@$/;"	h	modifiedFile:a/test/CodeGen/X86/vector-shuffle-combining-xop.ll
-10,12 +10,11	deps/patches/llvm-rL327898.patch	/^@@ -10,12 +10,11 @@ define i32 @foo (i64* %so) nounwind uwtable ssp {$/;"	h	modifiedFile:a/test/CodeGen/X86/merge-consecutive-stores.ll
-10019,7 +10019,7	deps/patches/gmp-config-ldflags.patch	/^@@ -10019,7 +10019,7 @@ main ()$/;"	h	modifiedFile:gmp-6.1.2/configure
-10045,41 +10025,15	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -10045,41 +10025,15 @@ bool ScalarEvolution::isImpliedCondOperands(ICmpInst::Predicate Pred,$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-10052,7 +10052,7	deps/patches/gmp-config-ldflags.patch	/^@@ -10052,7 +10052,7 @@ main ()$/;"	h	modifiedFile:gmp-6.1.2/configure
-10128,20 +10082,20	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -10128,20 +10082,20 @@ static bool IsKnownPredicateViaMinOrMax(ScalarEvolution &SE,$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-10132,7 +10132,7	deps/patches/gmp-config-ldflags.patch	/^@@ -10132,7 +10132,7 @@ main ()$/;"	h	modifiedFile:gmp-6.1.2/configure
-10168,7 +10168,7	deps/patches/gmp-config-ldflags.patch	/^@@ -10168,7 +10168,7 @@ main (int argc, char **argv)$/;"	h	modifiedFile:gmp-6.1.2/configure
-1018,7 +1023,7	deps/patches/llvm-D45008.patch	/^@@ -1018,7 +1023,7 @@$/;"	h	modifiedFile:a/lib/CodeGen/MachineBlockPlacement.cpp
-10210,7 +10210,7	deps/patches/gmp-config-ldflags.patch	/^@@ -10210,7 +10210,7 @@ foo ()$/;"	h	modifiedFile:gmp-6.1.2/configure
-1022,8 +1028,7	deps/patches/llvm-rL327898.patch	/^@@ -1022,8 +1028,7 @@ bool SystemZDAGToDAGISel::tryRISBGZero(SDNode *N) {$/;"	h	modifiedFile:a/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp
-103,14 +103,9	deps/patches/llvm-rL327898.patch	/^@@ -103,14 +103,9 @@ define <8 x i64> @insert_subvector_into_undef(i32 %x0, i32 %x1) nounwind {$/;"	h	modifiedFile:a/test/CodeGen/X86/insertelement-shuffle.ll
-103,6 +103,8	deps/patches/llvm8-WASM-addrspaces.patch	/^@@ -103,6 +103,8 @@ private:$/;"	h	modifiedFile:a/lib/Target/WebAssembly/WebAssemblyISelLowering.h
-1044,7 +1049,7	deps/patches/llvm-D45008.patch	/^@@ -1044,7 +1049,7 @@$/;"	h	modifiedFile:a/lib/CodeGen/MachineBlockPlacement.cpp
-10543,7 +10543,7	deps/patches/gmp-config-ldflags.patch	/^@@ -10543,7 +10543,7 @@ if test "$gmp_prog_cxx_works" = yes; the$/;"	h	modifiedFile:gmp-6.1.2/configure
-10583,7 +10583,7	deps/patches/gmp-config-ldflags.patch	/^@@ -10583,7 +10583,7 @@ using namespace foo;$/;"	h	modifiedFile:gmp-6.1.2/configure
-106,13 +106,13	deps/patches/llvm-rL326967-aligned-load.patch	/^@@ -106,13 +106,13 @@ define <8 x double> @merge_8f64_f64_23uuuuu9(double* %ptr) nounwind uwtabl/;"	h	modifiedFile:a/test/CodeGen/X86/merge-consecutive-loads-512.ll
-10629,7 +10629,7	deps/patches/gmp-config-ldflags.patch	/^@@ -10629,7 +10629,7 @@ void someoutput (void) { std::cout << 12$/;"	h	modifiedFile:gmp-6.1.2/configure
-1072,9 +1072,9	deps/patches/llvm-rL327898.patch	/^@@ -1072,9 +1072,9 @@ define void @avg_v16i16_2(<16 x i16>* %a, <16 x i16>* %b) nounwind {$/;"	h	modifiedFile:a/test/CodeGen/X86/avg.ll
-1075,9 +1065,7	deps/patches/llvm-rL327898.patch	/^@@ -1075,9 +1065,7 @@ define void @isel_crash_16b(i8* %cV_R.addr) {$/;"	h	modifiedFile:a/test/CodeGen/X86/avx2-vbroadcast.ll
-108,6 +116,8	deps/patches/llvm-D45070.patch	/^@@ -108,6 +116,8 @@$/;"	h	modifiedFile:a/lib/Target/NVPTX/NVPTXTargetMachine.cpp
-109,13 +109,13	deps/patches/llvm-rL326967-aligned-load.patch	/^@@ -109,13 +109,13 @@ define <4 x double> @merge_4f64_f64_34uu(double* %ptr) nounwind uwtable no/;"	h	modifiedFile:a/test/CodeGen/X86/merge-consecutive-loads-256.ll
-10998,7 +10979,9	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -10998,7 +10979,9 @@ ScalarEvolution::computeLoopDisposition(const SCEV *S, const Loop *L) {$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-11,7 +11,7	deps/patches/llvm-6.0-D44650.patch	/^@@ -11,7 +11,7 @@$/;"	h	modifiedFile:a/tools/llvm-cfi-verify/CMakeLists.txt
-11,7 +11,7	deps/patches/llvm-7.0-D44650.patch	/^@@ -11,7 +11,7 @@ set(LLVM_LINK_COMPONENTS$/;"	h	modifiedFile:a/tools/llvm-cfi-verify/CMakeLists.txt
-110,6 +110,11	deps/patches/llvm-rL327898.patch	/^@@ -110,6 +110,11 @@ public:$/;"	h	modifiedFile:a/include/llvm/CodeGen/SelectionDAGISel.h
-11085,7 +11068,9	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -11085,7 +11068,9 @@ ScalarEvolution::computeBlockDisposition(const SCEV *S, const BasicBlock/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-111 +115,23	deps/patches/llvm-OProfile-line-num.patch	/^@@ -111 +115,23 @@ void OProfileJITEventListener::NotifyObjectEmitted($/;"	h	modifiedFile:a/lib/ExecutionEngine/OProfileJIT/OProfileJITEventListener.cpp
-1114,8 +1119,7	deps/patches/llvm-rL327898.patch	/^@@ -1114,8 +1119,7 @@ void SystemZDAGToDAGISel::splitLargeImmediate(unsigned Opcode, SDNode *Nod/;"	h	modifiedFile:a/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp
-1124,14 +1124,14	deps/patches/llvm-rL327898.patch	/^@@ -1124,14 +1124,14 @@ define void @avg_v32i16_2(<32 x i16>* %a, <32 x i16>* %b) nounwind {$/;"	h	modifiedFile:a/test/CodeGen/X86/avg.ll
-1128,9 +1116,7	deps/patches/llvm-rL327898.patch	/^@@ -1128,9 +1116,7 @@ define void @isel_crash_32b(i8* %cV_R.addr) {$/;"	h	modifiedFile:a/test/CodeGen/X86/avx2-vbroadcast.ll
-114,16 +129,6	deps/patches/libunwind-prefer-extbl.patch	/^@@ -114,16 +129,6 @@ unw_step (unw_cursor_t *cursor)$/;"	h	modifiedFile:a/src/arm/Gstep.c
-114,49 +114,44	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -114,49 +114,44 @@ define void @test_03(i32 *%arr, i32 %n, i32 %bound) {$/;"	h	modifiedFile:a/test/Transforms/IRCE/rc-negative-bound.ll
-114,49 +114,44	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -114,49 +114,44 @@ define void @test_03(i32 *%arr, i32 %n, i32 %bound) {$/;"	h	modifiedFile:a/test/Transforms/IRCE/rc-negative-bound.ll
-11451,7 +11424,9	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -11451,7 +11424,9 @@ ScalarEvolution::computeLoopDisposition(const SCEV *S, const Loop *L) {$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-115,6 +115,15	deps/patches/llvm-D44892-Perf-integration.patch	/^@@ -115,6 +115,15 @@ public:$/;"	h	modifiedFile:a/include/llvm/ExecutionEngine/JITEventListener.h
-11538,7 +11513,9	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -11538,7 +11513,9 @@ ScalarEvolution::computeBlockDisposition(const SCEV *S, const BasicBlock/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-1160,9 +1160,9	deps/patches/llvm-rL327898.patch	/^@@ -1160,9 +1160,9 @@ define void @avg_v32i16_2(<32 x i16>* %a, <32 x i16>* %b) nounwind {$/;"	h	modifiedFile:a/test/CodeGen/X86/avg.ll
-11611,7 +11565,9	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -11611,7 +11565,9 @@ ScalarEvolution::computeLoopDisposition(const SCEV *S, const Loop *L) {$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-11698,7 +11654,9	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -11698,7 +11654,9 @@ ScalarEvolution::computeBlockDisposition(const SCEV *S, const BasicBlock/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-1170,9 +1156,7	deps/patches/llvm-rL327898.patch	/^@@ -1170,9 +1156,7 @@ define void @isel_crash_8w(i16* %cV_R.addr) {$/;"	h	modifiedFile:a/test/CodeGen/X86/avx2-vbroadcast.ll
-1171,9 +1171,9	deps/patches/llvm-rL327898.patch	/^@@ -1171,9 +1171,9 @@ define void @avg_v32i16_2(<32 x i16>* %a, <32 x i16>* %b) nounwind {$/;"	h	modifiedFile:a/test/CodeGen/X86/avg.ll
-118,7 +114,7	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -118,7 +114,7 @@ define i32 @main() local_unnamed_addr #0 {$/;"	h	modifiedFile:a/test/Transforms/LoopVectorize/X86/pr35432.ll
-118,7 +114,7	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -118,7 +114,7 @@ define i32 @main() local_unnamed_addr #0 {$/;"	h	modifiedFile:a/test/Transforms/LoopVectorize/X86/pr35432.ll
-1199,8 +1199,7	deps/patches/llvm-rL327898.patch	/^@@ -1199,8 +1199,7 @@ define <8 x double> @load_one_mask_bit_set5(<8 x double>* %addr, <8 x doub/;"	h	modifiedFile:a/test/CodeGen/X86/masked_memop.ll
-122,9 +122,7	deps/patches/llvm-rL327898.patch	/^@@ -122,9 +122,7 @@ define <8 x i64> @test_mm512_epi64(<8 x i32> %a, <8 x i32> %b) {$/;"	h	modifiedFile:a/test/CodeGen/X86/broadcastm-lowering.ll
-1223,9 +1207,7	deps/patches/llvm-rL327898.patch	/^@@ -1223,9 +1207,7 @@ define void @isel_crash_16w(i16* %cV_R.addr) {$/;"	h	modifiedFile:a/test/CodeGen/X86/avx2-vbroadcast.ll
-1224,6 +1224,13	deps/patches/llvm8-WASM-addrspaces.patch	/^@@ -1224,6 +1224,13 @@ SDValue WebAssemblyTargetLowering::LowerShift(SDValue Op,$/;"	h	modifiedFile:a/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp
-1248,6 +1248,14	deps/patches/llvm-6.0-NVPTX-addrspaces.patch	/^@@ -1248,6 +1248,14 @@ SDValue NVPTXTargetLowering::getSqrtEstimate(SDValue Operand, SelectionDA/;"	h	modifiedFile:a/lib/Target/NVPTX/NVPTXISelLowering.cpp
-1257,14 +1257,6	deps/patches/llvm-rL327898.patch	/^@@ -1257,14 +1257,6 @@ let isCompare = 1 in {$/;"	h	modifiedFile:a/lib/Target/X86/X86InstrArithmetic.td
-1261,26 +1243,14	deps/patches/llvm-rL327898.patch	/^@@ -1261,26 +1243,14 @@ define void @isel_crash_4d(i32* %cV_R.addr) {$/;"	h	modifiedFile:a/test/CodeGen/X86/avx2-vbroadcast.ll
-127,9 +127,6	deps/patches/llvm-6.0-D64032-cmake-cross.patch	/^@@ -127,9 +127,6 @@ macro(add_tablegen target project)$/;"	h	modifiedFile:a/cmake/modules/TableGen.cmake
-13,36 +13,35	deps/patches/llvm-rL327898.patch	/^@@ -13,36 +13,35 @@ define i32 @f(<4 x float> %A, i8* %B, <2 x double> %C, i32 %D, <2 x i64> %E,/;"	h	modifiedFile:a/test/CodeGen/X86/nontemporal.ll
-1317,46 +1287,24	deps/patches/llvm-rL327898.patch	/^@@ -1317,46 +1287,24 @@ define void @isel_crash_8d(i32* %cV_R.addr) {$/;"	h	modifiedFile:a/test/CodeGen/X86/avx2-vbroadcast.ll
-1380,37 +1328,20	deps/patches/llvm-rL327898.patch	/^@@ -1380,37 +1328,20 @@ define void @isel_crash_2q(i64* %cV_R.addr) {$/;"	h	modifiedFile:a/test/CodeGen/X86/avx2-vbroadcast.ll
-14,8 +14,6	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -14,8 +14,6 @@ target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-/;"	h	modifiedFile:a/test/Transforms/LoopStrengthReduce/2013-01-14-ReuseCast.ll
-14,8 +14,6	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -14,8 +14,6 @@ target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-/;"	h	modifiedFile:a/test/Transforms/LoopStrengthReduce/2013-01-14-ReuseCast.ll
-14,8 +14,6	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -14,8 +14,6 @@ target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-/;"	h	modifiedFile:a/test/Transforms/LoopStrengthReduce/2013-01-14-ReuseCast.ll
-142,8 +142,8	deps/patches/dSFMT.c.patch	/^@@ -142,8 +142,8 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.c
-1438,60 +1369,33	deps/patches/llvm-rL327898.patch	/^@@ -1438,60 +1369,33 @@ define void @isel_crash_4q(i64* %cV_R.addr) {$/;"	h	modifiedFile:a/test/CodeGen/X86/avx2-vbroadcast.ll
-144,3 +145,10	deps/patches/gmp_alloc_overflow_func.patch	/^@@ -144,3 +145,10 @@ void$/;"	h	modifiedFile:a/memory.c
-149,8 +149,8	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -149,8 +149,8 @@ define void @test_04(i32* %arr, i32* %a_len_ptr) #0 {$/;"	h	modifiedFile:a/test/Transforms/IRCE/unsigned_comparisons_ugt.ll
-149,8 +149,8	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -149,8 +149,8 @@ define void @test_04(i32* %arr, i32* %a_len_ptr) #0 {$/;"	h	modifiedFile:a/test/Transforms/IRCE/unsigned_comparisons_ugt.ll
-1493,7 +1498,7	deps/patches/llvm-D45008.patch	/^@@ -1493,7 +1498,7 @@$/;"	h	modifiedFile:a/lib/CodeGen/MachineBlockPlacement.cpp
-1499,6 +1499,9	deps/patches/llvm-D42260.patch	/^@@ -1499,6 +1499,9 @@$/;"	h	modifiedFile:a/lib/Transforms/Scalar/JumpThreading.cpp
-150,14 +147,11	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -150,14 +147,11 @@ define void @test_03(i32* %arr, i32* %a_len_ptr) #0 {$/;"	h	modifiedFile:a/test/Transforms/IRCE/ranges_of_different_types.ll
-151,14 +148,11	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -151,14 +148,11 @@ define void @test_03(i32* %arr, i32* %a_len_ptr) #0 {$/;"	h	modifiedFile:a/test/Transforms/IRCE/ranges_of_different_types.ll
-151,14 +148,11	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -151,14 +148,11 @@ define void @test_03(i32* %arr, i32* %a_len_ptr) #0 {$/;"	h	modifiedFile:a/test/Transforms/IRCE/ranges_of_different_types.ll
-155,13 +155,13	deps/patches/llvm-rL326967-aligned-load.patch	/^@@ -155,13 +155,13 @@ define <4 x double> @merge_4f64_f64_34z6(double* %ptr) nounwind uwtable no/;"	h	modifiedFile:a/test/CodeGen/X86/merge-consecutive-loads-256.ll
-16,7 +16,7	deps/patches/llvm-D44892-Perf-integration.patch	/^@@ -16,7 +16,7 @@$/;"	h	modifiedFile:a/lib/ExecutionEngine/LLVMBuild.txt
-160,15 +157,22	deps/patches/llvm-6.0-D64032-cmake-cross.patch	/^@@ -160,15 +157,22 @@ macro(add_tablegen target project)$/;"	h	modifiedFile:a/cmake/modules/TableGen.cmake
-160,8 +158,7	deps/patches/llvm-rL327898.patch	/^@@ -160,8 +158,7 @@ define <4 x i64> @test_mm256_epi64(<8 x i32> %a, <8 x i32> %b) {$/;"	h	modifiedFile:a/test/CodeGen/X86/broadcastm-lowering.ll
-1634,14 +1634,15	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -1634,14 +1634,15 @@ Value *SCEVExpander::visitSMaxExpr(const SCEVSMaxExpr *S) {$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolutionExpander.cpp
-1634,14 +1634,15	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -1634,14 +1634,15 @@ Value *SCEVExpander::visitSMaxExpr(const SCEVSMaxExpr *S) {$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolutionExpander.cpp
-1634,7 +1634,8	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -1634,7 +1634,8 @@ Value *SCEVExpander::visitSMaxExpr(const SCEVSMaxExpr *S) {$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolutionExpander.cpp
-1658,13 +1659,64	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -1658,13 +1659,64 @@ Value *SCEVExpander::visitUMaxExpr(const SCEVUMaxExpr *S) {$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolutionExpander.cpp
-1658,14 +1659,15	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -1658,14 +1659,15 @@ Value *SCEVExpander::visitUMaxExpr(const SCEVUMaxExpr *S) {$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolutionExpander.cpp
-1658,7 +1659,8	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -1658,7 +1659,8 @@ Value *SCEVExpander::visitUMaxExpr(const SCEVUMaxExpr *S) {$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolutionExpander.cpp
-1671,6 +1671,56	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -1671,6 +1671,56 @@ Value *SCEVExpander::visitUMaxExpr(const SCEVUMaxExpr *S) {$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolutionExpander.cpp
-1676,6 +1678,56	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -1676,6 +1678,56 @@ Value *SCEVExpander::visitUMaxExpr(const SCEVUMaxExpr *S) {$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolutionExpander.cpp
-1679,8 +1682,20	deps/patches/llvm-D42260.patch	/^@@ -1679,8 +1682,20 @@$/;"	h	modifiedFile:a/lib/Transforms/Scalar/JumpThreading.cpp
-169,7 +169,7	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -169,7 +169,7 @@ if.end:$/;"	h	modifiedFile:a/test/Analysis/ScalarEvolution/trip-count14.ll
-169,7 +169,7	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -169,7 +169,7 @@ if.end:$/;"	h	modifiedFile:a/test/Analysis/ScalarEvolution/trip-count14.ll
-17,14 +17,14	deps/patches/llvm-rL327898.patch	/^@@ -17,14 +17,14 @@ cond_true2732.preheader:                ; preds = %entry$/;"	h	modifiedFile:a/test/CodeGen/X86/store_op_load_fold2.ll
-1702,7 +1707,7	deps/patches/llvm-D45008.patch	/^@@ -1702,7 +1707,7 @@$/;"	h	modifiedFile:a/lib/CodeGen/MachineBlockPlacement.cpp
-1714,20 +1714,25	deps/patches/llvm-6.0.0-ifconv-D45819.patch	/^@@ -1714,20 +1714,25 @@$/;"	h	modifiedFile:a/lib/CodeGen/IfConversion.cpp
-1724,7 +1729,7	deps/patches/llvm-D45008.patch	/^@@ -1724,7 +1729,7 @@$/;"	h	modifiedFile:a/lib/CodeGen/MachineBlockPlacement.cpp
-173,7 +173,7	deps/patches/llvm-6.0-D64225-cmake-cross2.patch	/^@@ -173,7 +173,7 @@ macro(add_tablegen target project)$/;"	h	modifiedFile:a/cmake/modules/TableGen.cmake
-1738,11 +1743,16	deps/patches/llvm-6.0.0-ifconv-D45819.patch	/^@@ -1738,11 +1743,16 @@$/;"	h	modifiedFile:a/lib/CodeGen/IfConversion.cpp
-1768,11 +1778,14	deps/patches/llvm-6.0.0-ifconv-D45819.patch	/^@@ -1768,11 +1778,14 @@$/;"	h	modifiedFile:a/lib/CodeGen/IfConversion.cpp
-178,16 +179,17	deps/patches/dSFMT.h.patch	/^@@ -178,16 +179,17 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.h
-1789,9 +1789,16	deps/patches/llvm-6.0-r327540.patch	/^@@ -1789,9 +1789,16 @@ bool X86FastISel::X86SelectBranch(const Instruction *I) {$/;"	h	modifiedFile:a/lib/Target/X86/X86FastISel.cpp
-180,8 +180,8	deps/patches/dSFMT.c.patch	/^@@ -180,8 +180,8 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.c
-183,10 +183,9	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -183,10 +183,9 @@ class Type;$/;"	h	modifiedFile:a/include/llvm/Analysis/ScalarEvolutionExpressions.h
-183,10 +192,9	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -183,10 +192,9 @@ class Type;$/;"	h	modifiedFile:a/include/llvm/Analysis/ScalarEvolutionExpressions.h
-1833,11 +1846,15	deps/patches/llvm-6.0.0-ifconv-D45819.patch	/^@@ -1833,11 +1846,15 @@$/;"	h	modifiedFile:a/lib/CodeGen/IfConversion.cpp
-1836,10 +1843,10	deps/patches/llvm-6.0-r327540.patch	/^@@ -1836,10 +1843,10 @@ bool X86FastISel::X86SelectShift(const Instruction *I) {$/;"	h	modifiedFile:a/lib/Target/X86/X86FastISel.cpp
-186,26 +186,23	deps/patches/llvm-rL327898.patch	/^@@ -186,26 +186,23 @@ define <64 x i8> @test_broadcast_16i8_64i8(<16 x i8> *%p) nounwind {$/;"	h	modifiedFile:a/test/CodeGen/X86/avx512-vbroadcasti128.ll
-187,6 +187,8	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -187,6 +187,8 @@ class Type;$/;"	h	modifiedFile:a/include/llvm/Analysis/ScalarEvolutionExpressions.h
-189,12 +189,7	deps/patches/llvm-rL327898.patch	/^@@ -189,12 +189,7 @@ define <2 x i64> @Q64(i64* %ptr) nounwind uwtable readnone ssp {$/;"	h	modifiedFile:a/test/CodeGen/X86/avx2-vbroadcast.ll
-19,4 +19,4	deps/patches/llvm-D44892-Perf-integration.patch	/^@@ -19,4 +19,4 @@$/;"	h	modifiedFile:a/lib/ExecutionEngine/Orc/LLVMBuild.txt
-190,7 +190,7	deps/patches/llvm-rL326967-aligned-load.patch	/^@@ -190,7 +190,7 @@ define <8 x i64> @merge_8i64_4i64_z3(<4 x i64>* %ptr) nounwind uwtable noinl/;"	h	modifiedFile:a/test/CodeGen/X86/merge-consecutive-loads-512.ll
-1914,7 +1914,6	deps/patches/llvm-rL327898.patch	/^@@ -1914,7 +1914,6 @@ void HvxSelector::selectShuffle(SDNode *N) {$/;"	h	modifiedFile:a/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp
-194,8 +194,8	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -194,8 +194,8 @@ define void @test_05(i32* %arr, i32* %a_len_ptr) #0 {$/;"	h	modifiedFile:a/test/Transforms/IRCE/unsigned_comparisons_ult.ll
-194,8 +194,8	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -194,8 +194,8 @@ define void @test_05(i32* %arr, i32* %a_len_ptr) #0 {$/;"	h	modifiedFile:a/test/Transforms/IRCE/unsigned_comparisons_ult.ll
-1947,13 +1947,14	deps/patches/llvm-rL332302.patch	/^@@ -1947,13 +1947,14 @@ Instruction *InstCombiner::visitGetElementPtrInst(GetElementPtrInst &GEP/;"	h	modifiedFile:a/lib/Transforms/InstCombine/InstructionCombining.cpp
-195,6 +195,34	deps/patches/gmp_alloc_overflow_func.patch	/^@@ -195,6 +195,34 @@ check_random (int reps)$/;"	h	modifiedFile:a/tests/mpz/t-pow.c
-1961,7 +1962,7	deps/patches/llvm-rL332302.patch	/^@@ -1961,7 +1962,7 @@ Instruction *InstCombiner::visitGetElementPtrInst(GetElementPtrInst &GEP) /;"	h	modifiedFile:a/lib/Transforms/InstCombine/InstructionCombining.cpp
-1970,7 +1969,6	deps/patches/llvm-rL327898.patch	/^@@ -1970,7 +1969,6 @@ void HvxSelector::selectRor(SDNode *N) {$/;"	h	modifiedFile:a/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp
-198,6 +200,10	deps/patches/dSFMT.h.patch	/^@@ -198,6 +200,10 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.h
-198,7 +198,7	deps/patches/llvm-rL326967-aligned-load.patch	/^@@ -198,7 +198,7 @@ define <8 x i64> @merge_8i64_i64_56zz9uzz(i64* %ptr) nounwind uwtable noinli/;"	h	modifiedFile:a/test/CodeGen/X86/merge-consecutive-loads-512.ll
-199,23 +204,28	deps/patches/llvm-rL327898.patch	/^@@ -199,23 +204,28 @@ protected:$/;"	h	modifiedFile:a/include/llvm/CodeGen/SelectionDAGISel.h
-20,14 +20,21	deps/patches/llvm-D50010-VNCoercion-ni.patch	/^@@ -20,14 +20,21 @@ bool canCoerceMustAliasedValueToLoad(Value *StoredVal, Type *LoadTy,$/;"	h	modifiedFile:a/lib/Transforms/Utils/VNCoercion.cpp
-20,7 +20,7	deps/patches/llvm-6.0-DISABLE_ABI_CHECKS.patch	/^@@ -20,7 +20,7 @@$/;"	h	modifiedFile:a/include/llvm/Config/abi-breaking.h.cmake
-20,7 +20,8	deps/patches/llvm7-D50010-VNCoercion-ni.patch	/^@@ -20,7 +20,8 @@ bool canCoerceMustAliasedValueToLoad(Value *StoredVal, Type *LoadTy,$/;"	h	modifiedFile:a/lib/Transforms/Utils/VNCoercion.cpp
-201,10 +200,9	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -201,10 +200,9 @@ class Type;$/;"	h	modifiedFile:a/include/llvm/Analysis/ScalarEvolutionExpressions.h
-201,10 +209,9	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -201,10 +209,9 @@ class Type;$/;"	h	modifiedFile:a/include/llvm/Analysis/ScalarEvolutionExpressions.h
-2017,8 +2015,7	deps/patches/llvm-rL327898.patch	/^@@ -2017,8 +2015,7 @@ void HexagonDAGToDAGISel::SelectV65GatherPred(SDNode *N) {$/;"	h	modifiedFile:a/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp
-204,7 +206,9	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -204,7 +206,9 @@ class Type;$/;"	h	modifiedFile:a/include/llvm/Analysis/ScalarEvolutionExpressions.h
-2056,8 +2053,7	deps/patches/llvm-rL327898.patch	/^@@ -2056,8 +2053,7 @@ void HexagonDAGToDAGISel::SelectV65Gather(SDNode *N) {$/;"	h	modifiedFile:a/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp
-207,10 +201,9	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -207,10 +201,9 @@ define void @test_04(i32* %arr, i32* %a_len_ptr) #0 {$/;"	h	modifiedFile:a/test/Transforms/IRCE/ranges_of_different_types.ll
-208,10 +202,9	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -208,10 +202,9 @@ define void @test_04(i32* %arr, i32* %a_len_ptr) #0 {$/;"	h	modifiedFile:a/test/Transforms/IRCE/ranges_of_different_types.ll
-208,10 +202,9	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -208,10 +202,9 @@ define void @test_04(i32* %arr, i32* %a_len_ptr) #0 {$/;"	h	modifiedFile:a/test/Transforms/IRCE/ranges_of_different_types.ll
-2092,50 +2098,84	deps/patches/llvm-rL327898.patch	/^@@ -2092,50 +2098,84 @@ static bool isFusableLoadOpStorePattern(StoreSDNode *StoreNode,$/;"	h	modifiedFile:a/lib/Target/X86/X86ISelDAGToDAG.cpp
-2098,7 +2098,8	deps/patches/llvm-6.0.0_D27296-libssp.patch	/^@@ -2098,7 +2098,8 @@$/;"	h	modifiedFile:a/lib/Target/X86/X86ISelLowering.cpp
-21,3 +42,62	deps/patches/llvm-rL327898.patch	/^@@ -21,3 +42,62 @@ entry:$/;"	h	modifiedFile:a/test/CodeGen/X86/test-shrink-bug.ll
-2100,5 +2096,3	deps/patches/llvm-rL327898.patch	/^@@ -2100,5 +2096,3 @@ void HexagonDAGToDAGISel::SelectHVXDualOutput(SDNode *N) {$/;"	h	modifiedFile:a/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp
-2102,7 +2154,7	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -2102,7 +2154,7 @@ bool SCEVExpander::isHighCostExpansionHelper($/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolutionExpander.cpp
-211,47 +206,41	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -211,47 +206,41 @@ define void @test_04(i32 *%arr, i32 %n, i32 %bound) {$/;"	h	modifiedFile:a/test/Transforms/IRCE/rc-negative-bound.ll
-211,47 +206,41	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -211,47 +206,41 @@ define void @test_04(i32 *%arr, i32 %n, i32 %bound) {$/;"	h	modifiedFile:a/test/Transforms/IRCE/rc-negative-bound.ll
-212,13 +207,8	deps/patches/llvm-rL327898.patch	/^@@ -212,13 +207,8 @@ define <4 x i64> @QQ64(i64* %ptr) nounwind uwtable readnone ssp {$/;"	h	modifiedFile:a/test/CodeGen/X86/avx2-vbroadcast.ll
-212,13 +218,13	deps/patches/dSFMT.h.patch	/^@@ -212,13 +218,13 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.h
-212,6 +240,7	deps/patches/gmp_alloc_overflow_func.patch	/^@@ -212,6 +240,7 @@ main (int argc, char **argv)$/;"	h	modifiedFile:a/tests/mpz/t-pow.c
-2120,15 +2121,19	deps/patches/llvm-6.0.0_D27296-libssp.patch	/^@@ -2120,15 +2121,19 @@$/;"	h	modifiedFile:a/lib/Target/X86/X86ISelLowering.cpp
-2134,52 +2213,44	deps/patches/llvm-rL327898.patch	/^@@ -2134,52 +2213,44 @@ static SDNode *findGlueUse(SDNode *N) {$/;"	h	modifiedFile:a/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
-2157,8 +2157,9	deps/patches/llvm-D49832-SCEVPred.patch	/^@@ -2157,8 +2157,9 @@ Value *SCEVExpander::generateOverflowCheck(const SCEVAddRecExpr *AR,$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolutionExpander.cpp
-217,13 +217,13	deps/patches/llvm-rL326967-aligned-load.patch	/^@@ -217,13 +217,13 @@ define <4 x i64> @merge_4i64_i64_1zzu(i64* %ptr) nounwind uwtable noinline/;"	h	modifiedFile:a/test/CodeGen/X86/merge-consecutive-loads-256.ll
-2170,11 +2171,12	deps/patches/llvm-D49832-SCEVPred.patch	/^@@ -2170,11 +2171,12 @@ Value *SCEVExpander::generateOverflowCheck(const SCEVAddRecExpr *AR,$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolutionExpander.cpp
-2182,4 +2182,3	deps/patches/llvm-rL327898.patch	/^@@ -2182,4 +2182,3 @@ void HexagonDAGToDAGISel::rebalanceAddressTrees() {$/;"	h	modifiedFile:a/lib/Target/Hexagon/HexagonISelDAGToDAG.cpp
-2197,8 +2199,21	deps/patches/llvm-D49832-SCEVPred.patch	/^@@ -2197,8 +2199,21 @@ Value *SCEVExpander::generateOverflowCheck(const SCEVAddRecExpr *AR,$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolutionExpander.cpp
-22,12 +22,11	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -22,12 +22,11 @@ define void @test_01(i32* %arr, i32* %a_len_ptr) #0 {$/;"	h	modifiedFile:a/test/Transforms/IRCE/ranges_of_different_types.ll
-22,5 +22,5	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -22,5 +22,5 @@ afterfor:		; preds = %forinc, %entry$/;"	h	modifiedFile:a/test/Analysis/ScalarEvolution/2008-07-29-SMinExpr.ll
-22,5 +22,5	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -22,5 +22,5 @@ afterfor:		; preds = %forinc, %entry$/;"	h	modifiedFile:a/test/Analysis/ScalarEvolution/2008-07-29-SMinExpr.ll
-22,5 +22,5	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -22,5 +22,5 @@ afterfor:		; preds = %forinc, %entry$/;"	h	modifiedFile:a/test/Analysis/ScalarEvolution/2008-07-29-SMinExpr.ll
-223,15 +223,14	deps/patches/llvm-D46460.patch	/^@@ -223,15 +223,14 @@$/;"	h	modifiedFile:a/lib/Analysis/LoopInfo.cpp
-223,8 +223,8	deps/patches/dSFMT.c.patch	/^@@ -223,8 +223,8 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.c
-2251,13 +2322,12	deps/patches/llvm-rL327898.patch	/^@@ -2251,13 +2322,12 @@ bool SelectionDAGISel::IsLegalToFold(SDValue N, SDNode *U, SDNode *Root,$/;"	h	modifiedFile:a/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
-2276,6 +2286,8	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -2276,6 +2286,8 @@ bool ScalarEvolution::isAvailableAtLoopEntry(const SCEV *S, const Loop *L)/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-23,12 +23,11	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -23,12 +23,11 @@ define void @test_01(i32* %arr, i32* %a_len_ptr) #0 {$/;"	h	modifiedFile:a/test/Transforms/IRCE/ranges_of_different_types.ll
-23,12 +23,11	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -23,12 +23,11 @@ define void @test_01(i32* %arr, i32* %a_len_ptr) #0 {$/;"	h	modifiedFile:a/test/Transforms/IRCE/ranges_of_different_types.ll
-233,10 +233,10	deps/patches/llvm-D49832-SCEVPred.patch	/^@@ -233,10 +233,10 @@ for.end:                                          ; preds = %for.body$/;"	h	modifiedFile:a/test/Analysis/LoopAccessAnalysis/wrapping-pointer-versioning.ll
-2335,6 +2375,8	deps/patches/llvm-rL327898.patch	/^@@ -2335,6 +2375,8 @@ bool X86DAGToDAGISel::foldLoadStoreIntoMemOperand(SDNode *Node) {$/;"	h	modifiedFile:a/lib/Target/X86/X86ISelDAGToDAG.cpp
-235,18 +235,16	deps/patches/llvm-rL327898.patch	/^@@ -235,18 +235,16 @@ define <8 x i32> @PR29088(<4 x i32>* %p0, <8 x float>* %p1) {$/;"	h	modifiedFile:a/test/CodeGen/X86/avx-vbroadcastf128.ll
-236,7 +242,7	deps/patches/dSFMT.h.patch	/^@@ -236,7 +242,7 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.h
-2360,7 +2430,8	deps/patches/llvm-rL327898.patch	/^@@ -2360,7 +2430,8 @@ void SelectionDAGISel::UpdateChains($/;"	h	modifiedFile:a/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
-2375,143 +2446,6	deps/patches/llvm-rL327898.patch	/^@@ -2375,143 +2446,6 @@ void SelectionDAGISel::UpdateChains($/;"	h	modifiedFile:a/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
-24 +24	deps/patches/llvm-OProfile-line-num.patch	/^@@ -24 +24 @@ parent = ExecutionEngine$/;"	h	modifiedFile:a/lib/ExecutionEngine/OProfileJIT/LLVMBuild.txt
-251,12 +244,11	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -251,12 +244,11 @@ define void @test_05(i32* %arr, i32* %a_len_ptr) #0 {$/;"	h	modifiedFile:a/test/Transforms/IRCE/ranges_of_different_types.ll
-252,12 +245,11	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -252,12 +245,11 @@ define void @test_05(i32* %arr, i32* %a_len_ptr) #0 {$/;"	h	modifiedFile:a/test/Transforms/IRCE/ranges_of_different_types.ll
-252,12 +245,11	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -252,12 +245,11 @@ define void @test_05(i32* %arr, i32* %a_len_ptr) #0 {$/;"	h	modifiedFile:a/test/Transforms/IRCE/ranges_of_different_types.ll
-2521,47 +2455,56	deps/patches/llvm-rL327898.patch	/^@@ -2521,47 +2455,56 @@ WalkChainUsers(const SDNode *ChainedNode,$/;"	h	modifiedFile:a/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
-253,6 +253,7	deps/patches/libunwind-prefer-extbl.patch	/^@@ -253,6 +253,7 @@ dwarf_put (struct dwarf_cursor *c, dwarf_loc_t loc, unw_word_t val)$/;"	h	modifiedFile:a/include/tdep-arm/libunwind_i.h
-257,7 +263,7	deps/patches/dSFMT.h.patch	/^@@ -257,7 +263,7 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.h
-26,0 +27,2	deps/patches/llvm-OProfile-line-num.patch	/^@@ -26,0 +27,2 @@$/;"	h	modifiedFile:a/lib/ExecutionEngine/OProfileJIT/OProfileJITEventListener.cpp
-26,6 +26,7	deps/patches/llvm-rL332682.patch	/^@@ -26,6 +26,7 @@$/;"	h	modifiedFile:a/lib/Target/X86/X86DomainReassignment.cpp
-2606,8 +2549,8	deps/patches/llvm-rL327898.patch	/^@@ -2606,8 +2549,8 @@ MorphNode(SDNode *Node, unsigned TargetOpc, SDVTList VTList,$/;"	h	modifiedFile:a/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
-261,10 +261,10	deps/patches/llvm-rL326967-aligned-load.patch	/^@@ -261,10 +261,10 @@ let Predicates = [HasVLX] in {$/;"	h	modifiedFile:a/lib/Target/X86/X86InstrVecCompiler.td
-2615,14 +2558,15	deps/patches/llvm-rL327898.patch	/^@@ -2615,14 +2558,15 @@ MorphNode(SDNode *Node, unsigned TargetOpc, SDVTList VTList,$/;"	h	modifiedFile:a/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
-262,25 +262,6	deps/patches/llvm-rL332680.patch	/^@@ -262,25 +262,6 @@$/;"	h	modifiedFile:a/lib/Target/X86/X86DomainReassignment.cpp
-262,7 +262,7	deps/patches/clang-D28477.patch	/^@@ -262,7 +262,7 @@$/;"	h	modifiedFile:a/tools/clang/lib/CodeGen/BackendUtil.cpp
-266,8 +266,8	deps/patches/dSFMT.c.patch	/^@@ -266,8 +266,8 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.c
-267,7 +267,9	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -267,7 +267,9 @@ void SCEV::print(raw_ostream &OS) const {$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-27,7 +27,6	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -27,7 +27,6 @@ define i32 @main() local_unnamed_addr #0 {$/;"	h	modifiedFile:a/test/Transforms/LoopVectorize/X86/pr35432.ll
-27,7 +27,6	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -27,7 +27,6 @@ define i32 @main() local_unnamed_addr #0 {$/;"	h	modifiedFile:a/test/Transforms/LoopVectorize/X86/pr35432.ll
-27095,7 +27095,7	deps/patches/gmp-config-ldflags.patch	/^@@ -27095,7 +27095,7 @@ for tmp_underscore in "" "_"; do$/;"	h	modifiedFile:gmp-6.1.2/configure
-271,18 +271,16	deps/patches/llvm-rL327898.patch	/^@@ -271,18 +271,16 @@ define <8 x i32> @PR29088(<4 x i32>* %p0, <8 x float>* %p1) {$/;"	h	modifiedFile:a/test/CodeGen/X86/avx2-vbroadcasti128.ll
-271,7 +271,9	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -271,7 +271,9 @@ void SCEV::print(raw_ostream &OS) const {$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-273,7 +273,9	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -273,7 +273,9 @@ void SCEV::print(raw_ostream &OS) const {$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-274,91 +274,91	deps/patches/llvm-rL326967-aligned-load.patch	/^@@ -274,91 +274,91 @@ multiclass subvector_zero_lowering<string MoveStr, RegisterClass RC,$/;"	h	modifiedFile:a/lib/Target/X86/X86InstrVecCompiler.td
-275,6 +277,12	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -275,6 +277,12 @@ void SCEV::print(raw_ostream &OS) const {$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-2758,7 +2763,7	deps/patches/llvm-D45008.patch	/^@@ -2758,7 +2763,7 @@$/;"	h	modifiedFile:a/lib/CodeGen/MachineBlockPlacement.cpp
-276,7 +282,7	deps/patches/dSFMT.h.patch	/^@@ -276,7 +282,7 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.h
-279,6 +281,8	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -279,6 +281,8 @@ void SCEV::print(raw_ostream &OS) const {$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-28,11 +28,8	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -28,11 +28,8 @@ define void @decrementing_loop(i32 *%arr, i32 *%a_len_ptr, i32 %n) {$/;"	h	modifiedFile:a/test/Transforms/IRCE/decrementing-loop.ll
-28,13 +28,13	deps/patches/llvm-rL326967-aligned-load.patch	/^@@ -28,13 +28,13 @@ define <4 x double> @merge_4f64_2f64_23(<2 x double>* %ptr) nounwind uwtable/;"	h	modifiedFile:a/test/CodeGen/X86/merge-consecutive-loads-256.ll
-281,6 +281,8	deps/patches/llvm-D27629-AArch64-large_model_4.0.patch	/^@@ -281,6 +281,8 @@ void MCObjectFileInfo::initELFMCObjectFileInfo(const Triple &T) {$/;"	h	modifiedFile:a/lib/MC/MCObjectFileInfo.cpp
-281,6 +283,12	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -281,6 +283,12 @@ void SCEV::print(raw_ostream &OS) const {$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-287,7 +293,7	deps/patches/dSFMT.h.patch	/^@@ -287,7 +293,7 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.h
-29,11 +29,8	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -29,11 +29,8 @@ define void @decrementing_loop(i32 *%arr, i32 *%a_len_ptr, i32 %n) {$/;"	h	modifiedFile:a/test/Transforms/IRCE/decrementing-loop.ll
-29,11 +29,8	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -29,11 +29,8 @@ define void @decrementing_loop(i32 *%arr, i32 *%a_len_ptr, i32 %n) {$/;"	h	modifiedFile:a/test/Transforms/IRCE/decrementing-loop.ll
-29,12 +29,20	deps/patches/llvm-rL349068-llvm-config.patch	/^@@ -29,12 +29,20 @@ string(REPLACE ";" " " SYSTEM_LIBS "${SYSTEM_LIBS}")$/;"	h	modifiedFile:a/tools/llvm-config/CMakeLists.txt
-291,6 +291,8	deps/patches/llvm-D27629-AArch64-large_model_6.0.1.patch	/^@@ -291,6 +291,8 @@ void MCObjectFileInfo::initELFMCObjectFileInfo(const Triple &T, bool Large) /;"	h	modifiedFile:a/lib/MC/MCObjectFileInfo.cpp
-291,8 +292,12	deps/patches/llvm-rL332682.patch	/^@@ -291,8 +292,12 @@$/;"	h	modifiedFile:a/lib/Target/X86/X86DomainReassignment.cpp
-2939,8 +2883,7	deps/patches/llvm-rL327898.patch	/^@@ -2939,8 +2883,7 @@ void SelectionDAGISel::SelectCodeCommon(SDNode *NodeToMatch,$/;"	h	modifiedFile:a/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
-294,6 +295,9	deps/patches/libunwind-prefer-extbl.patch	/^@@ -294,6 +295,9 @@ extern void tdep_init (void);$/;"	h	modifiedFile:a/include/tdep-arm/libunwind_i.h
-2946,12 +2988,7	deps/patches/llvm-rL327898.patch	/^@@ -2946,12 +2988,7 @@ void X86DAGToDAGISel::Select(SDNode *Node) {$/;"	h	modifiedFile:a/lib/Target/X86/X86ISelDAGToDAG.cpp
-296,13 +288,11	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -296,13 +288,11 @@ define void @test_06(i32* %arr, i32* %a_len_ptr) #0 {$/;"	h	modifiedFile:a/test/Transforms/IRCE/ranges_of_different_types.ll
-296,8 +296,10	deps/patches/libgit2-agent-nonfatal.patch	/^@@ -296,8 +296,10 @@ static int ssh_agent_auth(LIBSSH2_SESSION *session, git_cred_ssh_key *c) {$/;"	h	modifiedFile:a/src/transports/ssh.c
-297,13 +289,11	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -297,13 +289,11 @@ define void @test_06(i32* %arr, i32* %a_len_ptr) #0 {$/;"	h	modifiedFile:a/test/Transforms/IRCE/ranges_of_different_types.ll
-297,13 +289,11	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -297,13 +289,11 @@ define void @test_06(i32* %arr, i32* %a_len_ptr) #0 {$/;"	h	modifiedFile:a/test/Transforms/IRCE/ranges_of_different_types.ll
-2971,95 +3008,52	deps/patches/llvm-rL327898.patch	/^@@ -2971,95 +3008,52 @@ void X86DAGToDAGISel::Select(SDNode *Node) {$/;"	h	modifiedFile:a/lib/Target/X86/X86ISelDAGToDAG.cpp
-299,7 +305,7	deps/patches/dSFMT.h.patch	/^@@ -299,7 +305,7 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.h
-30,10 +31,15	deps/patches/llvm7-D50010-VNCoercion-ni.patch	/^@@ -30,10 +31,15 @@ bool canCoerceMustAliasedValueToLoad(Value *StoredVal, Type *LoadTy,$/;"	h	modifiedFile:a/lib/Transforms/Utils/VNCoercion.cpp
-30,3 +30,7	deps/patches/llvm-D44892-Perf-integration.patch	/^@@ -30,3 +30,7 @@ endif( LLVM_USE_OPROFILE )$/;"	h	modifiedFile:a/lib/ExecutionEngine/CMakeLists.txt
-3062,7 +3062,8	deps/patches/llvm-D51842-win64-byval-cc.patch	/^@@ -3062,7 +3062,8 @@ SDValue X86TargetLowering::LowerFormalArguments($/;"	h	modifiedFile:a/lib/Target/X86/X86ISelLowering.cpp
-310,7 +316,7	deps/patches/dSFMT.h.patch	/^@@ -310,7 +316,7 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.h
-3138,7 +3138,8	deps/patches/llvm7-D51842-win64-byval-cc.patch	/^@@ -3138,7 +3138,8 @@ SDValue X86TargetLowering::LowerFormalArguments($/;"	h	modifiedFile:a/lib/Target/X86/X86ISelLowering.cpp
-32,13 +32,13	deps/patches/dSFMT.c.patch	/^@@ -32,13 +32,13 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.c
-32,3 +32,22	deps/patches/llvm-rL332302.patch	/^@@ -32,3 +32,22 @@ entry:$/;"	h	modifiedFile:a/test/Transforms/InstCombine/gep-addrspace.ll
-320,20 +320,35	deps/patches/llvm-rL327898.patch	/^@@ -320,20 +320,35 @@ define <4 x i32> @combine_vpperm_10zz32BA(<4 x i32> %a0, <4 x i32> %a1) {$/;"	h	modifiedFile:a/test/CodeGen/X86/vector-shuffle-combining-xop.ll
-322,7 +328,7	deps/patches/dSFMT.h.patch	/^@@ -322,7 +328,7 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.h
-328,6 +333,10	deps/patches/llvm-rL332682.patch	/^@@ -328,6 +333,10 @@$/;"	h	modifiedFile:a/lib/Target/X86/X86DomainReassignment.cpp
-33,11 +33,9	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -33,11 +33,9 @@ define void @single_access_with_preloop(i32 *%arr, i32 *%a_len_ptr, i32 %n, i/;"	h	modifiedFile:a/test/Transforms/IRCE/single-access-with-preloop.ll
-33,24 +33,24	deps/patches/gmp-exception.patch	/^@@ -33,24 +33,24 @@$/;"	h	modifiedFile:a/errno.c
-33,7 +33,7	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -33,7 +33,7 @@ bb2:                                              ; preds = %bb1$/;"	h	modifiedFile:a/test/Analysis/ScalarEvolution/min-max-exprs.ll
-33,7 +33,7	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -33,7 +33,7 @@ bb2:                                              ; preds = %bb1$/;"	h	modifiedFile:a/test/Analysis/ScalarEvolution/min-max-exprs.ll
-33,7 +33,7	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -33,7 +33,7 @@ bb2:                                              ; preds = %bb1$/;"	h	modifiedFile:a/test/Analysis/ScalarEvolution/min-max-exprs.ll
-333,7 +339,7	deps/patches/dSFMT.h.patch	/^@@ -333,7 +339,7 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.h
-339,7 +365,7	deps/patches/llvm-rL332682.patch	/^@@ -339,7 +365,7 @@$/;"	h	modifiedFile:a/lib/Target/X86/X86DomainReassignment.cpp
-34,11 +34,9	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -34,11 +34,9 @@ define void @single_access_with_preloop(i32 *%arr, i32 *%a_len_ptr, i32 %n, i/;"	h	modifiedFile:a/test/Transforms/IRCE/single-access-with-preloop.ll
-34,11 +34,9	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -34,11 +34,9 @@ define void @single_access_with_preloop(i32 *%arr, i32 *%a_len_ptr, i32 %n, i/;"	h	modifiedFile:a/test/Transforms/IRCE/single-access-with-preloop.ll
-34,6 +34,7	deps/patches/llvm-rL326843-missing-header.patch	/^@@ -34,6 +34,7 @@$/;"	h	modifiedFile:a/lib/Transforms/InstCombine/InstructionCombining.cpp
-3405,23 +3417,20	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -3405,23 +3417,20 @@ ScalarEvolution::getGEPExpr(GEPOperator *GEP,$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-343,14 +333,11	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -343,14 +333,11 @@ define void @test_07(i32* %arr, i32* %a_len_ptr) #0 {$/;"	h	modifiedFile:a/test/Transforms/IRCE/ranges_of_different_types.ll
-343,6 +351,8	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -343,6 +351,8 @@ Type *SCEV::getType() const {$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-3430,61 +3439,85	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -3430,61 +3439,85 @@ ScalarEvolution::getSMaxExpr(SmallVectorImpl<const SCEV *> &Ops) {$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-344,14 +334,11	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -344,14 +334,11 @@ define void @test_07(i32* %arr, i32* %a_len_ptr) #0 {$/;"	h	modifiedFile:a/test/Transforms/IRCE/ranges_of_different_types.ll
-344,14 +334,11	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -344,14 +334,11 @@ define void @test_07(i32* %arr, i32* %a_len_ptr) #0 {$/;"	h	modifiedFile:a/test/Transforms/IRCE/ranges_of_different_types.ll
-345,7 +351,7	deps/patches/dSFMT.h.patch	/^@@ -345,7 +351,7 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.h
-347,6 +351,8	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -347,6 +351,8 @@ Type *SCEV::getType() const {$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-3488,23 +3502,21	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -3488,23 +3502,21 @@ ScalarEvolution::getGEPExpr(GEPOperator *GEP,$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-349,6 +357,8	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -349,6 +357,8 @@ Type *SCEV::getType() const {$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-3493,132 +3526,73	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -3493,132 +3526,73 @@ ScalarEvolution::getSMaxExpr(SmallVectorImpl<const SCEV *> &Ops) {$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-3493,209 +3507,153	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -3493,209 +3507,153 @@ ScalarEvolution::getGEPExpr(GEPOperator *GEP,$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-35,9 +33,9	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -35,9 +33,9 @@ define void @f_0(i32 *%arr, i32 *%a_len_ptr, i32 %n, i1* %cond_buf) {$/;"	h	modifiedFile:a/test/Transforms/IRCE/conjunctive-checks.ll
-35,9 +33,9	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -35,9 +33,9 @@ define void @f_0(i32 *%arr, i32 *%a_len_ptr, i32 %n, i1* %cond_buf) {$/;"	h	modifiedFile:a/test/Transforms/IRCE/conjunctive-checks.ll
-3513,61 +3525,91	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -3513,61 +3525,91 @@ ScalarEvolution::getSMaxExpr(SmallVectorImpl<const SCEV *> &Ops) {$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-3540,13 +3541,27	deps/patches/llvm-D51842-win64-byval-cc.patch	/^@@ -3540,13 +3541,27 @@ X86TargetLowering::LowerCall(TargetLowering::CallLoweringInfo &CLI,$/;"	h	modifiedFile:a/lib/Target/X86/X86ISelLowering.cpp
-357,8 +357,8	deps/patches/SuiteSparse-shlib.patch	/^@@ -357,8 +357,8 @@$/;"	h	modifiedFile:a/SuiteSparse_config/SuiteSparse_config.mk
-35751,15 +35751,17	deps/patches/llvm-r355582-avxminmax.patch	/^@@ -35751,15 +35751,17 @@ static SDValue combineFMinNumFMaxNum(SDNode *N, SelectionDAG &DAG,$/;"	h	modifiedFile:a/lib/Target/X86/X86ISelLowering.cpp
-3576,121 +3618,51	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -3576,121 +3618,51 @@ ScalarEvolution::getSMaxExpr(SmallVectorImpl<const SCEV *> &Ops) {$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-35770,9 +35772,8	deps/patches/llvm-r355582-avxminmax.patch	/^@@ -35770,9 +35772,8 @@ static SDValue combineFMinNumFMaxNum(SDNode *N, SelectionDAG &DAG,$/;"	h	modifiedFile:a/lib/Target/X86/X86ISelLowering.cpp
-358,17 +356,53	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -358,17 +356,53 @@ class Type;$/;"	h	modifiedFile:a/include/llvm/Analysis/ScalarEvolutionExpressions.h
-36,33 +36,42	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -36,33 +36,42 @@ class ConstantRange;$/;"	h	modifiedFile:a/include/llvm/Analysis/ScalarEvolutionExpressions.h
-3621,13 +3622,27	deps/patches/llvm7-D51842-win64-byval-cc.patch	/^@@ -3621,13 +3622,27 @@ X86TargetLowering::LowerCall(TargetLowering::CallLoweringInfo &CLI,$/;"	h	modifiedFile:a/lib/Target/X86/X86ISelLowering.cpp
-367,6 +367,10	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -367,6 +367,10 @@ namespace llvm {$/;"	h	modifiedFile:a/include/llvm/Analysis/ScalarEvolutionExpander.h
-368,6 +368,10	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -368,6 +368,10 @@ namespace llvm {$/;"	h	modifiedFile:a/include/llvm/Analysis/ScalarEvolutionExpander.h
-368,6 +368,10	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -368,6 +368,10 @@ namespace llvm {$/;"	h	modifiedFile:a/include/llvm/Analysis/ScalarEvolutionExpander.h
-368,7 +374,7	deps/patches/dSFMT.h.patch	/^@@ -368,7 +374,7 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.h
-37,14 +37,10	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -37,14 +37,10 @@ define void @multiple_access_no_preloop($/;"	h	modifiedFile:a/test/Transforms/IRCE/multiple-access-no-preloop.ll
-37,3 +37,21	deps/patches/llvm-D50010-VNCoercion-ni.patch	/^@@ -37,3 +37,21 @@ define i64 @f1(i1 %alwaysFalse, i8 addrspace(4)* %val, i8 addrspace(4)** %loc/;"	h	modifiedFile:a/test/Transforms/GVN/non-integral-pointers.ll
-37,3 +37,21	deps/patches/llvm7-D50010-VNCoercion-ni.patch	/^@@ -37,3 +37,21 @@ define i64 @f1(i1 %alwaysFalse, i8 addrspace(4)* %val, i8 addrspace(4)** %loc/;"	h	modifiedFile:a/test/Transforms/GVN/non-integral-pointers.ll
-37,77 +36,74	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -37,77 +36,74 @@ define i32 @main() local_unnamed_addr #0 {$/;"	h	modifiedFile:a/test/Transforms/LoopVectorize/X86/pr35432.ll
-37,77 +36,74	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -37,77 +36,74 @@ define i32 @main() local_unnamed_addr #0 {$/;"	h	modifiedFile:a/test/Transforms/LoopVectorize/X86/pr35432.ll
-3700,11 +3672,7	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -3700,11 +3672,7 @@ const SCEV *ScalarEvolution::getSMinExpr(const SCEV *LHS,$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-3702,7 +3645,7	deps/patches/llvm-rL327898.patch	/^@@ -3702,7 +3645,7 @@ void SelectionDAGISel::SelectCodeCommon(SDNode *NodeToMatch,$/;"	h	modifiedFile:a/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
-3705,11 +3663,7	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -3705,11 +3663,7 @@ const SCEV *ScalarEvolution::getSMinExpr(const SCEV *LHS,$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-3714,16 +3682,7	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -3714,16 +3682,7 @@ const SCEV *ScalarEvolution::getUMinExpr(const SCEV *LHS,$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-3715,8 +3658,8	deps/patches/llvm-rL327898.patch	/^@@ -3715,8 +3658,8 @@ void SelectionDAGISel::SelectCodeCommon(SDNode *NodeToMatch,$/;"	h	modifiedFile:a/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
-3719,16 +3673,7	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -3719,16 +3673,7 @@ const SCEV *ScalarEvolution::getUMinExpr(const SCEV *LHS,$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-377,15 +411,11	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -377,15 +411,11 @@ class Type;$/;"	h	modifiedFile:a/include/llvm/Analysis/ScalarEvolutionExpressions.h
-377,6 +377,9	deps/patches/llvm-D44892-Perf-integration.patch	/^@@ -377,6 +377,9 @@$/;"	h	modifiedFile:a/include/llvm/Config/config.h.cmake
-38,14 +38,10	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -38,14 +38,10 @@ define void @multiple_access_no_preloop($/;"	h	modifiedFile:a/test/Transforms/IRCE/multiple-access-no-preloop.ll
-38,14 +38,10	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -38,14 +38,10 @@ define void @multiple_access_no_preloop($/;"	h	modifiedFile:a/test/Transforms/IRCE/multiple-access-no-preloop.ll
-38,6 +38,7	deps/patches/gmp_alloc_overflow_func.patch	/^@@ -38,6 +38,7 @@ see https:\/\/www.gnu.org\/licenses\/.  *\/$/;"	h	modifiedFile:a/memory.c
-380,6 +380,9	deps/patches/llvm-6.0-D63688-wasm-isLocal.patch	/^@@ -380,6 +380,9 @@ static bool is_local_impl(struct STATVFS &Vfs) {$/;"	h	modifiedFile:a/lib/Support/Unix/Path.inc
-381,3 +381,15	deps/patches/llvm-6.0-r327540.patch	/^@@ -381,3 +381,15 @@ define i64 @ashr_imm4_i64(i64 %a) {$/;"	h	modifiedFile:a/test/CodeGen/X86/fast-isel-shift.ll
-381,7 +381,7	deps/patches/libunwind-static-arm.patch	/^@@ -381,7 +381,7 @@ arm_exidx_extract (struct dwarf_cursor *c, uint8_t *buf)$/;"	h	modifiedFile:a/src/arm/Gex_tables.c
-383,7 +389,7	deps/patches/dSFMT.h.patch	/^@@ -383,7 +389,7 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.h
-386,6 +386,8	deps/patches/llvm-D57118-powerpc.patch	/^@@ -386,6 +386,8 @@ elseif (LLVM_NATIVE_ARCH MATCHES "sparc")$/;"	h	modifiedFile:a/cmake/config-ix.cmake
-387,10 +374,9	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -387,10 +374,9 @@ define void @test_08(i32* %arr, i32* %a_len_ptr) #0 {$/;"	h	modifiedFile:a/test/Transforms/IRCE/ranges_of_different_types.ll
-388,10 +375,9	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -388,10 +375,9 @@ define void @test_08(i32* %arr, i32* %a_len_ptr) #0 {$/;"	h	modifiedFile:a/test/Transforms/IRCE/ranges_of_different_types.ll
-388,10 +375,9	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -388,10 +375,9 @@ define void @test_08(i32* %arr, i32* %a_len_ptr) #0 {$/;"	h	modifiedFile:a/test/Transforms/IRCE/ranges_of_different_types.ll
-394,6 +401,40	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -394,6 +401,40 @@ class Type;$/;"	h	modifiedFile:a/include/llvm/Analysis/ScalarEvolutionExpressions.h
-394,6 +424,34	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -394,6 +424,34 @@ class Type;$/;"	h	modifiedFile:a/include/llvm/Analysis/ScalarEvolutionExpressions.h
-396,6 +400,42	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -396,6 +400,42 @@ class Type;$/;"	h	modifiedFile:a/include/llvm/Analysis/ScalarEvolutionExpressions.h
-3970,12 +3915,45	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -3970,12 +3915,45 @@ const SCEV *ScalarEvolution::getNegativeSCEV(const SCEV *V,$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-399,7 +405,7	deps/patches/dSFMT.h.patch	/^@@ -399,7 +405,7 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.h
-4,16 +4,6	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -4,16 +4,6 @@ define void @f_0(i32 *%arr, i32 *%a_len_ptr, i32 %n, i1* %cond_buf) {$/;"	h	modifiedFile:a/test/Transforms/IRCE/conjunctive-checks.ll
-4,7 +4,7	deps/patches/dSFMT.h.patch	/^@@ -4,7 +4,7 @@$/;"	h	modifiedFile:a/test.c
-4,7 +4,7	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -4,7 +4,7 @@$/;"	h	modifiedFile:a/test/Analysis/ScalarEvolution/trip-count3.ll
-4,7 +4,7	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -4,7 +4,7 @@$/;"	h	modifiedFile:a/test/Analysis/ScalarEvolution/trip-count3.ll
-4,7 +4,7	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -4,7 +4,7 @@$/;"	h	modifiedFile:a/test/Analysis/ScalarEvolution/trip-count3.ll
-40,6 +40,7	deps/patches/dSFMT.h.patch	/^@@ -40,6 +40,7 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.h
-40,7 +40,7	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -40,7 +40,7 @@ class Type;$/;"	h	modifiedFile:a/include/llvm/Analysis/ScalarEvolutionExpressions.h
-40,7 +40,7	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -40,7 +40,7 @@ class Type;$/;"	h	modifiedFile:a/include/llvm/Analysis/ScalarEvolutionExpressions.h
-413,49 +402,44	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -413,49 +402,44 @@ define void @test_07(i32 *%arr, i32 %n, i32 %bound) {$/;"	h	modifiedFile:a/test/Transforms/IRCE/rc-negative-bound.ll
-413,49 +402,44	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -413,49 +402,44 @@ define void @test_07(i32 *%arr, i32 %n, i32 %bound) {$/;"	h	modifiedFile:a/test/Transforms/IRCE/rc-negative-bound.ll
-415,7 +421,7	deps/patches/dSFMT.h.patch	/^@@ -415,7 +421,7 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.h
-416,14 +442,14	deps/patches/llvm-rL332682.patch	/^@@ -416,14 +442,14 @@$/;"	h	modifiedFile:a/lib/Target/X86/X86DomainReassignment.cpp
-426,6 +426,16	deps/patches/llvm-D44892-Perf-integration.patch	/^@@ -426,6 +426,16 @@ if( LLVM_USE_OPROFILE )$/;"	h	modifiedFile:a/CMakeLists.txt
-431,7 +437,7	deps/patches/dSFMT.h.patch	/^@@ -431,7 +437,7 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.h
-435,16 +435,11	deps/patches/llvm-rL327898.patch	/^@@ -435,16 +435,11 @@ entry:$/;"	h	modifiedFile:a/test/CodeGen/X86/avx512-intrinsics-fast-isel.ll
-44,3 +44,25	deps/patches/llvm-D34078-vectorize-fdiv.patch	/^@@ -44,3 +44,25 @@ for.body:                                         ; preds = %for.body, %entry$/;"	h	modifiedFile:a/test/Transforms/LoopVectorize/float-reduction.ll
-44,3 +44,25	deps/patches/llvm8-D34078-vectorize-fdiv.patch	/^@@ -44,3 +44,25 @@ for.body:                                         ; preds = %for.body, %entry$/;"	h	modifiedFile:a/test/Transforms/LoopVectorize/float-reduction.ll
-44,6 +44,14	deps/patches/llvm-D45070.patch	/^@@ -44,6 +44,14 @@$/;"	h	modifiedFile:a/lib/Target/NVPTX/NVPTXTargetMachine.cpp
-441,7 +447,7	deps/patches/dSFMT.h.patch	/^@@ -441,7 +447,7 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.h
-443,6 +443,8	deps/patches/llvm-6.0-NVPTX-addrspaces.patch	/^@@ -443,6 +443,8 @@ public:$/;"	h	modifiedFile:a/lib/Target/NVPTX/NVPTXISelLowering.h
-447,11 +447,14	deps/patches/SuiteSparse-shlib.patch	/^@@ -447,11 +447,14 @@$/;"	h	modifiedFile:a/SuiteSparse_config/SuiteSparse_config.mk
-45,16 +45,14	deps/patches/gmp_alloc_overflow_func.patch	/^@@ -45,16 +45,14 @@ void *$/;"	h	modifiedFile:a/mpz/realloc.c
-45,17 +43,15	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -45,17 +43,15 @@ define void @single_access_with_preloop(i32 *%arr, i32 *%a_len_ptr, i32 %n, /;"	h	modifiedFile:a/test/Transforms/IRCE/single-access-with-preloop.ll
-45,8 +45,7	deps/patches/gmp_alloc_overflow_func.patch	/^@@ -45,8 +45,7 @@ mpz_init2 (mpz_ptr x, mp_bitcnt_t bits)$/;"	h	modifiedFile:a/mpz/init2.c
-45,8 +45,7	deps/patches/gmp_alloc_overflow_func.patch	/^@@ -45,8 +45,7 @@ mpz_realloc2 (mpz_ptr m, mp_bitcnt_t bit$/;"	h	modifiedFile:a/mpz/realloc2.c
-451,6 +451,7	deps/patches/llvm-D34078-vectorize-fdiv.patch	/^@@ -451,6 +451,7 @@ RecurrenceDescriptor::isRecurrenceInstr(Instruction *I, RecurrenceKind Kind,$/;"	h	modifiedFile:a/lib/Transforms/Utils/LoopUtils.cpp
-451,7 +457,7	deps/patches/dSFMT.h.patch	/^@@ -451,7 +457,7 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.h
-453,7 +453,7	deps/patches/dSFMT.c.patch	/^@@ -453,7 +453,7 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.c
-459,15 +459,17	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -459,15 +459,17 @@ exit:$/;"	h	modifiedFile:a/test/Transforms/IndVarSimplify/eliminate-trunc.ll
-46,17 +44,15	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -46,17 +44,15 @@ define void @single_access_with_preloop(i32 *%arr, i32 *%a_len_ptr, i32 %n, /;"	h	modifiedFile:a/test/Transforms/IRCE/single-access-with-preloop.ll
-46,17 +44,15	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -46,17 +44,15 @@ define void @single_access_with_preloop(i32 *%arr, i32 *%a_len_ptr, i32 %n, /;"	h	modifiedFile:a/test/Transforms/IRCE/single-access-with-preloop.ll
-46,3 +46,11	deps/patches/gmp_alloc_overflow_func.patch	/^@@ -46,3 +46,11 @@ mp_get_memory_functions (void *(**alloc_$/;"	h	modifiedFile:a/mp_get_fns.c
-462,7 +468,7	deps/patches/dSFMT.h.patch	/^@@ -462,7 +468,7 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.h
-463,16 +458,11	deps/patches/llvm-rL327898.patch	/^@@ -463,16 +458,11 @@ entry:$/;"	h	modifiedFile:a/test/CodeGen/X86/avx512-intrinsics-fast-isel.ll
-466,6 +507,10	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -466,6 +507,10 @@ class Type;$/;"	h	modifiedFile:a/include/llvm/Analysis/ScalarEvolutionExpressions.h
-466,6 +524,10	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -466,6 +524,10 @@ class Type;$/;"	h	modifiedFile:a/include/llvm/Analysis/ScalarEvolutionExpressions.h
-468,6 +508,10	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -468,6 +508,10 @@ class Type;$/;"	h	modifiedFile:a/include/llvm/Analysis/ScalarEvolutionExpressions.h
-47,8 +47,7	deps/patches/llvm-rL327898.patch	/^@@ -47,8 +47,7 @@ define <4 x double> @var_shuffle_v4f64_v4f64_uxx0_i64(<4 x double> %x, i64 %i0/;"	h	modifiedFile:a/test/CodeGen/X86/vector-shuffle-variable-256.ll
-471,7 +471,7	deps/patches/dSFMT.c.patch	/^@@ -471,7 +471,7 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.c
-472,8 +475,9	deps/patches/SuiteSparse-shlib.patch	/^@@ -472,8 +475,9 @@$/;"	h	modifiedFile:a/SuiteSparse_config/SuiteSparse_config.mk
-475,7 +481,7	deps/patches/dSFMT.h.patch	/^@@ -475,7 +481,7 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.h
-479,6 +479,13	deps/patches/gmp_alloc_overflow_func.patch	/^@@ -479,6 +479,13 @@ using std::FILE;$/;"	h	modifiedFile:a/gmp-h.in
-48,3 +48,12	deps/patches/gmp_alloc_overflow_func.patch	/^@@ -48,3 +48,12 @@ mp_set_memory_functions (void *(*alloc_f$/;"	h	modifiedFile:a/mp_set_fns.c
-481,4 +481,94	deps/patches/llvm-rL327898.patch	/^@@ -481,4 +481,94 @@ no:$/;"	h	modifiedFile:a/test/CodeGen/X86/test-shrink.ll
-489,13 +495,13	deps/patches/dSFMT.h.patch	/^@@ -489,13 +495,13 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.h
-489,7 +489,7	deps/patches/dSFMT.c.patch	/^@@ -489,7 +489,7 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.c
-498,7 +498,7	deps/patches/llvm-rL327898.patch	/^@@ -498,7 +498,7 @@ bool ARMDAGToDAGISel::canExtractShiftFromMul(const SDValue &N,$/;"	h	modifiedFile:a/lib/Target/ARM/ARMISelDAGToDAG.cpp
-4993,7 +4993,7	deps/patches/llvm-rL323946-LSRTy.patch	/^@@ -4993,7 +4993,7 @@ Value *LSRInstance::Expand(const LSRUse &LU, const LSRFixup &LF,$/;"	h	modifiedFile:a/lib/Transforms/Scalar/LoopStrengthReduce.cpp
-5,10 +6,41	deps/patches/llvm-rL327898.patch	/^@@ -5,10 +6,41 @@ target triple = "x86_64-apple-macosx10.10.0"$/;"	h	modifiedFile:a/test/CodeGen/X86/vastart-defs-eflags.ll
-5,17 +5,15	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -5,17 +5,15 @@ define void @f_0(i32 *%arr, i32 *%a_len_ptr, i32 %n, i1* %cond_buf) {$/;"	h	modifiedFile:a/test/Transforms/IRCE/conjunctive-checks.ll
-5,17 +5,15	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -5,17 +5,15 @@ define void @f_0(i32 *%arr, i32 *%a_len_ptr, i32 %n, i1* %cond_buf) {$/;"	h	modifiedFile:a/test/Transforms/IRCE/conjunctive-checks.ll
-5,7 +5,7	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -5,7 +5,7 @@$/;"	h	modifiedFile:a/test/Analysis/ScalarEvolution/pr28705.ll
-5,7 +5,7	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -5,7 +5,7 @@$/;"	h	modifiedFile:a/test/Analysis/ScalarEvolution/pr28705.ll
-5002,6 +4976,7	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -5002,6 +4976,7 @@ static bool IsAvailableOnEntry(const Loop *L, DominatorTree &DT, const SCE/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-503,7 +509,7	deps/patches/dSFMT.h.patch	/^@@ -503,7 +509,7 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.h
-506,18 +506,20	deps/patches/libunwind-prefer-extbl.patch	/^@@ -506,18 +506,20 @@ arm_phdr_cb (struct dl_phdr_info *info, size_t size, void *data)$/;"	h	modifiedFile:a/src/arm/Gex_tables.c
-507,7 +507,7	deps/patches/dSFMT.c.patch	/^@@ -507,7 +507,7 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.c
-512,47 +496,41	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -512,47 +496,41 @@ define void @test_08(i32 *%arr, i32 %n, i32 %bound) {$/;"	h	modifiedFile:a/test/Transforms/IRCE/rc-negative-bound.ll
-512,47 +496,41	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -512,47 +496,41 @@ define void @test_08(i32 *%arr, i32 %n, i32 %bound) {$/;"	h	modifiedFile:a/test/Transforms/IRCE/rc-negative-bound.ll
-512,7 +518,7	deps/patches/dSFMT.h.patch	/^@@ -512,7 +518,7 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.h
-513,6 +513,11	deps/patches/llvm-D45008.patch	/^@@ -513,6 +513,11 @@$/;"	h	modifiedFile:a/lib/CodeGen/MachineBlockPlacement.cpp
-519,6 +564,8	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -519,6 +564,8 @@ class Type;$/;"	h	modifiedFile:a/include/llvm/Analysis/ScalarEvolutionExpressions.h
-519,6 +581,8	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -519,6 +581,8 @@ class Type;$/;"	h	modifiedFile:a/include/llvm/Analysis/ScalarEvolutionExpressions.h
-5191,6 +5150,8	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -5191,6 +5150,8 @@ static bool IsAvailableOnEntry(const Loop *L, DominatorTree &DT, const SCE/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-5196,6 +5174,8	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -5196,6 +5174,8 @@ static bool IsAvailableOnEntry(const Loop *L, DominatorTree &DT, const SCE/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-521,6 +565,8	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -521,6 +565,8 @@ class Type;$/;"	h	modifiedFile:a/include/llvm/Analysis/ScalarEvolutionExpressions.h
-521,7 +527,7	deps/patches/dSFMT.h.patch	/^@@ -521,7 +527,7 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.h
-53,8 +53,15	deps/patches/libunwind-prefer-extbl.patch	/^@@ -53,8 +53,15 @@ arm_exidx_step (struct cursor *c)$/;"	h	modifiedFile:a/src/arm/Gstep.c
-531,7 +537,7	deps/patches/dSFMT.h.patch	/^@@ -531,7 +537,7 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.h
-54,7 +54,11	deps/patches/SuiteSparse-winclang.patch	/^@@ -54,7 +54,11 @@$/;"	h	modifiedFile:SuiteSparse_config/SuiteSparse_config.h
-540,6 +542,14	deps/patches/libunwind-prefer-extbl.patch	/^@@ -540,6 +542,14 @@ arm_find_proc_info (unw_addr_space_t as, unw_word_t ip,$/;"	h	modifiedFile:a/src/arm/Gex_tables.c
-541,7 +547,7	deps/patches/dSFMT.h.patch	/^@@ -541,7 +547,7 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.h
-545,18 +545,18	deps/patches/llvm-rL327898.patch	/^@@ -545,18 +545,18 @@ define void @avg_v48i8(<48 x i8>* %a, <48 x i8>* %b) nounwind {$/;"	h	modifiedFile:a/test/CodeGen/X86/avg.ll
-547,6 +547,34	deps/patches/llvm-D42262-jumpthreading-not-i1.patch	/^@@ -547,6 +547,34 @@ l5:$/;"	h	modifiedFile:a/test/Transforms/JumpThreading/basic.ll
-551,7 +557,7	deps/patches/dSFMT.h.patch	/^@@ -551,7 +557,7 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.h
-56,36 +55,35	deps/patches/llvm-rL327898.patch	/^@@ -56,36 +55,35 @@ define i32 @f(<4 x float> %A, i8* %B, <2 x double> %C, i32 %D, <2 x i64> %E,/;"	h	modifiedFile:a/test/CodeGen/X86/nontemporal.ll
-561,7 +567,7	deps/patches/dSFMT.h.patch	/^@@ -561,7 +567,7 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.h
-57,14 +47,10	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -57,14 +47,10 @@ define void @f_1($/;"	h	modifiedFile:a/test/Transforms/IRCE/conjunctive-checks.ll
-571,6 +571,7	deps/patches/llvm8-D34078-vectorize-fdiv.patch	/^@@ -571,6 +571,7 @@ RecurrenceDescriptor::isRecurrenceInstr(Instruction *I, RecurrenceKind Kind,$/;"	h	modifiedFile:a/lib/Analysis/IVDescriptors.cpp
-571,7 +577,7	deps/patches/dSFMT.h.patch	/^@@ -571,7 +577,7 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.h
-572,7 +572,7	deps/patches/llvm-6.0-DISABLE_ABI_CHECKS.patch	/^@@ -572,7 +572,7 @@ if (LLVM_ENABLE_WARNINGS AND (LLVM_COMPILER_IS_GCC_COMPATIBLE OR CLANG_CL))$/;"	h	modifiedFile:a/cmake/modules/HandleLLVMOptions.cmake
-58,10 +58,10	deps/patches/llvm-D49832-SCEVPred.patch	/^@@ -58,10 +58,10 @@ target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"$/;"	h	modifiedFile:a/test/Analysis/LoopAccessAnalysis/wrapping-pointer-versioning.ll
-58,14 +56,10	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -58,14 +56,10 @@ define void @f_1($/;"	h	modifiedFile:a/test/Transforms/IRCE/conjunctive-checks.ll
-58,14 +56,10	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -58,14 +56,10 @@ define void @f_1($/;"	h	modifiedFile:a/test/Transforms/IRCE/conjunctive-checks.ll
-58,7 +58,7	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -58,7 +58,7 @@ for.end:                                          ; preds = %for.body$/;"	h	modifiedFile:a/test/Analysis/LoopAccessAnalysis/reverse-memcheck-bounds.ll
-58,7 +58,7	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -58,7 +58,7 @@ for.end:                                          ; preds = %for.body$/;"	h	modifiedFile:a/test/Analysis/LoopAccessAnalysis/reverse-memcheck-bounds.ll
-58,7 +58,7	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -58,7 +58,7 @@ for.end:                                          ; preds = %for.body$/;"	h	modifiedFile:a/test/Analysis/LoopAccessAnalysis/reverse-memcheck-bounds.ll
-58,8 +58,8	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -58,8 +58,8 @@ define void @test_02(i32* %arr, i32* %a_len_ptr) #0 {$/;"	h	modifiedFile:a/test/Transforms/IRCE/unsigned_comparisons_ugt.ll
-58,8 +58,8	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -58,8 +58,8 @@ define void @test_02(i32* %arr, i32* %a_len_ptr) #0 {$/;"	h	modifiedFile:a/test/Transforms/IRCE/unsigned_comparisons_ugt.ll
-582,12 +582,15	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -582,12 +582,15 @@ public:$/;"	h	modifiedFile:a/include/llvm/Analysis/ScalarEvolution.h
-582,23 +582,23	deps/patches/llvm-rL327898.patch	/^@@ -582,23 +582,23 @@ define void @avg_v64i8(<64 x i8>* %a, <64 x i8>* %b) nounwind {$/;"	h	modifiedFile:a/test/CodeGen/X86/avg.ll
-582,6 +582,8	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -582,6 +582,8 @@ public:$/;"	h	modifiedFile:a/include/llvm/Analysis/ScalarEvolution.h
-582,6 +582,8	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -582,6 +582,8 @@ public:$/;"	h	modifiedFile:a/include/llvm/Analysis/ScalarEvolution.h
-583,9 +583,11	deps/patches/llvm-D51842-win64-byval-cc.patch	/^@@ -583,9 +583,11 @@ def CC_X86_64_HHVM_C : CallingConv<[$/;"	h	modifiedFile:a/lib/Target/X86/X86CallingConv.td
-584,7 +590,7	deps/patches/dSFMT.h.patch	/^@@ -584,7 +590,7 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.h
-587,7 +568,7	deps/patches/llvm-rL332680.patch	/^@@ -587,7 +568,7 @@$/;"	h	modifiedFile:a/lib/Target/X86/X86DomainReassignment.cpp
-5880,7 +5880,7	deps/patches/gmp-config-ldflags.patch	/^@@ -5880,7 +5880,7 @@ if test "$gmp_prog_cc_works" = yes; then$/;"	h	modifiedFile:gmp-6.1.2/configure
-589,10 +589,16	deps/patches/llvm-rL327898.patch	/^@@ -589,10 +589,16 @@ bool SystemZDAGToDAGISel::selectAddress(SDValue Addr,$/;"	h	modifiedFile:a/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp
-590,9 +590,11	deps/patches/llvm7-D51842-win64-byval-cc.patch	/^@@ -590,9 +590,11 @@ def CC_X86_64_HHVM_C : CallingConv<[$/;"	h	modifiedFile:a/lib/Target/X86/X86CallingConv.td
-5934,7 +5934,7	deps/patches/gmp-config-ldflags.patch	/^@@ -5934,7 +5934,7 @@ void *f() { return g(); }$/;"	h	modifiedFile:gmp-6.1.2/configure
-597,7 +603,7	deps/patches/dSFMT.h.patch	/^@@ -597,7 +603,7 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.h
-5990,7 +5990,7	deps/patches/gmp-config-ldflags.patch	/^@@ -5990,7 +5990,7 @@ int cmov () { return (n >= 0 ? n : 0); }$/;"	h	modifiedFile:gmp-6.1.2/configure
-6047,7 +6047,7	deps/patches/gmp-config-ldflags.patch	/^@@ -6047,7 +6047,7 @@ unsigned long gcc303 () { return (unsign$/;"	h	modifiedFile:gmp-6.1.2/configure
-61,8 +61,8	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -61,8 +61,8 @@ define void @test_02(i32* %arr, i32* %a_len_ptr) #0 {$/;"	h	modifiedFile:a/test/Transforms/IRCE/unsigned_comparisons_ult.ll
-61,8 +61,8	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -61,8 +61,8 @@ define void @test_02(i32* %arr, i32* %a_len_ptr) #0 {$/;"	h	modifiedFile:a/test/Transforms/IRCE/unsigned_comparisons_ult.ll
-610,7 +616,7	deps/patches/dSFMT.h.patch	/^@@ -610,7 +616,7 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.h
-6102,7 +6102,7	deps/patches/gmp-config-ldflags.patch	/^@@ -6102,7 +6102,7 @@ unsigned long fneg () { return -fneg_dat$/;"	h	modifiedFile:gmp-6.1.2/configure
-6158,7 +6158,7	deps/patches/gmp-config-ldflags.patch	/^@@ -6158,7 +6158,7 @@ float ftod () { return (float) ftod_data$/;"	h	modifiedFile:gmp-6.1.2/configure
-622,7 +628,7	deps/patches/dSFMT.h.patch	/^@@ -622,7 +628,7 @@$/;"	h	modifiedFile:dsfmt-2.2/dSFMT.h
-6243,7 +6243,7	deps/patches/gmp-config-ldflags.patch	/^@@ -6243,7 +6243,7 @@ param_init ()$/;"	h	modifiedFile:gmp-6.1.2/configure
-6294,7 +6294,7	deps/patches/gmp-config-ldflags.patch	/^@@ -6294,7 +6294,7 @@ if test "$gmp_prog_cc_works" = yes; then$/;"	h	modifiedFile:gmp-6.1.2/configure
-634,6 +644,9	deps/patches/llvm-D44892-Perf-integration.patch	/^@@ -634,6 +644,9 @@ endif (LLVM_USE_INTEL_JITEVENTS)$/;"	h	modifiedFile:a/CMakeLists.txt
-6340,7 +6340,7	deps/patches/gmp-config-ldflags.patch	/^@@ -6340,7 +6340,7 @@ int foo ()$/;"	h	modifiedFile:gmp-6.1.2/configure
-6418,7 +6418,7	deps/patches/gmp-config-ldflags.patch	/^@@ -6418,7 +6418,7 @@ int f ()$/;"	h	modifiedFile:gmp-6.1.2/configure
-647,11 +647,9	deps/patches/llvm-D42262-jumpthreading-not-i1.patch	/^@@ -647,11 +647,9 @@ bool JumpThreadingPass::ComputeValueKnownInPredecessors($/;"	h	modifiedFile:a/lib/Transforms/Scalar/JumpThreading.cpp
-6483,7 +6483,7	deps/patches/gmp-config-ldflags.patch	/^@@ -6483,7 +6483,7 @@ int dummy;$/;"	h	modifiedFile:gmp-6.1.2/configure
-65,6 +65,9	deps/patches/llvm-D44892-Perf-integration.patch	/^@@ -65,6 +65,9 @@$/;"	h	modifiedFile:a/include/llvm/Config/llvm-config.h.cmake
-6544,7 +6544,7	deps/patches/gmp-config-ldflags.patch	/^@@ -6544,7 +6544,7 @@ int dummy;$/;"	h	modifiedFile:gmp-6.1.2/configure
-6605,7 +6605,7	deps/patches/gmp-config-ldflags.patch	/^@@ -6605,7 +6605,7 @@ int dummy;$/;"	h	modifiedFile:gmp-6.1.2/configure
-67,7 +63,7	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -67,7 +63,7 @@ define void @single_access_with_preloop(i32 *%arr, i32 *%a_len_ptr, i32 %n, i3/;"	h	modifiedFile:a/test/Transforms/IRCE/single-access-with-preloop.ll
-67,7 +63,7	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -67,7 +63,7 @@ define void @single_access_with_preloop(i32 *%arr, i32 *%a_len_ptr, i32 %n, i3/;"	h	modifiedFile:a/test/Transforms/IRCE/single-access-with-preloop.ll
-6704,7 +6704,7	deps/patches/gmp-config-ldflags.patch	/^@@ -6704,7 +6704,7 @@ main ()$/;"	h	modifiedFile:gmp-6.1.2/configure
-678,12 +678,12	deps/patches/llvm-rL327898.patch	/^@@ -678,12 +678,12 @@ define void @avg_v8i16(<8 x i16>* %a, <8 x i16>* %b) nounwind {$/;"	h	modifiedFile:a/test/CodeGen/X86/avg.ll
-681,6 +728,26	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -681,6 +728,26 @@ class Type;$/;"	h	modifiedFile:a/include/llvm/Analysis/ScalarEvolutionExpressions.h
-681,6 +745,26	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -681,6 +745,26 @@ class Type;$/;"	h	modifiedFile:a/include/llvm/Analysis/ScalarEvolutionExpressions.h
-6813,7 +6813,7	deps/patches/gmp-config-ldflags.patch	/^@@ -6813,7 +6813,7 @@ main ()$/;"	h	modifiedFile:gmp-6.1.2/configure
-683,6 +729,26	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -683,6 +729,26 @@ class Type;$/;"	h	modifiedFile:a/include/llvm/Analysis/ScalarEvolutionExpressions.h
-696,10 +696,12	deps/patches/gmp_alloc_overflow_func.patch	/^@@ -696,10 +696,12 @@ struct tmp_debug_entry_t {$/;"	h	modifiedFile:a/gmp-impl.h
-7,12 +7,12	deps/patches/openblas-skylakexdgemm.patch	/^@@ -7,12 +7,12 @@ SGEMMITCOPY    =  sgemm_tcopy_16_skylakex.c$/;"	h	modifiedFile:a/kernel/x86_64/KERNEL.SKYLAKEX
-705,6 +731,7	deps/patches/llvm-rL332682.patch	/^@@ -705,6 +731,7 @@$/;"	h	modifiedFile:a/lib/Target/X86/X86DomainReassignment.cpp
-711,7 +721,9	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -711,7 +721,9 @@ static int CompareSCEVComplexity($/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-713,7 +723,9	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -713,7 +723,9 @@ static int CompareSCEVComplexity($/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-717,20 +744,21	deps/patches/llvm-rL332682.patch	/^@@ -717,20 +744,21 @@$/;"	h	modifiedFile:a/lib/Target/X86/X86DomainReassignment.cpp
-718,7 +724,9	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -718,7 +724,9 @@ static int CompareSCEVComplexity($/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-727,6 +729,12	deps/patches/gmp_alloc_overflow_func.patch	/^@@ -727,6 +729,12 @@ struct tmp_debug_entry_t {$/;"	h	modifiedFile:a/gmp-impl.h
-729,18 +729,18	deps/patches/llvm-rL327898.patch	/^@@ -729,18 +729,18 @@ define void @avg_v16i16(<16 x i16>* %a, <16 x i16>* %b) nounwind {$/;"	h	modifiedFile:a/test/CodeGen/X86/avg.ll
-7325,7 +7325,7	deps/patches/gmp-config-ldflags.patch	/^@@ -7325,7 +7325,7 @@ _main:$/;"	h	modifiedFile:gmp-6.1.2/configure
-7390,7 +7390,7	deps/patches/gmp-config-ldflags.patch	/^@@ -7390,7 +7390,7 @@ $as_echo_n "checking compiler $cc $cflag$/;"	h	modifiedFile:gmp-6.1.2/configure
-7498,7 +7498,7	deps/patches/gmp-config-ldflags.patch	/^@@ -7498,7 +7498,7 @@ if test "$gmp_prog_cc_works" = yes; then$/;"	h	modifiedFile:gmp-6.1.2/configure
-7552,7 +7552,7	deps/patches/gmp-config-ldflags.patch	/^@@ -7552,7 +7552,7 @@ void *f() { return g(); }$/;"	h	modifiedFile:gmp-6.1.2/configure
-759,12 +759,11	deps/patches/llvm-rL327898.patch	/^@@ -759,12 +759,11 @@ void AMDGPUDAGToDAGISel::SelectADD_SUB_I64(SDNode *N) {$/;"	h	modifiedFile:a/lib/Target/AMDGPU/AMDGPUISelDAGToDAG.cpp
-7608,7 +7608,7	deps/patches/gmp-config-ldflags.patch	/^@@ -7608,7 +7608,7 @@ int cmov () { return (n >= 0 ? n : 0); }$/;"	h	modifiedFile:gmp-6.1.2/configure
-761,6 +761,11	deps/patches/llvm-PPC-addrspaces.patch	/^@@ -761,6 +761,11 @@ namespace llvm {$/;"	h	modifiedFile:a/lib/Target/PowerPC/PPCISelLowering.h
-766,23 +766,23	deps/patches/llvm-rL327898.patch	/^@@ -766,23 +766,23 @@ define void @avg_v32i16(<32 x i16>* %a, <32 x i16>* %b) nounwind {$/;"	h	modifiedFile:a/test/CodeGen/X86/avg.ll
-7665,7 +7665,7	deps/patches/gmp-config-ldflags.patch	/^@@ -7665,7 +7665,7 @@ unsigned long gcc303 () { return (unsign$/;"	h	modifiedFile:gmp-6.1.2/configure
-77,5 +77,10	deps/patches/llvm-windows-race.patch	/^@@ -77,5 +77,10 @@ if(CMAKE_CROSSCOMPILING AND NOT LLVM_CONFIG_PATH)$/;"	h	modifiedFile:a/tools/llvm-config/CMakeLists.txt
-77,5 +77,10	deps/patches/llvm7-windows-race.patch	/^@@ -77,5 +77,10 @@ if(CMAKE_CROSSCOMPILING AND NOT LLVM_CONFIG_PATH)$/;"	h	modifiedFile:a/tools/llvm-config/CMakeLists.txt
-7720,7 +7720,7	deps/patches/gmp-config-ldflags.patch	/^@@ -7720,7 +7720,7 @@ unsigned long fneg () { return -fneg_dat$/;"	h	modifiedFile:gmp-6.1.2/configure
-777,7 +777,7	deps/patches/llvm-rL327898.patch	/^@@ -777,7 +777,7 @@ void HexagonDAGToDAGISel::SelectBitcast(SDNode *N) {$/;"	h	modifiedFile:a/lib/Target/Hexagon/HexagonISelDAGToDAG.cpp
-7776,7 +7776,7	deps/patches/gmp-config-ldflags.patch	/^@@ -7776,7 +7776,7 @@ float ftod () { return (float) ftod_data$/;"	h	modifiedFile:gmp-6.1.2/configure
-7854,9 +7854,6	deps/patches/llvm-rL327898.patch	/^@@ -7854,9 +7854,6 @@ bool X86InstrInfo::expandPostRAPseudo(MachineInstr &MI) const {$/;"	h	modifiedFile:a/lib/Target/X86/X86InstrInfo.cpp
-7861,7 +7861,7	deps/patches/gmp-config-ldflags.patch	/^@@ -7861,7 +7861,7 @@ param_init ()$/;"	h	modifiedFile:gmp-6.1.2/configure
-7885,7 +7860,9	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -7885,7 +7860,9 @@ static Constant *BuildConstantFromSCEV(const SCEV *V) {$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-7912,7 +7912,7	deps/patches/gmp-config-ldflags.patch	/^@@ -7912,7 +7912,7 @@ if test "$gmp_prog_cc_works" = yes; then$/;"	h	modifiedFile:gmp-6.1.2/configure
-7958,7 +7958,7	deps/patches/gmp-config-ldflags.patch	/^@@ -7958,7 +7958,7 @@ int foo ()$/;"	h	modifiedFile:gmp-6.1.2/configure
-796,16 +796,44	deps/patches/llvm-rL327898.patch	/^@@ -796,16 +796,44 @@ public:$/;"	h	modifiedFile:a/include/llvm/CodeGen/SelectionDAGNodes.h
-797,16 +797,11	deps/patches/llvm-rL327898.patch	/^@@ -797,16 +797,11 @@ entry:$/;"	h	modifiedFile:a/test/CodeGen/X86/avx512vl-intrinsics-fast-isel.ll
-80,7 +80,7	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -80,7 +80,7 @@ return:         ; preds = %bb5$/;"	h	modifiedFile:a/test/Analysis/ScalarEvolution/predicated-trip-count.ll
-80,7 +80,7	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -80,7 +80,7 @@ return:         ; preds = %bb5$/;"	h	modifiedFile:a/test/Analysis/ScalarEvolution/predicated-trip-count.ll
-80,7 +80,7	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -80,7 +80,7 @@ return:         ; preds = %bb5$/;"	h	modifiedFile:a/test/Analysis/ScalarEvolution/predicated-trip-count.ll
-8015,6 +7992,10	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -8015,6 +7992,10 @@ const SCEV *ScalarEvolution::computeSCEVAtScope(const SCEV *V, const Loop/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-8036,7 +8036,7	deps/patches/gmp-config-ldflags.patch	/^@@ -8036,7 +8036,7 @@ int f ()$/;"	h	modifiedFile:gmp-6.1.2/configure
-8070,7 +8031,9	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -8070,7 +8031,9 @@ static Constant *BuildConstantFromSCEV(const SCEV *V) {$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-8075,7 +8055,9	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -8075,7 +8055,9 @@ static Constant *BuildConstantFromSCEV(const SCEV *V) {$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-81,7 +81,7	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -81,7 +81,7 @@ if.end:$/;"	h	modifiedFile:a/test/Analysis/ScalarEvolution/trip-count14.ll
-81,7 +81,7	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -81,7 +81,7 @@ if.end:$/;"	h	modifiedFile:a/test/Analysis/ScalarEvolution/trip-count14.ll
-8101,7 +8101,7	deps/patches/gmp-config-ldflags.patch	/^@@ -8101,7 +8101,7 @@ int dummy;$/;"	h	modifiedFile:gmp-6.1.2/configure
-8131,6 +8131,32	deps/patches/llvm-rL327898.patch	/^@@ -8131,6 +8131,32 @@ X86TargetLowering::LowerBUILD_VECTOR(SDValue Op, SelectionDAG &DAG) const/;"	h	modifiedFile:a/lib/Target/X86/X86ISelLowering.cpp
-814,11 +842,16	deps/patches/llvm-rL327898.patch	/^@@ -814,11 +842,16 @@ public:$/;"	h	modifiedFile:a/include/llvm/CodeGen/SelectionDAGNodes.h
-8162,7 +8162,7	deps/patches/gmp-config-ldflags.patch	/^@@ -8162,7 +8162,7 @@ int dummy;$/;"	h	modifiedFile:gmp-6.1.2/configure
-82,13 +81,11	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -82,13 +81,11 @@ define void @test_02(i32* %arr, i32* %a_len_ptr) #0 {$/;"	h	modifiedFile:a/test/Transforms/IRCE/ranges_of_different_types.ll
-8200,6 +8163,10	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -8200,6 +8163,10 @@ const SCEV *ScalarEvolution::computeSCEVAtScope(const SCEV *V, const Loop/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-8201,10 +8183,8	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -8201,10 +8183,8 @@ const SCEV *ScalarEvolution::computeSCEVAtScope(const SCEV *V, const Loop/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-8223,7 +8223,7	deps/patches/gmp-config-ldflags.patch	/^@@ -8223,7 +8223,7 @@ int dummy;$/;"	h	modifiedFile:gmp-6.1.2/configure
-826,16 +821,11	deps/patches/llvm-rL327898.patch	/^@@ -826,16 +821,11 @@ entry:$/;"	h	modifiedFile:a/test/CodeGen/X86/avx512vl-intrinsics-fast-isel.ll
-83,13 +82,11	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -83,13 +82,11 @@ define void @test_02(i32* %arr, i32* %a_len_ptr) #0 {$/;"	h	modifiedFile:a/test/Transforms/IRCE/ranges_of_different_types.ll
-83,13 +82,11	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -83,13 +82,11 @@ define void @test_02(i32* %arr, i32* %a_len_ptr) #0 {$/;"	h	modifiedFile:a/test/Transforms/IRCE/ranges_of_different_types.ll
-8322,7 +8322,7	deps/patches/gmp-config-ldflags.patch	/^@@ -8322,7 +8322,7 @@ main ()$/;"	h	modifiedFile:gmp-6.1.2/configure
-8431,7 +8431,7	deps/patches/gmp-config-ldflags.patch	/^@@ -8431,7 +8431,7 @@ main ()$/;"	h	modifiedFile:gmp-6.1.2/configure
-85,11 +85,9	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -85,11 +85,9 @@ define void @single_access_no_preloop_with_offset(i32 *%arr, i32 *%a_len_ptr,/;"	h	modifiedFile:a/test/Transforms/IRCE/single-access-no-preloop.ll
-85,9 +79,9	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -85,9 +79,9 @@ define void @f_1($/;"	h	modifiedFile:a/test/Transforms/IRCE/conjunctive-checks.ll
-85,9 +79,9	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -85,9 +79,9 @@ define void @f_1($/;"	h	modifiedFile:a/test/Transforms/IRCE/conjunctive-checks.ll
-86,0 +89,2	deps/patches/llvm-OProfile-line-num.patch	/^@@ -86,0 +89,2 @@ void OProfileJITEventListener::NotifyObjectEmitted($/;"	h	modifiedFile:a/lib/ExecutionEngine/OProfileJIT/OProfileJITEventListener.cpp
-86,15 +86,13	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -86,15 +86,13 @@ define void @single_access_no_preloop_with_offset(i32 *%arr, i32 *%a_len_ptr/;"	h	modifiedFile:a/test/Transforms/IRCE/single-access-no-preloop.ll
-86,15 +86,13	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -86,15 +86,13 @@ define void @single_access_no_preloop_with_offset(i32 *%arr, i32 *%a_len_ptr/;"	h	modifiedFile:a/test/Transforms/IRCE/single-access-no-preloop.ll
-86,7 +86,6	deps/patches/llvm-rL327898.patch	/^@@ -86,7 +86,6 @@ static bool shouldScheduleAdjacent(const TargetInstrInfo &TII,$/;"	h	modifiedFile:a/lib/Target/X86/X86MacroFusion.cpp
-870,6 +870,13	deps/patches/llvm6-WASM-addrspaces.patch	/^@@ -870,6 +870,13 @@ SDValue WebAssemblyTargetLowering::LowerVASTART(SDValue Op,$/;"	h	modifiedFile:a/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp
-891,9 +891,9	deps/patches/llvm-rL327898.patch	/^@@ -891,9 +891,9 @@ define void @avg_v32i8_2(<32 x i8>* %a, <32 x i8>* %b) nounwind {$/;"	h	modifiedFile:a/test/CodeGen/X86/avg.ll
-899,6 +899,13	deps/patches/llvm7-WASM-addrspaces.patch	/^@@ -899,6 +899,13 @@ WebAssemblyTargetLowering::LowerINTRINSIC_WO_CHAIN(SDValue Op,$/;"	h	modifiedFile:a/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp
-90,12 +90,12	deps/patches/llvm-rL327898.patch	/^@@ -90,12 +90,12 @@ define void @avg_v16i8(<16 x i8>* %a, <16 x i8>* %b) nounwind {$/;"	h	modifiedFile:a/test/CodeGen/X86/avg.ll
-90,6 +90,8	deps/patches/llvm6-WASM-addrspaces.patch	/^@@ -90,6 +90,8 @@ class WebAssemblyTargetLowering final : public TargetLowering {$/;"	h	modifiedFile:a/lib/Target/WebAssembly/WebAssemblyISelLowering.h
-913,6 +925,8	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^@@ -913,6 +925,8 @@ public:$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-915,6 +927,8	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -915,6 +927,8 @@ public:$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-922,6 +930,8	deps/patches/llvm-D50167-scev-umin.patch	/^@@ -922,6 +930,8 @@ public:$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-937,6 +937,58	deps/patches/llvm-rL327898.patch	/^@@ -937,6 +937,58 @@ public:$/;"	h	modifiedFile:a/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
-94,6 +94,8	deps/patches/llvm7-WASM-addrspaces.patch	/^@@ -94,6 +94,8 @@ class WebAssemblyTargetLowering final : public TargetLowering {$/;"	h	modifiedFile:a/lib/Target/WebAssembly/WebAssemblyISelLowering.h
-94,8 +101,21	deps/patches/libunwind-prefer-extbl.patch	/^@@ -94,8 +101,21 @@ unw_step (unw_cursor_t *cursor)$/;"	h	modifiedFile:a/src/arm/Gstep.c
-972,6 +1024,33	deps/patches/llvm-rL327898.patch	/^@@ -972,6 +1024,33 @@ void SelectionDAGISel::DoInstructionSelection() {$/;"	h	modifiedFile:a/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
-9859,26 +9826,28	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -9859,26 +9826,28 @@ static const SCEV *MatchNotExpr(const SCEV *Expr) {$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-988,10 +988,16	deps/patches/llvm-rL327898.patch	/^@@ -988,10 +988,16 @@ bool X86DAGToDAGISel::matchAdd(SDValue N, X86ISelAddressMode &AM,$/;"	h	modifiedFile:a/lib/Target/X86/X86ISelDAGToDAG.cpp
-9927,20 +9896,24	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^@@ -9927,20 +9896,24 @@ static bool IsKnownPredicateViaMinOrMax(ScalarEvolution &SE,$/;"	h	modifiedFile:a/lib/Analysis/ScalarEvolution.cpp
-9987,7 +9987,7	deps/patches/gmp-config-ldflags.patch	/^@@ -9987,7 +9987,7 @@ main ()$/;"	h	modifiedFile:gmp-6.1.2/configure
-R	contrib/mac/framework/Makefile	/^	chown -R $$(id -un):$$(id -gn) $(DESTDIR)$(prefix)\/$(framework_directory)$/;"	t
-g	deps/srccache/patchelf-0.9/configure	/^  alias -g '${1+"$@"}'='"$@"'$/;"	a
-g	deps/srccache/patchelf-0.9/configure	/^  alias -g '\\${1+\\"\\$@\\"}'='\\"\\$@\\"'$/;"	a
.admonition.compat	doc/src/assets/julia-manual.css	/^.admonition.compat {$/;"	c
.admonition.compat > .admonition-title	doc/src/assets/julia-manual.css	/^.admonition.compat > .admonition-title {$/;"	c
.c.o	deps/srccache/patchelf-0.9/tests/Makefile.in	/^.c.o:$/;"	t
.c.obj	deps/srccache/patchelf-0.9/tests/Makefile.in	/^.c.obj:$/;"	t
.cc.o	deps/srccache/patchelf-0.9/src/Makefile.in	/^.cc.o:$/;"	t
.cc.obj	deps/srccache/patchelf-0.9/src/Makefile.in	/^.cc.obj:$/;"	t
.log.trs	deps/srccache/patchelf-0.9/tests/Makefile.in	/^.log.trs:$/;"	t
.test.log	deps/srccache/patchelf-0.9/tests/Makefile.in	/^.test.log:$/;"	t
/	base/bitarray.jl	/^(\/)(B::BitArray, x::Number) = (\/)(Array(B), x)$/;"	f
/	base/bitarray.jl	/^(\/)(x::Number, B::BitArray) = (\/)(x, Array(B))$/;"	f
/	base/complex.jl	/^\/(a::R, z::S) where {R<:Real,S<:Complex} = (T = promote_type(R,S); a*inv(T(z)))$/;"	f
/	base/complex.jl	/^\/(z::Complex, x::Real) = Complex(real(z)\/x, imag(z)\/x)$/;"	f
/	base/complex.jl	/^\/(z::Complex{T}, w::Complex{T}) where {T<:Union{Float16,Float32}} =$/;"	f
/	base/complex.jl	/^function \/(a::Complex{T}, b::Complex{T}) where T<:Real$/;"	f
/	base/complex.jl	/^function \/(z::ComplexF64, w::ComplexF64)$/;"	f
/	base/float.jl	/^\/(x::Float32, y::Float32) = div_float(x, y)$/;"	f
/	base/float.jl	/^\/(x::Float64, y::Float64) = div_float(x, y)$/;"	f
/	base/gmp.jl	/^\/(x::BigInt, y::BigInt) = float(x)\/float(y)$/;"	f
/	base/gmp.jl	/^\/(x::BigInt, y::Union{ClongMax,CulongMax}) = float(x)\/y$/;"	f
/	base/gmp.jl	/^\/(x::Union{ClongMax,CulongMax}, y::BigInt) = x\/float(y)$/;"	f
/	base/int.jl	/^(\/)(x::BitInteger, y::BitInteger) = float(x) \/ float(y)$/;"	f
/	base/int.jl	/^(\/)(x::T, y::T) where {T<:Integer} = float(x) \/ float(y)$/;"	f
/	base/promotion.jl	/^(\/)(x::T, y::T) where {T<:Number} = no_op_err("\/", T)$/;"	f
/	base/promotion.jl	/^\/(x::Number, y::Number) = \/(promote(x,y)...)$/;"	f
/	base/rational.jl	/^\/(x::Rational, y::Complex{<:Union{Integer,Rational}}) = x\/\/y$/;"	f
/	base/rational.jl	/^\/(x::Rational, y::Rational) = x\/\/y$/;"	f
/	base/twiceprecision.jl	/^\/(r::StepRangeLen{<:Real,<:TwicePrecision}, x::Real) =$/;"	f
/	base/twiceprecision.jl	/^function \/(x::TwicePrecision, v::Number)$/;"	f
/	base/twiceprecision.jl	/^function \/(x::TwicePrecision, y::TwicePrecision)$/;"	f
/	stdlib/LinearAlgebra/src/adjtrans.jl	/^\/(u::AdjointAbsVec, A::AbstractMatrix) = adjoint(adjoint(A) \\ u.parent)$/;"	f
/	stdlib/LinearAlgebra/src/adjtrans.jl	/^\/(u::AdjointAbsVec, A::Transpose{<:Any,<:AbstractMatrix}) = adjoint(conj(A.parent) \\ u.parent)/;"	f
/	stdlib/LinearAlgebra/src/adjtrans.jl	/^\/(u::TransposeAbsVec, A::AbstractMatrix) = transpose(transpose(A) \\ u.parent)$/;"	f
/	stdlib/LinearAlgebra/src/adjtrans.jl	/^\/(u::TransposeAbsVec, A::Adjoint{<:Any,<:AbstractMatrix}) = transpose(conj(A.parent) \\ u.paren/;"	f
/	stdlib/LinearAlgebra/src/bidiag.jl	/^\/(A::Bidiagonal, B::Number) = Bidiagonal(A.dv\/B, A.ev\/B, A.uplo)$/;"	f
/	stdlib/LinearAlgebra/src/diagonal.jl	/^(\/)(A::Union{StridedMatrix, AbstractTriangular}, D::Diagonal) =$/;"	f
/	stdlib/LinearAlgebra/src/diagonal.jl	/^(\/)(D::Diagonal, x::Number) = Diagonal(D.diag \/ x)$/;"	f
/	stdlib/LinearAlgebra/src/diagonal.jl	/^(\/)(Da::Diagonal, Db::Diagonal) = Diagonal(Da.diag .\/ Db.diag)$/;"	f
/	stdlib/LinearAlgebra/src/factorization.jl	/^\/(B::AbstractMatrix, F::Transpose{<:Any,<:Factorization{<:Real}}) = B \/ adjoint(F.parent)$/;"	f
/	stdlib/LinearAlgebra/src/factorization.jl	/^\/(B::AbstractMatrix, F::Transpose{<:Any,<:Factorization}) = conj.(conj.(B) \/ adjoint(F.parent)/;"	f
/	stdlib/LinearAlgebra/src/factorization.jl	/^\/(B::AdjointAbsVec, F::Transpose{<:Any,<:Factorization{<:Real}}) = B \/ adjoint(F.parent)$/;"	f
/	stdlib/LinearAlgebra/src/factorization.jl	/^\/(B::AdjointAbsVec, F::Transpose{<:Any,<:Factorization}) = conj.(conj.(B) \/ adjoint(F.parent))$/;"	f
/	stdlib/LinearAlgebra/src/factorization.jl	/^\/(B::TransposeAbsVec, F::Transpose{<:Any,<:Factorization{<:Real}}) = B \/ adjoint(F.parent)$/;"	f
/	stdlib/LinearAlgebra/src/factorization.jl	/^\/(B::TransposeAbsVec, F::Transpose{<:Any,<:Factorization}) = conj.(conj.(B) \/ adjoint(F.parent/;"	f
/	stdlib/LinearAlgebra/src/factorization.jl	/^\/(B::TransposeAbsVec, adjF::Adjoint{<:Any,<:Factorization}) = adjoint(adjF.parent \\ adjoint(B)/;"	f
/	stdlib/LinearAlgebra/src/factorization.jl	/^\/(adjB::AdjointAbsVec, adjF::Adjoint{<:Any,<:Factorization}) = adjoint(adjF.parent \\ adjB.pare/;"	f
/	stdlib/LinearAlgebra/src/factorization.jl	/^function \/(B::AbstractMatrix, F::Factorization)$/;"	f
/	stdlib/LinearAlgebra/src/factorization.jl	/^function \/(B::AbstractMatrix, adjF::Adjoint{<:Any,<:Factorization})$/;"	f
/	stdlib/LinearAlgebra/src/generic.jl	/^\/(x::Number, v::AbstractVector) = x*pinv(v)$/;"	f
/	stdlib/LinearAlgebra/src/symmetric.jl	/^\/(A::Hermitian, x::Real) = Hermitian(A.data\/x, sym_uplo(A.uplo))$/;"	f
/	stdlib/LinearAlgebra/src/symmetric.jl	/^\/(A::Symmetric, x::Number) = Symmetric(A.data\/x, sym_uplo(A.uplo))$/;"	f
/	stdlib/LinearAlgebra/src/triangular.jl	/^        (\/)(A::$t, x::Number) = $t(A.data\/x)$/;"	f
/	stdlib/LinearAlgebra/src/triangular.jl	/^        function \/(A::$mat, B::Union{UnitUpperTriangular, UnitLowerTriangular})$/;"	f
/	stdlib/LinearAlgebra/src/triangular.jl	/^        function \/(A::$mat, B::Union{UpperTriangular,LowerTriangular})$/;"	f
/	stdlib/LinearAlgebra/src/triangular.jl	/^        function \/(A::$mat, adjB::Adjoint{<:Any,<:Union{UnitUpperTriangular, UnitLowerTriangula/;"	f
/	stdlib/LinearAlgebra/src/triangular.jl	/^        function \/(A::$mat, adjB::Adjoint{<:Any,<:Union{UpperTriangular,LowerTriangular}})$/;"	f
/	stdlib/LinearAlgebra/src/triangular.jl	/^        function \/(A::$mat, transB::Transpose{<:Any,<:Union{UnitUpperTriangular, UnitLowerTrian/;"	f
/	stdlib/LinearAlgebra/src/triangular.jl	/^        function \/(A::$mat, transB::Transpose{<:Any,<:Union{UpperTriangular,LowerTriangular}})$/;"	f
/	stdlib/LinearAlgebra/src/triangular.jl	/^\/(u::AdjointAbsVec, A::Adjoint{<:Any,<:Union{LowerTriangular,UpperTriangular}}) = adjoint(A.par/;"	f
/	stdlib/LinearAlgebra/src/triangular.jl	/^\/(u::AdjointAbsVec, A::Adjoint{<:Any,<:Union{UnitLowerTriangular,UnitUpperTriangular}}) = adjoi/;"	f
/	stdlib/LinearAlgebra/src/triangular.jl	/^\/(u::AdjointAbsVec, A::Transpose{<:Any,<:Union{LowerTriangular,UpperTriangular}}) = adjoint(con/;"	f
/	stdlib/LinearAlgebra/src/triangular.jl	/^\/(u::AdjointAbsVec, A::Transpose{<:Any,<:Union{UnitLowerTriangular,UnitUpperTriangular}}) = adj/;"	f
/	stdlib/LinearAlgebra/src/triangular.jl	/^\/(u::AdjointAbsVec, A::Union{LowerTriangular,UpperTriangular}) = adjoint(adjoint(A) \\ u.parent/;"	f
/	stdlib/LinearAlgebra/src/triangular.jl	/^\/(u::AdjointAbsVec, A::Union{UnitLowerTriangular,UnitUpperTriangular}) = adjoint(adjoint(A) \\ /;"	f
/	stdlib/LinearAlgebra/src/triangular.jl	/^\/(u::TransposeAbsVec, A::Adjoint{<:Any,<:Union{LowerTriangular,UpperTriangular}}) = transpose(c/;"	f
/	stdlib/LinearAlgebra/src/triangular.jl	/^\/(u::TransposeAbsVec, A::Adjoint{<:Any,<:Union{UnitLowerTriangular,UnitUpperTriangular}}) = tra/;"	f
/	stdlib/LinearAlgebra/src/triangular.jl	/^\/(u::TransposeAbsVec, A::Transpose{<:Any,<:Union{LowerTriangular,UpperTriangular}}) = transpose/;"	f
/	stdlib/LinearAlgebra/src/triangular.jl	/^\/(u::TransposeAbsVec, A::Transpose{<:Any,<:Union{UnitLowerTriangular,UnitUpperTriangular}}) = t/;"	f
/	stdlib/LinearAlgebra/src/triangular.jl	/^\/(u::TransposeAbsVec, A::Union{LowerTriangular,UpperTriangular}) = transpose(transpose(A) \\ u./;"	f
/	stdlib/LinearAlgebra/src/triangular.jl	/^\/(u::TransposeAbsVec, A::Union{UnitLowerTriangular,UnitUpperTriangular}) = transpose(transpose(/;"	f
/	stdlib/LinearAlgebra/src/tridiag.jl	/^\/(A::SymTridiagonal, B::Number) = SymTridiagonal(A.dv\/B, A.ev\/B)$/;"	f
/	stdlib/LinearAlgebra/src/tridiag.jl	/^\/(A::Tridiagonal, B::Number) = Tridiagonal(A.dl\/B, A.d\/B, A.du\/B)$/;"	f
/	stdlib/LinearAlgebra/src/uniformscaling.jl	/^\/(A::AbstractMatrix, J::UniformScaling) = J.λ == 0 ? throw(SingularException(1)) : A\/J.λ$/;"	f
/	stdlib/LinearAlgebra/src/uniformscaling.jl	/^\/(J1::UniformScaling, J2::UniformScaling) = J2.λ == 0 ? throw(SingularException(1)) : UniformS/;"	f
/	stdlib/LinearAlgebra/src/uniformscaling.jl	/^\/(J::UniformScaling, A::AbstractMatrix) = lmul!(J.λ, inv(A))$/;"	f
/	stdlib/LinearAlgebra/src/uniformscaling.jl	/^\/(J::UniformScaling, x::Number) = UniformScaling(J.λ\/x)$/;"	f
/	stdlib/SparseArrays/src/sparsevector.jl	/^(\/)(x::SparseVectorUnion, a::Number) = SparseVector(length(x), copy(nonzeroinds(x)), nonzeros(x/;"	f
//	base/rational.jl	/^\/\/(X::AbstractArray, y::Number) = X .\/\/ y$/;"	f
//	base/rational.jl	/^\/\/(n::Integer,  d::Integer) = Rational(n,d)$/;"	f
//	base/rational.jl	/^\/\/(x::Complex,  y::Real) = complex(real(x)\/\/y,imag(x)\/\/y)$/;"	f
//	base/rational.jl	/^\/\/(x::Number, y::Complex) = x*conj(y)\/\/abs2(y)$/;"	f
//	base/rational.jl	/^function \/\/(x::Integer,  y::Rational)$/;"	f
//	base/rational.jl	/^function \/\/(x::Rational, y::Integer)$/;"	f
//	base/rational.jl	/^function \/\/(x::Rational, y::Rational)$/;"	f
0	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^    {$/;"	o	array:images
0x0013456789ABCDEF=	test/grisu.jl	/^@test 0x0013456789ABCDEF== diy_fp.s$/;"	v
0x001fffffffffffff=	test/grisu.jl	/^@test 0x001fffffffffffff== diy_fp.s$/;"	v
0x8000000000000000=	test/grisu.jl	/^@test 0x8000000000000000== diy_fp.s$/;"	v
1	base/array.jl	/^1 => 2$/;"	v
1	base/reduce.jl	/^1 => (2 => (3 => (4 => 0)))$/;"	v
1	base/reduce.jl	/^1 => (2 => (3 => 4))$/;"	v
1	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^    {$/;"	o	array:images
1	contrib/windows/julia.rc	/^1 VERSIONINFO$/;"	v
1	stdlib/Random/src/Random.jl	/^1=>2$/;"	v
2	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^    {$/;"	o	array:images
2	contrib/windows/julia.rc	/^2 ICON "julia.ico"$/;"	i
3	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^    {$/;"	o	array:images
32-bit (ARMv6, ARMv7)	doc/build/arm.md	/^## 32-bit (ARMv6, ARMv7)$/;"	s
4	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^    {$/;"	o	array:images
5	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^    {$/;"	o	array:images
6	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^    {$/;"	o	array:images
7	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^    {$/;"	o	array:images
8	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^    {$/;"	o	array:images
9	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^    {$/;"	o	array:images
:	base/cartesian.jl	/^    :(<) => <, :(>) => >, :(<=) => <=, :(>=) => >=)$/;"	f
:	base/compiler/validation.jl	/^    :(&) => 1:1,$/;"	f
:	base/compiler/validation.jl	/^    :(=) => 2:2,$/;"	f
:	base/deprecated.jl	/^            :($(esc(old)) = begin$/;"	f
:	base/deprecated.jl	/^        :($eold(args...; kwargs...) = error($emsg)),$/;"	f
:	base/fastmath.jl	/^         :(==) => :eq_fast,$/;"	f
:	base/loading.jl	/^             :(eval(x) = $(Expr(:core, :eval))(__anon__, x)),$/;"	f
:	base/loading.jl	/^             :(include(x) = $(Expr(:top, :include))(__anon__, x)),$/;"	f
:	base/range.jl	/^(:)(a::Real, b::Real) = (:)(promote(a,b)...)$/;"	f
:	base/range.jl	/^(:)(a::T, b::AbstractFloat, c::T) where {T<:AbstractFloat} = (:)(promote(a,b,c)...)$/;"	f
:	base/range.jl	/^(:)(a::T, b::AbstractFloat, c::T) where {T<:Real} = (:)(promote(a,b,c)...)$/;"	f
:	base/range.jl	/^(:)(a::T, b::Real, c::T) where {T<:AbstractFloat} = (:)(promote(a,b,c)...)$/;"	f
:	base/range.jl	/^(:)(a::T, b::T) where {T<:AbstractFloat} = (:)(a, T(1), b)$/;"	f
:	base/range.jl	/^(:)(start::A, step, stop::C) where {A<:Real,C<:Real} =$/;"	f
:	base/range.jl	/^(:)(start::T, step, stop::T) where {T<:Real} = _colon(start, step, stop)$/;"	f
:	base/range.jl	/^(:)(start::T, step, stop::T) where {T} = _colon(start, step, stop)$/;"	f
:	base/range.jl	/^(:)(start::T, step::T, stop::T) where {T<:AbstractFloat} =$/;"	f
:	base/range.jl	/^(:)(start::T, step::T, stop::T) where {T<:Real} =$/;"	f
:	base/range.jl	/^(:)(start::T, stop::T) where {T<:Real} = UnitRange{T}(start, stop)$/;"	f
:	base/range.jl	/^(:)(start::T, stop::T) where {T} = (:)(start, oftype(stop-start, 1), stop)$/;"	f
:	test/functional.jl	/^    (:)(a,b) = x$/;"	f
:	test/syntax.jl	/^    :($(esc(:blah))(args...; kwargs...) = $(esc(x)))$/;"	f
:	test/syntax.jl	/^    :(global $(esc(:x24289)) = 1)$/;"	f
:	test/syntax.jl	/^@test :(t(abc) = 3).args[2] == :(t(abc)::Int = 3).args[2]$/;"	f
::A14919	test/core.jl	/^(::A14919)() = "It's a brand new world"$/;"	f
::B_20087	test/docs.jl	/^(::B_20087)() = a$/;"	f
::CallableSingleton	test/ccall.jl	/^(::CallableSingleton)(x, y) = x + y$/;"	f
::EightBitType	test/errorshow.jl	/^(::EightBitType)() = throw(ErrorException("4"))$/;"	f
::EightBitTypeT	test/errorshow.jl	/^(::EightBitTypeT)() = throw(ErrorException("7"))$/;"	f
::FunctionLike	test/errorshow.jl	/^(::FunctionLike)() = throw(ErrorException("8"))$/;"	f
::SomeFunctor	test/reduce.jl	/^(::SomeFunctor)(x) = true$/;"	f
::String	test/errorshow.jl	/^(::String)() = throw(ErrorException("2"))$/;"	f
::SummarySize	base/summarysize.jl	/^(::SummarySize)(obj::SummarySize) = 0$/;"	f
::SummarySize	base/summarysize.jl	/^(::SummarySize)(obj::Symbol) = 0$/;"	f
::T	test/ambiguous.jl	/^(::T)(x, y::Int8) = 2$/;"	f
::T	test/ambiguous.jl	/^(::T)(x::Int8, y) = 1$/;"	f
::Task	test/precompile.jl	/^              (::Task)(::UInt8, ::UInt16, ::UInt32) = 2$/;"	f
::Test_y	stdlib/REPL/test/replcompletions.jl	/^        (::Test_y)() = "", ""$/;"	f
::f_with_params	test/show.jl	/^(::f_with_params)(x) = 2x$/;"	f
<	base/abstractset.jl	/^<( l::AbstractSet, r::AbstractSet) = l ⊊ r$/;"	f
<	base/abstractset.jl	/^<=(l::AbstractSet, r::AbstractSet) = l ⊆ r$/;"	v
<	base/bool.jl	/^<(x::Bool, y::Bool) = y&!x$/;"	f
<	base/bool.jl	/^<=(x::Bool, y::Bool) = y|!x$/;"	v
<	base/float.jl	/^            function <(x::$Tf, y::$Ti)$/;"	f
<	base/float.jl	/^            function <(x::$Ti, y::$Tf)$/;"	f
<	base/float.jl	/^<( x::Float32, y::Float32) = lt_float(x, y)$/;"	f
<	base/float.jl	/^<( x::Float64, y::Float64) = lt_float(x, y)$/;"	f
<	base/float.jl	/^<=(x::Float32, y::Float32) = le_float(x, y)$/;"	v
<	base/float.jl	/^<=(x::Float64, y::Float64) = le_float(x, y)$/;"	v
<	base/gmp.jl	/^<(f::CdoubleMax, x::BigInt) = isnan(f) ? false : cmp(x,f) > 0$/;"	f
<	base/gmp.jl	/^<(i::Integer, x::BigInt) = cmp(x,i) > 0$/;"	f
<	base/gmp.jl	/^<(x::BigInt, f::CdoubleMax) = isnan(f) ? false : cmp(x,f) < 0$/;"	f
<	base/gmp.jl	/^<(x::BigInt, i::Integer) = cmp(x,i) < 0$/;"	f
<	base/gmp.jl	/^<(x::BigInt, y::BigInt) = cmp(x,y) < 0$/;"	f
<	base/gmp.jl	/^<=(f::CdoubleMax, x::BigInt) = isnan(f) ? false : cmp(x,f) >= 0$/;"	v
<	base/gmp.jl	/^<=(i::Integer, x::BigInt) = cmp(x,i) >= 0$/;"	v
<	base/gmp.jl	/^<=(x::BigInt, f::CdoubleMax) = isnan(f) ? false : cmp(x,f) <= 0$/;"	v
<	base/gmp.jl	/^<=(x::BigInt, i::Integer) = cmp(x,i) <= 0$/;"	v
<	base/gmp.jl	/^<=(x::BigInt, y::BigInt) = cmp(x,y) <= 0$/;"	v
<	base/grisu/bignums.jl	/^<(a::Bignum,b::Bignum) = compare(a,b) < 0$/;"	f
<	base/int.jl	/^(<)(x::T, y::T) where {T<:BitSigned}  = slt_int(x, y)$/;"	f
<	base/int.jl	/^<( x::BitSigned,   y::BitUnsigned) = (x <  0) | (unsigned(x) <  y)$/;"	f
<	base/int.jl	/^<( x::BitUnsigned, y::BitSigned  ) = (y >= 0) & (x <  unsigned(y))$/;"	f
<	base/int.jl	/^<=(x::BitSigned,   y::BitUnsigned) = (x <  0) | (unsigned(x) <= y)$/;"	v
<	base/int.jl	/^<=(x::BitUnsigned, y::BitSigned  ) = (y >= 0) & (x <= unsigned(y))$/;"	v
<	base/irrationals.jl	/^<(::Irrational{s}, ::Irrational{s}) where {s} = false$/;"	f
<	base/irrationals.jl	/^<(x::AbstractIrrational, y::BigFloat) = setprecision(precision(y)+32) do$/;"	f
<	base/irrationals.jl	/^<(x::AbstractIrrational, y::Float16) = Float32(x,RoundUp) <= y$/;"	f
<	base/irrationals.jl	/^<(x::AbstractIrrational, y::Float32) = Float32(x,RoundUp) <= y$/;"	f
<	base/irrationals.jl	/^<(x::AbstractIrrational, y::Float64) = Float64(x,RoundUp) <= y$/;"	f
<	base/irrationals.jl	/^<(x::AbstractIrrational, y::Rational{BigInt}) = big(x) < y$/;"	f
<	base/irrationals.jl	/^<(x::BigFloat, y::AbstractIrrational) = setprecision(precision(x)+32) do$/;"	f
<	base/irrationals.jl	/^<(x::Float16, y::AbstractIrrational) = x <= Float32(y,RoundDown)$/;"	f
<	base/irrationals.jl	/^<(x::Float32, y::AbstractIrrational) = x <= Float32(y,RoundDown)$/;"	f
<	base/irrationals.jl	/^<(x::Float64, y::AbstractIrrational) = x <= Float64(y,RoundDown)$/;"	f
<	base/irrationals.jl	/^<(x::Rational{BigInt}, y::AbstractIrrational) = x < big(y)$/;"	f
<	base/irrationals.jl	/^<=(::Irrational{s}, ::Irrational{s}) where {s} = true$/;"	v
<	base/irrationals.jl	/^<=(x::AbstractFloat, y::AbstractIrrational) = x < y$/;"	v
<	base/irrationals.jl	/^<=(x::AbstractIrrational, y::AbstractFloat) = x < y$/;"	v
<	base/irrationals.jl	/^<=(x::AbstractIrrational, y::AbstractIrrational) = x==y || x<y$/;"	v
<	base/irrationals.jl	/^<=(x::AbstractIrrational, y::Rational) = x < y$/;"	v
<	base/irrationals.jl	/^<=(x::Rational, y::AbstractIrrational) = x < y$/;"	v
<	base/irrationals.jl	/^function <(x::AbstractIrrational, y::AbstractIrrational)$/;"	f
<	base/irrationals.jl	/^function <(x::AbstractIrrational, y::Rational{T}) where T$/;"	f
<	base/irrationals.jl	/^function <(x::Rational{T}, y::AbstractIrrational) where T$/;"	f
<	base/missing.jl	/^<(::Any, ::Missing) = missing$/;"	f
<	base/missing.jl	/^<(::Missing, ::Any) = missing$/;"	f
<	base/missing.jl	/^<(::Missing, ::Missing) = missing$/;"	f
<	base/mpfr.jl	/^<(x::BigFloat, y::BigFloat) = ccall((:mpfr_less_p, :libmpfr), Int32, (Ref{BigFloat}, Ref{BigFloa/;"	f
<	base/mpfr.jl	/^<(x::BigFloat, y::CdoubleMax) = !isnan(x) && !isnan(y) && cmp(x,y) < 0$/;"	f
<	base/mpfr.jl	/^<(x::BigFloat, y::Integer)    = !isnan(x) && cmp(x,y) < 0$/;"	f
<	base/mpfr.jl	/^<(x::CdoubleMax, y::BigFloat) = !isnan(x) && !isnan(y) && cmp(y,x) > 0$/;"	f
<	base/mpfr.jl	/^<(x::Integer, y::BigFloat)    = !isnan(y) && cmp(y,x) > 0$/;"	f
<	base/mpfr.jl	/^<=(x::BigFloat, y::BigFloat) = ccall((:mpfr_lessequal_p, :libmpfr), Int32, (Ref{BigFloat}, Ref{B/;"	v
<	base/mpfr.jl	/^<=(x::BigFloat, y::CdoubleMax) = !isnan(x) && !isnan(y) && cmp(x,y) <= 0$/;"	v
<	base/mpfr.jl	/^<=(x::BigFloat, y::Integer)    = !isnan(x) && cmp(x,y) <= 0$/;"	v
<	base/mpfr.jl	/^<=(x::CdoubleMax, y::BigFloat) = !isnan(x) && !isnan(y) && cmp(y,x) >= 0$/;"	v
<	base/mpfr.jl	/^<=(x::Integer, y::BigFloat)    = !isnan(y) && cmp(y,x) >= 0$/;"	v
<	base/operators.jl	/^<(x) = Fix2(<, x)$/;"	f
<	base/operators.jl	/^<(x, y) = isless(x, y)$/;"	f
<	base/operators.jl	/^<=(x) = Fix2(<=, x)$/;"	v
<	base/operators.jl	/^<=(x, y) = (x < y) | (x == y)$/;"	v
<	base/pointer.jl	/^<(x::Ptr,  y::Ptr) = UInt(x) < UInt(y)$/;"	f
<	base/promotion.jl	/^<( x::Real, y::Real)     = (< )(promote(x,y)...)$/;"	f
<	base/promotion.jl	/^<=(x::Real, y::Real)     = (<=)(promote(x,y)...)$/;"	v
<	base/rational.jl	/^<( x::Integer , y::Rational) = widemul(x,y.den) < y.num$/;"	f
<	base/rational.jl	/^<( x::Rational, y::Integer ) = x.num < widemul(x.den,y)$/;"	f
<	base/rational.jl	/^<( x::Rational, y::Rational) = x.den == y.den ? x.num < y.num :$/;"	f
<	base/rational.jl	/^<=(x::Integer , y::Rational) = widemul(x,y.den) <= y.num$/;"	v
<	base/rational.jl	/^<=(x::Rational, y::Integer ) = x.num <= widemul(x.den,y)$/;"	v
<	base/rational.jl	/^<=(x::Rational, y::Rational) = x.den == y.den ? x.num <= y.num :$/;"	v
<	base/tuple.jl	/^<(::Tuple, ::Tuple{}) = false$/;"	f
<	base/tuple.jl	/^<(::Tuple{}, ::Tuple) = true$/;"	f
<	base/tuple.jl	/^<(::Tuple{}, ::Tuple{}) = false$/;"	f
<	base/tuple.jl	/^function <(t1::Any16, t2::Any16)$/;"	f
<	base/tuple.jl	/^function <(t1::Tuple, t2::Tuple)$/;"	f
<	base/twiceprecision.jl	/^<(x::TwicePrecision{T}, y::TwicePrecision{T}) where {T} =$/;"	f
<	test/operators.jl	/^<(a::TO23094, b::TO23094) = error("< should not be called")$/;"	f
<<	base/bitarray.jl	/^(<<)(B::BitVector, i::Int) = (i >=0 ? B << unsigned(i) : B >> unsigned(-i))$/;"	f
<<	base/bool.jl	/^<<(x::Bool, c::UInt) = Int(x) << c$/;"	f
<<	base/gmp.jl	/^<<(x::BigInt, c::UInt) = c == 0 ? x : MPZ.mul_2exp(x, c)$/;"	f
<<	base/int.jl	/^<<(x::BitInteger,  y::BitUnsigned) = shl_int(x, y)$/;"	f
<<	base/int.jl	/^<<(x::BitInteger, y::Int) =$/;"	f
<<	base/operators.jl	/^<<(x::Integer, c::Int) = c >= 0 ? x << unsigned(c) : x >> unsigned(-c)$/;"	f
<<	base/operators.jl	/^function <<(x::Integer, c::Integer)$/;"	f
<<	base/operators.jl	/^function <<(x::Integer, c::Unsigned)$/;"	f
<=	base/abstractset.jl	/^<=(l::AbstractSet, r::AbstractSet) = l ⊆ r$/;"	f
<=	base/bool.jl	/^<=(x::Bool, y::Bool) = y|!x$/;"	f
<=	base/float.jl	/^            function <=(x::$Tf, y::$Ti)$/;"	f
<=	base/float.jl	/^            function <=(x::$Ti, y::$Tf)$/;"	f
<=	base/float.jl	/^<=(x::Float32, y::Float32) = le_float(x, y)$/;"	f
<=	base/float.jl	/^<=(x::Float64, y::Float64) = le_float(x, y)$/;"	f
<=	base/gmp.jl	/^<=(f::CdoubleMax, x::BigInt) = isnan(f) ? false : cmp(x,f) >= 0$/;"	f
<=	base/gmp.jl	/^<=(i::Integer, x::BigInt) = cmp(x,i) >= 0$/;"	f
<=	base/gmp.jl	/^<=(x::BigInt, f::CdoubleMax) = isnan(f) ? false : cmp(x,f) <= 0$/;"	f
<=	base/gmp.jl	/^<=(x::BigInt, i::Integer) = cmp(x,i) <= 0$/;"	f
<=	base/gmp.jl	/^<=(x::BigInt, y::BigInt) = cmp(x,y) <= 0$/;"	f
<=	base/int.jl	/^(<=)(x::T, y::T) where {T<:BitSigned}   = sle_int(x, y)$/;"	f
<=	base/int.jl	/^(<=)(x::T, y::T) where {T<:BitUnsigned} = ule_int(x, y)$/;"	f
<=	base/int.jl	/^<=(x::BitSigned,   y::BitUnsigned) = (x <  0) | (unsigned(x) <= y)$/;"	f
<=	base/int.jl	/^<=(x::BitUnsigned, y::BitSigned  ) = (y >= 0) & (x <= unsigned(y))$/;"	f
<=	base/irrationals.jl	/^<=(::Irrational{s}, ::Irrational{s}) where {s} = true$/;"	f
<=	base/irrationals.jl	/^<=(x::AbstractFloat, y::AbstractIrrational) = x < y$/;"	f
<=	base/irrationals.jl	/^<=(x::AbstractIrrational, y::AbstractFloat) = x < y$/;"	f
<=	base/irrationals.jl	/^<=(x::AbstractIrrational, y::AbstractIrrational) = x==y || x<y$/;"	f
<=	base/irrationals.jl	/^<=(x::AbstractIrrational, y::Rational) = x < y$/;"	f
<=	base/irrationals.jl	/^<=(x::Rational, y::AbstractIrrational) = x < y$/;"	f
<=	base/mpfr.jl	/^<=(x::BigFloat, y::BigFloat) = ccall((:mpfr_lessequal_p, :libmpfr), Int32, (Ref{BigFloat}, Ref{B/;"	f
<=	base/mpfr.jl	/^<=(x::BigFloat, y::CdoubleMax) = !isnan(x) && !isnan(y) && cmp(x,y) <= 0$/;"	f
<=	base/mpfr.jl	/^<=(x::BigFloat, y::Integer)    = !isnan(x) && cmp(x,y) <= 0$/;"	f
<=	base/mpfr.jl	/^<=(x::CdoubleMax, y::BigFloat) = !isnan(x) && !isnan(y) && cmp(y,x) >= 0$/;"	f
<=	base/mpfr.jl	/^<=(x::Integer, y::BigFloat)    = !isnan(y) && cmp(y,x) >= 0$/;"	f
<=	base/operators.jl	/^<=(x) = Fix2(<=, x)$/;"	f
<=	base/operators.jl	/^<=(x, y) = (x < y) | (x == y)$/;"	f
<=	base/promotion.jl	/^(<=)(x::T, y::T) where {T<:Real} = no_op_err("<=", T)$/;"	f
<=	base/promotion.jl	/^<=(x::Real, y::Real)     = (<=)(promote(x,y)...)$/;"	f
<=	base/rational.jl	/^<=(x::Integer , y::Rational) = widemul(x,y.den) <= y.num$/;"	f
<=	base/rational.jl	/^<=(x::Rational, y::Integer ) = x.num <= widemul(x.den,y)$/;"	f
<=	base/rational.jl	/^<=(x::Rational, y::Rational) = x.den == y.den ? x.num <= y.num :$/;"	f
=	base/abstractset.jl	/^==(l::AbstractSet, r::AbstractSet) = length(l) == length(r) && l ⊆ r$/;"	v
=	base/array.jl	/^==(a::Arr, b::Arr) where {Arr <: BitIntegerArray} =$/;"	v
=	base/c.jl	/^==(x::Ptr, y::Union{Cstring,Cwstring}) = x == pointer(y)$/;"	v
=	base/c.jl	/^==(x::Union{Cstring,Cwstring}, y::Ptr) = pointer(x) == y$/;"	v
=	base/char.jl	/^==(x::AbstractChar, y::AbstractChar) = Char(x) == Char(y)$/;"	v
=	base/char.jl	/^==(x::Char, y::Char) = reinterpret(UInt32, x) == reinterpret(UInt32, y)$/;"	v
=	base/cmd.jl	/^==(x::AndCmds, y::AndCmds) = x.a == y.a && x.b == y.b$/;"	v
=	base/cmd.jl	/^==(x::Cmd, y::Cmd) = x.exec == y.exec && x.env == y.env && x.ignorestatus == y.ignorestatus &&$/;"	v
=	base/complex.jl	/^==(x::Real, z::Complex) = isreal(z) && real(z) == x$/;"	v
=	base/complex.jl	/^==(z::Complex, w::Complex) = (real(z) == real(w)) & (imag(z) == imag(w))$/;"	v
=	base/complex.jl	/^==(z::Complex, x::Real) = isreal(z) && real(z) == x$/;"	v
=	base/docs/utils.jl	/^==(t1::T, t2::T) where {T<:Union{HTML,Text}} = t1.content == t2.content$/;"	v
=	base/expr.jl	/^==(x::Expr, y::Expr) = x.head === y.head && isequal(x.args, y.args)$/;"	v
=	base/expr.jl	/^==(x::QuoteNode, y::QuoteNode) = isequal(x.value, y.value)$/;"	v
=	base/float.jl	/^==(x::Float32, y::Float32) = eq_float(x, y)$/;"	v
=	base/float.jl	/^==(x::Float64, y::Float64) = eq_float(x, y)$/;"	v
=	base/gcutils.jl	/^==(w, v::WeakRef) = isequal(w, v.value)$/;"	v
=	base/gcutils.jl	/^==(w::WeakRef, v) = isequal(w.value, v)$/;"	v
=	base/gcutils.jl	/^==(w::WeakRef, v::WeakRef) = isequal(w.value, v.value)$/;"	v
=	base/gmp.jl	/^==(f::CdoubleMax, x::BigInt) = isnan(f) ? false : cmp(x,f) == 0$/;"	v
=	base/gmp.jl	/^==(i::Integer, x::BigInt) = cmp(x,i) == 0$/;"	v
=	base/gmp.jl	/^==(x::BigInt, f::CdoubleMax) = isnan(f) ? false : cmp(x,f) == 0$/;"	v
=	base/gmp.jl	/^==(x::BigInt, i::Integer) = cmp(x,i) == 0$/;"	v
=	base/gmp.jl	/^==(x::BigInt, y::BigInt) = cmp(x,y) == 0$/;"	v
=	base/grisu/bignums.jl	/^==(a::Bignum,b::Bignum) = compare(a,b) == 0$/;"	v
=	base/int.jl	/^==(x::BitSigned,   y::BitUnsigned) = (x >= 0) & (unsigned(x) == y)$/;"	v
=	base/int.jl	/^==(x::BitUnsigned, y::BitSigned  ) = (y >= 0) & (x == unsigned(y))$/;"	v
=	base/irrationals.jl	/^==(::AbstractIrrational, ::AbstractIrrational) = false$/;"	v
=	base/irrationals.jl	/^==(::Irrational{s}, ::Irrational{s}) where {s} = true$/;"	v
=	base/irrationals.jl	/^==(x::AbstractIrrational, y::Real) = false$/;"	v
=	base/irrationals.jl	/^==(x::Real, y::AbstractIrrational) = false$/;"	v
=	base/loading.jl	/^==(a::PkgId, b::PkgId) = a.uuid == b.uuid && a.name == b.name$/;"	v
=	base/loading.jl	/^==(a::SHA1, b::SHA1) = a.bytes == b.bytes$/;"	v
=	base/missing.jl	/^==(::Any, ::Missing) = missing$/;"	v
=	base/missing.jl	/^==(::Missing, ::Any) = missing$/;"	v
=	base/missing.jl	/^==(::Missing, ::Missing) = missing$/;"	v
=	base/missing.jl	/^==(::Missing, ::WeakRef) = missing$/;"	v
=	base/missing.jl	/^==(::WeakRef, ::Missing) = missing$/;"	v
=	base/mpfr.jl	/^==(x::BigFloat, y::BigFloat) = ccall((:mpfr_equal_p, :libmpfr), Int32, (Ref{BigFloat}, Ref{BigFl/;"	v
=	base/mpfr.jl	/^==(x::BigFloat, y::CdoubleMax) = !isnan(x) && !isnan(y) && cmp(x,y) == 0$/;"	v
=	base/mpfr.jl	/^==(x::BigFloat, y::Integer)    = !isnan(x) && cmp(x,y) == 0$/;"	v
=	base/mpfr.jl	/^==(x::CdoubleMax, y::BigFloat) = y == x$/;"	v
=	base/mpfr.jl	/^==(x::Integer, y::BigFloat)    = y == x$/;"	v
=	base/namedtuple.jl	/^==(a::NamedTuple, b::NamedTuple) = false$/;"	v
=	base/namedtuple.jl	/^==(a::NamedTuple{n}, b::NamedTuple{n}) where {n} = Tuple(a) == Tuple(b)$/;"	v
=	base/operators.jl	/^==(T::Type, S::TypeVar) = false$/;"	v
=	base/operators.jl	/^==(T::TypeVar, S::Type) = false$/;"	v
=	base/operators.jl	/^==(x) = Fix2(==, x)$/;"	v
=	base/operators.jl	/^==(x, y) = x === y$/;"	v
=	base/pair.jl	/^==(p::Pair, q::Pair) = (p.first==q.first) & (p.second==q.second)$/;"	v
=	base/pointer.jl	/^==(x::Ptr, y::Ptr) = UInt(x) == UInt(y)$/;"	v
=	base/promotion.jl	/^==(x::Number, y::Number) = (==)(promote(x,y)...)$/;"	v
=	base/range.jl	/^==(r::OrdinalRange, s::OrdinalRange) =$/;"	v
=	base/range.jl	/^==(r::T, s::T) where {T<:AbstractRange} =$/;"	v
=	base/range.jl	/^==(r::T, s::T) where {T<:Union{StepRangeLen,LinRange}} =$/;"	v
=	base/range.jl	/^==(r::Union{StepRange{T},StepRangeLen{T,T}}, s::Union{StepRange{T},StepRangeLen{T,T}}) where {T}/;"	v
=	base/rational.jl	/^==(q::Rational, x::AbstractFloat) = x == q$/;"	v
=	base/rational.jl	/^==(x::Integer , y::Rational) = y == x$/;"	v
=	base/rational.jl	/^==(x::Rational, y::Integer ) = (x.den == 1) & (x.num == y)$/;"	v
=	base/rational.jl	/^==(x::Rational, y::Rational) = (x.den == y.den) & (x.num == y.num)$/;"	v
=	base/rational.jl	/^==(x::Rational, z::Complex ) = isreal(z) & (real(z) == x)$/;"	v
=	base/rational.jl	/^==(z::Complex , x::Rational) = isreal(z) & (real(z) == x)$/;"	v
=	base/secretbuffer.jl	/^==(s1::SecretBuffer, s2::SecretBuffer) = (s1.ptr == s2.ptr) && (s1.size == s2.size) && (UInt8(0)/;"	v
=	base/strings/basic.jl	/^==(a::AbstractString, b::AbstractString) = cmp(a, b) == 0$/;"	v
=	base/strings/unicode.jl	/^==(g1::GraphemeIterator, g2::GraphemeIterator) = g1.s == g2.s$/;"	v
=	base/tuple.jl	/^==(t1::Tuple, t2::Tuple) = (length(t1) == length(t2)) && _eq(t1, t2)$/;"	v
=	stdlib/Dates/src/periods.jl	/^==(x::P, y::P) where {P<:Period} = value(x) == value(y)$/;"	v
=	stdlib/Dates/src/periods.jl	/^==(x::Period, y::Period) = (==)(promote(x, y)...)$/;"	v
=	stdlib/Distributed/src/messages.jl	/^==(r::RRID, s::RRID) = (r.whence==s.whence && r.id==s.id)$/;"	v
=	stdlib/Distributed/src/remotecall.jl	/^==(r::AbstractRemoteRef, s::AbstractRemoteRef) = (r.whence==s.whence && r.id==s.id)$/;"	v
=	stdlib/LibGit2/src/oid.jl	/^==(id1::GitHash, id2::GitHash) = cmp(id1, id2) == 0$/;"	v
=	stdlib/LibGit2/src/oid.jl	/^==(obj1::GitObject, obj2::GitObject) = GitHash(obj1) == GitHash(obj2)$/;"	v
=	stdlib/LinearAlgebra/src/special.jl	/^==(A::Bidiagonal, B::SymTridiagonal) = iszero(B.ev) && iszero(A.ev) && A.dv == B.dv$/;"	v
=	stdlib/LinearAlgebra/src/special.jl	/^==(A::Diagonal, B::Tridiagonal) = iszero(B.dl) && iszero(B.du) && A.diag == B.d$/;"	v
=	stdlib/LinearAlgebra/src/special.jl	/^==(A::Diagonal, B::Union{SymTridiagonal, Bidiagonal}) = iszero(B.ev) && A.diag == B.dv$/;"	v
=	stdlib/LinearAlgebra/src/special.jl	/^==(B::Bidiagonal, A::Diagonal) = A == B$/;"	v
=	stdlib/LinearAlgebra/src/special.jl	/^==(B::SymTridiagonal, A::Bidiagonal) = A == B$/;"	v
=	stdlib/LinearAlgebra/src/special.jl	/^==(B::Tridiagonal, A::Bidiagonal) = A == B$/;"	v
=	stdlib/LinearAlgebra/src/special.jl	/^==(B::Tridiagonal, A::Diagonal) = A == B$/;"	v
=	stdlib/LinearAlgebra/src/tridiag.jl	/^==(A::SymTridiagonal, B::SymTridiagonal) = (A.dv==B.dv) && (A.ev==B.ev)$/;"	v
=	stdlib/LinearAlgebra/src/tridiag.jl	/^==(A::SymTridiagonal, B::Tridiagonal) = (B.dl==B.du==A.ev) && (B.d==A.dv)$/;"	v
=	stdlib/LinearAlgebra/src/tridiag.jl	/^==(A::Tridiagonal, B::SymTridiagonal) = (A.dl==A.du==B.ev) && (A.d==B.dv)$/;"	v
=	stdlib/LinearAlgebra/src/tridiag.jl	/^==(A::Tridiagonal, B::Tridiagonal) = (A.dl==B.dl) && (A.d==B.d) && (A.du==B.du)$/;"	v
=	stdlib/LinearAlgebra/src/uniformscaling.jl	/^==(J1::UniformScaling,J2::UniformScaling) = (J1.λ == J2.λ)$/;"	v
=	stdlib/LinearAlgebra/src/uniformscaling.jl	/^==(J::UniformScaling, A::AbstractMatrix) = A == J$/;"	v
=	stdlib/Markdown/src/parse/parse.jl	/^==(a::MD, b::MD) = (html(a) == html(b))$/;"	v
=	stdlib/REPL/src/REPL.jl	/^==(a::REPLDisplay, b::REPLDisplay) = a.repl === b.repl$/;"	v
=	stdlib/Random/src/DSFMT.jl	/^==(s1::DSFMT_state, s2::DSFMT_state) = s1.val == s2.val$/;"	v
=	stdlib/Random/src/RNGs.jl	/^==(r1::MersenneTwister, r2::MersenneTwister) =$/;"	v
=	test/arrayops.jl	/^==(::totally_not_five26034, x::Number)= (5==x);$/;"	v
=	test/arrayops.jl	/^==(::totally_not_five26034,::totally_not_five26034)=true;$/;"	v
=	test/arrayops.jl	/^==(x::Number,::totally_not_five26034)= (5==x);$/;"	v
=	test/ccall.jl	/^==(a::Struct1, b::Struct1) = (a.x == b.x && a.y == b.y)$/;"	v
=	test/dict.jl	/^==(a::MyInt, b::MyInt) = (a.val == b.val)$/;"	v
=	test/dict.jl	/^==(a::MyString, b::MyString) = (a.str == b.str)$/;"	v
=-to-kw	src/julia-parser.scm	/^(define (=-to-kw e) (if (assignment? e) (cons 'kw (cdr e)) e))$/;"	f
==	base/abstractdict.jl	/^function ==(l::AbstractDict, r::AbstractDict)$/;"	f
==	base/abstractset.jl	/^==(l::AbstractSet, r::AbstractSet) = length(l) == length(r) && l ⊆ r$/;"	f
==	base/array.jl	/^==(a::Arr, b::Arr) where {Arr <: BitIntegerArray} =$/;"	f
==	base/array.jl	/^function ==(a::Arr, b::Arr) where Arr <: BitIntegerArray{1}$/;"	f
==	base/bitset.jl	/^function ==(s1::BitSet, s2::BitSet)$/;"	f
==	base/c.jl	/^==(x::Ptr, y::Union{Cstring,Cwstring}) = x == pointer(y)$/;"	f
==	base/c.jl	/^==(x::Union{Cstring,Cwstring}, y::Ptr) = pointer(x) == y$/;"	f
==	base/char.jl	/^==(x::AbstractChar, y::AbstractChar) = Char(x) == Char(y)$/;"	f
==	base/char.jl	/^==(x::Char, y::Char) = reinterpret(UInt32, x) == reinterpret(UInt32, y)$/;"	f
==	base/cmd.jl	/^==(x::AndCmds, y::AndCmds) = x.a == y.a && x.b == y.b$/;"	f
==	base/cmd.jl	/^==(x::Cmd, y::Cmd) = x.exec == y.exec && x.env == y.env && x.ignorestatus == y.ignorestatus &&$/;"	f
==	base/complex.jl	/^==(x::Real, z::Complex) = isreal(z) && real(z) == x$/;"	f
==	base/complex.jl	/^==(z::Complex, w::Complex) = (real(z) == real(w)) & (imag(z) == imag(w))$/;"	f
==	base/complex.jl	/^==(z::Complex, x::Real) = isreal(z) && real(z) == x$/;"	f
==	base/docs/utils.jl	/^==(t1::T, t2::T) where {T<:Union{HTML,Text}} = t1.content == t2.content$/;"	f
==	base/essentials.jl	/^function ==(v1::SimpleVector, v2::SimpleVector)$/;"	f
==	base/expr.jl	/^==(x::Expr, y::Expr) = x.head === y.head && isequal(x.args, y.args)$/;"	f
==	base/expr.jl	/^==(x::QuoteNode, y::QuoteNode) = isequal(x.value, y.value)$/;"	f
==	base/float.jl	/^            ==(y::$Ti, x::$Tf) = x==y$/;"	f
==	base/float.jl	/^            function ==(x::$Tf, y::$Ti)$/;"	f
==	base/float.jl	/^==(x::Float32, y::Float32) = eq_float(x, y)$/;"	f
==	base/float.jl	/^==(x::Float64, y::Float64) = eq_float(x, y)$/;"	f
==	base/float.jl	/^function ==(x::Float16, y::Float16)$/;"	f
==	base/gcutils.jl	/^==(w, v::WeakRef) = isequal(w, v.value)$/;"	f
==	base/gcutils.jl	/^==(w::WeakRef, v) = isequal(w.value, v)$/;"	f
==	base/gcutils.jl	/^==(w::WeakRef, v::WeakRef) = isequal(w.value, v.value)$/;"	f
==	base/gmp.jl	/^==(f::CdoubleMax, x::BigInt) = isnan(f) ? false : cmp(x,f) == 0$/;"	f
==	base/gmp.jl	/^==(i::Integer, x::BigInt) = cmp(x,i) == 0$/;"	f
==	base/gmp.jl	/^==(x::BigInt, f::CdoubleMax) = isnan(f) ? false : cmp(x,f) == 0$/;"	f
==	base/gmp.jl	/^==(x::BigInt, i::Integer) = cmp(x,i) == 0$/;"	f
==	base/gmp.jl	/^==(x::BigInt, y::BigInt) = cmp(x,y) == 0$/;"	f
==	base/grisu/bignums.jl	/^==(a::Bignum,b::Bignum) = compare(a,b) == 0$/;"	f
==	base/int.jl	/^==(x::BitSigned,   y::BitUnsigned) = (x >= 0) & (unsigned(x) == y)$/;"	f
==	base/int.jl	/^==(x::BitUnsigned, y::BitSigned  ) = (y >= 0) & (x == unsigned(y))$/;"	f
==	base/irrationals.jl	/^==(::AbstractIrrational, ::AbstractIrrational) = false$/;"	f
==	base/irrationals.jl	/^==(::Irrational{s}, ::Irrational{s}) where {s} = true$/;"	f
==	base/irrationals.jl	/^==(x::AbstractIrrational, y::Real) = false$/;"	f
==	base/irrationals.jl	/^==(x::Real, y::AbstractIrrational) = false$/;"	f
==	base/loading.jl	/^==(a::PkgId, b::PkgId) = a.uuid == b.uuid && a.name == b.name$/;"	f
==	base/loading.jl	/^==(a::SHA1, b::SHA1) = a.bytes == b.bytes$/;"	f
==	base/missing.jl	/^==(::Any, ::Missing) = missing$/;"	f
==	base/missing.jl	/^==(::Missing, ::Any) = missing$/;"	f
==	base/missing.jl	/^==(::Missing, ::Missing) = missing$/;"	f
==	base/missing.jl	/^==(::Missing, ::WeakRef) = missing$/;"	f
==	base/missing.jl	/^==(::WeakRef, ::Missing) = missing$/;"	f
==	base/mpfr.jl	/^==(x::BigFloat, y::BigFloat) = ccall((:mpfr_equal_p, :libmpfr), Int32, (Ref{BigFloat}, Ref{BigFl/;"	f
==	base/mpfr.jl	/^==(x::BigFloat, y::CdoubleMax) = !isnan(x) && !isnan(y) && cmp(x,y) == 0$/;"	f
==	base/mpfr.jl	/^==(x::BigFloat, y::Integer)    = !isnan(x) && cmp(x,y) == 0$/;"	f
==	base/mpfr.jl	/^==(x::CdoubleMax, y::BigFloat) = y == x$/;"	f
==	base/mpfr.jl	/^==(x::Integer, y::BigFloat)    = y == x$/;"	f
==	base/namedtuple.jl	/^==(a::NamedTuple, b::NamedTuple) = false$/;"	f
==	base/namedtuple.jl	/^==(a::NamedTuple{n}, b::NamedTuple{n}) where {n} = Tuple(a) == Tuple(b)$/;"	f
==	base/operators.jl	/^==(T::Type, S::TypeVar) = false$/;"	f
==	base/operators.jl	/^==(T::TypeVar, S::Type) = false$/;"	f
==	base/operators.jl	/^==(x) = Fix2(==, x)$/;"	f
==	base/operators.jl	/^==(x, y) = x === y$/;"	f
==	base/operators.jl	/^===$/;"	v
==	base/operators.jl	/^function ==(T::Type, S::Type)$/;"	f
==	base/pair.jl	/^==(p::Pair, q::Pair) = (p.first==q.first) & (p.second==q.second)$/;"	f
==	base/pointer.jl	/^==(x::Ptr, y::Ptr) = UInt(x) == UInt(y)$/;"	f
==	base/promotion.jl	/^(==)(x::T, y::T) where {T<:Number} = x === y$/;"	f
==	base/promotion.jl	/^==(x::Number, y::Number) = (==)(promote(x,y)...)$/;"	f
==	base/range.jl	/^==(r::OrdinalRange, s::OrdinalRange) =$/;"	f
==	base/range.jl	/^==(r::T, s::T) where {T<:AbstractRange} =$/;"	f
==	base/range.jl	/^==(r::T, s::T) where {T<:Union{StepRangeLen,LinRange}} =$/;"	f
==	base/range.jl	/^==(r::Union{StepRange{T},StepRangeLen{T,T}}, s::Union{StepRange{T},StepRangeLen{T,T}}) where {T}/;"	f
==	base/range.jl	/^function ==(r::AbstractRange, s::AbstractRange)$/;"	f
==	base/rational.jl	/^==(q::Rational, x::AbstractFloat) = x == q$/;"	f
==	base/rational.jl	/^==(x::Integer , y::Rational) = y == x$/;"	f
==	base/rational.jl	/^==(x::Rational, y::Integer ) = (x.den == 1) & (x.num == y)$/;"	f
==	base/rational.jl	/^==(x::Rational, y::Rational) = (x.den == y.den) & (x.num == y.num)$/;"	f
==	base/rational.jl	/^==(x::Rational, z::Complex ) = isreal(z) & (real(z) == x)$/;"	f
==	base/rational.jl	/^==(z::Complex , x::Rational) = isreal(z) & (real(z) == x)$/;"	f
==	base/rational.jl	/^function ==(x::AbstractFloat, q::Rational)$/;"	f
==	base/regex.jl	/^function ==(a::Regex, b::Regex)$/;"	f
==	base/secretbuffer.jl	/^==(s1::SecretBuffer, s2::SecretBuffer) = (s1.ptr == s2.ptr) && (s1.size == s2.size) && (UInt8(0)/;"	f
==	base/stacktraces.jl	/^function ==(a::StackFrame, b::StackFrame)$/;"	f
==	base/strings/basic.jl	/^==(a::AbstractString, b::AbstractString) = cmp(a, b) == 0$/;"	f
==	base/strings/string.jl	/^function ==(a::String, b::String)$/;"	f
==	base/strings/unicode.jl	/^==(g1::GraphemeIterator, g2::GraphemeIterator) = g1.s == g2.s$/;"	f
==	base/tuple.jl	/^==(t1::Tuple, t2::Tuple) = (length(t1) == length(t2)) && _eq(t1, t2)$/;"	f
==	base/version.jl	/^function ==(a::VersionNumber, b::VersionNumber)$/;"	f
==	stdlib/Dates/src/periods.jl	/^(==)(x::CompoundPeriod, y::CompoundPeriod) = canonicalize(x).periods == canonicalize(y).periods$/;"	f
==	stdlib/Dates/src/periods.jl	/^(==)(x::CompoundPeriod, y::Period) = x == CompoundPeriod(y)$/;"	f
==	stdlib/Dates/src/periods.jl	/^(==)(x::FixedPeriod, y::OtherPeriod) = false$/;"	f
==	stdlib/Dates/src/periods.jl	/^(==)(x::OtherPeriod, y::FixedPeriod) = false$/;"	f
==	stdlib/Dates/src/periods.jl	/^(==)(x::Period, y::CompoundPeriod) = y == x$/;"	f
==	stdlib/Dates/src/periods.jl	/^==(x::P, y::P) where {P<:Period} = value(x) == value(y)$/;"	f
==	stdlib/Dates/src/periods.jl	/^==(x::Period, y::Period) = (==)(promote(x, y)...)$/;"	f
==	stdlib/Dates/src/types.jl	/^(==)(x::T, y::T) where {T<:TimeType} = (==)(value(x), value(y))$/;"	f
==	stdlib/Dates/src/types.jl	/^(==)(x::TimeType, y::TimeType) = (===)(promote(x, y)...)$/;"	f
==	stdlib/Dates/src/types.jl	/^function ==(a::Time, b::Time)$/;"	f
==	stdlib/Distributed/src/messages.jl	/^==(r::RRID, s::RRID) = (r.whence==s.whence && r.id==s.id)$/;"	f
==	stdlib/Distributed/src/remotecall.jl	/^==(r::AbstractRemoteRef, s::AbstractRemoteRef) = (r.whence==s.whence && r.id==s.id)$/;"	f
==	stdlib/Distributed/test/distributed_exec.jl	/^    ==(x1::TestSerCnt, x2::TestSerCnt) = (x1.v == x2.v)$/;"	f
==	stdlib/LibGit2/src/oid.jl	/^==(id1::GitHash, id2::GitHash) = cmp(id1, id2) == 0$/;"	f
==	stdlib/LibGit2/src/oid.jl	/^==(obj1::GitObject, obj2::GitObject) = GitHash(obj1) == GitHash(obj2)$/;"	f
==	stdlib/LinearAlgebra/src/bidiag.jl	/^function ==(A::Bidiagonal, B::Bidiagonal)$/;"	f
==	stdlib/LinearAlgebra/src/diagonal.jl	/^(==)(Da::Diagonal, Db::Diagonal) = Da.diag == Db.diag$/;"	f
==	stdlib/LinearAlgebra/src/special.jl	/^==(A::Bidiagonal, B::SymTridiagonal) = iszero(B.ev) && iszero(A.ev) && A.dv == B.dv$/;"	f
==	stdlib/LinearAlgebra/src/special.jl	/^==(A::Diagonal, B::Tridiagonal) = iszero(B.dl) && iszero(B.du) && A.diag == B.d$/;"	f
==	stdlib/LinearAlgebra/src/special.jl	/^==(A::Diagonal, B::Union{SymTridiagonal, Bidiagonal}) = iszero(B.ev) && A.diag == B.dv$/;"	f
==	stdlib/LinearAlgebra/src/special.jl	/^==(B::Bidiagonal, A::Diagonal) = A == B$/;"	f
==	stdlib/LinearAlgebra/src/special.jl	/^==(B::SymTridiagonal, A::Bidiagonal) = A == B$/;"	f
==	stdlib/LinearAlgebra/src/special.jl	/^==(B::Tridiagonal, A::Bidiagonal) = A == B$/;"	f
==	stdlib/LinearAlgebra/src/special.jl	/^==(B::Tridiagonal, A::Diagonal) = A == B$/;"	f
==	stdlib/LinearAlgebra/src/special.jl	/^function ==(A::Bidiagonal, B::Tridiagonal)$/;"	f
==	stdlib/LinearAlgebra/src/tridiag.jl	/^==(A::SymTridiagonal, B::SymTridiagonal) = (A.dv==B.dv) && (A.ev==B.ev)$/;"	f
==	stdlib/LinearAlgebra/src/tridiag.jl	/^==(A::SymTridiagonal, B::Tridiagonal) = (B.dl==B.du==A.ev) && (B.d==A.dv)$/;"	f
==	stdlib/LinearAlgebra/src/tridiag.jl	/^==(A::Tridiagonal, B::SymTridiagonal) = (A.dl==A.du==B.ev) && (A.d==B.dv)$/;"	f
==	stdlib/LinearAlgebra/src/tridiag.jl	/^==(A::Tridiagonal, B::Tridiagonal) = (A.dl==B.dl) && (A.d==B.d) && (A.du==B.du)$/;"	f
==	stdlib/LinearAlgebra/src/uniformscaling.jl	/^==(J1::UniformScaling,J2::UniformScaling) = (J1.λ == J2.λ)$/;"	f
==	stdlib/LinearAlgebra/src/uniformscaling.jl	/^==(J::UniformScaling, A::AbstractMatrix) = A == J$/;"	f
==	stdlib/LinearAlgebra/src/uniformscaling.jl	/^function ==(A::AbstractMatrix, J::UniformScaling)$/;"	f
==	stdlib/LinearAlgebra/src/uniformscaling.jl	/^function ==(A::StridedMatrix, J::UniformScaling)$/;"	f
==	stdlib/Markdown/src/parse/parse.jl	/^==(a::MD, b::MD) = (html(a) == html(b))$/;"	f
==	stdlib/Markdown/test/runtests.jl	/^== =""" |> html == "<h1>h1<\/h1>\\n<h2>h2<\/h2>\\n<p>not &#61;&#61; &#61;<\/p>\\n"$/;"	v
==	stdlib/Markdown/test/runtests.jl	/^===""" == md"# h1"$/;"	v
==	stdlib/Markdown/test/runtests.jl	/^===$/;"	v
==	stdlib/REPL/src/REPL.jl	/^==(a::REPLDisplay, b::REPLDisplay) = a.repl === b.repl$/;"	f
==	stdlib/Random/src/DSFMT.jl	/^==(s1::DSFMT_state, s2::DSFMT_state) = s1.val == s2.val$/;"	f
==	stdlib/Random/src/RNGs.jl	/^==(r1::MersenneTwister, r2::MersenneTwister) =$/;"	f
==	stdlib/SparseArrays/src/sparsematrix.jl	/^function ==(A1::AbstractSparseMatrixCSC, A2::AbstractSparseMatrixCSC)$/;"	f
==	stdlib/Unicode/test/runtests.jl	/^            ==(a,b) = Base.:(==)(a,b)$/;"	f
==	test/arrayops.jl	/^==(::totally_not_five26034, x::Number)= (5==x);$/;"	f
==	test/arrayops.jl	/^==(::totally_not_five26034,::totally_not_five26034)=true;$/;"	f
==	test/arrayops.jl	/^==(x::Number,::totally_not_five26034)= (5==x);$/;"	f
==	test/ccall.jl	/^==(a::Struct1, b::Struct1) = (a.x == b.x && a.y == b.y)$/;"	f
==	test/core.jl	/^@test ===(Circ_{Int}, Circ_{Int}.types[1])$/;"	v
==	test/core.jl	/^@test ===(Foo_.body.types[1], Foo_{Int})$/;"	v
==	test/core.jl	/^@test ===(Foo_.body.types[1].types[1], Foo_{Int})$/;"	v
==	test/core.jl	/^@test ===(Int, Qux_.body.super.parameters[1].super.parameters[2])$/;"	v
==	test/core.jl	/^@test ===(Node2{Int}.types[1].parameters[1], Node2{Int})$/;"	v
==	test/core.jl	/^@test ===(Node{Int}.types[1].parameters[1], Node)$/;"	v
==	test/core.jl	/^@test ===(Qux_{Char}.super.parameters[2], Char)$/;"	v
==	test/core.jl	/^@test ===(Qux_{Int}, Qux_.body.super.parameters[1].super.parameters[1])$/;"	v
==	test/core.jl	/^@test ===(Qux_{Int}, Qux_{Char}.super.parameters[1])$/;"	v
==	test/core.jl	/^@test ===(Qux_{Int}, Qux_{Int}.super.parameters[1])$/;"	v
==	test/core.jl	/^@test ===(Qux_{Int}.super.parameters[2], Int)$/;"	v
==	test/core.jl	/^@test ===(sptest2(:a),Symbol)$/;"	v
==	test/dict.jl	/^==(a::MyInt, b::MyInt) = (a.val == b.val)$/;"	f
==	test/dict.jl	/^==(a::MyString, b::MyString) = (a.str == b.str)$/;"	f
==	test/show.jl	/^function == end$/;"	f
=>	base/pair.jl	/^const => = Pair$/;"	v
>	base/mpfr.jl	/^>(x::BigFloat, y::BigFloat) = ccall((:mpfr_greater_p, :libmpfr), Int32, (Ref{BigFloat}, Ref{BigF/;"	f
>	base/mpfr.jl	/^>=(x::BigFloat, y::BigFloat) = ccall((:mpfr_greaterequal_p, :libmpfr), Int32, (Ref{BigFloat}, Re/;"	v
>	base/operators.jl	/^>(x) = Fix2(>, x)$/;"	f
>	base/operators.jl	/^>(x, y) = y < x$/;"	f
>	base/operators.jl	/^>=(x) = Fix2(>=, x)$/;"	v
>	base/operators.jl	/^>=(x, y) = (y <= x)$/;"	v
>	test/precompile.jl	/^              >(x::fmpz, y::Int) = Base.cmp(x, y) > 0$/;"	f
>=	base/mpfr.jl	/^>=(x::BigFloat, y::BigFloat) = ccall((:mpfr_greaterequal_p, :libmpfr), Int32, (Ref{BigFloat}, Re/;"	f
>=	base/operators.jl	/^>=(x) = Fix2(>=, x)$/;"	f
>=	base/operators.jl	/^>=(x, y) = (y <= x)$/;"	f
>>	base/bitarray.jl	/^(>>)(B::BitVector, i::Union{Int, UInt}) = B >>> i$/;"	f
>>	base/bool.jl	/^>>(x::Bool, c::UInt) = Int(x) >> c$/;"	f
>>	base/gmp.jl	/^>>(x::BigInt, c::UInt) = c == 0 ? x : MPZ.fdiv_q_2exp(x, c)$/;"	f
>>	base/int.jl	/^>>(x::BitInteger, y::Int) =$/;"	f
>>	base/int.jl	/^>>(x::BitSigned,   y::BitUnsigned) = ashr_int(x, y)$/;"	f
>>	base/int.jl	/^>>(x::BitUnsigned, y::BitUnsigned) = lshr_int(x, y)$/;"	f
>>	base/operators.jl	/^>>(x::Integer, c::Int) = c >= 0 ? x >> unsigned(c) : x << unsigned(-c)$/;"	f
>>	base/operators.jl	/^function >>(x::Integer, c::Integer)$/;"	f
>>>	base/bitarray.jl	/^(>>>)(B::BitVector, i::Int) = (i >=0 ? B >> unsigned(i) : B << unsigned(-i))$/;"	f
>>>	base/bool.jl	/^>>>(x::Bool, c::UInt) = Int(x) >>> c$/;"	f
>>>	base/gmp.jl	/^>>>(x::BigInt, c::UInt) = x >> c$/;"	f
>>>	base/int.jl	/^>>>(x::BitInteger, y::BitUnsigned) = lshr_int(x, y)$/;"	f
>>>	base/int.jl	/^>>>(x::BitInteger, y::Int) =$/;"	f
>>>	base/operators.jl	/^>>>(x::Integer, c::Int) = c >= 0 ? x >>> unsigned(c) : x << unsigned(-c)$/;"	f
>>>	base/operators.jl	/^function >>>(x::Integer, c::Integer)$/;"	f
>>>	base/operators.jl	/^function >>>(x::Integer, c::Unsigned)$/;"	f
@threadcall (Experimental)	doc/src/manual/parallel-computing.md	/^## @threadcall (Experimental)$/;"	s
A	stdlib/InteractiveUtils/test/runtests.jl	/^module A$/;"	f
A	stdlib/LinearAlgebra/src/qr.jl	/^A = Q R$/;"	v
A	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    A(a::A) = a$/;"	f
A	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    struct A$/;"	f
A	stdlib/Mmap/src/Mmap.jl	/^A = rand(1:20, 5, 30)$/;"	v
A	stdlib/Mmap/test/runtests.jl	/^A = rand(1:20, 500, 300)$/;"	v
A	stdlib/SharedArrays/test/runtests.jl	/^A = @inferred(convert(SharedArray, AA))$/;"	v
A	test/abstractarray.jl	/^A = TSlowNIndexes(rand(2,2))$/;"	v
A	test/abstractarray.jl	/^A = rand(5,4,3)$/;"	v
A	test/arrayops.jl	/^A = rand(3,5)$/;"	v
A	test/core.jl	/^    mutable struct A end; mutable struct B end$/;"	f
A	test/core.jl	/^A = Vector{Union{Missing, UInt8}}(undef, 1048577)$/;"	v
A	test/core.jl	/^A = Vector{Union{Missing, UInt8}}(undef, 2)$/;"	v
A	test/core.jl	/^A = Vector{Union{Missing, UInt8}}(undef, 5)$/;"	v
A	test/core.jl	/^struct A$/;"	f
A	test/deprecation_exec.jl	/^    struct A{T} end$/;"	f
A	test/docs.jl	/^abstract type A end$/;"	f
A	test/docs.jl	/^module A$/;"	f
A	test/offsetarray.jl	/^A = OffsetArray(A0, (-1,2))                   # IndexLinear$/;"	v
A	test/offsetarray.jl	/^A = OffsetArray(rand(4,4), (-3,5))$/;"	v
A	test/offsetarray.jl	/^A = OffsetArray(view(rand(4,4), 1:4, 4:-1:1), (-3,5))$/;"	v
A	test/reduce.jl	/^A = circshift(reshape(1:24,2,3,4), (0,1,1))$/;"	v
A	test/reduce.jl	/^A = reshape(map(UInt8, 101:109), (3,3))$/;"	v
A	test/reduce.jl	/^A = reshape(map(UInt8, 1:100), (10,10))$/;"	v
A	test/reducedim.jl	/^A = ["a", "b"]$/;"	v
A	test/reducedim.jl	/^A = [1.0 3.0 6.0;$/;"	v
A	test/reducedim.jl	/^A = [1.0 5.0 6.0;$/;"	v
A	test/reducedim.jl	/^A = [1.0 NaN 6.0;$/;"	v
A	test/reducedim.jl	/^A = [BigInt(-10)]$/;"	v
A	test/reducedim.jl	/^A = [BigInt(10) BigInt(-10)]$/;"	v
A	test/reducedim.jl	/^A = [BigInt(10)]$/;"	v
A	test/reducedim.jl	/^A = [Inf -Inf Inf  -Inf;$/;"	v
A	test/reinterpretarray.jl	/^A = Int64[1, 2, 3, 4]$/;"	v
A	test/reinterpretarray.jl	/^A = zeros(UInt32)$/;"	v
A	test/staged.jl	/^A = rand(5,5,3)$/;"	v
A	test/subarray.jl	/^A = copy(reshape(1:120, 3, 5, 8))$/;"	v
A	test/subarray.jl	/^A = rand(2, 2, 3)$/;"	v
A	test/subarray.jl	/^A = rand(5,5,5,5)$/;"	v
A	test/subarray.jl	/^A = reshape(1:120, 3, 5, 8)$/;"	v
A	test/subarray.jl	/^A = reshape(1:20, 5, 4)$/;"	v
A	test/subarray.jl	/^A = view([1:10;], 5:8)$/;"	v
A	test/syntax.jl	/^struct A$/;"	f
A basic editor/REPL workflow	doc/src/manual/workflow-tips.md	/^### A basic editor\/REPL workflow$/;"	S
A few details	doc/src/devdocs/subarrays.md	/^### A few details$/;"	S
A simple TCP example	doc/src/manual/networking-and-streams.md	/^## A simple TCP example$/;"	s
A simple sampler without pre-computed data	stdlib/Random/docs/src/index.md	/^#### A simple sampler without pre-computed data$/;"	t
A0	test/offsetarray.jl	/^A0 = [1 3; 2 4]$/;"	v
A1	test/boundscheck_exec.jl	/^@inline function A1()$/;"	f
A1	test/reinterpretarray.jl	/^A1 = S1[S1(0, 0)]$/;"	v
A1090	test/core.jl	/^mutable struct A1090 end$/;"	f
A11136	test/subtype.jl	/^mutable struct A11136 end$/;"	f
A11327	test/core.jl	/^abstract type A11327 end$/;"	f
A11888	test/core.jl	/^struct A11888{T}$/;"	f
A12089	test/core.jl	/^mutable struct A12089{K, N}$/;"	f
A12238	test/core.jl	/^struct A12238{T} end$/;"	f
A14009	test/compiler/inference.jl	/^A14009(a::T) where {T} = A14009{T}()$/;"	f
A14009	test/compiler/inference.jl	/^mutable struct A14009{T}; end$/;"	f
A14113	test/core.jl	/^module A14113$/;"	f
A14767	test/core.jl	/^const A14767 = f14767(false)$/;"	v
A14878	test/core.jl	/^A14878() = A14878(Dict())$/;"	f
A14878	test/core.jl	/^mutable struct A14878$/;"	f
A14919;	test/core.jl	/^abstract type A14919; end$/;"	f
A15259	test/compiler/inference.jl	/^struct A15259$/;"	f
A15838	test/syntax.jl	/^module A15838$/;"	f
A16424	test/core.jl	/^struct A16424  # allowed$/;"	f
A16424	test/core.jl	/^struct A16424$/;"	f
A16767	test/core.jl	/^mutable struct A16767{T}$/;"	f
A18434	stdlib/InteractiveUtils/test/runtests.jl	/^A18434(x; y=1) = 1$/;"	f
A18434	stdlib/InteractiveUtils/test/runtests.jl	/^mutable struct A18434$/;"	f
A1_inbounds	test/boundscheck_exec.jl	/^function A1_inbounds()$/;"	f
A1_nested	test/boundscheck_exec.jl	/^function A1_nested()$/;"	f
A1_noinline	test/boundscheck_exec.jl	/^@noinline function A1_noinline()$/;"	f
A1_wrap	test/boundscheck_exec.jl	/^A1_wrap() = @inbounds return A1_inbounds()$/;"	f
A2	stdlib/Mmap/src/Mmap.jl	/^A2 = Mmap.mmap(s, Matrix{Int}, (m,n))$/;"	v
A2	stdlib/Mmap/test/runtests.jl	/^A2 = A3 = A4 = nothing$/;"	v
A2	stdlib/Mmap/test/runtests.jl	/^A2 = Mmap.mmap(s, Matrix{Int}, (m,n))$/;"	v
A2	test/boundscheck_exec.jl	/^@inline function A2()$/;"	f
A2	test/reinterpretarray.jl	/^A2 = S2[S2(0, 0)]$/;"	v
A20086	stdlib/InteractiveUtils/test/runtests.jl	/^abstract type A20086{T,N} end$/;"	f
A20992	test/subtype.jl	/^abstract type A20992{T,D,d} end$/;"	f
A21613	test/subtype.jl	/^abstract type A21613{S <: Tuple} end$/;"	f
A21923	test/core.jl	/^struct A21923{T,N}; v::Vector{A21923{T}}; end$/;"	f
A23367	test/core.jl	/^struct A23367$/;"	f
A23567	test/core.jl	/^A23567 = Vector{Union{Float64, Nothing}}(undef, 5)$/;"	v
A23764	test/subtype.jl	/^struct A23764{T, N, S} <: AbstractArray{Union{T, S}, N}; end$/;"	f
A23764_2	test/subtype.jl	/^struct A23764_2{T, N, S} <: AbstractArray{Union{Ref{T}, S}, N}; end$/;"	f
A24108	test/compiler/codegen.jl	/^struct A24108$/;"	f
A24363	test/core.jl	/^mutable struct A24363$/;"	f
A25604	test/precompile.jl	/^            module A25604$/;"	f
A265	test/worlds.jl	/^A265(fld::Int) = A265(Float64(fld))$/;"	f
A265	test/worlds.jl	/^mutable struct A265{T}$/;"	f
A265_	test/worlds.jl	/^A265_() = A265(1)$/;"	f
A27181	test/core.jl	/^struct A27181$/;"	f
A27807	test/syntax.jl	/^module A27807$/;"	f
A28256	test/subtype.jl	/^struct A28256{names, T<:NamedTuple{names, <:Tuple}}$/;"	f
A28593	test/syntax.jl	/^        abstract type A28593{S<:Real, V<:AbstractVector{S}} end$/;"	f
A29955	test/subtype.jl	/^struct A29955{T, TV<:AbstractVector{T}, TModel<:M29955{T,TV}}$/;"	f
A2_inbounds	test/boundscheck_exec.jl	/^function A2_inbounds()$/;"	f
A2_notinlined	test/boundscheck_exec.jl	/^function A2_notinlined()$/;"	f
A2_propagate_inbounds	test/boundscheck_exec.jl	/^Base.@propagate_inbounds function A2_propagate_inbounds()$/;"	f
A2img	stdlib/LinearAlgebra/test/triangular.jl	/^A2img   = randn(n, n)\/2$/;"	v
A2real	stdlib/LinearAlgebra/test/triangular.jl	/^A2real  = randn(n, n)\/2$/;"	v
A3	stdlib/Mmap/test/runtests.jl	/^A3 = Mmap.mmap(s, Matrix{Int}, (m,n), convert(Int64, 2*sizeof(Int)))$/;"	v
A3	test/boundscheck_exec.jl	/^function A3()$/;"	f
A32092	stdlib/LinearAlgebra/test/matmul.jl	/^struct A32092$/;"	f
A3890	test/core.jl	/^mutable struct A3890{T1}$/;"	f
A3_inbounds	test/boundscheck_exec.jl	/^function A3_inbounds()$/;"	f
A3_inbounds2	test/boundscheck_exec.jl	/^function A3_inbounds2()$/;"	f
A4	stdlib/Mmap/test/runtests.jl	/^A4 = Mmap.mmap(s, Matrix{Int}, (m,150), convert(Int64, (2+150*m)*sizeof(Int)))$/;"	v
A4413	test/core.jl	/^mutable struct A4413 end$/;"	f
A5876	test/core.jl	/^module A5876$/;"	f
A6142	test/core.jl	/^mutable struct A6142 <: AbstractMatrix{Float64}; end$/;"	f
A6980	test/core.jl	/^abstract type A6980 end$/;"	f
A7652	test/core.jl	/^mutable struct A7652$/;"	f
AA	stdlib/SharedArrays/test/runtests.jl	/^AA = rand(4,2)$/;"	v
AArch64 (ARMv8)	doc/build/arm.md	/^## AArch64 (ARMv8)$/;"	s
AArray_17003	test/compiler/inference.jl	/^abstract type AArray_17003{T,N} end$/;"	f
ABI_AArch64Layout	src/abi_aarch64.cpp	/^struct ABI_AArch64Layout : AbiLayout {$/;"	s	file:
ABI_ARMLayout	src/abi_arm.cpp	/^struct ABI_ARMLayout : AbiLayout {$/;"	s	file:
ABI_LLVMLayout	src/abi_llvm.cpp	/^struct ABI_LLVMLayout : AbiLayout {$/;"	s	file:
ABI_PPC64leLayout	src/abi_ppc64le.cpp	/^struct ABI_PPC64leLayout : AbiLayout {$/;"	s	file:
ABI_Win32Layout	src/abi_win32.cpp	/^struct ABI_Win32Layout : AbiLayout {$/;"	s	file:
ABI_Win64Layout	src/abi_win64.cpp	/^ABI_Win64Layout() : nargs(0) { }$/;"	f	struct:ABI_Win64Layout	file:
ABI_Win64Layout	src/abi_win64.cpp	/^struct ABI_Win64Layout : AbiLayout {$/;"	s	file:
ABI_x86Layout	src/abi_x86.cpp	/^struct ABI_x86Layout : AbiLayout {$/;"	s	file:
ABI_x86_64Layout	src/abi_x86_64.cpp	/^ABI_x86_64Layout()$/;"	f	struct:ABI_x86_64Layout	file:
ABI_x86_64Layout	src/abi_x86_64.cpp	/^ABI_x86_64Layout(uint8_t int_regs, uint8_t sse_regs)$/;"	f	struct:ABI_x86_64Layout	file:
ABI_x86_64Layout	src/abi_x86_64.cpp	/^struct ABI_x86_64Layout : AbiLayout {$/;"	s	file:
ACLOCAL	deps/srccache/patchelf-0.9/Makefile.in	/^ACLOCAL = @ACLOCAL@$/;"	m
ACLOCAL	deps/srccache/patchelf-0.9/src/Makefile.in	/^ACLOCAL = @ACLOCAL@$/;"	m
ACLOCAL	deps/srccache/patchelf-0.9/tests/Makefile.in	/^ACLOCAL = @ACLOCAL@$/;"	m
ACLOCAL_M4	deps/srccache/patchelf-0.9/Makefile.in	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	deps/srccache/patchelf-0.9/src/Makefile.in	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	deps/srccache/patchelf-0.9/tests/Makefile.in	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACOS_CORRECT_LOWWORD	base/special/trig.jl	/^@inline ACOS_CORRECT_LOWWORD(::Type{Float32}, x) = reinterpret(Float32, (reinterpret(UInt32, x) /;"	f
ACOS_CORRECT_LOWWORD	base/special/trig.jl	/^@inline ACOS_CORRECT_LOWWORD(::Type{Float64}, x) = reinterpret(Float64, (reinterpret(UInt64, x) /;"	f
ACOS_PI	base/special/trig.jl	/^ACOS_PI(::Type{Float32}) = 3.1415925026f+00$/;"	f
ACOS_PI	base/special/trig.jl	/^ACOS_PI(::Type{Float64}) = 3.14159265358979311600e+00$/;"	f
ACOS_X_MIN_THRESHOLD	base/special/trig.jl	/^ACOS_X_MIN_THRESHOLD(::Type{Float32}) = 2.0f0^-26$/;"	f
ACOS_X_MIN_THRESHOLD	base/special/trig.jl	/^ACOS_X_MIN_THRESHOLD(::Type{Float64}) = 2.0^-57$/;"	f
ACTIVE_PROJECT	base/initdefs.jl	/^const ACTIVE_PROJECT = Ref{Union{String,Nothing}}(nothing)$/;"	v
AC_PROG_CC	deps/srccache/patchelf-0.9/aclocal.m4	/^m4_define([AC_PROG_CC],$/;"	d
AD1	test/broadcast.jl	/^struct AD1{T,N} <: ArrayData{T,N}$/;"	f
AD1B	test/broadcast.jl	/^struct AD1B{T,N} <: ArrayData{T,N}$/;"	f
AD1C	test/broadcast.jl	/^struct AD1C{T,N} <: ArrayData{T,N}$/;"	f
AD1P	test/broadcast.jl	/^struct AD1P{T,N} <: ArrayData{T,N}$/;"	f
AD2	test/broadcast.jl	/^struct AD2{T,N} <: ArrayData{T,N}$/;"	f
AD2B	test/broadcast.jl	/^struct AD2B{T,N} <: ArrayData{T,N}$/;"	f
AD2C	test/broadcast.jl	/^struct AD2C{T,N} <: ArrayData{T,N}$/;"	f
AD2Dim	test/broadcast.jl	/^struct AD2Dim{T} <: ArrayData{T,2}$/;"	f
AD2DimStyle	test/broadcast.jl	/^AD2DimStyle(::Val{2}) = AD2DimStyle()$/;"	f
AD2DimStyle	test/broadcast.jl	/^AD2DimStyle(::Val{N}) where {N} = Broadcast.DefaultArrayStyle{N}()$/;"	f
AD2DimStyle	test/broadcast.jl	/^struct AD2DimStyle <: Broadcast.AbstractArrayStyle{2}; end$/;"	f
AD2P	test/broadcast.jl	/^struct AD2P{T,N} <: ArrayData{T,N}$/;"	f
ADD_HIDDEN	src/intrinsics.cpp	/^#define ADD_HIDDEN /;"	d	file:
ADD_HIDDEN	src/intrinsics.h	/^#define ADD_HIDDEN /;"	d
ADD_I	src/intrinsics.cpp	/^#define ADD_I(/;"	d	file:
ADD_I	src/intrinsics.h	/^#define ADD_I(/;"	d
AH_LN2	base/special/hyperbolic.jl	/^AH_LN2(::Type{Float32}) = 6.9314718246f-01$/;"	f
AH_LN2	base/special/hyperbolic.jl	/^AH_LN2(::Type{Float64}) = 6.93147180559945286227e-01$/;"	f
ALIAS	src/intrinsics.cpp	/^#define ALIAS(/;"	d	file:
ALIAS	src/intrinsics.h	/^#define ALIAS /;"	d
ALIGN2	src/flisp/cvalues.c	/^static const int ALIGN2   = sizeof(struct prim_int16) - 2;$/;"	v	typeref:typename:const int	file:
ALIGN4	src/flisp/cvalues.c	/^static const int ALIGN4   = sizeof(struct prim_int32) - 4;$/;"	v	typeref:typename:const int	file:
ALIGN8	src/flisp/cvalues.c	/^static const int ALIGN8   = sizeof(struct prim_int64) - 8;$/;"	v	typeref:typename:const int	file:
ALIGNPTR	src/flisp/cvalues.c	/^static const int ALIGNPTR = sizeof(struct prim_ptr) - sizeof(void*);$/;"	v	typeref:typename:const int	file:
ALLOC_LIMIT_TRIGGER	src/flisp/cvalues.c	/^#define ALLOC_LIMIT_TRIGGER /;"	d	file:
ALLOC_OVERFLOW_FUNCTION	base/gmp.jl	/^const ALLOC_OVERFLOW_FUNCTION = Ref(false)$/;"	v
ALL_PROCESSOR_GROUPS	src/sys.c	/^#define ALL_PROCESSOR_GROUPS /;"	d	file:
ALT_E	src/support/strptime.c	/^#define ALT_E	/;"	d	file:
ALT_O	src/support/strptime.c	/^#define ALT_O	/;"	d	file:
AL_N_INLINE	src/support/arraylist.h	/^#define AL_N_INLINE /;"	d
AMTAR	deps/srccache/patchelf-0.9/Makefile.in	/^AMTAR = @AMTAR@$/;"	m
AMTAR	deps/srccache/patchelf-0.9/src/Makefile.in	/^AMTAR = @AMTAR@$/;"	m
AMTAR	deps/srccache/patchelf-0.9/tests/Makefile.in	/^AMTAR = @AMTAR@$/;"	m
AM_AUTOMAKE_VERSION	deps/srccache/patchelf-0.9/aclocal.m4	/^AC_DEFUN([AM_AUTOMAKE_VERSION],$/;"	m
AM_AUX_DIR_EXPAND	deps/srccache/patchelf-0.9/aclocal.m4	/^AC_DEFUN([AM_AUX_DIR_EXPAND],$/;"	m
AM_CFLAGS	deps/srccache/patchelf-0.9/tests/Makefile.am	/^AM_CFLAGS = -fpic$/;"	m
AM_CFLAGS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^AM_CFLAGS = -fpic$/;"	m
AM_CONDITIONAL	deps/srccache/patchelf-0.9/aclocal.m4	/^AC_DEFUN([AM_CONDITIONAL],$/;"	m
AM_CXXFLAGS	deps/srccache/patchelf-0.9/src/Makefile.am	/^AM_CXXFLAGS = -Wall$/;"	m
AM_CXXFLAGS	deps/srccache/patchelf-0.9/src/Makefile.in	/^AM_CXXFLAGS = -Wall$/;"	m
AM_DEFAULT_VERBOSITY	deps/srccache/patchelf-0.9/Makefile.in	/^AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@$/;"	m
AM_DEFAULT_VERBOSITY	deps/srccache/patchelf-0.9/src/Makefile.in	/^AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@$/;"	m
AM_DEFAULT_VERBOSITY	deps/srccache/patchelf-0.9/tests/Makefile.in	/^AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@$/;"	m
AM_DEP_TRACK	deps/srccache/patchelf-0.9/aclocal.m4	/^AC_DEFUN([AM_DEP_TRACK],$/;"	m
AM_INIT_AUTOMAKE	deps/srccache/patchelf-0.9/aclocal.m4	/^AC_DEFUN([AM_INIT_AUTOMAKE],$/;"	m
AM_MAKE_INCLUDE	deps/srccache/patchelf-0.9/aclocal.m4	/^AC_DEFUN([AM_MAKE_INCLUDE],$/;"	m
AM_MISSING_HAS_RUN	deps/srccache/patchelf-0.9/aclocal.m4	/^AC_DEFUN([AM_MISSING_HAS_RUN],$/;"	m
AM_MISSING_PROG	deps/srccache/patchelf-0.9/aclocal.m4	/^AC_DEFUN([AM_MISSING_PROG],$/;"	m
AM_OUTPUT_DEPENDENCY_COMMANDS	deps/srccache/patchelf-0.9/aclocal.m4	/^AC_DEFUN([AM_OUTPUT_DEPENDENCY_COMMANDS],$/;"	m
AM_PROG_CC_C_O	deps/srccache/patchelf-0.9/aclocal.m4	/^AC_DEFUN_ONCE([AM_PROG_CC_C_O], [AC_REQUIRE([AC_PROG_CC])])$/;"	m
AM_PROG_INSTALL_SH	deps/srccache/patchelf-0.9/aclocal.m4	/^AC_DEFUN([AM_PROG_INSTALL_SH],$/;"	m
AM_PROG_INSTALL_STRIP	deps/srccache/patchelf-0.9/aclocal.m4	/^AC_DEFUN([AM_PROG_INSTALL_STRIP],$/;"	m
AM_RECURSIVE_TARGETS	deps/srccache/patchelf-0.9/Makefile.in	/^AM_RECURSIVE_TARGETS = $(am__recursive_targets:-recursive=) TAGS CTAGS \\$/;"	m
AM_RECURSIVE_TARGETS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^AM_RECURSIVE_TARGETS = check recheck$/;"	m
AM_RUN_LOG	deps/srccache/patchelf-0.9/aclocal.m4	/^AC_DEFUN([AM_RUN_LOG],$/;"	m
AM_SANITY_CHECK	deps/srccache/patchelf-0.9/aclocal.m4	/^AC_DEFUN([AM_SANITY_CHECK],$/;"	m
AM_SET_CURRENT_AUTOMAKE_VERSION	deps/srccache/patchelf-0.9/aclocal.m4	/^AC_DEFUN([AM_SET_CURRENT_AUTOMAKE_VERSION],$/;"	m
AM_SET_DEPDIR	deps/srccache/patchelf-0.9/aclocal.m4	/^AC_DEFUN([AM_SET_DEPDIR],$/;"	m
AM_SET_LEADING_DOT	deps/srccache/patchelf-0.9/aclocal.m4	/^AC_DEFUN([AM_SET_LEADING_DOT],$/;"	m
AM_SILENT_RULES	deps/srccache/patchelf-0.9/aclocal.m4	/^AC_DEFUN([AM_SILENT_RULES],$/;"	m
AM_SUBST_NOTMAKE	deps/srccache/patchelf-0.9/aclocal.m4	/^AC_DEFUN([AM_SUBST_NOTMAKE], [_AM_SUBST_NOTMAKE($@)])$/;"	m
AM_V_CC	deps/srccache/patchelf-0.9/src/Makefile.in	/^AM_V_CC = $(am__v_CC_@AM_V@)$/;"	m
AM_V_CC	deps/srccache/patchelf-0.9/tests/Makefile.in	/^AM_V_CC = $(am__v_CC_@AM_V@)$/;"	m
AM_V_CCLD	deps/srccache/patchelf-0.9/src/Makefile.in	/^AM_V_CCLD = $(am__v_CCLD_@AM_V@)$/;"	m
AM_V_CCLD	deps/srccache/patchelf-0.9/tests/Makefile.in	/^AM_V_CCLD = $(am__v_CCLD_@AM_V@)$/;"	m
AM_V_CXX	deps/srccache/patchelf-0.9/src/Makefile.in	/^AM_V_CXX = $(am__v_CXX_@AM_V@)$/;"	m
AM_V_CXXLD	deps/srccache/patchelf-0.9/src/Makefile.in	/^AM_V_CXXLD = $(am__v_CXXLD_@AM_V@)$/;"	m
AM_V_GEN	deps/srccache/patchelf-0.9/Makefile.in	/^AM_V_GEN = $(am__v_GEN_@AM_V@)$/;"	m
AM_V_GEN	deps/srccache/patchelf-0.9/src/Makefile.in	/^AM_V_GEN = $(am__v_GEN_@AM_V@)$/;"	m
AM_V_GEN	deps/srccache/patchelf-0.9/tests/Makefile.in	/^AM_V_GEN = $(am__v_GEN_@AM_V@)$/;"	m
AM_V_P	deps/srccache/patchelf-0.9/Makefile.in	/^AM_V_P = $(am__v_P_@AM_V@)$/;"	m
AM_V_P	deps/srccache/patchelf-0.9/src/Makefile.in	/^AM_V_P = $(am__v_P_@AM_V@)$/;"	m
AM_V_P	deps/srccache/patchelf-0.9/tests/Makefile.in	/^AM_V_P = $(am__v_P_@AM_V@)$/;"	m
AM_V_at	deps/srccache/patchelf-0.9/Makefile.in	/^AM_V_at = $(am__v_at_@AM_V@)$/;"	m
AM_V_at	deps/srccache/patchelf-0.9/src/Makefile.in	/^AM_V_at = $(am__v_at_@AM_V@)$/;"	m
AM_V_at	deps/srccache/patchelf-0.9/tests/Makefile.in	/^AM_V_at = $(am__v_at_@AM_V@)$/;"	m
AM_V_lt	deps/srccache/patchelf-0.9/tests/Makefile.in	/^AM_V_lt = $(am__v_lt_@AM_V@)$/;"	m
AModuleLocalToOther	stdlib/Distributed/test/distributed_exec.jl	/^            @eval module AModuleLocalToOther$/;"	f
ANYARGS	src/flisp/flisp.c	/^#define ANYARGS /;"	d	file:
ANonIsBitsType	test/core.jl	/^mutable struct ANonIsBitsType$/;"	f
APPLE_DEVELOPMENT_TEAM	contrib/mac/frameworkapp/Makefile	/^APPLE_DEVELOPMENT_TEAM ?= unidentified$/;"	m
APP_COPYRIGHT	contrib/mac/app/Makefile	/^APP_COPYRIGHT:=© 2016 The Julia Project$/;"	m
APP_ID	contrib/mac/app/Makefile	/^APP_ID:=org.julialang.launcherapp$/;"	m
APP_NAME	contrib/mac/app/Makefile	/^APP_NAME:=Julia-$(JULIA_VERSION_MAJOR_MINOR).app$/;"	m
ARCH	base/sysinfo.jl	/^const ARCH = ccall(:jl_get_ARCH, Any, ())$/;"	v
ARG1_REG	src/interpreter-stacktrace.c	/^#define ARG1_REG /;"	d	file:
ARGS	base/initdefs.jl	/^const ARGS = String[]$/;"	v
ARM	src/processor_arm.cpp	/^namespace ARM {$/;"	n	file:
ARM (Linux)	doc/build/arm.md	/^# ARM (Linux)$/;"	c
ARP	contrib/windows/build-installer.nsi	/^!define ARP "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\Julia ${Version}"$/;"	d
ARRAY_INLINE_NBYTES	src/options.h	/^#define ARRAY_INLINE_NBYTES /;"	d
ARRAY_TAG	stdlib/Serialization/src/Serialization.jl	/^const ARRAY_TAG = sertag(Array)$/;"	v
ARRIVERS_P	src/options.h	/^#define ARRIVERS_P /;"	d
ASCIIChar	test/char.jl	/^ASCIIChar(c::UInt32) = ASCIIChar(UInt8(c))$/;"	f
ASCIIChar	test/char.jl	/^ASCIIChar(c::UInt8) = reinterpret(ASCIIChar, c)$/;"	f
ASCIIChar	test/char.jl	/^primitive type ASCIIChar <: AbstractChar 8 end$/;"	f
ASCIIStr	test/subtype.jl	/^const ASCIIStr = Str{CSE{2}}$/;"	v
ASIN_X_MIN_THRESHOLD	base/special/trig.jl	/^ASIN_X_MIN_THRESHOLD(::Type{Float32}) = 2.0f0^-12$/;"	f
ASIN_X_MIN_THRESHOLD	base/special/trig.jl	/^ASIN_X_MIN_THRESHOLD(::Type{Float64}) = sqrt(eps(Float64))$/;"	f
ASM_END	src/interpreter-stacktrace.c	/^#define ASM_END /;"	d	file:
ASM_END	src/interpreter-stacktrace.c	/^#define ASM_END$/;"	d	file:
ASM_ENTRY	src/interpreter-stacktrace.c	/^#define ASM_ENTRY /;"	d	file:
ASM_FUNCTION_TYPE	src/interpreter-stacktrace.c	/^#  define ASM_FUNCTION_TYPE /;"	d	file:
ASSIGN	src/APInt-C.cpp	/^#define ASSIGN(/;"	d	file:
ASUM_CUTOFF	stdlib/LinearAlgebra/src/dense.jl	/^const ASUM_CUTOFF = 32$/;"	v
AT	test/docs.jl	/^abstract type AT end$/;"	f
AT11015	test/compiler/inference.jl	/^mutable struct AT11015$/;"	f
ATAN2_PI_LO	base/special/trig.jl	/^ATAN2_PI_LO(::Type{Float32}) = -8.7422776573f-08$/;"	f
ATAN2_PI_LO	base/special/trig.jl	/^ATAN2_PI_LO(::Type{Float64}) = 1.2246467991473531772E-16$/;"	f
ATAN2_RATIO_BIT_SHIFT	base/special/trig.jl	/^ATAN2_RATIO_BIT_SHIFT(::Type{Float32}) = 23$/;"	f
ATAN2_RATIO_BIT_SHIFT	base/special/trig.jl	/^ATAN2_RATIO_BIT_SHIFT(::Type{Float64}) = 20$/;"	f
ATAN2_RATIO_THRESHOLD	base/special/trig.jl	/^ATAN2_RATIO_THRESHOLD(::Type{Float32}) = 26$/;"	f
ATAN2_RATIO_THRESHOLD	base/special/trig.jl	/^ATAN2_RATIO_THRESHOLD(::Type{Float64}) = 60$/;"	f
ATAN_1_O_2_HI	base/special/trig.jl	/^ATAN_1_O_2_HI(::Type{Float32}) = 4.6364760399f-01 # atan(0.5).hi$/;"	f
ATAN_1_O_2_HI	base/special/trig.jl	/^ATAN_1_O_2_HI(::Type{Float64}) = 4.63647609000806093515e-01 # atan(0.5).hi$/;"	f
ATAN_1_O_2_LO	base/special/trig.jl	/^ATAN_1_O_2_LO(::Type{Float32}) = 5.0121582440f-09  # atan(0.5).lo$/;"	f
ATAN_1_O_2_LO	base/special/trig.jl	/^ATAN_1_O_2_LO(::Type{Float64}) = 2.26987774529616870924e-17 # atan(0.5).lo$/;"	f
ATAN_2_O_2_HI	base/special/trig.jl	/^ATAN_2_O_2_HI(::Type{Float32}) = 7.8539812565f-01 # atan(1.0).hi$/;"	f
ATAN_2_O_2_HI	base/special/trig.jl	/^ATAN_2_O_2_HI(::Type{Float64}) = 7.85398163397448278999e-01 # atan(1.0).hi$/;"	f
ATAN_2_O_2_LO	base/special/trig.jl	/^ATAN_2_O_2_LO(::Type{Float32}) = 3.7748947079f-08  # atan(1.0).lo$/;"	f
ATAN_2_O_2_LO	base/special/trig.jl	/^ATAN_2_O_2_LO(::Type{Float64}) = 3.06161699786838301793e-17 # atan(1.0).lo$/;"	f
ATAN_3_O_2_HI	base/special/trig.jl	/^ATAN_3_O_2_HI(::Type{Float32}) = 9.8279368877f-01 # atan(1.5).hi$/;"	f
ATAN_3_O_2_HI	base/special/trig.jl	/^ATAN_3_O_2_HI(::Type{Float64}) = 9.82793723247329054082e-01 # atan(1.5).hi$/;"	f
ATAN_3_O_2_LO	base/special/trig.jl	/^ATAN_3_O_2_LO(::Type{Float32}) = 3.4473217170f-08  # atan(1.5).lo$/;"	f
ATAN_3_O_2_LO	base/special/trig.jl	/^ATAN_3_O_2_LO(::Type{Float64}) = 1.39033110312309984516e-17 # atan(1.5).lo$/;"	f
ATAN_INF_HI	base/special/trig.jl	/^ATAN_INF_HI(::Type{Float32}) = 1.5707962513f+00 # atan(Inf).hi$/;"	f
ATAN_INF_HI	base/special/trig.jl	/^ATAN_INF_HI(::Type{Float64}) = 1.57079632679489655800e+00 # atan(Inf).hi$/;"	f
ATAN_INF_LO	base/special/trig.jl	/^ATAN_INF_LO(::Type{Float32}) = 7.5497894159f-08  # atan(Inf).lo$/;"	f
ATAN_INF_LO	base/special/trig.jl	/^ATAN_INF_LO(::Type{Float64}) = 6.12323399573676603587e-17 # atan(Inf).lo$/;"	f
ATAN_LARGE_X	base/special/trig.jl	/^ATAN_LARGE_X(::Type{Float32}) = 2.0f0^26$/;"	f
ATAN_LARGE_X	base/special/trig.jl	/^ATAN_LARGE_X(::Type{Float64}) = 2.0^66 # seems too large? 2.0^60 gives the same$/;"	f
ATAN_SMALL_X	base/special/trig.jl	/^ATAN_SMALL_X(::Type{Float32}) = 2.0f0^-12$/;"	f
ATAN_SMALL_X	base/special/trig.jl	/^ATAN_SMALL_X(::Type{Float64}) = 2.0^-27$/;"	f
AT_HWCAP	src/processor_arm.cpp	/^#  define AT_HWCAP /;"	d	file:
AT_HWCAP2	src/processor_arm.cpp	/^#  define AT_HWCAP2 /;"	d	file:
AUTHOR	deps/srccache/patchelf-0.9/patchelf.1	/^.SH AUTHOR$/;"	s	title:PATCHELF
AUTHORS	doc/man/julia.1	/^.SH AUTHORS$/;"	s	title:JULIA
AUTOCONF	deps/srccache/patchelf-0.9/Makefile.in	/^AUTOCONF = @AUTOCONF@$/;"	m
AUTOCONF	deps/srccache/patchelf-0.9/src/Makefile.in	/^AUTOCONF = @AUTOCONF@$/;"	m
AUTOCONF	deps/srccache/patchelf-0.9/tests/Makefile.in	/^AUTOCONF = @AUTOCONF@$/;"	m
AUTOHEADER	deps/srccache/patchelf-0.9/Makefile.in	/^AUTOHEADER = @AUTOHEADER@$/;"	m
AUTOHEADER	deps/srccache/patchelf-0.9/src/Makefile.in	/^AUTOHEADER = @AUTOHEADER@$/;"	m
AUTOHEADER	deps/srccache/patchelf-0.9/tests/Makefile.in	/^AUTOHEADER = @AUTOHEADER@$/;"	m
AUTOMAKE	deps/srccache/patchelf-0.9/Makefile.in	/^AUTOMAKE = @AUTOMAKE@$/;"	m
AUTOMAKE	deps/srccache/patchelf-0.9/src/Makefile.in	/^AUTOMAKE = @AUTOMAKE@$/;"	m
AUTOMAKE	deps/srccache/patchelf-0.9/tests/Makefile.in	/^AUTOMAKE = @AUTOMAKE@$/;"	m
AVG_PATH	base/filesystem.jl	/^const AVG_PATH = Sys.iswindows() ? 260 : 512$/;"	v
AWK	deps/srccache/patchelf-0.9/Makefile.in	/^AWK = @AWK@$/;"	m
AWK	deps/srccache/patchelf-0.9/src/Makefile.in	/^AWK = @AWK@$/;"	m
AWK	deps/srccache/patchelf-0.9/tests/Makefile.in	/^AWK = @AWK@$/;"	m
A_15703	test/tuple.jl	/^struct A_15703{N}$/;"	f
A_20087	test/docs.jl	/^struct A_20087 end$/;"	f
A_3_3	test/offsetarray.jl	/^A_3_3 = OffsetArray(Matrix{Int}(undef, 3,3), (-2,-1))$/;"	v
A_mul_B_td!	stdlib/LinearAlgebra/src/bidiag.jl	/^function A_mul_B_td!(C::AbstractMatrix, A::AbstractMatrix, B::BiTriSym,$/;"	f
A_mul_B_td!	stdlib/LinearAlgebra/src/bidiag.jl	/^function A_mul_B_td!(C::AbstractMatrix, A::BiTriSym, B::BiTriSym,$/;"	f
A_mul_B_td!	stdlib/LinearAlgebra/src/bidiag.jl	/^function A_mul_B_td!(C::AbstractMatrix, A::BiTriSym, B::Diagonal,$/;"	f
A_mul_B_td!	stdlib/LinearAlgebra/src/bidiag.jl	/^function A_mul_B_td!(C::AbstractMatrix, A::Diagonal, B::BiTriSym,$/;"	f
A_mul_B_td!	stdlib/LinearAlgebra/src/bidiag.jl	/^function A_mul_B_td!(C::AbstractVecOrMat, A::BiTriSym, B::AbstractVecOrMat,$/;"	f
AbiLayout	src/ccall.cpp	/^class AbiLayout {$/;"	c	file:
AboveMaxLevel	base/logging.jl	/^const AboveMaxLevel = LogLevel( 1000001)$/;"	v
Abs;	test/core.jl	/^abstract type Abs; end$/;"	f
Abstract Types	doc/src/manual/types.md	/^## Abstract Types$/;"	s
Abstract containers and element types	doc/src/manual/methods.md	/^### Abstract containers and element types$/;"	S
Abstract number types	doc/src/base/numbers.md	/^### Abstract number types$/;"	S
Abstract22734	test/ccall.jl	/^abstract type Abstract22734 end$/;"	f
AbstractArray	stdlib/LinearAlgebra/src/cholesky.jl	/^AbstractArray(C::Cholesky) = AbstractMatrix(C)$/;"	f
AbstractArray	stdlib/LinearAlgebra/src/cholesky.jl	/^AbstractArray(F::CholeskyPivoted) = AbstractMatrix(F)$/;"	f
AbstractArray	stdlib/LinearAlgebra/src/eigen.jl	/^AbstractArray(F::Eigen) = AbstractMatrix(F)$/;"	f
AbstractArray	stdlib/LinearAlgebra/src/hessenberg.jl	/^AbstractArray(F::Hessenberg) = AbstractMatrix(F)$/;"	f
AbstractArray	stdlib/LinearAlgebra/src/ldlt.jl	/^AbstractArray(F::LDLt) = AbstractMatrix(F)$/;"	f
AbstractArray	stdlib/LinearAlgebra/src/lq.jl	/^AbstractArray(A::LQ) = AbstractMatrix(A)$/;"	f
AbstractArray	stdlib/LinearAlgebra/src/lu.jl	/^AbstractArray(F::LU) = AbstractMatrix(F)$/;"	f
AbstractArray	stdlib/LinearAlgebra/src/lu.jl	/^AbstractArray(F::LU{T,Tridiagonal{T,V}}) where {T,V} = AbstractMatrix(F)$/;"	f
AbstractArray	stdlib/LinearAlgebra/src/qr.jl	/^AbstractArray(F::QRPivoted) = AbstractMatrix(F)$/;"	f
AbstractArray	stdlib/LinearAlgebra/src/qr.jl	/^AbstractArray(F::Union{QR,QRCompactWY}) = AbstractMatrix(F)$/;"	f
AbstractArray	stdlib/LinearAlgebra/src/schur.jl	/^AbstractArray(F::Schur) = AbstractMatrix(F)$/;"	f
AbstractArray	stdlib/LinearAlgebra/src/svd.jl	/^AbstractArray(F::SVD) = AbstractMatrix(F)$/;"	f
AbstractArrayStyle	base/broadcast.jl	/^abstract type AbstractArrayStyle{N} <: BroadcastStyle end$/;"	f
AbstractBytes	stdlib/SHA/src/SHA.jl	/^const AbstractBytes = Union{AbstractVector{UInt8},NTuple{N,UInt8} where N}$/;"	v
AbstractCartesianIndex	base/subarray.jl	/^abstract type AbstractCartesianIndex{N} end # This is a hacky forward declaration for CartesianI/;"	f
AbstractChannel	base/channels.jl	/^abstract type AbstractChannel{T} end$/;"	f
AbstractChar	base/boot.jl	/^abstract type AbstractChar end$/;"	f
AbstractCmd	base/cmd.jl	/^abstract type AbstractCmd end$/;"	f
AbstractCredential	stdlib/LibGit2/src/types.jl	/^abstract type AbstractCredential end$/;"	f
AbstractDateTime	stdlib/Dates/src/types.jl	/^abstract type AbstractDateTime <: TimeType end$/;"	f
AbstractDateToken	stdlib/Dates/src/io.jl	/^abstract type AbstractDateToken end$/;"	f
AbstractDict	base/essentials.jl	/^abstract type AbstractDict{K,V} end$/;"	f
AbstractDisplay	base/multimedia.jl	/^abstract type AbstractDisplay end$/;"	f
AbstractEvalConstant	base/compiler/tfuncs.jl	/^const AbstractEvalConstant = Const$/;"	v
AbstractFile	base/filesystem.jl	/^abstract type AbstractFile <: IO end$/;"	f
AbstractFloat	base/boot.jl	/^abstract type AbstractFloat <: Real end$/;"	f
AbstractFloat	base/float.jl	/^AbstractFloat(x::Bool)    = Float64(x)$/;"	f
AbstractFloat	base/float.jl	/^AbstractFloat(x::Int128)  = Float64(x) # LOSSY$/;"	f
AbstractFloat	base/float.jl	/^AbstractFloat(x::Int16)   = Float64(x)$/;"	f
AbstractFloat	base/float.jl	/^AbstractFloat(x::Int32)   = Float64(x)$/;"	f
AbstractFloat	base/float.jl	/^AbstractFloat(x::Int64)   = Float64(x) # LOSSY$/;"	f
AbstractFloat	base/float.jl	/^AbstractFloat(x::Int8)    = Float64(x)$/;"	f
AbstractFloat	base/float.jl	/^AbstractFloat(x::UInt128) = Float64(x) # LOSSY$/;"	f
AbstractFloat	base/float.jl	/^AbstractFloat(x::UInt16)  = Float64(x)$/;"	f
AbstractFloat	base/float.jl	/^AbstractFloat(x::UInt32)  = Float64(x)$/;"	f
AbstractFloat	base/float.jl	/^AbstractFloat(x::UInt64)  = Float64(x) # LOSSY$/;"	f
AbstractFloat	base/float.jl	/^AbstractFloat(x::UInt8)   = Float64(x)$/;"	f
AbstractFloat	base/irrationals.jl	/^AbstractFloat(x::AbstractIrrational) = Float64(x)$/;"	f
AbstractFloat	base/mpfr.jl	/^AbstractFloat(x::BigInt) = BigFloat(x)$/;"	f
AbstractFloat	base/rational.jl	/^AbstractFloat(x::Rational) = float(x.num)\/float(x.den)$/;"	f
AbstractGitHash	stdlib/LibGit2/src/types.jl	/^abstract type AbstractGitHash end$/;"	f
AbstractGitObject	stdlib/LibGit2/src/types.jl	/^abstract type AbstractGitObject end$/;"	f
AbstractInterval	test/specificity.jl	/^abstract type AbstractInterval{T} <: Domain{T} end$/;"	f
AbstractIrrational	base/irrationals.jl	/^abstract type AbstractIrrational <: Real end$/;"	f
AbstractLock	base/condition.jl	/^abstract type AbstractLock end$/;"	f
AbstractLogger	base/logging.jl	/^abstract type AbstractLogger ; end$/;"	f
AbstractMatrix	stdlib/LinearAlgebra/src/cholesky.jl	/^AbstractMatrix(C::Cholesky) = C.uplo == 'U' ? C.U'C.U : C.L*C.L'$/;"	f
AbstractMatrix	stdlib/LinearAlgebra/src/cholesky.jl	/^function AbstractMatrix(F::CholeskyPivoted)$/;"	f
AbstractMatrix	stdlib/LinearAlgebra/src/eigen.jl	/^AbstractMatrix(F::Eigen) = F.vectors * Diagonal(F.values) \/ F.vectors$/;"	f
AbstractMatrix	stdlib/LinearAlgebra/src/hessenberg.jl	/^function AbstractMatrix(F::Hessenberg)$/;"	f
AbstractMatrix	stdlib/LinearAlgebra/src/ldlt.jl	/^AbstractMatrix(F::LDLt) = SymTridiagonal(F)$/;"	f
AbstractMatrix	stdlib/LinearAlgebra/src/lq.jl	/^AbstractMatrix(A::LQ) = A.L*A.Q$/;"	f
AbstractMatrix	stdlib/LinearAlgebra/src/lu.jl	/^AbstractMatrix(F::LU) = (F.L * F.U)[invperm(F.p),:]$/;"	f
AbstractMatrix	stdlib/LinearAlgebra/src/lu.jl	/^AbstractMatrix(F::LU{T,Tridiagonal{T,V}}) where {T,V} = Tridiagonal(F)$/;"	f
AbstractMatrix	stdlib/LinearAlgebra/src/qr.jl	/^AbstractMatrix(F::QRPivoted) = (F.Q * F.R)[:,invperm(F.p)]$/;"	f
AbstractMatrix	stdlib/LinearAlgebra/src/qr.jl	/^AbstractMatrix(F::Union{QR,QRCompactWY}) = F.Q * F.R$/;"	f
AbstractMatrix	stdlib/LinearAlgebra/src/schur.jl	/^AbstractMatrix(F::Schur) = (F.Z * F.T) * F.Z'$/;"	f
AbstractMatrix	stdlib/LinearAlgebra/src/svd.jl	/^AbstractMatrix(F::SVD) = (F.U * Diagonal(F.S)) * F.Vt$/;"	f
AbstractMenu	stdlib/REPL/src/TerminalMenus/AbstractMenu.jl	/^abstract type AbstractMenu end$/;"	f
AbstractMsg	stdlib/Distributed/src/messages.jl	/^abstract type AbstractMsg end$/;"	f
AbstractMyType12580	test/subtype.jl	/^abstract type AbstractMyType12580{T} end$/;"	f
AbstractMyType18457	test/compiler/inference.jl	/^abstract type AbstractMyType18457{T,F,G} end$/;"	f
AbstractNode	test/compiler/inference.jl	/^abstract type AbstractNode end$/;"	f
AbstractPipe	base/io.jl	/^abstract type AbstractPipe <: IO end$/;"	f
AbstractQ	stdlib/LinearAlgebra/src/qr.jl	/^abstract type AbstractQ{T} <: AbstractMatrix{T} end$/;"	f
AbstractREPL	stdlib/REPL/src/REPL.jl	/^abstract type AbstractREPL end$/;"	f
AbstractRGB22592	test/specificity.jl	/^abstract type AbstractRGB22592{T} <: Color22592{T,3} end$/;"	f
AbstractRNG	stdlib/Random/src/Random.jl	/^abstract type AbstractRNG end$/;"	f
AbstractRange	base/range.jl	/^abstract type AbstractRange{T} <: AbstractArray{T,1} end$/;"	f
AbstractRemoteRef	stdlib/Distributed/src/remotecall.jl	/^abstract type AbstractRemoteRef end$/;"	f
AbstractRotation	stdlib/LinearAlgebra/src/givens.jl	/^abstract type AbstractRotation{T} end$/;"	f
AbstractSerializer	stdlib/Serialization/src/Serialization.jl	/^abstract type AbstractSerializer end$/;"	f
AbstractSet	base/essentials.jl	/^abstract type AbstractSet{T} end$/;"	f
AbstractSparseArray	stdlib/SparseArrays/src/abstractsparse.jl	/^abstract type AbstractSparseArray{Tv,Ti,N} <: AbstractArray{Tv,N} end$/;"	f
AbstractSparseMatrixCSC	stdlib/SparseArrays/src/abstractsparse.jl	/^abstract type AbstractSparseMatrixCSC{Tv,Ti<:Integer} <: AbstractSparseMatrix{Tv,Ti} end$/;"	f
AbstractT27351	test/compiler/inference.jl	/^abstract type AbstractT27351 end$/;"	f
AbstractTerminal	stdlib/REPL/src/Terminals.jl	/^abstract type AbstractTerminal <: Base.AbstractPipe end$/;"	f
AbstractTest29307	test/misc.jl	/^abstract type AbstractTest29307 end$/;"	f
AbstractTestSet	stdlib/Test/src/Test.jl	/^abstract type AbstractTestSet end$/;"	f
AbstractThing	test/subtype.jl	/^abstract type AbstractThing{T,N} end$/;"	f
AbstractTime	stdlib/Dates/src/types.jl	/^abstract type AbstractTime end$/;"	f
AbstractTriangular	stdlib/LinearAlgebra/src/triangular.jl	/^abstract type AbstractTriangular{T,S<:AbstractMatrix} <: AbstractMatrix{T} end$/;"	f
AbstractTriangular	test/subtype.jl	/^abstract type AbstractTriangular{T,S<:AbstractMatrix} <: AbstractMatrix{T} end$/;"	f
AbstractTypeNoConstructors	test/errorshow.jl	/^    abstract type AbstractTypeNoConstructors end$/;"	f
AbstractUnitRange	base/range.jl	/^abstract type AbstractUnitRange{T} <: OrdinalRange{T,T} end$/;"	f
AbstractWorkerPool	stdlib/Distributed/src/workerpool.jl	/^abstract type AbstractWorkerPool end$/;"	f
Abuf	stdlib/LinearAlgebra/src/matmul.jl	/^const Abuf = [Vector{UInt8}(undef, tilebufsize)]$/;"	v
Access arrays in memory order, along columns	doc/src/manual/performance-tips.md	/^## Access arrays in memory order, along columns$/;"	s
Accessing Data through a Pointer	doc/src/manual/calling-c-and-fortran-code.md	/^## Accessing Data through a Pointer$/;"	s
Accessing Documentation	doc/src/manual/documentation.md	/^## Accessing Documentation$/;"	s
Accessing Global Variables	doc/src/manual/calling-c-and-fortran-code.md	/^## Accessing Global Variables$/;"	s
Accessing Returned Arrays	doc/src/manual/embedding.md	/^### Accessing Returned Arrays$/;"	S
Accessor Functions	stdlib/Dates/docs/src/index.md	/^## Accessor Functions$/;"	s
Accessor Functions	stdlib/Dates/docs/src/index.md	/^### Accessor Functions$/;"	S
AccessorsTest	stdlib/Dates/test/accessors.jl	/^module AccessorsTest$/;"	f
Accumulation and clearing	doc/src/manual/profile.md	/^## Accumulation and clearing$/;"	s
AddCustomMode	stdlib/REPL/test/repl.jl	/^function AddCustomMode(repl, prompt)$/;"	f
AddInPredLiveOuts	src/llvm-late-gc-lowering.cpp	/^static void AddInPredLiveOuts(BasicBlock *BB, BitVector &LiveIn, State &S)$/;"	f	typeref:typename:void	file:
AddToStartMenu	contrib/windows/build-installer.nsi	/^Function AddToStartMenu$/;"	f
Adding a new docstring to `base/`	CONTRIBUTING.md	/^#### Adding a new docstring to `base\/`$/;"	t
Adding methods	doc/src/devdocs/functions.md	/^## Adding methods$/;"	s
Address Sanitizer (ASAN)	doc/src/devdocs/sanitizers.md	/^## Address Sanitizer (ASAN)$/;"	s
AddressSpace	src/codegen_shared.h	/^enum AddressSpace {$/;"	g
Adjoint	stdlib/LinearAlgebra/src/adjtrans.jl	/^    function Adjoint{T,S}(A::S) where {T,S}$/;"	f
Adjoint	stdlib/LinearAlgebra/src/adjtrans.jl	/^Adjoint(A) = Adjoint{Base.promote_op(adjoint,eltype(A)),typeof(A)}(A)$/;"	f
Adjoint	stdlib/LinearAlgebra/src/adjtrans.jl	/^struct Adjoint{T,S} <: AbstractMatrix{T}$/;"	f
Adjoint	stdlib/LinearAlgebra/test/matmul.jl	/^Adjoint(x::RootInt) = x$/;"	f
Adjuster Functions	stdlib/Dates/docs/src/index.md	/^## Adjuster Functions$/;"	s
Adjuster Functions	stdlib/Dates/docs/src/index.md	/^### Adjuster Functions$/;"	S
AdjustersTest	stdlib/Dates/test/adjusters.jl	/^module AdjustersTest$/;"	f
Admonition	stdlib/Markdown/src/Common/block.jl	/^mutable struct Admonition$/;"	f
Advanced Usage	doc/src/manual/documentation.md	/^## Advanced Usage$/;"	s
After compiling	doc/build/windows.md	/^## After compiling$/;"	s
Agen_nodrop	test/subarray.jl	/^function Agen_nodrop(A::AbstractArray, I...)$/;"	f
Agen_slice	test/subarray.jl	/^function Agen_slice(A::AbstractArray, I...)$/;"	f
Aimg	stdlib/LinearAlgebra/test/triangular.jl	/^Aimg    = randn(n, n)\/2$/;"	v
Algorithm	base/sort.jl	/^abstract type Algorithm end$/;"	f
Algorithm	stdlib/LinearAlgebra/src/LinearAlgebra.jl	/^abstract type Algorithm end$/;"	f
Alias Analysis	doc/src/devdocs/llvm.md	/^### Alias Analysis$/;"	S
All Objects	doc/src/base/base.md	/^## All Objects$/;"	s
AllPtrNumbering	src/llvm-late-gc-lowering.cpp	/^    std::map<Value *, int> AllPtrNumbering;$/;"	m	struct:State	typeref:typename:std::map<Value *,int>	file:
AllVectorNumbering	src/llvm-late-gc-lowering.cpp	/^    std::map<Value *, std::vector<int>> AllVectorNumbering;$/;"	m	struct:State	typeref:typename:std::map<Value *,std::vector<int>>	file:
Alloc	src/cgmemmgr.cpp	/^        Alloc = (1 << 1),$/;"	e	enum:__anon06c686bc0111::SplitPtrBlock::State	file:
AllocOpt	src/llvm-alloc-opt.cpp	/^    AllocOpt()$/;"	f	struct:__anon0a1571000111::AllocOpt	file:
AllocOpt	src/llvm-alloc-opt.cpp	/^struct AllocOpt : public FunctionPass {$/;"	s	namespace:__anon0a1571000111	file:
AllocUseInfo	src/llvm-alloc-opt.cpp	/^    struct AllocUseInfo {$/;"	s	struct:__anon0a1571000111::Optimizer	file:
Allocas	src/llvm-late-gc-lowering.cpp	/^    std::vector<AllocaInst *> Allocas;$/;"	m	struct:State	typeref:typename:std::vector<AllocaInst * >	file:
Allocated	src/clangsa/GCChecker.cpp	/^            enum State { Allocated, Rooted, PotentiallyFreed, Untracked } S;$/;"	e	enum:__anon9c5a21540111::GCChecker::ValueState::State	file:
Allocating storage using generalizations of `similar`	doc/src/devdocs/offset-arrays.md	/^### Allocating storage using generalizations of `similar`$/;"	S
Allocation	src/cgmemmgr.cpp	/^struct Allocation {$/;"	s	namespace:__anon06c686bc0111	file:
Allowed Variable Names	doc/src/manual/variables.md	/^## Allowed Variable Names$/;"	s
Alpha	test/dict.jl	/^mutable struct Alpha end$/;"	f
AlsoExportsPair	test/show.jl	/^module AlsoExportsPair$/;"	f
AltLE	stdlib/REPL/test/repl.jl	/^module AltLE$/;"	f
AlternativeIntModule	test/core.jl	/^module AlternativeIntModule$/;"	f
AlwaysHasLayout	test/reflection.jl	/^struct AlwaysHasLayout{T}$/;"	f
AlwaysLockedST	base/condition.jl	/^    AlwaysLockedST() = new(Threads.threadid())$/;"	f
AlwaysLockedST	base/condition.jl	/^struct AlwaysLockedST <: AbstractLock$/;"	f
Ambig1	test/ambiguous.jl	/^module Ambig1$/;"	f
Ambig17648	test/ambiguous.jl	/^module Ambig17648$/;"	f
Ambig2	test/ambiguous.jl	/^module Ambig2$/;"	f
Ambig3	test/ambiguous.jl	/^module Ambig3$/;"	f
Ambig4	test/ambiguous.jl	/^module Ambig4$/;"	f
Ambig5	test/ambiguous.jl	/^module Ambig5$/;"	f
Ambig6	test/ambiguous.jl	/^module Ambig6$/;"	f
Ambig7	test/ambiguous.jl	/^module Ambig7$/;"	f
Ambig8	test/ambiguous.jl	/^module Ambig8$/;"	f
Ambig9	test/ambiguous.jl	/^module Ambig9$/;"	f
AmbigStdlib	test/ambiguous.jl	/^module AmbigStdlib$/;"	f
An advanced example	doc/src/manual/metaprogramming.md	/^### An advanced example$/;"	S
An optimized sampler with pre-computed data	stdlib/Random/docs/src/index.md	/^#### An optimized sampler with pre-computed data$/;"	t
AndCmds	base/cmd.jl	/^    AndCmds(a::AbstractCmd, b::AbstractCmd) = new(a, b)$/;"	f
AndCmds	base/cmd.jl	/^struct AndCmds <: AbstractCmd$/;"	f
Annotate values taken from untyped locations	doc/src/manual/performance-tips.md	/^### Annotate values taken from untyped locations$/;"	S
Annotations for new features, deprecations and behavior changes	CONTRIBUTING.md	/^#### Annotations for new features, deprecations and behavior changes$/;"	t
Anonymous	stdlib/Mmap/src/Mmap.jl	/^Anonymous() = Anonymous("",false,true)$/;"	f
Anonymous	stdlib/Mmap/src/Mmap.jl	/^mutable struct Anonymous <: IO$/;"	f
Anonymous-function expressions as macro arguments	doc/src/devdocs/cartesian.md	/^### Anonymous-function expressions as macro arguments$/;"	S
AnonymousFunction19928d100100	src/jsvm-emscripten/task.js	/^  jl_set_fiber: function(ctx) {$/;"	f
AnonymousFunction19928d100200	src/jsvm-emscripten/task.js	/^  jl_swap_fiber: function(lastt_ctx, ctx) {$/;"	f
AnonymousFunction19928d100300	src/jsvm-emscripten/task.js	/^  jl_start_fiber: function(lastt_ctx, ctx) {$/;"	f
AnonymousFunctioncb47a3930100	src/jsvm-emscripten/asyncify_setup.js	/^Module.preRun.push(function() {$/;"	f
AnonymousFunctioncb47a3930200	src/jsvm-emscripten/asyncify_setup.js	/^                startAsync(function(returnValue) {$/;"	f	function:Asyncify.handleSleep
AnyDict	base/dict.jl	/^const AnyDict = Dict{Any,Any}$/;"	v
AnyDict	stdlib/REPL/src/LineEdit.jl	/^    AnyDict(Char(i) => nothing for i=vcat(0:26, 28:31)), # Ignore control characters by default$/;"	f
AnySSAValue	base/compiler/ssair/ir.jl	/^const AnySSAValue = Union{SSAValue, OldSSAValue, NewSSAValue}$/;"	v
AppDelegate	contrib/mac/frameworkapp/JuliaLauncher/AppDelegate.h	/^@interface AppDelegate : NSObject <NSApplicationDelegate>$/;"	i	protocols:NSApplicationDelegate
AppDelegate	contrib/mac/frameworkapp/JuliaLauncher/AppDelegate.m	/^@implementation AppDelegate$/;"	I
AppDelegate	contrib/mac/frameworkapp/JuliaLauncher/AppDelegate.m	/^@interface AppDelegate () {$/;"	i	category:NSMetadataQuery
Append `!` to names of functions that modify their arguments	doc/src/manual/style-guide.md	/^## Append `!` to names of functions that modify their arguments$/;"	s
Applied	test/subtype.jl	/^struct Applied{Style, Args<:Tuple} end$/;"	f
ApplyQuasiArray	test/subtype.jl	/^struct ApplyQuasiArray{T, N, App<:Applied} end$/;"	f
Apr	stdlib/Dates/src/query.jl	/^const Apr = 4$/;"	v
Apr	stdlib/Dates/test/adjusters.jl	/^Apr = Dates.DateTime(2013, 4, 4) #Thursday$/;"	v
Apr	stdlib/Dates/test/query.jl	/^Apr = Dates.DateTime(2013, 4, 4) # Thursday$/;"	v
April	stdlib/Dates/src/query.jl	/^const April = 4$/;"	v
Arbitrary Precision Arithmetic	doc/src/manual/integers-and-floating-point-numbers.md	/^## Arbitrary Precision Arithmetic$/;"	s
Architecture Customization	doc/build/linux.md	/^### Architecture Customization$/;"	S
ArchiveWriterError	src/jitlayers.cpp	/^typedef Error ArchiveWriterError;$/;"	t	typeref:typename:Error	file:
Areal	stdlib/LinearAlgebra/test/triangular.jl	/^Areal   = randn(n, n)\/2$/;"	v
ArgClass	src/abi_x86_64.cpp	/^enum ArgClass { Integer, Sse, SseUp, X87, X87Up, ComplexX87, NoClass, Memory };$/;"	g	file:
ArgError	src/flisp/flisp.h	/^    value_t IOError, ParseError, TypeError, ArgError, UnboundError, KeyError;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
Argument	base/compiler/ssair/ir.jl	/^struct Argument$/;"	f
Argument Passing Behavior	doc/src/manual/functions.md	/^## Argument Passing Behavior$/;"	s
Argument destructuring	doc/src/manual/functions.md	/^## Argument destructuring$/;"	s
ArgumentError	base/boot.jl	/^struct ArgumentError <: Exception$/;"	f
Arguments	stdlib/REPL/docs/src/index.md	/^### Arguments$/;"	S
Arithmetic Operators	doc/src/manual/mathematical-operations.md	/^## Arithmetic Operators$/;"	s
ArithmeticRounds	base/traits.jl	/^struct ArithmeticRounds <: ArithmeticStyle end     # least significant bits can be lost$/;"	f
ArithmeticStyle	base/traits.jl	/^ArithmeticStyle(::Type{<:AbstractFloat}) = ArithmeticRounds()$/;"	f
ArithmeticStyle	base/traits.jl	/^ArithmeticStyle(::Type{<:Any}) = ArithmeticUnknown()$/;"	f
ArithmeticStyle	base/traits.jl	/^ArithmeticStyle(::Type{<:Integer}) = ArithmeticWraps()$/;"	f
ArithmeticStyle	base/traits.jl	/^ArithmeticStyle(instance) = ArithmeticStyle(typeof(instance))$/;"	f
ArithmeticStyle	base/traits.jl	/^abstract type ArithmeticStyle end$/;"	f
ArithmeticTest	stdlib/Dates/test/arithmetic.jl	/^module ArithmeticTest$/;"	f
ArithmeticTypes	base/atomics.jl	/^const ArithmeticTypes = Union{arithmetictypes...}$/;"	v
ArithmeticUnknown	base/traits.jl	/^struct ArithmeticUnknown <: ArithmeticStyle end$/;"	f
ArithmeticWraps	base/traits.jl	/^struct ArithmeticWraps <: ArithmeticStyle end      #  most significant bits can be lost$/;"	f
Array	base/bitarray.jl	/^function Array{T,N}(B::BitArray{N}) where {T,N}$/;"	f
Array	base/boot.jl	/^Array(A::AbstractArray{T,N})    where {T,N}   = Array{T,N}(A)$/;"	f
Array	stdlib/LinearAlgebra/src/bidiag.jl	/^Array(A::Bidiagonal) = Matrix(A)$/;"	f
Array	stdlib/LinearAlgebra/src/cholesky.jl	/^Array(C::Cholesky) = Matrix(C)$/;"	f
Array	stdlib/LinearAlgebra/src/cholesky.jl	/^Array(F::CholeskyPivoted) = Matrix(F)$/;"	f
Array	stdlib/LinearAlgebra/src/diagonal.jl	/^Array(D::Diagonal) = Matrix(D)$/;"	f
Array	stdlib/LinearAlgebra/src/eigen.jl	/^Array(F::Eigen) = Matrix(F)$/;"	f
Array	stdlib/LinearAlgebra/src/hessenberg.jl	/^Array(F::Hessenberg) = Matrix(F)$/;"	f
Array	stdlib/LinearAlgebra/src/hessenberg.jl	/^Array(H::UpperHessenberg) = Matrix(H)$/;"	f
Array	stdlib/LinearAlgebra/src/ldlt.jl	/^Array(F::LDLt) = Matrix(F)$/;"	f
Array	stdlib/LinearAlgebra/src/lq.jl	/^Array(A::LQ) = Matrix(A)$/;"	f
Array	stdlib/LinearAlgebra/src/lq.jl	/^Array(A::LQPackedQ) = Matrix(A)$/;"	f
Array	stdlib/LinearAlgebra/src/lu.jl	/^Array(F::LU) = Matrix(F)$/;"	f
Array	stdlib/LinearAlgebra/src/lu.jl	/^Array(F::LU{T,Tridiagonal{T,V}}) where {T,V} = Matrix(F)$/;"	f
Array	stdlib/LinearAlgebra/src/qr.jl	/^Array(F::QRPivoted) = Matrix(F)$/;"	f
Array	stdlib/LinearAlgebra/src/qr.jl	/^Array(F::Union{QR,QRCompactWY}) = Matrix(F)$/;"	f
Array	stdlib/LinearAlgebra/src/qr.jl	/^Array(Q::AbstractQ) = Matrix(Q)$/;"	f
Array	stdlib/LinearAlgebra/src/schur.jl	/^Array(F::Schur) = Matrix(F)$/;"	f
Array	stdlib/LinearAlgebra/src/svd.jl	/^Array(F::SVD) = Matrix(F)$/;"	f
Array	stdlib/LinearAlgebra/src/symmetric.jl	/^Array(A::Union{Symmetric,Hermitian}) = convert(Matrix, A)$/;"	f
Array	stdlib/LinearAlgebra/src/triangular.jl	/^Array(A::AbstractTriangular) = Matrix(A)$/;"	f
Array	stdlib/LinearAlgebra/src/tridiag.jl	/^Array(M::SymTridiagonal) = Matrix(M)$/;"	f
Array	stdlib/LinearAlgebra/src/tridiag.jl	/^Array(M::Tridiagonal) = Matrix(M)$/;"	f
Array	stdlib/LinearAlgebra/src/uniformscaling.jl	/^Array(s::UniformScaling, dims::Dims{2}) = Matrix(s, dims)$/;"	f
Array	stdlib/LinearAlgebra/src/uniformscaling.jl	/^Array(s::UniformScaling, m::Integer, n::Integer) = Matrix(s, m, n)$/;"	f
Array	stdlib/LinearAlgebra/test/bidiag.jl	/^            @test Array(T) == diagm(0 => dv, (uplo == :U ? 1 : -1) => ev)$/;"	f
Array	stdlib/LinearAlgebra/test/bidiag.jl	/^            @test Array(abs.(T)) == abs.(diagm(0 => dv, (uplo == :U ? 1 : -1) => ev))$/;"	f
Array	stdlib/LinearAlgebra/test/bidiag.jl	/^            @test Array(imag(T)) == imag(diagm(0 => dv, (uplo == :U ? 1 : -1) => ev))$/;"	f
Array	stdlib/LinearAlgebra/test/bidiag.jl	/^            @test Array(real(T)) == real(diagm(0 => dv, (uplo == :U ? 1 : -1) => ev))$/;"	f
Array	stdlib/SharedArrays/src/SharedArrays.jl	/^Array(S::SharedArray) = S.s$/;"	f
Array	stdlib/SparseArrays/src/sparsematrix.jl	/^Array(S::AbstractSparseMatrixCSC) = Matrix(S)$/;"	f
Array	stdlib/SparseArrays/src/sparsevector.jl	/^Array(x::AbstractSparseVector) = Vector(x)$/;"	f
Array	test/errorshow.jl	/^Array() = 1$/;"	f
Array and Vectorized Operators and Functions	doc/src/manual/arrays.md	/^## Array and Vectorized Operators and Functions$/;"	s
Array functions	doc/src/base/arrays.md	/^## Array functions$/;"	s
Array traits	doc/src/manual/arrays.md	/^## Array traits$/;"	s
Array19745	test/broadcast.jl	/^struct Array19745{T,N} <: ArrayData{T,N}$/;"	f
ArrayConflict	base/broadcast.jl	/^ArrayConflict(::Val) = ArrayConflict()$/;"	f
ArrayConflict	base/broadcast.jl	/^struct ArrayConflict <: AbstractArrayStyle{Any} end$/;"	f
ArrayData	test/broadcast.jl	/^abstract type ArrayData{T,N} <: AbstractArray{T,N} end$/;"	f
ArrayStyle	base/broadcast.jl	/^struct ArrayStyle{A<:AbstractArray} <: AbstractArrayStyle{Any} end$/;"	f
ArrayWrapper	stdlib/Serialization/test/runtests.jl	/^ArrayWrapper(data::AbstractArray{T,N}) where {T,N} = ArrayWrapper{T,N,typeof(data)}(data)$/;"	f
ArrayWrapper	stdlib/Serialization/test/runtests.jl	/^struct ArrayWrapper{T,N,A<:AbstractArray} <: AbstractArray{T,N}$/;"	f
ArrayWrappers	stdlib/Serialization/test/runtests.jl	/^module ArrayWrappers$/;"	f
Array_512_Uint8	test/core.jl	/^struct Array_512_Uint8$/;"	f
Arrays	doc/src/manual/faq.md	/^## Arrays$/;"	s
Arrays With Missing Values	doc/src/manual/missing.md	/^## Arrays With Missing Values$/;"	s
AssertionError	base/boot.jl	/^AssertionError() = AssertionError("")$/;"	f
AssertionError	base/boot.jl	/^struct AssertionError <: Exception$/;"	f
Assignment	doc/src/manual/arrays.md	/^## Assignment$/;"	s
AsyncCollector	base/asyncmap.jl	/^    AsyncCollector(f, r, en::Enumerate, ntasks, batch_size) = new(f, r, en, ntasks, batch_size, /;"	f
AsyncCollector	base/asyncmap.jl	/^function AsyncCollector(f, results, c...; ntasks=0, batch_size=nothing)$/;"	f
AsyncCollector	base/asyncmap.jl	/^mutable struct AsyncCollector$/;"	f
AsyncCollectorState	base/asyncmap.jl	/^    AsyncCollectorState(chnl::Channel, worker_tasks::Vector) =$/;"	f
AsyncCollectorState	base/asyncmap.jl	/^mutable struct AsyncCollectorState$/;"	f
AsyncCondition	base/asyncevent.jl	/^    function AsyncCondition()$/;"	f
AsyncCondition	base/asyncevent.jl	/^function AsyncCondition(cb::Function)$/;"	f
AsyncCondition	base/asyncevent.jl	/^mutable struct AsyncCondition$/;"	f
AsyncGenerator	base/asyncmap.jl	/^function AsyncGenerator(f, c...; ntasks=0)$/;"	f
AsyncGenerator	base/asyncmap.jl	/^mutable struct AsyncGenerator$/;"	f
AsyncGeneratorState	base/asyncmap.jl	/^    AsyncGeneratorState(i::Int) = new(i, false)$/;"	f
AsyncGeneratorState	base/asyncmap.jl	/^mutable struct AsyncGeneratorState$/;"	f
AtLeast1	base/essentials.jl	/^const AtLeast1 = Tuple{Any, Vararg{Any}}$/;"	v
Atn	stdlib/LinearAlgebra/test/triangular.jl	/^Atn = UpperTriangular([-1 1 2; 0 -2 2; 0 0 -3])$/;"	v
Atomic	base/atomics.jl	/^Atomic() = Atomic{Int}()$/;"	f
Atomic	base/atomics.jl	/^mutable struct Atomic{T<:AtomicTypes}$/;"	f
Atomic Operations	doc/src/manual/parallel-computing.md	/^## Atomic Operations$/;"	s
AtomicTypes	base/atomics.jl	/^const AtomicTypes = Union{atomictypes...}$/;"	v
Atp	stdlib/LinearAlgebra/test/triangular.jl	/^Atp = UpperTriangular([1 1 2; 0 2 2; 0 0 3])$/;"	v
Atrue	stdlib/SharedArrays/test/runtests.jl	/^Atrue = reshape(1:30, sz)$/;"	v
Aug	stdlib/Dates/src/query.jl	/^const Aug = 8$/;"	v
Aug	stdlib/Dates/test/adjusters.jl	/^Aug = Dates.DateTime(2013, 8, 8) #Thursday$/;"	v
Aug	stdlib/Dates/test/query.jl	/^Aug = Dates.DateTime(2013, 8, 8) # Thursday$/;"	v
August	stdlib/Dates/src/query.jl	/^const August = 8$/;"	v
AutoRetType	test/arrayops.jl	/^module AutoRetType$/;"	f
Avoid changing the type of a variable	doc/src/manual/performance-tips.md	/^## Avoid changing the type of a variable$/;"	s
Avoid confusion about whether something is an instance or a type	doc/src/manual/style-guide.md	/^## Avoid confusion about whether something is an instance or a type$/;"	s
Avoid containers with abstract type parameters	doc/src/manual/performance-tips.md	/^## Avoid containers with abstract type parameters$/;"	s
Avoid elaborate container types	doc/src/manual/style-guide.md	/^## Avoid elaborate container types$/;"	s
Avoid fields with abstract containers	doc/src/manual/performance-tips.md	/^### Avoid fields with abstract containers$/;"	S
Avoid fields with abstract type	doc/src/manual/performance-tips.md	/^### Avoid fields with abstract type$/;"	S
Avoid global variables	doc/src/manual/performance-tips.md	/^## Avoid global variables$/;"	s
Avoid strange type `Union`s	doc/src/manual/style-guide.md	/^## Avoid strange type `Union`s$/;"	s
Avoid string interpolation for I/O	doc/src/manual/performance-tips.md	/^## Avoid string interpolation for I\/O$/;"	s
Avoid type piracy	doc/src/manual/style-guide.md	/^## Avoid type piracy$/;"	s
Avoid using floats for numeric literals in generic code when possible	doc/src/manual/style-guide.md	/^## Avoid using floats for numeric literals in generic code when possible$/;"	s
Avoid writing overly-specific types	doc/src/manual/style-guide.md	/^## Avoid writing overly-specific types$/;"	s
Avoiding Deadlock in Pipelines	doc/src/manual/running-external-programs.md	/^### Avoiding Deadlock in Pipelines$/;"	S
B	stdlib/LinearAlgebra/src/givens.jl	/^B = G*A$/;"	v
B	stdlib/LinearAlgebra/src/givens.jl	/^B = G*x$/;"	v
B	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    struct B$/;"	f
B	stdlib/SharedArrays/test/runtests.jl	/^B = @inferred(convert(SharedArray, copy(AA')))$/;"	v
B	test/arrayops.jl	/^B = LinSlowMatrix(A)$/;"	v
B	test/core.jl	/^struct B$/;"	f
B	test/docs.jl	/^abstract type B <: A end$/;"	f
B	test/docs.jl	/^module B$/;"	f
B	test/offsetarray.jl	/^B = similar(A, (-3:3,1:4))$/;"	v
B	test/offsetarray.jl	/^B = similar(A, (3,4))$/;"	v
B	test/offsetarray.jl	/^B = similar(A, Float32)$/;"	v
B	test/offsetarray.jl	/^B = similar(parent(A), (-3:3,1:4))$/;"	v
B	test/reinterpretarray.jl	/^B = Complex{Int64}[5+6im, 7+8im, 9+10im]$/;"	v
B	test/reinterpretarray.jl	/^B = reinterpret(Int32,A)$/;"	v
B	test/staged.jl	/^B = view(A, 1:3, 2, 1:3)$/;"	v
B	test/subarray.jl	/^B = reshape(1:16, 4, 4)$/;"	v
B1	test/boundscheck_exec.jl	/^@inline function B1()$/;"	f
B11136	test/subtype.jl	/^mutable struct B11136 end$/;"	f
B11327	test/core.jl	/^abstract type B11327 <: A11327 end$/;"	f
B12238	test/core.jl	/^mutable struct B12238{T,S}$/;"	f
B14009	test/compiler/inference.jl	/^mutable struct B14009{T}; end$/;"	f
B14878	test/core.jl	/^B14878(ng) = B14878()$/;"	f
B14878	test/core.jl	/^mutable struct B14878$/;"	f
B14919	test/core.jl	/^struct B14919 <: A14919; end$/;"	f
B15163	stdlib/Serialization/test/runtests.jl	/^mutable struct B15163{T}$/;"	f
B15838	test/syntax.jl	/^module B15838$/;"	f
B16424	test/core.jl	/^struct B16424{T}$/;"	f
B16767	test/core.jl	/^mutable struct B16767{T}$/;"	f
B1_wrap	test/boundscheck_exec.jl	/^B1_wrap() = @inbounds return B1()$/;"	f
B2	test/boundscheck_exec.jl	/^function B2()$/;"	f
B20086	stdlib/InteractiveUtils/test/runtests.jl	/^struct B20086{T,N} <: A20086{T,N} end$/;"	f
B20992	test/subtype.jl	/^abstract type B20992{SV,T,D,d} <: A20992{T,D,d} end$/;"	f
B21613	test/subtype.jl	/^struct B21613{S <: Tuple, L} <: A21613{S}$/;"	f
B21923	test/core.jl	/^struct B21923{T,N}; v::Vector{B21923{T,M} where M}; end$/;"	f
B23367	test/core.jl	/^struct B23367$/;"	f
B23567	test/core.jl	/^B23567 = collect(Union{Float64, Nothing}, 1.0:3.0)$/;"	v
B2365	test/core.jl	/^mutable struct B2365{T}$/;"	f
B24108	test/compiler/codegen.jl	/^struct B24108$/;"	f
B25604	test/precompile.jl	/^            module B25604$/;"	f
B265	test/worlds.jl	/^B265(x::Any, dummy::Nothing) = B265{UInt8}(x, dummy)$/;"	f
B265	test/worlds.jl	/^B265(x::Float64, dummy::Nothing) = B265{Float64}(x, dummy)$/;"	f
B265	test/worlds.jl	/^B265(x::Int, dummy::Nothing) = B265{Int}(x, dummy)$/;"	f
B265	test/worlds.jl	/^mutable struct B265{T}$/;"	f
B28593	test/syntax.jl	/^        struct B28593{S<:Real, V<:AbstractVector{S}} end$/;"	f
B3890	test/core.jl	/^mutable struct B3890{T2}$/;"	f
B4413	test/core.jl	/^mutable struct B4413 end$/;"	f
B6980	test/core.jl	/^mutable struct B6980 <: A6980 end$/;"	f
B9378	test/core.jl	/^struct B9378{T} end$/;"	f
BACKLOG_DEFAULT	stdlib/Sockets/src/Sockets.jl	/^const BACKLOG_DEFAULT = 511$/;"	v
BACKQUOTE	src/flisp/flisp.h	/^    value_t BACKQUOTE, COMMA, COMMAAT, COMMADOT, FUNCTION;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
BACKREF_TAG	stdlib/Serialization/src/Serialization.jl	/^const BACKREF_TAG          = Int32(o0+2)$/;"	v
BASE64_CODE_END	stdlib/Base64/src/decode.jl	/^const BASE64_CODE_END = 0x40$/;"	v
BASE64_CODE_IGN	stdlib/Base64/src/decode.jl	/^const BASE64_CODE_IGN = 0x42$/;"	v
BASE64_CODE_PAD	stdlib/Base64/src/decode.jl	/^const BASE64_CODE_PAD = 0x41$/;"	v
BASE64_DECODE	stdlib/Base64/src/decode.jl	/^const BASE64_DECODE = fill(BASE64_CODE_IGN, 256)$/;"	v
BASE64_ENCODE	stdlib/Base64/src/encode.jl	/^const BASE64_ENCODE = [UInt8(x) for x in ['A':'Z'; 'a':'z'; '0':'9'; '+'; '\/']]$/;"	v
BASE_SRCS	sysimage.mk	/^BASE_SRCS := $(sort $(shell find $(JULIAHOME)\/base -name \\*.jl -and -not -name sysimg.jl) \\$/;"	m
BASE_TEST_PATH	stdlib/LibGit2/test/libgit2.jl	/^const BASE_TEST_PATH = joinpath(Sys.BINDIR, "..", "share", "julia", "test")$/;"	v
BASE_TEST_PATH	stdlib/LinearAlgebra/test/adjtrans.jl	/^const BASE_TEST_PATH = joinpath(Sys.BINDIR, "..", "share", "julia", "test")$/;"	v
BASE_TEST_PATH	stdlib/LinearAlgebra/test/generic.jl	/^const BASE_TEST_PATH = joinpath(Sys.BINDIR, "..", "share", "julia", "test")$/;"	v
BASE_TEST_PATH	stdlib/LinearAlgebra/test/special.jl	/^const BASE_TEST_PATH = joinpath(Sys.BINDIR, "..", "share", "julia", "test")$/;"	v
BASE_TEST_PATH	stdlib/LinearAlgebra/test/triangular.jl	/^const BASE_TEST_PATH = joinpath(Sys.BINDIR, "..", "share", "julia", "test")$/;"	v
BASE_TEST_PATH	stdlib/LinearAlgebra/test/uniformscaling.jl	/^const BASE_TEST_PATH = joinpath(Sys.BINDIR, "..", "share", "julia", "test")$/;"	v
BASE_TEST_PATH	stdlib/REPL/test/repl.jl	/^const BASE_TEST_PATH = joinpath(Sys.BINDIR, "..", "share", "julia", "test")$/;"	v
BASE_TEST_PATH	stdlib/Random/test/runtests.jl	/^const BASE_TEST_PATH = joinpath(Sys.BINDIR, "..", "share", "julia", "test")$/;"	v
BASE_TEST_PATH	stdlib/SparseArrays/test/sparse.jl	/^const BASE_TEST_PATH = joinpath(Sys.BINDIR, "..", "share", "julia", "test")$/;"	v
BASE_TEST_PATH	stdlib/Statistics/test/runtests.jl	/^const BASE_TEST_PATH = joinpath(Sys.BINDIR, "..", "share", "julia", "test")$/;"	v
BBIdxIter	base/compiler/ssair/ir.jl	/^struct BBIdxIter$/;"	f
BBState	src/llvm-late-gc-lowering.cpp	/^struct BBState {$/;"	s	file:
BBStates	src/llvm-late-gc-lowering.cpp	/^    std::map<BasicBlock *, BBState> BBStates;$/;"	m	struct:State	typeref:typename:std::map<BasicBlock *,BBState>	file:
BB_TRIPLET	deps/tools/bb-install.mk	/^BB_TRIPLET := $(subst $(SPACE),-,$(filter-out cxx%,$(filter-out gcc%,$(subst -,$(SPACE),$(BB_TRI/;"	m
BB_TRIPLET_CXXABI	deps/tools/bb-install.mk	/^BB_TRIPLET_CXXABI := $(subst $(SPACE),-,$(filter-out gcc%,$(subst -,$(SPACE),$(BB_TRIPLET_GCCABI/;"	m
BB_TRIPLET_GCCABI	deps/tools/bb-install.mk	/^BB_TRIPLET_GCCABI := $(subst $(SPACE),-,$(filter-out cxx%,$(subst -,$(SPACE),$(BB_TRIPLET_GCCABI/;"	m
BB_TRIPLET_GCCABI_CXXABI	deps/tools/bb-install.mk	/^BB_TRIPLET_GCCABI_CXXABI := $(shell python $(JULIAHOME)\/contrib\/normalize_triplet.py $(or $(XC/;"	m
BIGNUMS	base/grisu/grisu.jl	/^const BIGNUMS = [Bignums.Bignum(),Bignums.Bignum(),Bignums.Bignum(),Bignums.Bignum()]$/;"	v
BIGNUMSs	base/grisu/grisu.jl	/^const BIGNUMSs = [BIGNUMS]$/;"	v
BIG_CONSTANT	src/support/MurmurHash3.c	/^#define BIG_CONSTANT(/;"	d	file:
BIG_ENDIAN	src/support/dtypes.h	/^#define BIG_ENDIAN /;"	d
BIG_MASK	base/ryu/utils.jl	/^const BIG_MASK = (big(1) << 64) - 1$/;"	v
BIG_STACKTRACE_SIZE	base/errorshow.jl	/^const BIG_STACKTRACE_SIZE = 50 # Arbitrary constant chosen here$/;"	v
BINDING_HEADS	base/docs/Docs.jl	/^const BINDING_HEADS = [:const, :global, :(=)]$/;"	v
BINFILE_INSTALL	deps/tools/common.mk	/^define BINFILE_INSTALL$/;"	m
BIT31	src/support/dtypes.h	/^#define BIT31 /;"	d
BIT63	src/support/dtypes.h	/^#define BIT63 /;"	d
BITS_PER_LIMB	base/gmp.jl	/^const BITS_PER_LIMB = bits_per_limb()$/;"	v
BLAME_FIRST_PARENT	stdlib/LibGit2/src/consts.jl	/^const BLAME_FIRST_PARENT                    = Cuint(1 << 4)$/;"	v
BLAME_NORMAL	stdlib/LibGit2/src/consts.jl	/^const BLAME_NORMAL                          = Cuint(0)$/;"	v
BLAME_TRACK_COPIES_ANY_COMMIT_COPIES	stdlib/LibGit2/src/consts.jl	/^const BLAME_TRACK_COPIES_ANY_COMMIT_COPIES  = Cuint(1 << 3)$/;"	v
BLAME_TRACK_COPIES_SAME_COMMIT_COPIES	stdlib/LibGit2/src/consts.jl	/^const BLAME_TRACK_COPIES_SAME_COMMIT_COPIES = Cuint(1 << 2)$/;"	v
BLAME_TRACK_COPIES_SAME_COMMIT_MOVES	stdlib/LibGit2/src/consts.jl	/^const BLAME_TRACK_COPIES_SAME_COMMIT_MOVES  = Cuint(1 << 1)$/;"	v
BLAME_TRACK_COPIES_SAME_FILE	stdlib/LibGit2/src/consts.jl	/^const BLAME_TRACK_COPIES_SAME_FILE          = Cuint(1 << 0)$/;"	v
BLAS	stdlib/LinearAlgebra/src/blas.jl	/^module BLAS$/;"	f
BLAS Functions	stdlib/LinearAlgebra/docs/src/index.md	/^## BLAS Functions$/;"	s
BLAS and LAPACK	doc/build/build.md	/^### BLAS and LAPACK$/;"	S
BLASParamErrorProcNULL	deps/gfortblas.c	/^void BLASParamErrorProcNULL($/;"	f	typeref:typename:void
BOM	src/dump.c	/^static const uint16_t BOM = 0xFEFF; \/\/ byte-order marker$/;"	v	typeref:typename:const uint16_t	file:
BOTTOM_TAG	stdlib/Serialization/src/Serialization.jl	/^const BOTTOM_TAG = sertag(Bottom)$/;"	v
BOUNDED_COMPARE_BOUND	src/flisp/equal.c	/^#define BOUNDED_COMPARE_BOUND /;"	d	file:
BOUNDED_HASH_BOUND	src/flisp/equal.c	/^#define BOUNDED_HASH_BOUND /;"	d	file:
BOX_F	src/intrinsics.cpp	/^#define BOX_F(/;"	d	file:
BOX_FUNC	src/datatype.c	/^#define BOX_FUNC(/;"	d	file:
BT	src/clangsa/GCChecker.cpp	/^        mutable std::unique_ptr<BugType> BT;$/;"	m	class:__anon9c5a21540111::GCChecker	typeref:typename:std::unique_ptr<BugType>	file:
BT	test/docs.jl	/^primitive type BT 8 end$/;"	f
BT2	test/docs.jl	/^primitive type BT2 <: Integer 8 end$/;"	f
BUGS	doc/man/julia.1	/^.SH BUGS$/;"	s	title:JULIA
BUILDDIR	base/Makefile	/^BUILDDIR := .$/;"	m
BUILDDIR	deps/Makefile	/^BUILDDIR := $(BUILDDIR)$(MAYBE_HOST)$/;"	m
BUILDDIR	deps/Makefile	/^BUILDDIR := .$/;"	m
BUILDDIR	deps/Makefile	/^BUILDDIR := scratch$/;"	m
BUILDDIR	src/Makefile	/^BUILDDIR := .$/;"	m
BUILDDIR	src/flisp/Makefile	/^BUILDDIR := .$/;"	m
BUILDDIR	src/support/Makefile	/^BUILDDIR := .$/;"	m
BUILDDIR	stdlib/Makefile	/^BUILDDIR := .$/;"	m
BUILDDIR	sysimage.mk	/^BUILDDIR := .$/;"	m
BUILDDIR	test/Makefile	/^BUILDDIR := .$/;"	m
BUILDDIR	ui/Makefile	/^BUILDDIR ?= .$/;"	m
BUILDDIRMAKE	Makefile	/^BUILDDIRMAKE := $(addsuffix \/Makefile,$(BUILDDIRS)) $(BUILDROOT)\/sysimage.mk$/;"	m
BUILDDIRS	Makefile	/^BUILDDIRS := $(BUILDROOT) $(addprefix $(BUILDROOT)\/,base src src\/flisp src\/support src\/clang/;"	m
BUILD_LLVM_CLANG	deps/llvm.mk	/^BUILD_LLVM_CLANG := 1$/;"	m
BUILT_UNWIND	deps/llvm.mk	/^BUILT_UNWIND := $(build_prefix)\/manifest\/osxunwind$/;"	m
BUILT_UNWIND	deps/llvm.mk	/^BUILT_UNWIND := $(build_prefix)\/manifest\/unwind$/;"	m
BUILT_UNWIND	deps/llvm.mk	/^BUILT_UNWIND :=$/;"	m
BULLETS	stdlib/Markdown/src/Common/block.jl	/^const BULLETS = r"^ {0,3}(\\*|\\+|-)( |$)"$/;"	v
BYTE_ORDER	src/support/dtypes.h	/^#define BYTE_ORDER /;"	d
B_15703	test/tuple.jl	/^struct B_15703$/;"	f
B_20087	test/docs.jl	/^struct B_20087 end$/;"	f
BackTraceTesting	test/backtrace.jl	/^module BackTraceTesting$/;"	f
Background	doc/src/devdocs/ssair.md	/^## Background$/;"	s
Background and References	doc/src/manual/integers-and-floating-point-numbers.md	/^### Background and References$/;"	S
Backporting commits	doc/build/distributing.md	/^## Backporting commits$/;"	s
BadRef	test/compiler/codegen.jl	/^    BadRef(x) = new(x)$/;"	f
BadRef	test/compiler/codegen.jl	/^mutable struct BadRef$/;"	f
BadVector20469	test/boundscheck_exec.jl	/^struct BadVector20469{T} <: AbstractVector{Int}$/;"	f
BandedMatrix	test/subtype.jl	/^struct BandedMatrix{T, CONTAINER, RAXIS} end$/;"	f
Bar	test/precompile.jl	/^              module Bar$/;"	f
Bar	test/project/deps/Bar/src/Bar.jl	/^module Bar$/;"	f
Bar11858	test/core.jl	/^    Bar11858(x::Float64) = new(x)$/;"	f
Bar11858	test/core.jl	/^mutable struct Bar11858$/;"	f
Bar17149	test/copy.jl	/^mutable struct Bar17149$/;"	f
Bar19668	test/compiler/inference.jl	/^        Bar19668(; x=true) = new(x)$/;"	f
Bar19668	test/compiler/inference.jl	/^    struct Bar19668$/;"	f
Bar19921	test/copy.jl	/^mutable struct Bar19921$/;"	f
Bar22256	test/core.jl	/^mutable struct Bar22256{AParameter}$/;"	f
Bar26028	test/precompile.jl	/^            module Bar26028$/;"	f
Bar29983	test/compiler/irpasses.jl	/^struct Bar29983{S}$/;"	f
Bar31062	test/core.jl	/^struct Bar31062$/;"	f
Bar4129	test/core.jl	/^abstract type Bar4129 end$/;"	f
Bar41291	test/core.jl	/^mutable struct Bar41291 <: Bar4129$/;"	f
Bar41292	test/core.jl	/^mutable struct Bar41292 <: Bar4129$/;"	f
Bar;	test/core.jl	/^struct Bar; val::Int64; end$/;"	f
Bar____	test/core.jl	/^mutable struct Bar____{K,V} <: Foo____{K} end$/;"	f
Base	base/iterators.jl	/^const Base = parentmodule(@__MODULE__)$/;"	v
Base	base/ordering.jl	/^const Base = parentmodule(@__MODULE__)$/;"	v
Base	base/sort.jl	/^const Base = parentmodule(@__MODULE__)$/;"	v
Base Submodules	doc/src/base/base.md	/^## Base Submodules$/;"	s
Base.:	stdlib/LibGit2/src/gitcredential.jl	/^Base.:(==)(c1::GitCredential, c2::GitCredential) = (c1.protocol, c1.host, c1.path, c1.username, /;"	f
Base.:	stdlib/LibGit2/src/gitcredential.jl	/^function Base.:(==)(a::GitCredentialHelper, b::GitCredentialHelper)$/;"	f
Base.:	stdlib/LibGit2/src/types.jl	/^function Base.:(==)(a::SSHCredential, b::SSHCredential)$/;"	f
Base.:	stdlib/LibGit2/src/types.jl	/^function Base.:(==)(a::UserPasswordCredential, b::UserPasswordCredential)$/;"	f
Base.:	stdlib/LinearAlgebra/src/factorization.jl	/^Base.:(==)(  F::T, G::T) where {T<:Factorization} = all(f -> getfield(F, f) == getfield(G, f), 1/;"	f
Base.:	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    Base.:(*)(a::A, x::Int) = B(a.x*x)$/;"	f
Base.:	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    Base.:(*)(a::D, b::D) = (a.n*b.n) \/ (a.d*b.d)$/;"	f
Base.:	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    Base.:(*)(a::D, b::Union{A,B,C}) = (a.n * b) \/ a.d$/;"	f
Base.:	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    Base.:(*)(a::Union{A,B,C}, b::D) = b * a$/;"	f
Base.:	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    Base.:(*)(a::Union{A,B,C}, b::Union{A,B,C}) = C(a.x*b.x)$/;"	f
Base.:	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    Base.:(*)(a::Union{A,B}, b::Union{A,B}) = B(a.x*b.x)$/;"	f
Base.:	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    Base.:(*)(x::Int, a::A) = B(x*a.x)$/;"	f
Base.:	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    Base.:(+)(a::D, b::D) = (a.n*b.d+a.d*b.n) \/ (a.d*b.d)$/;"	f
Base.:	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    Base.:(+)(a::D, b::Union{A,B,C}) = b + a$/;"	f
Base.:	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    Base.:(+)(a::Union{A,B,C}, b::D) = (a*b.d+b.n) \/ b.d$/;"	f
Base.:	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    Base.:(+)(a::Union{A,B,C}, b::Union{A,B,C}) = C(a.x+b.x)$/;"	f
Base.:	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    Base.:(-)(a::D) = (-a.n) \/ a.d$/;"	f
Base.:	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    Base.:(-)(a::Union{A,B,C,D}, b::Union{A,B,C,D}) = a + (-b)$/;"	f
Base.:	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    Base.:(-)(a::Union{A,B,C}) = typeof(a)(a.x)$/;"	f
Base.:	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    Base.:(-)(a::Union{A,B,C}, b::Union{A,B,C}) = C(a.x-b.x)$/;"	f
Base.:	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    Base.:(\/)(a::D, b::Union{A,B,C}) = a.n \/ (a.d*b)$/;"	f
Base.:	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    Base.:(\/)(a::Union{A,B,C,D}, b::D) = a * inv(b)$/;"	f
Base.:	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    Base.:(\/)(a::Union{A,B,C}, b::Union{A,B,C}) = D(a, b)$/;"	f
Base.:	stdlib/Random/src/DSFMT.jl	/^Base.:(==)(f::GF2X, g::GF2X) = f.z == g.z$/;"	f
Base.:	test/arrayops.jl	/^Base.:(==)(a::T11053, b::T11053) = a.a == b.a$/;"	f
Base.:	test/compiler/irpasses.jl	/^Base.:(+)(a::Foo30594, b::Foo30594) = add!(copy(a), b)$/;"	f
Base.:	test/hashing.jl	/^Base.:(==)(x::CustomHashReal, y::Number) = x.x == y$/;"	f
Base.:	test/hashing.jl	/^Base.:(==)(x::Number, y::CustomHashReal) = x == y.x$/;"	f
Base.:	test/operators.jl	/^Base.:(<)(x::TypeWrapper, y::TypeWrapper) = (x.t <: y.t) & (x.t != y.t)$/;"	f
Base.:	test/ranges.jl	/^Base.:(<)(x::Displacement, y::Displacement) = x.val < y.val$/;"	f
Base.:	test/ranges.jl	/^Base.:(<)(x::Position, y::Position) = x.val < y.val$/;"	f
Base.:	test/ranges.jl	/^Base.:(<=)(x::Position, y::Position) = x.val <= y.val$/;"	f
Base.:	test/sorting.jl	/^            Base.:(*)(n::Integer, a::T_30763{$T}) = T_30763{$T}(n * a.n)$/;"	f
Base.:	test/sorting.jl	/^            Base.:(+)(a::T_30763{$T}, b::T_30763{$T}) = T_30763{$T}(a.n + b.n)$/;"	f
Base.:	test/sorting.jl	/^            Base.:(-)(a::T_30763{$T}, b::T_30763{$T}) = T_30763{$T}(a.n - b.n)$/;"	f
Base.:	test/testhelpers/Quaternions.jl	/^Base.:(*)(q::Quaternion, b::Bool) = b * q # remove method ambiguity$/;"	f
Base.:	test/testhelpers/Quaternions.jl	/^Base.:(*)(q::Quaternion, r::Real) = Quaternion(q.s*r, q.v1*r, q.v2*r, q.v3*r)$/;"	f
Base.:	test/testhelpers/Quaternions.jl	/^Base.:(*)(q::Quaternion, w::Quaternion) = Quaternion(q.s*w.s - q.v1*w.v1 - q.v2*w.v2 - q.v3*w.v3/;"	f
Base.:	test/testhelpers/Quaternions.jl	/^Base.:(+)(ql::Quaternion, qr::Quaternion) =$/;"	f
Base.:	test/testhelpers/Quaternions.jl	/^Base.:(-)(ql::Quaternion, qr::Quaternion) =$/;"	f
Base.:	test/testhelpers/Quaternions.jl	/^Base.:(\/)(q::Quaternion, w::Quaternion) = q * conj(w) * (1.0 \/ abs2(w))$/;"	f
Base.:	test/testhelpers/Quaternions.jl	/^Base.:(\\)(q::Quaternion, w::Quaternion) = conj(q) * w * (1.0 \/ abs2(q))$/;"	f
Base.:*	stdlib/LinearAlgebra/test/generic.jl	/^Base.:*(a::ModInt{n}, b::ModInt{n}) where {n} = ModInt{n}(a.k * b.k)$/;"	f
Base.:*	stdlib/LinearAlgebra/test/matmul.jl	/^Base.:*(x::Float64, a::A32092) = x * a.x$/;"	f
Base.:*	test/arrayops.jl	/^Base.:*(a::T11053, b::Real) = T11053(a.a*b)$/;"	f
Base.:*	test/broadcast.jl	/^Base.:*(::T22053, ::T22053) = 2$/;"	f
Base.:*	test/testhelpers/PhysQuantities.jl	/^Base.:*(x::PhysQuantity{n,T}, y::Int) where {n,T} = PhysQuantity{n}(x.val*y)$/;"	f
Base.:*	test/testhelpers/PhysQuantities.jl	/^Base.:*(x::PhysQuantity{n1,S}, y::PhysQuantity{n2,T}) where {n1,n2,S,T} =$/;"	f
Base.:+	stdlib/LinearAlgebra/test/generic.jl	/^Base.:+(a::ModInt{n}, b::ModInt{n}) where {n} = ModInt{n}(a.k + b.k)$/;"	f
Base.:+	stdlib/LinearAlgebra/test/matmul.jl	/^Base.:+(x::Float64, a::A32092) = x + a.x$/;"	f
Base.:+	test/arrayops.jl	/^Base.:+(x::F, y::F) where {F <: F21666} = F(x.x + y.x)$/;"	f
Base.:+	test/compiler/irpasses.jl	/^Base.:+(a::Bar29983{S}, b::Bar29983{T}) where {T, S} = Bar29983(a.x + b.x)$/;"	f
Base.:+	test/compiler/irpasses.jl	/^Base.:+(a::Bar29983{S}, b::T) where {T, S} = b + a$/;"	f
Base.:+	test/compiler/irpasses.jl	/^Base.:+(a::Foo29983, b::Foo29983) = Foo29983((a.x[1] + b.x[1],))$/;"	f
Base.:+	test/compiler/irpasses.jl	/^Base.:+(a::T, b::Bar29983{S}) where {T, S} = Bar29983(a + b.x)$/;"	f
Base.:+	test/ranges.jl	/^Base.:+(x, y::NotReal) = x + y.val$/;"	f
Base.:+	test/ranges.jl	/^Base.:+(x::Displacement, y::Displacement) = Displacement(x.val + y.val)$/;"	f
Base.:+	test/ranges.jl	/^Base.:+(x::Position, y::Displacement) = Position(x.val + y.val)$/;"	f
Base.:-	stdlib/LinearAlgebra/test/generic.jl	/^Base.:-(a::ModInt{n}) where {n} = ModInt{n}(-a.k)$/;"	f
Base.:-	stdlib/LinearAlgebra/test/generic.jl	/^Base.:-(a::ModInt{n}, b::ModInt{n}) where {n} = ModInt{n}(a.k - b.k)$/;"	f
Base.:-	test/ranges.jl	/^Base.:-(x::Displacement) = Displacement(-x.val)$/;"	f
Base.:-	test/ranges.jl	/^Base.:-(x::Displacement, y::Displacement) = Displacement(x.val - y.val)$/;"	f
Base.:-	test/ranges.jl	/^Base.:-(x::Position, y::Displacement) = Position(x.val - y.val)$/;"	f
Base.:-	test/ranges.jl	/^Base.:-(x::Position, y::Position) = Displacement(x.val - y.val)$/;"	f
Base.:/	stdlib/LinearAlgebra/test/generic.jl	/^Base.:\/(a::ModInt{n}, b::ModInt{n}) where {n} = a*inv(b)$/;"	f
Base.:/	test/operators.jl	/^Base.:\/(::T19714, ::T19714) = T19714()$/;"	f
Base.:/	test/testhelpers/PhysQuantities.jl	/^Base.:\/(x::PhysQuantity{n,T}, y::Int) where {n,T} = PhysQuantity{n}(x.val\/y)$/;"	f
Base.:/	test/testhelpers/PhysQuantities.jl	/^Base.:\/(x::PhysQuantity{n1,S}, y::PhysQuantity{n2,T}) where {n1,n2,S,T} =$/;"	f
Base.:<	stdlib/LinearAlgebra/test/generic.jl	/^    Base.:<(a::ModInt{n}, b::ModInt{n}) where {n} = a.k < b.k$/;"	f
Base.:^	base/mathconstants.jl	/^    Base.:^(::Irrational{:ℯ}, x::T) = exp(x)$/;"	f
Base.:^	stdlib/LinearAlgebra/src/dense.jl	/^Base.:^(::Irrational{:ℯ}, A::AbstractMatrix) = exp(A)$/;"	f
Base.:^	stdlib/LinearAlgebra/src/dense.jl	/^Base.:^(b::Number, A::AbstractMatrix) = exp!(log(b)*A)$/;"	f
Base.:^	test/math.jl	/^Base.:^(x::Number, y::Float22716) = x^(y.x)$/;"	f
Base.ArithmeticStyle	stdlib/Dates/src/types.jl	/^Base.ArithmeticStyle(::Type{<:AbstractTime}) = Base.ArithmeticWraps()$/;"	f
Base.ArithmeticStyle	test/arrayops.jl	/^Base.ArithmeticStyle(::Type{F21666{T}}) where {T} = T()$/;"	f
Base.BigFloat	base/irrationals.jl	/^        function Base.BigFloat(::Irrational{$qsym}, r::MPFR.MPFRRoundingMode=MPFR.ROUNDING_MODE[/;"	f
Base.BigFloat	base/irrationals.jl	/^        function Base.BigFloat(::Irrational{$qsym}; precision=precision(BigFloat))$/;"	f
Base.Broadcast.broadcastable	stdlib/Dates/src/arithmetic.jl	/^Base.Broadcast.broadcastable(x::AbstractTime) = Ref(x)$/;"	f
Base.Broadcast.broadcastable	stdlib/Dates/src/arithmetic.jl	/^Base.Broadcast.broadcastable(x::TimeZone) = Ref(x)$/;"	f
Base.Broadcast.broadcastable	stdlib/Dates/src/io.jl	/^Base.Broadcast.broadcastable(x::DateFormat) = Ref(x)$/;"	f
Base.Broadcast.broadcastable	stdlib/Sockets/src/IPAddr.jl	/^Base.Broadcast.broadcastable(ip::IPAddr) = Ref(ip)$/;"	f
Base.Broadcast.broadcastable	test/broadcast.jl	/^Base.Broadcast.broadcastable(f::Foo26601) = f$/;"	f
Base.BroadcastStyle	base/broadcast.jl	/^    Base.BroadcastStyle(::Type{<:MyArray}) = MyArrayStyle()$/;"	f
Base.BroadcastStyle	base/broadcast.jl	/^    Base.BroadcastStyle(::Type{<:MyContainer}) = Broadcast.Style{MyContainer}()$/;"	f
Base.BroadcastStyle	base/broadcast.jl	/^    Base.BroadcastStyle(::Type{<:MyContainer}) = MyContainerStyle()$/;"	f
Base.BroadcastStyle	base/broadcast.jl	/^    Base.BroadcastStyle(::Type{<:SparseMatrixCSC}) = SparseMatrixStyle()$/;"	f
Base.BroadcastStyle	test/broadcast.jl	/^Base.BroadcastStyle(::Type{T}) where {T<:AD1B} = Broadcast.ArrayStyle{AD1B}()$/;"	f
Base.BroadcastStyle	test/broadcast.jl	/^Base.BroadcastStyle(::Type{T}) where {T<:AD1C} = Broadcast.ArrayStyle{AD1C}()$/;"	f
Base.BroadcastStyle	test/broadcast.jl	/^Base.BroadcastStyle(::Type{T}) where {T<:AD1P} = Broadcast.ArrayStyle{AD1P}()$/;"	f
Base.BroadcastStyle	test/broadcast.jl	/^Base.BroadcastStyle(::Type{T}) where {T<:AD1} = Broadcast.ArrayStyle{AD1}()$/;"	f
Base.BroadcastStyle	test/broadcast.jl	/^Base.BroadcastStyle(::Type{T}) where {T<:AD2B} = Broadcast.ArrayStyle{AD2B}()$/;"	f
Base.BroadcastStyle	test/broadcast.jl	/^Base.BroadcastStyle(::Type{T}) where {T<:AD2C} = Broadcast.ArrayStyle{AD2C}()$/;"	f
Base.BroadcastStyle	test/broadcast.jl	/^Base.BroadcastStyle(::Type{T}) where {T<:AD2Dim} = AD2DimStyle()$/;"	f
Base.BroadcastStyle	test/broadcast.jl	/^Base.BroadcastStyle(::Type{T}) where {T<:AD2P} = Broadcast.ArrayStyle{AD2P}()$/;"	f
Base.BroadcastStyle	test/broadcast.jl	/^Base.BroadcastStyle(::Type{T}) where {T<:AD2} = Broadcast.ArrayStyle{AD2}()$/;"	f
Base.BroadcastStyle	test/broadcast.jl	/^Base.BroadcastStyle(::Type{T}) where {T<:Array19745} = Broadcast.ArrayStyle{Array19745}()$/;"	f
Base.BroadcastStyle	test/broadcast.jl	/^Base.BroadcastStyle(a1::Broadcast.ArrayStyle{AD1B}, a2::Broadcast.ArrayStyle{AD2B}) = a1$/;"	f
Base.BroadcastStyle	test/broadcast.jl	/^Base.BroadcastStyle(a1::Broadcast.ArrayStyle{AD1C}, a2::Broadcast.ArrayStyle{AD2C}) = a1$/;"	f
Base.BroadcastStyle	test/broadcast.jl	/^Base.BroadcastStyle(a1::Broadcast.ArrayStyle{AD1P}, ::Broadcast.ArrayStyle{AD2P}) = a1$/;"	f
Base.BroadcastStyle	test/broadcast.jl	/^Base.BroadcastStyle(a2::Broadcast.ArrayStyle{AD2B}, a1::Broadcast.ArrayStyle{AD1B}) = a1$/;"	f
Base.BroadcastStyle	test/broadcast.jl	/^Base.BroadcastStyle(a2::Broadcast.ArrayStyle{AD2C}, a1::Broadcast.ArrayStyle{AD1C}) = a2$/;"	f
Base.Cartesian	doc/src/devdocs/cartesian.md	/^# Base.Cartesian$/;"	c
Base.Docs.catdoc	test/docs.jl	/^function Base.Docs.catdoc(hs::LazyHelp...)$/;"	f
Base.Docs.getdoc	test/docs.jl	/^Base.Docs.getdoc(d::DynamicDocType, sig) = "$(d.x) $(sig)"$/;"	f
Base.Float32	base/irrationals.jl	/^        Base.Float32(::Irrational{$qsym}) = $(Float32(val))$/;"	f
Base.Float64	base/irrationals.jl	/^        Base.Float64(::Irrational{$qsym}) = $val$/;"	f
Base.IndexStyle	base/experimental.jl	/^Base.IndexStyle(::Type{<:Const}) = IndexLinear()$/;"	f
Base.IndexStyle	base/indices.jl	/^    Base.IndexStyle(::Type{<:MyArray}) = IndexLinear()$/;"	f
Base.IndexStyle	base/multidimensional.jl	/^    Base.IndexStyle(::Type{CartesianIndices{N,R}}) where {N,R} = IndexCartesian()$/;"	f
Base.IndexStyle	stdlib/Test/src/Test.jl	/^Base.IndexStyle(::Type{<:GenericArray}) = IndexLinear()$/;"	f
Base.IndexStyle	test/abstractarray.jl	/^Base.IndexStyle(::Type{A}) where {A<:T24Linear} = IndexLinear()$/;"	f
Base.IndexStyle	test/abstractarray.jl	/^Base.IndexStyle(::Type{A}) where {A<:TSlowNIndexes} = Base.IndexCartesian()$/;"	f
Base.IndexStyle	test/abstractarray.jl	/^Base.IndexStyle(::Type{A}) where {A<:TSlow} = IndexCartesian()$/;"	f
Base.IndexStyle	test/abstractarray.jl	/^Base.IndexStyle(::UnimplementedFastArray) = Base.IndexLinear()$/;"	f
Base.IndexStyle	test/abstractarray.jl	/^Base.IndexStyle(::UnimplementedSlowArray) = Base.IndexCartesian()$/;"	f
Base.IndexStyle	test/arrayops.jl	/^Base.IndexStyle(::Type{A}) where {A<:LinSlowMatrix} = Base.IndexCartesian()$/;"	f
Base.IndexStyle	test/arrayops.jl	/^Base.IndexStyle(::Type{SquaresVector}) = Base.IndexLinear()$/;"	f
Base.IndexStyle	test/subarray.jl	/^    Base.IndexStyle(::Union{ImmutableTestArray, Type{ImmutableTestArray}}) = Base.IndexLinear()$/;"	f
Base.IndexStyle	test/testhelpers/OffsetArrays.jl	/^Base.IndexStyle(::Type{T}) where {T<:OffsetArray} = Base.IndexStyle(parenttype(T))$/;"	f
Base.IteratorEltype	base/broadcast.jl	/^Base.IteratorEltype(::Type{<:Broadcasted}) = Base.EltypeUnknown()$/;"	f
Base.IteratorSize	base/broadcast.jl	/^Base.IteratorSize(::Type{<:Broadcasted{<:Any,<:NTuple{N,Base.OneTo}}}) where {N} = Base.HasShape/;"	f
Base.IteratorSize	stdlib/LibGit2/src/config.jl	/^Base.IteratorSize(::Type{GitConfigIter}) = Base.SizeUnknown()$/;"	f
Base.IteratorSize	stdlib/LibGit2/src/reference.jl	/^Base.IteratorSize(::Type{GitBranchIter}) = Base.SizeUnknown()$/;"	f
Base.IteratorSize	stdlib/LibGit2/src/walker.jl	/^Base.IteratorSize(::Type{GitRevWalker}) = Base.SizeUnknown()$/;"	f
Base.IteratorSize	test/generic_map_tests.jl	/^Base.IteratorSize(::Type{GenericIterator{N}}) where {N} = Base.SizeUnknown()$/;"	f
Base.IteratorSize	test/sets.jl	/^Base.IteratorSize(::Type{<:OpenInterval}) = Base.SizeUnknown()$/;"	f
Base.LinearIndices	base/multidimensional.jl	/^    Base.LinearIndices(inds::CartesianIndices{N,R}) where {N,R} = LinearIndices{N,R}(inds.indice/;"	f
Base.OrderStyle	stdlib/Dates/src/types.jl	/^Base.OrderStyle(::Type{<:AbstractTime}) = Base.Ordered()$/;"	f
Base.PkgId	test/precompile.jl	/^                            Base.PkgId(Foo) => Base.PkgId(Foo2),$/;"	f
Base.PkgId	test/precompile.jl	/^                            Base.PkgId(Foo) => Base.PkgId(Test),$/;"	f
Base.PkgId	test/precompile.jl	/^                            Base.PkgId(Foo) => Base.PkgId(string(FooBase_module)) ]$/;"	f
Base.PkgId	test/precompile.jl	/^                     Base.PkgId(m) => Base.module_build_id(m)$/;"	f
Base.RangeStepStyle	base/traits.jl	/^Base.RangeStepStyle(::Type{<:AbstractRange{<:T}}) = Base.RangeStepRegular()$/;"	f
Base.RangeStepStyle	base/traits.jl	/^Base.RangeStepStyle(::Type{<:OrdinalRange{<:T, <:S}}) = Base.RangeStepRegular()$/;"	f
Base.RangeStepStyle	stdlib/Dates/src/ranges.jl	/^Base.RangeStepStyle(::Type{<:OrdinalRange{<:TimeType, <:FixedPeriod}}) =$/;"	f
Base.SimdLoop.simd_index	test/simdloop.jl	/^Base.SimdLoop.simd_index(v::iter31113, j, i) = j$/;"	f
Base.SimdLoop.simd_inner_length	test/simdloop.jl	/^Base.SimdLoop.simd_inner_length(v::iter31113, j) = 1$/;"	f
Base.SimdLoop.simd_outer_range	test/simdloop.jl	/^Base.SimdLoop.simd_outer_range(v::iter31113) = v$/;"	f
Base.Symbol	base/Enums.jl	/^Base.Symbol(x::Enum) = namemap(typeof(x))[Integer(x)]::Symbol$/;"	f
Base.Unsigned	test/ranges.jl	/^Base.Unsigned(x::Displacement) = Unsigned(x.val)$/;"	f
Base._cat	stdlib/SparseArrays/src/sparsevector.jl	/^Base._cat(dims, xs::_DenseConcatGroup...) = Base.cat_t(promote_eltype(xs...), xs...; dims=dims)$/;"	f
Base._cat	stdlib/SparseArrays/src/sparsevector.jl	/^Base._cat(dims, xs::_TypedDenseConcatGroup{T}...) where {T} = Base.cat_t(T, xs...; dims=dims)$/;"	f
Base._cat	stdlib/SparseArrays/src/sparsevector.jl	/^function Base._cat(dims, Xin::_SparseConcatGroup...)$/;"	f
Base._mapreduce	stdlib/SparseArrays/src/sparsematrix.jl	/^function Base._mapreduce(f, op, ::Base.IndexCartesian, A::AbstractSparseMatrixCSC{T}) where T$/;"	f
Base._mapreduce	stdlib/SparseArrays/src/sparsematrix.jl	/^function Base._mapreduce(f, op::typeof(*), A::AbstractSparseMatrixCSC{T}) where T$/;"	f
Base._mapreducedim!	stdlib/SparseArrays/src/sparsematrix.jl	/^function Base._mapreducedim!(f, op, R::AbstractArray, A::AbstractSparseMatrixCSC{T}) where T$/;"	f
Base._one	stdlib/SparseArrays/src/sparsematrix.jl	/^function Base._one(unit::T, S::AbstractSparseMatrixCSC) where T$/;"	f
Base._sum	stdlib/LinearAlgebra/src/bidiag.jl	/^Base._sum(A::Bidiagonal, ::Colon) = sum(A.dv) + sum(A.ev)$/;"	f
Base._sum	stdlib/LinearAlgebra/src/diagonal.jl	/^Base._sum(A::Diagonal, ::Colon) = sum(A.diag)$/;"	f
Base._sum	stdlib/LinearAlgebra/src/tridiag.jl	/^Base._sum(A::SymTridiagonal, ::Colon) = sum(A.dv) + 2sum(A.ev)$/;"	f
Base._sum	stdlib/LinearAlgebra/src/tridiag.jl	/^Base._sum(A::Tridiagonal, ::Colon) = sum(A.d) + sum(A.dl) + sum(A.du)$/;"	f
Base.abs	stdlib/Dates/src/periods.jl	/^Base.abs(a::T) where {T<:Period} = T(abs(value(a)))$/;"	f
Base.abs	stdlib/LinearAlgebra/test/generic.jl	/^    Base.abs(a::ModInt{n}) where {n} = a$/;"	f
Base.abs	test/testhelpers/Furlongs.jl	/^Base.abs(x::Furlong{p}) where {p} = Furlong{p}(abs(x.val))$/;"	f
Base.abs	test/testhelpers/Quaternions.jl	/^Base.abs(q::Quaternion) = sqrt(abs2(q))$/;"	f
Base.abs2	test/testhelpers/Furlongs.jl	/^@generated Base.abs2(x::Furlong{p}) where {p} = :(Furlong{$(canonical_p(2p))}(abs2(x.val)))$/;"	f
Base.abs2	test/testhelpers/Quaternions.jl	/^Base.abs2(q::Quaternion) = q.s*q.s + q.v1*q.v1 + q.v2*q.v2 + q.v3*q.v3$/;"	f
Base.add_with_overflow	base/gmp.jl	/^Base.add_with_overflow(a::BigInt, b::BigInt) = a + b, false$/;"	f
Base.adjoint	stdlib/LinearAlgebra/test/generic.jl	/^Base.adjoint(a::ModInt{n}) where {n} = ModInt{n}(conj(a))$/;"	f
Base.adjoint	stdlib/SuiteSparse/src/cholmod.jl	/^Base.adjoint(F::Factor) = Adjoint(F)$/;"	f
Base.adjoint	stdlib/SuiteSparse/src/umfpack.jl	/^Base.adjoint(F::UmfpackLU) = Adjoint(F)$/;"	f
Base.axes	base/broadcast.jl	/^@inline Base.axes(bc::Broadcasted) = _axes(bc, bc.axes)$/;"	f
Base.axes	base/experimental.jl	/^Base.axes(C::Const) = axes(C.a)$/;"	f
Base.axes	base/multidimensional.jl	/^    Base.axes(iter::CartesianIndices{N,R}) where {N,R} = map(Base.axes1, iter.indices)$/;"	f
Base.axes	base/permuteddimsarray.jl	/^Base.axes(A::PermutedDimsArray{T,N,perm}) where {T,N,perm} = genperm(axes(parent(A)), perm)$/;"	f
Base.axes	stdlib/SuiteSparse/src/spqr.jl	/^Base.axes(F::QRSparse) = map(Base.OneTo, size(F))$/;"	f
Base.axes	stdlib/SuiteSparse/src/spqr.jl	/^Base.axes(Q::QRSparseQ) = map(Base.OneTo, size(Q))$/;"	f
Base.axes	stdlib/Test/src/Test.jl	/^Base.axes(a::GenericArray) = axes(a.a)$/;"	f
Base.axes	test/broadcast.jl	/^Base.axes(f::Foo26601) = axes(f.data)$/;"	f
Base.axes	test/compiler/inference.jl	/^Base.axes(::Foo20518) = (Base.OneTo(4),)$/;"	f
Base.axes	test/testhelpers/OffsetArrays.jl	/^@inline Base.axes(A::OffsetArray) = _indices(axes(parent(A)), A.offsets)  # would rather use ntu/;"	f
Base.axes	test/testhelpers/OffsetArrays.jl	/^@inline Base.axes(A::OffsetArray, d) = 1 <= d <= length(A.offsets) ? Base.IdentityUnitRange(axes/;"	f
Base.axes1	test/testhelpers/OffsetArrays.jl	/^Base.axes1(A::OffsetArray{T,0}) where {T} = Base.IdentityUnitRange(1:1)  # we only need to speci/;"	f
Base.backtrace	base/stacktraces.jl	/^function Base.backtrace()$/;"	f
Base.broadcastable	base/Enums.jl	/^Base.broadcastable(x::Enum) = Ref(x)$/;"	f
Base.broadcastable	base/uuid.jl	/^Base.broadcastable(x::UUID) = Ref(x)$/;"	f
Base.cconvert	base/Enums.jl	/^Base.cconvert(::Type{T}, x::Enum{T2}) where {T<:Integer,T2<:Integer} = T(x)$/;"	f
Base.cconvert	base/libc.jl	/^    Base.cconvert(::Type{Ptr{Cvoid}}, fd::WindowsRawSocket) = bitcast(Ptr{Cvoid}, fd)$/;"	f
Base.cconvert	base/libc.jl	/^Base.cconvert(::Type{Cint}, fd::RawFD) = bitcast(Cint, fd)$/;"	f
Base.cconvert	stdlib/LibGit2/src/diff.jl	/^function Base.cconvert(::Type{Ptr{DiffOptionsStruct}}, pathspecs::AbstractString)$/;"	f
Base.cconvert	stdlib/LibGit2/src/strarray.jl	/^function Base.cconvert(::Type{Ptr{StrArrayStruct}}, x::Vector)$/;"	f
Base.cconvert	test/ccall.jl	/^Base.cconvert(::Type{SpillPint}, v::NTuple{2,Cint}) =$/;"	f
Base.cconvert	test/compiler/codegen.jl	/^Base.cconvert(::Type{Ptr{BadRef}}, a::MutableStruct) = BadRef(a)$/;"	f
Base.cconvert	test/compiler/codegen.jl	/^function Base.cconvert(::Type{Ref{PtrStruct}}, a::RealStruct)$/;"	f
Base.ceil	stdlib/Dates/src/rounding.jl	/^function Base.ceil(dt::TimeType, p::Period)$/;"	f
Base.ceil	stdlib/Dates/src/rounding.jl	/^function Base.ceil(x::ConvertiblePeriod, precision::ConvertiblePeriod)$/;"	f
Base.checkbounds	base/broadcast.jl	/^@inline Base.checkbounds(bc::Broadcasted, I::Union{Integer,CartesianIndex}) =$/;"	f
Base.checked_abs	base/gmp.jl	/^Base.checked_abs(x::BigInt) = abs(x)$/;"	f
Base.checked_add	base/gmp.jl	/^Base.checked_add(a::BigInt, b::BigInt) = a + b$/;"	f
Base.checked_cld	base/gmp.jl	/^Base.checked_cld(a::BigInt, b::BigInt) = cld(a, b)$/;"	f
Base.checked_div	base/gmp.jl	/^Base.checked_div(a::BigInt, b::BigInt) = div(a, b)$/;"	f
Base.checked_fld	base/gmp.jl	/^Base.checked_fld(a::BigInt, b::BigInt) = fld(a, b)$/;"	f
Base.checked_mod	base/gmp.jl	/^Base.checked_mod(a::BigInt, b::BigInt) = mod(a, b)$/;"	f
Base.checked_mul	base/gmp.jl	/^Base.checked_mul(a::BigInt, b::BigInt) = a * b$/;"	f
Base.checked_neg	base/gmp.jl	/^Base.checked_neg(x::BigInt) = -x$/;"	f
Base.checked_rem	base/gmp.jl	/^Base.checked_rem(a::BigInt, b::BigInt) = rem(a, b)$/;"	f
Base.checked_sub	base/gmp.jl	/^Base.checked_sub(a::BigInt, b::BigInt) = a - b$/;"	f
Base.close	base/libc.jl	/^Base.close(f::FILE) = systemerror("fclose", ccall(:fclose, Cint, (Ptr{Cvoid},), f.ptr) != 0)$/;"	f
Base.close	stdlib/Base64/src/decode.jl	/^Base.close(pipe::Base64DecodePipe) = nothing$/;"	f
Base.close	stdlib/Base64/src/encode.jl	/^function Base.close(pipe::Base64EncodePipe)$/;"	f
Base.close	stdlib/LibGit2/src/types.jl	/^    @eval function Base.close(obj::$typ)$/;"	f
Base.close	stdlib/LibGit2/src/types.jl	/^function Base.close(obj::GitSignature)$/;"	f
Base.cmp	stdlib/LibGit2/src/oid.jl	/^Base.cmp(id1::GitHash, id2::GitShortHash) = cmp(GitShortHash(id1, OID_HEXSZ), id2)$/;"	f
Base.cmp	stdlib/LibGit2/src/oid.jl	/^Base.cmp(id1::GitShortHash, id2::GitHash) = cmp(id1, GitShortHash(id2, OID_HEXSZ))$/;"	f
Base.cmp	stdlib/LibGit2/src/oid.jl	/^function Base.cmp(id1::GitHash, id2::GitHash)$/;"	f
Base.cmp	stdlib/LibGit2/src/oid.jl	/^function Base.cmp(id1::GitShortHash, id2::GitShortHash)$/;"	f
Base.codepoint	test/char.jl	/^Base.codepoint(c::ASCIIChar) = reinterpret(UInt8, c)$/;"	f
Base.codeunit	stdlib/Test/src/Test.jl	/^Base.codeunit(s::GenericString) = codeunit(s.string)$/;"	f
Base.codeunit	stdlib/Test/src/Test.jl	/^Base.codeunit(s::GenericString, i::Integer) = codeunit(s.string, i)$/;"	f
Base.collect	test/docs.jl	/^Base.collect(::Type{EmptyType{T}}) where {T} = "borked"$/;"	f
Base.conj	stdlib/LinearAlgebra/src/symmetric.jl	/^Base.conj(A::HermOrSym) = typeof(A)(conj(A.data), A.uplo)$/;"	f
Base.conj	stdlib/LinearAlgebra/test/generic.jl	/^Base.conj(a::ModInt{n}) where {n} = a$/;"	f
Base.conj	test/testhelpers/Quaternions.jl	/^Base.conj(q::Quaternion) = Quaternion(q.s, -q.v1, -q.v2, -q.v3)$/;"	f
Base.conj!	stdlib/LinearAlgebra/src/symmetric.jl	/^Base.conj!(A::HermOrSym) = typeof(A)(conj!(A.data), A.uplo)$/;"	f
Base.convert	base/broadcast.jl	/^Base.convert(::Type{Broadcasted{NewStyle}}, bc::Broadcasted{Style,Axes,F,Args}) where {NewStyle,/;"	f
Base.convert	stdlib/Dates/src/conversions.jl	/^Base.convert(::Type{DateTime}, dt::Date) = DateTime(UTM(value(dt) * 86400000))$/;"	f
Base.convert	stdlib/Dates/src/conversions.jl	/^Base.convert(::Type{DateTime},x::Millisecond)  = DateTime(Dates.UTInstant(x))  # Converts Rata D/;"	f
Base.convert	stdlib/Dates/src/conversions.jl	/^Base.convert(::Type{Date}, dt::DateTime) = Date(UTD(days(dt)))$/;"	f
Base.convert	stdlib/Dates/src/conversions.jl	/^Base.convert(::Type{Date},x::Day)  = Date(Dates.UTInstant(x))  # Converts Rata Die days to a Dat/;"	f
Base.convert	stdlib/Dates/src/conversions.jl	/^Base.convert(::Type{Day},dt::Date) = Day(value(dt))            # Converts Date to Rata Die days$/;"	f
Base.convert	stdlib/Dates/src/conversions.jl	/^Base.convert(::Type{Millisecond},dt::DateTime) = Millisecond(value(dt))        # Converts DateTi/;"	f
Base.convert	stdlib/Dates/src/conversions.jl	/^Base.convert(::Type{Time}, dt::DateTime) = Time(Nanosecond((value(dt) % 86400000) * 1000000))$/;"	f
Base.convert	stdlib/Dates/src/periods.jl	/^        @eval Base.convert(::Type{$T}, x::$Tc) = $T(divexact(value(x), $N))$/;"	f
Base.convert	stdlib/Dates/src/periods.jl	/^        @eval function Base.convert(::Type{$T}, x::$Tc)$/;"	f
Base.convert	stdlib/Dates/src/periods.jl	/^    @eval function Base.convert(::Type{Month}, x::Year)$/;"	f
Base.convert	stdlib/Dates/src/periods.jl	/^Base.convert(::Type{CompoundPeriod}, x::Period) = CompoundPeriod(Period[x])$/;"	f
Base.convert	stdlib/Dates/src/periods.jl	/^Base.convert(::Type{Year}, x::Month) = Year(divexact(value(x), 12))$/;"	f
Base.convert	stdlib/Dates/test/periods.jl	/^    Base.convert(::Type{T}, b::Beat) where {T<:Dates.Millisecond} = T(Dates.toms(b))$/;"	f
Base.convert	stdlib/LibGit2/src/signature.jl	/^function Base.convert(::Type{GitSignature}, sig::Signature)$/;"	f
Base.convert	stdlib/LibGit2/src/strarray.jl	/^function Base.convert(::Type{Vector{String}}, sa::StrArrayStruct)$/;"	f
Base.convert	stdlib/LinearAlgebra/test/matmul.jl	/^    Base.convert(::Type{TypeA}, x::Int) = TypeA(x)$/;"	f
Base.convert	stdlib/LinearAlgebra/test/matmul.jl	/^    Base.convert(::Type{TypeC}, x::Int) = TypeC(x)$/;"	f
Base.convert	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    Base.convert(::Type{A}, i::Int) = A(i)$/;"	f
Base.convert	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    Base.convert(::Type{D{NT, DT}}, a::Union{A, B, C}) where {NT, DT} = NT(a) \/ one(DT)$/;"	f
Base.convert	test/abstractarray.jl	/^    Base.convert(::Type{Array{T,n}}, a::Array) where {T<:Number,n} =$/;"	f
Base.convert	test/abstractarray.jl	/^    Base.convert(::Type{Array{T,n}}, a::Array{T,n}) where {T<:Number,n} = a$/;"	f
Base.convert	test/compiler/codegen.jl	/^Base.convert(::Type{Array{T,n}}, a::Array) where {T<:Number,n} =$/;"	f
Base.convert	test/core.jl	/^Base.convert(::Any, v::sparse_t31649) = copy(v.val)$/;"	f
Base.convert	test/core.jl	/^Base.convert(::Type{Foo11874},x::Int) = float(x)$/;"	f
Base.convert	test/core.jl	/^Base.convert(::Type{Int}, ::A1090) = "hey"$/;"	f
Base.convert	test/core.jl	/^Base.convert(::Type{Nothing},x::AbstractVector) = Vec8010(x)$/;"	f
Base.convert	test/core.jl	/^Base.convert(::Type{Vec8010{T}},x::AbstractVector) where {T} = Vec8010(x)$/;"	f
Base.convert	test/core.jl	/^Base.convert(::Type{type_1{T}}, x::S) where {T<:Number, S<:Number} = type_1(convert(T, x))$/;"	f
Base.convert	test/logging.jl	/^    Base.convert(::Type{LogLevel}, l::MyLevel) = LogLevel(l.level)$/;"	f
Base.convert	test/misc.jl	/^Base.convert(::Any, v::ambigconvert) = v$/;"	f
Base.convert	test/misc.jl	/^Base.convert(::Type{Array{S, N}}, ::DA_19281{T, N}) where {S,T,N} = error()$/;"	f
Base.convert	test/operators.jl	/^Base.convert(::Type{T19714}, ::Int) = T19714()$/;"	f
Base.convert	test/precompile.jl	/^              Base.convert(::Type{Ref}, ::Value18343{T}) where {T} = 3$/;"	f
Base.convert	test/precompile.jl	/^              Base.convert(::Type{Some{S}}, ::Value18343{Some}) where {S} = 2$/;"	f
Base.convert	test/precompile.jl	/^              Base.convert(::Type{Some{Value18343}}, ::Value18343{Some}) = 2$/;"	f
Base.convert	test/ranges.jl	/^Base.convert(::Type{Int}, x::Displacement) = x.val$/;"	f
Base.convert	test/reflection.jl	/^Base.convert(::Type{EmptyType}, x::Integer) = EmptyType()$/;"	f
Base.convert	test/sorting.jl	/^            Base.convert(::Type{T_30763{$T}}, n::Integer) = T_30763{$T}($T(n))$/;"	f
Base.convert	test/testhelpers/Quaternions.jl	/^Base.convert(::Type{Quaternion{T}}, s::Real) where {T <: Real} =$/;"	f
Base.copy	stdlib/LinearAlgebra/src/bidiag.jl	/^function Base.copy(aB::Adjoint{<:Any,<:Bidiagonal})$/;"	f
Base.copy	stdlib/LinearAlgebra/src/bidiag.jl	/^function Base.copy(tB::Transpose{<:Any,<:Bidiagonal})$/;"	f
Base.copy	stdlib/LinearAlgebra/src/bitarray.jl	/^Base.copy(B::Adjoint{Bool,BitMatrix}) = transpose!(falses(size(B)), B.parent)$/;"	f
Base.copy	stdlib/LinearAlgebra/src/bitarray.jl	/^Base.copy(B::Transpose{Bool,BitMatrix}) = transpose!(falses(size(B)), B.parent)$/;"	f
Base.copy	stdlib/LinearAlgebra/src/givens.jl	/^Base.copy(aR::Adjoint{<:Any,Rotation{T}}) where {T} = Rotation{T}(reverse!([r' for r in aR.paren/;"	f
Base.copy	stdlib/LinearAlgebra/src/givens.jl	/^function Base.copy(aG::Adjoint{<:Any,<:Givens})$/;"	f
Base.copy	stdlib/LinearAlgebra/src/hessenberg.jl	/^Base.copy(A::Adjoint{<:Any,<:UpperHessenberg}) = tril!(adjoint!(similar(A.parent.data), A.parent/;"	f
Base.copy	stdlib/LinearAlgebra/src/hessenberg.jl	/^Base.copy(A::Transpose{<:Any,<:UpperHessenberg}) = tril!(transpose!(similar(A.parent.data), A.pa/;"	f
Base.copy	stdlib/LinearAlgebra/src/lq.jl	/^Base.copy(F::Adjoint{T,<:LQ{T}}) where {T} =$/;"	f
Base.copy	stdlib/LinearAlgebra/src/symmetric.jl	/^Base.copy(A::Adjoint{<:Any,<:Hermitian}) = copy(A.parent)$/;"	f
Base.copy	stdlib/LinearAlgebra/src/symmetric.jl	/^Base.copy(A::Adjoint{<:Any,<:Symmetric}) =$/;"	f
Base.copy	stdlib/LinearAlgebra/src/symmetric.jl	/^Base.copy(A::Transpose{<:Any,<:Hermitian}) =$/;"	f
Base.copy	stdlib/LinearAlgebra/src/symmetric.jl	/^Base.copy(A::Transpose{<:Any,<:Symmetric}) = copy(A.parent)$/;"	f
Base.copy	stdlib/LinearAlgebra/src/transpose.jl	/^Base.copy(A::Adjoint{<:Any,<:AbstractMatrix}) = adjoint!(similar(A.parent, reverse(axes(A.parent/;"	f
Base.copy	stdlib/LinearAlgebra/src/transpose.jl	/^Base.copy(A::Transpose{<:Any,<:AbstractMatrix}) = transpose!(similar(A.parent, reverse(axes(A.pa/;"	f
Base.copy	stdlib/LinearAlgebra/src/triangular.jl	/^Base.copy(A::Adjoint{<:Any,<:LowerTriangular}) = adjoint!(copy(A.parent))$/;"	f
Base.copy	stdlib/LinearAlgebra/src/triangular.jl	/^Base.copy(A::Adjoint{<:Any,<:UnitLowerTriangular}) = adjoint!(copy(A.parent))$/;"	f
Base.copy	stdlib/LinearAlgebra/src/triangular.jl	/^Base.copy(A::Adjoint{<:Any,<:UnitUpperTriangular}) = adjoint!(copy(A.parent))$/;"	f
Base.copy	stdlib/LinearAlgebra/src/triangular.jl	/^Base.copy(A::Adjoint{<:Any,<:UpperTriangular}) = adjoint!(copy(A.parent))$/;"	f
Base.copy	stdlib/LinearAlgebra/src/triangular.jl	/^Base.copy(A::Transpose{<:Any,<:LowerTriangular}) = transpose!(copy(A.parent))$/;"	f
Base.copy	stdlib/LinearAlgebra/src/triangular.jl	/^Base.copy(A::Transpose{<:Any,<:UnitLowerTriangular}) = transpose!(copy(A.parent))$/;"	f
Base.copy	stdlib/LinearAlgebra/src/triangular.jl	/^Base.copy(A::Transpose{<:Any,<:UnitUpperTriangular}) = transpose!(copy(A.parent))$/;"	f
Base.copy	stdlib/LinearAlgebra/src/triangular.jl	/^Base.copy(A::Transpose{<:Any,<:UpperTriangular}) = transpose!(copy(A.parent))$/;"	f
Base.copy	stdlib/LinearAlgebra/src/tridiag.jl	/^Base.copy(S::Adjoint{<:Any,<:SymTridiagonal}) = SymTridiagonal(map(x -> copy.(adjoint.(x)), (S.p/;"	f
Base.copy	stdlib/LinearAlgebra/src/tridiag.jl	/^Base.copy(S::Transpose{<:Any,<:SymTridiagonal}) = SymTridiagonal(map(x -> copy.(transpose.(x)), /;"	f
Base.copy	stdlib/LinearAlgebra/src/tridiag.jl	/^Base.copy(aS::Adjoint{<:Any,<:Tridiagonal}) = (S = aS.parent; Tridiagonal(map(x -> copy.(adjoint/;"	f
Base.copy	stdlib/LinearAlgebra/src/tridiag.jl	/^Base.copy(tS::Transpose{<:Any,<:Tridiagonal}) = (S = tS.parent; Tridiagonal(map(x -> copy.(trans/;"	f
Base.copy	stdlib/Markdown/src/parse/parse.jl	/^Base.copy(md::MD) = MD(copy(md.content), copy(md.meta))$/;"	f
Base.copy	stdlib/Random/src/DSFMT.jl	/^Base.copy(f::GF2X) = GF2X(MPZ.set(f.z))$/;"	f
Base.copy	stdlib/SparseArrays/src/sparsematrix.jl	/^Base.copy(A::Adjoint{<:Any,<:AbstractSparseMatrixCSC}) = ftranspose(A.parent, x -> copy(adjoint(/;"	f
Base.copy	stdlib/SparseArrays/src/sparsematrix.jl	/^Base.copy(A::Transpose{<:Any,<:AbstractSparseMatrixCSC}) = ftranspose(A.parent, x -> copy(transp/;"	f
Base.copy	stdlib/SparseArrays/src/sparsevector.jl	/^Base.copy(a::SubArray{<:Any,<:Any,<:Union{SparseVector, AbstractSparseMatrixCSC}}) = a.parent[a./;"	f
Base.copy	test/broadcast.jl	/^function Base.copy(bc::Broadcast.Broadcasted{Broadcast.Style{T22053}})$/;"	f
Base.copy	test/compiler/irpasses.jl	/^Base.copy(x::Foo30594) = Foo30594(x.x)$/;"	f
Base.copy!	stdlib/LibGit2/src/gitcredential.jl	/^function Base.copy!(a::GitCredential, b::GitCredential)$/;"	f
Base.copyto!	base/permuteddimsarray.jl	/^Base.copyto!(dest::PermutedDimsArray, src::AbstractArray) = _copy!(dest, src)$/;"	f
Base.copyto!	base/permuteddimsarray.jl	/^function Base.copyto!(dest::PermutedDimsArray{T,N}, src::AbstractArray{T,N}) where {T,N}$/;"	f
Base.copyto!	stdlib/SuiteSparse/src/cholmod.jl	/^Base.copyto!(dest::AbstractArray, D::Dense) = _copy!(dest, D)$/;"	f
Base.copyto!	stdlib/SuiteSparse/src/cholmod.jl	/^Base.copyto!(dest::AbstractArray{T,2}, D::Dense{T}) where {T<:VTypes} = _copy!(dest, D)$/;"	f
Base.copyto!	stdlib/SuiteSparse/src/cholmod.jl	/^Base.copyto!(dest::AbstractArray{T}, D::Dense{T}) where {T<:VTypes} = _copy!(dest, D)$/;"	f
Base.copyto!	stdlib/SuiteSparse/src/cholmod.jl	/^Base.copyto!(dest::Base.PermutedDimsArrays.PermutedDimsArray, src::Dense) = _copy!(dest, src) # /;"	f
Base.copyto!	stdlib/SuiteSparse/src/cholmod.jl	/^Base.copyto!(dest::Dense{T}, D::Dense{T}) where {T<:VTypes} = _copy!(dest, D)$/;"	f
Base.dataids	stdlib/LinearAlgebra/src/adjtrans.jl	/^Base.dataids(A::Union{Adjoint, Transpose}) = Base.dataids(A.parent)$/;"	f
Base.dataids	stdlib/SparseArrays/src/sparsematrix.jl	/^Base.dataids(S::AbstractSparseMatrixCSC) = (dataids(getcolptr(S))..., dataids(rowvals(S))..., da/;"	f
Base.dataids	stdlib/SparseArrays/src/sparsevector.jl	/^Base.dataids(S::SparseVector) = (dataids(nonzeroinds(S))..., dataids(nonzeros(S))...)$/;"	f
Base.deepcopy_internal	base/gmp.jl	/^function Base.deepcopy_internal(x::BigInt, stackdict::IdDict)$/;"	f
Base.deepcopy_internal	base/mpfr.jl	/^function Base.deepcopy_internal(x::BigFloat, stackdict::IdDict)$/;"	f
Base.deleteat!	test/testhelpers/OffsetArrays.jl	/^@inline function Base.deleteat!(A::OffsetArray, i::Int)$/;"	f
Base.deleteat!	test/testhelpers/OffsetArrays.jl	/^@inline function Base.deleteat!(A::OffsetArray, i::UnitRange{Int})$/;"	f
Base.deleteat!	test/testhelpers/OffsetArrays.jl	/^@inline function Base.deleteat!(A::OffsetArray{T,N}, I::Vararg{Int, N}) where {T,N}$/;"	f
Base.displaysize	stdlib/REPL/src/Terminals.jl	/^Base.displaysize(t::UnixTerminal) = displaysize(t.out_stream)$/;"	f
Base.div	test/ranges.jl	/^Base.div(x::Displacement, y::Displacement) = Displacement(div(x.val, y.val))$/;"	f
Base.eachindex	base/broadcast.jl	/^@inline Base.eachindex(bc::Broadcasted) = _eachindex(axes(bc))$/;"	f
Base.eachindex	test/testhelpers/OffsetArrays.jl	/^Base.eachindex(::IndexCartesian, A::OffsetArray) = CartesianIndices(axes(A))$/;"	f
Base.eachindex	test/testhelpers/OffsetArrays.jl	/^Base.eachindex(::IndexLinear, A::OffsetVector) = axes(A, 1)$/;"	f
Base.elsize	stdlib/Random/src/RNGs.jl	/^Base.elsize(::UnsafeView{T}) where {T} = sizeof(T)$/;"	f
Base.eltype	test/simdloop.jl	/^Base.eltype(it::iter31113) = eltype(it.parent)$/;"	f
Base.empty!	stdlib/Base64/src/buffer.jl	/^Base.empty!(buffer::Buffer) = buffer.size = 0$/;"	f
Base.eof	stdlib/Base64/src/decode.jl	/^Base.eof(pipe::Base64DecodePipe) = isempty(pipe.rest) && eof(pipe.io)$/;"	f
Base.eps	stdlib/Dates/src/types.jl	/^Base.eps(dt::Date) = Day(1)$/;"	f
Base.eps	stdlib/Dates/src/types.jl	/^Base.eps(dt::DateTime) = Millisecond(1)$/;"	f
Base.eps	stdlib/Dates/src/types.jl	/^Base.eps(t::Time) = Nanosecond(1)$/;"	f
Base.falses	test/testhelpers/OffsetArrays.jl	/^Base.falses(inds::NTuple{N, Union{Integer, AbstractUnitRange}}) where {N} =$/;"	f
Base.fill	test/testhelpers/OffsetArrays.jl	/^Base.fill(v, inds::NTuple{N, Union{Integer, AbstractUnitRange}}) where {N} =$/;"	f
Base.fill!	base/broadcast.jl	/^function Base.fill!(B::BitMaskedBitArray, b::Bool)$/;"	f
Base.fill!	stdlib/SparseArrays/src/sparsematrix.jl	/^function Base.fill!(V::SubArray{Tv, <:Any, <:AbstractSparseMatrixCSC, Tuple{Vararg{Union{Integer/;"	f
Base.findall	stdlib/LibGit2/src/index.jl	/^function Base.findall(path::String, idx::GitIndex)$/;"	f
Base.first	base/show.jl	/^    Base.first(r::Compiler.StmtRange) = Compiler.first(r)$/;"	f
Base.firstindex	stdlib/Base64/src/buffer.jl	/^Base.firstindex(buffer::Buffer) = 1$/;"	f
Base.firstindex	stdlib/Markdown/src/parse/parse.jl	/^Base.firstindex(md::MD) = firstindex(md.content)$/;"	f
Base.float	test/operators.jl	/^Base.float(::T19714) = 19714.0$/;"	f
Base.floor	stdlib/Dates/src/rounding.jl	/^Base.floor(dt::DateTime, p::DatePeriod) = DateTime(Base.floor(Date(dt), p))$/;"	f
Base.floor	stdlib/Dates/src/rounding.jl	/^function Base.floor(dt::Date, p::Day)$/;"	f
Base.floor	stdlib/Dates/src/rounding.jl	/^function Base.floor(dt::Date, p::Month)$/;"	f
Base.floor	stdlib/Dates/src/rounding.jl	/^function Base.floor(dt::Date, p::Week)$/;"	f
Base.floor	stdlib/Dates/src/rounding.jl	/^function Base.floor(dt::Date, p::Year)$/;"	f
Base.floor	stdlib/Dates/src/rounding.jl	/^function Base.floor(dt::DateTime, p::TimePeriod)$/;"	f
Base.floor	stdlib/Dates/src/rounding.jl	/^function Base.floor(x::ConvertiblePeriod, precision::T) where T <: ConvertiblePeriod$/;"	f
Base.gcdx	stdlib/Dates/src/periods.jl	/^Base.gcdx(a::T, b::T) where {T<:Period} = ((g, x, y) = gcdx(value(a), value(b)); return T(g), x,/;"	f
Base.get	base/multidimensional.jl	/^    Base.get(A::AbstractArray, I::CartesianIndex, default) = get(A, I.I, default)$/;"	f
Base.get	stdlib/REPL/src/Terminals.jl	/^Base.get(t::TTYTerminal, key, default) = get(pipe_writer(t), key, default)$/;"	f
Base.get	stdlib/Test/src/Test.jl	/^Base.get(s::GenericDict, x, y) = get(s.s, x, y)$/;"	f
Base.get!	stdlib/LibGit2/src/types.jl	/^Base.get!(cache::CachedCredentials, cred_id, default) = Base.get!(cache.cred, cred_id, default)$/;"	f
Base.getindex	base/broadcast.jl	/^@inline function Base.getindex(bc::Broadcasted, I::Union{Integer,CartesianIndex})$/;"	f
Base.getindex	base/broadcast.jl	/^Base.@propagate_inbounds Base.getindex(bc::Broadcasted) = bc[CartesianIndex(())]$/;"	f
Base.getindex	base/broadcast.jl	/^Base.@propagate_inbounds Base.getindex(bc::Broadcasted, i1::Integer, i2::Integer, I::Integer...)/;"	f
Base.getindex	base/experimental.jl	/^@eval Base.getindex(A::Const, i1::Int) =$/;"	f
Base.getindex	base/experimental.jl	/^@eval Base.getindex(A::Const, i1::Int, i2::Int, I::Int...) =$/;"	f
Base.getindex	base/multidimensional.jl	/^    @inline function Base.getindex(iter::CartesianIndices{N,<:NTuple{N,Base.OneTo}}, I::Vararg{I/;"	f
Base.getindex	base/multidimensional.jl	/^    @inline function Base.getindex(iter::CartesianIndices{N,R}, I::Vararg{Int, N}) where {N,R}$/;"	f
Base.getindex	base/permuteddimsarray.jl	/^@inline function Base.getindex(A::PermutedDimsArray{T,N,perm,iperm}, I::Vararg{Int,N}) where {T,/;"	f
Base.getindex	base/show.jl	/^    Base.getindex(r::Compiler.StmtRange, ind::Integer) = Compiler.getindex(r, ind)$/;"	f
Base.getindex	stdlib/Base64/src/buffer.jl	/^Base.getindex(buffer::Buffer, i::Integer) = unsafe_load(buffer.ptr, i)$/;"	f
Base.getindex	stdlib/InteractiveUtils/test/runtests.jl	/^Base.getindex(A::Stable, i) = A.A[i]$/;"	f
Base.getindex	stdlib/InteractiveUtils/test/runtests.jl	/^Base.getindex(A::Unstable, i) = A.A[i]$/;"	f
Base.getindex	stdlib/LibGit2/src/blame.jl	/^function Base.getindex(blame::GitBlame, i::Integer)$/;"	f
Base.getindex	stdlib/LibGit2/src/diff.jl	/^function Base.getindex(diff::GitDiff, i::Integer)$/;"	f
Base.getindex	stdlib/LibGit2/src/index.jl	/^function Base.getindex(idx::GitIndex, i::Integer)$/;"	f
Base.getindex	stdlib/LibGit2/src/rebase.jl	/^function Base.getindex(rb::GitRebase, i::Integer)$/;"	f
Base.getindex	stdlib/LibGit2/src/status.jl	/^function Base.getindex(status::GitStatus, i::Integer)$/;"	f
Base.getindex	stdlib/LibGit2/src/tree.jl	/^function Base.getindex(tree::GitTree, i::Integer)$/;"	f
Base.getindex	stdlib/LibGit2/src/tree.jl	/^function Base.getindex(tree::GitTree, target::AbstractString)$/;"	f
Base.getindex	stdlib/LibGit2/src/types.jl	/^Base.getindex(cache::CachedCredentials, cred_id) = Base.getindex(cache.cred, cred_id)$/;"	f
Base.getindex	stdlib/LinearAlgebra/test/blas.jl	/^Base.getindex(A::WrappedArray, i::Int) = A.A[i]$/;"	f
Base.getindex	stdlib/LinearAlgebra/test/blas.jl	/^Base.getindex(A::WrappedArray{T, N}, I::Vararg{Int, N}) where {T, N} = A.A[I...]$/;"	f
Base.getindex	stdlib/LinearAlgebra/test/matmul.jl	/^    Base.getindex(A::MyArray, indices...) = A.data[indices...]$/;"	f
Base.getindex	stdlib/Markdown/src/parse/parse.jl	/^Base.getindex(md::MD, args...) = md.content[args...]$/;"	f
Base.getindex	stdlib/REPL/src/Terminals.jl	/^Base.getindex(t::TTYTerminal, key) = getindex(pipe_writer(t), key)$/;"	f
Base.getindex	stdlib/Random/src/RNGs.jl	/^Base.getindex(a::UnsafeView, i::Int) = unsafe_load(a.ptr, i)$/;"	f
Base.getindex	stdlib/Random/src/Random.jl	/^Base.getindex(::SamplerType{T}) where {T} = T$/;"	f
Base.getindex	stdlib/Random/src/Random.jl	/^Base.getindex(sp::SamplerSimple) = sp.self$/;"	f
Base.getindex	stdlib/Random/src/Random.jl	/^Base.getindex(sp::SamplerTrivial) = sp.self$/;"	f
Base.getindex	stdlib/Serialization/test/runtests.jl	/^Base.getindex(A::ArrayWrapper, i::Real...) = getindex(A.data, i...)$/;"	f
Base.getindex	stdlib/SparseArrays/src/sparsevector.jl	/^function Base.getindex(A::AbstractSparseMatrixCSC{Tv,Ti}, i::Integer, J::AbstractVector) where {/;"	f
Base.getindex	stdlib/Test/src/Test.jl	/^Base.getindex(a::GenericArray, i::Int) = a.a[i]$/;"	f
Base.getindex	stdlib/Test/test/runtests.jl	/^Base.getindex(a::SillyArray, i) = rand() > 0.5 ? 0 : false$/;"	f
Base.getindex	test/abstractarray.jl	/^Base.getindex(A::T24Linear, i::Int) = getfield(A, i)$/;"	f
Base.getindex	test/abstractarray.jl	/^Base.getindex(A::TSlowNIndexes, index::Int...) = error("Must use $(ndims(A)) indices")$/;"	f
Base.getindex	test/abstractarray.jl	/^Base.getindex(A::TSlowNIndexes{T,2}, i::Int, j::Int) where {T} = A.data[i,j]$/;"	f
Base.getindex	test/abstractarray.jl	/^Base.getindex(A::TSlow{T,0}) where {T} = get(A.data, (), zero(T))$/;"	f
Base.getindex	test/abstractarray.jl	/^Base.getindex(A::TSlow{T,1}, i1::Int) where {T} = get(A.data, (i1,), zero(T))$/;"	f
Base.getindex	test/abstractarray.jl	/^Base.getindex(A::TSlow{T,2}, i1::Int, i2::Int) where {T} = get(A.data, (i1,i2), zero(T))$/;"	f
Base.getindex	test/abstractarray.jl	/^Base.getindex(A::TSlow{T,3}, i1::Int, i2::Int, i3::Int) where {T} =$/;"	f
Base.getindex	test/abstractarray.jl	/^Base.getindex(A::TSlow{T,4}, i1::Int, i2::Int, i3::Int, i4::Int) where {T} =$/;"	f
Base.getindex	test/abstractarray.jl	/^Base.getindex(A::TSlow{T,5}, i1::Int, i2::Int, i3::Int, i4::Int, i5::Int) where {T} =$/;"	f
Base.getindex	test/arrayops.jl	/^Base.getindex(::T25958, args...) = args$/;"	f
Base.getindex	test/arrayops.jl	/^Base.getindex(::V26163, ::Int) = 0$/;"	f
Base.getindex	test/arrayops.jl	/^Base.getindex(::Z26163) = 0$/;"	f
Base.getindex	test/arrayops.jl	/^Base.getindex(A::LinSlowMatrix, i::Integer) = error("Not defined")$/;"	f
Base.getindex	test/arrayops.jl	/^Base.getindex(A::LinSlowMatrix, i::Integer, j::Integer) = A.data[i,j]$/;"	f
Base.getindex	test/arrayops.jl	/^Base.getindex(S::SquaresVector, i::Int) = i*i$/;"	f
Base.getindex	test/boundscheck_exec.jl	/^Base.getindex(X::BadVector20469, i::Int) = X.data[i-1]$/;"	f
Base.getindex	test/broadcast.jl	/^Base.getindex(A::ArrayData, i::Integer...) = A.data[i...]$/;"	f
Base.getindex	test/broadcast.jl	/^Base.getindex(f::Foo26601, i...) = getindex(f.data, i...)$/;"	f
Base.getindex	test/compiler/codegen.jl	/^@eval Base.getindex(A::Const, i1::Int) = Core.const_arrayref($(Expr(:boundscheck)), A.a, i1)$/;"	f
Base.getindex	test/compiler/codegen.jl	/^@eval Base.getindex(A::Const, i1::Int, i2::Int, I::Int...) =  (Base.@_inline_meta; Core.const_ar/;"	f
Base.getindex	test/compiler/inference.jl	/^Base.getindex(::Foo20518, ::Int) = "oops"      # not to lie about their element type$/;"	f
Base.getindex	test/compiler/inline.jl	/^@inline Base.getindex(v::s21074, i::Integer) = v.x[i]$/;"	f
Base.getindex	test/dict.jl	/^        Base.getindex(td::TestDict, args...) = getindex(td.dict, args...)$/;"	f
Base.getindex	test/errorshow.jl	/^Base.getindex(b::Bounded, i) = checkindex(Bool, 1:b.bound, i) || throw(BoundsError(b, i))$/;"	f
Base.getindex	test/sorting.jl	/^Base.getindex(r::ConstantRange, i::Int) = (1 <= i <= r.len || throw(BoundsError(r,i)); r.val)$/;"	f
Base.getindex	test/testhelpers/OffsetArrays.jl	/^@inline function Base.getindex(A::OffsetArray, i::Int)$/;"	f
Base.getindex	test/testhelpers/OffsetArrays.jl	/^@inline function Base.getindex(A::OffsetArray{T,N}, I::Vararg{Int,N}) where {T,N}$/;"	f
Base.getindex	test/testhelpers/OffsetArrays.jl	/^@inline function Base.getindex(A::OffsetVector, i::Int)$/;"	f
Base.getproperty	stdlib/InteractiveUtils/test/runtests.jl	/^Base.getproperty(t::T1234321, ::Symbol) = "foo"$/;"	f
Base.getproperty	stdlib/SparseArrays/test/forbidproperties.jl	/^Base.getproperty(S::SparseMatrixCSC, ::Symbol) = error("use accessor function")$/;"	f
Base.getproperty	stdlib/SparseArrays/test/forbidproperties.jl	/^Base.getproperty(S::SparseVector, ::Symbol) = error("use accessor function")$/;"	f
Base.getproperty	stdlib/SuiteSparse/src/spqr.jl	/^@inline function Base.getproperty(F::QRSparse, d::Symbol)$/;"	f
Base.getproperty	test/core.jl	/^    @eval function Base.getproperty(x::S29761, sym::Symbol)$/;"	f
Base.getproperty	test/core.jl	/^function Base.getproperty(mstrct::TestMutable, p::Symbol)$/;"	f
Base.has_offset_axes	stdlib/LinearAlgebra/src/uniformscaling.jl	/^Base.has_offset_axes(::UniformScaling) = false$/;"	f
Base.hash	base/multidimensional.jl	/^    function Base.hash(ci::CartesianIndex, h::UInt)$/;"	f
Base.hash	stdlib/Dates/src/periods.jl	/^Base.hash(x::FixedPeriod, h::UInt) = hash(tons(x), h + fixedperiod_seed)$/;"	f
Base.hash	stdlib/Dates/src/periods.jl	/^Base.hash(x::Month, h::UInt) = hash(value(x), h + otherperiod_seed)$/;"	f
Base.hash	stdlib/Dates/src/periods.jl	/^Base.hash(x::Year, h::UInt) = hash(12 * value(x), h + otherperiod_seed)$/;"	f
Base.hash	stdlib/Dates/src/types.jl	/^Base.hash(x::Time, h::UInt) =$/;"	f
Base.hash	stdlib/LibGit2/src/gitcredential.jl	/^Base.hash(cred::GitCredential, h::UInt) = hash(GitCredential, hash((cred.protocol, cred.host, cr/;"	f
Base.hash	stdlib/LibGit2/src/oid.jl	/^Base.hash(id::GitHash, h::UInt) = hash(id.val, h)$/;"	f
Base.hash	stdlib/LinearAlgebra/src/factorization.jl	/^Base.hash(F::Factorization, h::UInt) = mapreduce(f -> hash(getfield(F, f)), hash, 1:nfields(F); /;"	f
Base.hash	test/arrayops.jl	/^Base.hash(::HashCollision, h::UInt) = h$/;"	f
Base.hash	test/arrayops.jl	/^Base.hash(::totally_not_five26034, h::UInt)=hash(5, h);$/;"	f
Base.hash	test/dict.jl	/^Base.hash(s::MyString) = hash(s.str) + hashoffset[]$/;"	f
Base.hash	test/dict.jl	/^Base.hash(v::MyInt) = v.val + hashoffset[]$/;"	f
Base.hash	test/hashing.jl	/^Base.hash(x::CustomHashReal, h::UInt) = hash(x.x, h)$/;"	f
Base.haskey	stdlib/LibGit2/src/types.jl	/^Base.haskey(cache::CachedCredentials, cred_id) = Base.haskey(cache.cred, cred_id)$/;"	f
Base.haskey	stdlib/REPL/src/Terminals.jl	/^Base.haskey(t::TTYTerminal, key) = haskey(pipe_writer(t), key)$/;"	f
Base.in	stdlib/REPL/src/Terminals.jl	/^Base.in(key_value::Pair, t::TTYTerminal) = in(key_value, pipe_writer(t))$/;"	f
Base.in	test/sets.jl	/^Base.in(x, i::OpenInterval) = i.lower < x < i.upper$/;"	f
Base.instances	base/Enums.jl	/^            Base.instances(::Type{$(esc(typename))}) = insts$/;"	f
Base.inv	stdlib/LinearAlgebra/test/generic.jl	/^Base.inv(a::ModInt{n}) where {n} = ModInt{n}(invmod(a.k, n))$/;"	f
Base.inv	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    Base.inv(a::D) = a.d \/ a.n$/;"	f
Base.inv	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    Base.inv(a::Union{A,B,C}) = A(1) \/ a$/;"	f
Base.inv	test/testhelpers/Furlongs.jl	/^@generated Base.inv(x::Furlong{p}) where {p} = :(Furlong{$(canonical_p(-p))}(inv(x.val)))$/;"	f
Base.isempty	stdlib/LibGit2/src/types.jl	/^Base.isempty(obj::AbstractGitObject) = (obj.ptr == C_NULL)$/;"	f
Base.isempty	stdlib/Markdown/src/parse/parse.jl	/^Base.isempty(md::MD) = isempty(md.content)$/;"	f
Base.isempty	stdlib/REPL/src/LineEdit.jl	/^Base.isempty(s::PromptState) = s.input_buffer.size == 0$/;"	f
Base.isequal	stdlib/Dates/src/periods.jl	/^Base.isequal(x::CompoundPeriod, y::CompoundPeriod) = isequal(x.periods, y.periods)$/;"	f
Base.isequal	stdlib/Dates/src/periods.jl	/^Base.isequal(x::CompoundPeriod, y::Period) = isequal(x, CompoundPeriod(y))$/;"	f
Base.isequal	stdlib/Dates/src/periods.jl	/^Base.isequal(x::Period, y::CompoundPeriod) = isequal(y, x)$/;"	f
Base.isequal	stdlib/LinearAlgebra/src/factorization.jl	/^Base.isequal(F::T, G::T) where {T<:Factorization} = all(f -> isequal(getfield(F, f), getfield(G,/;"	f
Base.isequal	test/arrayops.jl	/^Base.isequal(::totally_not_five26034, ::totally_not_five26034)=true;$/;"	f
Base.isequal	test/arrayops.jl	/^Base.isequal(::totally_not_five26034, x::Number)=isequal(5,x);$/;"	f
Base.isequal	test/arrayops.jl	/^Base.isequal(x::Number, ::totally_not_five26034)=isequal(5,x);$/;"	f
Base.isequal	test/dict.jl	/^Base.isequal(a::MyInt, b::MyInt) = isequal(a.val, b.val)$/;"	f
Base.isequal	test/dict.jl	/^Base.isequal(a::MyString, b::MyString) = isequal(a.str, b.str)$/;"	f
Base.isequal	test/operators.jl	/^Base.isequal(a::TO23094, b::TO23094) = isequal(a.x, b.x)$/;"	f
Base.isfinite	stdlib/Dates/src/types.jl	/^Base.isfinite(::Union{Type{T}, T}) where {T<:TimeType} = true$/;"	f
Base.isfinite	test/testhelpers/Quaternions.jl	/^Base.isfinite(q::Quaternion) = isfinite(q.s) & isfinite(q.v1) & isfinite(q.v2) & isfinite(q.v3)$/;"	f
Base.isless	base/Enums.jl	/^Base.isless(x::T, y::T) where {T<:Enum} = isless(basetype(T)(x), basetype(T)(y))$/;"	f
Base.isless	stdlib/Dates/src/periods.jl	/^Base.isless(x::FixedPeriod, y::OtherPeriod) = throw(MethodError(isless, (x, y)))$/;"	f
Base.isless	stdlib/Dates/src/periods.jl	/^Base.isless(x::OtherPeriod, y::FixedPeriod) = throw(MethodError(isless, (x, y)))$/;"	f
Base.isless	stdlib/Dates/src/periods.jl	/^Base.isless(x::P, y::P) where {P<:Period} = isless(value(x), value(y))$/;"	f
Base.isless	stdlib/Dates/src/periods.jl	/^Base.isless(x::Period, y::Period) = isless(promote(x, y)...)$/;"	f
Base.isless	stdlib/Dates/src/types.jl	/^Base.isless(x::T, y::T) where {T<:TimeType} = isless(value(x), value(y))$/;"	f
Base.isless	stdlib/Dates/src/types.jl	/^Base.isless(x::TimeType, y::TimeType) = isless(promote(x, y)...)$/;"	f
Base.isless	stdlib/LibGit2/src/oid.jl	/^Base.isless(id1::AbstractGitHash, id2::AbstractGitHash)  = cmp(id1, id2) < 0$/;"	f
Base.isless	stdlib/Sockets/src/IPAddr.jl	/^Base.isless(a::T, b::T) where {T<:IPAddr} = isless(a.host, b.host)$/;"	f
Base.isless	stdlib/SparseArrays/test/sparse.jl	/^Base.isless(x::CustomType, y::CustomType) = isless(x.x, y.x)$/;"	f
Base.isless	stdlib/Test/src/Test.jl	/^Base.isless(x::GenericOrder, y::GenericOrder) = isless(x.val,y.val)$/;"	f
Base.isless	test/operators.jl	/^Base.isless(a::TO23094, b::TO23094) = isless(a.x, b.x)$/;"	f
Base.isless	test/ranges.jl	/^Base.isless(x, y::NotReal) = isless(x, y.val)$/;"	f
Base.isless	test/sorting.jl	/^            Base.isless(a::T_30763{$T}, b::T_30763{$T}) = isless(a.n, b.n)$/;"	f
Base.isless	test/sorting.jl	/^Base.isless(x :: Twain, y :: Twain) = x.a < y.a$/;"	f
Base.isone	stdlib/SparseArrays/src/sparsematrix.jl	/^function Base.isone(A::AbstractSparseMatrixCSC)$/;"	f
Base.isopen	stdlib/Mmap/src/Mmap.jl	/^Base.isopen(::Anonymous) = true$/;"	f
Base.isreadable	stdlib/Mmap/src/Mmap.jl	/^Base.isreadable(::Anonymous) = true$/;"	f
Base.isreal	stdlib/LinearAlgebra/src/symmetric.jl	/^function Base.isreal(A::HermOrSym)$/;"	f
Base.isvalid	stdlib/Test/src/Test.jl	/^Base.isvalid(s::GenericString, i::Integer) = isvalid(s.string, i)$/;"	f
Base.isvalid	test/parse.jl	/^Base.isvalid(::Issue29451String, i::Integer) = i == 1$/;"	f
Base.iswritable	stdlib/Mmap/src/Mmap.jl	/^Base.iswritable(a::Anonymous) = !a.readonly$/;"	f
Base.iszero	base/float.jl	/^Base.iszero(x::Float16) = reinterpret(UInt16, x) & ~sign_mask(Float16) == 0x0000$/;"	f
Base.iszero	stdlib/SparseArrays/src/sparsematrix.jl	/^Base.iszero(A::AbstractSparseMatrixCSC) = iszero(nzvalview(A))$/;"	f
Base.iszero	test/testhelpers/Furlongs.jl	/^Base.iszero(x::Furlong) = iszero(x.val)$/;"	f
Base.iterate	base/broadcast.jl	/^Base.@propagate_inbounds function Base.iterate(bc::Broadcasted, s)$/;"	f
Base.iterate	base/broadcast.jl	/^function Base.iterate(bc::Broadcasted)$/;"	f
Base.iterate	base/dict.jl	/^@propagate_inbounds function Base.iterate(v::T, i::Int = v.dict.idxfloor) where T <: Union{KeySe/;"	f
Base.iterate	base/multidimensional.jl	/^    Base.iterate(::CartesianIndex) =$/;"	f
Base.iterate	stdlib/Dates/src/ranges.jl	/^Base.iterate(r::StepRange{<:TimeType}) = length(r) <= 0 ? nothing : (r.start, (length(r), 1))$/;"	f
Base.iterate	stdlib/Dates/src/ranges.jl	/^Base.iterate(r::StepRange{<:TimeType}, (l, i)) = l <= i ? nothing : (r.start + r.step * i, (l, i/;"	f
Base.iterate	stdlib/LibGit2/src/config.jl	/^function Base.iterate(ci::GitConfigIter, state=nothing)$/;"	f
Base.iterate	stdlib/LibGit2/src/rebase.jl	/^function Base.iterate(rb::GitRebase, state=nothing)$/;"	f
Base.iterate	stdlib/LibGit2/src/reference.jl	/^function Base.iterate(bi::GitBranchIter, state=nothing)$/;"	f
Base.iterate	stdlib/LibGit2/src/walker.jl	/^function Base.iterate(w::GitRevWalker, state=nothing)$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/bunchkaufman.jl	/^Base.iterate(S::BunchKaufman) = (S.D, Val(:UL))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/bunchkaufman.jl	/^Base.iterate(S::BunchKaufman, ::Val{:UL}) = (S.uplo == 'L' ? S.L : S.U, Val(:p))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/bunchkaufman.jl	/^Base.iterate(S::BunchKaufman, ::Val{:done}) = nothing$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/bunchkaufman.jl	/^Base.iterate(S::BunchKaufman, ::Val{:p}) = (S.p, Val(:done))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/eigen.jl	/^Base.iterate(S::Union{Eigen,GeneralizedEigen}) = (S.values, Val(:vectors))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/eigen.jl	/^Base.iterate(S::Union{Eigen,GeneralizedEigen}, ::Val{:done}) = nothing$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/eigen.jl	/^Base.iterate(S::Union{Eigen,GeneralizedEigen}, ::Val{:vectors}) = (S.vectors, Val(:done))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/hessenberg.jl	/^Base.iterate(S::Hessenberg) = (S.Q, Val(:H))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/hessenberg.jl	/^Base.iterate(S::Hessenberg, ::Val{:H}) = (S.H, Val(:μ))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/hessenberg.jl	/^Base.iterate(S::Hessenberg, ::Val{:done}) = nothing$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/hessenberg.jl	/^Base.iterate(S::Hessenberg, ::Val{:μ}) = (S.μ, Val(:done))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/lq.jl	/^Base.iterate(S::LQ) = (S.L, Val(:Q))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/lq.jl	/^Base.iterate(S::LQ, ::Val{:Q}) = (S.Q, Val(:done))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/lq.jl	/^Base.iterate(S::LQ, ::Val{:done}) = nothing$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/lu.jl	/^Base.iterate(S::LU) = (S.L, Val(:U))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/lu.jl	/^Base.iterate(S::LU, ::Val{:U}) = (S.U, Val(:p))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/lu.jl	/^Base.iterate(S::LU, ::Val{:done}) = nothing$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/lu.jl	/^Base.iterate(S::LU, ::Val{:p}) = (S.p, Val(:done))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/qr.jl	/^Base.iterate(S::QR) = (S.Q, Val(:R))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/qr.jl	/^Base.iterate(S::QR, ::Val{:R}) = (S.R, Val(:done))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/qr.jl	/^Base.iterate(S::QR, ::Val{:done}) = nothing$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/qr.jl	/^Base.iterate(S::QRCompactWY) = (S.Q, Val(:R))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/qr.jl	/^Base.iterate(S::QRCompactWY, ::Val{:R}) = (S.R, Val(:done))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/qr.jl	/^Base.iterate(S::QRCompactWY, ::Val{:done}) = nothing$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/qr.jl	/^Base.iterate(S::QRPivoted) = (S.Q, Val(:R))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/qr.jl	/^Base.iterate(S::QRPivoted, ::Val{:R}) = (S.R, Val(:p))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/qr.jl	/^Base.iterate(S::QRPivoted, ::Val{:done}) = nothing$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/qr.jl	/^Base.iterate(S::QRPivoted, ::Val{:p}) = (S.p, Val(:done))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/schur.jl	/^Base.iterate(S::GeneralizedSchur) = (S.S, Val(:T))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/schur.jl	/^Base.iterate(S::GeneralizedSchur, ::Val{:Q}) = (S.Q, Val(:Z))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/schur.jl	/^Base.iterate(S::GeneralizedSchur, ::Val{:T}) = (S.T, Val(:Q))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/schur.jl	/^Base.iterate(S::GeneralizedSchur, ::Val{:Z}) = (S.Z, Val(:α))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/schur.jl	/^Base.iterate(S::GeneralizedSchur, ::Val{:done}) = nothing$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/schur.jl	/^Base.iterate(S::GeneralizedSchur, ::Val{:α}) = (S.α, Val(:β))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/schur.jl	/^Base.iterate(S::GeneralizedSchur, ::Val{:β}) = (S.β, Val(:done))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/schur.jl	/^Base.iterate(S::Schur) = (S.T, Val(:Z))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/schur.jl	/^Base.iterate(S::Schur, ::Val{:Z}) = (S.Z, Val(:values))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/schur.jl	/^Base.iterate(S::Schur, ::Val{:done}) = nothing$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/schur.jl	/^Base.iterate(S::Schur, ::Val{:values}) = (S.values, Val(:done))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/svd.jl	/^Base.iterate(S::GeneralizedSVD) = (S.U, Val(:V))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/svd.jl	/^Base.iterate(S::GeneralizedSVD, ::Val{:D1}) = (S.D1, Val(:D2))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/svd.jl	/^Base.iterate(S::GeneralizedSVD, ::Val{:D2}) = (S.D2, Val(:R0))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/svd.jl	/^Base.iterate(S::GeneralizedSVD, ::Val{:Q}) = (S.Q, Val(:D1))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/svd.jl	/^Base.iterate(S::GeneralizedSVD, ::Val{:R0}) = (S.R0, Val(:done))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/svd.jl	/^Base.iterate(S::GeneralizedSVD, ::Val{:V}) = (S.V, Val(:Q))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/svd.jl	/^Base.iterate(S::GeneralizedSVD, ::Val{:done}) = nothing$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/svd.jl	/^Base.iterate(S::SVD) = (S.U, Val(:S))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/svd.jl	/^Base.iterate(S::SVD, ::Val{:S}) = (S.S, Val(:V))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/svd.jl	/^Base.iterate(S::SVD, ::Val{:V}) = (S.V, Val(:done))$/;"	f
Base.iterate	stdlib/LinearAlgebra/src/svd.jl	/^Base.iterate(S::SVD, ::Val{:done}) = nothing$/;"	f
Base.iterate	stdlib/Test/src/Test.jl	/^        Base.iterate(s::$G, state...) = iterate(s.s, state...)$/;"	f
Base.iterate	stdlib/Test/src/Test.jl	/^Base.iterate(s::GenericString, i::Integer=1) = iterate(s.string, i)$/;"	f
Base.iterate	test/compiler/inference.jl	/^Base.iterate(::Iterator27434, ::Any) = nothing$/;"	f
Base.iterate	test/compiler/inference.jl	/^Base.iterate(i::Iterator27434) = i.x, Val(1)$/;"	f
Base.iterate	test/compiler/inference.jl	/^Base.iterate(i::Iterator27434, ::Val{1}) = i.y, Val(2)$/;"	f
Base.iterate	test/compiler/inference.jl	/^Base.iterate(i::Iterator27434, ::Val{2}) = i.z, Val(3)$/;"	f
Base.iterate	test/core.jl	/^Base.iterate(::Iter27594) = (1, nothing)$/;"	f
Base.iterate	test/core.jl	/^Base.iterate(::Iter27594, ::Any) = nothing$/;"	f
Base.iterate	test/dict.jl	/^Base.iterate(s::MyString, v::Int=1) = iterate(s.str, v)$/;"	f
Base.iterate	test/dict.jl	/^Base.iterate(v::MyInt, i...) = iterate(v.val, i...)$/;"	f
Base.iterate	test/generic_map_tests.jl	/^Base.iterate(::GenericIterator{N}, i=1) where {N} = i > N ? nothing : (i, i + 1)$/;"	f
Base.iterate	test/parse.jl	/^Base.iterate(::Issue29451String, i::Integer=1) = i == 1 ? ('0', 2) : nothing$/;"	f
Base.iterate	test/simdloop.jl	/^Base.iterate(it::iter31113, args...) = iterate(it.parent, args...)$/;"	f
Base.iterate	test/strings/basic.jl	/^Base.iterate(x::CharStr) = iterate(x.chars)$/;"	f
Base.iterate	test/strings/basic.jl	/^Base.iterate(x::CharStr, i::Int) = iterate(x.chars, i)$/;"	f
Base.keys	stdlib/REPL/test/replcompletions.jl	/^        Base.keys(d::CustomDict) = collect(keys(d.mydict))$/;"	f
Base.keys	stdlib/Test/src/Test.jl	/^Base.keys(a::GenericArray) = keys(a.a)$/;"	f
Base.last	base/show.jl	/^    Base.last(r::Compiler.StmtRange) = Compiler.last(r)$/;"	f
Base.lastindex	stdlib/Base64/src/buffer.jl	/^Base.lastindex(buffer::Buffer) = buffer.size$/;"	f
Base.lastindex	stdlib/Markdown/src/parse/parse.jl	/^Base.lastindex(md::MD) = lastindex(md.content)$/;"	f
Base.lastindex	test/arrayops.jl	/^Base.lastindex(::T25958, args...) = (:lastindex, args...)$/;"	f
Base.lastindex	test/dict.jl	/^Base.lastindex(s::MyString) = lastindex(s.str)$/;"	f
Base.lastindex	test/dict.jl	/^Base.lastindex(v::MyInt) = lastindex(v.val)$/;"	f
Base.lastindex	test/parse.jl	/^Base.lastindex(::Issue29451String) = 1$/;"	f
Base.lastindex	test/strings/basic.jl	/^Base.lastindex(x::CharStr) = lastindex(x.chars)$/;"	f
Base.length	base/broadcast.jl	/^Base.length(bc::Broadcasted) = prod(size(bc))$/;"	f
Base.length	stdlib/Dates/src/ranges.jl	/^Base.length(r::StepRange{<:Period}) = length(StepRange(value(r.start), value(r.step), value(r.st/;"	f
Base.length	stdlib/Dates/src/ranges.jl	/^Base.length(r::StepRange{<:TimeType}) = isempty(r) ? Int64(0) : len(r.start, r.stop, r.step) + 1$/;"	f
Base.length	stdlib/LibGit2/src/blob.jl	/^function Base.length(blob::GitBlob)$/;"	f
Base.length	stdlib/LibGit2/src/status.jl	/^function Base.length(status::GitStatus)$/;"	f
Base.length	stdlib/Markdown/src/parse/parse.jl	/^Base.length(md::MD) = length(md.content)$/;"	f
Base.length	stdlib/REPL/test/replcompletions.jl	/^        Base.length(d::CustomDict) = length(d.mydict)$/;"	f
Base.length	stdlib/Random/src/RNGs.jl	/^Base.length(a::UnsafeView) = a.len$/;"	f
Base.length	stdlib/Test/src/Test.jl	/^Base.length(a::GenericArray) = length(a.a)$/;"	f
Base.length	test/abstractarray.jl	/^    Base.length(::TestThrowNoGetindex) = 2$/;"	f
Base.length	test/sorting.jl	/^            Base.length(r::StepRange{T_30763{$T},T_30763{$T}}) = $T((last(r).n - first(r).n) ÷ /;"	f
Base.length	test/sorting.jl	/^Base.length(r::ConstantRange) = r.len$/;"	f
Base.lerpi	base/mpfr.jl	/^function Base.lerpi(j::Integer, d::Integer, a::BigFloat, b::BigFloat)$/;"	f
Base.literal_pow	base/mathconstants.jl	/^Base.literal_pow(::typeof(^), ::Irrational{:ℯ}, ::Val{p}) where {p} = exp(p)$/;"	f
Base.literal_pow	stdlib/LinearAlgebra/src/generic.jl	/^@inline Base.literal_pow(::typeof(^), A::AbstractMatrix, ::Val{-1}) = inv(A)$/;"	f
Base.literal_pow	test/numbers.jl	/^Base.literal_pow(::typeof(^), ::PR20530, ::Val{p}) where {p} = 2$/;"	f
Base.log	base/mathconstants.jl	/^Base.log(::Irrational{:ℯ}) = 1 # use 1 to correctly promote expressions like log(x)\/log(ℯ)$/;"	f
Base.log	base/mathconstants.jl	/^Base.log(::Irrational{:ℯ}, x::Number) = log(x)$/;"	f
Base.max	stdlib/Dates/src/types.jl	/^Base.max(x::AbstractTime) = x$/;"	f
Base.merge	test/compiler/inference.jl	/^Base.merge(f, d::MixedKeyDict, others::MixedKeyDict...) = _merge(f, (), d.dicts, (d->d.dicts).(o/;"	f
Base.merge	test/compiler/inference.jl	/^Base.merge(f::Function, d::MixedKeyDict, others::MixedKeyDict...) = _merge(f, (), d.dicts, (d->d/;"	f
Base.min	stdlib/Dates/src/types.jl	/^Base.min(x::AbstractTime) = x$/;"	f
Base.minmax	stdlib/Dates/src/types.jl	/^Base.minmax(x::AbstractTime) = (x, x)$/;"	f
Base.mul_with_overflow	base/gmp.jl	/^Base.mul_with_overflow(a::BigInt, b::BigInt) = a * b, false$/;"	f
Base.ncodeunits	stdlib/Test/src/Test.jl	/^Base.ncodeunits(s::GenericString) = ncodeunits(s.string)$/;"	f
Base.ncodeunits	test/parse.jl	/^Base.ncodeunits(::Issue29451String) = 12345$/;"	f
Base.ndims	base/broadcast.jl	/^Base.ndims(::Broadcasted{<:Any,<:NTuple{N,Any}}) where {N} = N$/;"	f
Base.ndims	base/broadcast.jl	/^Base.ndims(::Type{<:Broadcasted{<:Any,<:NTuple{N,Any}}}) where {N} = N$/;"	f
Base.ndims	test/broadcast.jl	/^Base.ndims(::Type{Foo26601{T}}) where {T} = ndims(T)$/;"	f
Base.nextind	base/multidimensional.jl	/^    function Base.nextind(a::AbstractArray{<:Any,N}, i::CartesianIndex{N}) where {N}$/;"	f
Base.nothing	test/precompile.jl	/^              Base.nothing(::UInt8, ::UInt16, ::UInt32; x = 52) = x$/;"	f
Base.one	stdlib/Dates/src/periods.jl	/^Base.one(::Union{Type{P},P}) where {P<:Period} = 1  # see #16116$/;"	f
Base.one	stdlib/LinearAlgebra/test/generic.jl	/^Base.one(::ModInt{n}) where {n} = ModInt{n}(1)$/;"	f
Base.one	stdlib/LinearAlgebra/test/generic.jl	/^Base.one(::Type{ModInt{n}}) where {n} = ModInt{n}(1)$/;"	f
Base.one	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    Base.one(::Union{A, Type{A}}) = A(1)$/;"	f
Base.one	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    Base.one(::Union{C, Type{C}}) = C(1)$/;"	f
Base.one	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    Base.one(::Union{D{NT, DT}, Type{D{NT, DT}}}) where {NT, DT} = one(NT) \/ one(DT)$/;"	f
Base.one	test/missing.jl	/^Base.one(::Type{Unit}) = 1$/;"	f
Base.one	test/testhelpers/Furlongs.jl	/^Base.one(::Type{Furlong{p,T}}) where {p,T} = one(T)$/;"	f
Base.one	test/testhelpers/Furlongs.jl	/^Base.one(x::Furlong{p,T}) where {p,T} = one(T)$/;"	f
Base.ones	test/testhelpers/OffsetArrays.jl	/^Base.ones(::Type{T}, inds::NTuple{N, Union{Integer, AbstractUnitRange}}) where {T, N} =$/;"	f
Base.oneunit	test/testhelpers/Furlongs.jl	/^Base.oneunit(x::Furlong{p,T}) where {p,T} = Furlong{p,T}(one(T))$/;"	f
Base.oneunit	test/testhelpers/Furlongs.jl	/^Base.oneunit(x::Type{Furlong{p,T}}) where {p,T} = Furlong{p,T}(one(T))$/;"	f
Base.pairs	test/dict.jl	/^        Base.pairs(D::TestDict) = pairs(D.dict)$/;"	f
Base.parent	base/permuteddimsarray.jl	/^Base.parent(A::PermutedDimsArray) = A.parent$/;"	f
Base.parent	test/testhelpers/OffsetArrays.jl	/^Base.parent(A::OffsetArray) = A.parent$/;"	f
Base.parse	stdlib/Dates/src/parse.jl	/^function Base.parse(::Type{DateTime}, s::AbstractString, df::typeof(ISODateTimeFormat))$/;"	f
Base.parse	stdlib/Dates/src/parse.jl	/^function Base.parse(::Type{T}, str::AbstractString, df::DateFormat=default_format(T)) where T<:T/;"	f
Base.parse	stdlib/LibGit2/src/gitcredential.jl	/^function Base.parse(::Type{GitCredentialHelper}, helper::AbstractString)$/;"	f
Base.parse	stdlib/LibGit2/src/gitcredential.jl	/^function Base.parse(::Type{GitCredential}, url::AbstractString)$/;"	f
Base.peek	stdlib/REPL/src/Terminals.jl	/^Base.peek(t::TTYTerminal) = Base.peek(t.in_stream)$/;"	f
Base.permutedims	stdlib/SparseArrays/src/sparsematrix.jl	/^function Base.permutedims(A::AbstractSparseMatrixCSC, (a,b))$/;"	f
Base.pointer	base/permuteddimsarray.jl	/^Base.pointer(A::PermutedDimsArray, i::Integer) = throw(ArgumentError("pointer(A, i) is deliberat/;"	f
Base.pointer	stdlib/Base64/src/buffer.jl	/^Base.pointer(buffer::Buffer) = buffer.ptr$/;"	f
Base.pointer	stdlib/Random/src/RNGs.jl	/^Base.pointer(a::UnsafeView) = a.ptr$/;"	f
Base.pointer	stdlib/SuiteSparse/src/cholmod.jl	/^Base.pointer(x::Dense{Tv}) where {Tv}  = Base.unsafe_convert(Ptr{C_Dense{Tv}}, x)$/;"	f
Base.pointer	stdlib/SuiteSparse/src/cholmod.jl	/^Base.pointer(x::Factor{Tv}) where {Tv} = Base.unsafe_convert(Ptr{C_Factor{Tv}}, x)$/;"	f
Base.pointer	stdlib/SuiteSparse/src/cholmod.jl	/^Base.pointer(x::Sparse{Tv}) where {Tv} = Base.unsafe_convert(Ptr{C_Sparse{Tv}}, x)$/;"	f
Base.position	base/libc.jl	/^Base.position(h::FILE) = ccall(:ftell, Clong, (Ptr{Cvoid},), h.ptr)$/;"	f
Base.prevind	base/multidimensional.jl	/^    function Base.prevind(a::AbstractArray{<:Any,N}, i::CartesianIndex{N}) where {N}$/;"	f
Base.print	base/Enums.jl	/^Base.print(io::IO, x::Enum) = print(io, Symbol(x))$/;"	f
Base.print	stdlib/Dates/src/io.jl	/^Base.print(io::IO, t::Time) = print(io, string(t))$/;"	f
Base.print	stdlib/Dates/src/io.jl	/^function Base.print(io::IO, dt::Date)$/;"	f
Base.print	stdlib/Dates/src/io.jl	/^function Base.print(io::IO, dt::DateTime)$/;"	f
Base.print	stdlib/Dates/src/periods.jl	/^Base.print(io::IO, p::Period) = print(io, value(p), _units(p))$/;"	f
Base.print	stdlib/LibGit2/src/oid.jl	/^function Base.print(io::IO, id::GitHash)$/;"	f
Base.promote_rule	stdlib/Dates/src/periods.jl	/^        @eval Base.promote_rule(::Type{$T}, ::Type{$Tc}) = $Tc$/;"	f
Base.promote_rule	stdlib/Dates/src/periods.jl	/^Base.promote_rule(::Type{Year}, ::Type{Month}) = Month$/;"	f
Base.promote_rule	stdlib/Dates/src/types.jl	/^Base.promote_rule(::Type{Date}, x::Type{DateTime}) = DateTime$/;"	f
Base.promote_rule	stdlib/Dates/test/periods.jl	/^    Base.promote_rule(::Type{Dates.Day}, ::Type{Beat}) = Dates.Millisecond$/;"	f
Base.promote_rule	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    Base.promote_rule(::Type{A}, ::Type{B}) = B$/;"	f
Base.promote_rule	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    Base.promote_rule(::Type{A}, ::Type{C}) = C$/;"	f
Base.promote_rule	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    Base.promote_rule(::Type{B}, ::Type{A}) = B$/;"	f
Base.promote_rule	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    Base.promote_rule(::Type{B}, ::Type{C}) = C$/;"	f
Base.promote_rule	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    Base.promote_rule(::Type{C}, ::Type{A}) = C$/;"	f
Base.promote_rule	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    Base.promote_rule(::Type{C}, ::Type{B}) = C$/;"	f
Base.promote_rule	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    Base.promote_rule(::Type{D{NS,DS}}, ::Type{D{NT,DT}}) where {NS,DS,NT,DT} = D{promote_type(N/;"	f
Base.promote_rule	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    Base.promote_rule(::Type{D{NT,DT}}, T::Type{<:Union{A,B,C}}) where {NT,DT} = D{promote_type(/;"	f
Base.promote_rule	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    Base.promote_rule(T::Type{<:Union{A,B,C}}, ::Type{D{NT,DT}}) where {NT,DT} = D{promote_type(/;"	f
Base.promote_rule	test/operators.jl	/^Base.promote_rule(::Type{T19714}, ::Type{Int}) = T19714$/;"	f
Base.promote_rule	test/ranges.jl	/^Base.promote_rule(::Type{Displacement}, ::Type{Int}) = Int$/;"	f
Base.promote_type	test/testhelpers/Furlongs.jl	/^Base.promote_type(::Type{Furlong{p,T}}, ::Type{Furlong{p,S}}) where {p,T,S} =$/;"	f
Base.propertynames	stdlib/LinearAlgebra/src/bunchkaufman.jl	/^Base.propertynames(B::BunchKaufman, private::Bool=false) =$/;"	f
Base.propertynames	stdlib/LinearAlgebra/src/cholesky.jl	/^Base.propertynames(F::Cholesky, private::Bool=false) =$/;"	f
Base.propertynames	stdlib/LinearAlgebra/src/cholesky.jl	/^Base.propertynames(F::CholeskyPivoted, private::Bool=false) =$/;"	f
Base.propertynames	stdlib/LinearAlgebra/src/hessenberg.jl	/^Base.propertynames(F::Hessenberg, private::Bool=false) =$/;"	f
Base.propertynames	stdlib/LinearAlgebra/src/lq.jl	/^Base.propertynames(F::LQ, private::Bool=false) =$/;"	f
Base.propertynames	stdlib/LinearAlgebra/src/lu.jl	/^Base.propertynames(F::LU, private::Bool=false) =$/;"	f
Base.propertynames	stdlib/LinearAlgebra/src/qr.jl	/^Base.propertynames(F::QRPivoted, private::Bool=false) =$/;"	f
Base.propertynames	stdlib/LinearAlgebra/src/qr.jl	/^Base.propertynames(F::Union{QR,QRCompactWY}, private::Bool=false) =$/;"	f
Base.propertynames	stdlib/LinearAlgebra/src/schur.jl	/^Base.propertynames(F::GeneralizedSchur) =$/;"	f
Base.propertynames	stdlib/LinearAlgebra/src/schur.jl	/^Base.propertynames(F::Schur) =$/;"	f
Base.propertynames	stdlib/LinearAlgebra/src/svd.jl	/^Base.propertynames(F::GeneralizedSVD) =$/;"	f
Base.propertynames	stdlib/LinearAlgebra/src/svd.jl	/^Base.propertynames(F::SVD, private::Bool=false) =$/;"	f
Base.propertynames	stdlib/SuiteSparse/src/spqr.jl	/^function Base.propertynames(F::QRSparse, private::Bool=false)$/;"	f
Base.push!	stdlib/Markdown/src/parse/parse.jl	/^Base.push!(md::MD, x) = push!(md.content, x)$/;"	f
Base.push!	test/testhelpers/OffsetArrays.jl	/^function Base.push!(a::OffsetArray{T,1}, item) where T$/;"	f
Base.read	base/Enums.jl	/^Base.read(io::IO, ::Type{T}) where {T<:Enum} = T(read(io, basetype(T)))$/;"	f
Base.read	stdlib/Base64/src/decode.jl	/^function Base.read(pipe::Base64DecodePipe, ::Type{UInt8})$/;"	f
Base.read	test/core.jl	/^Base.read(::IO13433, ::Type{UInt8}) = 0x01$/;"	f
Base.read!	stdlib/LibGit2/src/gitcredential.jl	/^function Base.read!(io::IO, cred::GitCredential)$/;"	f
Base.readbytes!	stdlib/Base64/src/decode.jl	/^function Base.readbytes!(pipe::Base64DecodePipe, data::AbstractVector{UInt8}, nb::Integer=length/;"	f
Base.real	test/testhelpers/Quaternions.jl	/^Base.real(::Type{Quaternion{T}}) where {T} = T$/;"	f
Base.reducedim_initarray	stdlib/SparseArrays/src/sparsematrix.jl	/^function Base.reducedim_initarray(A::AbstractSparseMatrixCSC, region, v0, ::Type{R}) where {R}$/;"	f
Base.reinterpret	stdlib/SparseArrays/src/abstractsparse.jl	/^function Base.reinterpret(::Type, A::AbstractSparseArray)$/;"	f
Base.rem	test/ranges.jl	/^Base.rem(x, y::NotReal) = rem(x, y.val)$/;"	f
Base.rem	test/ranges.jl	/^Base.rem(x::Displacement, y::Displacement) = Displacement(rem(x.val, y.val))$/;"	f
Base.rem	test/sorting.jl	/^            Base.rem(a::T_30763{$T}, b::T_30763{$T}) = T_30763{$T}(rem(a.n, b.n))$/;"	f
Base.replace_in_print_matrix	stdlib/LinearAlgebra/src/bidiag.jl	/^function Base.replace_in_print_matrix(A::Bidiagonal,i::Integer,j::Integer,s::AbstractString)$/;"	f
Base.replace_in_print_matrix	stdlib/LinearAlgebra/src/diagonal.jl	/^function Base.replace_in_print_matrix(A::Diagonal,i::Integer,j::Integer,s::AbstractString)$/;"	f
Base.replace_in_print_matrix	stdlib/LinearAlgebra/src/hessenberg.jl	/^function Base.replace_in_print_matrix(A::UpperHessenberg, i::Integer, j::Integer, s::AbstractStr/;"	f
Base.replace_in_print_matrix	stdlib/LinearAlgebra/src/triangular.jl	/^function Base.replace_in_print_matrix(A::Union{LowerTriangular,UnitLowerTriangular},$/;"	f
Base.replace_in_print_matrix	stdlib/LinearAlgebra/src/triangular.jl	/^function Base.replace_in_print_matrix(A::Union{UpperTriangular,UnitUpperTriangular},$/;"	f
Base.replace_in_print_matrix	stdlib/LinearAlgebra/src/tridiag.jl	/^function Base.replace_in_print_matrix(A::SymTridiagonal, i::Integer, j::Integer, s::AbstractStri/;"	f
Base.replace_in_print_matrix	stdlib/LinearAlgebra/src/tridiag.jl	/^function Base.replace_in_print_matrix(A::Tridiagonal,i::Integer,j::Integer,s::AbstractString)$/;"	f
Base.reshape	test/testhelpers/OffsetArrays.jl	/^Base.reshape(A::AbstractArray, inds::Tuple{OffsetAxis,Vararg{OffsetAxis}}) = OffsetArray(reshape/;"	f
Base.resize!	test/testhelpers/OffsetArrays.jl	/^Base.resize!(A::OffsetVector, nl::Integer) = (resize!(A.parent, nl); A)$/;"	f
Base.reverse	stdlib/Test/src/Test.jl	/^Base.reverse(s::GenericString) = GenericString(reverse(s.string))$/;"	f
Base.reverse	stdlib/Test/src/Test.jl	/^Base.reverse(s::SubString{GenericString}) =$/;"	f
Base.round	stdlib/Dates/src/rounding.jl	/^Base.round(::TimeTypeOrPeriod, p::Period, ::RoundingMode) = throw(DomainError(p))$/;"	f
Base.round	stdlib/Dates/src/rounding.jl	/^Base.round(x::TimeTypeOrPeriod, p::Period) = Base.round(x, p, RoundNearestTiesUp)$/;"	f
Base.round	stdlib/Dates/src/rounding.jl	/^Base.round(x::TimeTypeOrPeriod, p::Period, r::RoundingMode{:Down}) = Base.floor(x, p)$/;"	f
Base.round	stdlib/Dates/src/rounding.jl	/^Base.round(x::TimeTypeOrPeriod, p::Period, r::RoundingMode{:Up}) = Base.ceil(x, p)$/;"	f
Base.round	stdlib/Dates/src/rounding.jl	/^function Base.round(dt::TimeType, p::Period, r::RoundingMode{:NearestTiesUp})$/;"	f
Base.round	stdlib/Dates/src/rounding.jl	/^function Base.round(x::ConvertiblePeriod, precision::ConvertiblePeriod, r::RoundingMode{:Nearest/;"	f
Base.round	stdlib/Dates/src/rounding.jl	/^function Base.round(x::TimeTypeOrPeriod, ::Type{P}, r::RoundingMode=RoundNearestTiesUp) where P /;"	f
Base.seek	base/libc.jl	/^function Base.seek(h::FILE, offset::Integer)$/;"	f
Base.setindex!	base/permuteddimsarray.jl	/^@inline function Base.setindex!(A::PermutedDimsArray{T,N,perm,iperm}, val, I::Vararg{Int,N}) whe/;"	f
Base.setindex!	stdlib/Base64/src/buffer.jl	/^Base.setindex!(buffer::Buffer, v::UInt8, i::Integer) = unsafe_store!(buffer.ptr, v, i)$/;"	f
Base.setindex!	stdlib/LinearAlgebra/test/blas.jl	/^Base.setindex!(A::WrappedArray, v, i::Int) = setindex!(A.A, v, i)$/;"	f
Base.setindex!	stdlib/LinearAlgebra/test/blas.jl	/^Base.setindex!(A::WrappedArray{T, N}, v, I::Vararg{Int, N}) where {T, N} = setindex!(A.A, v, I../;"	f
Base.setindex!	stdlib/Markdown/src/parse/parse.jl	/^Base.setindex!(md::MD, args...) = setindex!(md.content, args...)$/;"	f
Base.setindex!	stdlib/Random/src/RNGs.jl	/^Base.setindex!(a::UnsafeView, x, i::Int) = unsafe_store!(a.ptr, x, i)$/;"	f
Base.setindex!	stdlib/Test/src/Test.jl	/^Base.setindex!(a::GenericArray, x, i::Int) = a.a[i] = x$/;"	f
Base.setindex!	test/abstractarray.jl	/^Base.setindex!(A::T24Linear{T}, v, i::Int) where {T} = setfield!(A, i, convert(T, v))$/;"	f
Base.setindex!	test/abstractarray.jl	/^Base.setindex!(A::TSlow{T,0}, v) where {T} = (A.data[()] = v)$/;"	f
Base.setindex!	test/abstractarray.jl	/^Base.setindex!(A::TSlow{T,1}, v, i1::Int) where {T} = (A.data[(i1,)] = v)$/;"	f
Base.setindex!	test/abstractarray.jl	/^Base.setindex!(A::TSlow{T,2}, v, i1::Int, i2::Int) where {T} = (A.data[(i1,i2)] = v)$/;"	f
Base.setindex!	test/abstractarray.jl	/^Base.setindex!(A::TSlow{T,3}, v, i1::Int, i2::Int, i3::Int) where {T} =$/;"	f
Base.setindex!	test/abstractarray.jl	/^Base.setindex!(A::TSlow{T,4}, v, i1::Int, i2::Int, i3::Int, i4::Int) where {T} =$/;"	f
Base.setindex!	test/abstractarray.jl	/^Base.setindex!(A::TSlow{T,5}, v, i1::Int, i2::Int, i3::Int, i4::Int, i5::Int) where {T} =$/;"	f
Base.setindex!	test/arrayops.jl	/^Base.setindex!(A::LinSlowMatrix, v, i::Integer) = error("Not defined")$/;"	f
Base.setindex!	test/arrayops.jl	/^Base.setindex!(A::LinSlowMatrix, v, i::Integer, j::Integer) = A.data[i,j] = v$/;"	f
Base.setindex!	test/broadcast.jl	/^Base.setindex!(A::ArrayData, v::Any, i::Integer...) = setindex!(A.data, v, i...)$/;"	f
Base.setindex!	test/dict.jl	/^        Base.setindex!(td::TestDict, args...) = setindex!(td.dict, args...)$/;"	f
Base.setindex!	test/testhelpers/OffsetArrays.jl	/^@inline function Base.setindex!(A::OffsetArray, val, i::Int)$/;"	f
Base.setindex!	test/testhelpers/OffsetArrays.jl	/^@inline function Base.setindex!(A::OffsetArray{T,N}, val, I::Vararg{Int,N}) where {T,N}$/;"	f
Base.setindex!	test/testhelpers/OffsetArrays.jl	/^@inline function Base.setindex!(A::OffsetVector, val, i::Int)$/;"	f
Base.setproperty!	stdlib/InteractiveUtils/test/runtests.jl	/^Base.setproperty!(t::T1234321, ::Symbol, ::Symbol) = "foo"$/;"	f
Base.setproperty!	stdlib/LibGit2/src/types.jl	/^function Base.setproperty!(cred::SSHCredential, name::Symbol, value)$/;"	f
Base.setproperty!	stdlib/LibGit2/src/types.jl	/^function Base.setproperty!(cred::UserPasswordCredential, name::Symbol, value)$/;"	f
Base.setproperty!	test/core.jl	/^function Base.setproperty!(mstrct::TestMutable, p::Symbol, v)$/;"	f
Base.show	base/Enums.jl	/^function Base.show(io::IO, ::MIME"text\/plain", t::Type{<:Enum})$/;"	f
Base.show	base/Enums.jl	/^function Base.show(io::IO, ::MIME"text\/plain", x::Enum)$/;"	f
Base.show	base/Enums.jl	/^function Base.show(io::IO, x::Enum)$/;"	f
Base.show	base/broadcast.jl	/^Base.show(io::IO, B::BitMaskedBitArray) = foreach(arg->show(io, arg), (typeof(B), (B.parent, B.m/;"	f
Base.show	base/broadcast.jl	/^function Base.show(io::IO, bc::Broadcasted{Style}) where {Style}$/;"	f
Base.show	base/compiler/ssair/show.jl	/^Base.show(io::IO, code::IRCode) = show_ir(io, code)$/;"	f
Base.show	base/compiler/ssair/show.jl	/^function Base.show(io::IO, cfg::CFG)$/;"	f
Base.show	base/docs/bindings.jl	/^function Base.show(io::IO, b::Binding)$/;"	f
Base.show	base/ryu/Ryu.jl	/^function Base.show(io::IO, x::T) where {T <: Base.IEEEFloat}$/;"	f
Base.show	stdlib/Base64/test/runtests.jl	/^Base.show(io::IO, ::MIME"image\/png", ::PNG) = print(io, "PNG")$/;"	f
Base.show	stdlib/Dates/src/adjusters.jl	/^Base.show(io::IO, df::DateFunction) = println(io, df.f)$/;"	f
Base.show	stdlib/Dates/src/io.jl	/^Base.show(io::IO, ::MIME"text\/plain", t::Time) = print(io, t)$/;"	f
Base.show	stdlib/Dates/src/io.jl	/^function Base.show(io::IO, ::MIME"text\/plain", dt::Date)$/;"	f
Base.show	stdlib/Dates/src/io.jl	/^function Base.show(io::IO, ::MIME"text\/plain", dt::DateTime)$/;"	f
Base.show	stdlib/Dates/src/io.jl	/^function Base.show(io::IO, d::DatePart{c}) where c$/;"	f
Base.show	stdlib/Dates/src/io.jl	/^function Base.show(io::IO, d::Delim)$/;"	f
Base.show	stdlib/Dates/src/io.jl	/^function Base.show(io::IO, df::DateFormat)$/;"	f
Base.show	stdlib/Dates/src/io.jl	/^function Base.show(io::IO, dt::Date)$/;"	f
Base.show	stdlib/Dates/src/io.jl	/^function Base.show(io::IO, dt::DateTime)$/;"	f
Base.show	stdlib/Dates/src/io.jl	/^function Base.show(io::IO, p::P) where P <: Period$/;"	f
Base.show	stdlib/Dates/src/io.jl	/^function Base.show(io::IO, t::Time)$/;"	f
Base.show	stdlib/Dates/src/periods.jl	/^Base.show(io::IO, ::MIME"text\/plain", p::Period) = print(io, p)$/;"	f
Base.show	stdlib/Dates/src/periods.jl	/^Base.show(io::IO,x::CompoundPeriod) = print(io, string(x))$/;"	f
Base.show	stdlib/LibGit2/src/blame.jl	/^function Base.show(io::IO, blame_hunk::BlameHunk)$/;"	f
Base.show	stdlib/LibGit2/src/blob.jl	/^function Base.show(io::IO, blob::GitBlob)$/;"	f
Base.show	stdlib/LibGit2/src/commit.jl	/^function Base.show(io::IO, c::GitCommit)$/;"	f
Base.show	stdlib/LibGit2/src/diff.jl	/^function Base.show(io::IO, diff::GitDiff)$/;"	f
Base.show	stdlib/LibGit2/src/diff.jl	/^function Base.show(io::IO, diff_stat::GitDiffStats)$/;"	f
Base.show	stdlib/LibGit2/src/error.jl	/^Base.show(io::IO, err::GitError) = print(io, "GitError(Code:$(err.code), Class:$(err.class), $(e/;"	f
Base.show	stdlib/LibGit2/src/index.jl	/^function Base.show(io::IO, idx::GitIndex)$/;"	f
Base.show	stdlib/LibGit2/src/oid.jl	/^Base.show(io::IO, id::GitHash) = print(io, "GitHash(\\"$(string(id))\\")")$/;"	f
Base.show	stdlib/LibGit2/src/oid.jl	/^Base.show(io::IO, id::GitShortHash) = print(io, "GitShortHash(\\"$(string(id))\\")")$/;"	f
Base.show	stdlib/LibGit2/src/rebase.jl	/^function Base.show(io::IO, rb::GitRebase)$/;"	f
Base.show	stdlib/LibGit2/src/reference.jl	/^function Base.show(io::IO, ref::GitReference)$/;"	f
Base.show	stdlib/LibGit2/src/remote.jl	/^Base.show(io::IO, rmt::GitRemote) = print(io, "GitRemote:\\nRemote name: ", name(rmt), " url: ",/;"	f
Base.show	stdlib/LibGit2/src/repository.jl	/^function Base.show(io::IO, repo::GitRepo)$/;"	f
Base.show	stdlib/LibGit2/src/repository.jl	/^function Base.show(io::IO, result::GitDescribeResult)$/;"	f
Base.show	stdlib/LibGit2/src/signature.jl	/^function Base.show(io::IO, sig::Signature)$/;"	f
Base.show	stdlib/LibGit2/src/tag.jl	/^Base.show(io::IO, tag::GitTag) = print(io, "GitTag:\\nTag name: $(name(tag)) target: $(target(ta/;"	f
Base.show	stdlib/LibGit2/src/tree.jl	/^function Base.show(io::IO, te::GitTreeEntry)$/;"	f
Base.show	stdlib/LibGit2/src/tree.jl	/^function Base.show(io::IO, tree::GitTree)$/;"	f
Base.show	stdlib/LibGit2/src/types.jl	/^Base.show(io::IO, ie::IndexEntry) = print(io, "IndexEntry($(string(ie.id)))")$/;"	f
Base.show	stdlib/LibGit2/src/types.jl	/^function Base.show(io::IO, ce::ConfigEntry)$/;"	f
Base.show	stdlib/LibGit2/src/types.jl	/^function Base.show(io::IO, dd::DiffDelta)$/;"	f
Base.show	stdlib/LibGit2/src/types.jl	/^function Base.show(io::IO, df::DiffFile)$/;"	f
Base.show	stdlib/LibGit2/src/types.jl	/^function Base.show(io::IO, fh::FetchHead)$/;"	f
Base.show	stdlib/LibGit2/src/types.jl	/^function Base.show(io::IO, rbo::RebaseOperation)$/;"	f
Base.show	stdlib/LinearAlgebra/src/bunchkaufman.jl	/^function Base.show(io::IO, mime::MIME{Symbol("text\/plain")}, B::BunchKaufman)$/;"	f
Base.show	stdlib/LinearAlgebra/src/factorization.jl	/^function Base.show(io::IO, ::MIME"text\/plain", x::Adjoint{<:Any,<:Factorization})$/;"	f
Base.show	stdlib/LinearAlgebra/src/factorization.jl	/^function Base.show(io::IO, ::MIME"text\/plain", x::Transpose{<:Any,<:Factorization})$/;"	f
Base.show	stdlib/LinearAlgebra/src/factorization.jl	/^function Base.show(io::IO, x::Adjoint{<:Any,<:Factorization})$/;"	f
Base.show	stdlib/LinearAlgebra/src/factorization.jl	/^function Base.show(io::IO, x::Transpose{<:Any,<:Factorization})$/;"	f
Base.show	stdlib/Markdown/src/render/plain.jl	/^Base.show(io::IO, ::MIME"text\/markdown", md::MD) = plain(io, md)$/;"	f
Base.show	stdlib/Markdown/src/render/plain.jl	/^Base.show(io::IO, md::MD) = plain(io, md)$/;"	f
Base.show	stdlib/Markdown/src/render/rst.jl	/^Base.show(io::IO, ::MIME"text\/rst", md::MD) = rst(io, md)$/;"	f
Base.show	stdlib/Markdown/src/render/terminal/render.jl	/^Base.show(io::IO, ::MIME"text\/plain", md::MD) = (term(io, md); nothing)$/;"	f
Base.show	stdlib/SparseArrays/src/sparsematrix.jl	/^Base.show(io::IO, S::AbstractSparseMatrixCSC) = Base.show(convert(IOContext, io), S::AbstractSpa/;"	f
Base.show	stdlib/SparseArrays/src/sparsematrix.jl	/^function Base.show(io::IO, ::MIME"text\/plain", S::AbstractSparseMatrixCSC)$/;"	f
Base.show	stdlib/SparseArrays/src/sparsematrix.jl	/^function Base.show(io::IOContext, S::AbstractSparseMatrixCSC)$/;"	f
Base.show	stdlib/SuiteSparse/src/spqr.jl	/^function Base.show(io::IO, mime::MIME{Symbol("text\/plain")}, F::QRSparse)$/;"	f
Base.show	stdlib/Test/src/Test.jl	/^function Base.show(io::IO, ex::TestSetException)$/;"	f
Base.show	stdlib/Test/src/Test.jl	/^function Base.show(io::IO, t::Broken)$/;"	f
Base.show	stdlib/Test/src/Test.jl	/^function Base.show(io::IO, t::Error)$/;"	f
Base.show	stdlib/Test/src/Test.jl	/^function Base.show(io::IO, t::Fail)$/;"	f
Base.show	stdlib/Test/src/Test.jl	/^function Base.show(io::IO, t::Pass)$/;"	f
Base.show	stdlib/Test/src/logging.jl	/^function Base.show(io::IO, t::LogTestFailure)$/;"	f
Base.show	test/dict.jl	/^    Base.show(io, MIME("text\/plain"), Dict(Alpha()=>1))$/;"	f
Base.show	test/dict.jl	/^Base.show(io::IO, ::Alpha) = print(io,"α")$/;"	f
Base.show	test/docs.jl	/^Base.show(io::IO, h::LazyHelp) = show(io, "text\/plain", h)$/;"	f
Base.show	test/docs.jl	/^function Base.show(io::IO, ::MIME"text\/plain", h::LazyHelp)$/;"	f
Base.show	test/show.jl	/^function Base.show(io::IO, x::X28004)$/;"	f
Base.showarg	base/multidimensional.jl	/^function Base.showarg(io::IO, r::Iterators.Pairs{<:CartesianIndex, <:Any, <:Any, T}, toplevel) w/;"	f
Base.showarg	base/multidimensional.jl	/^function Base.showarg(io::IO, r::Iterators.Pairs{<:Integer, <:Any, <:Any, T}, toplevel) where T /;"	f
Base.showarg	base/permuteddimsarray.jl	/^function Base.showarg(io::IO, A::PermutedDimsArray{T,N,perm}, toplevel) where {T,N,perm}$/;"	f
Base.showarg	base/show.jl	/^    function Base.showarg(io::IO, v::SubArray, toplevel)$/;"	f
Base.showarg	base/show.jl	/^function Base.showarg(io::IO, r::Iterators.Pairs{<:Any, <:Any, I, D}, toplevel) where {D, I}$/;"	f
Base.showarg	base/show.jl	/^function Base.showarg(io::IO, r::Iterators.Pairs{<:Integer, <:Any, <:Any, T}, toplevel) where T</;"	f
Base.showarg	base/show.jl	/^function Base.showarg(io::IO, r::Iterators.Pairs{Symbol, <:Any, <:Any, T}, toplevel) where {T <:/;"	f
Base.showerror	stdlib/Distributed/src/cluster.jl	/^Base.showerror(io::IO, e::LaunchWorkerError) = print(io, e.msg)$/;"	f
Base.showerror	stdlib/LinearAlgebra/src/exceptions.jl	/^function Base.showerror(io::IO, ex::PosDefException)$/;"	f
Base.showerror	stdlib/REPL/test/repl.jl	/^    @eval Base.showerror(io::IO, e::Error19864) = print(io, "correct19864")$/;"	f
Base.showerror	stdlib/Test/src/Test.jl	/^function Base.showerror(io::IO, ex::FallbackTestSetException, bt; backtrace=true)$/;"	f
Base.showerror	stdlib/Test/src/Test.jl	/^function Base.showerror(io::IO, ex::TestSetException, bt; backtrace=true)$/;"	f
Base.showerror	test/spawn.jl	/^            Base.showerror(io::IO, e::Error19864) = print(io, "correct19864")$/;"	f
Base.shred!	stdlib/LibGit2/src/gitcredential.jl	/^function Base.shred!(cred::GitCredential)$/;"	f
Base.shred!	stdlib/LibGit2/src/types.jl	/^function Base.shred!(cred::SSHCredential)$/;"	f
Base.shred!	stdlib/LibGit2/src/types.jl	/^function Base.shred!(cred::UserPasswordCredential)$/;"	f
Base.shred!	stdlib/LibGit2/src/types.jl	/^function Base.shred!(p::CachedCredentials)$/;"	f
Base.shred!	stdlib/LibGit2/src/types.jl	/^function Base.shred!(p::CredentialPayload)$/;"	f
Base.sign	stdlib/Dates/src/periods.jl	/^Base.sign(x::Period) = sign(value(x))$/;"	f
Base.similar	base/broadcast.jl	/^Base.similar(bc::Broadcasted{ArrayConflict}, ::Type{Bool}) =$/;"	f
Base.similar	base/broadcast.jl	/^Base.similar(bc::Broadcasted{DefaultArrayStyle{N}}, ::Type{ElType}) where {N,ElType} =$/;"	f
Base.similar	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^function Base.similar(bc::Broadcasted{StructuredMatrixStyle{T}}, ::Type{ElType}) where {T,ElType/;"	f
Base.similar	stdlib/Test/src/Test.jl	/^Base.similar(A::GenericArray, s::Integer...) = GenericArray(similar(A.a, s...))$/;"	f
Base.similar	test/abstractarray.jl	/^Base.similar(A::TSlow, ::Type{T}, dims::Dims) where {T} = TSlow(T, dims)$/;"	f
Base.similar	test/broadcast.jl	/^Base.similar(bc::Broadcast.Broadcasted{AD2DimStyle}, ::Type{T}) where {T} =$/;"	f
Base.similar	test/broadcast.jl	/^Base.similar(bc::Broadcast.Broadcasted{Broadcast.ArrayStyle{A}}, ::Type{T}) where {A,T} =$/;"	f
Base.similar	test/testhelpers/OffsetArrays.jl	/^Base.similar(::Type{T}, shape::Tuple{OffsetAxis,Vararg{OffsetAxis}}) where {T<:AbstractArray} =$/;"	f
Base.similar	test/testhelpers/OffsetArrays.jl	/^function Base.similar(A::AbstractArray, T::Type, inds::Tuple{OffsetAxis,Vararg{OffsetAxis}})$/;"	f
Base.similar	test/testhelpers/OffsetArrays.jl	/^function Base.similar(A::OffsetArray, T::Type, dims::Dims)$/;"	f
Base.size	base/broadcast.jl	/^Base.size(bc::Broadcasted) = map(length, axes(bc))$/;"	f
Base.size	base/experimental.jl	/^Base.size(C::Const) = size(C.a)$/;"	f
Base.size	base/permuteddimsarray.jl	/^Base.size(A::PermutedDimsArray{T,N,perm}) where {T,N,perm}    = genperm(size(parent(A)),    perm/;"	f
Base.size	base/show.jl	/^    Base.size(r::Compiler.StmtRange) = Compiler.size(r)$/;"	f
Base.size	stdlib/LinearAlgebra/test/blas.jl	/^Base.size(A::WrappedArray) = size(A.A)$/;"	f
Base.size	stdlib/LinearAlgebra/test/matmul.jl	/^    Base.size(A::MyArray) = size(A.data)$/;"	f
Base.size	stdlib/Random/src/RNGs.jl	/^Base.size(a::UnsafeView) = (a.len,)$/;"	f
Base.size	stdlib/Serialization/test/runtests.jl	/^Base.size(A::ArrayWrapper) = size(A.data)$/;"	f
Base.size	stdlib/Serialization/test/runtests.jl	/^Base.size(A::ArrayWrapper, d) = size(A.data, d)$/;"	f
Base.size	stdlib/SuiteSparse/src/spqr.jl	/^Base.size(F::QRSparse) = (size(F.factors, 1), size(F.R, 2))$/;"	f
Base.size	stdlib/SuiteSparse/src/spqr.jl	/^Base.size(Q::QRSparseQ) = (size(Q.factors, 1), size(Q.factors, 1))$/;"	f
Base.size	stdlib/SuiteSparse/src/spqr.jl	/^function Base.size(F::QRSparse, i::Integer)$/;"	f
Base.size	stdlib/Test/src/Test.jl	/^Base.size(a::GenericArray) = size(a.a)$/;"	f
Base.size	test/abstractarray.jl	/^    Base.size(::TestThrowNoGetindex) = (2,)$/;"	f
Base.size	test/abstractarray.jl	/^Base.size(::T24Linear{T,N,dims}) where {T,N,dims} = dims$/;"	f
Base.size	test/abstractarray.jl	/^Base.size(A::TSlow) = A.dims$/;"	f
Base.size	test/abstractarray.jl	/^Base.size(A::TSlowNIndexes) = size(A.data)$/;"	f
Base.size	test/arrayops.jl	/^Base.size(::V26163) = (1,)$/;"	f
Base.size	test/arrayops.jl	/^Base.size(::Z26163) = ()$/;"	f
Base.size	test/arrayops.jl	/^Base.size(A::LinSlowMatrix) = size(A.data)$/;"	f
Base.size	test/arrayops.jl	/^Base.size(S::SquaresVector) = (S.count,)$/;"	f
Base.size	test/boundscheck_exec.jl	/^Base.size(X::BadVector20469) = size(X.data)$/;"	f
Base.size	test/broadcast.jl	/^Base.size(A::ArrayData) = size(A.data)$/;"	f
Base.size	test/subarray.jl	/^    Base.size(::Union{ImmutableTestArray, Type{ImmutableTestArray}}) = (0, 0)$/;"	f
Base.size	test/testhelpers/OffsetArrays.jl	/^Base.size(A::OffsetArray) = size(A.parent)$/;"	f
Base.size	test/testhelpers/OffsetArrays.jl	/^Base.size(A::OffsetArray, d) = size(A.parent, d)$/;"	f
Base.sort!	stdlib/LibGit2/src/walker.jl	/^function Base.sort!(w::GitRevWalker; by::Cint = Consts.SORT_NONE, rev::Bool=false)$/;"	f
Base.sqrt	test/testhelpers/Furlongs.jl	/^Base.sqrt(x::Furlong) = _div(sqrt(x.val), x, Val(2))$/;"	f
Base.step	test/sorting.jl	/^Base.step(r::ConstantRange) = 0$/;"	f
Base.steprange_last	stdlib/Dates/src/ranges.jl	/^function Base.steprange_last(start::T, step, stop) where T<:TimeType$/;"	f
Base.stride	stdlib/LinearAlgebra/test/blas.jl	/^Base.stride(A::WrappedArray, i::Int) = stride(A.A, i)$/;"	f
Base.strides	base/permuteddimsarray.jl	/^function Base.strides(A::PermutedDimsArray{T,N,perm}) where {T,N,perm}$/;"	f
Base.string	stdlib/Dates/src/io.jl	/^function Base.string(dt::Date)$/;"	f
Base.string	stdlib/Dates/src/io.jl	/^function Base.string(dt::DateTime)$/;"	f
Base.string	stdlib/Dates/src/io.jl	/^function Base.string(t::Time)$/;"	f
Base.string	stdlib/Dates/src/periods.jl	/^function Base.string(x::CompoundPeriod)$/;"	f
Base.string	stdlib/LibGit2/src/oid.jl	/^Base.string(id::GitShortHash) = string(id.hash)[1:id.len]$/;"	f
Base.string	stdlib/Random/src/DSFMT.jl	/^Base.string(f::GF2X) = reverse(string(f.z, base = 16))$/;"	f
Base.sub_with_overflow	base/gmp.jl	/^Base.sub_with_overflow(a::BigInt, b::BigInt) = a - b, false$/;"	f
Base.summary	test/errorshow.jl	/^Base.summary(io::IO, b::Bounded) = print(io, "$(b.bound)-size Bounded")$/;"	f
Base.throw_boundserror	base/subarray.jl	/^@inline Base.throw_boundserror(A::SubArray, I) =$/;"	f
Base.transpose	stdlib/LinearAlgebra/test/generic.jl	/^Base.transpose(a::ModInt{n}) where {n} = a  # see Issue 20978$/;"	f
Base.transpose	stdlib/SuiteSparse/src/cholmod.jl	/^Base.transpose(F::Factor) = Transpose(F)$/;"	f
Base.transpose	stdlib/SuiteSparse/src/umfpack.jl	/^Base.transpose(F::UmfpackLU) = Transpose(F)$/;"	f
Base.trues	test/testhelpers/OffsetArrays.jl	/^Base.trues(inds::NTuple{N, Union{Integer, AbstractUnitRange}}) where {N} =$/;"	f
Base.trunc	stdlib/Dates/src/adjusters.jl	/^Base.trunc(dt::Date, p::Type{Day}) = dt$/;"	f
Base.trunc	stdlib/Dates/src/adjusters.jl	/^Base.trunc(dt::Date, p::Type{Month}) = firstdayofmonth(dt)$/;"	f
Base.trunc	stdlib/Dates/src/adjusters.jl	/^Base.trunc(dt::Date, p::Type{Year}) = Date(UTD(totaldays(year(dt), 1, 1)))$/;"	f
Base.trunc	stdlib/Dates/src/adjusters.jl	/^Base.trunc(dt::DateTime, p::Type{Day}) = DateTime(Date(dt))$/;"	f
Base.trunc	stdlib/Dates/src/adjusters.jl	/^Base.trunc(dt::DateTime, p::Type{Hour}) = dt - Minute(dt) - Second(dt) - Millisecond(dt)$/;"	f
Base.trunc	stdlib/Dates/src/adjusters.jl	/^Base.trunc(dt::DateTime, p::Type{Millisecond}) = dt$/;"	f
Base.trunc	stdlib/Dates/src/adjusters.jl	/^Base.trunc(dt::DateTime, p::Type{Minute}) = dt - Second(dt) - Millisecond(dt)$/;"	f
Base.trunc	stdlib/Dates/src/adjusters.jl	/^Base.trunc(dt::DateTime, p::Type{Month}) = DateTime(trunc(Date(dt), Month))$/;"	f
Base.trunc	stdlib/Dates/src/adjusters.jl	/^Base.trunc(dt::DateTime, p::Type{Second}) = dt - Millisecond(dt)$/;"	f
Base.trunc	stdlib/Dates/src/adjusters.jl	/^Base.trunc(dt::DateTime, p::Type{Year}) = DateTime(trunc(Date(dt), Year))$/;"	f
Base.trunc	stdlib/Dates/src/adjusters.jl	/^Base.trunc(t::Time, p::Type{Hour}) = Time(Hour(t))$/;"	f
Base.trunc	stdlib/Dates/src/adjusters.jl	/^Base.trunc(t::Time, p::Type{Microsecond}) = t - Nanosecond(t)$/;"	f
Base.trunc	stdlib/Dates/src/adjusters.jl	/^Base.trunc(t::Time, p::Type{Millisecond}) = t - Microsecond(t) - Nanosecond(t)$/;"	f
Base.trunc	stdlib/Dates/src/adjusters.jl	/^Base.trunc(t::Time, p::Type{Minute}) = Time(Hour(t), Minute(t))$/;"	f
Base.trunc	stdlib/Dates/src/adjusters.jl	/^Base.trunc(t::Time, p::Type{Nanosecond})  = t$/;"	f
Base.trunc	stdlib/Dates/src/adjusters.jl	/^Base.trunc(t::Time, p::Type{Second}) = Time(Hour(t), Minute(t), Second(t))$/;"	f
Base.tryparse	stdlib/Dates/src/parse.jl	/^function Base.tryparse(::Type{T}, str::AbstractString, df::DateFormat=default_format(T)) where T/;"	f
Base.typemax	base/Enums.jl	/^        Base.typemax(x::Type{$(esc(typename))}) = $(esc(typename))($hi)$/;"	f
Base.typemax	stdlib/Dates/src/periods.jl	/^Base.typemax(::Type{P}) where {P<:Period} = P(typemax(Int64))$/;"	f
Base.typemax	stdlib/Dates/src/types.jl	/^Base.typemax(::Union{Date, Type{Date}}) = Date(252522163911149, 12, 31)$/;"	f
Base.typemax	stdlib/Dates/src/types.jl	/^Base.typemax(::Union{DateTime, Type{DateTime}}) = DateTime(146138512, 12, 31, 23, 59, 59)$/;"	f
Base.typemax	stdlib/Dates/src/types.jl	/^Base.typemax(::Union{Time, Type{Time}}) = Time(23, 59, 59, 999, 999, 999)$/;"	f
Base.typemin	base/Enums.jl	/^        Base.typemin(x::Type{$(esc(typename))}) = $(esc(typename))($lo)$/;"	f
Base.typemin	stdlib/Dates/src/periods.jl	/^Base.typemin(::Type{P}) where {P<:Period} = P(typemin(Int64))$/;"	f
Base.typemin	stdlib/Dates/src/types.jl	/^Base.typemin(::Union{Date, Type{Date}}) = Date(-252522163911150, 1, 1)$/;"	f
Base.typemin	stdlib/Dates/src/types.jl	/^Base.typemin(::Union{DateTime, Type{DateTime}}) = DateTime(-146138511, 1, 1, 0, 0, 0)$/;"	f
Base.typemin	stdlib/Dates/src/types.jl	/^Base.typemin(::Union{Time, Type{Time}}) = Time(0)$/;"	f
Base.unaliascopy	stdlib/LinearAlgebra/src/adjtrans.jl	/^Base.unaliascopy(A::Union{Adjoint,Transpose}) = typeof(A)(Base.unaliascopy(A.parent))$/;"	f
Base.unaliascopy	stdlib/SparseArrays/src/sparsematrix.jl	/^Base.unaliascopy(S::AbstractSparseMatrixCSC) = typeof(S)(size(S, 1), size(S, 2), unaliascopy(get/;"	f
Base.unaliascopy	stdlib/SparseArrays/src/sparsevector.jl	/^Base.unaliascopy(S::SparseVector) = typeof(S)(length(S), unaliascopy(nonzeroinds(S)), unaliascop/;"	f
Base.unsafe_convert	base/libc.jl	/^Base.unsafe_convert(T::Union{Type{Ptr{Cvoid}},Type{Ptr{FILE}}}, f::FILE) = convert(T, f.ptr)$/;"	f
Base.unsafe_convert	base/mpfr.jl	/^@inline function Base.unsafe_convert(::Type{Ref{BigFloat}}, x::Ref{BigFloat})$/;"	f
Base.unsafe_convert	base/mpfr.jl	/^Base.unsafe_convert(::Type{Ref{BigFloat}}, x::Ptr{BigFloat}) = x$/;"	f
Base.unsafe_convert	base/permuteddimsarray.jl	/^Base.unsafe_convert(::Type{Ptr{T}}, A::PermutedDimsArray{T}) where {T} = Base.unsafe_convert(Ptr/;"	f
Base.unsafe_convert	stdlib/LibGit2/src/diff.jl	/^function Base.unsafe_convert(::Type{Ptr{DiffOptionsStruct}}, rr::Tuple{Ref{DiffOptionsStruct}, R/;"	f
Base.unsafe_convert	stdlib/LibGit2/src/strarray.jl	/^function Base.unsafe_convert(::Type{Ptr{StrArrayStruct}}, rr::Tuple{Ref{StrArrayStruct}, Ref{Cst/;"	f
Base.unsafe_convert	stdlib/SuiteSparse/src/cholmod.jl	/^Base.unsafe_convert(::Type{Ptr{Tv}}, A::Sparse{Tv}) where {Tv} = getfield(A, :ptr)$/;"	f
Base.unsafe_convert	stdlib/SuiteSparse/src/cholmod.jl	/^function Base.unsafe_convert(::Type{Ptr{T}}, x::Union{Dense,Sparse,Factor}) where T<:SuiteSparse/;"	f
Base.unsafe_convert	test/ccall.jl	/^function Base.unsafe_convert(::Type{SpillPint}, vr)$/;"	f
Base.unsafe_convert	test/compiler/codegen.jl	/^Base.unsafe_convert(::Type{Ptr{BadRef}}, ar::BadRef) = Ptr{BadRef}(pointer_from_objref(ar.x))$/;"	f
Base.unsafe_convert	test/compiler/codegen.jl	/^Base.unsafe_convert(::Type{Ref{PtrStruct}}, at::Tuple) =$/;"	f
Base.unsafe_convert	test/core.jl	/^Base.unsafe_convert(::Type{Ptr{Z4681}},b::Z4681) = b.x$/;"	f
Base.unsafe_read	stdlib/Base64/src/decode.jl	/^function Base.unsafe_read(pipe::Base64DecodePipe, ptr::Ptr{UInt8}, n::UInt)$/;"	f
Base.unsafe_write	stdlib/Base64/src/encode.jl	/^function Base.unsafe_write(pipe::Base64EncodePipe, ptr::Ptr{UInt8}, n::UInt)::Int$/;"	f
Base.view	test/arrayops.jl	/^Base.view(::T25958, args...) = args$/;"	f
Base.write	base/Enums.jl	/^Base.write(io::IO, x::Enum{T}) where {T<:Integer} = write(io, T(x))$/;"	f
Base.write	stdlib/Base64/src/encode.jl	/^function Base.write(pipe::Base64EncodePipe, x::UInt8)$/;"	f
Base.write	stdlib/LibGit2/src/gitcredential.jl	/^function Base.write(io::IO, cred::GitCredential)$/;"	f
Base.zero	stdlib/Dates/src/periods.jl	/^Base.zero(::Union{Type{P},P}) where {P<:Period} = P(0)$/;"	f
Base.zero	stdlib/LibGit2/src/oid.jl	/^Base.zero(::Type{GitHash}) = GitHash()$/;"	f
Base.zero	stdlib/LinearAlgebra/test/generic.jl	/^Base.zero(::ModInt{n}) where {n} = ModInt{n}(0)$/;"	f
Base.zero	stdlib/LinearAlgebra/test/generic.jl	/^Base.zero(::Type{ModInt{n}}) where {n} = ModInt{n}(0)$/;"	f
Base.zero	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    Base.zero(::Union{A, Type{A}}) = A(0)$/;"	f
Base.zero	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    Base.zero(::Union{C, Type{C}}) = C(0)$/;"	f
Base.zero	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    Base.zero(::Union{D{NT, DT}, Type{D{NT, DT}}}) where {NT, DT} = zero(NT) \/ one(DT)$/;"	f
Base.zero	stdlib/SparseArrays/test/sparse.jl	/^Base.zero(::Type{CustomType}) = CustomType("")$/;"	f
Base.zero	stdlib/SparseArrays/test/sparse.jl	/^Base.zero(x::CustomType) = zero(CustomType)$/;"	f
Base.zero	test/hashing.jl	/^Base.zero(::Type{CustomHashReal}) = CustomHashReal(0.0)$/;"	f
Base.zero	test/hashing.jl	/^Base.zero(x::CustomHashReal) = zero(CustomHashReal)$/;"	f
Base.zero	test/missing.jl	/^Base.zero(::Type{Unit}) = Unit(0)$/;"	f
Base.zero	test/ranges.jl	/^Base.zero(y::NotReal) = zero(y.val)$/;"	f
Base.zero	test/show.jl	/^Base.zero(::Type{T12960}) = T12960()$/;"	f
Base.zero	test/show.jl	/^Base.zero(x::T12960) = T12960()$/;"	f
Base.zero	test/sorting.jl	/^            Base.zero(::T_30763{$T}) = T_30763{$T}(0)$/;"	f
Base.zero	test/testhelpers/Furlongs.jl	/^Base.zero(::Type{Furlong{p,T}}) where {p,T} = Furlong{p,T}(zero(T))$/;"	f
Base.zero	test/testhelpers/Furlongs.jl	/^Base.zero(x::Furlong{p,T}) where {p,T} = Furlong{p,T}(zero(T))$/;"	f
Base.zero	test/testhelpers/PhysQuantities.jl	/^Base.zero(::Type{PhysQuantity{n,T}}) where {n,T} = PhysQuantity{n,T}(zero(T))$/;"	f
Base.zero	test/testhelpers/PhysQuantities.jl	/^Base.zero(x::PhysQuantity) = zero(typeof(x))$/;"	f
Base.zeros	test/testhelpers/OffsetArrays.jl	/^Base.zeros(::Type{T}, inds::NTuple{N, Union{Integer, AbstractUnitRange}}) where {T, N} =$/;"	f
Base30394	test/compiler/inference.jl	/^mutable struct Base30394$/;"	f
Base64	stdlib/Base64/docs/src/index.md	/^# Base64$/;"	c
Base64	stdlib/Base64/src/Base64.jl	/^module Base64$/;"	f
Base64DecodePipe	stdlib/Base64/src/decode.jl	/^    function Base64DecodePipe(io::IO)$/;"	f
Base64DecodePipe	stdlib/Base64/src/decode.jl	/^struct Base64DecodePipe <: IO$/;"	f
Base64EncodePipe	stdlib/Base64/src/encode.jl	/^    function Base64EncodePipe(io::IO)$/;"	f
Base64EncodePipe	stdlib/Base64/src/encode.jl	/^struct Base64EncodePipe <: IO$/;"	f
BaseDocs	base/docs/basedocs.jl	/^module BaseDocs$/;"	f
Basic Functions	doc/src/manual/arrays.md	/^## Basic Functions$/;"	s
Basic Stream I/O	doc/src/manual/networking-and-streams.md	/^## Basic Stream I\/O$/;"	s
Basic Unit Tests	stdlib/Test/docs/src/index.md	/^## Basic Unit Tests$/;"	s
Basic functions	doc/src/base/arrays.md	/^## Basic functions$/;"	s
Basic syntax	doc/src/devdocs/cartesian.md	/^## Basic syntax$/;"	s
Basic usage	doc/src/manual/profile.md	/^## Basic usage$/;"	s
BasicBlock	base/compiler/ssair/ir.jl	/^function BasicBlock(old_bb, stmts)$/;"	f
BasicBlock	base/compiler/ssair/ir.jl	/^function BasicBlock(stmts::StmtRange)$/;"	f
BasicBlock	base/compiler/ssair/ir.jl	/^struct BasicBlock$/;"	f
BasicREPL	stdlib/REPL/src/REPL.jl	/^    BasicREPL(t) = new(t, false)$/;"	f
BasicREPL	stdlib/REPL/src/REPL.jl	/^mutable struct BasicREPL <: AbstractREPL$/;"	f
Basics	doc/src/manual/metaprogramming.md	/^### Basics$/;"	S
BatchProcessingError	stdlib/Distributed/src/pmap.jl	/^struct BatchProcessingError <: Exception$/;"	f
Baz	test/depot/packages/Baz/81oLe/src/Baz.jl	/^module Baz$/;"	f
Baz	test/precompile.jl	/^          module Baz$/;"	f
Baz26028	test/precompile.jl	/^            module Baz26028$/;"	f
Baz2919;	test/core.jl	/^mutable struct Baz2919; Foo2919::Foo2919; end$/;"	f
Baz4129	test/core.jl	/^mutable struct Baz4129$/;"	f
Baz;	test/core.jl	/^struct Baz; val::Int64; end$/;"	f
Bbuf	stdlib/LinearAlgebra/src/matmul.jl	/^const Bbuf = [Vector{UInt8}(undef, tilebufsize)]$/;"	v
Be careful with type equality	doc/src/manual/style-guide.md	/^## Be careful with type equality$/;"	s
Beat	stdlib/Dates/test/periods.jl	/^Beat(p::Period) = Beat(Dates.toms(p) ÷ 86400)$/;"	f
Beat	stdlib/Dates/test/periods.jl	/^struct Beat <: Dates.Period$/;"	f
Before filing an issue	CONTRIBUTING.md	/^## Before filing an issue$/;"	s
BelowMinLevel	base/logging.jl	/^const BelowMinLevel = LogLevel(-1000001)$/;"	v
BiTri	stdlib/LinearAlgebra/src/bidiag.jl	/^const BiTri = Union{Bidiagonal,Tridiagonal}$/;"	v
BiTriSym	stdlib/LinearAlgebra/src/bidiag.jl	/^const BiTriSym = Union{Bidiagonal,Tridiagonal,SymTridiagonal}$/;"	v
BiTriSym	stdlib/SparseArrays/src/SparseArrays.jl	/^const BiTriSym = Union{Bidiagonal,SymTridiagonal,Tridiagonal}$/;"	v
Bidiagonal	stdlib/LinearAlgebra/src/bidiag.jl	/^    function Bidiagonal{T,V}(dv, ev, uplo::AbstractChar) where {T,V<:AbstractVector{T}}$/;"	f
Bidiagonal	stdlib/LinearAlgebra/src/bidiag.jl	/^Bidiagonal(A::Bidiagonal) = A$/;"	f
Bidiagonal	stdlib/LinearAlgebra/src/bidiag.jl	/^function Bidiagonal(A::AbstractMatrix, uplo::Symbol)$/;"	f
Bidiagonal	stdlib/LinearAlgebra/src/bidiag.jl	/^function Bidiagonal(dv::V, ev::V, uplo::AbstractChar) where {T,V<:AbstractVector{T}}$/;"	f
Bidiagonal	stdlib/LinearAlgebra/src/bidiag.jl	/^function Bidiagonal(dv::V, ev::V, uplo::Symbol) where {T,V<:AbstractVector{T}}$/;"	f
Bidiagonal	stdlib/LinearAlgebra/src/bidiag.jl	/^function Bidiagonal{T,V}(dv, ev, uplo::Symbol) where {T,V<:AbstractVector{T}}$/;"	f
Bidiagonal	stdlib/LinearAlgebra/src/bidiag.jl	/^function Bidiagonal{T}(dv::AbstractVector, ev::AbstractVector, uplo::Union{Symbol,AbstractChar})/;"	f
Bidiagonal	stdlib/LinearAlgebra/src/bidiag.jl	/^struct Bidiagonal{T,V<:AbstractVector{T}} <: AbstractMatrix{T}$/;"	f
Bidiagonal	stdlib/LinearAlgebra/src/special.jl	/^Bidiagonal(A::AbstractTriangular) =$/;"	f
Bidiagonal	stdlib/LinearAlgebra/src/special.jl	/^Bidiagonal(A::Diagonal) = Bidiagonal(A.diag, fill!(similar(A.diag, length(A.diag)-1), 0), :U)$/;"	f
Bidiagonal	stdlib/LinearAlgebra/src/special.jl	/^Bidiagonal(A::SymTridiagonal) =$/;"	f
Bidiagonal	stdlib/LinearAlgebra/src/special.jl	/^Bidiagonal(A::Tridiagonal) =$/;"	f
BigFloat	base/mpfr.jl	/^        function BigFloat(x::($fC), r::MPFRRoundingMode=ROUNDING_MODE[]; precision::Integer=DEFA/;"	f
BigFloat	base/mpfr.jl	/^    function BigFloat(; precision::Integer=DEFAULT_PRECISION[])$/;"	f
BigFloat	base/mpfr.jl	/^BigFloat(x::AbstractString, r::MPFRRoundingMode=ROUNDING_MODE[]; precision::Integer=DEFAULT_PREC/;"	f
BigFloat	base/mpfr.jl	/^BigFloat(x::AbstractString, r::RoundingMode; precision::Integer=DEFAULT_PRECISION[]) =$/;"	f
BigFloat	base/mpfr.jl	/^BigFloat(x::Integer, r::MPFRRoundingMode=ROUNDING_MODE[]; precision::Integer=DEFAULT_PRECISION[]/;"	f
BigFloat	base/mpfr.jl	/^BigFloat(x::Real, r::RoundingMode; precision::Integer=DEFAULT_PRECISION[]) =$/;"	f
BigFloat	base/mpfr.jl	/^BigFloat(x::Union{Bool,Int8,Int16,Int32}, r::MPFRRoundingMode=ROUNDING_MODE[]; precision::Intege/;"	f
BigFloat	base/mpfr.jl	/^BigFloat(x::Union{Float16,Float32}, r::MPFRRoundingMode=ROUNDING_MODE[]; precision::Integer=DEFA/;"	f
BigFloat	base/mpfr.jl	/^BigFloat(x::Union{UInt8,UInt16,UInt32}, r::MPFRRoundingMode=ROUNDING_MODE[]; precision::Integer=/;"	f
BigFloat	base/mpfr.jl	/^function BigFloat(x::BigFloat, r::MPFRRoundingMode=ROUNDING_MODE[]; precision::Integer=DEFAULT_P/;"	f
BigFloat	base/mpfr.jl	/^function BigFloat(x::BigInt, r::MPFRRoundingMode=ROUNDING_MODE[]; precision::Integer=DEFAULT_PRE/;"	f
BigFloat	base/mpfr.jl	/^function BigFloat(x::Float64, r::MPFRRoundingMode=ROUNDING_MODE[]; precision::Integer=DEFAULT_PR/;"	f
BigFloat	base/mpfr.jl	/^function BigFloat(x::Rational, r::MPFRRoundingMode=ROUNDING_MODE[]; precision::Integer=DEFAULT_P/;"	f
BigFloat	base/mpfr.jl	/^mutable struct BigFloat <: AbstractFloat$/;"	f
BigFloats and BigInts	doc/src/base/numbers.md	/^## BigFloats and BigInts$/;"	s
BigInt	base/gmp.jl	/^    function BigInt(; nbits::Integer=0)$/;"	f
BigInt	base/gmp.jl	/^BigInt(x::BigInt) = x$/;"	f
BigInt	base/gmp.jl	/^BigInt(x::Bool) = BigInt(UInt(x))$/;"	f
BigInt	base/gmp.jl	/^BigInt(x::Float16) = BigInt(Float64(x))$/;"	f
BigInt	base/gmp.jl	/^BigInt(x::Float32) = BigInt(Float64(x))$/;"	f
BigInt	base/gmp.jl	/^BigInt(x::Union{Clong,Int32}) = MPZ.set_si(x)$/;"	f
BigInt	base/gmp.jl	/^BigInt(x::Union{Culong,UInt32}) = MPZ.set_ui(x)$/;"	f
BigInt	base/gmp.jl	/^function BigInt(x::Integer)$/;"	f
BigInt	base/gmp.jl	/^function BigInt(x::Union{Float32,Float64})$/;"	f
BigInt	base/gmp.jl	/^mutable struct BigInt <: Signed$/;"	f
BigInt	base/mpfr.jl	/^function BigInt(x::BigFloat)$/;"	f
Bignum	base/grisu/bignums.jl	/^    function Bignum()$/;"	f
Bignum	base/grisu/bignums.jl	/^mutable struct Bignum$/;"	f
Bignums	base/grisu/bignums.jl	/^module Bignums$/;"	f
Binary Installation	README.md	/^## Binary Installation$/;"	s
Binary distribution	doc/build/windows.md	/^## Binary distribution$/;"	s
Binding	base/docs/bindings.jl	/^    function Binding(m::Module, v::Symbol)$/;"	f
Binding	base/docs/bindings.jl	/^struct Binding$/;"	f
BindingRef	src/staticdata.c	/^    BindingRef,$/;"	e	enum:RefTags	file:
BitArray	base/bitarray.jl	/^    function BitArray{N}(::UndefInitializer, dims::Vararg{Int,N}) where N$/;"	f
BitArray	base/bitarray.jl	/^BitArray(::UndefInitializer, dims::Integer...) = BitArray(undef, map(Int,dims))$/;"	f
BitArray	base/bitarray.jl	/^BitArray(::UndefInitializer, dims::NTuple{N,Integer}) where {N} = BitArray{N}(undef, map(Int, di/;"	f
BitArray	base/bitarray.jl	/^BitArray(A::AbstractArray{<:Any,N}) where {N} = BitArray{N}(A)$/;"	f
BitArray	base/bitarray.jl	/^BitArray(itr) = gen_bitarray(IteratorSize(itr), itr)$/;"	f
BitArray	base/bitarray.jl	/^BitArray(x::BitArray) = copy(x)$/;"	f
BitArray	base/bitarray.jl	/^function BitArray{N}(A::AbstractArray{T,N}) where N where T$/;"	f
BitArray	base/bitarray.jl	/^function BitArray{N}(A::Array{Bool,N}) where N$/;"	f
BitArray	base/bitarray.jl	/^mutable struct BitArray{N} <: AbstractArray{Bool, N}$/;"	f
BitArray	test/show.jl	/^    function BitArray(undef, dims::Int...)$/;"	f
BitFloatType	stdlib/Random/src/Random.jl	/^const BitFloatType = Union{Type{Float16},Type{Float32},Type{Float64}}$/;"	v
BitInteger	base/int.jl	/^const BitInteger       = Union{BitInteger_types...}$/;"	v
BitInteger32	base/int.jl	/^const BitInteger32     = Union{BitInteger32_types...}$/;"	v
BitInteger32_types	base/int.jl	/^const BitInteger32_types     = (BitSigned32_types..., BitUnsigned32_types...)$/;"	v
BitInteger64	base/int.jl	/^const BitInteger64     = Union{BitInteger64_types...}$/;"	v
BitInteger64_types	base/int.jl	/^const BitInteger64_types     = (BitSigned64_types..., BitUnsigned64_types...)$/;"	v
BitIntegerSmall	base/int.jl	/^const BitIntegerSmall  = Union{BitIntegerSmall_types...}$/;"	v
BitIntegerSmall_types	base/int.jl	/^const BitIntegerSmall_types  = (BitSignedSmall_types..., BitUnsignedSmall_types...)$/;"	v
BitIntegerType	base/int.jl	/^const BitIntegerType = Union{map(T->Type{T}, BitInteger_types)...}$/;"	v
BitInteger_types	base/int.jl	/^const BitInteger_types       = (BitSigned_types..., BitUnsigned_types...)$/;"	v
BitMaskedBitArray	base/broadcast.jl	/^@inline function BitMaskedBitArray(parent::BitArray{N}, mask::BitArray{M}) where {N,M}$/;"	f
BitMaskedBitArray	base/broadcast.jl	/^struct BitMaskedBitArray{N,M}$/;"	f
BitMatrix	base/bitarray.jl	/^const BitMatrix = BitArray{2}$/;"	v
BitPerm	test/tuple.jl	/^    function BitPerm(p::NTuple{8,UInt8})$/;"	f
BitPerm_19352	test/tuple.jl	/^    BitPerm_19352(xs::Vararg{Any,8}) = BitPerm(map(UInt8, xs))$/;"	f
BitPerm_19352	test/tuple.jl	/^struct BitPerm_19352$/;"	f
BitSet	base/bitset.jl	/^    BitSet() = new(sizehint!(zeros(UInt64, 0), 4), NO_OFFSET)$/;"	f
BitSet	base/bitset.jl	/^BitSet(itr) = union!(BitSet(), itr)$/;"	f
BitSet	base/bitset.jl	/^mutable struct BitSet <: AbstractSet{Int}$/;"	f
BitSigned	base/int.jl	/^const BitSigned        = Union{BitSigned_types...}$/;"	v
BitSigned32	base/int.jl	/^const BitSigned32      = Union{BitSigned32_types...}$/;"	v
BitSigned32_types	base/int.jl	/^const BitSigned32_types      = (Int8, Int16, Int32)$/;"	v
BitSigned64	base/int.jl	/^const BitSigned64      = Union{BitSigned64_types...}$/;"	v
BitSigned64T	base/int.jl	/^const BitSigned64T     = Union{Type{Int8}, Type{Int16}, Type{Int32}, Type{Int64}}$/;"	v
BitSigned64_types	base/int.jl	/^const BitSigned64_types      = (BitSigned32_types..., Int64)$/;"	v
BitSignedSmall	base/int.jl	/^const BitSignedSmall   = Union{BitSignedSmall_types...}$/;"	v
BitSignedSmall_types	base/int.jl	/^const BitSignedSmall_types   = Int === Int64 ? ( Int8,  Int16,  Int32) : ( Int8,  Int16)$/;"	v
BitSigned_types	base/int.jl	/^const BitSigned_types        = (BitSigned64_types..., Int128)$/;"	v
BitUnsigned	base/int.jl	/^const BitUnsigned      = Union{BitUnsigned_types...}$/;"	v
BitUnsigned32	base/int.jl	/^const BitUnsigned32    = Union{BitUnsigned32_types...}$/;"	v
BitUnsigned32_types	base/int.jl	/^const BitUnsigned32_types    = (UInt8, UInt16, UInt32)$/;"	v
BitUnsigned64	base/int.jl	/^const BitUnsigned64    = Union{BitUnsigned64_types...}$/;"	v
BitUnsigned64T	base/int.jl	/^const BitUnsigned64T   = Union{Type{UInt8}, Type{UInt16}, Type{UInt32}, Type{UInt64}}$/;"	v
BitUnsigned64_types	base/int.jl	/^const BitUnsigned64_types    = (BitUnsigned32_types..., UInt64)$/;"	v
BitUnsignedSmall	base/int.jl	/^const BitUnsignedSmall = Union{BitUnsignedSmall_types...}$/;"	v
BitUnsignedSmall_types	base/int.jl	/^const BitUnsignedSmall_types = Int === Int64 ? (UInt8, UInt16, UInt32) : (UInt8, UInt16)$/;"	v
BitUnsigned_types	base/int.jl	/^const BitUnsigned_types      = (BitUnsigned64_types..., UInt128)$/;"	v
BitVector	base/bitarray.jl	/^BitVector() = BitArray{1}(undef, 0)$/;"	f
BitVector	base/bitarray.jl	/^const BitVector = BitArray{1}$/;"	v
Bits	base/bitset.jl	/^const Bits = Vector{UInt64}$/;"	v
Bits22734	test/ccall.jl	/^struct Bits22734 <: Abstract22734$/;"	f
Bitwise Operators	doc/src/manual/mathematical-operations.md	/^## Bitwise Operators$/;"	s
BlameHunk	stdlib/LibGit2/src/types.jl	/^@kwdef struct BlameHunk$/;"	f
BlameOptions	stdlib/LibGit2/src/types.jl	/^@kwdef struct BlameOptions$/;"	f
BlasComplex	stdlib/LinearAlgebra/src/LinearAlgebra.jl	/^const BlasComplex = Union{ComplexF64,ComplexF32}$/;"	v
BlasFloat	stdlib/LinearAlgebra/src/LinearAlgebra.jl	/^const BlasFloat = Union{Float64,Float32,ComplexF64,ComplexF32}$/;"	v
BlasReal	stdlib/LinearAlgebra/src/LinearAlgebra.jl	/^const BlasReal = Union{Float64,Float32}$/;"	v
Block	src/cgmemmgr.cpp	/^    Block(Block &&other)$/;"	f	struct:__anon06c686bc0111::Block	file:
Block	src/cgmemmgr.cpp	/^struct Block {$/;"	s	namespace:__anon06c686bc0111	file:
Block forms	doc/src/devdocs/ast.md	/^### Block forms$/;"	S
BlockLiveness	base/compiler/ssair/slot2ssa.jl	/^struct BlockLiveness$/;"	f
BlockQuote	stdlib/Markdown/src/Common/block.jl	/^BlockQuote() = BlockQuote([])$/;"	f
BlockQuote	stdlib/Markdown/src/Common/block.jl	/^mutable struct BlockQuote$/;"	f
Body	test/core.jl	/^    Body() = new(0, 0)$/;"	f
Body	test/core.jl	/^mutable struct Body <: Component$/;"	f
Bold	stdlib/Markdown/docs/src/index.md	/^### Bold$/;"	S
Bold	stdlib/Markdown/src/Common/inline.jl	/^mutable struct Bold$/;"	f
Bool	base/docs/basedocs.jl	/^primitive type Bool <: Integer 8 end$/;"	f
Bool	base/float.jl	/^Bool(x::Float16) = x==0 ? false : x==1 ? true : throw(InexactError(:Bool, Bool, x))$/;"	f
Bool	base/float.jl	/^Bool(x::Real) = x==0 ? false : x==1 ? true : throw(InexactError(:Bool, Bool, x))$/;"	f
Bool	base/mpfr.jl	/^function Bool(x::BigFloat)$/;"	f
Bool	base/rational.jl	/^Bool(x::Rational) = x==0 ? false : x==1 ? true :$/;"	f
Bottom	base/essentials.jl	/^const Bottom = Union{}$/;"	v
Bottom	test/core.jl	/^const Bottom = Union{}$/;"	v
Bounded	test/errorshow.jl	/^struct Bounded  # not an AbstractArray$/;"	f
Bounds checking	doc/src/devdocs/boundscheck.md	/^# Bounds checking$/;"	c
BoundsError	base/boot.jl	/^    BoundsError() = new()$/;"	f
BoundsError	base/boot.jl	/^    BoundsError(@nospecialize(a)) = (@_noinline_meta; new(a))$/;"	f
BoundsError	base/boot.jl	/^    BoundsError(@nospecialize(a), i) = (@_noinline_meta; new(a,i))$/;"	f
BoundsError	base/boot.jl	/^struct BoundsError <: Exception$/;"	f
BoundsError	src/flisp/flisp.h	/^    value_t OutOfMemoryError, DivideError, BoundsError, EnumerationError;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
Box	base/boot.jl	/^    Box() = new()$/;"	f
Box	base/boot.jl	/^    Box(@nospecialize(x)) = new(x)$/;"	f
Box	base/boot.jl	/^mutable struct Box$/;"	f
Boxed	src/codegen.cpp	/^        Boxed = 0,$/;"	e	enum:jl_returninfo_t::CallingConv	file:
Bracketed forms	doc/src/devdocs/ast.md	/^### Bracketed forms$/;"	S
Break functions into multiple definitions	doc/src/manual/performance-tips.md	/^## Break functions into multiple definitions$/;"	s
Breaking changes	HISTORY.md	/^Breaking changes$/;"	s
Breduc	test/reducedim.jl	/^Breduc = rand(64, 3)$/;"	v
Broadcast	base/broadcast.jl	/^module Broadcast$/;"	f
Broadcast Styles	doc/src/manual/interfaces.md	/^### Broadcast Styles$/;"	S
Broadcast and vectorization	doc/src/base/arrays.md	/^## Broadcast and vectorization$/;"	s
Broadcast.BroadcastStyle	base/broadcast.jl	/^  Broadcast.BroadcastStyle(::$S, ::$T) = $U()$/;"	f
Broadcast.BroadcastStyle	base/broadcast.jl	/^  Broadcast.BroadcastStyle(::$T, ::$S) = $V()$/;"	f
Broadcast.BroadcastStyle	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^Broadcast.BroadcastStyle(::StructuredMatrixStyle, ::StructuredMatrixStyle) = DefaultArrayStyle{2/;"	f
Broadcast.BroadcastStyle	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^Broadcast.BroadcastStyle(::StructuredMatrixStyle{<:Bidiagonal}, ::StructuredMatrixStyle{<:Union{/;"	f
Broadcast.BroadcastStyle	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^Broadcast.BroadcastStyle(::StructuredMatrixStyle{<:Diagonal}, ::StructuredMatrixStyle{<:Diagonal/;"	f
Broadcast.BroadcastStyle	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^Broadcast.BroadcastStyle(::StructuredMatrixStyle{<:Diagonal}, ::StructuredMatrixStyle{<:Union{Bi/;"	f
Broadcast.BroadcastStyle	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^Broadcast.BroadcastStyle(::StructuredMatrixStyle{<:Diagonal}, ::StructuredMatrixStyle{<:Union{Lo/;"	f
Broadcast.BroadcastStyle	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^Broadcast.BroadcastStyle(::StructuredMatrixStyle{<:Diagonal}, ::StructuredMatrixStyle{<:Union{Up/;"	f
Broadcast.BroadcastStyle	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^Broadcast.BroadcastStyle(::StructuredMatrixStyle{<:LowerTriangular}, ::StructuredMatrixStyle{<:U/;"	f
Broadcast.BroadcastStyle	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^Broadcast.BroadcastStyle(::StructuredMatrixStyle{<:SymTridiagonal}, ::StructuredMatrixStyle{<:Un/;"	f
Broadcast.BroadcastStyle	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^Broadcast.BroadcastStyle(::StructuredMatrixStyle{<:Tridiagonal}, ::StructuredMatrixStyle{<:Union/;"	f
Broadcast.BroadcastStyle	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^Broadcast.BroadcastStyle(::StructuredMatrixStyle{<:UnitLowerTriangular}, ::StructuredMatrixStyle/;"	f
Broadcast.BroadcastStyle	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^Broadcast.BroadcastStyle(::StructuredMatrixStyle{<:UnitUpperTriangular}, ::StructuredMatrixStyle/;"	f
Broadcast.BroadcastStyle	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^Broadcast.BroadcastStyle(::StructuredMatrixStyle{<:UpperTriangular}, ::StructuredMatrixStyle{<:U/;"	f
Broadcast.BroadcastStyle	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^Broadcast.BroadcastStyle(::Type{T}) where {T<:StructuredMatrix} = StructuredMatrixStyle{T}()$/;"	f
Broadcast.BroadcastStyle	stdlib/SparseArrays/src/higherorderfns.jl	/^Broadcast.BroadcastStyle(::PromoteToSparse, ::Broadcast.Style{Tuple}) = Broadcast.DefaultArraySt/;"	f
Broadcast.BroadcastStyle	stdlib/SparseArrays/src/higherorderfns.jl	/^Broadcast.BroadcastStyle(::PromoteToSparse, ::LinearAlgebra.StructuredMatrixStyle{<:StructuredMa/;"	f
Broadcast.BroadcastStyle	stdlib/SparseArrays/src/higherorderfns.jl	/^Broadcast.BroadcastStyle(::PromoteToSparse, ::SPVM) = PromoteToSparse()$/;"	f
Broadcast.BroadcastStyle	stdlib/SparseArrays/src/higherorderfns.jl	/^Broadcast.BroadcastStyle(::SPVM, ::Broadcast.DefaultArrayStyle{1}) = PromoteToSparse()$/;"	f
Broadcast.BroadcastStyle	stdlib/SparseArrays/src/higherorderfns.jl	/^Broadcast.BroadcastStyle(::SPVM, ::Broadcast.DefaultArrayStyle{2}) = PromoteToSparse()$/;"	f
Broadcast.BroadcastStyle	stdlib/SparseArrays/src/higherorderfns.jl	/^Broadcast.BroadcastStyle(::SPVM, ::LinearAlgebra.StructuredMatrixStyle{<:StructuredMatrix}) = Pr/;"	f
Broadcast.BroadcastStyle	stdlib/SparseArrays/src/higherorderfns.jl	/^Broadcast.BroadcastStyle(::SparseMatStyle, ::Broadcast.Style{Tuple}) = Broadcast.DefaultArraySty/;"	f
Broadcast.BroadcastStyle	stdlib/SparseArrays/src/higherorderfns.jl	/^Broadcast.BroadcastStyle(::SparseMatStyle, ::SparseVecStyle) = SparseMatStyle()$/;"	f
Broadcast.BroadcastStyle	stdlib/SparseArrays/src/higherorderfns.jl	/^Broadcast.BroadcastStyle(::SparseVecStyle, ::Broadcast.Style{Tuple}) = Broadcast.DefaultArraySty/;"	f
Broadcast.BroadcastStyle	stdlib/SparseArrays/src/higherorderfns.jl	/^Broadcast.BroadcastStyle(::Type{<:AbstractSparseMatrixCSC}) = SparseMatStyle()$/;"	f
Broadcast.BroadcastStyle	stdlib/SparseArrays/src/higherorderfns.jl	/^Broadcast.BroadcastStyle(::Type{<:Adjoint{T,<:Union{SparseVector,SparseMatrixCSC}} where T}) = P/;"	f
Broadcast.BroadcastStyle	stdlib/SparseArrays/src/higherorderfns.jl	/^Broadcast.BroadcastStyle(::Type{<:SparseVector}) = SparseVecStyle()$/;"	f
Broadcast.BroadcastStyle	stdlib/SparseArrays/src/higherorderfns.jl	/^Broadcast.BroadcastStyle(::Type{<:Transpose{T,<:Union{SparseVector,SparseMatrixCSC}} where T}) =/;"	f
Broadcast.BroadcastStyle	stdlib/SparseArrays/src/higherorderfns.jl	/^Broadcast.BroadcastStyle(s::SPVM, ::Broadcast.AbstractArrayStyle{0}) = s$/;"	f
Broadcast.BroadcastStyle	stdlib/SparseArrays/src/higherorderfns.jl	/^Broadcast.BroadcastStyle(s::SPVM, ::Broadcast.DefaultArrayStyle{0}) = s$/;"	f
Broadcast.BroadcastStyle	test/broadcast.jl	/^Broadcast.BroadcastStyle(::Type{T22053}) = Broadcast.Style{T22053}()$/;"	f
Broadcast.axes	test/broadcast.jl	/^Broadcast.axes(::T22053) = ()$/;"	f
Broadcast.broadcast_preserving_zero_d	stdlib/LinearAlgebra/src/adjtrans.jl	/^Broadcast.broadcast_preserving_zero_d(f, avs::Union{Number,AdjointAbsVec}...) = adjoint(broadcas/;"	f
Broadcast.broadcast_preserving_zero_d	stdlib/LinearAlgebra/src/adjtrans.jl	/^Broadcast.broadcast_preserving_zero_d(f, tvs::Union{Number,TransposeAbsVec}...) = transpose(broa/;"	f
Broadcast.broadcastable	base/version.jl	/^Broadcast.broadcastable(v::VersionNumber) = Ref(v)$/;"	f
Broadcast.broadcastable	test/broadcast.jl	/^Broadcast.broadcastable(t::T22053) = t$/;"	f
Broadcast.broadcasted	stdlib/LinearAlgebra/src/diagonal.jl	/^Broadcast.broadcasted(::typeof(*ₛ), out, beta) =$/;"	f
Broadcast.broadcasted	stdlib/LinearAlgebra/src/uniformscaling.jl	/^Broadcast.broadcasted(::typeof(*), J::UniformScaling,x::Number) = UniformScaling(J.λ*x)$/;"	f
Broadcast.broadcasted	stdlib/LinearAlgebra/src/uniformscaling.jl	/^Broadcast.broadcasted(::typeof(*), x::Number,J::UniformScaling) = UniformScaling(x*J.λ)$/;"	f
Broadcast.broadcasted	stdlib/LinearAlgebra/src/uniformscaling.jl	/^Broadcast.broadcasted(::typeof(\/), J::UniformScaling,x::Number) = UniformScaling(J.λ\/x)$/;"	f
BroadcastStyle	base/broadcast.jl	/^    BroadcastStyle(::Primary, ::Secondary) = Primary()$/;"	f
BroadcastStyle	base/broadcast.jl	/^    BroadcastStyle(::Style1, ::Style2) = Style3()$/;"	f
BroadcastStyle	base/broadcast.jl	/^Base.@pure function BroadcastStyle(a::A, b::B) where {A<:AbstractArrayStyle{M},B<:AbstractArrayS/;"	f
BroadcastStyle	base/broadcast.jl	/^BroadcastStyle(::ArrayStyle, ::ArrayStyle)               = Unknown()$/;"	f
BroadcastStyle	base/broadcast.jl	/^BroadcastStyle(::BroadcastStyle, ::BroadcastStyle) = Unknown()$/;"	f
BroadcastStyle	base/broadcast.jl	/^BroadcastStyle(::Type{<:AbstractArray{T,N}}) where {T,N} = DefaultArrayStyle{N}()$/;"	f
BroadcastStyle	base/broadcast.jl	/^BroadcastStyle(::Type{<:Broadcasted{Style}}) where {Style} = Style()$/;"	f
BroadcastStyle	base/broadcast.jl	/^BroadcastStyle(::Type{<:Broadcasted{S}}) where {S<:Union{Nothing,Unknown}} =$/;"	f
BroadcastStyle	base/broadcast.jl	/^BroadcastStyle(::Type{<:Tuple}) = Style{Tuple}()$/;"	f
BroadcastStyle	base/broadcast.jl	/^BroadcastStyle(::Type{T}) where {T} = DefaultArrayStyle{ndims(T)}()$/;"	f
BroadcastStyle	base/broadcast.jl	/^BroadcastStyle(::Type{Union{}}) = Unknown()  # ambiguity resolution$/;"	f
BroadcastStyle	base/broadcast.jl	/^BroadcastStyle(::Unknown, ::Unknown) = Unknown()$/;"	f
BroadcastStyle	base/broadcast.jl	/^BroadcastStyle(a::AbstractArrayStyle, ::Style{Tuple})    = a$/;"	f
BroadcastStyle	base/broadcast.jl	/^BroadcastStyle(a::AbstractArrayStyle{0}, b::Style{Tuple}) = b$/;"	f
BroadcastStyle	base/broadcast.jl	/^BroadcastStyle(a::AbstractArrayStyle{Any}, ::DefaultArrayStyle) = a$/;"	f
BroadcastStyle	base/broadcast.jl	/^BroadcastStyle(a::AbstractArrayStyle{M}, ::DefaultArrayStyle{N}) where {M,N} =$/;"	f
BroadcastStyle	base/broadcast.jl	/^abstract type BroadcastStyle end$/;"	f
Broadcasted	base/broadcast.jl	/^Broadcasted(f::F, args::Args, axes=nothing) where {F, Args<:Tuple} =$/;"	f
Broadcasted	base/broadcast.jl	/^function Broadcasted{Style}(f::F, args::Args, axes=nothing) where {Style, F, Args<:Tuple}$/;"	f
Broadcasted	base/broadcast.jl	/^struct Broadcasted{Style<:Union{Nothing,BroadcastStyle}, Axes, F, Args<:Tuple}$/;"	f
Broadcasting	doc/src/manual/arrays.md	/^## Broadcasting$/;"	s
Broken	src/llvm-gc-invariant-verifier.cpp	/^    bool Broken = false;$/;"	m	struct:GCInvariantVerifier	typeref:typename:bool	file:
Broken	stdlib/Test/src/Test.jl	/^mutable struct Broken <: Result$/;"	f
Broken Locks	doc/src/devdocs/locks.md	/^## Broken Locks$/;"	s
Broken Tests	stdlib/Test/docs/src/index.md	/^## Broken Tests$/;"	s
BrokenSignedInt	base/checked.jl	/^const BrokenSignedInt = brokenSignedInt$/;"	v
BrokenSignedIntMul	base/checked.jl	/^const BrokenSignedIntMul = brokenSignedIntMul$/;"	v
BrokenUnsignedInt	base/checked.jl	/^const BrokenUnsignedInt = brokenUnsignedInt$/;"	v
BrokenUnsignedIntMul	base/checked.jl	/^const BrokenUnsignedIntMul = brokenUnsignedIntMul$/;"	v
Browser-based workflow	doc/src/manual/workflow-tips.md	/^## Browser-based workflow$/;"	s
BslashCompletion	stdlib/REPL/src/REPLCompletions.jl	/^struct BslashCompletion <: Completion$/;"	f
Buffer	stdlib/Base64/src/buffer.jl	/^    function Buffer(bufsize)$/;"	f
Buffer	stdlib/Base64/src/buffer.jl	/^mutable struct Buffer$/;"	f
Buffer	stdlib/LibGit2/src/types.jl	/^Buffer() = Buffer(C_NULL, 0, 0)$/;"	f
Buffer	stdlib/LibGit2/src/types.jl	/^struct Buffer$/;"	f
BufferStream	base/stream.jl	/^    BufferStream() = new(PipeBuffer(), Threads.Condition(), true, false, ReentrantLock())$/;"	f
BufferStream	base/stream.jl	/^mutable struct BufferStream <: LibuvStream$/;"	f
Bugfixes and performance updates	HISTORY.md	/^Bugfixes and performance updates$/;"	s
Build dependencies	doc/build/build.md	/^## Build dependencies$/;"	s
Build improvements	HISTORY.md	/^Build improvements$/;"	s
Build process is slow/eats memory/hangs my computer	doc/build/windows.md	/^### Build process is slow\/eats memory\/hangs my computer$/;"	S
Build system changes	HISTORY.md	/^Build system changes$/;"	s
Build system changes	NEWS.md	/^Build system changes$/;"	s
BuildRoot	deps/srccache/patchelf-0.9/patchelf.spec	/^BuildRoot: %{_tmppath}\/%{name}-%{version}-buildroot$/;"	t
BuildRoot	deps/srccache/patchelf-0.9/patchelf.spec.in	/^BuildRoot: %{_tmppath}\/%{name}-%{version}-buildroot$/;"	t
Building	doc/README.md	/^## Building$/;"	s
Building Julia	README.md	/^## Building Julia$/;"	s
Building Julia	doc/build/build.md	/^## Building Julia$/;"	s
Building Julia (Detailed)	doc/build/build.md	/^# Building Julia (Detailed)$/;"	c
Building Julia with a different version of LLVM	doc/src/devdocs/llvm.md	/^## Building Julia with a different version of LLVM$/;"	s
Building a similar type with a different type parameter	doc/src/manual/methods.md	/^### Building a similar type with a different type parameter$/;"	S
Building an advanced macro	doc/src/manual/metaprogramming.md	/^### Building an advanced macro$/;"	S
Building test binaries	doc/build/distributing.md	/^## Building test binaries$/;"	s
Building the Julia system image	doc/src/devdocs/sysimg.md	/^## Building the Julia system image$/;"	s
Built-in `Exception`s	doc/src/manual/control-flow.md	/^### Built-in `Exception`s$/;"	S
BuiltinFunctionRef	src/staticdata.c	/^    BuiltinFunctionRef$/;"	e	enum:RefTags	file:
BuiltinInts	base/boot.jl	/^const BuiltinInts = Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UI/;"	v
Builtins	doc/src/devdocs/functions.md	/^## Builtins$/;"	s
Bunch	test/vecelement.jl	/^struct Bunch{N,T}$/;"	f
BunchKaufman	stdlib/LinearAlgebra/src/bunchkaufman.jl	/^    function BunchKaufman{T,S}(LD, ipiv, uplo, symmetric, rook, info) where {T,S<:AbstractMatrix/;"	f
BunchKaufman	stdlib/LinearAlgebra/src/bunchkaufman.jl	/^struct BunchKaufman{T,S<:AbstractMatrix} <: Factorization{T}$/;"	f
BundleHasStrictIdentifier	contrib/mac/frameworkapp/framework-component.plist	/^		<key>BundleHasStrictIdentifier<\/key>$/;"	k
BundleIsRelocatable	contrib/mac/frameworkapp/framework-component.plist	/^		<key>BundleIsRelocatable<\/key>$/;"	k
BundleIsVersionChecked	contrib/mac/frameworkapp/framework-component.plist	/^		<key>BundleIsVersionChecked<\/key>$/;"	k
BundleOverwriteAction	contrib/mac/frameworkapp/framework-component.plist	/^		<key>BundleOverwriteAction<\/key>$/;"	k
By	base/ordering.jl	/^struct By{T} <: Ordering$/;"	f
By	test/compiler/inference.jl	/^struct By{T,O}$/;"	f
ByteArray	base/strings/string.jl	/^const ByteArray = Union{Vector{UInt8},Vector{Int8}}$/;"	v
ByteSwap64	src/support/utils.h	/^STATIC_INLINE uint64_t ByteSwap64(uint64_t x)$/;"	f	typeref:typename:STATIC_INLINE uint64_t
C	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    C(a::A) = C(a.x)$/;"	f
C	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    struct C$/;"	f
C	test/docs.jl	/^const C = 1$/;"	v
C	test/docs.jl	/^mutable struct C <: A end$/;"	f
C	test/offsetarray.jl	/^C = similar(A)$/;"	v
C ABI	doc/src/devdocs/callconv.md	/^## C ABI$/;"	s
C Interface	doc/src/base/c.md	/^# C Interface$/;"	c
C Standard Library	doc/src/base/libc.md	/^# C Standard Library$/;"	c
C Wrapper Examples	doc/src/manual/calling-c-and-fortran-code.md	/^## C Wrapper Examples$/;"	s
C++	doc/src/manual/calling-c-and-fortran-code.md	/^## C++$/;"	s
C0	stdlib/LinearAlgebra/test/matmul.jl	/^        C0() = (C .= _C0; C)  # reset C but don't change the container type$/;"	f
C11597	test/core.jl	/^abstract type C11597{T<:Union{Nothing, Int}} end$/;"	f
C14919	test/core.jl	/^struct C14919 <: A14919; end$/;"	f
C16424	test/core.jl	/^struct C16424{T,S}$/;"	f
C16767	test/core.jl	/^mutable struct C16767{T}$/;"	f
C18399	test/compiler/inference.jl	/^C18399 = TSlow18399{Int}(1)$/;"	v
C20992	test/subtype.jl	/^struct C20992{S,n,T,D,d} <: B20992{NTuple{n,S},T,D,d}$/;"	f
C21923	test/core.jl	/^struct C21923{T,N}; v::C21923{T,M} where M; end$/;"	f
C25604	test/precompile.jl	/^            module C25604$/;"	f
C27181	test/core.jl	/^struct C27181$/;"	f
C28593	test/syntax.jl	/^        primitive type C28593{S<:Real, V<:AbstractVector{S}} 32 end$/;"	f
C4413	test/core.jl	/^mutable struct C4413 end$/;"	f
C74685	test/docs.jl	/^abstract type C74685{T,N} <: AbstractArray{T,N} end$/;"	f
CALLBACK_ABI	src/interpreter-stacktrace.c	/^#define CALLBACK_ABI /;"	d	file:
CALLBACK_ABI	src/interpreter-stacktrace.c	/^#define CALLBACK_ABI$/;"	d	file:
CALL_FN_W_10W	deps/valgrind/valgrind.h	/^#define CALL_FN_W_10W(/;"	d
CALL_FN_W_11W	deps/valgrind/valgrind.h	/^#define CALL_FN_W_11W(/;"	d
CALL_FN_W_12W	deps/valgrind/valgrind.h	/^#define CALL_FN_W_12W(/;"	d
CALL_FN_W_5W	deps/valgrind/valgrind.h	/^#define CALL_FN_W_5W(/;"	d
CALL_FN_W_6W	deps/valgrind/valgrind.h	/^#define CALL_FN_W_6W(/;"	d
CALL_FN_W_7W	deps/valgrind/valgrind.h	/^#define CALL_FN_W_7W(/;"	d
CALL_FN_W_8W	deps/valgrind/valgrind.h	/^#define CALL_FN_W_8W(/;"	d
CALL_FN_W_9W	deps/valgrind/valgrind.h	/^#define CALL_FN_W_9W(/;"	d
CALL_FN_W_W	deps/valgrind/valgrind.h	/^#define CALL_FN_W_W(/;"	d
CALL_FN_W_WW	deps/valgrind/valgrind.h	/^#define CALL_FN_W_WW(/;"	d
CALL_FN_W_WWW	deps/valgrind/valgrind.h	/^#define CALL_FN_W_WWW(/;"	d
CALL_FN_W_WWWW	deps/valgrind/valgrind.h	/^#define CALL_FN_W_WWWW(/;"	d
CALL_FN_W_v	deps/valgrind/valgrind.h	/^#define CALL_FN_W_v(/;"	d
CALL_FN_v_5W	deps/valgrind/valgrind.h	/^#define CALL_FN_v_5W(/;"	d
CALL_FN_v_6W	deps/valgrind/valgrind.h	/^#define CALL_FN_v_6W(/;"	d
CALL_FN_v_7W	deps/valgrind/valgrind.h	/^#define CALL_FN_v_7W(/;"	d
CALL_FN_v_W	deps/valgrind/valgrind.h	/^#define CALL_FN_v_W(/;"	d
CALL_FN_v_WW	deps/valgrind/valgrind.h	/^#define CALL_FN_v_WW(/;"	d
CALL_FN_v_WWW	deps/valgrind/valgrind.h	/^#define CALL_FN_v_WWW(/;"	d
CALL_FN_v_WWWW	deps/valgrind/valgrind.h	/^#define CALL_FN_v_WWWW(/;"	d
CALL_FN_v_v	deps/valgrind/valgrind.h	/^#define CALL_FN_v_v(/;"	d
CC	deps/srccache/patchelf-0.9/Makefile.in	/^CC = @CC@$/;"	m
CC	deps/srccache/patchelf-0.9/src/Makefile.in	/^CC = @CC@$/;"	m
CC	deps/srccache/patchelf-0.9/tests/Makefile.in	/^CC = @CC@$/;"	m
CCDEPMODE	deps/srccache/patchelf-0.9/Makefile.in	/^CCDEPMODE = @CCDEPMODE@$/;"	m
CCDEPMODE	deps/srccache/patchelf-0.9/src/Makefile.in	/^CCDEPMODE = @CCDEPMODE@$/;"	m
CCDEPMODE	deps/srccache/patchelf-0.9/tests/Makefile.in	/^CCDEPMODE = @CCDEPMODE@$/;"	m
CCLD	deps/srccache/patchelf-0.9/src/Makefile.in	/^CCLD = $(CC)$/;"	m
CCLD	deps/srccache/patchelf-0.9/tests/Makefile.in	/^CCLD = $(CC)$/;"	m
CCLD	src/flisp/Makefile	/^CCLD := $(CC)$/;"	m
CCLD	src/flisp/Makefile	/^CCLD := $(LD)$/;"	m
CFBundleDevelopmentRegion	contrib/mac/frameworkapp/ExecSandbox/Info.plist	/^	<key>CFBundleDevelopmentRegion<\/key>$/;"	k
CFBundleDevelopmentRegion	contrib/mac/frameworkapp/JuliaLauncher/Info.plist	/^	<key>CFBundleDevelopmentRegion<\/key>$/;"	k
CFBundleDisplayName	contrib/mac/frameworkapp/ExecSandbox/Info.plist	/^	<key>CFBundleDisplayName<\/key>$/;"	k
CFBundleExecutable	contrib/mac/frameworkapp/ExecSandbox/Info.plist	/^	<key>CFBundleExecutable<\/key>$/;"	k
CFBundleExecutable	contrib/mac/frameworkapp/JuliaLauncher/Info.plist	/^	<key>CFBundleExecutable<\/key>$/;"	k
CFBundleIconFile	contrib/mac/frameworkapp/JuliaLauncher/Info.plist	/^	<key>CFBundleIconFile<\/key>$/;"	k
CFBundleIdentifier	contrib/mac/frameworkapp/ExecSandbox/Info.plist	/^	<key>CFBundleIdentifier<\/key>$/;"	k
CFBundleIdentifier	contrib/mac/frameworkapp/JuliaLauncher/Info.plist	/^	<key>CFBundleIdentifier<\/key>$/;"	k
CFBundleInfoDictionaryVersion	contrib/mac/frameworkapp/ExecSandbox/Info.plist	/^	<key>CFBundleInfoDictionaryVersion<\/key>$/;"	k
CFBundleInfoDictionaryVersion	contrib/mac/frameworkapp/JuliaLauncher/Info.plist	/^	<key>CFBundleInfoDictionaryVersion<\/key>$/;"	k
CFBundleName	contrib/mac/frameworkapp/ExecSandbox/Info.plist	/^	<key>CFBundleName<\/key>$/;"	k
CFBundleName	contrib/mac/frameworkapp/JuliaLauncher/Info.plist	/^	<key>CFBundleName<\/key>$/;"	k
CFBundlePackageType	contrib/mac/frameworkapp/ExecSandbox/Info.plist	/^	<key>CFBundlePackageType<\/key>$/;"	k
CFBundlePackageType	contrib/mac/frameworkapp/JuliaLauncher/Info.plist	/^	<key>CFBundlePackageType<\/key>$/;"	k
CFBundleShortVersionString	contrib/mac/frameworkapp/ExecSandbox/Info.plist	/^	<key>CFBundleShortVersionString<\/key>$/;"	k
CFBundleShortVersionString	contrib/mac/frameworkapp/JuliaLauncher/Info.plist	/^	<key>CFBundleShortVersionString<\/key>$/;"	k
CFBundleVersion	contrib/mac/frameworkapp/ExecSandbox/Info.plist	/^	<key>CFBundleVersion<\/key>$/;"	k
CFBundleVersion	contrib/mac/frameworkapp/JuliaLauncher/Info.plist	/^	<key>CFBundleVersion<\/key>$/;"	k
CFG	base/compiler/ssair/ir.jl	/^struct CFG$/;"	f
CFGInliningState	base/compiler/ssair/inlining.jl	/^function CFGInliningState(ir::IRCode)$/;"	f
CFGInliningState	base/compiler/ssair/inlining.jl	/^mutable struct CFGInliningState$/;"	f
CFLAGS	deps/srccache/patchelf-0.9/Makefile.in	/^CFLAGS = @CFLAGS@$/;"	m
CFLAGS	deps/srccache/patchelf-0.9/src/Makefile.in	/^CFLAGS = @CFLAGS@$/;"	m
CFLAGS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^CFLAGS = @CFLAGS@$/;"	m
CFLAGS_ADD	test/embedding/Makefile	/^CFLAGS_ADD = $(shell $(JULIA_CONFIG) --cflags)$/;"	m
CFLAGS_ADD	test/gcext/Makefile	/^CFLAGS_ADD = $(shell $(JULIA_CONFIG) --cflags)$/;"	m
CFoo9378	test/core.jl	/^struct CFoo9378 <: FooB9378{Float64} end$/;"	f
CFunction	base/c.jl	/^struct CFunction <: Ref{Cvoid}$/;"	f
CHECKOUT_ALLOW_CONFLICTS	stdlib/LibGit2/src/consts.jl	/^const CHECKOUT_ALLOW_CONFLICTS         = Cuint(1 << 4)$/;"	v
CHECKOUT_CONFLICT_STYLE_DIFF3	stdlib/LibGit2/src/consts.jl	/^const CHECKOUT_CONFLICT_STYLE_DIFF3    = Cuint(1 << 21)$/;"	v
CHECKOUT_CONFLICT_STYLE_MERGE	stdlib/LibGit2/src/consts.jl	/^const CHECKOUT_CONFLICT_STYLE_MERGE    = Cuint(1 << 20)$/;"	v
CHECKOUT_DISABLE_PATHSPEC_MATCH	stdlib/LibGit2/src/consts.jl	/^const CHECKOUT_DISABLE_PATHSPEC_MATCH  = Cuint(1 << 13)$/;"	v
CHECKOUT_DONT_OVERWRITE_IGNORED	stdlib/LibGit2/src/consts.jl	/^const CHECKOUT_DONT_OVERWRITE_IGNORED  = Cuint(1 << 19)$/;"	v
CHECKOUT_DONT_REMOVE_EXISTING	stdlib/LibGit2/src/consts.jl	/^const CHECKOUT_DONT_REMOVE_EXISTING    = Cuint(1 << 22)$/;"	v
CHECKOUT_DONT_UPDATE_INDEX	stdlib/LibGit2/src/consts.jl	/^const CHECKOUT_DONT_UPDATE_INDEX       = Cuint(1 << 8)$/;"	v
CHECKOUT_FORCE	stdlib/LibGit2/src/consts.jl	/^const CHECKOUT_FORCE                   = Cuint(1 << 1)$/;"	v
CHECKOUT_NONE	stdlib/LibGit2/src/consts.jl	/^const CHECKOUT_NONE                    = Cuint(0)$/;"	v
CHECKOUT_NOTIFY_ALL	stdlib/LibGit2/src/consts.jl	/^const CHECKOUT_NOTIFY_ALL       = 0x0FFFF$/;"	v
CHECKOUT_NOTIFY_CONFLICT	stdlib/LibGit2/src/consts.jl	/^const CHECKOUT_NOTIFY_CONFLICT  = Cuint(1 << 0)$/;"	v
CHECKOUT_NOTIFY_DIRTY	stdlib/LibGit2/src/consts.jl	/^const CHECKOUT_NOTIFY_DIRTY     = Cuint(1 << 1)$/;"	v
CHECKOUT_NOTIFY_IGNORED	stdlib/LibGit2/src/consts.jl	/^const CHECKOUT_NOTIFY_IGNORED   = Cuint(1 << 4)$/;"	v
CHECKOUT_NOTIFY_NONE	stdlib/LibGit2/src/consts.jl	/^const CHECKOUT_NOTIFY_NONE      = Cuint(0)$/;"	v
CHECKOUT_NOTIFY_UNTRACKED	stdlib/LibGit2/src/consts.jl	/^const CHECKOUT_NOTIFY_UNTRACKED = Cuint(1 << 3)$/;"	v
CHECKOUT_NOTIFY_UPDATED	stdlib/LibGit2/src/consts.jl	/^const CHECKOUT_NOTIFY_UPDATED   = Cuint(1 << 2)$/;"	v
CHECKOUT_NO_REFRESH	stdlib/LibGit2/src/consts.jl	/^const CHECKOUT_NO_REFRESH              = Cuint(1 << 9)$/;"	v
CHECKOUT_RECREATE_MISSING	stdlib/LibGit2/src/consts.jl	/^const CHECKOUT_RECREATE_MISSING        = Cuint(1 << 2)$/;"	v
CHECKOUT_REMOVE_IGNORED	stdlib/LibGit2/src/consts.jl	/^const CHECKOUT_REMOVE_IGNORED          = Cuint(1 << 6)$/;"	v
CHECKOUT_REMOVE_UNTRACKED	stdlib/LibGit2/src/consts.jl	/^const CHECKOUT_REMOVE_UNTRACKED        = Cuint(1 << 5)$/;"	v
CHECKOUT_SAFE	stdlib/LibGit2/src/consts.jl	/^const CHECKOUT_SAFE                    = Cuint(1 << 0)$/;"	v
CHECKOUT_SKIP_LOCKED_DIRECTORIES	stdlib/LibGit2/src/consts.jl	/^const CHECKOUT_SKIP_LOCKED_DIRECTORIES = Cuint(1 << 18)$/;"	v
CHECKOUT_SKIP_UNMERGED	stdlib/LibGit2/src/consts.jl	/^const CHECKOUT_SKIP_UNMERGED           = Cuint(1 << 10)$/;"	v
CHECKOUT_UPDATE_ONLY	stdlib/LibGit2/src/consts.jl	/^const CHECKOUT_UPDATE_ONLY             = Cuint(1 << 7)$/;"	v
CHECKOUT_UPDATE_SUBMODULES	stdlib/LibGit2/src/consts.jl	/^const CHECKOUT_UPDATE_SUBMODULES       = Cuint(1 << 16)$/;"	v
CHECKOUT_UPDATE_SUBMODULES_IF_CHANGED	stdlib/LibGit2/src/consts.jl	/^const CHECKOUT_UPDATE_SUBMODULES_IF_CHANGED = Cuint(1 << 17)$/;"	v
CHECKOUT_USE_OURS	stdlib/LibGit2/src/consts.jl	/^const CHECKOUT_USE_OURS                = Cuint(1 << 11)$/;"	v
CHECKOUT_USE_THEIRS	stdlib/LibGit2/src/consts.jl	/^const CHECKOUT_USE_THEIRS              = Cuint(1 << 12)$/;"	v
CHECK_ALIGN8	src/flisp/flisp.c	/^#define CHECK_ALIGN8(/;"	d	file:
CHECK_BOUNDS	src/cgutils.cpp	/^#define CHECK_BOUNDS /;"	d	file:
CHK0	base/bitset.jl	/^const CHK0 = zero(UInt64)$/;"	v
CHOLMOD	stdlib/SuiteSparse/src/cholmod.jl	/^module CHOLMOD$/;"	f
CHOLMODException	stdlib/SuiteSparse/src/cholmod_h.jl	/^struct CHOLMODException <: Exception$/;"	f
CHOLMOD_A	stdlib/SuiteSparse/src/cholmod_h.jl	/^const CHOLMOD_A    = Int32(0)          # solve Ax=b$/;"	v
CHOLMOD_CONFIG	deps/suitesparse.mk	/^CHOLMOD_CONFIG := -DLONGBLAS='long long'$/;"	m
CHOLMOD_D	stdlib/SuiteSparse/src/cholmod_h.jl	/^const CHOLMOD_D    = Int32(6)          # solve Dx=b$/;"	v
CHOLMOD_DLt	stdlib/SuiteSparse/src/cholmod_h.jl	/^const CHOLMOD_DLt  = Int32(3)          # solve DL'x=b$/;"	v
CHOLMOD_L	stdlib/SuiteSparse/src/cholmod_h.jl	/^const CHOLMOD_L    = Int32(4)          # solve Lx=b$/;"	v
CHOLMOD_LD	stdlib/SuiteSparse/src/cholmod_h.jl	/^const CHOLMOD_LD   = Int32(2)          # solve LDx=b$/;"	v
CHOLMOD_LDLt	stdlib/SuiteSparse/src/cholmod_h.jl	/^const CHOLMOD_LDLt = Int32(1)          # solve LDL'x=b$/;"	v
CHOLMOD_Lt	stdlib/SuiteSparse/src/cholmod_h.jl	/^const CHOLMOD_Lt   = Int32(5)          # solve L'x=b$/;"	v
CHOLMOD_MIN_VERSION	stdlib/SuiteSparse/src/cholmod.jl	/^const CHOLMOD_MIN_VERSION = v"2.1.1"$/;"	v
CHOLMOD_P	stdlib/SuiteSparse/src/cholmod_h.jl	/^const CHOLMOD_P    = Int32(7)          # permute x=Px$/;"	v
CHOLMOD_Pt	stdlib/SuiteSparse/src/cholmod_h.jl	/^const CHOLMOD_Pt   = Int32(8)          # permute x=P'x$/;"	v
CI0	base/multidimensional.jl	/^const CI0 = Union{CartesianIndex{0}, AbstractArray{CartesianIndex{0}}}$/;"	v
CLANG_ANALYZE	src/Makefile	/^define CLANG_ANALYZE$/;"	m
CLEANFILES	deps/srccache/patchelf-0.9/tests/Makefile.am	/^CLEANFILES = big-dynstr.c$/;"	m
CLEANFILES	deps/srccache/patchelf-0.9/tests/Makefile.in	/^CLEANFILES = big-dynstr.c$/;"	m
CLONE_LOCAL	stdlib/LibGit2/src/consts.jl	/^const CLONE_LOCAL          = Cint(1)$/;"	v
CLONE_LOCAL_AUTO	stdlib/LibGit2/src/consts.jl	/^const CLONE_LOCAL_AUTO     = Cint(0)$/;"	v
CLONE_LOCAL_NO_LINKS	stdlib/LibGit2/src/consts.jl	/^const CLONE_LOCAL_NO_LINKS = Cint(3)$/;"	v
CLONE_NO_LOCAL	stdlib/LibGit2/src/consts.jl	/^const CLONE_NO_LOCAL       = Cint(2)$/;"	v
CMAKE_CC_ARG	deps/tools/common.mk	/^CMAKE_CC_ARG := $(CC_ARG)$/;"	m
CMAKE_COMMON	deps/tools/common.mk	/^CMAKE_COMMON := -DCMAKE_INSTALL_PREFIX:PATH=$(build_prefix) -DCMAKE_PREFIX_PATH=$(build_prefix)$/;"	m
CMAKE_CXX_ARG	deps/tools/common.mk	/^CMAKE_CXX_ARG := $(CXX_ARG)$/;"	m
CMAKE_CXX_COMPILER	deps/NATIVE.cmake	/^set(CMAKE_CXX_COMPILER c++)$/;"	v
CMAKE_C_COMPILER	deps/NATIVE.cmake	/^set(CMAKE_C_COMPILER cc)$/;"	v
CMAKE_GENERATOR_COMMAND	deps/tools/common.mk	/^CMAKE_GENERATOR_COMMAND := -G "Unix Makefiles"$/;"	m
CMAKE_GENERATOR_COMMAND	deps/tools/common.mk	/^CMAKE_GENERATOR_COMMAND := -G Ninja$/;"	m
CNAME	src/support/_setjmp.win32.S	/^#define CNAME /;"	d	file:
CNAME	src/support/_setjmp.win64.S	/^#define CNAME /;"	d	file:
COL	stdlib/SuiteSparse/src/cholmod_h.jl	/^const COL    = Int32(2)        # A = A*diag(s)$/;"	v
COMMA	src/flisp/flisp.h	/^    value_t BACKQUOTE, COMMA, COMMAAT, COMMADOT, FUNCTION;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
COMMAAT	src/flisp/flisp.h	/^    value_t BACKQUOTE, COMMA, COMMAAT, COMMADOT, FUNCTION;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
COMMADOT	src/flisp/flisp.h	/^    value_t BACKQUOTE, COMMA, COMMAAT, COMMADOT, FUNCTION;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
COMMAND-LINE OPTIONS	doc/man/julia.1	/^.SH "COMMAND-LINE OPTIONS"$/;"	s	title:JULIA
COMMAND_GROUP	stdlib/REPL/src/LineEdit.jl	/^const COMMAND_GROUP = Dict(command=>group for (group, commands) in COMMAND_GROUPS for command in/;"	v
COMMAND_GROUPS	stdlib/REPL/src/LineEdit.jl	/^const COMMAND_GROUPS =$/;"	v
COMMON_LIBS	src/Makefile	/^COMMON_LIBS := -L$(build_shlibdir) -L$(build_libdir) $(LIBUV) $(LIBUTF8PROC) $(NO_WHOLE_ARCHIVE)/;"	m
COMPILE	deps/srccache/patchelf-0.9/src/Makefile.in	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
COMPILE	deps/srccache/patchelf-0.9/tests/Makefile.in	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
COMPILER_SRCS	sysimage.mk	/^COMPILER_SRCS := $(addprefix $(JULIAHOME)\/, \\$/;"	m
COMPILE_MASK	base/pcre.jl	/^const COMPILE_MASK      =$/;"	v
COMPLEX	stdlib/SuiteSparse/src/cholmod_h.jl	/^const COMPLEX = Int32(2)       # a complex matrix (ANSI C99 compatible)$/;"	v
CONFIG	stdlib/REPL/src/TerminalMenus/config.jl	/^CONFIG = Dict()$/;"	v
CONFIG	stdlib/REPL/test/TerminalMenus/multiselect_menu.jl	/^CONFIG = TerminalMenus.CONFIG$/;"	v
CONFIG	stdlib/REPL/test/TerminalMenus/radio_menu.jl	/^CONFIG = TerminalMenus.CONFIG$/;"	v
CONFIGURE_COMMON	deps/tools/common.mk	/^CONFIGURE_COMMON := --prefix=$(abspath $(build_prefix)) --build=$(BUILD_MACHINE) --libdir=$(absp/;"	m
CONFIG_CLEAN_FILES	deps/srccache/patchelf-0.9/Makefile.in	/^CONFIG_CLEAN_FILES = patchelf.spec$/;"	m
CONFIG_CLEAN_FILES	deps/srccache/patchelf-0.9/src/Makefile.in	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	deps/srccache/patchelf-0.9/tests/Makefile.in	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	deps/srccache/patchelf-0.9/Makefile.in	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	deps/srccache/patchelf-0.9/src/Makefile.in	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	deps/srccache/patchelf-0.9/tests/Makefile.in	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONVERSION_DEFAULTS	stdlib/Dates/src/io.jl	/^const CONVERSION_DEFAULTS = IdDict{Type, Any}($/;"	v
CONVERSION_SPECIFIERS	stdlib/Dates/src/io.jl	/^const CONVERSION_SPECIFIERS = Dict{Char, Type}($/;"	v
CONVERSION_TRANSLATIONS	stdlib/Dates/src/io.jl	/^const CONVERSION_TRANSLATIONS = IdDict{Type, Any}($/;"	v
CONV_TO_INTTYPE	src/support/operators.c	/^#define CONV_TO_INTTYPE(/;"	d	file:
CONV_TO_INTTYPE	src/support/operators.c	/^CONV_TO_INTTYPE(int32)$/;"	f	typeref:typename:int64
COPY_STACKS	src/options.h	/^#define COPY_STACKS$/;"	d
COSH_SMALL_X	base/special/hyperbolic.jl	/^COSH_SMALL_X(::Type{Float32}) = 0.00024414062f0$/;"	f
COSH_SMALL_X	base/special/hyperbolic.jl	/^COSH_SMALL_X(::Type{Float64}) = 2.7755602085408512e-17$/;"	f
CPPFLAGS	deps/srccache/patchelf-0.9/Makefile.in	/^CPPFLAGS = @CPPFLAGS@$/;"	m
CPPFLAGS	deps/srccache/patchelf-0.9/src/Makefile.in	/^CPPFLAGS = @CPPFLAGS@$/;"	m
CPPFLAGS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^CPPFLAGS = @CPPFLAGS@$/;"	m
CPPFLAGS_ADD	test/embedding/Makefile	/^CPPFLAGS_ADD :=$/;"	m
CPPFLAGS_ADD	test/gcext/Makefile	/^CPPFLAGS_ADD :=$/;"	m
CPP_STDOUT	base/Makefile	/^CPP_STDOUT := $(CPP) -E$/;"	m
CPP_STDOUT	base/Makefile	/^CPP_STDOUT := $(CPP) -P$/;"	m
CPRIM_NWORDS	src/flisp/flisp.h	/^#define CPRIM_NWORDS /;"	d
CPU	src/processor_arm.cpp	/^enum class CPU : uint32_t {$/;"	g	namespace:ARM	typeref:typename:uint32_t	file:
CPU	src/processor_x86.cpp	/^enum class CPU : uint32_t {$/;"	g	namespace:X86	typeref:typename:uint32_t	file:
CPUID	src/processor_arm.cpp	/^struct CPUID {$/;"	s	namespace:ARM	file:
CPUSpec	src/processor.cpp	/^struct CPUSpec {$/;"	s	namespace:__anon839834ed0111	file:
CPU_THREADS	base/sysinfo.jl	/^CPU_THREADS = 1 # for bootstrap, changed on startup$/;"	v
CPUinfo	base/sysinfo.jl	/^    CPUinfo(model,speed,u,n,s,id,ir)=new(model,speed,u,n,s,id,ir)$/;"	f
CPUinfo	base/sysinfo.jl	/^CPUinfo(info::UV_cpu_info_t) = CPUinfo(unsafe_string(info.model), info.speed,$/;"	f
CPUinfo	base/sysinfo.jl	/^mutable struct CPUinfo$/;"	f
CRC32_PTR	src/crc32c.c	/^#    define CRC32_PTR /;"	d	file:
CRC32c	stdlib/CRC32c/docs/src/index.md	/^# CRC32c$/;"	c
CRC32c	stdlib/CRC32c/src/CRC32c.jl	/^module CRC32c$/;"	f
CRC_TARGET	src/crc32c.c	/^#define CRC_TARGET /;"	d	file:
CREATE	src/APInt-C.cpp	/^#define CREATE(/;"	d	file:
CREDUI_INFO	base/util.jl	/^    struct CREDUI_INFO$/;"	f
CSCOPE	deps/srccache/patchelf-0.9/Makefile.in	/^CSCOPE = cscope$/;"	m
CSE	test/subtype.jl	/^struct CSE{X}$/;"	f
CSI	stdlib/REPL/src/Terminals.jl	/^const CSI = "\\x1b["$/;"	v
CTAGS	deps/srccache/patchelf-0.9/Makefile.in	/^CTAGS = ctags$/;"	m
CTAGS	deps/srccache/patchelf-0.9/Makefile.in	/^CTAGS: ctags$/;"	t
CTAGS	deps/srccache/patchelf-0.9/src/Makefile.in	/^CTAGS = ctags$/;"	m
CTAGS	deps/srccache/patchelf-0.9/src/Makefile.in	/^CTAGS: ctags$/;"	t
CTAGS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^CTAGS = ctags$/;"	m
CTAGS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^CTAGS: ctags$/;"	t
CTRL_C	contrib/generate_precompile.jl	/^CTRL_C = '\\x03'$/;"	v
CURL_BB_NAME	deps/curl.mk	/^CURL_BB_NAME := LibCURL.v$(CURL_VER)$/;"	m
CURL_BB_URL_BASE	deps/curl.mk	/^CURL_BB_URL_BASE := https:\/\/github.com\/JuliaPackaging\/Yggdrasil\/releases\/download\/LibCURL/;"	m
CURL_LDFLAGS	deps/curl.mk	/^CURL_LDFLAGS := $(RPATH_ESCAPED_ORIGIN)$/;"	m
CVALUE_NWORDS	src/flisp/flisp.h	/^#define CVALUE_NWORDS /;"	d
CV_OWNED_BIT	src/flisp/flisp.h	/^#define CV_OWNED_BIT /;"	d
CV_PARENT_BIT	src/flisp/flisp.h	/^#define CV_PARENT_BIT /;"	d
CXX	deps/srccache/patchelf-0.9/Makefile.in	/^CXX = @CXX@$/;"	m
CXX	deps/srccache/patchelf-0.9/src/Makefile.in	/^CXX = @CXX@$/;"	m
CXX	deps/srccache/patchelf-0.9/tests/Makefile.in	/^CXX = @CXX@$/;"	m
CXXCOMPILE	deps/srccache/patchelf-0.9/src/Makefile.in	/^CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
CXXDEPMODE	deps/srccache/patchelf-0.9/Makefile.in	/^CXXDEPMODE = @CXXDEPMODE@$/;"	m
CXXDEPMODE	deps/srccache/patchelf-0.9/src/Makefile.in	/^CXXDEPMODE = @CXXDEPMODE@$/;"	m
CXXDEPMODE	deps/srccache/patchelf-0.9/tests/Makefile.in	/^CXXDEPMODE = @CXXDEPMODE@$/;"	m
CXXFLAGS	deps/srccache/patchelf-0.9/Makefile.in	/^CXXFLAGS = @CXXFLAGS@$/;"	m
CXXFLAGS	deps/srccache/patchelf-0.9/src/Makefile.in	/^CXXFLAGS = @CXXFLAGS@$/;"	m
CXXFLAGS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^CXXFLAGS = @CXXFLAGS@$/;"	m
CXXLD	deps/srccache/patchelf-0.9/src/Makefile.in	/^CXXLD = $(CXX)$/;"	m
CXXLD	src/Makefile	/^CXXLD = $(CXX) -shared$/;"	m
CXXLD	src/Makefile	/^CXXLD = $(LD) -dll -export:jl_setjmp -export:jl_longjmp$/;"	m
CXXLD	ui/Makefile	/^CXXLD := $(CXX)$/;"	m
CXXLD	ui/Makefile	/^CXXLD := $(LD)$/;"	m
CXXLINK	deps/srccache/patchelf-0.9/src/Makefile.in	/^CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \\$/;"	m
CYGPATH_W	deps/srccache/patchelf-0.9/Makefile.in	/^CYGPATH_W = @CYGPATH_W@$/;"	m
CYGPATH_W	deps/srccache/patchelf-0.9/src/Makefile.in	/^CYGPATH_W = @CYGPATH_W@$/;"	m
CYGPATH_W	deps/srccache/patchelf-0.9/tests/Makefile.in	/^CYGPATH_W = @CYGPATH_W@$/;"	m
C_Dense	stdlib/SuiteSparse/src/cholmod.jl	/^struct C_Dense{T<:VTypes} <: SuiteSparseStruct$/;"	f
C_Factor	stdlib/SuiteSparse/src/cholmod.jl	/^struct C_Factor{Tv<:VTypes} <: SuiteSparseStruct$/;"	f
C_NULL	base/pointer.jl	/^const C_NULL = bitcast(Ptr{Cvoid}, 0)$/;"	v
C_Sparse	stdlib/SuiteSparse/src/cholmod.jl	/^struct C_Sparse{Tv<:Union{Cvoid, VTypes}} <: SuiteSparseStruct$/;"	f
CachedCredentials	stdlib/LibGit2/src/types.jl	/^    CachedCredentials() = new(Dict{String,AbstractCredential}())$/;"	f
CachedCredentials	stdlib/LibGit2/src/types.jl	/^struct CachedCredentials$/;"	f
CachedPowers	base/grisu/float.jl	/^const CachedPowers = Float[$/;"	v
CachedPowersLength	base/grisu/float.jl	/^const CachedPowersLength = length(CachedPowers)$/;"	v
CachedPowersOffset	base/grisu/float.jl	/^const CachedPowersOffset = 348  # -1 * the first decimal_exponent.$/;"	v
CachingPool	stdlib/Distributed/src/workerpool.jl	/^    function CachingPool()$/;"	f
CachingPool	stdlib/Distributed/src/workerpool.jl	/^function CachingPool(workers::Vector{Int})$/;"	f
CachingPool	stdlib/Distributed/src/workerpool.jl	/^mutable struct CachingPool <: AbstractWorkerPool$/;"	f
Calendar	stdlib/Dates/src/types.jl	/^abstract type Calendar <: AbstractTime end$/;"	f
CallMsg	stdlib/Distributed/src/messages.jl	/^struct CallMsg{Mode} <: AbstractMsg$/;"	f
CallThisFunc27178	test/ccall.jl	/^mutable struct CallThisFunc27178{FCN_TYPE}$/;"	f
CallWaitMsg	stdlib/Distributed/src/messages.jl	/^struct CallWaitMsg <: AbstractMsg$/;"	f
Callable	base/essentials.jl	/^const Callable = Union{Function,Type}$/;"	v
CallableSingleton	test/ccall.jl	/^struct CallableSingleton$/;"	f
Callback	src/llvm-api.cpp	/^    jl_value_t *Callback;$/;"	m	class:llvm::JuliaBasicBlockPass	typeref:typename:jl_value_t *	file:
Callback	src/llvm-api.cpp	/^    jl_value_t *Callback;$/;"	m	class:llvm::JuliaFunctionPass	typeref:typename:jl_value_t *	file:
Callback	src/llvm-api.cpp	/^    jl_value_t *Callback;$/;"	m	class:llvm::JuliaModulePass	typeref:typename:jl_value_t *	file:
Callbacks	stdlib/LibGit2/src/types.jl	/^const Callbacks = Dict{Symbol, Tuple{Ptr{Cvoid}, Any}}$/;"	v
CalleeRooted	src/codegen_shared.h	/^    CalleeRooted = 12,$/;"	e	enum:AddressSpace
Calling C and Fortran Code	doc/src/manual/calling-c-and-fortran-code.md	/^# Calling C and Fortran Code$/;"	c
Calling Convention	doc/src/manual/calling-c-and-fortran-code.md	/^## Calling Convention$/;"	s
Calling Conventions	doc/src/devdocs/callconv.md	/^# Calling Conventions$/;"	c
Calling Julia Functions	doc/src/manual/embedding.md	/^## Calling Julia Functions$/;"	s
Calling a particular method	doc/src/devdocs/debuggingtips.md	/^### Calling a particular method$/;"	S
CallingConv	src/codegen.cpp	/^    enum CallingConv {$/;"	g	struct:jl_returninfo_t	file:
Calls	doc/src/devdocs/ast.md	/^### Calls$/;"	S
Can I use `using` or `import` inside a function?	doc/src/manual/faq.md	/^### Can I use `using` or `import` inside a function?$/;"	S
CapturedException	base/task.jl	/^    CapturedException(ex, processed_bt::Vector{Any}) = new(ex, processed_bt)$/;"	f
CapturedException	base/task.jl	/^    function CapturedException(ex, bt_raw::Vector)$/;"	f
CapturedException	base/task.jl	/^struct CapturedException <: Exception$/;"	f
Cartesian	base/cartesian.jl	/^module Cartesian$/;"	f
Cartesian indexing	doc/src/manual/arrays.md	/^#### Cartesian indexing$/;"	t
Cartesian indices	doc/src/manual/arrays.md	/^### Cartesian indices$/;"	S
CartesianIndex	base/multidimensional.jl	/^    CartesianIndex(index::Integer...) = CartesianIndex(index)$/;"	f
CartesianIndex	base/multidimensional.jl	/^    CartesianIndex(index::NTuple{N,Integer}) where {N} = CartesianIndex{N}(index)$/;"	f
CartesianIndex	base/multidimensional.jl	/^    CartesianIndex(index::Tuple{Vararg{Union{Integer, CartesianIndex}}}) = CartesianIndex(index./;"	f
CartesianIndex	base/multidimensional.jl	/^    CartesianIndex(index::Union{Integer, CartesianIndex}...) = CartesianIndex(flatten(index))$/;"	f
CartesianIndex	base/multidimensional.jl	/^    struct CartesianIndex{N} <: AbstractCartesianIndex{N}$/;"	f
CartesianIndices	base/multidimensional.jl	/^    CartesianIndices(::Tuple{}) = CartesianIndices{0,typeof(())}(())$/;"	f
CartesianIndices	base/multidimensional.jl	/^    CartesianIndices(A::AbstractArray) = CartesianIndices(axes(A))$/;"	f
CartesianIndices	base/multidimensional.jl	/^    CartesianIndices(index::CartesianIndex) = CartesianIndices(index.I)$/;"	f
CartesianIndices	base/multidimensional.jl	/^    CartesianIndices(inds::NTuple{N,AbstractUnitRange{<:Integer}}) where {N} =$/;"	f
CartesianIndices	base/multidimensional.jl	/^    CartesianIndices(inds::NTuple{N,Union{<:Integer,AbstractUnitRange{<:Integer}}}) where {N} =$/;"	f
CartesianIndices	base/multidimensional.jl	/^    CartesianIndices(sz::NTuple{N,<:Integer}) where {N} = CartesianIndices(map(Base.OneTo, sz))$/;"	f
CartesianIndices	base/multidimensional.jl	/^    struct CartesianIndices{N,R<:NTuple{N,AbstractUnitRange{Int}}} <: AbstractArray{CartesianInd/;"	f
Case Study: Rational	doc/src/manual/constructors.md	/^## Case Study: Rational$/;"	s
Case Study: Rational Promotions	doc/src/manual/conversion-and-promotion.md	/^### Case Study: Rational Promotions$/;"	S
CassetteLikeWrapper	test/core.jl	/^struct CassetteLikeWrapper{F}$/;"	f
Catching errors	doc/src/devdocs/offset-arrays.md	/^### Catching errors$/;"	S
CategoricalPool	test/precompile.jl	/^              abstract type CategoricalPool{T, R <: Integer, V} end$/;"	f
CategoricalValue	test/precompile.jl	/^              abstract type CategoricalValue{T, R <: Integer} end$/;"	f
Caveats	doc/src/devdocs/valgrind.md	/^## Caveats$/;"	s
Cbuf	stdlib/LinearAlgebra/src/matmul.jl	/^const Cbuf = [Vector{UInt8}(undef, tilebufsize)]$/;"	v
CcallableRetTypeTest	test/llvmcall.jl	/^module CcallableRetTypeTest$/;"	f
Cdouble	base/ctypes.jl	/^const Cdouble = Float64$/;"	v
CdoubleMax	base/gmp.jl	/^const CdoubleMax = Union{Float16, Float32, Float64}$/;"	v
Cfloat	base/ctypes.jl	/^const Cfloat = Float32$/;"	v
Ch	stdlib/SHA/src/base_functions.jl	/^Ch(x,y,z)  = ((x & y) ⊻ (~x & z))$/;"	f
Chaining comparisons	doc/src/manual/mathematical-operations.md	/^### Chaining comparisons$/;"	S
Channel	base/channels.jl	/^    function Channel{T}(sz::Integer = 0) where T$/;"	f
Channel	base/channels.jl	/^Channel(func::Function, args...; kwargs...) = Channel{Any}(func, args...; kwargs...)$/;"	f
Channel	base/channels.jl	/^Channel(sz=0) = Channel{Any}(sz)$/;"	f
Channel	base/channels.jl	/^function Channel(func::Function; ctype=nothing, csize=nothing, taskref=nothing, spawn=nothing)$/;"	f
Channel	base/channels.jl	/^function Channel{T}(func::Function, size=0; taskref=nothing, spawn=false) where T$/;"	f
Channel	base/channels.jl	/^function Channel{T}(sz::Float64) where T$/;"	f
Channel	base/channels.jl	/^mutable struct Channel{T} <: AbstractChannel{T}$/;"	f
Channels	doc/src/manual/parallel-computing.md	/^## Channels$/;"	s
Channels and RemoteChannels	doc/src/manual/parallel-computing.md	/^## Channels and RemoteChannels$/;"	s
Char	base/boot.jl	/^primitive type Char <: AbstractChar 32 end$/;"	f
Char	base/char.jl	/^function Char(b::Union{Int8,UInt8})$/;"	f
Char	base/char.jl	/^function Char(u::UInt32)$/;"	f
Char	base/docs/basedocs.jl	/^primitive type Char 32 end$/;"	f
CharPoly	stdlib/Random/src/DSFMT.jl	/^function CharPoly()$/;"	f
CharPoly_ref	stdlib/Random/src/DSFMT.jl	/^const CharPoly_ref = Ref{GF2X}()$/;"	v
CharStr	test/strings/basic.jl	/^    CharStr(x) = new(collect(x))$/;"	f
CharStr	test/strings/basic.jl	/^mutable struct CharStr <: AbstractString$/;"	f
Chars	base/strings/util.jl	/^const Chars = Union{AbstractChar,Tuple{Vararg{<:AbstractChar}},AbstractVector{<:AbstractChar},Se/;"	v
Check	src/llvm-gc-invariant-verifier.cpp	/^    void Check(bool Cond, const char *message, Value *Val) {$/;"	f	struct:GCInvariantVerifier	typeref:typename:void	file:
CheckInst	src/llvm-alloc-opt.cpp	/^    struct CheckInst {$/;"	s	struct:__anon0a1571000111::Optimizer	file:
Checkbox	contrib/windows/build-installer.nsi	/^var Checkbox$/;"	v
Checked	base/checked.jl	/^module Checked$/;"	f
Checking for equality with a singleton	doc/src/manual/performance-tips.md	/^# Checking for equality with a singleton$/;"	c
Checking for package breakages	doc/build/distributing.md	/^## Checking for package breakages$/;"	s
Checking for performance regressions	doc/build/distributing.md	/^## Checking for performance regressions$/;"	s
CheckoutOptions	stdlib/LibGit2/src/types.jl	/^@kwdef struct CheckoutOptions$/;"	f
Cherry picking commits	doc/build/distributing.md	/^### Cherry picking commits$/;"	S
CherrypickOptions	stdlib/LibGit2/src/types.jl	/^@kwdef struct CherrypickOptions$/;"	f
Cholesky	stdlib/LinearAlgebra/src/cholesky.jl	/^    function Cholesky{T,S}(factors, uplo, info) where {T,S<:AbstractMatrix}$/;"	f
Cholesky	stdlib/LinearAlgebra/src/cholesky.jl	/^Cholesky(A::AbstractMatrix{T}, uplo::AbstractChar, info::Integer) where {T} =$/;"	f
Cholesky	stdlib/LinearAlgebra/src/cholesky.jl	/^Cholesky(A::AbstractMatrix{T}, uplo::Symbol, info::Integer) where {T} =$/;"	f
Cholesky	stdlib/LinearAlgebra/src/cholesky.jl	/^function Cholesky{T}(C::Cholesky) where T$/;"	f
Cholesky	stdlib/LinearAlgebra/src/cholesky.jl	/^struct Cholesky{T,S<:AbstractMatrix} <: Factorization{T}$/;"	f
CholeskyPivoted	stdlib/LinearAlgebra/src/cholesky.jl	/^    function CholeskyPivoted{T,S}(factors, uplo, piv, rank, tol, info) where {T,S<:AbstractMatri/;"	f
CholeskyPivoted	stdlib/LinearAlgebra/src/cholesky.jl	/^function CholeskyPivoted(A::AbstractMatrix{T}, uplo::AbstractChar, piv::Vector{<:Integer},$/;"	f
CholeskyPivoted	stdlib/LinearAlgebra/src/cholesky.jl	/^struct CholeskyPivoted{T,S<:AbstractMatrix} <: Factorization{T}$/;"	f
Chunk	base/grisu/bignums.jl	/^const Chunk = UInt32$/;"	v
ChunkableOp	base/broadcast.jl	/^const ChunkableOp = Union{typeof(&), typeof(|), typeof(xor), typeof(~), typeof(identity),$/;"	v
Cint	base/ctypes.jl	/^const Cint = Int32$/;"	v
Cintmax_t	base/ctypes.jl	/^const Cintmax_t = Int64$/;"	v
Circ_	test/core.jl	/^mutable struct Circ_{T} x::Circ_{T} end$/;"	f
Classification	src/abi_x86_64.cpp	/^    Classification() : isMemory(false)$/;"	f	struct:ABI_x86_64Layout::Classification	file:
Classification	src/abi_x86_64.cpp	/^struct Classification {$/;"	s	struct:ABI_x86_64Layout	file:
CleanupIR	src/llvm-late-gc-lowering.cpp	/^bool LateLowerGCFrame::CleanupIR(Function &F, State *S) {$/;"	f	class:LateLowerGCFrame	typeref:typename:bool
CloneCtx	src/llvm-multiversioning.cpp	/^CloneCtx::CloneCtx(MultiVersioning *pass, Module &M)$/;"	f	class:__anond5683ea40111::CloneCtx
CloneCtx	src/llvm-multiversioning.cpp	/^struct CloneCtx {$/;"	s	namespace:__anond5683ea40111	file:
CloneFunction	src/ccall.cpp	/^    Function *CloneFunction(Function *F)$/;"	f	class:FunctionMover	typeref:typename:Function *	file:
CloneFunctionBody	src/ccall.cpp	/^    void CloneFunctionBody(Function *F)$/;"	f	class:FunctionMover	typeref:typename:void	file:
CloneFunctionProto	src/ccall.cpp	/^    Function *CloneFunctionProto(Function *F)$/;"	f	class:FunctionMover	typeref:typename:Function *	file:
CloneOptions	stdlib/LibGit2/src/types.jl	/^    function CloneOptions(; fetch_opts::FetchOptions=FetchOptions(), kwargs...)$/;"	f
CloneOptions	stdlib/LibGit2/src/types.jl	/^struct CloneOptions$/;"	f
CloneOptionsStruct	stdlib/LibGit2/src/types.jl	/^@kwdef struct CloneOptionsStruct$/;"	f
Clonglong	base/ctypes.jl	/^const Clonglong = Int64$/;"	v
CloseOpen01	stdlib/Random/src/Random.jl	/^CloseOpen01(::Type{T}=Float64) where {T<:AbstractFloat} = CloseOpen01{T}()$/;"	f
CloseOpen01	stdlib/Random/src/Random.jl	/^struct CloseOpen01{T<:AbstractFloat} <: FloatInterval{T} end # interval [0,1)$/;"	f
CloseOpen01_64	stdlib/Random/src/Random.jl	/^const CloseOpen01_64   = CloseOpen01{Float64}$/;"	v
CloseOpen12	stdlib/Random/src/Random.jl	/^CloseOpen12(::Type{T}=Float64) where {T<:AbstractFloat} = CloseOpen12{T}()$/;"	f
CloseOpen12	stdlib/Random/src/Random.jl	/^struct CloseOpen12{T<:AbstractFloat} <: FloatInterval{T} end # interval [1,2)$/;"	f
CloseOpen12_64	stdlib/Random/src/Random.jl	/^const CloseOpen12_64   = CloseOpen12{Float64}$/;"	v
Closing a Library	doc/src/manual/calling-c-and-fortran-code.md	/^## Closing a Library$/;"	s
Closure cfunctions	doc/src/manual/calling-c-and-fortran-code.md	/^## Closure cfunctions$/;"	s
Closures	doc/src/devdocs/functions.md	/^## Closures$/;"	s
Cluster Manager Interface	stdlib/Distributed/docs/src/index.md	/^## Cluster Manager Interface$/;"	s
Cluster Managers with Custom Transports	doc/src/manual/parallel-computing.md	/^### Cluster Managers with Custom Transports$/;"	S
ClusterManager	stdlib/Distributed/src/cluster.jl	/^abstract type ClusterManager end$/;"	f
ClusterManagers	doc/src/manual/parallel-computing.md	/^## ClusterManagers$/;"	s
ClusterSerializer	stdlib/Distributed/src/clusterserialize.jl	/^    function ClusterSerializer{I}(io::I) where I<:IO$/;"	f
ClusterSerializer	stdlib/Distributed/src/clusterserialize.jl	/^ClusterSerializer(io::IO) = ClusterSerializer{typeof(io)}(io)$/;"	f
ClusterSerializer	stdlib/Distributed/src/clusterserialize.jl	/^mutable struct ClusterSerializer{I<:IO} <: AbstractSerializer$/;"	f
Cmd	base/cmd.jl	/^    Cmd(cmd::Cmd, ignorestatus, flags, env, dir) =$/;"	f
Cmd	base/cmd.jl	/^    Cmd(exec::Vector{String}) =$/;"	f
Cmd	base/cmd.jl	/^    function Cmd(cmd::Cmd; ignorestatus::Bool=cmd.ignorestatus, env=cmd.env, dir::AbstractString/;"	f
Cmd	base/cmd.jl	/^struct Cmd <: AbstractCmd$/;"	f
CmdRedirect	base/cmd.jl	/^CmdRedirect(cmd, handle, stream_no) = CmdRedirect(cmd, handle, stream_no, stream_no == STDIN_NO)$/;"	f
CmdRedirect	base/cmd.jl	/^struct CmdRedirect <: AbstractCmd$/;"	f
Code	stdlib/Markdown/src/Common/block.jl	/^Code(code) = Code("", code)$/;"	f
Code	stdlib/Markdown/src/Common/block.jl	/^mutable struct Code$/;"	f
Code Formatting Guidelines	CONTRIBUTING.md	/^### Code Formatting Guidelines$/;"	S
Code Generation	doc/src/manual/metaprogramming.md	/^## Code Generation$/;"	s
Code Loading	doc/src/manual/code-loading.md	/^# Code Loading$/;"	c
Code blocks	stdlib/Markdown/docs/src/index.md	/^### Code blocks$/;"	S
CodeInfo	doc/src/devdocs/ast.md	/^### CodeInfo$/;"	S
CodeInstance	doc/src/devdocs/ast.md	/^### CodeInstance$/;"	S
CodePointError	base/char.jl	/^struct CodePointError{T<:Integer} <: Exception$/;"	f
CodeUnits	base/strings/basic.jl	/^    CodeUnits(s::S) where {S<:AbstractString} = new{codeunit(s),S}(s)$/;"	f
CodeUnits	base/strings/basic.jl	/^struct CodeUnits{T,S<:AbstractString} <: DenseVector{T}$/;"	f
CodegenParams	base/reflection.jl	/^struct CodegenParams$/;"	f
Collections and Data Structures	doc/src/base/collections.md	/^# Collections and Data Structures$/;"	c
Colon	base/essentials.jl	/^struct Colon <: Function$/;"	f
Color22592	test/specificity.jl	/^abstract type Color22592{T, N} <: Colorant22592{T,N} end$/;"	f
ColorRoots	src/llvm-late-gc-lowering.cpp	/^std::vector<int> LateLowerGCFrame::ColorRoots(const State &S) {$/;"	f	class:LateLowerGCFrame	typeref:typename:std::vector<int>
Colorant22592	test/specificity.jl	/^abstract type Colorant22592{T,N} end$/;"	f
Combinator27368	test/core.jl	/^    Combinator27368(op, args...) =$/;"	f
Combinator27368	test/core.jl	/^struct Combinator27368$/;"	f
Combinatorics	doc/src/base/arrays.md	/^## Combinatorics$/;"	s
CombineMulAdd	src/llvm-muladd.cpp	/^    CombineMulAdd() : FunctionPass(ID)$/;"	f	struct:CombineMulAdd	file:
CombineMulAdd	src/llvm-muladd.cpp	/^struct CombineMulAdd : public FunctionPass {$/;"	s	file:
CommBuf	test/threads_exec.jl	/^    CommBuf() = new(Atomic{Int}(0), Atomic{Int}(0), false, false)$/;"	f
CommBuf	test/threads_exec.jl	/^mutable struct CommBuf$/;"	f
Command line option changes	HISTORY.md	/^Command line option changes$/;"	s
Command-line option changes	HISTORY.md	/^Command-line option changes$/;"	s
Common Operations	doc/src/manual/strings.md	/^## Common Operations$/;"	s
CompPhdr	deps/srccache/patchelf-0.9/src/patchelf.cc	/^    struct CompPhdr$/;"	s	class:ElfFile	file:
CompShdr	deps/srccache/patchelf-0.9/src/patchelf.cc	/^    struct CompShdr$/;"	s	class:ElfFile	file:
CompactPeekIterator	base/compiler/ssair/ir.jl	/^struct CompactPeekIterator$/;"	f
Comparison with [`backtrace`](@ref)	doc/src/manual/stacktraces.md	/^## Comparison with [`backtrace`](@ref)$/;"	s
Compilation scripts	doc/build/distributing.md	/^Compilation scripts$/;"	c
CompileLayer	src/jitlayers.h	/^    CompileLayerT CompileLayer;$/;"	m	class:JuliaOJIT	typeref:typename:CompileLayerT
CompileLayerT	src/jitlayers.h	/^    typedef orc::LegacyIRCompileLayer<ObjLayerT,CompilerT> CompileLayerT;$/;"	t	class:JuliaOJIT	typeref:typename:orc::LegacyIRCompileLayer<ObjLayerT,CompilerT>
Compiler	test/compiler/ssair.jl	/^const Compiler = Core.Compiler$/;"	v
Compiler efficiency issues	doc/src/devdocs/functions.md	/^## Compiler efficiency issues$/;"	s
Compiler/Runtime improvements	HISTORY.md	/^Compiler\/Runtime improvements$/;"	s
CompilerResultT	src/jitlayers.h	/^using CompilerResultT = object::OwningBinary<object::ObjectFile>;$/;"	t	typeref:typename:object::OwningBinary<object::ObjectFile>
CompilerResultT	src/jitlayers.h	/^using CompilerResultT = std::unique_ptr<llvm::MemoryBuffer>;$/;"	t	typeref:typename:std::unique_ptr<llvm::MemoryBuffer>
CompilerT	src/jitlayers.h	/^        CompilerT(JuliaOJIT *pjit)$/;"	f	struct:JuliaOJIT::CompilerT
CompilerT	src/jitlayers.h	/^    struct CompilerT {$/;"	s	class:JuliaOJIT
Compiling with MinGW/MSYS2	doc/build/windows.md	/^### Compiling with MinGW\/MSYS2$/;"	S
Completeness of analysis	doc/src/devdocs/gc-sa.md	/^## Completeness of analysis$/;"	s
Completion	stdlib/REPL/src/REPLCompletions.jl	/^abstract type Completion end$/;"	f
CompletionFoo	stdlib/REPL/test/replcompletions.jl	/^    module CompletionFoo$/;"	f
CompletionFoo2	stdlib/REPL/test/replcompletions.jl	/^        module CompletionFoo2$/;"	f
CompletionProvider	stdlib/REPL/src/LineEdit.jl	/^abstract type CompletionProvider end$/;"	f
Completions	stdlib/REPL/src/REPLCompletions.jl	/^const Completions = Tuple{Vector{Completion}, UnitRange{Int64}, Bool}$/;"	v
Complex	base/complex.jl	/^Complex(x::Real) = Complex(x, zero(x))$/;"	f
Complex	base/complex.jl	/^Complex(x::Real, y::Real) = Complex(promote(x,y)...)$/;"	f
Complex	base/complex.jl	/^Complex(z::Complex) = z$/;"	f
Complex	base/complex.jl	/^struct Complex{T<:Real} <: Number$/;"	f
Complex Example	doc/src/manual/running-external-programs.md	/^### Complex Example$/;"	S
Complex Numbers	doc/src/manual/complex-and-rational-numbers.md	/^## Complex Numbers$/;"	s
Complex and Rational Numbers	doc/src/manual/complex-and-rational-numbers.md	/^# Complex and Rational Numbers$/;"	c
Complex method "cascades" with default arguments	doc/src/manual/methods.md	/^### Complex method "cascades" with default arguments$/;"	S
ComplexF16	base/complex.jl	/^const ComplexF16  = Complex{Float16}$/;"	v
ComplexF32	base/complex.jl	/^const ComplexF32  = Complex{Float32}$/;"	v
ComplexF64	base/complex.jl	/^const ComplexF64  = Complex{Float64}$/;"	v
ComplexTypes	base/fastmath.jl	/^ComplexTypes = Union{ComplexF32, ComplexF64}$/;"	v
ComplexX87	src/abi_x86_64.cpp	/^enum ArgClass { Integer, Sse, SseUp, X87, X87Up, ComplexX87, NoClass, Memory };$/;"	e	enum:ArgClass	file:
Component	test/core.jl	/^abstract type Component end$/;"	f
Composite Types	doc/src/manual/types.md	/^## Composite Types$/;"	s
CompositeException	base/task.jl	/^    CompositeException() = new(Any[])$/;"	f
CompositeException	base/task.jl	/^    CompositeException(exceptions) = new(exceptions)$/;"	f
CompositeException	base/task.jl	/^struct CompositeException <: Exception$/;"	f
CompoundPeriod	stdlib/Dates/src/periods.jl	/^    function CompoundPeriod(p::Vector{Period})$/;"	f
CompoundPeriod	stdlib/Dates/src/periods.jl	/^CompoundPeriod(p::Period...) = CompoundPeriod(Period[p...])$/;"	f
CompoundPeriod	stdlib/Dates/src/periods.jl	/^CompoundPeriod(p::Vector{<:Period}) = CompoundPeriod(Vector{Period}(p))$/;"	f
CompoundPeriod	stdlib/Dates/src/periods.jl	/^CompoundPeriod(t::Time) = CompoundPeriod(Period[Hour(t), Minute(t), Second(t), Millisecond(t),$/;"	f
CompoundPeriod	stdlib/Dates/src/periods.jl	/^struct CompoundPeriod <: AbstractTime$/;"	f
Comprehensions	doc/src/manual/arrays.md	/^## Comprehensions$/;"	s
ComputeLiveSets	src/llvm-late-gc-lowering.cpp	/^void LateLowerGCFrame::ComputeLiveSets(State &S) {$/;"	f	class:LateLowerGCFrame	typeref:typename:void
ComputeLiveness	src/llvm-late-gc-lowering.cpp	/^void LateLowerGCFrame::ComputeLiveness(State &S) {$/;"	f	class:LateLowerGCFrame	typeref:typename:void
Concatenation	doc/src/manual/arrays.md	/^## Concatenation$/;"	s
Concatenation and permutation	doc/src/base/arrays.md	/^## Concatenation and permutation$/;"	s
Conclusion	doc/src/manual/code-loading.md	/^## Conclusion$/;"	s
Concrete number types	doc/src/base/numbers.md	/^### Concrete number types$/;"	S
ConcreteThing	test/subtype.jl	/^mutable struct ConcreteThing{T<:AbstractFloat,N} <: AbstractThing{T,N}$/;"	f
Condition	base/condition.jl	/^const Condition = GenericCondition{AlwaysLockedST}$/;"	v
Conditional	base/compiler/typelattice.jl	/^    function Conditional($/;"	f
Conditional	base/compiler/typelattice.jl	/^struct Conditional$/;"	f
Config	stdlib/Markdown/src/parse/config.jl	/^Config() = Config(Function[], Function[], InnerConfig())$/;"	f
Config	stdlib/Markdown/src/parse/config.jl	/^mutable struct Config$/;"	f
ConfigEntry	stdlib/LibGit2/src/types.jl	/^@kwdef struct ConfigEntry$/;"	f
Configuration	doc/src/manual/profile.md	/^## Configuration$/;"	s
ConflictingBindings	test/precompile.jl	/^@eval module ConflictingBindings$/;"	f
Consider using views for slices	doc/src/manual/performance-tips.md	/^## Consider using views for slices$/;"	s
ConsoleLogger	stdlib/Logging/src/ConsoleLogger.jl	/^function ConsoleLogger(stream::IO=stderr, min_level=Info;$/;"	f
ConsoleLogger	stdlib/Logging/src/ConsoleLogger.jl	/^struct ConsoleLogger <: AbstractLogger$/;"	f
Const	base/compiler/typelattice.jl	/^    Const(@nospecialize(v)) = new(v, false)$/;"	f
Const	base/compiler/typelattice.jl	/^    Const(@nospecialize(v), a::Bool) = new(v, a)$/;"	f
Const	base/compiler/typelattice.jl	/^struct Const$/;"	f
Const	base/experimental.jl	/^struct Const{T,N} <: DenseArray{T,N}$/;"	f
Const	test/compiler/codegen.jl	/^struct Const{T<:Array}$/;"	f
ConstDataRef	src/staticdata.c	/^    ConstDataRef,$/;"	e	enum:RefTags	file:
ConstantCase	base/compiler/ssair/inlining.jl	/^    ConstantCase(@nospecialize(val), method::Method, sparams::Vector{Any}, @nospecialize(metharg/;"	f
ConstantCase	base/compiler/ssair/inlining.jl	/^struct ConstantCase$/;"	f
ConstantRange	test/sorting.jl	/^struct ConstantRange{T} <: AbstractRange{T}$/;"	f
ConstantUses	src/llvm-multiversioning.cpp	/^    ConstantUses(Constant *c, Module &M)$/;"	f	struct:__anond5683ea40111::ConstantUses	file:
ConstantUses	src/llvm-multiversioning.cpp	/^struct ConstantUses {$/;"	s	namespace:__anond5683ea40111	file:
Constants	doc/src/manual/variables-and-scoping.md	/^## Constants$/;"	s
Constants	stdlib/Dates/docs/src/index.md	/^### Constants$/;"	S
Construction and Initialization	doc/src/manual/arrays.md	/^## Construction and Initialization$/;"	s
Constructors	doc/src/devdocs/functions.md	/^## Constructors$/;"	s
Constructors	stdlib/Dates/docs/src/index.md	/^## Constructors$/;"	s
Constructors and Types	doc/src/base/arrays.md	/^## Constructors and Types$/;"	s
Constructors and Types	doc/src/base/collections.md	/^## Constructors and Types$/;"	s
Constructors for types unrelated to their arguments	doc/src/manual/conversion-and-promotion.md	/^#### Constructors for types unrelated to their arguments$/;"	t
Constructors that don't return instances of their own type	doc/src/manual/conversion-and-promotion.md	/^#### Constructors that don't return instances of their own type$/;"	t
Consts	stdlib/LibGit2/src/consts.jl	/^module Consts$/;"	f
Consts.OBJECT	stdlib/LibGit2/src/types.jl	/^Consts.OBJECT(::Type{GitBlob})          = Consts.OBJ_BLOB$/;"	f
Consts.OBJECT	stdlib/LibGit2/src/types.jl	/^Consts.OBJECT(::Type{GitCommit})        = Consts.OBJ_COMMIT$/;"	f
Consts.OBJECT	stdlib/LibGit2/src/types.jl	/^Consts.OBJECT(::Type{GitObject})        = Consts.OBJ_ANY$/;"	f
Consts.OBJECT	stdlib/LibGit2/src/types.jl	/^Consts.OBJECT(::Type{GitTag})           = Consts.OBJ_TAG$/;"	f
Consts.OBJECT	stdlib/LibGit2/src/types.jl	/^Consts.OBJECT(::Type{GitTree})          = Consts.OBJ_TREE$/;"	f
Consts.OBJECT	stdlib/LibGit2/src/types.jl	/^Consts.OBJECT(::Type{GitUnknownObject}) = Consts.OBJ_ANY$/;"	f
Consts.OBJECT	stdlib/LibGit2/src/types.jl	/^function Consts.OBJECT(ptr::Ptr{Cvoid})$/;"	f
Contributing a Julia package	CONTRIBUTING.md	/^### Contributing a Julia package$/;"	S
Contributing to core functionality or base libraries	CONTRIBUTING.md	/^### Contributing to core functionality or base libraries$/;"	S
Contributor Checklist	CONTRIBUTING.md	/^## Contributor Checklist$/;"	s
Control Flow	doc/src/manual/control-flow.md	/^# Control Flow$/;"	c
Control Flow and Short-Circuiting Operators	doc/src/manual/missing.md	/^## Control Flow and Short-Circuiting Operators$/;"	s
Conversion	doc/src/manual/conversion-and-promotion.md	/^## Conversion$/;"	s
Conversion Functions	stdlib/Dates/docs/src/index.md	/^### Conversion Functions$/;"	S
Conversion vs. Construction	doc/src/manual/conversion-and-promotion.md	/^### Conversion vs. Construction$/;"	S
ConversionTests	stdlib/Dates/test/conversions.jl	/^module ConversionTests$/;"	f
ConvertiblePeriod	stdlib/Dates/src/rounding.jl	/^const ConvertiblePeriod = Union{TimePeriod, Week, Day}$/;"	v
ConvertibleSpecialMatrix	stdlib/LinearAlgebra/src/special.jl	/^const ConvertibleSpecialMatrix = Union{Diagonal,Bidiagonal,SymTridiagonal,Tridiagonal,AbstractTr/;"	v
Converting Types	doc/src/manual/embedding.md	/^## Converting Types$/;"	s
Copying data is not always bad	doc/src/manual/performance-tips.md	/^## Copying data is not always bad$/;"	s
Core task operations	doc/src/manual/control-flow.md	/^### Core task operations$/;"	S
Core.PhiNode	base/compiler/ssair/ir.jl	/^Core.PhiNode() = Core.PhiNode(Any[], Any[])$/;"	f
Core.Task	base/task.jl	/^Core.Task(@nospecialize(f), reserved_stack::Int=0) = Core._Task(f, reserved_stack, ThreadSynchro/;"	f
Core.UpsilonNode	base/compiler/ssair/ir.jl	/^@eval Core.UpsilonNode() = $(Expr(:new, Core.UpsilonNode))$/;"	f
CoreDocs	base/docs/core.jl	/^module CoreDocs$/;"	f
CoreLogging	base/logging.jl	/^module CoreLogging$/;"	f
CoreNumType	base/compiler/abstractinterpretation.jl	/^const CoreNumType = Union{Int32, Int64, Float32, Float64}$/;"	v
CoreSTDERR	base/boot.jl	/^struct CoreSTDERR <: IO end$/;"	f
CoreSTDOUT	base/boot.jl	/^struct CoreSTDOUT <: IO end$/;"	f
Coroutines	doc/src/manual/parallel-computing.md	/^# Coroutines$/;"	c
Correspondence of dense and sparse methods	stdlib/SparseArrays/docs/src/index.md	/^## Correspondence of dense and sparse methods$/;"	s
Count	base/iterators.jl	/^struct Count{S<:Number}$/;"	f
Cptrdiff_t	base/ctypes.jl	/^const Cptrdiff_t = Int$/;"	v
CreateExecSandboxXPCInterface	contrib/mac/frameworkapp/ExecSandbox/ExecSandboxProtocol.h	/^NSXPCInterface *_Nonnull CreateExecSandboxXPCInterface(void);$/;"	f
CreateExecSandboxXPCInterface	contrib/mac/frameworkapp/ExecSandbox/ExecSandboxProtocol.m	/^NSXPCInterface *CreateExecSandboxXPCInterface(void) {$/;"	f
CreateJuliaJITEventListener	src/debuginfo.cpp	/^JITEventListener *CreateJuliaJITEventListener()$/;"	f	typeref:typename:JITEventListener *
CreatePassID	src/llvm-api.cpp	/^char &CreatePassID(const char *Name)$/;"	f	namespace:llvm	typeref:typename:char &
CreateTrap	src/codegen.cpp	/^static void CreateTrap(IRBuilder<> &irbuilder)$/;"	f	typeref:typename:void	file:
Creating C-Compatible Julia Function Pointers	doc/src/manual/calling-c-and-fortran-code.md	/^## Creating C-Compatible Julia Function Pointers$/;"	s
Creating Custom `AbstractTestSet` Types	stdlib/Test/docs/src/index.md	/^## Creating Custom `AbstractTestSet` Types$/;"	s
Creating a backports branch	doc/build/distributing.md	/^### Creating a backports branch$/;"	S
Creating events	stdlib/Logging/docs/src/index.md	/^### Creating events$/;"	S
Creating generic functions	doc/src/devdocs/functions.md	/^## Creating generic functions$/;"	s
Creating new generators	stdlib/Random/docs/src/index.md	/^### Creating new generators$/;"	S
CredentialPayload	stdlib/LibGit2/src/types.jl	/^    function CredentialPayload($/;"	f
CredentialPayload	stdlib/LibGit2/src/types.jl	/^CredentialPayload(p::CredentialPayload) = p$/;"	f
CredentialPayload	stdlib/LibGit2/src/types.jl	/^function CredentialPayload(cache::CachedCredentials; kwargs...)$/;"	f
CredentialPayload	stdlib/LibGit2/src/types.jl	/^function CredentialPayload(credential::AbstractCredential; kwargs...)$/;"	f
CredentialPayload	stdlib/LibGit2/src/types.jl	/^mutable struct CredentialPayload$/;"	f
Creds	stdlib/LibGit2/src/types.jl	/^const Creds = Union{CredentialPayload, AbstractCredential, CachedCredentials, Nothing}$/;"	v
Cross-building Julia without Vagrant	doc/build/windows.md	/^### Cross-building Julia without Vagrant$/;"	S
Cross-compiling from Unix	doc/build/windows.md	/^### Cross-compiling from Unix$/;"	S
Cshort	base/ctypes.jl	/^const Cshort = Int16$/;"	v
Csize_t	base/ctypes.jl	/^const Csize_t = UInt$/;"	v
Cssize_t	base/ctypes.jl	/^const Cssize_t = Int$/;"	v
Cstring	base/c.jl	/^Cstring(p::Union{Ptr{Int8},Ptr{UInt8},Ptr{Cvoid}}) = bitcast(Cstring, p)$/;"	f
Cstring	base/refpointer.jl	/^    primitive type Cstring  32 end$/;"	f
Cstring	base/refpointer.jl	/^    primitive type Cstring  64 end$/;"	f
Ctx	src/disasm.cpp	/^    MCContext& Ctx;$/;"	m	class:__anon2853c92e0211::SymbolTable	typeref:typename:MCContext &	file:
Ctx	src/jitlayers.h	/^    MCContext *Ctx;$/;"	m	class:JuliaOJIT	typeref:typename:MCContext *
Ctx;	test/compiler/contextual.jl	/^    struct Ctx; end$/;"	f
Cuchar	base/ctypes.jl	/^const Cuchar = UInt8$/;"	v
Cuint	base/ctypes.jl	/^const Cuint = UInt32$/;"	v
Cuintmax_t	base/ctypes.jl	/^const Cuintmax_t = UInt64$/;"	v
Culonglong	base/ctypes.jl	/^const Culonglong = UInt64$/;"	v
Cushort	base/ctypes.jl	/^const Cushort = UInt16$/;"	v
Custom `AbstractUnitRange` types	doc/src/devdocs/offset-arrays.md	/^### Custom `AbstractUnitRange` types$/;"	S
Custom sampler types	stdlib/Random/docs/src/index.md	/^#### Custom sampler types$/;"	t
CustomDict	stdlib/REPL/test/replcompletions.jl	/^        mutable struct CustomDict{K, V} <: AbstractDict{K, V}$/;"	f
CustomHashReal	test/hashing.jl	/^struct CustomHashReal$/;"	f
CustomTestSet	stdlib/Test/test/runtests.jl	/^    CustomTestSet(desc; foo=1) = new(desc, foo, [])$/;"	f
CustomTestSet	stdlib/Test/test/runtests.jl	/^struct CustomTestSet <: Test.AbstractTestSet$/;"	f
CustomType	stdlib/SparseArrays/test/sparse.jl	/^struct CustomType$/;"	f
Customization / Configuration	stdlib/REPL/docs/src/index.md	/^## Customization \/ Configuration$/;"	s
Customizing Colors	stdlib/REPL/docs/src/index.md	/^## Customizing Colors$/;"	s
Customizing keybindings	stdlib/REPL/docs/src/index.md	/^### Customizing keybindings$/;"	S
Cvoid	base/boot.jl	/^const Cvoid = Nothing$/;"	v
Cwstring	base/c.jl	/^Cwstring(p::Union{Ptr{Cwchar_t},Ptr{Cvoid}})       = bitcast(Cwstring, p)$/;"	f
Cwstring	base/refpointer.jl	/^    primitive type Cwstring 32 end$/;"	f
Cwstring	base/refpointer.jl	/^    primitive type Cwstring 64 end$/;"	f
Cycle	base/iterators.jl	/^struct Cycle{I}$/;"	f
CycleFoo	stdlib/Serialization/test/runtests.jl	/^module CycleFoo$/;"	f
CyclePadding	base/reinterpretarray.jl	/^function CyclePadding(T::DataType)$/;"	f
CyclePadding	base/reinterpretarray.jl	/^struct CyclePadding{P}$/;"	f
Cygwin-to-MinGW cross-compiling	doc/build/windows.md	/^### Cygwin-to-MinGW cross-compiling$/;"	S
D	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^    struct D{NT, DT}$/;"	f
D	test/docs.jl	/^struct D <: B$/;"	f
D11597	test/core.jl	/^mutable struct D11597{T} <: C11597{T} d::T end$/;"	f
D14919	test/core.jl	/^struct D14919 <: Function; end$/;"	f
D16424	test/core.jl	/^struct D16424{T<:Real,S<:T}$/;"	f
D21923	test/core.jl	/^struct D21923{T,N}; v::D21923{T}; end$/;"	f
DARWIN_CODESIGN_KEYCHAIN_IDENTITY	contrib/mac/framework/Makefile	/^DARWIN_CODESIGN_KEYCHAIN_IDENTITY ?= -$/;"	m
DARWIN_CODESIGN_KEYCHAIN_IDENTITY	contrib/mac/frameworkapp/Makefile	/^DARWIN_CODESIGN_KEYCHAIN_IDENTITY ?= Developer ID Application$/;"	m
DARWIN_CODESIGN_KEYCHAIN_IDENTITY	contrib/mac/frameworkapp/Makefile	/^DARWIN_CODESIGN_KEYCHAIN_IDENTITY ?= Mac Developer$/;"	m
DARWIN_CODESIGN_PRODUCT_ARCHIVE_KEYCHAIN_IDENTITY	contrib/mac/frameworkapp/Makefile	/^DARWIN_CODESIGN_PRODUCT_ARCHIVE_KEYCHAIN_IDENTITY ?= -$/;"	m
DARWIN_CODESIGN_PRODUCT_ARCHIVE_KEYCHAIN_IDENTITY	contrib/mac/frameworkapp/Makefile	/^DARWIN_CODESIGN_PRODUCT_ARCHIVE_KEYCHAIN_IDENTITY ?= Developer ID Installer$/;"	m
DARWIN_CODESIGN_TIMESTAMP	contrib/mac/framework/Makefile	/^DARWIN_CODESIGN_TIMESTAMP ?= 0$/;"	m
DARWIN_HARDENED_RUNTIME	contrib/mac/framework/Makefile	/^DARWIN_HARDENED_RUNTIME ?= 0$/;"	m
DATA	deps/srccache/patchelf-0.9/Makefile.in	/^DATA = $(doc_DATA)$/;"	m
DATATYPE_INSTANCE_FIELDINDEX	base/compiler/tfuncs.jl	/^const DATATYPE_INSTANCE_FIELDINDEX = fieldindex(DataType, :instance)$/;"	v
DATATYPE_MUTABLE_FIELDINDEX	base/compiler/tfuncs.jl	/^const DATATYPE_MUTABLE_FIELDINDEX = fieldindex(DataType, :mutable)$/;"	v
DATATYPE_NAME_FIELDINDEX	base/compiler/tfuncs.jl	/^const DATATYPE_NAME_FIELDINDEX = fieldindex(DataType, :name)$/;"	v
DATATYPE_PARAMETERS_FIELDINDEX	base/compiler/tfuncs.jl	/^const DATATYPE_PARAMETERS_FIELDINDEX = fieldindex(DataType, :parameters)$/;"	v
DATATYPE_SUPER_FIELDINDEX	base/compiler/tfuncs.jl	/^const DATATYPE_SUPER_FIELDINDEX = fieldindex(DataType, :super)$/;"	v
DATATYPE_TAG	stdlib/Serialization/src/Serialization.jl	/^const DATATYPE_TAG = sertag(DataType)$/;"	v
DATATYPE_TYPES_FIELDINDEX	base/compiler/tfuncs.jl	/^const DATATYPE_TYPES_FIELDINDEX = fieldindex(DataType, :types)$/;"	v
DATE12003	test/core.jl	/^const DATE12003 = DateTime(1917,1,1)$/;"	v
DATEEPOCH	stdlib/Dates/src/rounding.jl	/^const DATEEPOCH = value(Date(0))$/;"	v
DATETIMEEPOCH	stdlib/Dates/src/rounding.jl	/^const DATETIMEEPOCH = value(DateTime(0))$/;"	v
DAYSINMONTH	stdlib/Dates/src/types.jl	/^const DAYSINMONTH = (31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)$/;"	v
DAYSPERLYEAR	src/support/tzfile.h	/^#define DAYSPERLYEAR	/;"	d
DAYSPERNYEAR	src/support/tzfile.h	/^#define DAYSPERNYEAR	/;"	d
DAYSPERWEEK	src/support/tzfile.h	/^#define DAYSPERWEEK	/;"	d
DA_19281	test/misc.jl	/^abstract type DA_19281{T, N} <: AbstractArray{T, N} end$/;"	f
DAlternativeIntModule	test/core.jl	/^module DAlternativeIntModule$/;"	f
DBGCopyFullDSYMURLForUUIDfn	src/debuginfo.cpp	/^        typedef CFURLRef (*DBGCopyFullDSYMURLForUUIDfn)(CFUUIDRef, CFURLRef);$/;"	t	function:find_object_file	typeref:typename:CFURLRef (*)(CFUUIDRef,CFURLRef)	file:
DBL_MAXINT	src/support/dtypes.h	/^#define DBL_MAXINT /;"	d
DC1	base/special/trig.jl	/^const DC1 = 4.16666666666666019037e-02$/;"	v
DC2	base/special/trig.jl	/^const DC2 = -1.38888888888741095749e-03$/;"	v
DC3	base/special/trig.jl	/^const DC3 = 2.48015872894767294178e-05$/;"	v
DC4	base/special/trig.jl	/^const DC4 = -2.75573143513906633035e-07$/;"	v
DC5	base/special/trig.jl	/^const DC5 = 2.08757232129817482790e-09$/;"	v
DC6	base/special/trig.jl	/^const DC6 = -1.13596475577881948265e-11$/;"	v
DEBUG_LIBS	src/Makefile	/^DEBUG_LIBS := $(WHOLE_ARCHIVE) $(BUILDDIR)\/flisp\/libflisp-debug.a $(WHOLE_ARCHIVE) $(BUILDDIR)/;"	m
DEBUG_TYPE	src/llvm-alloc-opt.cpp	/^#define DEBUG_TYPE /;"	d	file:
DEBUG_TYPE	src/llvm-final-gc-lowering.cpp	/^#define DEBUG_TYPE /;"	d	file:
DEBUG_TYPE	src/llvm-gc-invariant-verifier.cpp	/^#define DEBUG_TYPE /;"	d	file:
DEBUG_TYPE	src/llvm-late-gc-lowering.cpp	/^#define DEBUG_TYPE /;"	d	file:
DEBUG_TYPE	src/llvm-lower-handlers.cpp	/^#define DEBUG_TYPE /;"	d	file:
DEBUG_TYPE	src/llvm-muladd.cpp	/^#define DEBUG_TYPE /;"	d	file:
DEBUG_TYPE	src/llvm-multiversioning.cpp	/^#define DEBUG_TYPE /;"	d	file:
DEBUG_TYPE	src/llvm-propagate-addrspaces.cpp	/^#define DEBUG_TYPE /;"	d	file:
DEBUG_TYPE	src/llvm-ptls.cpp	/^#define DEBUG_TYPE /;"	d	file:
DEBUG_TYPE	src/llvm-simdloop.cpp	/^#define DEBUG_TYPE /;"	d	file:
DECLARE_BUILTIN	src/builtin_proto.h	/^#define DECLARE_BUILTIN(/;"	d
DEFAULT_BLOCK_PG_ALLOC	src/gc-pages.c	/^#define DEFAULT_BLOCK_PG_ALLOC /;"	d	file:
DEFAULT_COMPILER_OPTS	base/regex.jl	/^const DEFAULT_COMPILER_OPTS = PCRE.UTF | PCRE.NO_UTF_CHECK | PCRE.ALT_BSUX | PCRE.UCP$/;"	v
DEFAULT_INCLUDES	deps/srccache/patchelf-0.9/src/Makefile.in	/^DEFAULT_INCLUDES = -I.@am__isrc@$/;"	m
DEFAULT_INCLUDES	deps/srccache/patchelf-0.9/tests/Makefile.in	/^DEFAULT_INCLUDES = -I.@am__isrc@$/;"	m
DEFAULT_LOAD_PATH	base/initdefs.jl	/^const DEFAULT_LOAD_PATH = ["@", "@v#.#", "@stdlib"]$/;"	v
DEFAULT_MACHINE_EXCLUSIVE	src/options.h	/^#define DEFAULT_MACHINE_EXCLUSIVE /;"	d
DEFAULT_MATCH_OPTS	base/regex.jl	/^const DEFAULT_MATCH_OPTS = PCRE.NO_UTF_CHECK$/;"	v
DEFAULT_PARAMS	base/compiler/params.jl	/^const DEFAULT_PARAMS = Params(UInt(0))$/;"	v
DEFAULT_PAYLOAD	stdlib/LibGit2/test/libgit2-helpers.jl	/^const DEFAULT_PAYLOAD = CredentialPayload(allow_ssh_agent=false, allow_git_helpers=false)$/;"	v
DEFAULT_PRECISION	base/mpfr.jl	/^const DEFAULT_PRECISION = Ref{Clong}(256)$/;"	v
DEFAULT_READ_BUFFER_SZ	base/stream.jl	/^const DEFAULT_READ_BUFFER_SZ = 10485760 # 10 MB$/;"	v
DEFAULT_STABLE	base/sort.jl	/^const DEFAULT_STABLE   = MergeSort$/;"	v
DEFAULT_THREAD_SLEEP_THRESHOLD	src/options.h	/^#define DEFAULT_THREAD_SLEEP_THRESHOLD /;"	d
DEFAULT_UNSTABLE	base/sort.jl	/^const DEFAULT_UNSTABLE = QuickSort$/;"	v
DEFINE_BUILTIN_GLOBALS	src/init.c	/^#define DEFINE_BUILTIN_GLOBALS$/;"	d	file:
DEFINE_FIELD_ACCESSORS	src/julia.h	/^#define DEFINE_FIELD_ACCESSORS(/;"	d
DEFINE_FIELD_ACCESSORS	src/julia.h	/^DEFINE_FIELD_ACCESSORS(size)$/;"	f	typeref:typename:offset
DEFINE_STDCXX_CONVERSION_FUNCTIONS	src/llvm-api.cpp	/^DEFINE_STDCXX_CONVERSION_FUNCTIONS(Pass, LLVMPassRef)$/;"	f	namespace:llvm
DEFS	deps/srccache/patchelf-0.9/Makefile.in	/^DEFS = @DEFS@$/;"	m
DEFS	deps/srccache/patchelf-0.9/src/Makefile.in	/^DEFS = @DEFS@$/;"	m
DEFS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^DEFS = @DEFS@$/;"	m
DEPDIR	deps/srccache/patchelf-0.9/Makefile.in	/^DEPDIR = @DEPDIR@$/;"	m
DEPDIR	deps/srccache/patchelf-0.9/src/Makefile.in	/^DEPDIR = @DEPDIR@$/;"	m
DEPDIR	deps/srccache/patchelf-0.9/tests/Makefile.in	/^DEPDIR = @DEPDIR@$/;"	m
DEPOT_PATH	base/initdefs.jl	/^const DEPOT_PATH = String[]$/;"	v
DEP_LIBS	deps/Makefile	/^DEP_LIBS :=$/;"	m
DEP_LIBS_STAGED	deps/Makefile	/^DEP_LIBS_STAGED := $(filter-out suitesparse suitesparse-wrapper osxunwind,$(DEP_LIBS)) # unlist /;"	m
DESCRIBE_ALL	stdlib/LibGit2/src/consts.jl	/^const DESCRIBE_ALL     = Cuint(1 << 1)$/;"	v
DESCRIBE_DEFAULT	stdlib/LibGit2/src/consts.jl	/^const DESCRIBE_DEFAULT = Cuint(0)$/;"	v
DESCRIBE_TAGS	stdlib/LibGit2/src/consts.jl	/^const DESCRIBE_TAGS    = Cuint(1 << 0)$/;"	v
DESCRIPTION	deps/srccache/patchelf-0.9/patchelf.1	/^.SH DESCRIPTION$/;"	s	title:PATCHELF
DESCRIPTION	doc/man/julia.1	/^.SH DESCRIPTION$/;"	s	title:JULIA
DFINITE	src/flisp/print.c	/^#define DFINITE(/;"	d	file:
DFS	base/compiler/ssair/domtree.jl	/^    function DFS(cfg::CFG, current_node::BBNumber)::DFSTree$/;"	f
DFSTree	base/compiler/ssair/domtree.jl	/^    function DFSTree(nblocks::Int)$/;"	f
DFSTree	base/compiler/ssair/domtree.jl	/^    struct DFSTree$/;"	f
DF_1_CONFALT	deps/srccache/patchelf-0.9/src/elf.h	/^#define DF_1_CONFALT	/;"	d
DF_1_DIRECT	deps/srccache/patchelf-0.9/src/elf.h	/^#define DF_1_DIRECT	/;"	d
DF_1_DISPRELDNE	deps/srccache/patchelf-0.9/src/elf.h	/^#define	DF_1_DISPRELDNE	/;"	d
DF_1_DISPRELPND	deps/srccache/patchelf-0.9/src/elf.h	/^#define	DF_1_DISPRELPND	/;"	d
DF_1_EDITED	deps/srccache/patchelf-0.9/src/elf.h	/^#define	DF_1_EDITED	/;"	d
DF_1_ENDFILTEE	deps/srccache/patchelf-0.9/src/elf.h	/^#define DF_1_ENDFILTEE	/;"	d
DF_1_GLOBAL	deps/srccache/patchelf-0.9/src/elf.h	/^#define DF_1_GLOBAL	/;"	d
DF_1_GLOBAUDIT	deps/srccache/patchelf-0.9/src/elf.h	/^#define	DF_1_GLOBAUDIT	/;"	d
DF_1_GROUP	deps/srccache/patchelf-0.9/src/elf.h	/^#define DF_1_GROUP	/;"	d
DF_1_IGNMULDEF	deps/srccache/patchelf-0.9/src/elf.h	/^#define	DF_1_IGNMULDEF	/;"	d
DF_1_INITFIRST	deps/srccache/patchelf-0.9/src/elf.h	/^#define DF_1_INITFIRST	/;"	d
DF_1_INTERPOSE	deps/srccache/patchelf-0.9/src/elf.h	/^#define DF_1_INTERPOSE	/;"	d
DF_1_LOADFLTR	deps/srccache/patchelf-0.9/src/elf.h	/^#define DF_1_LOADFLTR	/;"	d
DF_1_NODEFLIB	deps/srccache/patchelf-0.9/src/elf.h	/^#define DF_1_NODEFLIB	/;"	d
DF_1_NODELETE	deps/srccache/patchelf-0.9/src/elf.h	/^#define DF_1_NODELETE	/;"	d
DF_1_NODIRECT	deps/srccache/patchelf-0.9/src/elf.h	/^#define	DF_1_NODIRECT	/;"	d
DF_1_NODUMP	deps/srccache/patchelf-0.9/src/elf.h	/^#define DF_1_NODUMP	/;"	d
DF_1_NOHDR	deps/srccache/patchelf-0.9/src/elf.h	/^#define	DF_1_NOHDR	/;"	d
DF_1_NOKSYMS	deps/srccache/patchelf-0.9/src/elf.h	/^#define	DF_1_NOKSYMS	/;"	d
DF_1_NOOPEN	deps/srccache/patchelf-0.9/src/elf.h	/^#define DF_1_NOOPEN	/;"	d
DF_1_NORELOC	deps/srccache/patchelf-0.9/src/elf.h	/^#define	DF_1_NORELOC	/;"	d
DF_1_NOW	deps/srccache/patchelf-0.9/src/elf.h	/^#define DF_1_NOW	/;"	d
DF_1_ORIGIN	deps/srccache/patchelf-0.9/src/elf.h	/^#define DF_1_ORIGIN	/;"	d
DF_1_SINGLETON	deps/srccache/patchelf-0.9/src/elf.h	/^#define	DF_1_SINGLETON	/;"	d
DF_1_SYMINTPOSE	deps/srccache/patchelf-0.9/src/elf.h	/^#define	DF_1_SYMINTPOSE	/;"	d
DF_1_TRANS	deps/srccache/patchelf-0.9/src/elf.h	/^#define DF_1_TRANS	/;"	d
DF_BIND_NOW	deps/srccache/patchelf-0.9/src/elf.h	/^#define DF_BIND_NOW	/;"	d
DF_ORIGIN	deps/srccache/patchelf-0.9/src/elf.h	/^#define DF_ORIGIN	/;"	d
DF_P1_GROUPPERM	deps/srccache/patchelf-0.9/src/elf.h	/^#define DF_P1_GROUPPERM	/;"	d
DF_P1_LAZYLOAD	deps/srccache/patchelf-0.9/src/elf.h	/^#define DF_P1_LAZYLOAD	/;"	d
DF_STATIC_TLS	deps/srccache/patchelf-0.9/src/elf.h	/^#define DF_STATIC_TLS	/;"	d
DF_SYMBOLIC	deps/srccache/patchelf-0.9/src/elf.h	/^#define DF_SYMBOLIC	/;"	d
DF_TEXTREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define DF_TEXTREL	/;"	d
DIFF_DISABLE_PATHSPEC_MATCH	stdlib/LibGit2/src/consts.jl	/^const DIFF_DISABLE_PATHSPEC_MATCH     = Cuint(1 << 12)$/;"	v
DIFF_ENABLE_FAST_UNTRACKED_DIRS	stdlib/LibGit2/src/consts.jl	/^const DIFF_ENABLE_FAST_UNTRACKED_DIRS = Cuint(1 << 14)$/;"	v
DIFF_FLAG_BINARY	stdlib/LibGit2/src/consts.jl	/^const DIFF_FLAG_BINARY     = Cuint(1 << 0)$/;"	v
DIFF_FLAG_NOT_BINARY	stdlib/LibGit2/src/consts.jl	/^const DIFF_FLAG_NOT_BINARY = Cuint(1 << 1)$/;"	v
DIFF_FLAG_VALID_OID	stdlib/LibGit2/src/consts.jl	/^const DIFF_FLAG_VALID_OID  = Cuint(1 << 2)$/;"	v
DIFF_FORCE_BINARY	stdlib/LibGit2/src/consts.jl	/^const DIFF_FORCE_BINARY             = Cuint(1 << 21)$/;"	v
DIFF_FORCE_TEXT	stdlib/LibGit2/src/consts.jl	/^const DIFF_FORCE_TEXT               = Cuint(1 << 20)$/;"	v
DIFF_FORMAT_NAME_ONLY	stdlib/LibGit2/src/consts.jl	/^const DIFF_FORMAT_NAME_ONLY    = Cuint(4)$/;"	v
DIFF_FORMAT_NAME_STATUS	stdlib/LibGit2/src/consts.jl	/^const DIFF_FORMAT_NAME_STATUS  = Cuint(5)$/;"	v
DIFF_FORMAT_PATCH	stdlib/LibGit2/src/consts.jl	/^const DIFF_FORMAT_PATCH        = Cuint(1)$/;"	v
DIFF_FORMAT_PATCH_HEADER	stdlib/LibGit2/src/consts.jl	/^const DIFF_FORMAT_PATCH_HEADER = Cuint(2)$/;"	v
DIFF_FORMAT_RAW	stdlib/LibGit2/src/consts.jl	/^const DIFF_FORMAT_RAW          = Cuint(3)$/;"	v
DIFF_IGNORE_CASE	stdlib/LibGit2/src/consts.jl	/^const DIFF_IGNORE_CASE                = Cuint(1 << 10)$/;"	v
DIFF_IGNORE_FILEMODE	stdlib/LibGit2/src/consts.jl	/^const DIFF_IGNORE_FILEMODE            = Cuint(1 << 8)$/;"	v
DIFF_IGNORE_SUBMODULES	stdlib/LibGit2/src/consts.jl	/^const DIFF_IGNORE_SUBMODULES          = Cuint(1 << 9)$/;"	v
DIFF_IGNORE_WHITESPACE	stdlib/LibGit2/src/consts.jl	/^const DIFF_IGNORE_WHITESPACE        = Cuint(1 << 22)$/;"	v
DIFF_IGNORE_WHITESPACE_CHANGE	stdlib/LibGit2/src/consts.jl	/^const DIFF_IGNORE_WHITESPACE_CHANGE = Cuint(1 << 23)$/;"	v
DIFF_IGNORE_WHITESPACE_EOL	stdlib/LibGit2/src/consts.jl	/^const DIFF_IGNORE_WHITESPACE_EOL    = Cuint(1 << 24)$/;"	v
DIFF_INCLUDE_IGNORED	stdlib/LibGit2/src/consts.jl	/^const DIFF_INCLUDE_IGNORED            = Cuint(1 << 1)$/;"	v
DIFF_INCLUDE_TYPECHANGE	stdlib/LibGit2/src/consts.jl	/^const DIFF_INCLUDE_TYPECHANGE         = Cuint(1 << 6)$/;"	v
DIFF_INCLUDE_TYPECHANGE_TREES	stdlib/LibGit2/src/consts.jl	/^const DIFF_INCLUDE_TYPECHANGE_TREES   = Cuint(1 << 7)$/;"	v
DIFF_INCLUDE_UNMODIFIED	stdlib/LibGit2/src/consts.jl	/^const DIFF_INCLUDE_UNMODIFIED         = Cuint(1 << 5)$/;"	v
DIFF_INCLUDE_UNTRACKED	stdlib/LibGit2/src/consts.jl	/^const DIFF_INCLUDE_UNTRACKED          = Cuint(1 << 3)$/;"	v
DIFF_MINIMAL	stdlib/LibGit2/src/consts.jl	/^const DIFF_MINIMAL                  = Cuint(1 << 29)$/;"	v
DIFF_NORMAL	stdlib/LibGit2/src/consts.jl	/^const DIFF_NORMAL                     = Cuint(0)$/;"	v
DIFF_OPTIONS_VERSION	stdlib/LibGit2/src/consts.jl	/^const DIFF_OPTIONS_VERSION = Cuint(1)$/;"	v
DIFF_PATIENCE	stdlib/LibGit2/src/consts.jl	/^const DIFF_PATIENCE                 = Cuint(1 << 28)$/;"	v
DIFF_RECURSE_IGNORED_DIRS	stdlib/LibGit2/src/consts.jl	/^const DIFF_RECURSE_IGNORED_DIRS       = Cuint(1 << 2)$/;"	v
DIFF_RECURSE_UNTRACKED_DIRS	stdlib/LibGit2/src/consts.jl	/^const DIFF_RECURSE_UNTRACKED_DIRS     = Cuint(1 << 4)$/;"	v
DIFF_REVERSE	stdlib/LibGit2/src/consts.jl	/^const DIFF_REVERSE                    = Cuint(1 << 0)$/;"	v
DIFF_SHOW_UNMODIFIED	stdlib/LibGit2/src/consts.jl	/^const DIFF_SHOW_UNMODIFIED          = Cuint(1 << 26)$/;"	v
DIFF_SHOW_UNTRACKED_CONTENT	stdlib/LibGit2/src/consts.jl	/^const DIFF_SHOW_UNTRACKED_CONTENT   = Cuint(1 << 25)$/;"	v
DIFF_SKIP_BINARY_CHECK	stdlib/LibGit2/src/consts.jl	/^const DIFF_SKIP_BINARY_CHECK          = Cuint(1 << 13)$/;"	v
DIFlagZero	src/codegen.cpp	/^#define DIFlagZero /;"	d	file:
DIGITS	base/grisu/grisu.jl	/^const DIGITS = Vector{UInt8}(undef, 309+17)$/;"	v
DIGITSs	base/grisu/grisu.jl	/^const DIGITSs = [DIGITS]$/;"	v
DIGIT_TABLE	base/ryu/utils.jl	/^const DIGIT_TABLE = UInt8[$/;"	v
DILineInfoPrinter	base/compiler/ssair/show.jl	/^function DILineInfoPrinter(linetable::Vector, showtypes::Bool=false)$/;"	f
DILineInfoPrinter	src/disasm.cpp	/^    DILineInfoPrinter(const char *LineStart, bool bracket_outer)$/;"	f	class:DILineInfoPrinter	file:
DILineInfoPrinter	src/disasm.cpp	/^class DILineInfoPrinter {$/;"	c	file:
DIRS	Makefile	/^DIRS := $(DIRS) $(BUILDDIRS)$/;"	m
DIRS	Makefile	/^DIRS := $(sort $(build_bindir) $(build_depsbindir) $(build_libdir) $(build_private_libdir) $(bui/;"	m
DIRS	deps/tools/common.mk	/^DIRS := $(sort $(build_bindir) $(build_depsbindir) $(build_libdir) $(build_includedir) $(build_s/;"	m
DISABLE_FLOAT16	src/codegen.cpp	/^#define DISABLE_FLOAT16$/;"	d	file:
DISPLAY_FAILED	stdlib/Test/src/Test.jl	/^const DISPLAY_FAILED = ($/;"	v
DISTFILES	deps/srccache/patchelf-0.9/Makefile.in	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	deps/srccache/patchelf-0.9/src/Makefile.in	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	deps/srccache/patchelf-0.9/tests/Makefile.in	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_ARCHIVES	deps/srccache/patchelf-0.9/Makefile.in	/^DIST_ARCHIVES = $(distdir).tar.gz $(distdir).tar.bz2$/;"	m
DIST_COMMON	deps/srccache/patchelf-0.9/Makefile.in	/^DIST_COMMON = $(srcdir)\/Makefile.am $(top_srcdir)\/configure \\$/;"	m
DIST_COMMON	deps/srccache/patchelf-0.9/src/Makefile.in	/^DIST_COMMON = $(srcdir)\/Makefile.am $(am__DIST_COMMON)$/;"	m
DIST_COMMON	deps/srccache/patchelf-0.9/tests/Makefile.in	/^DIST_COMMON = $(srcdir)\/Makefile.am $(am__DIST_COMMON)$/;"	m
DIST_SOURCES	deps/srccache/patchelf-0.9/Makefile.in	/^DIST_SOURCES =$/;"	m
DIST_SOURCES	deps/srccache/patchelf-0.9/src/Makefile.in	/^DIST_SOURCES = $(patchelf_SOURCES)$/;"	m
DIST_SOURCES	deps/srccache/patchelf-0.9/tests/Makefile.in	/^DIST_SOURCES = $(libbar_scoped_so_SOURCES) $(libbar_so_SOURCES) \\$/;"	m
DIST_SUBDIRS	deps/srccache/patchelf-0.9/Makefile.in	/^DIST_SUBDIRS = $(SUBDIRS)$/;"	m
DIST_TARGETS	deps/srccache/patchelf-0.9/Makefile.in	/^DIST_TARGETS = dist-bzip2 dist-gzip$/;"	m
DL	src/jitlayers.h	/^    const DataLayout DL;$/;"	m	class:JuliaOJIT	typeref:typename:const DataLayout
DL	src/llvm-alloc-opt.cpp	/^    const DataLayout *DL;$/;"	m	struct:__anon0a1571000111::AllocOpt	typeref:typename:const DataLayout *	file:
DLMHandler	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^abstract type DLMHandler end$/;"	f
DLMOffsets	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^    function DLMOffsets(sbuff::String)$/;"	f
DLMOffsets	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^mutable struct DLMOffsets <: DLMHandler$/;"	f
DLMStore	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^function DLMStore(::Type{T}, dims::NTuple{2,Integer},$/;"	f
DLMStore	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^mutable struct DLMStore{T} <: DLMHandler$/;"	f
DL_LOAD_PATH	base/Base.jl	/^const DL_LOAD_PATH = String[]$/;"	v
DMG_NAME	contrib/mac/app/Makefile	/^DMG_NAME:=$(JULIA_BINARYDIST_FILENAME).dmg$/;"	m
DNSError	stdlib/Sockets/src/addrinfo.jl	/^struct DNSError <: Exception$/;"	f
DOBJS	src/Makefile	/^DOBJS := $(SRCS:%=$(BUILDDIR)\/%.dbg.obj)$/;"	m
DOBJS	src/flisp/Makefile	/^DOBJS := $(SRCS:%.c=$(BUILDDIR)\/%.dbg.obj)$/;"	m
DOBJS	src/support/Makefile	/^DOBJS := $(SRCS:%=$(BUILDDIR)\/%.dbg.obj)$/;"	m
DOBJS	ui/Makefile	/^DOBJS := $(SRCS:%=$(BUILDDIR)\/%.dbg.obj)$/;"	m
DOCS	base/docs/core.jl	/^const DOCS = Array{Core.SimpleVector,1}()$/;"	v
DOCUMENTER_OPTIONS	doc/Makefile	/^DOCUMENTER_OPTIONS := linkcheck=$(linkcheck) doctest=$(doctest) buildroot=$(call cygpath_w,$(BUI/;"	m
DOUBLE	stdlib/SuiteSparse/src/cholmod_h.jl	/^const DOUBLE = Int32(0)        # all numerical values are double$/;"	v
DOUBLE_POW5_INV_SPLIT	base/ryu/utils.jl	/^const DOUBLE_POW5_INV_SPLIT = map(i->pow5invsplit(Float64, i), 0:291)$/;"	v
DOUBLE_POW5_SPLIT	base/ryu/utils.jl	/^const DOUBLE_POW5_SPLIT = map(i->pow5split(Float64, i), 0:325)$/;"	v
DOWNLOAD_HOOKS	base/download.jl	/^const DOWNLOAD_HOOKS = Callable[]$/;"	v
DOWN_ARROW	contrib/generate_precompile.jl	/^DOWN_ARROW = "\\e[B"$/;"	v
DS1	base/special/trig.jl	/^const DS1 = -1.66666666666666324348e-01$/;"	v
DS2	base/special/trig.jl	/^const DS2 = 8.33333333332248946124e-03$/;"	v
DS3	base/special/trig.jl	/^const DS3 = -1.98412698298579493134e-04$/;"	v
DS4	base/special/trig.jl	/^const DS4 = 2.75573137070700676789e-06$/;"	v
DS5	base/special/trig.jl	/^const DS5 = -2.50507602534068634195e-08$/;"	v
DS6	base/special/trig.jl	/^const DS6 = 1.58969099521155010221e-10$/;"	v
DSFMT	stdlib/Random/src/DSFMT.jl	/^module DSFMT$/;"	f
DSFMT_BB_NAME	deps/dsfmt.mk	/^DSFMT_BB_NAME := dSFMT.v$(DSFMT_VER)$/;"	m
DSFMT_BB_URL_BASE	deps/dsfmt.mk	/^DSFMT_BB_URL_BASE := https:\/\/github.com\/JuliaPackaging\/Yggdrasil\/releases\/download\/dSFMT-/;"	m
DSFMT_CFLAGS	deps/dsfmt.mk	/^DSFMT_CFLAGS := $(CFLAGS) -DNDEBUG -DDSFMT_MEXP=19937 $(fPIC) -DDSFMT_DO_NOT_USE_OLD_NAMES$/;"	m
DSFMT_INSTALL	deps/dsfmt.mk	/^define DSFMT_INSTALL$/;"	m
DSFMT_state	stdlib/Random/src/DSFMT.jl	/^    function DSFMT_state(val::Vector{Int32} = zeros(Int32, JN32))$/;"	f
DSFMT_state	stdlib/Random/src/DSFMT.jl	/^struct DSFMT_state$/;"	f
DT	src/llvm-late-gc-lowering.cpp	/^    DominatorTree *DT;$/;"	m	struct:State	typeref:typename:DominatorTree *	file:
DTF_1_CONFEXP	deps/srccache/patchelf-0.9/src/elf.h	/^#define DTF_1_CONFEXP	/;"	d
DTF_1_PARINIT	deps/srccache/patchelf-0.9/src/elf.h	/^#define DTF_1_PARINIT	/;"	d
DT_ADDRNUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_ADDRNUM /;"	d
DT_ADDRRNGHI	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_ADDRRNGHI	/;"	d
DT_ADDRRNGLO	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_ADDRRNGLO	/;"	d
DT_ADDRTAGIDX	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_ADDRTAGIDX(/;"	d
DT_ALPHA_NUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_ALPHA_NUM	/;"	d
DT_ALPHA_PLTRO	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_ALPHA_PLTRO	/;"	d
DT_AUDIT	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_AUDIT	/;"	d
DT_AUXILIARY	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_AUXILIARY /;"	d
DT_BIND_NOW	deps/srccache/patchelf-0.9/src/elf.h	/^#define	DT_BIND_NOW	/;"	d
DT_CHECKSUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_CHECKSUM	/;"	d
DT_CONFIG	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_CONFIG	/;"	d
DT_DEBUG	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_DEBUG	/;"	d
DT_DEPAUDIT	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_DEPAUDIT	/;"	d
DT_ENCODING	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_ENCODING	/;"	d
DT_EXTRANUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_EXTRANUM	/;"	d
DT_EXTRATAGIDX	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_EXTRATAGIDX(/;"	d
DT_FEATURE_1	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_FEATURE_1	/;"	d
DT_FILTER	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_FILTER /;"	d
DT_FINI	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_FINI	/;"	d
DT_FINI_ARRAY	deps/srccache/patchelf-0.9/src/elf.h	/^#define	DT_FINI_ARRAY	/;"	d
DT_FINI_ARRAYSZ	deps/srccache/patchelf-0.9/src/elf.h	/^#define	DT_FINI_ARRAYSZ	/;"	d
DT_FLAGS	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_FLAGS	/;"	d
DT_FLAGS_1	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_FLAGS_1	/;"	d
DT_GNU_CONFLICT	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_GNU_CONFLICT	/;"	d
DT_GNU_CONFLICTSZ	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_GNU_CONFLICTSZ /;"	d
DT_GNU_HASH	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_GNU_HASH	/;"	d
DT_GNU_LIBLIST	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_GNU_LIBLIST	/;"	d
DT_GNU_LIBLISTSZ	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_GNU_LIBLISTSZ /;"	d
DT_GNU_PRELINKED	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_GNU_PRELINKED /;"	d
DT_HASH	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_HASH	/;"	d
DT_HIOS	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_HIOS	/;"	d
DT_HIPROC	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_HIPROC	/;"	d
DT_IA_64_NUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_IA_64_NUM	/;"	d
DT_IA_64_PLT_RESERVE	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_IA_64_PLT_RESERVE	/;"	d
DT_IGNORE	deps/srccache/patchelf-0.9/src/patchelf.cc	/^#define DT_IGNORE /;"	d	file:
DT_INIT	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_INIT	/;"	d
DT_INIT_ARRAY	deps/srccache/patchelf-0.9/src/elf.h	/^#define	DT_INIT_ARRAY	/;"	d
DT_INIT_ARRAYSZ	deps/srccache/patchelf-0.9/src/elf.h	/^#define	DT_INIT_ARRAYSZ	/;"	d
DT_JMPREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_JMPREL	/;"	d
DT_LOOS	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_LOOS	/;"	d
DT_LOPROC	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_LOPROC	/;"	d
DT_MIPS_AUX_DYNAMIC	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_AUX_DYNAMIC /;"	d
DT_MIPS_BASE_ADDRESS	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_BASE_ADDRESS /;"	d
DT_MIPS_COMPACT_SIZE	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_COMPACT_SIZE /;"	d
DT_MIPS_CONFLICT	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_CONFLICT /;"	d
DT_MIPS_CONFLICTNO	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_CONFLICTNO /;"	d
DT_MIPS_CXX_FLAGS	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_CXX_FLAGS /;"	d
DT_MIPS_DELTA_CLASS	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_DELTA_CLASS /;"	d
DT_MIPS_DELTA_CLASSSYM	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_DELTA_CLASSSYM /;"	d
DT_MIPS_DELTA_CLASSSYM_NO	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_DELTA_CLASSSYM_NO /;"	d
DT_MIPS_DELTA_CLASS_NO	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_DELTA_CLASS_NO /;"	d
DT_MIPS_DELTA_INSTANCE	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_DELTA_INSTANCE /;"	d
DT_MIPS_DELTA_INSTANCE_NO	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_DELTA_INSTANCE_NO /;"	d
DT_MIPS_DELTA_RELOC	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_DELTA_RELOC /;"	d
DT_MIPS_DELTA_RELOC_NO	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_DELTA_RELOC_NO /;"	d
DT_MIPS_DELTA_SYM	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_DELTA_SYM /;"	d
DT_MIPS_DELTA_SYM_NO	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_DELTA_SYM_NO /;"	d
DT_MIPS_DYNSTR_ALIGN	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_DYNSTR_ALIGN /;"	d
DT_MIPS_FLAGS	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_FLAGS	/;"	d
DT_MIPS_GOTSYM	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_GOTSYM	/;"	d
DT_MIPS_GP_VALUE	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_GP_VALUE /;"	d
DT_MIPS_HIDDEN_GOTIDX	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_HIDDEN_GOTIDX /;"	d
DT_MIPS_HIPAGENO	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_HIPAGENO /;"	d
DT_MIPS_ICHECKSUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_ICHECKSUM /;"	d
DT_MIPS_INTERFACE	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_INTERFACE /;"	d
DT_MIPS_INTERFACE_SIZE	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_INTERFACE_SIZE /;"	d
DT_MIPS_IVERSION	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_IVERSION /;"	d
DT_MIPS_LIBLIST	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_LIBLIST	/;"	d
DT_MIPS_LIBLISTNO	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_LIBLISTNO /;"	d
DT_MIPS_LOCALPAGE_GOTIDX	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_LOCALPAGE_GOTIDX /;"	d
DT_MIPS_LOCAL_GOTIDX	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_LOCAL_GOTIDX /;"	d
DT_MIPS_LOCAL_GOTNO	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_LOCAL_GOTNO /;"	d
DT_MIPS_MSYM	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_MSYM	/;"	d
DT_MIPS_NUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_NUM	/;"	d
DT_MIPS_OPTIONS	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_OPTIONS	/;"	d
DT_MIPS_PERF_SUFFIX	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_PERF_SUFFIX /;"	d
DT_MIPS_PIXIE_INIT	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_PIXIE_INIT /;"	d
DT_MIPS_PLTGOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_PLTGOT	/;"	d
DT_MIPS_PROTECTED_GOTIDX	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_PROTECTED_GOTIDX /;"	d
DT_MIPS_RLD_MAP	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_RLD_MAP	/;"	d
DT_MIPS_RLD_TEXT_RESOLVE_ADDR	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_RLD_TEXT_RESOLVE_ADDR /;"	d
DT_MIPS_RLD_VERSION	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_RLD_VERSION /;"	d
DT_MIPS_RWPLT	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_RWPLT /;"	d
DT_MIPS_SYMBOL_LIB	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_SYMBOL_LIB /;"	d
DT_MIPS_SYMTABNO	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_SYMTABNO /;"	d
DT_MIPS_TIME_STAMP	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_TIME_STAMP /;"	d
DT_MIPS_UNREFEXTNO	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MIPS_UNREFEXTNO /;"	d
DT_MOVEENT	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MOVEENT	/;"	d
DT_MOVESZ	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_MOVESZ	/;"	d
DT_MOVETAB	deps/srccache/patchelf-0.9/src/elf.h	/^#define	DT_MOVETAB	/;"	d
DT_NEEDED	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_NEEDED	/;"	d
DT_NULL	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_NULL	/;"	d
DT_NUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define	DT_NUM	/;"	d
DT_PLTGOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_PLTGOT	/;"	d
DT_PLTPAD	deps/srccache/patchelf-0.9/src/elf.h	/^#define	DT_PLTPAD	/;"	d
DT_PLTPADSZ	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_PLTPADSZ	/;"	d
DT_PLTREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_PLTREL	/;"	d
DT_PLTRELSZ	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_PLTRELSZ	/;"	d
DT_POSFLAG_1	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_POSFLAG_1	/;"	d
DT_PPC64_GLINK	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_PPC64_GLINK /;"	d
DT_PPC64_NUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_PPC64_NUM /;"	d
DT_PPC64_OPD	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_PPC64_OPD	/;"	d
DT_PPC64_OPDSZ	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_PPC64_OPDSZ	/;"	d
DT_PPC64_OPT	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_PPC64_OPT	/;"	d
DT_PPC_GOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_PPC_GOT	/;"	d
DT_PPC_NUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_PPC_NUM	/;"	d
DT_PREINIT_ARRAY	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_PREINIT_ARRAY /;"	d
DT_PREINIT_ARRAYSZ	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_PREINIT_ARRAYSZ /;"	d
DT_PROCNUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define	DT_PROCNUM	/;"	d
DT_REL	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_REL	/;"	d
DT_RELA	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_RELA	/;"	d
DT_RELACOUNT	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_RELACOUNT	/;"	d
DT_RELAENT	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_RELAENT	/;"	d
DT_RELASZ	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_RELASZ	/;"	d
DT_RELCOUNT	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_RELCOUNT	/;"	d
DT_RELENT	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_RELENT	/;"	d
DT_RELSZ	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_RELSZ	/;"	d
DT_RPATH	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_RPATH	/;"	d
DT_RUNPATH	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_RUNPATH	/;"	d
DT_SONAME	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_SONAME	/;"	d
DT_SPARC_NUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_SPARC_NUM	/;"	d
DT_SPARC_REGISTER	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_SPARC_REGISTER	/;"	d
DT_STRSZ	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_STRSZ	/;"	d
DT_STRTAB	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_STRTAB	/;"	d
DT_SYMBOLIC	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_SYMBOLIC	/;"	d
DT_SYMENT	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_SYMENT	/;"	d
DT_SYMINENT	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_SYMINENT	/;"	d
DT_SYMINFO	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_SYMINFO	/;"	d
DT_SYMINSZ	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_SYMINSZ	/;"	d
DT_SYMTAB	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_SYMTAB	/;"	d
DT_TEXTREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_TEXTREL	/;"	d
DT_TLSDESC_GOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_TLSDESC_GOT	/;"	d
DT_TLSDESC_PLT	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_TLSDESC_PLT	/;"	d
DT_VALNUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_VALNUM /;"	d
DT_VALRNGHI	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_VALRNGHI	/;"	d
DT_VALRNGLO	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_VALRNGLO	/;"	d
DT_VALTAGIDX	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_VALTAGIDX(/;"	d
DT_VERDEF	deps/srccache/patchelf-0.9/src/elf.h	/^#define	DT_VERDEF	/;"	d
DT_VERDEFNUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define	DT_VERDEFNUM	/;"	d
DT_VERNEED	deps/srccache/patchelf-0.9/src/elf.h	/^#define	DT_VERNEED	/;"	d
DT_VERNEEDNUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define	DT_VERNEEDNUM	/;"	d
DT_VERSIONTAGIDX	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_VERSIONTAGIDX(/;"	d
DT_VERSIONTAGNUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_VERSIONTAGNUM /;"	d
DT_VERSYM	deps/srccache/patchelf-0.9/src/elf.h	/^#define DT_VERSYM	/;"	d
DUMP_DEFAULT_MAXDEPTH	base/show.jl	/^const DUMP_DEFAULT_MAXDEPTH = 8$/;"	v
DUMP_MODES	src/dump.c	/^} DUMP_MODES;$/;"	t	typeref:enum:_DUMP_MODES	file:
DWORD	stdlib/Mmap/src/Mmap.jl	/^const DWORD = Culong$/;"	v
DW_EH_PE	src/debuginfo.cpp	/^enum DW_EH_PE : uint8_t {$/;"	g	typeref:typename:uint8_t	file:
DW_EH_PE_absptr	src/debuginfo.cpp	/^    DW_EH_PE_absptr = 0x00, \/* An absolute pointer. The size is determined by$/;"	e	enum:DW_EH_PE	file:
DW_EH_PE_aligned	src/debuginfo.cpp	/^    DW_EH_PE_aligned = 0x50, \/* Value is aligned: padding bytes are inserted as$/;"	e	enum:DW_EH_PE	file:
DW_EH_PE_datarel	src/debuginfo.cpp	/^    DW_EH_PE_datarel = 0x30, \/\/ Value is data relative.$/;"	e	enum:DW_EH_PE	file:
DW_EH_PE_funcrel	src/debuginfo.cpp	/^    DW_EH_PE_funcrel = 0x40, \/\/ Value is relative to start of function.$/;"	e	enum:DW_EH_PE	file:
DW_EH_PE_indirect	src/debuginfo.cpp	/^    DW_EH_PE_indirect = 0x80 \/* This is actually the address of the real value. *\/$/;"	e	enum:DW_EH_PE	file:
DW_EH_PE_omit	src/debuginfo.cpp	/^    DW_EH_PE_omit = 0xff, \/\/ The value is omitted$/;"	e	enum:DW_EH_PE	file:
DW_EH_PE_pcrel	src/debuginfo.cpp	/^    DW_EH_PE_pcrel = 0x10, \/\/ Value is PC relative.$/;"	e	enum:DW_EH_PE	file:
DW_EH_PE_sdata2	src/debuginfo.cpp	/^    DW_EH_PE_sdata2 = 0x0a,$/;"	e	enum:DW_EH_PE	file:
DW_EH_PE_sdata4	src/debuginfo.cpp	/^    DW_EH_PE_sdata4 = 0x0b,$/;"	e	enum:DW_EH_PE	file:
DW_EH_PE_sdata8	src/debuginfo.cpp	/^    DW_EH_PE_sdata8 = 0x0c, \/* The value is stored as signed data with the$/;"	e	enum:DW_EH_PE	file:
DW_EH_PE_signed	src/debuginfo.cpp	/^    DW_EH_PE_signed = 0x08, \/* A signed number. The size is determined by$/;"	e	enum:DW_EH_PE	file:
DW_EH_PE_sleb128	src/debuginfo.cpp	/^    DW_EH_PE_sleb128 = 0x09, \/* A signed LEB128. *\/$/;"	e	enum:DW_EH_PE	file:
DW_EH_PE_textrel	src/debuginfo.cpp	/^    DW_EH_PE_textrel = 0x20, \/\/ Value is text relative.$/;"	e	enum:DW_EH_PE	file:
DW_EH_PE_udata2	src/debuginfo.cpp	/^    DW_EH_PE_udata2 = 0x02,$/;"	e	enum:DW_EH_PE	file:
DW_EH_PE_udata4	src/debuginfo.cpp	/^    DW_EH_PE_udata4 = 0x03,$/;"	e	enum:DW_EH_PE	file:
DW_EH_PE_udata8	src/debuginfo.cpp	/^    DW_EH_PE_udata8 = 0x04, \/* The value is stored as unsigned data with the$/;"	e	enum:DW_EH_PE	file:
DW_EH_PE_uleb128	src/debuginfo.cpp	/^    DW_EH_PE_uleb128 = 0x01, \/\/ The value is an unsigned LEB128$/;"	e	enum:DW_EH_PE	file:
DYN_GETAUXVAL	src/processor_arm.cpp	/^#  define DYN_GETAUXVAL$/;"	d	file:
D_1_LOG2_10	base/grisu/float.jl	/^const D_1_LOG2_10 = 0.30102999566398114  #  1 \/ lg(10)$/;"	v
D_NINF	src/support/dtypes.h	/^#define D_NINF /;"	d
D_NNAN	src/support/dtypes.h	/^#define D_NNAN /;"	d
D_PINF	src/support/dtypes.h	/^#define D_PINF /;"	d
D_PNAN	src/support/dtypes.h	/^#define D_PNAN /;"	d
Data Formats	doc/src/base/numbers.md	/^## Data Formats$/;"	s
Data Movement	doc/src/manual/parallel-computing.md	/^## Data Movement$/;"	s
DataRef	src/staticdata.c	/^    DataRef,$/;"	e	enum:RefTags	file:
DataType fields	doc/src/devdocs/reflection.md	/^## DataType fields$/;"	s
DataType layout	doc/src/devdocs/reflection.md	/^## DataType layout$/;"	s
DataTypeLayout	base/reflection.jl	/^struct DataTypeLayout$/;"	f
Date	stdlib/Dates/src/adjusters.jl	/^function Date(func::Function, y, m=1, d=1; step::Period=Day(1), limit::Int=10000)$/;"	f
Date	stdlib/Dates/src/conversions.jl	/^Date(dt::TimeType) = convert(Date, dt)$/;"	f
Date	stdlib/Dates/src/io.jl	/^Date(d::AbstractString, df::DateFormat=ISODateFormat) = parse(Date, d, df)$/;"	f
Date	stdlib/Dates/src/io.jl	/^function Date(d::AbstractString, format::AbstractString; locale::Locale=ENGLISH)$/;"	f
Date	stdlib/Dates/src/types.jl	/^    Date(instant::UTInstant{Day}) = new(instant)$/;"	f
Date	stdlib/Dates/src/types.jl	/^Date(dt::Base.Libc.TmStruct) = Date(1900 + dt.year, 1 + dt.month, dt.mday)$/;"	f
Date	stdlib/Dates/src/types.jl	/^Date(y, m=1, d=1) = Date(Int64(y), Int64(m), Int64(d))$/;"	f
Date	stdlib/Dates/src/types.jl	/^Date(y::Year, m::Month=Month(1), d::Day=Day(1)) = Date(value(y), value(m), value(d))$/;"	f
Date	stdlib/Dates/src/types.jl	/^function Date(period::Period, periods::Period...)$/;"	f
Date	stdlib/Dates/src/types.jl	/^function Date(y::Int64, m::Int64=1, d::Int64=1)$/;"	f
Date	stdlib/Dates/src/types.jl	/^struct Date <: TimeType$/;"	f
Date4581	test/intrinsics.jl	/^primitive type Date4581{T} 64 end$/;"	f
Date6387	test/core.jl	/^primitive type Date6387{C} 64 end$/;"	f
DateFormat	stdlib/Dates/src/io.jl	/^function DateFormat(f::AbstractString, locale::AbstractString)$/;"	f
DateFormat	stdlib/Dates/src/io.jl	/^function DateFormat(f::AbstractString, locale::DateLocale=ENGLISH)$/;"	f
DateFormat	stdlib/Dates/src/io.jl	/^struct DateFormat{S, T<:Tuple}$/;"	f
DateFunction	stdlib/Dates/src/adjusters.jl	/^    function DateFunction(@nospecialize(f), dt::TimeType)$/;"	f
DateFunction	stdlib/Dates/src/adjusters.jl	/^struct DateFunction$/;"	f
DateLocale	stdlib/Dates/src/query.jl	/^function DateLocale(months::Vector, months_abbr::Vector,$/;"	f
DateLocale	stdlib/Dates/src/query.jl	/^struct DateLocale$/;"	f
DatePart	stdlib/Dates/src/io.jl	/^struct DatePart{letter} <: AbstractDateToken$/;"	f
DatePeriod	stdlib/Dates/src/types.jl	/^abstract type DatePeriod <: Period end$/;"	f
DateRange6387	test/core.jl	/^mutable struct DateRange6387{C} <: AbstractRange{Date6387{C}}$/;"	f
DateTests	stdlib/Dates/test/runtests.jl	/^module DateTests$/;"	f
DateTime	stdlib/Dates/src/adjusters.jl	/^function DateTime(func::Function, y, m, d, h, mi, s; step::Period=Millisecond(1), limit::Int=100/;"	f
DateTime	stdlib/Dates/src/adjusters.jl	/^function DateTime(func::Function, y, m, d, h, mi; step::Period=Second(1), limit::Int=10000)$/;"	f
DateTime	stdlib/Dates/src/adjusters.jl	/^function DateTime(func::Function, y, m, d, h; step::Period=Minute(1), limit::Int=10000)$/;"	f
DateTime	stdlib/Dates/src/adjusters.jl	/^function DateTime(func::Function, y, m, d; step::Period=Hour(1), limit::Int=10000)$/;"	f
DateTime	stdlib/Dates/src/adjusters.jl	/^function DateTime(func::Function, y, m=1; step::Period=Day(1), limit::Int=10000)$/;"	f
DateTime	stdlib/Dates/src/conversions.jl	/^DateTime(dt::TimeType) = convert(DateTime, dt)$/;"	f
DateTime	stdlib/Dates/src/io.jl	/^DateTime(dt::AbstractString, df::DateFormat=ISODateTimeFormat) = parse(DateTime, dt, df)$/;"	f
DateTime	stdlib/Dates/src/io.jl	/^function DateTime(dt::AbstractString, format::AbstractString; locale::Locale=ENGLISH)$/;"	f
DateTime	stdlib/Dates/src/types.jl	/^    DateTime(instant::UTInstant{Millisecond}) = new(instant)$/;"	f
DateTime	stdlib/Dates/src/types.jl	/^DateTime(dt::Base.Libc.TmStruct) = DateTime(1900 + dt.year, 1 + dt.month, dt.mday, dt.hour, dt.m/;"	f
DateTime	stdlib/Dates/src/types.jl	/^DateTime(y, m=1, d=1, h=0, mi=0, s=0, ms=0, ampm::AMPM=TWENTYFOURHOUR) = DateTime(Int64(y), Int6/;"	f
DateTime	stdlib/Dates/src/types.jl	/^function DateTime(dt::Date, t::Time)$/;"	f
DateTime	stdlib/Dates/src/types.jl	/^function DateTime(period::Period, periods::Period...)$/;"	f
DateTime	stdlib/Dates/src/types.jl	/^function DateTime(y::Int64, m::Int64=1, d::Int64=1,$/;"	f
DateTime	stdlib/Dates/src/types.jl	/^function DateTime(y::Year, m::Month=Month(1), d::Day=Day(1),$/;"	f
DateTime	stdlib/Dates/src/types.jl	/^struct DateTime <: AbstractDateTime$/;"	f
Dates	HISTORY.md	/^#### Dates$/;"	t
Dates	NEWS.md	/^#### Dates$/;"	t
Dates	stdlib/Dates/docs/src/index.md	/^# Dates$/;"	c
Dates	stdlib/Dates/src/Dates.jl	/^module Dates$/;"	f
Dates Functions	stdlib/Dates/docs/src/index.md	/^## Dates Functions$/;"	s
Dates and Time Types	stdlib/Dates/docs/src/index.md	/^## Dates and Time Types$/;"	s
Dates.Time	stdlib/Dates/test/io.jl	/^        Dates.Time(0) => ("00:00:00", "Dates.Time(0)"),$/;"	f
Dates.Time	stdlib/Dates/test/io.jl	/^        Dates.Time(0, 0, 0, 0, 0, 1) => ("00:00:00.000000001", "Dates.Time(0, 0, 0, 0, 0, 1)"),$/;"	f
Dates.Time	stdlib/Dates/test/io.jl	/^        Dates.Time(0, 0, 0, 1) => ("00:00:00.001", "Dates.Time(0, 0, 0, 1)"),$/;"	f
Dates.Time	stdlib/Dates/test/io.jl	/^        Dates.Time(0, 1) => ("00:01:00", "Dates.Time(0, 1)"),$/;"	f
Dates.Time	stdlib/Dates/test/io.jl	/^        Dates.Time(0, 1, 2) => ("00:01:02", "Dates.Time(0, 1, 2)"),$/;"	f
Dates.Time	stdlib/Dates/test/io.jl	/^        Dates.Time(0, 1, 2, 3) => ("00:01:02.003", "Dates.Time(0, 1, 2, 3)"),$/;"	f
Dates.Time	stdlib/Dates/test/io.jl	/^        Dates.Time(0, 1, 2, 3, 4) => ("00:01:02.003004", "Dates.Time(0, 1, 2, 3, 4)"),$/;"	f
Dates.Time	stdlib/Dates/test/io.jl	/^        Dates.Time(0, 1, 2, 3, 4, 5) => ("00:01:02.003004005", "Dates.Time(0, 1, 2, 3, 4, 5)"),$/;"	f
Dates._units	stdlib/Dates/test/periods.jl	/^    Dates._units(b::Beat) = " beat" * (abs(Dates.value(b)) == 1 ? "" : "s")$/;"	f
Dates.toms	stdlib/Dates/test/periods.jl	/^    Dates.toms(b::Beat) = Dates.value(b) * 86400$/;"	f
Dates.tryparsenext	stdlib/Dates/test/io.jl	/^    function Dates.tryparsenext(d::Dates.DatePart{'Z'}, str, i, len)$/;"	f
Dates.value	stdlib/Dates/test/periods.jl	/^    Dates.value(b::Beat) = b.value$/;"	f
DayOfWeekToken	stdlib/Dates/src/io.jl	/^abstract type DayOfWeekToken end # special addition to Period types$/;"	f
Dealing with signals	doc/src/devdocs/debuggingtips.md	/^## Dealing with signals$/;"	s
Debug	base/logging.jl	/^const Debug         = LogLevel(   -1000)$/;"	v
DebugLineTable	src/codegen.cpp	/^    struct DebugLineTable {$/;"	s	function:emit_function	file:
DebugLoc	src/disasm.cpp	/^    DenseMap<const Instruction *, DILocation *> DebugLoc;$/;"	m	class:LineNumberAnnotatedWriter	typeref:typename:DenseMap<const Instruction *,DILocation * >	file:
DebugObjectRegistrar	src/jitlayers.cpp	/^JuliaOJIT::DebugObjectRegistrar::DebugObjectRegistrar(JuliaOJIT &JIT)$/;"	f	class:JuliaOJIT::DebugObjectRegistrar
DebugObjectRegistrar	src/jitlayers.h	/^    class DebugObjectRegistrar {$/;"	c	class:JuliaOJIT
Debugging LLVM transformations in isolation	doc/src/devdocs/llvm.md	/^## Debugging LLVM transformations in isolation$/;"	s
Debugging a cross-compiled build under wine	doc/build/windows.md	/^## Debugging a cross-compiled build under wine$/;"	s
Debugging and profiling	doc/src/manual/environment-variables.md	/^## Debugging and profiling$/;"	s
Debugging compiler.jl	doc/src/devdocs/inference.md	/^## Debugging compiler.jl$/;"	s
Debugging during Julia's build process (bootstrap)	doc/src/devdocs/debuggingtips.md	/^## Debugging during Julia's build process (bootstrap)$/;"	s
Debugging precompilation errors	doc/src/devdocs/debuggingtips.md	/^## Debugging precompilation errors$/;"	s
Dec	stdlib/Dates/src/query.jl	/^const Dec = 12$/;"	v
Dec	stdlib/Dates/test/adjusters.jl	/^Dec = Dates.DateTime(2013, 12, 11) #Wednesday$/;"	v
Dec	stdlib/Dates/test/query.jl	/^Dec = Dates.DateTime(2013, 12, 11) # Wednesday$/;"	v
December	stdlib/Dates/src/query.jl	/^const December = 12$/;"	v
Decimal3	stdlib/Dates/src/io.jl	/^struct Decimal3 end$/;"	f
DecimalExponentDistance	base/grisu/float.jl	/^const DecimalExponentDistance = 8$/;"	v
DeclarationFunction	src/llvm-pass-helpers.h	/^        typedef llvm::Function *(*DeclarationFunction)(const JuliaPassContext&);$/;"	t	struct:jl_intrinsics::IntrinsicDescription	typeref:typename:llvm::Function * (*)(const JuliaPassContext &)
Declared Types	doc/src/manual/types.md	/^## Declared Types$/;"	s
Declared structure	doc/src/base/base.md	/^### Declared structure$/;"	S
Default top-level definitions and bare modules	doc/src/manual/modules.md	/^### Default top-level definitions and bare modules$/;"	S
DefaultAbiState	src/ccall.cpp	/^     typedef ABI_Win32Layout DefaultAbiState;$/;"	t	typeref:typename:ABI_Win32Layout	file:
DefaultAbiState	src/ccall.cpp	/^     typedef ABI_Win64Layout DefaultAbiState;$/;"	t	typeref:typename:ABI_Win64Layout	file:
DefaultAbiState	src/ccall.cpp	/^     typedef ABI_x86Layout DefaultAbiState;$/;"	t	typeref:typename:ABI_x86Layout	file:
DefaultAbiState	src/ccall.cpp	/^     typedef ABI_x86_64Layout DefaultAbiState;$/;"	t	typeref:typename:ABI_x86_64Layout	file:
DefaultAbiState	src/ccall.cpp	/^  typedef ABI_AArch64Layout DefaultAbiState;$/;"	t	typeref:typename:ABI_AArch64Layout	file:
DefaultAbiState	src/ccall.cpp	/^  typedef ABI_ARMLayout DefaultAbiState;$/;"	t	typeref:typename:ABI_ARMLayout	file:
DefaultAbiState	src/ccall.cpp	/^  typedef ABI_LLVMLayout DefaultAbiState;$/;"	t	typeref:typename:ABI_LLVMLayout	file:
DefaultAbiState	src/ccall.cpp	/^  typedef ABI_PPC64leLayout DefaultAbiState;$/;"	t	typeref:typename:ABI_PPC64leLayout	file:
DefaultArrayStyle	base/broadcast.jl	/^struct DefaultArrayStyle{N} <: AbstractArrayStyle{N} end$/;"	f
DefaultClusterManager	stdlib/Distributed/src/managers.jl	/^struct DefaultClusterManager <: ClusterManager$/;"	f
DefaultMatrixStyle	base/broadcast.jl	/^const DefaultMatrixStyle = DefaultArrayStyle{2}$/;"	v
DefaultTestSet	stdlib/Test/src/Test.jl	/^DefaultTestSet(desc) = DefaultTestSet(desc, [], 0, false)$/;"	f
DefaultTestSet	stdlib/Test/src/Test.jl	/^mutable struct DefaultTestSet <: AbstractTestSet$/;"	f
DefaultVectorStyle	base/broadcast.jl	/^const DefaultVectorStyle = DefaultArrayStyle{1}$/;"	v
Defining Methods	doc/src/manual/methods.md	/^## Defining Methods$/;"	s
Defining New Conversions	doc/src/manual/conversion-and-promotion.md	/^### Defining New Conversions$/;"	S
Defining Promotion Rules	doc/src/manual/conversion-and-promotion.md	/^### Defining Promotion Rules$/;"	S
DefinitelyNotMain	stdlib/Serialization/test/runtests.jl	/^module DefinitelyNotMain$/;"	f
Definitions	doc/src/manual/code-loading.md	/^## Definitions$/;"	s
Defs	src/llvm-late-gc-lowering.cpp	/^    BitVector Defs;$/;"	m	struct:BBState	typeref:typename:BitVector	file:
DelayedTyp	base/compiler/ssair/slot2ssa.jl	/^struct DelayedTyp$/;"	f
Delim	stdlib/Dates/src/io.jl	/^Delim(d::String) = Delim{String, length(d)}(d)$/;"	f
Delim	stdlib/Dates/src/io.jl	/^Delim(d::T) where {T<:AbstractChar} = Delim{T, 1}(d)$/;"	f
Delim	stdlib/Dates/src/io.jl	/^struct Delim{T, length} <: AbstractDateToken$/;"	f
Delimited Files	stdlib/DelimitedFiles/docs/src/index.md	/^# Delimited Files$/;"	c
DelimitedFiles	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^module DelimitedFiles$/;"	f
Demo_20254	test/misc.jl	/^    function Demo_20254(arr::AbstractArray=Any[])$/;"	f
Demo_20254	test/misc.jl	/^mutable struct Demo_20254$/;"	f
DenormalExponent	base/grisu/float.jl	/^DenormalExponent(::Type{Float16}) = Int32(-ExponentBias(Float16) + 1)$/;"	f
DenormalExponent	base/grisu/float.jl	/^DenormalExponent(::Type{Float32}) = Int32(-ExponentBias(Float32) + 1)$/;"	f
DenormalExponent	base/grisu/float.jl	/^DenormalExponent(::Type{Float64}) = Int32(-ExponentBias(Float64) + 1)$/;"	f
Dense	stdlib/SuiteSparse/src/cholmod.jl	/^    function Dense{Tv}(ptr::Ptr{C_Dense{Tv}}) where Tv<:VTypes$/;"	f
Dense	stdlib/SuiteSparse/src/cholmod.jl	/^Dense(A::Sparse) = sparse_to_dense(A)$/;"	f
Dense	stdlib/SuiteSparse/src/cholmod.jl	/^Dense(p::Ptr{C_Dense{Tv}}) where {Tv<:VTypes} = Dense{Tv}(p)$/;"	f
Dense	stdlib/SuiteSparse/src/cholmod.jl	/^function Dense(A::StridedVecOrMat)$/;"	f
Dense	stdlib/SuiteSparse/src/cholmod.jl	/^function Dense{T}(A::StridedVecOrMat) where T<:VTypes$/;"	f
Dense	stdlib/SuiteSparse/src/cholmod.jl	/^mutable struct Dense{Tv<:VTypes} <: DenseMatrix{Tv}$/;"	f
Deprecated or removed	HISTORY.md	/^Deprecated or removed$/;"	s
Deprecated or removed	NEWS.md	/^Deprecated or removed$/;"	s
DeprecationTests	test/deprecation_exec.jl	/^module DeprecationTests # to test @deprecate$/;"	f
Dequeues	doc/src/base/collections.md	/^## Dequeues$/;"	s
Derived	src/codegen_shared.h	/^    Derived = 11,$/;"	e	enum:AddressSpace
DescribeFormatOptions	stdlib/LibGit2/src/types.jl	/^@kwdef struct DescribeFormatOptions$/;"	f
DescribeOptions	stdlib/LibGit2/src/types.jl	/^@kwdef struct DescribeOptions$/;"	f
Design Patterns with Parametric Methods	doc/src/manual/methods.md	/^## Design Patterns with Parametric Methods$/;"	s
DevNull	base/coreio.jl	/^struct DevNull <: IO end$/;"	f
Diagonal	stdlib/LinearAlgebra/src/diagonal.jl	/^    function Diagonal{T,V}(diag) where {T,V<:AbstractVector{T}}$/;"	f
Diagonal	stdlib/LinearAlgebra/src/diagonal.jl	/^Diagonal(A::AbstractMatrix) = Diagonal(diag(A))$/;"	f
Diagonal	stdlib/LinearAlgebra/src/diagonal.jl	/^Diagonal(D::Diagonal) = D$/;"	f
Diagonal	stdlib/LinearAlgebra/src/diagonal.jl	/^Diagonal(v::AbstractVector{T}) where {T} = Diagonal{T,typeof(v)}(v)$/;"	f
Diagonal	stdlib/LinearAlgebra/src/diagonal.jl	/^struct Diagonal{T,V<:AbstractVector{T}} <: AbstractMatrix{T}$/;"	f
Diagonal	stdlib/LinearAlgebra/src/special.jl	/^Diagonal(A::AbstractTriangular) =$/;"	f
Diagonal	stdlib/LinearAlgebra/src/special.jl	/^Diagonal(A::Bidiagonal) =$/;"	f
Diagonal	stdlib/LinearAlgebra/src/special.jl	/^Diagonal(A::SymTridiagonal) =$/;"	f
Diagonal	stdlib/LinearAlgebra/src/special.jl	/^Diagonal(A::Tridiagonal) =$/;"	f
Diagonal	stdlib/LinearAlgebra/src/uniformscaling.jl	/^Diagonal(s::UniformScaling, m::Integer) = Diagonal{eltype(s)}(s, m)$/;"	f
Diagonal types	doc/src/devdocs/types.md	/^## Diagonal types$/;"	s
Dict	base/dict.jl	/^    function Dict{K, V}(slots, keys, vals, ndel, count, age, idxfloor, maxprobe) where {K, V}$/;"	f
Dict	base/dict.jl	/^    function Dict{K,V}() where V where K$/;"	f
Dict	base/dict.jl	/^    function Dict{K,V}(d::Dict{K,V}) where V where K$/;"	f
Dict	base/dict.jl	/^Dict() = Dict{Any,Any}()$/;"	f
Dict	base/dict.jl	/^Dict(kv::Tuple{}) = Dict()$/;"	f
Dict	base/dict.jl	/^Dict(ps::Pair...)                  = Dict(ps)$/;"	f
Dict	base/dict.jl	/^Dict(ps::Pair{K,V}...) where {K,V} = Dict{K,V}(ps)$/;"	f
Dict	base/dict.jl	/^function Dict(kv)$/;"	f
Dict	base/dict.jl	/^function Dict{K,V}(kv) where V where K$/;"	f
Dict	base/dict.jl	/^function Dict{K,V}(ps::Pair...) where V where K$/;"	f
Dict	base/dict.jl	/^mutable struct Dict{K,V} <: AbstractDict{K,V}$/;"	f
Dict	test/dict.jl	/^              Dict(String(Char['α':'α'+i;]) => String(Char['α':'α'+i;]) for i = (1:10)*10),$/;"	f
Dict	test/dict.jl	/^              Dict(reshape(1:i^2,i,i) => reshape(1:i^2,i,i) for i = 1:24),$/;"	f
Dict	test/dict.jl	/^              Dict(string(i) => i for i = 1:30),$/;"	f
Dict	test/dict.jl	/^        @test Dict(1=>1, T()=>2) isa Dict{Union{Int,T},Int}$/;"	f
Dict	test/dict.jl	/^        @test Dict(T()=>1, 2=>2) isa Dict{Union{Int,T},Int}$/;"	f
Dict	test/functional.jl	/^    @test Dict( (x,b)=>(c,y) for (x,c) in d, (b,y) in a ) == Dict((:a,5)=>(1,6),(:b,5)=>(2,6),(:/;"	f
Dict	test/loading.jl	/^        Dict(L(i) => i for i in roots),$/;"	f
Dict	test/loading.jl	/^        Dict(i => Dict(L(j) => j for j in deps) for (i, deps) in graph))$/;"	f
Dict	test/loading.jl	/^        Dict(pkg(i) => Dict(n => pkg(j) for (n, j) in d) for (i, d) in graph),$/;"	f
Dict	test/subarray.jl	/^    @test Dict((1:3) => 4)[1:3] === 4$/;"	f
DictCompletion	stdlib/REPL/src/REPLCompletions.jl	/^struct DictCompletion <: Completion$/;"	f
Dictionaries	doc/src/base/collections.md	/^## Dictionaries$/;"	s
DiffDelta	stdlib/LibGit2/src/types.jl	/^struct DiffDelta$/;"	f
DiffFile	stdlib/LibGit2/src/types.jl	/^struct DiffFile$/;"	f
DiffOptionsStruct	stdlib/LibGit2/src/types.jl	/^@kwdef struct DiffOptionsStruct$/;"	f
DimOrInd	base/array.jl	/^const DimOrInd = Union{Integer, AbstractUnitRange}$/;"	v
DimSelector	base/multidimensional.jl	/^struct DimSelector{dims, T}$/;"	f
DimensionMismatch	base/array.jl	/^DimensionMismatch() = DimensionMismatch("")$/;"	f
DimensionMismatch	base/array.jl	/^struct DimensionMismatch <: Exception$/;"	f
DirectOrdering	base/ordering.jl	/^const DirectOrdering = Union{ForwardOrdering,ReverseOrdering{ForwardOrdering}}$/;"	v
Dispatch on one argument at a time	doc/src/manual/methods.md	/^### Dispatch on one argument at a time$/;"	S
Displacement	test/ranges.jl	/^Displacement(x::Displacement) = x # to resolve ambiguity with boot.jl:728$/;"	f
Displacement	test/ranges.jl	/^struct Displacement <: Integer$/;"	f
Display equations	stdlib/Markdown/docs/src/index.md	/^### Display equations$/;"	S
Displaying Julia variables	doc/src/devdocs/debuggingtips.md	/^## Displaying Julia variables$/;"	s
Distributed	stdlib/Distributed/src/Distributed.jl	/^module Distributed$/;"	f
Distributed Computing	stdlib/Distributed/docs/src/index.md	/^# Distributed Computing$/;"	c
DivideAndConquer	stdlib/LinearAlgebra/src/LinearAlgebra.jl	/^struct DivideAndConquer <: Algorithm end$/;"	f
DivideByZeroError	src/flisp/cvalues.c	/^static void DivideByZeroError(fl_context_t *fl_ctx)$/;"	f	typeref:typename:void	file:
DivideError	base/boot.jl	/^struct DivideError         <: Exception end$/;"	f
DivideError	src/flisp/flisp.h	/^    value_t OutOfMemoryError, DivideError, BoundsError, EnumerationError;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
Division errors	doc/src/manual/integers-and-floating-point-numbers.md	/^### Division errors$/;"	S
Division functions	doc/src/manual/mathematical-operations.md	/^### Division functions$/;"	S
Do I want to use the Stable, LTS, or nightly version of Julia?	doc/src/manual/faq.md	/^### Do I want to use the Stable, LTS, or nightly version of Julia?$/;"	S
Do not write `x->f(x)`	doc/src/manual/style-guide.md	/^## Do not write `x->f(x)`$/;"	s
Do-Block Syntax for Function Arguments	doc/src/manual/functions.md	/^## Do-Block Syntax for Function Arguments$/;"	s
DoFullTest	stdlib/Distributed/test/distributed_exec.jl	/^DoFullTest = Bool(parse(Int,(get(ENV, "JULIA_TESTFULL", "0"))))$/;"	v
DocRefTests	test/docs.jl	/^module DocRefTests$/;"	f
DocStr	base/docs/Docs.jl	/^mutable struct DocStr$/;"	f
DocVars	test/docs.jl	/^module DocVars$/;"	f
Docs	base/docs/Docs.jl	/^module Docs$/;"	f
Docs.formatdoc	test/docs.jl	/^function Docs.formatdoc(buffer, docstr, ::Type{__FIELDS__})$/;"	f
DocsTest	test/docs.jl	/^module DocsTest$/;"	f
Doctests	CONTRIBUTING.md	/^#### Doctests$/;"	t
Documentation	doc/src/manual/documentation.md	/^# Documentation$/;"	c
DomTree	base/compiler/ssair/domtree.jl	/^struct DomTree$/;"	f
DomTreeNode	base/compiler/ssair/domtree.jl	/^DomTreeNode() = DomTreeNode(1, Vector{Int}())$/;"	f
DomTreeNode	base/compiler/ssair/domtree.jl	/^struct DomTreeNode$/;"	f
Domain	test/specificity.jl	/^abstract type Domain{T} end$/;"	f
DomainError	base/boot.jl	/^    DomainError(@nospecialize(val)) = (@_noinline_meta; new(val, ""))$/;"	f
DomainError	base/boot.jl	/^    DomainError(@nospecialize(val), @nospecialize(msg)) = (@_noinline_meta; new(val, msg))$/;"	f
DomainError	base/boot.jl	/^struct DomainError <: Exception$/;"	f
DominatedBlocks	base/compiler/ssair/domtree.jl	/^struct DominatedBlocks$/;"	f
Don't expose unsafe operations at the interface level	doc/src/manual/style-guide.md	/^## Don't expose unsafe operations at the interface level$/;"	s
Don't overload methods of base container types	doc/src/manual/style-guide.md	/^## Don't overload methods of base container types$/;"	s
Don't overuse `...`	doc/src/manual/style-guide.md	/^## Don't overuse `...`$/;"	s
Don't overuse macros	doc/src/manual/style-guide.md	/^## Don't overuse macros$/;"	s
Don't overuse try-catch	doc/src/manual/style-guide.md	/^## Don't overuse try-catch$/;"	s
Don't parenthesize conditions	doc/src/manual/style-guide.md	/^## Don't parenthesize conditions$/;"	s
Don't use unnecessary static parameters	doc/src/manual/style-guide.md	/^## Don't use unnecessary static parameters$/;"	s
Done	src/llvm-late-gc-lowering.cpp	/^    bool Done = false;$/;"	m	struct:BBState	typeref:typename:bool	file:
DontExistOn1	stdlib/Distributed/test/distributed_exec.jl	/^                mutable struct DontExistOn1$/;"	f
DoubleChunk	base/grisu/bignums.jl	/^const DoubleChunk = UInt64$/;"	v
DoubleFloat32	base/special/trig.jl	/^struct DoubleFloat32$/;"	f
DoubleFloat64	base/special/trig.jl	/^struct DoubleFloat64$/;"	f
Downloading the Julia source code	doc/build/build.md	/^## Downloading the Julia source code$/;"	s
Drop	base/iterators.jl	/^    function Drop(xs::I, n::Integer) where {I}$/;"	f
Drop	base/iterators.jl	/^struct Drop{I}$/;"	f
DualMapAllocator	src/cgmemmgr.cpp	/^    DualMapAllocator()$/;"	f	class:__anon06c686bc0111::DualMapAllocator	file:
DualMapAllocator	src/cgmemmgr.cpp	/^class DualMapAllocator : public ROAllocator<exec> {$/;"	c	namespace:__anon06c686bc0111	file:
Dummy Section	contrib/windows/build-installer.nsi	/^Section "Dummy Section" SecDummy$/;"	s
DumpRefinements	src/llvm-late-gc-lowering.cpp	/^JL_USED_FUNC static void DumpRefinements(State *S)$/;"	f	typeref:typename:JL_USED_FUNC void	file:
Durations/Comparisons	stdlib/Dates/docs/src/index.md	/^## Durations\/Comparisons$/;"	s
Dynamic Linker	stdlib/Libdl/docs/src/index.md	/^# Dynamic Linker$/;"	c
Dynamic documentation	doc/src/manual/documentation.md	/^### Dynamic documentation$/;"	S
DynamicCase	base/compiler/ssair/inlining.jl	/^    DynamicCase(method::Method, sparams::Vector{Any}, @nospecialize(metharg)) =$/;"	f
DynamicCase	base/compiler/ssair/inlining.jl	/^struct DynamicCase$/;"	f
DynamicDocType	test/docs.jl	/^mutable struct DynamicDocType$/;"	f
ECHO_C	deps/srccache/patchelf-0.9/Makefile.in	/^ECHO_C = @ECHO_C@$/;"	m
ECHO_C	deps/srccache/patchelf-0.9/src/Makefile.in	/^ECHO_C = @ECHO_C@$/;"	m
ECHO_C	deps/srccache/patchelf-0.9/tests/Makefile.in	/^ECHO_C = @ECHO_C@$/;"	m
ECHO_N	deps/srccache/patchelf-0.9/Makefile.in	/^ECHO_N = @ECHO_N@$/;"	m
ECHO_N	deps/srccache/patchelf-0.9/src/Makefile.in	/^ECHO_N = @ECHO_N@$/;"	m
ECHO_N	deps/srccache/patchelf-0.9/tests/Makefile.in	/^ECHO_N = @ECHO_N@$/;"	m
ECHO_T	deps/srccache/patchelf-0.9/Makefile.in	/^ECHO_T = @ECHO_T@$/;"	m
ECHO_T	deps/srccache/patchelf-0.9/src/Makefile.in	/^ECHO_T = @ECHO_T@$/;"	m
ECHO_T	deps/srccache/patchelf-0.9/tests/Makefile.in	/^ECHO_T = @ECHO_T@$/;"	m
EFA_PARISC_1_0	deps/srccache/patchelf-0.9/src/elf.h	/^#define EFA_PARISC_1_0	/;"	d
EFA_PARISC_1_1	deps/srccache/patchelf-0.9/src/elf.h	/^#define EFA_PARISC_1_1	/;"	d
EFA_PARISC_2_0	deps/srccache/patchelf-0.9/src/elf.h	/^#define EFA_PARISC_2_0	/;"	d
EF_ALPHA_32BIT	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_ALPHA_32BIT	/;"	d
EF_ALPHA_CANRELAX	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_ALPHA_CANRELAX	/;"	d
EF_ARM_ABI_FLOAT_HARD	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_ARM_ABI_FLOAT_HARD	/;"	d
EF_ARM_ABI_FLOAT_SOFT	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_ARM_ABI_FLOAT_SOFT	/;"	d
EF_ARM_ALIGN8	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_ARM_ALIGN8	/;"	d
EF_ARM_APCS_26	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_ARM_APCS_26	/;"	d
EF_ARM_APCS_FLOAT	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_ARM_APCS_FLOAT	/;"	d
EF_ARM_BE8	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_ARM_BE8	/;"	d
EF_ARM_DYNSYMSUSESEGIDX	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_ARM_DYNSYMSUSESEGIDX	/;"	d
EF_ARM_EABIMASK	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_ARM_EABIMASK	/;"	d
EF_ARM_EABI_UNKNOWN	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_ARM_EABI_UNKNOWN	/;"	d
EF_ARM_EABI_VER1	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_ARM_EABI_VER1	/;"	d
EF_ARM_EABI_VER2	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_ARM_EABI_VER2	/;"	d
EF_ARM_EABI_VER3	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_ARM_EABI_VER3	/;"	d
EF_ARM_EABI_VER4	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_ARM_EABI_VER4	/;"	d
EF_ARM_EABI_VER5	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_ARM_EABI_VER5	/;"	d
EF_ARM_EABI_VERSION	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_ARM_EABI_VERSION(/;"	d
EF_ARM_HASENTRY	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_ARM_HASENTRY	/;"	d
EF_ARM_INTERWORK	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_ARM_INTERWORK	/;"	d
EF_ARM_LE8	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_ARM_LE8	/;"	d
EF_ARM_MAPSYMSFIRST	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_ARM_MAPSYMSFIRST	/;"	d
EF_ARM_MAVERICK_FLOAT	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_ARM_MAVERICK_FLOAT	/;"	d
EF_ARM_NEW_ABI	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_ARM_NEW_ABI	/;"	d
EF_ARM_OLD_ABI	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_ARM_OLD_ABI	/;"	d
EF_ARM_PIC	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_ARM_PIC	/;"	d
EF_ARM_RELEXEC	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_ARM_RELEXEC	/;"	d
EF_ARM_SOFT_FLOAT	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_ARM_SOFT_FLOAT	/;"	d
EF_ARM_SYMSARESORTED	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_ARM_SYMSARESORTED	/;"	d
EF_ARM_VFP_FLOAT	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_ARM_VFP_FLOAT	/;"	d
EF_CPU32	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_CPU32	/;"	d
EF_IA_64_ABI64	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_IA_64_ABI64	/;"	d
EF_IA_64_ARCH	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_IA_64_ARCH	/;"	d
EF_IA_64_MASKOS	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_IA_64_MASKOS	/;"	d
EF_MIPS_64BIT_WHIRL	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_MIPS_64BIT_WHIRL	/;"	d
EF_MIPS_ABI2	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_MIPS_ABI2	/;"	d
EF_MIPS_ABI_ON32	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_MIPS_ABI_ON32	/;"	d
EF_MIPS_ARCH	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_MIPS_ARCH	/;"	d
EF_MIPS_ARCH_1	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_MIPS_ARCH_1	/;"	d
EF_MIPS_ARCH_2	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_MIPS_ARCH_2	/;"	d
EF_MIPS_ARCH_3	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_MIPS_ARCH_3	/;"	d
EF_MIPS_ARCH_32	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_MIPS_ARCH_32	/;"	d
EF_MIPS_ARCH_32R2	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_MIPS_ARCH_32R2	/;"	d
EF_MIPS_ARCH_4	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_MIPS_ARCH_4	/;"	d
EF_MIPS_ARCH_5	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_MIPS_ARCH_5	/;"	d
EF_MIPS_ARCH_64	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_MIPS_ARCH_64	/;"	d
EF_MIPS_ARCH_64R2	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_MIPS_ARCH_64R2	/;"	d
EF_MIPS_CPIC	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_MIPS_CPIC	/;"	d
EF_MIPS_NAN2008	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_MIPS_NAN2008	/;"	d
EF_MIPS_NOREORDER	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_MIPS_NOREORDER	/;"	d
EF_MIPS_PIC	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_MIPS_PIC	/;"	d
EF_MIPS_XGOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_MIPS_XGOT	/;"	d
EF_PARISC_ARCH	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_PARISC_ARCH	/;"	d
EF_PARISC_EXT	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_PARISC_EXT	/;"	d
EF_PARISC_LAZYSWAP	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_PARISC_LAZYSWAP	/;"	d
EF_PARISC_LSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_PARISC_LSB	/;"	d
EF_PARISC_NO_KABP	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_PARISC_NO_KABP	/;"	d
EF_PARISC_TRAPNIL	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_PARISC_TRAPNIL	/;"	d
EF_PARISC_WIDE	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_PARISC_WIDE	/;"	d
EF_PPC64_ABI	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_PPC64_ABI	/;"	d
EF_PPC_EMB	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_PPC_EMB	/;"	d
EF_PPC_RELOCATABLE	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_PPC_RELOCATABLE	/;"	d
EF_PPC_RELOCATABLE_LIB	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_PPC_RELOCATABLE_LIB	/;"	d
EF_S390_HIGH_GPRS	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_S390_HIGH_GPRS /;"	d
EF_SH1	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_SH1	/;"	d
EF_SH2	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_SH2	/;"	d
EF_SH2A	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_SH2A	/;"	d
EF_SH2A_NOFPU	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_SH2A_NOFPU	/;"	d
EF_SH2A_SH3E	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_SH2A_SH3E	/;"	d
EF_SH2A_SH3_NOFPU	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_SH2A_SH3_NOFPU	/;"	d
EF_SH2A_SH4	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_SH2A_SH4	/;"	d
EF_SH2A_SH4_NOFPU	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_SH2A_SH4_NOFPU	/;"	d
EF_SH2E	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_SH2E	/;"	d
EF_SH3	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_SH3	/;"	d
EF_SH3E	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_SH3E	/;"	d
EF_SH3_DSP	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_SH3_DSP	/;"	d
EF_SH3_NOMMU	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_SH3_NOMMU	/;"	d
EF_SH4	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_SH4	/;"	d
EF_SH4A	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_SH4A	/;"	d
EF_SH4AL_DSP	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_SH4AL_DSP	/;"	d
EF_SH4A_NOFPU	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_SH4A_NOFPU	/;"	d
EF_SH4_NOFPU	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_SH4_NOFPU	/;"	d
EF_SH4_NOMMU_NOFPU	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_SH4_NOMMU_NOFPU	/;"	d
EF_SH_DSP	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_SH_DSP	/;"	d
EF_SH_MACH_MASK	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_SH_MACH_MASK	/;"	d
EF_SH_UNKNOWN	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_SH_UNKNOWN	/;"	d
EF_SPARCV9_MM	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_SPARCV9_MM	/;"	d
EF_SPARCV9_PSO	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_SPARCV9_PSO	/;"	d
EF_SPARCV9_RMO	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_SPARCV9_RMO	/;"	d
EF_SPARCV9_TSO	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_SPARCV9_TSO	/;"	d
EF_SPARC_32PLUS	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_SPARC_32PLUS	/;"	d
EF_SPARC_EXT_MASK	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_SPARC_EXT_MASK	/;"	d
EF_SPARC_HAL_R1	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_SPARC_HAL_R1	/;"	d
EF_SPARC_LEDATA	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_SPARC_LEDATA	/;"	d
EF_SPARC_SUN_US1	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_SPARC_SUN_US1	/;"	d
EF_SPARC_SUN_US3	deps/srccache/patchelf-0.9/src/elf.h	/^#define EF_SPARC_SUN_US3	/;"	d
EHFrame	src/cgmemmgr.cpp	/^    struct EHFrame {$/;"	s	class:__anon06c686bc0111::RTDyldMemoryManagerJL	file:
EI_ABIVERSION	deps/srccache/patchelf-0.9/src/elf.h	/^#define EI_ABIVERSION	/;"	d
EI_CLASS	deps/srccache/patchelf-0.9/src/elf.h	/^#define EI_CLASS	/;"	d
EI_DATA	deps/srccache/patchelf-0.9/src/elf.h	/^#define EI_DATA	/;"	d
EI_MAG0	deps/srccache/patchelf-0.9/src/elf.h	/^#define EI_MAG0	/;"	d
EI_MAG1	deps/srccache/patchelf-0.9/src/elf.h	/^#define EI_MAG1	/;"	d
EI_MAG2	deps/srccache/patchelf-0.9/src/elf.h	/^#define EI_MAG2	/;"	d
EI_MAG3	deps/srccache/patchelf-0.9/src/elf.h	/^#define EI_MAG3	/;"	d
EI_NIDENT	deps/srccache/patchelf-0.9/src/elf.h	/^#define EI_NIDENT /;"	d
EI_OSABI	deps/srccache/patchelf-0.9/src/elf.h	/^#define EI_OSABI	/;"	d
EI_PAD	deps/srccache/patchelf-0.9/src/elf.h	/^#define EI_PAD	/;"	d
EI_VERSION	deps/srccache/patchelf-0.9/src/elf.h	/^#define EI_VERSION	/;"	d
ELF32_M_INFO	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELF32_M_INFO(/;"	d
ELF32_M_SIZE	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELF32_M_SIZE(/;"	d
ELF32_M_SYM	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELF32_M_SYM(/;"	d
ELF32_R_INFO	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELF32_R_INFO(/;"	d
ELF32_R_SYM	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELF32_R_SYM(/;"	d
ELF32_R_TYPE	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELF32_R_TYPE(/;"	d
ELF32_ST_BIND	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELF32_ST_BIND(/;"	d
ELF32_ST_INFO	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELF32_ST_INFO(/;"	d
ELF32_ST_TYPE	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELF32_ST_TYPE(/;"	d
ELF32_ST_VISIBILITY	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELF32_ST_VISIBILITY(/;"	d
ELF64_M_INFO	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELF64_M_INFO(/;"	d
ELF64_M_SIZE	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELF64_M_SIZE(/;"	d
ELF64_M_SYM	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELF64_M_SYM(/;"	d
ELF64_R_INFO	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELF64_R_INFO(/;"	d
ELF64_R_SYM	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELF64_R_SYM(/;"	d
ELF64_R_TYPE	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELF64_R_TYPE(/;"	d
ELF64_ST_BIND	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELF64_ST_BIND(/;"	d
ELF64_ST_INFO	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELF64_ST_INFO(/;"	d
ELF64_ST_TYPE	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELF64_ST_TYPE(/;"	d
ELF64_ST_VISIBILITY	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELF64_ST_VISIBILITY(/;"	d
ELFCLASS32	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELFCLASS32	/;"	d
ELFCLASS64	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELFCLASS64	/;"	d
ELFCLASSNONE	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELFCLASSNONE	/;"	d
ELFCLASSNUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELFCLASSNUM	/;"	d
ELFDATA2LSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELFDATA2LSB	/;"	d
ELFDATA2MSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELFDATA2MSB	/;"	d
ELFDATANONE	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELFDATANONE	/;"	d
ELFDATANUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELFDATANUM	/;"	d
ELFMAG	deps/srccache/patchelf-0.9/src/elf.h	/^#define	ELFMAG	/;"	d
ELFMAG0	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELFMAG0	/;"	d
ELFMAG1	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELFMAG1	/;"	d
ELFMAG2	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELFMAG2	/;"	d
ELFMAG3	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELFMAG3	/;"	d
ELFOSABI_AIX	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELFOSABI_AIX	/;"	d
ELFOSABI_ARM	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELFOSABI_ARM	/;"	d
ELFOSABI_ARM_AEABI	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELFOSABI_ARM_AEABI	/;"	d
ELFOSABI_FREEBSD	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELFOSABI_FREEBSD	/;"	d
ELFOSABI_GNU	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELFOSABI_GNU	/;"	d
ELFOSABI_HPUX	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELFOSABI_HPUX	/;"	d
ELFOSABI_IRIX	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELFOSABI_IRIX	/;"	d
ELFOSABI_LINUX	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELFOSABI_LINUX	/;"	d
ELFOSABI_MODESTO	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELFOSABI_MODESTO	/;"	d
ELFOSABI_NETBSD	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELFOSABI_NETBSD	/;"	d
ELFOSABI_NONE	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELFOSABI_NONE	/;"	d
ELFOSABI_OPENBSD	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELFOSABI_OPENBSD	/;"	d
ELFOSABI_SOLARIS	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELFOSABI_SOLARIS	/;"	d
ELFOSABI_STANDALONE	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELFOSABI_STANDALONE	/;"	d
ELFOSABI_SYSV	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELFOSABI_SYSV	/;"	d
ELFOSABI_TRU64	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELFOSABI_TRU64	/;"	d
ELF_NOTE_ABI	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELF_NOTE_ABI	/;"	d
ELF_NOTE_GNU	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELF_NOTE_GNU	/;"	d
ELF_NOTE_OS_FREEBSD	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELF_NOTE_OS_FREEBSD	/;"	d
ELF_NOTE_OS_GNU	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELF_NOTE_OS_GNU	/;"	d
ELF_NOTE_OS_LINUX	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELF_NOTE_OS_LINUX	/;"	d
ELF_NOTE_OS_SOLARIS2	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELF_NOTE_OS_SOLARIS2	/;"	d
ELF_NOTE_PAGESIZE_HINT	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELF_NOTE_PAGESIZE_HINT	/;"	d
ELF_NOTE_SOLARIS	deps/srccache/patchelf-0.9/src/elf.h	/^#define ELF_NOTE_SOLARIS	/;"	d
EMBEDDING_ARGS	test/Makefile	/^EMBEDDING_ARGS := "JULIA=$(JULIA_EXECUTABLE)" "BIN=$(SRCDIR)\/embedding" "CC=$(CC)"$/;"	m
EMPTY	stdlib/SuiteSparse/src/cholmod_h.jl	/^const EMPTY                 =-1$/;"	v
EMPTYTUPLE_TAG	stdlib/Serialization/src/Serialization.jl	/^const EMPTYTUPLE_TAG = sertag(())$/;"	v
EMPTY_SLOTNAMES	base/compiler/validation.jl	/^const EMPTY_SLOTNAMES = "slotnames field is empty"$/;"	v
EMPTY_VECTOR	base/compiler/inferenceresult.jl	/^const EMPTY_VECTOR = Vector{Any}()$/;"	v
EM_386	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_386	/;"	d
EM_68HC05	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_68HC05	/;"	d
EM_68HC08	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_68HC08	/;"	d
EM_68HC11	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_68HC11	/;"	d
EM_68HC12	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_68HC12	/;"	d
EM_68HC16	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_68HC16	/;"	d
EM_68K	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_68K	/;"	d
EM_860	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_860	/;"	d
EM_88K	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_88K	/;"	d
EM_960	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_960	/;"	d
EM_AARCH64	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_AARCH64	/;"	d
EM_ALPHA	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_ALPHA	/;"	d
EM_ARC	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_ARC	/;"	d
EM_ARC_A5	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_ARC_A5	/;"	d
EM_ARM	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_ARM	/;"	d
EM_AVR	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_AVR	/;"	d
EM_COLDFIRE	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_COLDFIRE	/;"	d
EM_CRIS	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_CRIS	/;"	d
EM_D10V	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_D10V	/;"	d
EM_D30V	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_D30V	/;"	d
EM_FAKE_ALPHA	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_FAKE_ALPHA	/;"	d
EM_FIREPATH	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_FIREPATH	/;"	d
EM_FR20	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_FR20	/;"	d
EM_FR30	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_FR30	/;"	d
EM_FX66	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_FX66	/;"	d
EM_H8S	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_H8S	/;"	d
EM_H8_300	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_H8_300	/;"	d
EM_H8_300H	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_H8_300H	/;"	d
EM_H8_500	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_H8_500	/;"	d
EM_HUANY	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_HUANY	/;"	d
EM_IA_64	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_IA_64	/;"	d
EM_JAVELIN	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_JAVELIN	/;"	d
EM_M32	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_M32	/;"	d
EM_M32R	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_M32R	/;"	d
EM_ME16	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_ME16	/;"	d
EM_MICROBLAZE	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_MICROBLAZE	/;"	d
EM_MIPS	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_MIPS	/;"	d
EM_MIPS_RS3_LE	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_MIPS_RS3_LE	/;"	d
EM_MIPS_X	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_MIPS_X	/;"	d
EM_MMA	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_MMA	/;"	d
EM_MMIX	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_MMIX	/;"	d
EM_MN10200	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_MN10200	/;"	d
EM_MN10300	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_MN10300	/;"	d
EM_NCPU	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_NCPU	/;"	d
EM_NDR1	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_NDR1	/;"	d
EM_NONE	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_NONE	/;"	d
EM_NUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_NUM	/;"	d
EM_OPENRISC	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_OPENRISC	/;"	d
EM_PARISC	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_PARISC	/;"	d
EM_PCP	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_PCP	/;"	d
EM_PDSP	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_PDSP	/;"	d
EM_PJ	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_PJ	/;"	d
EM_PPC	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_PPC	/;"	d
EM_PPC64	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_PPC64	/;"	d
EM_PRISM	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_PRISM	/;"	d
EM_RCE	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_RCE	/;"	d
EM_RH32	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_RH32	/;"	d
EM_S370	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_S370	/;"	d
EM_S390	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_S390	/;"	d
EM_SH	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_SH	/;"	d
EM_SPARC	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_SPARC	/;"	d
EM_SPARC32PLUS	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_SPARC32PLUS	/;"	d
EM_SPARCV9	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_SPARCV9	/;"	d
EM_ST100	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_ST100	/;"	d
EM_ST19	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_ST19	/;"	d
EM_ST7	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_ST7	/;"	d
EM_ST9PLUS	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_ST9PLUS	/;"	d
EM_STARCORE	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_STARCORE	/;"	d
EM_SVX	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_SVX	/;"	d
EM_TILEGX	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_TILEGX	/;"	d
EM_TILEPRO	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_TILEPRO	/;"	d
EM_TINYJ	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_TINYJ	/;"	d
EM_TRICORE	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_TRICORE	/;"	d
EM_V800	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_V800	/;"	d
EM_V850	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_V850	/;"	d
EM_VAX	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_VAX	/;"	d
EM_VPP500	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_VPP500	/;"	d
EM_X86_64	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_X86_64	/;"	d
EM_XTENSA	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_XTENSA	/;"	d
EM_ZSP	deps/srccache/patchelf-0.9/src/elf.h	/^#define EM_ZSP	/;"	d
ENABLE_INFERENCE	src/options.h	/^#define ENABLE_INFERENCE$/;"	d
END	deps/srccache/patchelf-0.9/build-aux/test-driver	/^  cat <<END$/;"	h
END	deps/srccache/patchelf-0.9/configure	/^    cat >&2 <<'END'$/;"	h
END	deps/srccache/patchelf-0.9/configure	/^  cat >&2 <<'END'$/;"	h
END	deps/srccache/patchelf-0.9/configure	/^cat > confinc << 'END'$/;"	h
ENGLISH	stdlib/Dates/src/query.jl	/^const ENGLISH = DateLocale($/;"	v
ENTRY_OFFSET	src/interpreter-stacktrace.c	/^#define ENTRY_OFFSET /;"	d	file:
ENV	base/env.jl	/^const ENV = EnvDict()$/;"	v
EOF	contrib/mac/mac-gtk.sh	/^cat << EOF >> .jhbuildrc-custom$/;"	h
EOF	deps/patches/config.sub	/^		IFS="-" read cpu vendor <<EOF$/;"	h
EOF	deps/patches/config.sub	/^IFS="-" read field1 field2 field3 field4 <<EOF$/;"	h
EOFError	base/io.jl	/^struct EOFError <: Exception end$/;"	f
EPOCH_WDAY	src/support/tzfile.h	/^#define EPOCH_WDAY	/;"	d
EPOCH_YEAR	src/support/tzfile.h	/^#define EPOCH_YEAR	/;"	d
ES	src/jitlayers.h	/^    llvm::orc::ExecutionSession ES;$/;"	m	class:JuliaOJIT	typeref:typename:llvm::orc::ExecutionSession
ETAGS	deps/srccache/patchelf-0.9/Makefile.in	/^ETAGS = etags$/;"	m
ETAGS	deps/srccache/patchelf-0.9/src/Makefile.in	/^ETAGS = etags$/;"	m
ETAGS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^ETAGS = etags$/;"	m
ET_CORE	deps/srccache/patchelf-0.9/src/elf.h	/^#define ET_CORE	/;"	d
ET_DYN	deps/srccache/patchelf-0.9/src/elf.h	/^#define ET_DYN	/;"	d
ET_EXEC	deps/srccache/patchelf-0.9/src/elf.h	/^#define ET_EXEC	/;"	d
ET_HIOS	deps/srccache/patchelf-0.9/src/elf.h	/^#define ET_HIOS	/;"	d
ET_HIPROC	deps/srccache/patchelf-0.9/src/elf.h	/^#define ET_HIPROC	/;"	d
ET_LOOS	deps/srccache/patchelf-0.9/src/elf.h	/^#define ET_LOOS	/;"	d
ET_LOPROC	deps/srccache/patchelf-0.9/src/elf.h	/^#define ET_LOPROC	/;"	d
ET_NONE	deps/srccache/patchelf-0.9/src/elf.h	/^#define ET_NONE	/;"	d
ET_NUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define	ET_NUM	/;"	d
ET_REL	deps/srccache/patchelf-0.9/src/elf.h	/^#define ET_REL	/;"	d
EV_CURRENT	deps/srccache/patchelf-0.9/src/elf.h	/^#define EV_CURRENT	/;"	d
EV_NONE	deps/srccache/patchelf-0.9/src/elf.h	/^#define EV_NONE	/;"	d
EV_NUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define EV_NUM	/;"	d
EXE	test/embedding/Makefile	/^EXE := $(suffix $(abspath $(JULIA)))$/;"	m
EXE	test/gcext/Makefile	/^EXE := $(suffix $(abspath $(JULIA)))$/;"	m
EXECUTE_MASK	base/pcre.jl	/^const EXECUTE_MASK      =$/;"	v
EXEEXT	deps/srccache/patchelf-0.9/Makefile.in	/^EXEEXT = @EXEEXT@$/;"	m
EXEEXT	deps/srccache/patchelf-0.9/src/Makefile.in	/^EXEEXT = @EXEEXT@$/;"	m
EXEEXT	deps/srccache/patchelf-0.9/tests/Makefile.in	/^EXEEXT = @EXEEXT@$/;"	m
EXENAME	src/flisp/Makefile	/^EXENAME := $(NAME)$/;"	m
EXPR_TAG	stdlib/Serialization/src/Serialization.jl	/^const EXPR_TAG = sertag(Expr)$/;"	v
EXP_MASK	base/ryu/utils.jl	/^const EXP_MASK = 0x00000000000007ff$/;"	v
EXT	src/support/ENTRY.amd64.h	/^#define EXT(/;"	d
EXT	src/support/ENTRY.i387.h	/^#define EXT(/;"	d
EXTRA_DIST	deps/srccache/patchelf-0.9/Makefile.am	/^EXTRA_DIST = COPYING README patchelf.spec version $(man1_MANS)$/;"	m
EXTRA_DIST	deps/srccache/patchelf-0.9/Makefile.in	/^EXTRA_DIST = COPYING README patchelf.spec version $(man1_MANS)$/;"	m
EXTRA_DIST	deps/srccache/patchelf-0.9/tests/Makefile.am	/^EXTRA_DIST = no-rpath-prebuild $(src_TESTS) no-rpath-prebuild.sh$/;"	m
EXTRA_DIST	deps/srccache/patchelf-0.9/tests/Makefile.in	/^EXTRA_DIST = no-rpath-prebuild $(src_TESTS) no-rpath-prebuild.sh$/;"	m
EXT_	src/support/ENTRY.amd64.h	/^#define EXT_(/;"	d
EXT_	src/support/ENTRY.i387.h	/^#define EXT_(/;"	d
EXT_STDLIB_DOCS	doc/make.jl	/^const EXT_STDLIB_DOCS = ["Pkg"]$/;"	v
E_MIPS_ARCH_1	deps/srccache/patchelf-0.9/src/elf.h	/^#define E_MIPS_ARCH_1	/;"	d
E_MIPS_ARCH_2	deps/srccache/patchelf-0.9/src/elf.h	/^#define E_MIPS_ARCH_2	/;"	d
E_MIPS_ARCH_3	deps/srccache/patchelf-0.9/src/elf.h	/^#define E_MIPS_ARCH_3	/;"	d
E_MIPS_ARCH_32	deps/srccache/patchelf-0.9/src/elf.h	/^#define E_MIPS_ARCH_32	/;"	d
E_MIPS_ARCH_4	deps/srccache/patchelf-0.9/src/elf.h	/^#define E_MIPS_ARCH_4	/;"	d
E_MIPS_ARCH_5	deps/srccache/patchelf-0.9/src/elf.h	/^#define E_MIPS_ARCH_5	/;"	d
E_MIPS_ARCH_64	deps/srccache/patchelf-0.9/src/elf.h	/^#define E_MIPS_ARCH_64	/;"	d
EachLine	base/io.jl	/^    EachLine(stream::IO=stdin; ondone::Function=()->nothing, keep::Bool=false) =$/;"	f
EachLine	base/io.jl	/^struct EachLine{IOT <: IO}$/;"	f
EachStringIndex	base/strings/basic.jl	/^struct EachStringIndex{T<:AbstractString}$/;"	f
Early filtering and message handling	stdlib/Logging/docs/src/index.md	/^### Early filtering and message handling$/;"	S
Editors  + Debuggers	contrib/README.md	/^Editors  + Debuggers$/;"	c
Eigen	stdlib/LinearAlgebra/src/eigen.jl	/^Eigen(values::AbstractVector{V}, vectors::AbstractMatrix{T}) where {T,V} =$/;"	f
Eigen	stdlib/LinearAlgebra/src/eigen.jl	/^struct Eigen{T,V,S<:AbstractMatrix,U<:AbstractVector} <: Factorization{T}$/;"	f
EightBitType	test/errorshow.jl	/^EightBitType() = throw(ErrorException("3"))$/;"	f
EightBitType	test/errorshow.jl	/^primitive type EightBitType 8 end$/;"	f
EightBitTypeT	test/errorshow.jl	/^EightBitTypeT() = throw(ErrorException("5"))$/;"	f
EightBitTypeT	test/errorshow.jl	/^primitive type EightBitTypeT{T} 8 end$/;"	f
Element	src/llvm-late-gc-lowering.cpp	/^    struct Element {$/;"	s	struct:PEOIterator	file:
ElementType	src/abi_aarch64.cpp	/^    ElementType() : type(nullptr), sz(0) {};$/;"	f	struct:ABI_AArch64Layout::ElementType	file:
ElementType	src/abi_aarch64.cpp	/^struct ElementType {$/;"	s	struct:ABI_AArch64Layout	file:
Elementary Functions	doc/src/manual/mathematical-operations.md	/^### Elementary Functions$/;"	S
Elementary operations	stdlib/LinearAlgebra/docs/src/index.md	/^### Elementary operations$/;"	S
Elements	src/llvm-late-gc-lowering.cpp	/^    std::vector<Element> Elements;$/;"	m	struct:PEOIterator	typeref:typename:std::vector<Element>	file:
Elf32_Addr	deps/srccache/patchelf-0.9/src/elf.h	/^typedef uint32_t Elf32_Addr;$/;"	t	typeref:typename:uint32_t
Elf32_Conflict	deps/srccache/patchelf-0.9/src/elf.h	/^typedef Elf32_Addr Elf32_Conflict;$/;"	t	typeref:typename:Elf32_Addr
Elf32_Dyn	deps/srccache/patchelf-0.9/src/elf.h	/^} Elf32_Dyn;$/;"	t	typeref:struct:__anonff7a58690f08
Elf32_Ehdr	deps/srccache/patchelf-0.9/src/elf.h	/^} Elf32_Ehdr;$/;"	t	typeref:struct:__anonff7a58690108
Elf32_Half	deps/srccache/patchelf-0.9/src/elf.h	/^typedef uint16_t Elf32_Half;$/;"	t	typeref:typename:uint16_t
Elf32_Lib	deps/srccache/patchelf-0.9/src/elf.h	/^} Elf32_Lib;$/;"	t	typeref:struct:__anonff7a58692908
Elf32_Move	deps/srccache/patchelf-0.9/src/elf.h	/^} Elf32_Move;$/;"	t	typeref:struct:__anonff7a58692108
Elf32_Nhdr	deps/srccache/patchelf-0.9/src/elf.h	/^} Elf32_Nhdr;$/;"	t	typeref:struct:__anonff7a58691f08
Elf32_Off	deps/srccache/patchelf-0.9/src/elf.h	/^typedef uint32_t Elf32_Off;$/;"	t	typeref:typename:uint32_t
Elf32_Phdr	deps/srccache/patchelf-0.9/src/elf.h	/^} Elf32_Phdr;$/;"	t	typeref:struct:__anonff7a58690d08
Elf32_RegInfo	deps/srccache/patchelf-0.9/src/elf.h	/^} Elf32_RegInfo;$/;"	t	typeref:struct:__anonff7a58692608
Elf32_Rel	deps/srccache/patchelf-0.9/src/elf.h	/^} Elf32_Rel;$/;"	t	typeref:struct:__anonff7a58690908
Elf32_Rela	deps/srccache/patchelf-0.9/src/elf.h	/^} Elf32_Rela;$/;"	t	typeref:struct:__anonff7a58690b08
Elf32_Section	deps/srccache/patchelf-0.9/src/elf.h	/^typedef uint16_t Elf32_Section;$/;"	t	typeref:typename:uint16_t
Elf32_Shdr	deps/srccache/patchelf-0.9/src/elf.h	/^} Elf32_Shdr;$/;"	t	typeref:struct:__anonff7a58690308
Elf32_Sword	deps/srccache/patchelf-0.9/src/elf.h	/^typedef	int32_t  Elf32_Sword;$/;"	t	typeref:typename:int32_t
Elf32_Sxword	deps/srccache/patchelf-0.9/src/elf.h	/^typedef	int64_t  Elf32_Sxword;$/;"	t	typeref:typename:int64_t
Elf32_Sym	deps/srccache/patchelf-0.9/src/elf.h	/^} Elf32_Sym;$/;"	t	typeref:struct:__anonff7a58690508
Elf32_Syminfo	deps/srccache/patchelf-0.9/src/elf.h	/^} Elf32_Syminfo;$/;"	t	typeref:struct:__anonff7a58690708
Elf32_Verdaux	deps/srccache/patchelf-0.9/src/elf.h	/^} Elf32_Verdaux;$/;"	t	typeref:struct:__anonff7a58691508
Elf32_Verdef	deps/srccache/patchelf-0.9/src/elf.h	/^} Elf32_Verdef;$/;"	t	typeref:struct:__anonff7a58691308
Elf32_Vernaux	deps/srccache/patchelf-0.9/src/elf.h	/^} Elf32_Vernaux;$/;"	t	typeref:struct:__anonff7a58691908
Elf32_Verneed	deps/srccache/patchelf-0.9/src/elf.h	/^} Elf32_Verneed;$/;"	t	typeref:struct:__anonff7a58691708
Elf32_Versym	deps/srccache/patchelf-0.9/src/elf.h	/^typedef Elf32_Half Elf32_Versym;$/;"	t	typeref:typename:Elf32_Half
Elf32_Word	deps/srccache/patchelf-0.9/src/elf.h	/^typedef uint32_t Elf32_Word;$/;"	t	typeref:typename:uint32_t
Elf32_Xword	deps/srccache/patchelf-0.9/src/elf.h	/^typedef uint64_t Elf32_Xword;$/;"	t	typeref:typename:uint64_t
Elf32_auxv_t	deps/srccache/patchelf-0.9/src/elf.h	/^} Elf32_auxv_t;$/;"	t	typeref:struct:__anonff7a58691b08
Elf32_gptab	deps/srccache/patchelf-0.9/src/elf.h	/^} Elf32_gptab;$/;"	t	typeref:union:__anonff7a5869230a
Elf64_Addr	deps/srccache/patchelf-0.9/src/elf.h	/^typedef uint64_t Elf64_Addr;$/;"	t	typeref:typename:uint64_t
Elf64_Dyn	deps/srccache/patchelf-0.9/src/elf.h	/^} Elf64_Dyn;$/;"	t	typeref:struct:__anonff7a58691108
Elf64_Ehdr	deps/srccache/patchelf-0.9/src/elf.h	/^} Elf64_Ehdr;$/;"	t	typeref:struct:__anonff7a58690208
Elf64_Half	deps/srccache/patchelf-0.9/src/elf.h	/^typedef uint16_t Elf64_Half;$/;"	t	typeref:typename:uint16_t
Elf64_Lib	deps/srccache/patchelf-0.9/src/elf.h	/^} Elf64_Lib;$/;"	t	typeref:struct:__anonff7a58692a08
Elf64_Move	deps/srccache/patchelf-0.9/src/elf.h	/^} Elf64_Move;$/;"	t	typeref:struct:__anonff7a58692208
Elf64_Nhdr	deps/srccache/patchelf-0.9/src/elf.h	/^} Elf64_Nhdr;$/;"	t	typeref:struct:__anonff7a58692008
Elf64_Off	deps/srccache/patchelf-0.9/src/elf.h	/^typedef uint64_t Elf64_Off;$/;"	t	typeref:typename:uint64_t
Elf64_Phdr	deps/srccache/patchelf-0.9/src/elf.h	/^} Elf64_Phdr;$/;"	t	typeref:struct:__anonff7a58690e08
Elf64_Rel	deps/srccache/patchelf-0.9/src/elf.h	/^} Elf64_Rel;$/;"	t	typeref:struct:__anonff7a58690a08
Elf64_Rela	deps/srccache/patchelf-0.9/src/elf.h	/^} Elf64_Rela;$/;"	t	typeref:struct:__anonff7a58690c08
Elf64_Section	deps/srccache/patchelf-0.9/src/elf.h	/^typedef uint16_t Elf64_Section;$/;"	t	typeref:typename:uint16_t
Elf64_Shdr	deps/srccache/patchelf-0.9/src/elf.h	/^} Elf64_Shdr;$/;"	t	typeref:struct:__anonff7a58690408
Elf64_Sword	deps/srccache/patchelf-0.9/src/elf.h	/^typedef	int32_t  Elf64_Sword;$/;"	t	typeref:typename:int32_t
Elf64_Sxword	deps/srccache/patchelf-0.9/src/elf.h	/^typedef	int64_t  Elf64_Sxword;$/;"	t	typeref:typename:int64_t
Elf64_Sym	deps/srccache/patchelf-0.9/src/elf.h	/^} Elf64_Sym;$/;"	t	typeref:struct:__anonff7a58690608
Elf64_Syminfo	deps/srccache/patchelf-0.9/src/elf.h	/^} Elf64_Syminfo;$/;"	t	typeref:struct:__anonff7a58690808
Elf64_Verdaux	deps/srccache/patchelf-0.9/src/elf.h	/^} Elf64_Verdaux;$/;"	t	typeref:struct:__anonff7a58691608
Elf64_Verdef	deps/srccache/patchelf-0.9/src/elf.h	/^} Elf64_Verdef;$/;"	t	typeref:struct:__anonff7a58691408
Elf64_Vernaux	deps/srccache/patchelf-0.9/src/elf.h	/^} Elf64_Vernaux;$/;"	t	typeref:struct:__anonff7a58691a08
Elf64_Verneed	deps/srccache/patchelf-0.9/src/elf.h	/^} Elf64_Verneed;$/;"	t	typeref:struct:__anonff7a58691808
Elf64_Versym	deps/srccache/patchelf-0.9/src/elf.h	/^typedef Elf64_Half Elf64_Versym;$/;"	t	typeref:typename:Elf64_Half
Elf64_Word	deps/srccache/patchelf-0.9/src/elf.h	/^typedef uint32_t Elf64_Word;$/;"	t	typeref:typename:uint32_t
Elf64_Xword	deps/srccache/patchelf-0.9/src/elf.h	/^typedef uint64_t Elf64_Xword;$/;"	t	typeref:typename:uint64_t
Elf64_auxv_t	deps/srccache/patchelf-0.9/src/elf.h	/^} Elf64_auxv_t;$/;"	t	typeref:struct:__anonff7a58691d08
ElfFile	deps/srccache/patchelf-0.9/src/patchelf.cc	/^    ElfFile()$/;"	f	class:ElfFile	file:
ElfFile	deps/srccache/patchelf-0.9/src/patchelf.cc	/^class ElfFile$/;"	c	file:
ElfFileParamNames	deps/srccache/patchelf-0.9/src/patchelf.cc	/^#define ElfFileParamNames /;"	d	file:
ElfFileParams	deps/srccache/patchelf-0.9/src/patchelf.cc	/^#define ElfFileParams /;"	d	file:
Elf_Options	deps/srccache/patchelf-0.9/src/elf.h	/^} Elf_Options;$/;"	t	typeref:struct:__anonff7a58692708
Elf_Options_Hw	deps/srccache/patchelf-0.9/src/elf.h	/^} Elf_Options_Hw;$/;"	t	typeref:struct:__anonff7a58692808
Eliding bounds checks	doc/src/devdocs/boundscheck.md	/^## Eliding bounds checks$/;"	s
EltypeUnknown	base/generator.jl	/^struct EltypeUnknown <: IteratorEltype end$/;"	f
Embedding Julia	doc/src/manual/embedding.md	/^# Embedding Julia$/;"	c
EmitLoadTag	src/llvm-late-gc-lowering.cpp	/^Value *LateLowerGCFrame::EmitLoadTag(IRBuilder<> &builder, Value *V)$/;"	f	class:LateLowerGCFrame	typeref:typename:Value *
EmitTagPtr	src/llvm-late-gc-lowering.cpp	/^Value *LateLowerGCFrame::EmitTagPtr(IRBuilder<> &builder, Type *T, Value *V)$/;"	f	class:LateLowerGCFrame	typeref:typename:Value *
Empty generic functions	doc/src/manual/methods.md	/^## Empty generic functions$/;"	s
Empty12394	test/core.jl	/^mutable struct Empty12394 end$/;"	f
Empty5906	test/compiler/inference.jl	/^struct Empty5906{T} <: Outer5906{T}$/;"	f
EmptyCompletionProvider	stdlib/REPL/src/LineEdit.jl	/^struct EmptyCompletionProvider <: CompletionProvider end$/;"	f
EmptyHistoryProvider	stdlib/REPL/src/LineEdit.jl	/^struct EmptyHistoryProvider <: HistoryProvider end$/;"	f
EmptyIIOtherField13175	test/core.jl	/^struct EmptyIIOtherField13175$/;"	f
EmptyImmutable13175	test/core.jl	/^struct EmptyImmutable13175 end$/;"	f
EmptyType	test/docs.jl	/^struct EmptyType{T} end$/;"	f
EmptyType	test/reflection.jl	/^struct EmptyType end$/;"	f
EnclosingModule	test/errorshow.jl	/^module EnclosingModule$/;"	f
EnclosingModule.AbstractTypeNoConstructors	test/errorshow.jl	/^    EnclosingModule.AbstractTypeNoConstructors(x, y) = x + y$/;"	f
Enum	base/Enums.jl	/^abstract type Enum{T<:Integer} end$/;"	f
Enumerate	base/iterators.jl	/^struct Enumerate{I}$/;"	f
EnumerationError	src/flisp/flisp.h	/^    value_t OutOfMemoryError, DivideError, BoundsError, EnumerationError;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
Enums	base/Enums.jl	/^module Enums$/;"	f
Enums.namemap	base/Enums.jl	/^        Enums.namemap(::Type{$(esc(typename))}) = $(esc(namemap))$/;"	f
EnvDict	base/env.jl	/^struct EnvDict <: AbstractDict{String,String}; end$/;"	f
Environment Variables	doc/src/manual/environment-variables.md	/^# Environment Variables$/;"	c
Environment improvements	HISTORY.md	/^Environment improvements$/;"	s
Environment stacks	doc/src/manual/code-loading.md	/^### Environment stacks$/;"	S
Environment variables	stdlib/Logging/docs/src/index.md	/^## Environment variables$/;"	s
Environments	doc/src/manual/code-loading.md	/^## Environments$/;"	s
Equality and Comparison Operators	doc/src/manual/missing.md	/^## Equality and Comparison Operators$/;"	s
ErrOrCmds	base/cmd.jl	/^    ErrOrCmds(a::AbstractCmd, b::AbstractCmd) = new(a, b)$/;"	f
ErrOrCmds	base/cmd.jl	/^struct ErrOrCmds <: AbstractCmd$/;"	f
Error	base/logging.jl	/^const Error         = LogLevel(    2000)$/;"	v
Error	stdlib/LibGit2/src/error.jl	/^module Error$/;"	f
Error	stdlib/Test/src/Test.jl	/^    function Error(test_type, orig_expr, value, bt, source)$/;"	f
Error	stdlib/Test/src/Test.jl	/^mutable struct Error <: Result$/;"	f
Error handling	doc/src/manual/stacktraces.md	/^## Error handling$/;"	s
Error19179	test/dict.jl	/^mutable struct Error19179 <: Exception$/;"	f
Error19864	stdlib/REPL/test/repl.jl	/^mutable struct Error19864 <: Exception; end$/;"	f
Error19864	test/spawn.jl	/^            struct Error19864 <: Exception; end$/;"	f
ErrorException	base/boot.jl	/^struct ErrorException <: Exception$/;"	f
ErrorException	test/core.jl	/^    @test_throws ErrorException("Method dispatch is unimplemented currently for this method sign/;"	f
ErrorException	test/core.jl	/^    @test_throws ErrorException("cannot add methods to a builtin function") @eval $f() = 1$/;"	f
ErrorSimulator	stdlib/Distributed/test/distributed_exec.jl	/^struct ErrorSimulator <: ClusterManager$/;"	f
ErrorStruct	stdlib/LibGit2/src/error.jl	/^struct ErrorStruct$/;"	f
Errors	doc/src/base/base.md	/^## Errors$/;"	s
Errors	doc/src/manual/control-flow.md	/^### Errors$/;"	S
Errors during Julia startup	doc/src/devdocs/backtraces.md	/^## Errors during Julia startup$/;"	s
Essentials	doc/src/base/base.md	/^# Essentials$/;"	c
Eval of Julia code	doc/src/devdocs/eval.md	/^# Eval of Julia code$/;"	c
Evaluating expressions	doc/src/manual/metaprogramming.md	/^### Evaluating expressions$/;"	S
Evaluation Scope of Default Values	doc/src/manual/functions.md	/^## Evaluation Scope of Default Values$/;"	s
Event	base/lock.jl	/^    Event() = new(Threads.Condition(), false)$/;"	f
Event	base/lock.jl	/^mutable struct Event$/;"	f
EventListeners	src/jitlayers.h	/^    std::vector<JITEventListener *> EventListeners;$/;"	m	class:JuliaOJIT	typeref:typename:std::vector<JITEventListener * >
Events	doc/src/base/base.md	/^## Events$/;"	s
Example	doc/src/manual/embedding.md	/^#### Example$/;"	t
Examples	stdlib/REPL/docs/src/index.md	/^## Examples$/;"	s
Examples	stdlib/REPL/docs/src/index.md	/^### Examples$/;"	S
Exception	base/boot.jl	/^abstract type Exception end$/;"	f
Exception Handling	doc/src/manual/control-flow.md	/^## Exception Handling$/;"	s
Exception stacks and `catch_stack`	doc/src/manual/stacktraces.md	/^## Exception stacks and `catch_stack`$/;"	s
Exception31219	stdlib/Test/test/runtests.jl	/^    struct Exception31219{T}$/;"	f
Exceptions	doc/src/manual/embedding.md	/^## Exceptions$/;"	s
ExecSandbox	contrib/mac/frameworkapp/ExecSandbox/ExecSandbox.h	/^@interface ExecSandbox : NSObject <ExecSandboxProtocol>$/;"	i	protocols:ExecSandboxProtocol
ExecSandbox	contrib/mac/frameworkapp/ExecSandbox/ExecSandbox.m	/^@implementation ExecSandbox$/;"	I
ExecSandbox	contrib/mac/frameworkapp/ExecSandbox/ExecSandbox.m	/^@interface ExecSandbox () {$/;"	i	category:NSMutableArray	protocols:JuliaTask
ExecSandboxController	contrib/mac/frameworkapp/JuliaLauncher/AppDelegate.m	/^@implementation ExecSandboxController$/;"	I
ExecSandboxController	contrib/mac/frameworkapp/JuliaLauncher/AppDelegate.m	/^@interface ExecSandboxController : NSObject {$/;"	i
ExecSandboxProtocol	contrib/mac/frameworkapp/ExecSandbox/ExecSandboxProtocol.h	/^@protocol ExecSandboxProtocol$/;"	P
ExecutionResult	stdlib/Test/src/Test.jl	/^abstract type ExecutionResult end$/;"	f
Expansion and lowering	doc/src/devdocs/reflection.md	/^## Expansion and lowering$/;"	s
Experimental	base/experimental.jl	/^module Experimental$/;"	f
Experimental features	doc/src/devdocs/require.md	/^## Experimental features$/;"	s
Experimental language features	HISTORY.md	/^Experimental language features$/;"	s
ExplainNoPropagation	src/clangsa/GCChecker.cpp	/^PDP GCChecker::GCValueBugVisitor::ExplainNoPropagation($/;"	f	class:GCChecker::GCValueBugVisitor	typeref:typename:PDP
ExplainNoPropagationFromExpr	src/clangsa/GCChecker.cpp	/^PDP GCChecker::GCValueBugVisitor::ExplainNoPropagationFromExpr(const clang::Expr *FromWhere,$/;"	f	class:GCChecker::GCValueBugVisitor	typeref:typename:PDP
ExponentBias	base/grisu/float.jl	/^ExponentBias(::Type{Float16}) = Int32(0x000f + PhysicalSignificandSize(Float16))$/;"	f
ExponentBias	base/grisu/float.jl	/^ExponentBias(::Type{Float32}) = Int32(0x7F + PhysicalSignificandSize(Float32))$/;"	f
ExponentBias	base/grisu/float.jl	/^ExponentBias(::Type{Float64}) = Int32(0x3FF + PhysicalSignificandSize(Float64))$/;"	f
ExponentMask	base/grisu/float.jl	/^ExponentMask(::Type{Float16}) = 0x7c00$/;"	f
ExponentMask	base/grisu/float.jl	/^ExponentMask(::Type{Float32}) = 0x7F800000$/;"	f
ExponentMask	base/grisu/float.jl	/^ExponentMask(::Type{Float64}) = 0x7FF0000000000000$/;"	f
ExponentialBackOff	base/error.jl	/^    function ExponentialBackOff(n, first_delay, max_delay, factor, jitter)$/;"	f
ExponentialBackOff	base/error.jl	/^ExponentialBackOff(; n=1, first_delay=0.05, max_delay=10.0, factor=5.0, jitter=0.1) =$/;"	f
ExponentialBackOff	base/error.jl	/^struct ExponentialBackOff$/;"	f
Expr	base/boot.jl	/^Expr(@nospecialize args...) = _expr(args...)$/;"	f
ExprNode	base/show.jl	/^const ExprNode = Union{Expr, QuoteNode, Slot, LineNumberNode, SSAValue,$/;"	v
Expressions and evaluation	doc/src/manual/metaprogramming.md	/^## Expressions and evaluation$/;"	s
External Profiling	doc/src/manual/profile.md	/^# External Profiling$/;"	c
External Resources	README.md	/^### External Resources$/;"	S
External applications	doc/src/manual/environment-variables.md	/^## External applications$/;"	s
External dependencies	HISTORY.md	/^External dependencies$/;"	s
External dependencies	NEWS.md	/^External dependencies$/;"	s
Extracting the type parameter from a super-type	doc/src/manual/methods.md	/^### Extracting the type parameter from a super-type$/;"	S
Extracting useful information	doc/src/manual/stacktraces.md	/^## Extracting useful information$/;"	s
Extruded	base/broadcast.jl	/^struct Extruded{T, K, D}$/;"	f
F	src/flisp/flisp.h	/^    value_t NIL, T, F, FL_EOF, QUOTE;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
F	src/llvm-alloc-opt.cpp	/^    Function &F;$/;"	m	struct:__anon0a1571000111::Optimizer	typeref:typename:Function &	file:
F	src/llvm-late-gc-lowering.cpp	/^    Function *const F;$/;"	m	struct:State	typeref:typename:Function * const	file:
F21178	test/core.jl	/^struct F21178{A,B} end$/;"	f
F21666	test/arrayops.jl	/^struct F21666{T <: Base.ArithmeticStyle}$/;"	f
FALSE	stdlib/SuiteSparse/src/cholmod_h.jl	/^const FALSE = Int32(0)$/;"	v
FALSE_TAG	stdlib/Serialization/src/Serialization.jl	/^const FALSE_TAG = sertag(false)$/;"	v
FD	src/clangsa/GCChecker.cpp	/^            const FunctionDecl *FD;$/;"	m	struct:__anon9c5a21540111::GCChecker::ValueState	typeref:typename:const FunctionDecl *	file:
FDEvent	stdlib/FileWatching/src/FileWatching.jl	/^    FDEvent(r::Bool, w::Bool, d::Bool, t::Bool) = new(r, w, d, t)$/;"	f
FDEvent	stdlib/FileWatching/src/FileWatching.jl	/^FDEvent() = FDEvent(false, false, false, true)$/;"	f
FDEvent	stdlib/FileWatching/src/FileWatching.jl	/^FDEvent(flags::Integer) = FDEvent((flags & UV_READABLE) != 0,$/;"	f
FDEvent	stdlib/FileWatching/src/FileWatching.jl	/^struct FDEvent$/;"	f
FDWatcher	stdlib/FileWatching/src/FileWatching.jl	/^        function FDWatcher(fd::WindowsRawSocket, readable::Bool, writable::Bool)$/;"	f
FDWatcher	stdlib/FileWatching/src/FileWatching.jl	/^    function FDWatcher(fd::RawFD, readable::Bool, writable::Bool)$/;"	f
FDWatcher	stdlib/FileWatching/src/FileWatching.jl	/^mutable struct FDWatcher$/;"	f
FETCH_HEAD	stdlib/LibGit2/src/consts.jl	/^const FETCH_HEAD  = "FETCH_HEAD"$/;"	v
FETCH_NO_PRUNE	stdlib/LibGit2/src/consts.jl	/^const FETCH_NO_PRUNE          = Cint(2)$/;"	v
FETCH_PRUNE	stdlib/LibGit2/src/consts.jl	/^const FETCH_PRUNE             = Cint(1)$/;"	v
FETCH_PRUNE_UNSPECIFIED	stdlib/LibGit2/src/consts.jl	/^const FETCH_PRUNE_UNSPECIFIED = Cint(0)$/;"	v
FILE	base/libc.jl	/^function FILE(fd::RawFD, mode)$/;"	f
FILE	base/libc.jl	/^function FILE(s::IO)$/;"	f
FILE	base/libc.jl	/^struct FILE$/;"	f
FILES	doc/man/julia.1	/^.SH FILES$/;"	s	title:JULIA
FILE_MAP_COPY	stdlib/Mmap/src/Mmap.jl	/^const FILE_MAP_COPY          = DWORD(0x01)$/;"	v
FILE_MAP_EXECUTE	stdlib/Mmap/src/Mmap.jl	/^const FILE_MAP_EXECUTE       = DWORD(0x20)$/;"	v
FILE_MAP_READ	stdlib/Mmap/src/Mmap.jl	/^const FILE_MAP_READ          = DWORD(0x04)$/;"	v
FILE_MAP_WRITE	stdlib/Mmap/src/Mmap.jl	/^const FILE_MAP_WRITE         = DWORD(0x02)$/;"	v
FIXED	base/grisu/grisu.jl	/^const FIXED = 2$/;"	v
FLAGS	src/Makefile	/^FLAGS := \\$/;"	m
FLAGS	src/flisp/Makefile	/^FLAGS := -I$(LLTSRCDIR) $(JCFLAGS) $(HFILEDIRS:%=-I%) \\$/;"	m
FLAGS	src/support/Makefile	/^FLAGS := $(HFILEDIRS:%=-I%) -I$(LIBUV_INC) -I$(UTF8PROC_INC) -DLIBRARY_EXPORTS -DUTF8PROC_EXPORT/;"	m
FLAGS	ui/Makefile	/^FLAGS := -I$(BUILDROOT)\/src -I$(JULIAHOME)\/src -I$(JULIAHOME)\/src\/support -I$(build_included/;"	m
FLISPDIR	src/Makefile	/^FLISPDIR := $(BUILDDIR)\/flisp$/;"	m
FLISPDIR	src/Makefile	/^FLISPDIR := $(BUILDDIR)\/flisp\/host$/;"	m
FLISP_EXECUTABLE	src/Makefile	/^FLISP_EXECUTABLE := $(FLISP_EXECUTABLE_$(JULIA_BUILD_MODE))$/;"	m
FLISP_EXECUTABLE	src/Makefile	/^FLISP_EXECUTABLE := $(FLISP_EXECUTABLE_release)$/;"	m
FLISP_EXECUTABLE_debug	src/Makefile	/^FLISP_EXECUTABLE_debug := $(FLISPDIR)\/flisp-debug$(EXE)$/;"	m
FLISP_EXECUTABLE_release	src/Makefile	/^FLISP_EXECUTABLE_release := $(FLISPDIR)\/flisp$(EXE)$/;"	m
FLISP_H	src/flisp/flisp.h	/^#define FLISP_H$/;"	d
FLISP_SRCS	src/flisp/Makefile	/^FLISP_SRCS := $(flisp.c cvalues.c types.c flisp.h print.c read.c equal.c:%=$(SRCDIR)\/%)$/;"	m
FLMAIN_SRCS	src/flisp/Makefile	/^FLMAIN_SRCS := $(flmain.c flisp.h:%=$(SRCDIR)\/%)$/;"	m
FLOATT	src/intrinsics.cpp	/^static Type *FLOATT(Type *t)$/;"	f	typeref:typename:Type *	file:
FLOAT_POW5_INV_SPLIT	base/ryu/utils.jl	/^const FLOAT_POW5_INV_SPLIT = map(i->pow5invsplit(Float32, i), 0:30)$/;"	v
FLOAT_POW5_SPLIT	base/ryu/utils.jl	/^const FLOAT_POW5_SPLIT = map(i->pow5split(Float32, i), 0:46)$/;"	v
FLT_MAXINT	src/support/dtypes.h	/^#define FLT_MAXINT /;"	d
FL_CATCH	src/flisp/flisp.c	/^#define FL_CATCH(/;"	d	file:
FL_CATCH_EXTERN	src/flisp/flisp.h	/^#define FL_CATCH_EXTERN(/;"	d
FL_EOF	src/flisp/flisp.h	/^    value_t NIL, T, F, FL_EOF, QUOTE;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
FL_N_GC_HANDLES	src/flisp/flisp.h	/^#define FL_N_GC_HANDLES /;"	d
FL_TRY	src/flisp/flisp.c	/^#define FL_TRY(/;"	d	file:
FL_TRY_EXTERN	src/flisp/flisp.h	/^#define FL_TRY_EXTERN(/;"	d
FL_UNSPECIFIED	src/flisp/flisp.h	/^#define FL_UNSPECIFIED(/;"	d
FMA_NATIVE	base/special/log.jl	/^const FMA_NATIVE = muladd(nextfloat(1.0),nextfloat(1.0),-nextfloat(1.0,2)) != 0$/;"	v
FOO_19322	test/compiler/inference.jl	/^    function FOO_19322(Y::AbstractMatrix; frac::Float64=0.3, nbins::Int=100, n_sims::Int=100)$/;"	f
FORCE_ELF	src/codegen.cpp	/^#define FORCE_ELF$/;"	d	file:
FORCE_INLINE	src/support/MurmurHash3.c	/^#define FORCE_INLINE /;"	d	file:
FOR_ARGS	src/flisp/flisp.h	/^#define FOR_ARGS(/;"	d
FP128align	test/core.jl	/^struct FP128align <: AbstractFloat$/;"	f
FP128test	test/core.jl	/^primitive type FP128test <: AbstractFloat 128 end$/;"	f
FP_CAPTURE_OFFSET	src/interpreter-stacktrace.c	/^#define FP_CAPTURE_OFFSET /;"	d	file:
FRAMEWORK_DESTDIR	contrib/mac/frameworkapp/Makefile	/^FRAMEWORK_DESTDIR := $(BUILDROOT)\/julia-$(JULIA_COMMIT)-framework$/;"	m
FULL_DATATYPE_TAG	stdlib/Serialization/src/Serialization.jl	/^const FULL_DATATYPE_TAG    = Int32(o0+10)$/;"	v
FULL_GLOBALREF_TAG	stdlib/Serialization/src/Serialization.jl	/^const FULL_GLOBALREF_TAG   = Int32(o0+14)$/;"	v
FUNCTION	src/flisp/flisp.h	/^    value_t BACKQUOTE, COMMA, COMMAAT, COMMADOT, FUNCTION;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
FUNC_HEADS	base/docs/Docs.jl	/^const FUNC_HEADS    = [:function, :macro, :(=)]$/;"	v
F_GETFL	stdlib/Mmap/src/Mmap.jl	/^const F_GETFL       = Cint(3)$/;"	v
F_GETPATH	stdlib/FileWatching/test/runtests.jl	/^const F_GETPATH = Sys.islinux() || Sys.iswindows() || Sys.isapple()  # platforms where F_GETPATH/;"	v
F_NINF	src/support/dtypes.h	/^#define F_NINF /;"	d
F_NNAN	src/support/dtypes.h	/^#define F_NNAN /;"	d
F_PATH	stdlib/FileWatching/test/runtests.jl	/^const F_PATH = F_GETPATH ? "afile.txt" : ""$/;"	v
F_PINF	src/support/dtypes.h	/^#define F_PINF /;"	d
F_PNAN	src/support/dtypes.h	/^#define F_PNAN /;"	d
F_or_FF	base/twiceprecision.jl	/^const F_or_FF = Union{AbstractFloat, Tuple{AbstractFloat,AbstractFloat}}$/;"	v
Face4141	test/core.jl	/^mutable struct Face4141{V}; end$/;"	f
Factor	stdlib/SuiteSparse/src/cholmod.jl	/^    function Factor{Tv}(ptr::Ptr{C_Factor{Tv}}, register_finalizer = true) where Tv$/;"	f
Factor	stdlib/SuiteSparse/src/cholmod.jl	/^Factor(FC::FactorComponent) = Factor(FC.F)$/;"	f
Factor	stdlib/SuiteSparse/src/cholmod.jl	/^Factor(ptr::Ptr{C_Factor{Tv}}) where {Tv<:VTypes} = Factor{Tv}(ptr)$/;"	f
Factor	stdlib/SuiteSparse/src/cholmod.jl	/^Factor(x::Factor) = x$/;"	f
Factor	stdlib/SuiteSparse/src/cholmod.jl	/^mutable struct Factor{Tv<:VTypes} <: Factorization{Tv}$/;"	f
FactorComponent	stdlib/SuiteSparse/src/cholmod.jl	/^    function FactorComponent{Tv,S}(F::Factor{Tv}) where {Tv,S}$/;"	f
FactorComponent	stdlib/SuiteSparse/src/cholmod.jl	/^function FactorComponent(F::Factor{Tv}, sym::Symbol) where Tv$/;"	f
FactorComponent	stdlib/SuiteSparse/src/cholmod.jl	/^mutable struct FactorComponent{Tv,S} <: AbstractMatrix{Tv}$/;"	f
Factorization	stdlib/LinearAlgebra/src/factorization.jl	/^abstract type Factorization{T} end$/;"	f
Fail	stdlib/Test/src/Test.jl	/^mutable struct Fail <: Result$/;"	f
FakePTYs	test/testhelpers/FakePTYs.jl	/^module FakePTYs$/;"	f
FakeTerminal	stdlib/REPL/test/FakeTerminals.jl	/^    FakeTerminal(stdin,stdout,stderr,hascolor=true) =$/;"	f
FakeTerminal	stdlib/REPL/test/FakeTerminals.jl	/^mutable struct FakeTerminal <: REPL.Terminals.UnixTerminal$/;"	f
FakeTerminals	stdlib/REPL/test/FakeTerminals.jl	/^module FakeTerminals$/;"	f
Fallback	src/processor_fallback.cpp	/^namespace Fallback {$/;"	n	file:
FallbackTestSet	stdlib/Test/src/Test.jl	/^struct FallbackTestSet <: AbstractTestSet end$/;"	f
FallbackTestSetException	stdlib/Test/src/Test.jl	/^struct FallbackTestSetException <: Exception$/;"	f
FastMath	base/fastmath.jl	/^module FastMath$/;"	f
Feature	src/processor_arm.cpp	/^namespace Feature {$/;"	n	namespace:ARM	file:
Feature	src/processor_x86.cpp	/^namespace Feature {$/;"	n	namespace:X86	file:
FeatureDep	src/processor.cpp	/^struct FeatureDep {$/;"	s	namespace:__anon839834ed0111	file:
FeatureList	src/processor.cpp	/^struct FeatureList {$/;"	s	namespace:__anon839834ed0111	file:
FeatureName	src/processor.cpp	/^struct FeatureName {$/;"	s	namespace:__anon839834ed0111	file:
Feb	stdlib/Dates/src/query.jl	/^const Feb = 2$/;"	v
Feb	stdlib/Dates/test/adjusters.jl	/^Feb = Dates.DateTime(2013, 2, 2) #Saturday$/;"	v
Feb	stdlib/Dates/test/query.jl	/^Feb = Dates.DateTime(2013, 2, 2) # Saturday$/;"	v
February	stdlib/Dates/src/query.jl	/^const February = 2$/;"	v
Federation of packages	doc/src/manual/code-loading.md	/^## Federation of packages$/;"	s
FetchHead	stdlib/LibGit2/src/types.jl	/^struct FetchHead$/;"	f
FetchOptions	stdlib/LibGit2/src/types.jl	/^    function FetchOptions(; callbacks::RemoteCallbacks=RemoteCallbacks(), kwargs...)$/;"	f
FetchOptions	stdlib/LibGit2/src/types.jl	/^struct FetchOptions$/;"	f
FetchOptionsStruct	stdlib/LibGit2/src/types.jl	/^@kwdef struct FetchOptionsStruct$/;"	f
Field	src/llvm-alloc-opt.cpp	/^        Field(uint32_t size, Type *elty)$/;"	f	struct:__anon0a1571000111::Optimizer::Field	file:
Field	src/llvm-alloc-opt.cpp	/^    struct Field {$/;"	s	struct:__anon0a1571000111::Optimizer	file:
FieldCompletion	stdlib/REPL/src/REPLCompletions.jl	/^struct FieldCompletion <: Completion$/;"	f
FieldConvert	test/core.jl	/^    FieldConvert(a::S, b, c, d, e) where {S} = new{FieldTypeA, S}(a, b, c, d, e)$/;"	f
FieldConvert	test/core.jl	/^struct FieldConvert{FieldTypeA, S}$/;"	f
FieldDocs	test/docs.jl	/^mutable struct FieldDocs$/;"	f
FieldTypeA	test/core.jl	/^FieldTypeA = String$/;"	v
FieldTypeA	test/core.jl	/^FieldTypeA = UInt64$/;"	v
FieldTypeE	test/core.jl	/^FieldTypeE = String$/;"	v
FieldTypeE	test/core.jl	/^FieldTypeE = UInt32$/;"	v
File	base/filesystem.jl	/^    File(fd::OS_HANDLE) = new(true, fd)$/;"	f
File	base/filesystem.jl	/^    File(fd::RawFD) = File(Libc._get_osfhandle(fd)) # TODO: calling close would now destroy the /;"	f
File	base/filesystem.jl	/^mutable struct File <: AbstractFile$/;"	f
File locations	doc/src/manual/environment-variables.md	/^## File locations$/;"	s
FileEvent	stdlib/FileWatching/src/FileWatching.jl	/^    FileEvent(r::Bool, c::Bool, t::Bool) = new(r, c, t)$/;"	f
FileEvent	stdlib/FileWatching/src/FileWatching.jl	/^FileEvent() = FileEvent(false, false, true)$/;"	f
FileEvent	stdlib/FileWatching/src/FileWatching.jl	/^FileEvent(flags::Integer) = FileEvent((flags & UV_RENAME) != 0,$/;"	f
FileEvent	stdlib/FileWatching/src/FileWatching.jl	/^struct FileEvent$/;"	f
FileMonitor	stdlib/FileWatching/src/FileWatching.jl	/^    FileMonitor(file::AbstractString) = FileMonitor(String(file))$/;"	f
FileMonitor	stdlib/FileWatching/src/FileWatching.jl	/^    function FileMonitor(file::String)$/;"	f
FileMonitor	stdlib/FileWatching/src/FileWatching.jl	/^mutable struct FileMonitor$/;"	f
FileObj5374	test/core.jl	/^mutable struct FileObj5374$/;"	f
FileRedirect	base/cmd.jl	/^    FileRedirect(filename::AbstractString, append::Bool) = FileRedirect(convert(String, filename/;"	f
FileRedirect	base/cmd.jl	/^    function FileRedirect(filename::String, append::Bool)$/;"	f
FileRedirect	base/cmd.jl	/^struct FileRedirect$/;"	f
FileWatching	stdlib/FileWatching/src/FileWatching.jl	/^module FileWatching$/;"	f
Filesystem	base/filesystem.jl	/^module Filesystem$/;"	f
Filesystem	doc/src/base/file.md	/^# Filesystem$/;"	c
Filter	base/iterators.jl	/^struct Filter{F,I}$/;"	f
FinalLowerGC	src/llvm-final-gc-lowering.cpp	/^    FinalLowerGC() : FunctionPass(ID)$/;"	f	struct:FinalLowerGC	file:
FinalLowerGC	src/llvm-final-gc-lowering.cpp	/^struct FinalLowerGC: public FunctionPass, private JuliaPassContext {$/;"	s	file:
Finalizers	src/flisp/flisp.h	/^    cvalue_t **Finalizers;$/;"	m	struct:_fl_context_t	typeref:typename:cvalue_t **
FindBaseValue	src/llvm-late-gc-lowering.cpp	/^static std::pair<Value*,int> FindBaseValue(const State &S, Value *V, bool UseCache = true) {$/;"	f	typeref:typename:std::pair<Value *,int>	file:
FindFunctionNamed	src/jitlayers.cpp	/^Function *JuliaOJIT::FindFunctionNamed(const std::string &Name)$/;"	f	class:JuliaOJIT	typeref:typename:Function *
FindRefinements	src/llvm-late-gc-lowering.cpp	/^static SmallVector<int, 1> *FindRefinements(Value *V, State *S)$/;"	f	typeref:typename:SmallVector<int,1> *	file:
FirstSpecial	src/codegen_shared.h	/^    FirstSpecial = Tracked,$/;"	e	enum:AddressSpace
Fix deprecation warnings	doc/src/manual/performance-tips.md	/^## Fix deprecation warnings$/;"	s
Fix1	base/operators.jl	/^    Fix1(f::F, x::T) where {F,T} = new{F,T}(f, x)$/;"	f
Fix1	base/operators.jl	/^    Fix1(f::Type{F}, x::T) where {F,T} = new{Type{F},T}(f, x)$/;"	f
Fix1	base/operators.jl	/^struct Fix1{F,T} <: Function$/;"	f
Fix2	base/operators.jl	/^    Fix2(f::F, x::T) where {F,T} = new{F,T}(f, x)$/;"	f
Fix2	base/operators.jl	/^    Fix2(f::Type{F}, x::T) where {F,T} = new{Type{F},T}(f, x)$/;"	f
Fix2	base/operators.jl	/^struct Fix2{F,T} <: Function$/;"	f
FixUpRefinements	src/llvm-late-gc-lowering.cpp	/^void LateLowerGCFrame::FixUpRefinements(ArrayRef<int> PHINumbers, State &S)$/;"	f	class:LateLowerGCFrame	typeref:typename:void
FixedPeriod	stdlib/Dates/src/periods.jl	/^const FixedPeriod = Union{Week, Day, Hour, Minute, Second, Millisecond, Microsecond, Nanosecond}$/;"	v
Flatten	base/iterators.jl	/^struct Flatten{I}$/;"	f
Float	base/grisu/float.jl	/^Float() = Float(0,0,0)$/;"	f
Float	base/grisu/float.jl	/^Float(d::AbstractFloat) = Float(_significand(d), _exponent(d))$/;"	f
Float	base/grisu/float.jl	/^Float(x,y) = Float(x,y,Int32(0))$/;"	f
Float	base/grisu/float.jl	/^struct Float$/;"	f
Float	base/sort.jl	/^module Float$/;"	f
Float10MSBits	base/grisu/float.jl	/^const Float10MSBits = 0xFFC0000000000000 # used normalize(Float)$/;"	v
Float16	base/boot.jl	/^primitive type Float16 <: AbstractFloat 16 end$/;"	f
Float16	base/float.jl	/^Float16(x::Float64) = Float16(Float32(x))$/;"	f
Float16	base/float.jl	/^Float16(x::Integer) = convert(Float16, convert(Float32, x))$/;"	f
Float16	base/float.jl	/^function Float16(val::Float32)$/;"	f
Float16	base/gmp.jl	/^Float16(n::BigInt) = Float16(n, RoundNearest)$/;"	f
Float16	base/gmp.jl	/^function Float16(x::BigInt, ::RoundingMode{:Nearest})$/;"	f
Float16	base/irrationals.jl	/^Float16(x::AbstractIrrational) = Float16(Float32(x))$/;"	f
Float16	base/mpfr.jl	/^Float16(x::BigFloat) = Float16(Float32(x))$/;"	f
Float22716	test/math.jl	/^struct Float22716{T<:AbstractFloat} <: AbstractFloat$/;"	f
Float32	base/boot.jl	/^primitive type Float32 <: AbstractFloat 32 end$/;"	f
Float32	base/float.jl	/^Float32(x::Float64) = fptrunc(Float32, x)$/;"	f
Float32	base/float.jl	/^function Float32(val::Float16)$/;"	f
Float32	base/float.jl	/^function Float32(x::Int128)$/;"	f
Float32	base/float.jl	/^function Float32(x::UInt128)$/;"	f
Float32	base/gmp.jl	/^Float32(n::BigInt) = Float32(n, RoundNearest)$/;"	f
Float32	base/gmp.jl	/^function Float32(x::BigInt, ::RoundingMode{:Nearest})$/;"	f
Float32	base/mpfr.jl	/^Float32(x::BigFloat, r::MPFRRoundingMode=ROUNDING_MODE[]) =$/;"	f
Float32	base/mpfr.jl	/^Float32(x::BigFloat, r::RoundingMode) = Float32(x, convert(MPFRRoundingMode, r))$/;"	f
Float64	base/boot.jl	/^primitive type Float64 <: AbstractFloat 64 end$/;"	f
Float64	base/float.jl	/^Float64(x::Float16) = Float64(Float32(x))$/;"	f
Float64	base/float.jl	/^Float64(x::Float32) = fpext(Float64, x)$/;"	f
Float64	base/float.jl	/^function Float64(x::Int128)$/;"	f
Float64	base/float.jl	/^function Float64(x::UInt128)$/;"	f
Float64	base/gmp.jl	/^Float64(n::BigInt) = Float64(n, RoundNearest)$/;"	f
Float64	base/gmp.jl	/^Float64(n::BigInt, ::RoundingMode{:ToZero}) = MPZ.get_d(n)$/;"	f
Float64	base/gmp.jl	/^function Float64(x::BigInt, ::RoundingMode{:Nearest})$/;"	f
Float64	base/mpfr.jl	/^Float64(x::BigFloat, r::MPFRRoundingMode=ROUNDING_MODE[]) =$/;"	f
Float64	base/mpfr.jl	/^Float64(x::BigFloat, r::RoundingMode) = Float64(x, convert(MPFRRoundingMode, r))$/;"	f
Float64	test/arrayops.jl	/^Float64(x::F21666) = Float64(x.x)$/;"	f
FloatInterval	stdlib/Random/src/Random.jl	/^abstract type FloatInterval{T<:AbstractFloat} end$/;"	f
FloatInterval_64	stdlib/Random/src/Random.jl	/^const FloatInterval_64 = FloatInterval{Float64}$/;"	v
FloatM32	base/grisu/float.jl	/^const FloatM32 = 0xFFFFFFFF$/;"	v
FloatOrC	stdlib/LinearAlgebra/test/addmul.jl	/^const FloatOrC = Union{AbstractFloat, Complex{<: AbstractFloat}}$/;"	v
FloatSignMask	base/grisu/float.jl	/^const FloatSignMask = 0x8000000000000000 # used in normalize(Float)$/;"	v
FloatSignificandSize	base/grisu/float.jl	/^const FloatSignificandSize = Int32(64)$/;"	v
FloatTypes	base/atomics.jl	/^const FloatTypes = Union{floattypes...}$/;"	v
FloatTypes	base/fastmath.jl	/^const FloatTypes = Union{Float32,Float64}$/;"	v
FloatWrapper	test/math.jl	/^struct FloatWrapper <: Real$/;"	f
Floating-Point Numbers	doc/src/manual/integers-and-floating-point-numbers.md	/^## Floating-Point Numbers$/;"	s
Floating-point zero	doc/src/manual/integers-and-floating-point-numbers.md	/^### Floating-point zero$/;"	S
Floats	base/sort.jl	/^const Floats = Union{Float32,Float64}$/;"	v
FolderMonitor	stdlib/FileWatching/src/FileWatching.jl	/^    FolderMonitor(folder::AbstractString) = FolderMonitor(String(folder))$/;"	f
FolderMonitor	stdlib/FileWatching/src/FileWatching.jl	/^    function FolderMonitor(folder::String)$/;"	f
FolderMonitor	stdlib/FileWatching/src/FileWatching.jl	/^mutable struct FolderMonitor$/;"	f
Foo	base/docs/basedocs.jl	/^module Foo$/;"	f
Foo	test/arrayops.jl	/^struct Foo end$/;"	f
Foo	test/cmdlineargs.jl	/^        module Foo$/;"	f
Foo	test/core.jl	/^    mutable struct Foo{T}$/;"	f
Foo	test/core.jl	/^struct Foo <: Abs; end$/;"	f
Foo	test/core.jl	/^struct Foo end$/;"	f
Foo	test/depot/packages/Foo/I05Qq/src/Foo.jl	/^module Foo$/;"	f
Foo	test/docs.jl	/^mutable struct Foo$/;"	f
Foo	test/project/deps/Foo1/src/Foo.jl	/^module Foo$/;"	f
Foo	test/project/deps/Foo2.jl/src/Foo.jl	/^module Foo$/;"	f
Foo11367	test/subtype.jl	/^abstract type Foo11367 end$/;"	f
Foo11858	test/core.jl	/^    Foo11858(x::Float64) = new(x)$/;"	f
Foo11858	test/core.jl	/^mutable struct Foo11858$/;"	f
Foo11874	test/core.jl	/^struct Foo11874$/;"	f
Foo1234	test/deprecation_exec.jl	/^module Foo1234$/;"	f
Foo16530a	test/compiler/inference.jl	/^mutable struct Foo16530a{dim}$/;"	f
Foo16530b	test/compiler/inference.jl	/^mutable struct Foo16530b{dim}$/;"	f
Foo17149	test/core.jl	/^mutable struct Foo17149$/;"	f
Foo19668	test/compiler/inference.jl	/^    Foo19668(; kwargs...) = new()$/;"	f
Foo19668	test/compiler/inference.jl	/^struct Foo19668$/;"	f
Foo19921	test/copy.jl	/^mutable struct Foo19921$/;"	f
Foo20518	test/compiler/inference.jl	/^struct Foo20518 <: AbstractVector{Int}; end # issue #20518; inference assumed AbstractArrays$/;"	f
Foo22256	test/core.jl	/^mutable struct Foo22256$/;"	f
Foo24748	test/subtype.jl	/^abstract type Foo24748{T1,T2,T3} end$/;"	f
Foo2509;	test/core.jl	/^struct Foo2509; foo::Int; end$/;"	f
Foo2517;	test/core.jl	/^struct Foo2517; end$/;"	f
Foo26028	test/precompile.jl	/^            module Foo26028$/;"	f
Foo26601	test/broadcast.jl	/^struct Foo26601{T}$/;"	f
Foo26826	test/compiler/inference.jl	/^struct Foo26826{A,B}$/;"	f
Foo27204	test/core.jl	/^struct Foo27204{T}$/;"	f
Foo27710	test/syntax.jl	/^struct Foo27710{T} end$/;"	f
Foo28079	test/compiler/inference.jl	/^struct Foo28079 end$/;"	f
Foo28392;	test/core.jl	/^struct Foo28392; end$/;"	f
Foo2919	test/core.jl	/^const Foo2919 = Int$/;"	v
Foo29936	test/precompile.jl	/^              module Foo29936$/;"	f
Foo29983	test/compiler/irpasses.jl	/^struct Foo29983{T}$/;"	f
Foo2_module	test/precompile.jl	/^Foo2_module = :F2oo4b3a94a1a081a8cb$/;"	v
Foo30394	test/compiler/inference.jl	/^    Foo30394() = new(Base30394(1))$/;"	f
Foo30394	test/compiler/inference.jl	/^mutable struct Foo30394$/;"	f
Foo30394_2	test/compiler/inference.jl	/^    Foo30394_2() = new(Foo30394())$/;"	f
Foo30394_2	test/compiler/inference.jl	/^mutable struct Foo30394_2$/;"	f
Foo30594;	test/compiler/irpasses.jl	/^mutable struct Foo30594; x::Float64; end$/;"	f
Foo31062	test/core.jl	/^struct Foo31062$/;"	f
Foo4075	test/core.jl	/^struct Foo4075$/;"	f
Foo4115	test/core.jl	/^mutable struct Foo4115 end$/;"	f
Foo4115s	test/core.jl	/^const Foo4115s = NTuple{3, Union{Foo4115, Type{Foo4115}}}$/;"	v
Foo4129;	test/core.jl	/^mutable struct Foo4129; end$/;"	f
Foo4376	test/core.jl	/^mutable struct Foo4376{T}$/;"	f
Foo4538	test/keywordargs.jl	/^module Foo4538$/;"	f
Foo4974	test/keywordargs.jl	/^function Foo4974(f; kwargs...)$/;"	f
Foo7648	test/reflection.jl	/^mutable struct Foo7648 end$/;"	f
Foo7810	test/compiler/inference.jl	/^mutable struct Foo7810{T<:AbstractVector}$/;"	f
Foo8184	test/core.jl	/^struct Foo8184$/;"	f
Foo9378	test/core.jl	/^abstract type Foo9378{T,S} end$/;"	f
Foo;	test/loading.jl	/^module Foo; import Libdl; end$/;"	f
FooBar	test/precompile.jl	/^          module FooBar$/;"	f
FooBar1	test/precompile.jl	/^          module FooBar1$/;"	f
FooBar2	test/precompile.jl	/^          module FooBar2$/;"	f
FooBar2515	test/core.jl	/^struct FooBar2515$/;"	f
FooBarDFW	test/compiler/inference.jl	/^mutable struct FooBarDFW{s}; end$/;"	f
FooBarT	test/precompile.jl	/^          module FooBarT$/;"	f
FooBarT1	test/precompile.jl	/^          module FooBarT1$/;"	f
FooBarT2	test/precompile.jl	/^          module FooBarT2$/;"	f
FooBase_module	test/precompile.jl	/^FooBase_module = :FooBase4b3a94a1a081a8cb$/;"	v
FooDictHash	test/compiler/codegen.jl	/^struct FooDictHash{T}$/;"	f
FooFieldType;	test/core.jl	/^struct FooFieldType; x::Int; end$/;"	f
FooFoo	test/core.jl	/^mutable struct FooFoo{A,B} y::FooFoo{A} end$/;"	f
FooModEverywhere	stdlib/Distributed/test/distributed_exec.jl	/^@everywhere module FooModEverywhere end$/;"	f
FooModLocal	stdlib/Distributed/test/distributed_exec.jl	/^module FooModLocal end$/;"	f
FooNTuple	test/core.jl	/^mutable struct FooNTuple{N}$/;"	f
FooPartial	test/compiler/inference.jl	/^struct FooPartial$/;"	f
FooPartial	test/compiler/irpasses.jl	/^struct FooPartial$/;"	f
FooStructEverywhere	stdlib/Distributed/test/distributed_exec.jl	/^@everywhere struct FooStructEverywhere end$/;"	f
FooStructLocal	stdlib/Distributed/test/distributed_exec.jl	/^struct FooStructLocal end$/;"	f
FooTupleT	test/core.jl	/^mutable struct FooTupleT{T}$/;"	f
Foo_	test/core.jl	/^mutable struct Foo_{T} x::Foo_{Int} end$/;"	f
Foo_15776	test/dict.jl	/^mutable struct Foo_15776$/;"	f
Foo_19281	test/misc.jl	/^    Foo_19281() = new(x_19281)$/;"	f
Foo_19281	test/misc.jl	/^mutable struct Foo_19281$/;"	f
Foo_22708	test/compiler/inference.jl	/^struct Foo_22708$/;"	f
Foo____	test/core.jl	/^abstract type Foo____{K} end$/;"	f
Foo_module	test/precompile.jl	/^Foo_module = :Foo4b3a94a1a081a8cb$/;"	v
Footnote	stdlib/Markdown/src/Common/block.jl	/^mutable struct Footnote$/;"	f
Footnote references	stdlib/Markdown/docs/src/index.md	/^### Footnote references$/;"	S
For Loops and Comprehensions	doc/src/manual/variables-and-scoping.md	/^### For Loops and Comprehensions$/;"	S
For objects that mimic AbstractArray but are not subtypes	doc/src/devdocs/offset-arrays.md	/^### For objects that mimic AbstractArray but are not subtypes$/;"	S
FormatMessage	base/libc.jl	/^    function FormatMessage(e=GetLastError())$/;"	f
FormatMessage	base/libc.jl	/^function FormatMessage end$/;"	f
Fortran Wrapper Example	doc/src/manual/calling-c-and-fortran-code.md	/^## Fortran Wrapper Example$/;"	s
Forward	base/ordering.jl	/^const Forward = ForwardOrdering()$/;"	v
ForwardOrdering	base/ordering.jl	/^struct ForwardOrdering <: Ordering end$/;"	f
Frame	src/llvm-alloc-opt.cpp	/^            Frame(BasicBlock *bb)$/;"	f	struct:__anon0a1571000111::Optimizer::Lifetime::Frame	file:
Frame	src/llvm-alloc-opt.cpp	/^            Frame(Instruction *orig_i, Instruction *new_i)$/;"	f	struct:__anon0a1571000111::Optimizer::ReplaceUses::Frame	file:
Frame	src/llvm-alloc-opt.cpp	/^            Frame(Instruction *orig_i, uint32_t offset)$/;"	f	struct:__anon0a1571000111::Optimizer::ReplaceUses::Frame	file:
Frame	src/llvm-alloc-opt.cpp	/^        struct Frame {$/;"	s	struct:__anon0a1571000111::Optimizer::CheckInst	file:
Frame	src/llvm-alloc-opt.cpp	/^        struct Frame {$/;"	s	struct:__anon0a1571000111::Optimizer::Lifetime	file:
Frame	src/llvm-alloc-opt.cpp	/^        struct Frame {$/;"	s	struct:__anon0a1571000111::Optimizer::ReplaceUses	file:
Frame	src/llvm-multiversioning.cpp	/^        Frame(Args &&... args) :$/;"	f	struct:__anond5683ea40111::ConstantUses::Frame	file:
Frame	src/llvm-multiversioning.cpp	/^    struct Frame : Info<Constant> {$/;"	s	struct:__anond5683ea40111::ConstantUses	file:
Free variables	doc/src/devdocs/types.md	/^## Free variables$/;"	s
FreeBSD	doc/build/freebsd.md	/^## FreeBSD$/;"	s
Frequently Asked Questions	doc/src/manual/faq.md	/^# Frequently Asked Questions$/;"	c
Fsym	src/flisp/flisp.h	/^    value_t tsym, Tsym, fsym, Fsym, booleansym, nullsym, evalsym, fnsym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
Fun_24305	test/subtype.jl	/^Fun_24305(x) = [ f1_24305(x[1],x[2],x[3]); f2_24305(x[1],x[2],x[3]); f3_24305(x[1],x[2],x[3]) ]$/;"	f
FuncMCView	src/disasm.cpp	/^#define FuncMCView /;"	d	file:
Func_VOID__VOID	test/embedding/embedding.c	/^        typedef void (*Func_VOID__VOID)(void);$/;"	t	function:main	typeref:typename:void (*)(void)	file:
Function calls	doc/src/devdocs/functions.md	/^## Function calls$/;"	s
Function composition and piping	doc/src/manual/functions.md	/^## Function composition and piping$/;"	s
Function methods	doc/src/devdocs/reflection.md	/^## Function methods$/;"	s
Function-like objects	doc/src/manual/methods.md	/^## Function-like objects$/;"	s
FunctionLike	test/errorshow.jl	/^struct FunctionLike <: Function; end$/;"	f
FunctionMover	src/ccall.cpp	/^    FunctionMover(llvm::Module *dest,llvm::Module *src) :$/;"	f	class:FunctionMover	file:
FunctionMover	src/ccall.cpp	/^class FunctionMover final : public ValueMaterializer$/;"	c	file:
FunctionRef	src/staticdata.c	/^    FunctionRef,$/;"	e	enum:RefTags	file:
Functionality	stdlib/LibGit2/docs/src/index.md	/^### Functionality$/;"	S
Functions	doc/src/manual/faq.md	/^## Functions$/;"	s
Functions & Methods	doc/src/manual/documentation.md	/^## Functions & Methods$/;"	s
Functions on `Expr`essions	doc/src/manual/metaprogramming.md	/^### Functions on `Expr`essions$/;"	S
Furlong	test/testhelpers/Furlongs.jl	/^Furlong(x::T) where {T<:Number} = Furlong{1,T}(x)$/;"	f
Furlong	test/testhelpers/Furlongs.jl	/^struct Furlong{p,T<:Number} <: Number$/;"	f
Furlongs	test/testhelpers/Furlongs.jl	/^module Furlongs$/;"	f
Further Reading	doc/src/manual/functions.md	/^## Further Reading$/;"	s
Future	stdlib/Distributed/src/remotecall.jl	/^    Future(t::NTuple{4, Any}) = new(t[1],t[2],t[3],t[4])  # Useful for creating dummy, zeroed-ou/;"	f
Future	stdlib/Distributed/src/remotecall.jl	/^    Future(w::Int, rrid::RRID, v::Union{Some, Nothing}=nothing) =$/;"	f
Future	stdlib/Distributed/src/remotecall.jl	/^Future(pid::Integer=myid()) = Future(pid, RRID())$/;"	f
Future	stdlib/Distributed/src/remotecall.jl	/^Future(w::LocalProcess) = Future(w.id)$/;"	f
Future	stdlib/Distributed/src/remotecall.jl	/^Future(w::Worker) = Future(w.id)$/;"	f
Future	stdlib/Distributed/src/remotecall.jl	/^mutable struct Future <: AbstractRemoteRef$/;"	f
Future	stdlib/Future/docs/src/index.md	/^# Future$/;"	c
Future	stdlib/Future/src/Future.jl	/^module Future$/;"	f
G	test/docs.jl	/^G = :G$/;"	v
GAPC	src/sys.c	/^typedef DWORD (WINAPI *GAPC)(WORD);$/;"	t	typeref:typename:DWORD (WINAPI *)(WORD)	file:
GB18399	test/compiler/inference.jl	/^GB18399 = TSlow18399{Int}(1)$/;"	v
GC	base/gcutils.jl	/^module GC$/;"	f
GC Invariants	doc/src/devdocs/gc-sa.md	/^## GC Invariants$/;"	s
GC root placement	doc/src/devdocs/llvm.md	/^## GC root placement$/;"	s
GCAllocBytes	src/llvm-pass-helpers.cpp	/^    const IntrinsicDescription GCAllocBytes($/;"	v	namespace:jl_intrinsics	typeref:typename:const IntrinsicDescription
GCBigAlloc	src/llvm-pass-helpers.cpp	/^    const WellKnownFunctionDescription GCBigAlloc($/;"	v	namespace:jl_well_known	typeref:typename:const WellKnownFunctionDescription
GCBugVisitor	src/clangsa/GCChecker.cpp	/^          GCBugVisitor() {}$/;"	f	class:__anon9c5a21540111::GCChecker::GCBugVisitor	file:
GCBugVisitor	src/clangsa/GCChecker.cpp	/^        class GCBugVisitor$/;"	c	class:__anon9c5a21540111::GCChecker	file:
GCChecker	src/clangsa/GCChecker.cpp	/^    class GCChecker : public Checker<eval::Call,$/;"	c	namespace:__anon9c5a21540111	file:
GCEXT_ARGS	test/Makefile	/^GCEXT_ARGS := "JULIA=$(JULIA_EXECUTABLE)" "BIN=$(SRCDIR)\/gcext" "CC=$(CC)"$/;"	m
GCHandleStack	src/flisp/flisp.h	/^    value_t *GCHandleStack[FL_N_GC_HANDLES];$/;"	m	struct:_fl_context_t	typeref:typename:value_t * []
GCInvariantVerifier	src/llvm-gc-invariant-verifier.cpp	/^    GCInvariantVerifier(bool Strong = false) : FunctionPass(ID), Strong(Strong) {}$/;"	f	struct:GCInvariantVerifier	file:
GCInvariantVerifier	src/llvm-gc-invariant-verifier.cpp	/^struct GCInvariantVerifier : public FunctionPass, public InstVisitor<GCInvariantVerifier> {$/;"	s	file:
GCPoolAlloc	src/llvm-pass-helpers.cpp	/^    const WellKnownFunctionDescription GCPoolAlloc($/;"	v	namespace:jl_well_known	typeref:typename:const WellKnownFunctionDescription
GCPreserves	src/llvm-late-gc-lowering.cpp	/^    std::map<Instruction *, std::vector<int>> GCPreserves;$/;"	m	struct:State	typeref:typename:std::map<Instruction *,std::vector<int>>	file:
GCQueueRoot	src/llvm-pass-helpers.cpp	/^    const WellKnownFunctionDescription GCQueueRoot($/;"	v	namespace:jl_well_known	typeref:typename:const WellKnownFunctionDescription
GCValueBugVisitor	src/clangsa/GCChecker.cpp	/^          GCValueBugVisitor(SymbolRef S) : Sym(S) {}$/;"	f	class:__anon9c5a21540111::GCChecker::GCValueBugVisitor	file:
GCValueBugVisitor	src/clangsa/GCChecker.cpp	/^        class GCValueBugVisitor$/;"	c	class:__anon9c5a21540111::GCChecker	file:
GC_ALLOC_BYTES_NAME	src/llvm-pass-helpers.cpp	/^    static const char *GC_ALLOC_BYTES_NAME = "julia.gc_alloc_bytes";$/;"	v	namespace:jl_intrinsics	typeref:typename:const char *	file:
GC_BIG_ALLOC_NAME	src/llvm-pass-helpers.cpp	/^    static const char *GC_BIG_ALLOC_NAME = "jl_gc_big_alloc";$/;"	v	namespace:jl_well_known	typeref:typename:const char *	file:
GC_CLEAN	src/julia_internal.h	/^#define GC_CLEAN /;"	d
GC_Diff	base/util.jl	/^function GC_Diff(new::GC_Num, old::GC_Num)$/;"	f
GC_Diff	base/util.jl	/^struct GC_Diff$/;"	f
GC_INTERVAL	src/flisp/flisp.c	/^#define GC_INTERVAL /;"	d	file:
GC_MARKED	src/julia_internal.h	/^#define GC_MARKED /;"	d
GC_MARK_L_excstack	src/gc.h	/^    GC_MARK_L_excstack,$/;"	e	enum:__anoncf30557c0403
GC_MARK_L_finlist	src/gc.h	/^    GC_MARK_L_finlist,$/;"	e	enum:__anoncf30557c0403
GC_MARK_L_marked_obj	src/gc.h	/^    GC_MARK_L_marked_obj,$/;"	e	enum:__anoncf30557c0403
GC_MARK_L_module_binding	src/gc.h	/^    GC_MARK_L_module_binding,$/;"	e	enum:__anoncf30557c0403
GC_MARK_L_obj16	src/gc.h	/^    GC_MARK_L_obj16,$/;"	e	enum:__anoncf30557c0403
GC_MARK_L_obj32	src/gc.h	/^    GC_MARK_L_obj32,$/;"	e	enum:__anoncf30557c0403
GC_MARK_L_obj8	src/gc.h	/^    GC_MARK_L_obj8,$/;"	e	enum:__anoncf30557c0403
GC_MARK_L_objarray	src/gc.h	/^    GC_MARK_L_objarray,$/;"	e	enum:__anoncf30557c0403
GC_MARK_L_scan_only	src/gc.h	/^    GC_MARK_L_scan_only,$/;"	e	enum:__anoncf30557c0403
GC_MARK_L_stack	src/gc.h	/^    GC_MARK_L_stack,$/;"	e	enum:__anoncf30557c0403
GC_MAX_SZCLASS	src/julia_internal.h	/^#define GC_MAX_SZCLASS /;"	d
GC_Num	base/util.jl	/^struct GC_Num$/;"	f
GC_OLD	src/julia_internal.h	/^#define GC_OLD /;"	d
GC_OLD_MARKED	src/julia_internal.h	/^#define GC_OLD_MARKED /;"	d
GC_PAGE_LG2	src/gc.h	/^#define GC_PAGE_LG2 /;"	d
GC_PAGE_OFFSET	src/gc.h	/^#define GC_PAGE_OFFSET /;"	d
GC_PAGE_SZ	src/gc.h	/^#define GC_PAGE_SZ /;"	d
GC_PERM_POOL_LIMIT	src/gc.c	/^#define GC_PERM_POOL_LIMIT /;"	d	file:
GC_PERM_POOL_SIZE	src/gc.c	/^#define GC_PERM_POOL_SIZE /;"	d	file:
GC_POOL_ALLOC_NAME	src/llvm-pass-helpers.cpp	/^    static const char *GC_POOL_ALLOC_NAME = "jl_gc_pool_alloc";$/;"	v	namespace:jl_well_known	typeref:typename:const char *	file:
GC_QUEUE_ROOT_NAME	src/llvm-pass-helpers.cpp	/^    static const char *GC_QUEUE_ROOT_NAME = "jl_gc_queue_root";$/;"	v	namespace:jl_well_known	typeref:typename:const char *	file:
GC_VERIFY	src/options.h	/^#define GC_VERIFY$/;"	d
GCbrokentype	test/core.jl	/^module GCbrokentype$/;"	f
GDB hangs with cygwin mintty	doc/build/windows.md	/^### GDB hangs with cygwin mintty$/;"	S
GDB not attaching to the right process	doc/build/windows.md	/^### GDB not attaching to the right process$/;"	S
GDB not showing the right backtrace	doc/build/windows.md	/^### GDB not showing the right backtrace$/;"	S
GESW	base/env.jl	/^    GESW() = (pos = ccall(:GetEnvironmentStringsW,stdcall,Ptr{UInt16},()); (pos,pos))$/;"	f
GET_GC_FRAME_SLOT_NAME	src/llvm-pass-helpers.cpp	/^    static const char *GET_GC_FRAME_SLOT_NAME = "julia.get_gc_frame_slot";$/;"	v	namespace:jl_intrinsics	typeref:typename:const char *	file:
GET_INT16	src/flisp/flisp.c	/^#define GET_INT16(/;"	d	file:
GET_INT32	src/flisp/flisp.c	/^#define GET_INT32(/;"	d	file:
GF2X	stdlib/Random/src/DSFMT.jl	/^GF2X(s::AbstractString) = GF2X(parse(BigInt, reverse(s), base = 16))$/;"	f
GF2X	stdlib/Random/src/DSFMT.jl	/^struct GF2X$/;"	f
GIGA	src/signal-handling.c	/^static const    uint64_t GIGA = 1000000000ULL;$/;"	v	typeref:typename:const uint64_t	file:
GITHUB_REGEX	stdlib/LibGit2/src/LibGit2.jl	/^const GITHUB_REGEX =$/;"	v
GIT_CRED_ATTRIBUTES	stdlib/LibGit2/src/gitcredential.jl	/^const GIT_CRED_ATTRIBUTES = ("protocol", "host", "path", "username", "password", "url")$/;"	v
GIT_INSTALLED	stdlib/LibGit2/test/libgit2.jl	/^const GIT_INSTALLED = try$/;"	v
GLOBALREF_TAG	stdlib/Serialization/src/Serialization.jl	/^const GLOBALREF_TAG = sertag(GlobalRef)$/;"	v
GMP	base/gmp.jl	/^module GMP$/;"	f
GMP_BB_NAME	deps/gmp.mk	/^GMP_BB_NAME := GMP.v$(GMP_VER)$/;"	m
GMP_BB_URL_BASE	deps/gmp.mk	/^GMP_BB_URL_BASE := https:\/\/github.com\/JuliaPackaging\/Yggdrasil\/releases\/download\/GMP-v$(G/;"	m
GMP_INSTALL	deps/gmp.mk	/^define GMP_INSTALL$/;"	m
GRAIN_K	src/options.h	/^#define GRAIN_K /;"	d
GROUP_CHAR	base/regex.jl	/^const GROUP_CHAR = 'g'$/;"	v
GRP_COMDAT	deps/srccache/patchelf-0.9/src/elf.h	/^#define GRP_COMDAT	/;"	d
GTAGS	deps/srccache/patchelf-0.9/Makefile.in	/^GTAGS:$/;"	t
GTAGS	deps/srccache/patchelf-0.9/src/Makefile.in	/^GTAGS:$/;"	t
GTAGS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^GTAGS:$/;"	t
GZIP_ENV	deps/srccache/patchelf-0.9/Makefile.in	/^GZIP_ENV = --best$/;"	m
Garbage Collection Safety	doc/src/manual/calling-c-and-fortran-code.md	/^## Garbage Collection Safety$/;"	s
Garbage collector mark bits	doc/src/devdocs/object.md	/^## Garbage collector mark bits$/;"	s
General	doc/src/manual/faq.md	/^## General$/;"	s
General Collections	doc/src/base/collections.md	/^## General Collections$/;"	s
General Formatting Guidelines For C code contributions	CONTRIBUTING.md	/^#### General Formatting Guidelines For C code contributions$/;"	t
General Formatting Guidelines for Julia code contributions	CONTRIBUTING.md	/^#### General Formatting Guidelines for Julia code contributions$/;"	t
General I/O	doc/src/base/io-network.md	/^## General I\/O$/;"	s
General Information for Windows	doc/build/windows.md	/^## General Information for Windows$/;"	s
General Number Functions and Constants	doc/src/base/numbers.md	/^## General Number Functions and Constants$/;"	s
General Overview	doc/src/devdocs/gc-sa.md	/^## General Overview$/;"	s
General considerations	doc/src/devdocs/sanitizers.md	/^## General considerations$/;"	s
General considerations	doc/src/devdocs/valgrind.md	/^## General considerations$/;"	s
General troubleshooting	doc/build/build.md	/^## General troubleshooting$/;"	s
GeneralPeriod	stdlib/Dates/src/periods.jl	/^GeneralPeriod = Union{Period, CompoundPeriod}$/;"	v
GeneralizedEigen	stdlib/LinearAlgebra/src/eigen.jl	/^GeneralizedEigen(values::AbstractVector{V}, vectors::AbstractMatrix{T}) where {T,V} =$/;"	f
GeneralizedEigen	stdlib/LinearAlgebra/src/eigen.jl	/^struct GeneralizedEigen{T,V,S<:AbstractMatrix,U<:AbstractVector} <: Factorization{T}$/;"	f
GeneralizedSVD	stdlib/LinearAlgebra/src/svd.jl	/^    function GeneralizedSVD{T,S}(U::AbstractMatrix{T}, V::AbstractMatrix{T}, Q::AbstractMatrix{T/;"	f
GeneralizedSVD	stdlib/LinearAlgebra/src/svd.jl	/^function GeneralizedSVD(U::AbstractMatrix{T}, V::AbstractMatrix{T}, Q::AbstractMatrix{T},$/;"	f
GeneralizedSVD	stdlib/LinearAlgebra/src/svd.jl	/^struct GeneralizedSVD{T,S} <: Factorization{T}$/;"	f
GeneralizedSchur	stdlib/LinearAlgebra/src/schur.jl	/^    function GeneralizedSchur{Ty,M}(S::AbstractMatrix{Ty}, T::AbstractMatrix{Ty}, alpha::Vector,$/;"	f
GeneralizedSchur	stdlib/LinearAlgebra/src/schur.jl	/^function GeneralizedSchur(S::AbstractMatrix{Ty}, T::AbstractMatrix{Ty}, alpha::Vector,$/;"	f
GeneralizedSchur	stdlib/LinearAlgebra/src/schur.jl	/^struct GeneralizedSchur{Ty,M<:AbstractMatrix} <: Factorization{Ty}$/;"	f
Generalizing existing code	doc/src/devdocs/offset-arrays.md	/^## Generalizing existing code$/;"	s
Generated functions	doc/src/manual/metaprogramming.md	/^## Generated functions$/;"	s
GeneratedFunctionStub	base/boot.jl	/^struct GeneratedFunctionStub$/;"	f
Generating random values of custom types	stdlib/Random/docs/src/index.md	/^### Generating random values of custom types$/;"	S
Generating values for an `AbstractFloat` type	stdlib/Random/docs/src/index.md	/^#### Generating values for an `AbstractFloat` type$/;"	t
Generating values from a type	stdlib/Random/docs/src/index.md	/^#### Generating values from a type$/;"	t
Generator	base/generator.jl	/^Generator(::Type{T}, I1, I2, Is...) where {T} = Generator(a->T(a...), zip(I1, I2, Is...))$/;"	f
Generator	base/generator.jl	/^Generator(::Type{T}, iter::I) where {T,I} = Generator{I,Type{T}}(T, iter)$/;"	f
Generator	base/generator.jl	/^Generator(f, I1, I2, Is...) = Generator(a->f(a...), zip(I1, I2, Is...))$/;"	f
Generator	base/generator.jl	/^struct Generator{I,F}$/;"	f
Generator Expressions	doc/src/manual/arrays.md	/^## Generator Expressions$/;"	s
Generators (creation and seeding)	stdlib/Random/docs/src/index.md	/^## Generators (creation and seeding)$/;"	s
Generic	src/codegen_shared.h	/^    Generic = 0,$/;"	e	enum:AddressSpace
Generic Functions	doc/src/base/base.md	/^## Generic Functions$/;"	s
GenericArray	stdlib/Test/src/Test.jl	/^struct GenericArray{T,N} <: AbstractArray{T,N}$/;"	f
GenericCondition	base/condition.jl	/^    GenericCondition(l::AbstractLock) = new{typeof(l)}(InvasiveLinkedList{Task}(), l)$/;"	f
GenericCondition	base/condition.jl	/^struct GenericCondition{L<:AbstractLock}$/;"	f
GenericDict	stdlib/Random/test/runtests.jl	/^                   GenericDict(randdict)            => Pair{Int,Int},$/;"	f
GenericDict	stdlib/Test/src/Test.jl	/^struct GenericDict{K,V} <: AbstractDict{K,V}$/;"	f
GenericIOBuffer	base/iobuffer.jl	/^    function GenericIOBuffer{T}(data::T, readable::Bool, writable::Bool, seekable::Bool, append:/;"	f
GenericIOBuffer	base/iobuffer.jl	/^function GenericIOBuffer(data::T, readable::Bool, writable::Bool, seekable::Bool, append::Bool,$/;"	f
GenericIOBuffer	base/iobuffer.jl	/^mutable struct GenericIOBuffer{T<:AbstractVector{UInt8}} <: IO$/;"	f
GenericIterator	test/generic_map_tests.jl	/^mutable struct GenericIterator{N} end$/;"	f
GenericOrder	stdlib/Test/src/Test.jl	/^struct GenericOrder{T}$/;"	f
GenericSet	stdlib/Random/test/runtests.jl	/^                   GenericSet(randset)              => Int,$/;"	f
GenericSet	stdlib/Test/src/Test.jl	/^struct GenericSet{T} <: AbstractSet{T}$/;"	f
GenericString	stdlib/Random/test/runtests.jl	/^                   GenericString("qwèrtï")          => Char,$/;"	f
GenericString	stdlib/Test/src/Test.jl	/^struct GenericString <: AbstractString$/;"	f
GetLastError	base/libc.jl	/^    GetLastError() = ccall(:GetLastError, stdcall, UInt32, ())$/;"	f
GetLastError	base/libc.jl	/^function GetLastError end$/;"	f
GetPHIRefinements	src/llvm-late-gc-lowering.cpp	/^SmallVector<int, 1> LateLowerGCFrame::GetPHIRefinements(PHINode *Phi, State &S)$/;"	f	class:LateLowerGCFrame	typeref:typename:SmallVector<int,1>
GetPtrForNumber	src/llvm-late-gc-lowering.cpp	/^static Value *GetPtrForNumber(State &S, unsigned Num, Instruction *InsertionPoint)$/;"	f	typeref:typename:Value *	file:
Getting Around	doc/src/base/base.md	/^## Getting Around$/;"	s
Getting support for Julia	.github/SUPPORT.md	/^# Getting support for Julia$/;"	c
GhostStruct	test/intrinsics.jl	/^struct GhostStruct end$/;"	f
Ghosts	src/codegen.cpp	/^        Ghosts$/;"	e	enum:jl_returninfo_t::CallingConv	file:
Git Recommendations For Pull Requests	CONTRIBUTING.md	/^### Git Recommendations For Pull Requests$/;"	S
GitAnnotated	stdlib/LibGit2/src/merge.jl	/^function GitAnnotated(repo::GitRepo, comittish::AbstractString)$/;"	f
GitAnnotated	stdlib/LibGit2/src/merge.jl	/^function GitAnnotated(repo::GitRepo, commit_id::GitHash)$/;"	f
GitAnnotated	stdlib/LibGit2/src/merge.jl	/^function GitAnnotated(repo::GitRepo, fh::FetchHead)$/;"	f
GitAnnotated	stdlib/LibGit2/src/merge.jl	/^function GitAnnotated(repo::GitRepo, ref::GitReference)$/;"	f
GitBlame	stdlib/LibGit2/src/blame.jl	/^function GitBlame(repo::GitRepo, path::AbstractString; options::BlameOptions=BlameOptions())$/;"	f
GitBranchIter	stdlib/LibGit2/src/reference.jl	/^function GitBranchIter(repo::GitRepo, flags::Cint=Cint(Consts.BRANCH_LOCAL))$/;"	f
GitConfig	stdlib/LibGit2/src/config.jl	/^function GitConfig(level::Consts.GIT_CONFIG = Consts.CONFIG_LEVEL_DEFAULT)$/;"	f
GitConfig	stdlib/LibGit2/src/config.jl	/^function GitConfig(path::AbstractString,$/;"	f
GitConfig	stdlib/LibGit2/src/config.jl	/^function GitConfig(repo::GitRepo)$/;"	f
GitConfigIter	stdlib/LibGit2/src/config.jl	/^function GitConfigIter(cfg::GitConfig)$/;"	f
GitConfigIter	stdlib/LibGit2/src/config.jl	/^function GitConfigIter(cfg::GitConfig, name::AbstractString)$/;"	f
GitConfigIter	stdlib/LibGit2/src/config.jl	/^function GitConfigIter(cfg::GitConfig, name::AbstractString, value::Regex)$/;"	f
GitConfigIter	stdlib/LibGit2/src/config.jl	/^function GitConfigIter(cfg::GitConfig, name::Regex)$/;"	f
GitCredential	stdlib/LibGit2/src/gitcredential.jl	/^    function GitCredential($/;"	f
GitCredential	stdlib/LibGit2/src/gitcredential.jl	/^GitCredential(cred::UserPasswordCredential, url::AbstractString) = parse(GitCredential, url)$/;"	f
GitCredential	stdlib/LibGit2/src/gitcredential.jl	/^function GitCredential(cfg::GitConfig, url::AbstractString)$/;"	f
GitCredential	stdlib/LibGit2/src/gitcredential.jl	/^mutable struct GitCredential$/;"	f
GitCredentialHelper	stdlib/LibGit2/src/gitcredential.jl	/^struct GitCredentialHelper$/;"	f
GitDescribeResult	stdlib/LibGit2/src/repository.jl	/^function GitDescribeResult(commitish::GitObject;$/;"	f
GitDescribeResult	stdlib/LibGit2/src/repository.jl	/^function GitDescribeResult(repo::GitRepo; options::DescribeOptions=DescribeOptions())$/;"	f
GitDiffStats	stdlib/LibGit2/src/diff.jl	/^function GitDiffStats(diff::GitDiff)$/;"	f
GitError	stdlib/LibGit2/src/error.jl	/^function GitError(code::Integer)$/;"	f
GitError	stdlib/LibGit2/src/error.jl	/^struct GitError <: Exception$/;"	f
GitHash	stdlib/LibGit2/src/merge.jl	/^function GitHash(ann::GitAnnotated)$/;"	f
GitHash	stdlib/LibGit2/src/oid.jl	/^function GitHash(id::AbstractString)$/;"	f
GitHash	stdlib/LibGit2/src/oid.jl	/^function GitHash(id::Array{UInt8,1})$/;"	f
GitHash	stdlib/LibGit2/src/oid.jl	/^function GitHash(obj::GitObject)$/;"	f
GitHash	stdlib/LibGit2/src/oid.jl	/^function GitHash(ptr::Ptr{UInt8})$/;"	f
GitHash	stdlib/LibGit2/src/oid.jl	/^function GitHash(ref::GitReference)$/;"	f
GitHash	stdlib/LibGit2/src/oid.jl	/^function GitHash(repo::GitRepo, ref_name::AbstractString)$/;"	f
GitHash	stdlib/LibGit2/src/types.jl	/^    GitHash(val::NTuple{OID_RAWSZ, UInt8}) = new(val)$/;"	f
GitHash	stdlib/LibGit2/src/types.jl	/^GitHash() = GitHash(ntuple(i->zero(UInt8), OID_RAWSZ))$/;"	f
GitHash	stdlib/LibGit2/src/types.jl	/^GitHash(h::GitHash) = h$/;"	f
GitHash	stdlib/LibGit2/src/types.jl	/^struct GitHash <: AbstractGitHash$/;"	f
GitIndex	stdlib/LibGit2/src/index.jl	/^function GitIndex(repo::GitRepo)$/;"	f
GitObject	stdlib/LibGit2/src/tree.jl	/^function GitObject(e::GitTreeEntry) end$/;"	f
GitObject	stdlib/LibGit2/src/types.jl	/^abstract type GitObject <: AbstractGitObject end$/;"	f
GitObject	stdlib/LibGit2/src/types.jl	/^function GitObject(repo::GitRepo, ptr::Ptr{Cvoid})$/;"	f
GitRebase	stdlib/LibGit2/src/rebase.jl	/^function GitRebase(repo::GitRepo, branch::GitAnnotated, upstream::GitAnnotated;$/;"	f
GitReference	stdlib/LibGit2/src/reference.jl	/^function GitReference(repo::GitRepo, obj_oid::GitHash, refname::AbstractString = Consts.HEAD_FIL/;"	f
GitReference	stdlib/LibGit2/src/reference.jl	/^function GitReference(repo::GitRepo, refname::AbstractString)$/;"	f
GitRemote	stdlib/LibGit2/src/remote.jl	/^function GitRemote(repo::GitRepo, rmt_name::AbstractString, rmt_url::AbstractString)$/;"	f
GitRemote	stdlib/LibGit2/src/remote.jl	/^function GitRemote(repo::GitRepo, rmt_name::AbstractString, rmt_url::AbstractString, fetch_spec:/;"	f
GitRemoteAnon	stdlib/LibGit2/src/remote.jl	/^function GitRemoteAnon(repo::GitRepo, url::AbstractString)$/;"	f
GitRepo	stdlib/LibGit2/src/repository.jl	/^function GitRepo(path::AbstractString)$/;"	f
GitRepoExt	stdlib/LibGit2/src/repository.jl	/^function GitRepoExt(path::AbstractString, flags::Cuint = Cuint(Consts.REPOSITORY_OPEN_DEFAULT))$/;"	f
GitRevWalker	stdlib/LibGit2/src/walker.jl	/^function GitRevWalker(repo::GitRepo)$/;"	f
GitShortHash	stdlib/LibGit2/src/oid.jl	/^function GitShortHash(buf::Buffer)$/;"	f
GitShortHash	stdlib/LibGit2/src/oid.jl	/^function GitShortHash(id::AbstractString)$/;"	f
GitShortHash	stdlib/LibGit2/src/oid.jl	/^function GitShortHash(obj::GitObject)$/;"	f
GitShortHash	stdlib/LibGit2/src/types.jl	/^struct GitShortHash <: AbstractGitHash$/;"	f
GitSignature	stdlib/LibGit2/src/types.jl	/^    function GitSignature(ptr::Ptr{SignatureStruct})$/;"	f
GitSignature	stdlib/LibGit2/src/types.jl	/^mutable struct GitSignature <: AbstractGitObject$/;"	f
GitStatus	stdlib/LibGit2/src/status.jl	/^function GitStatus(repo::GitRepo; status_opts=StatusOptions())$/;"	f
Givens	stdlib/LinearAlgebra/src/givens.jl	/^struct Givens{T} <: AbstractRotation{T}$/;"	f
Global Scope	doc/src/manual/variables-and-scoping.md	/^## Global Scope$/;"	s
Global Variables	doc/src/manual/documentation.md	/^### Global Variables$/;"	S
Global variables	doc/src/manual/parallel-computing.md	/^## Global variables$/;"	s
GlobalDef18933	test/core.jl	/^module GlobalDef18933$/;"	f
GlobalOptions	stdlib/REPL/src/REPL.jl	/^const GlobalOptions = Options()$/;"	v
GlobalSymbolTable	src/jitlayers.h	/^    SymbolTableT GlobalSymbolTable;$/;"	m	class:JuliaOJIT	typeref:typename:SymbolTableT
Glossary	doc/src/devdocs/backtraces.md	/^## Glossary$/;"	s
GotoIfNot	base/compiler/ssair/ir.jl	/^    GotoIfNot(@nospecialize(cond), dest::Int) = new(cond, dest)$/;"	f
GotoIfNot	base/compiler/ssair/ir.jl	/^struct GotoIfNot$/;"	f
GotoMacroTest	test/goto.jl	/^module GotoMacroTest$/;"	f
Gr	test/vecelement.jl	/^struct Gr{N, T}$/;"	f
GraphemeIterator	base/strings/unicode.jl	/^struct GraphemeIterator{S<:AbstractString}$/;"	f
Grisu	base/grisu/grisu.jl	/^module Grisu$/;"	f
Group	deps/srccache/patchelf-0.9/patchelf.spec	/^Group: Development\/Tools$/;"	t
Group	deps/srccache/patchelf-0.9/patchelf.spec.in	/^Group: Development\/Tools$/;"	t
Group	src/llvm-multiversioning.cpp	/^        Group(int base, const jl_target_spec_t &spec) :$/;"	f	struct:__anond5683ea40111::CloneCtx::Group	file:
Group	src/llvm-multiversioning.cpp	/^    struct Group : Target {$/;"	s	struct:__anond5683ea40111::CloneCtx	file:
HALF_POW5_INV_SPLIT	base/ryu/utils.jl	/^const HALF_POW5_INV_SPLIT = map(i->pow5invsplit(Float16, i), 0:17)$/;"	v
HALF_POW5_SPLIT	base/ryu/utils.jl	/^const HALF_POW5_SPLIT = map(i->pow5split(Float16, i), 0:23)$/;"	v
HANDLE_MACH_ERROR	src/signals-mach.c	/^#define HANDLE_MACH_ERROR(/;"	d	file:
HANDLE_UNIONALL_A	src/subtype.c	/^#define HANDLE_UNIONALL_A /;"	d	file:
HANDLE_UNIONALL_B	src/subtype.c	/^#define HANDLE_UNIONALL_B /;"	d	file:
HAVE_HOUR	src/support/strptime.c	/^#define HAVE_HOUR(/;"	d	file:
HAVE_ITIMER	src/signals-unix.c	/^#define HAVE_ITIMER$/;"	d	file:
HAVE_KEVENT	src/signals-unix.c	/^#define HAVE_KEVENT$/;"	d	file:
HAVE_MACH	src/signals-unix.c	/^#define HAVE_MACH$/;"	d	file:
HAVE_MDAY	src/support/strptime.c	/^#define HAVE_MDAY(/;"	d	file:
HAVE_MON	src/support/strptime.c	/^#define HAVE_MON(/;"	d	file:
HAVE_TIMER	src/signals-unix.c	/^#define HAVE_TIMER$/;"	d	file:
HAVE_TIMING_SUPPORT	src/timing.h	/^#define HAVE_TIMING_SUPPORT$/;"	d
HAVE_WDAY	src/support/strptime.c	/^#define HAVE_WDAY(/;"	d	file:
HAVE_YDAY	src/support/strptime.c	/^#define HAVE_YDAY(/;"	d	file:
HAVE_YEAR	src/support/strptime.c	/^#define HAVE_YEAR(/;"	d	file:
HDR_COOKIE_LEN	stdlib/Distributed/src/cluster.jl	/^const HDR_COOKIE_LEN=16$/;"	v
HDR_VERSION_LEN	stdlib/Distributed/src/cluster.jl	/^const HDR_VERSION_LEN=16$/;"	v
HEADERS	src/Makefile	/^HEADERS := $(BUILDDIR)\/julia_version.h $(wildcard $(SRCDIR)\/support\/*.h) $(addprefix $(SRCDIR/;"	m
HEADERS	src/flisp/Makefile	/^HEADERS := $(wildcard *.h) $(LIBUV_INC)\/uv.h $(wildcard $(LLTDIR)\/*.h)$/;"	m
HEADERS	src/support/Makefile	/^HEADERS := $(wildcard *.h) $(LIBUV_INC)\/uv.h$/;"	m
HEADERS	ui/Makefile	/^HEADERS := $(addprefix $(JULIAHOME)\/src\/,julia.h julia_assert.h julia_threads.h julia_internal/;"	m
HEADER_TAG	stdlib/Serialization/src/Serialization.jl	/^const HEADER_TAG           = Int32(o0+15)$/;"	v
HEAD_FILE	stdlib/LibGit2/src/consts.jl	/^const HEAD_FILE  = "HEAD"$/;"	v
HEX_symbols	base/printf.jl	/^const HEX_symbols = b"0123456789ABCDEF"$/;"	v
HFPotential	test/subtype.jl	/^struct HFPotential{kind,T,B,RO<:HFPotentialOperator{T,B},P<:Integer} end$/;"	f
HIDENAME	src/support/ENTRY.amd64.h	/^#define HIDENAME(/;"	d
HIDENAME	src/support/ENTRY.i387.h	/^#define HIDENAME(/;"	d
HMAC_CTX	stdlib/SHA/src/hmac.jl	/^    function HMAC_CTX(ctx::CTX, key::Vector{UInt8}, blocksize::Integer=blocklen(CTX)) where CTX$/;"	f
HMAC_CTX	stdlib/SHA/src/hmac.jl	/^struct HMAC_CTX{CTX<:SHA_CTX}$/;"	f
HOME	stdlib/LibGit2/test/libgit2.jl	/^const HOME = Sys.iswindows() ? "USERPROFILE" : "HOME"  # Environment variable name for home$/;"	v
HOME_PROJECT	base/initdefs.jl	/^const HOME_PROJECT = Ref{Union{String,Nothing}}(nothing)$/;"	v
HOURSPERDAY	src/support/tzfile.h	/^#define HOURSPERDAY	/;"	d
HPOS	src/flisp/flisp.h	/^    int HPOS, VPOS;$/;"	m	struct:_fl_context_t	typeref:typename:int
HTIMPL_R	src/flisp/julia_extensions.c	/^HTIMPL_R(wcharhash, _hash_wchar_, _equal_wchar_)$/;"	f	file:
HTML	base/docs/utils.jl	/^function HTML(xs...)$/;"	f
HTML	base/docs/utils.jl	/^mutable struct HTML{T}$/;"	f
HTPROT	src/support/htable.h	/^#define HTPROT(/;"	d
HTPROT_R	src/support/htable.h	/^#define HTPROT_R(/;"	d
HT_NOTFOUND	src/support/htable.h	/^#define HT_NOTFOUND /;"	d
HT_N_INLINE	src/support/htable.h	/^#define HT_N_INLINE /;"	d
HUGE_VALF	src/rtutils.c	/^#define HUGE_VALF /;"	d	file:
HWNumber	base/intfuncs.jl	/^const HWNumber = Union{HWReal, Complex{<:HWReal}, Rational{<:HWReal}}$/;"	v
HWReal	base/intfuncs.jl	/^const HWReal = Union{Int8,Int16,Int32,Int64,UInt8,UInt16,UInt32,UInt64,Float32,Float64}$/;"	v
H_LARGE_X	base/special/hyperbolic.jl	/^H_LARGE_X(::Type{Float32}) = 88.72283f0$/;"	f
H_LARGE_X	base/special/hyperbolic.jl	/^H_LARGE_X(::Type{Float64}) = 709.7822265633563 # nextfloat(709.7822265633562)$/;"	f
H_MEDIUM_X	base/special/hyperbolic.jl	/^H_MEDIUM_X(::Type{Float32}) = 9f0$/;"	f
H_MEDIUM_X	base/special/hyperbolic.jl	/^H_MEDIUM_X(::Type{Float64}) = 22.0$/;"	f
H_OVERFLOW_X	base/special/hyperbolic.jl	/^H_OVERFLOW_X(::Type{Float32}) = 89.415985f0$/;"	f
H_OVERFLOW_X	base/special/hyperbolic.jl	/^H_OVERFLOW_X(::Type{Float64}) = 710.475860073944 # nextfloat(710.4758600739439)$/;"	f
H_SMALL_X	base/special/hyperbolic.jl	/^H_SMALL_X(::Type{Float32}) = 2f-12$/;"	f
H_SMALL_X	base/special/hyperbolic.jl	/^H_SMALL_X(::Type{Float64}) = 2.0^-28$/;"	f
Handle excess argument diversity in the caller	doc/src/manual/style-guide.md	/^## Handle excess argument diversity in the caller$/;"	s
Handle27770	test/core.jl	/^Handle27770() = Handle27770(Ptr{Cvoid}(UInt(0xfeedface)))$/;"	f
Handle27770	test/core.jl	/^mutable struct Handle27770$/;"	f
Handling Operating System Variation	doc/src/manual/handling-operating-system-variation.md	/^# Handling Operating System Variation$/;"	c
Hanoi5906	test/compiler/inference.jl	/^struct Hanoi5906{T} <: Outer5906{T}$/;"	f
HasAbstractNamedTuples	test/namedtuple.jl	/^mutable struct HasAbstractNamedTuples$/;"	f
HasAbstractlyTypedField	test/compiler/inference.jl	/^mutable struct HasAbstractlyTypedField$/;"	f
HasBitSet	src/llvm-late-gc-lowering.cpp	/^static bool HasBitSet(const BitVector &BV, unsigned Bit) {$/;"	f	typeref:typename:bool	file:
HasEltype	base/generator.jl	/^struct HasEltype <: IteratorEltype end$/;"	f
HasHasPadding	test/core.jl	/^struct HasHasPadding$/;"	f
HasLength	base/generator.jl	/^struct HasLength <: IteratorSize end$/;"	f
HasPadding	test/core.jl	/^struct HasPadding$/;"	f
HasPlain28102	test/core.jl	/^    HasPlain28102() = new()$/;"	f
HasPlain28102	test/core.jl	/^struct HasPlain28102$/;"	f
HasSafepoint	src/llvm-late-gc-lowering.cpp	/^    bool HasSafepoint = false;$/;"	m	struct:BBState	typeref:typename:bool	file:
HasShape	base/generator.jl	/^struct HasShape{N} <: IteratorSize end$/;"	f
HashCollision	test/arrayops.jl	/^struct HashCollision$/;"	f
HasmethodKwargs	test/reflection.jl	/^module HasmethodKwargs$/;"	f
Header	stdlib/Markdown/src/Common/block.jl	/^Header(s) = Header(s, 1)$/;"	f
Header	stdlib/Markdown/src/Common/block.jl	/^Header(s, level::Int) = Header{level}(s)$/;"	f
Header	stdlib/Markdown/src/Common/block.jl	/^mutable struct Header{level}$/;"	f
Headers	stdlib/Markdown/docs/src/index.md	/^### Headers$/;"	S
Help mode	stdlib/REPL/docs/src/index.md	/^### Help mode$/;"	S
Helpers	src/clangsa/GCChecker.cpp	/^namespace Helpers {$/;"	n	file:
Herd	test/vecelement.jl	/^struct Herd{N,T}$/;"	f
Hermitian	stdlib/LinearAlgebra/src/symmetric.jl	/^    function Hermitian{T,S}(data, uplo) where {T,S<:AbstractMatrix{<:T}}$/;"	f
Hermitian	stdlib/LinearAlgebra/src/symmetric.jl	/^function Hermitian(A::AbstractMatrix, uplo::Symbol=:U)$/;"	f
Hermitian	stdlib/LinearAlgebra/src/symmetric.jl	/^struct Hermitian{T,S<:AbstractMatrix{<:T}} <: AbstractMatrix{T}$/;"	f
Hermitian	stdlib/SuiteSparse/src/cholmod.jl	/^function Hermitian{Tv,SparseMatrixCSC{Tv,SuiteSparse_long}}(A::Sparse{Tv}) where Tv<:VTypes$/;"	f
Hessenberg	stdlib/LinearAlgebra/src/hessenberg.jl	/^Hessenberg(F::Hessenberg) = F$/;"	f
Hessenberg	stdlib/LinearAlgebra/src/hessenberg.jl	/^Hessenberg(F::Hessenberg, μ::Number) = Hessenberg(F.factors, F.τ, F.H, F.uplo; μ=μ)$/;"	f
Hessenberg	stdlib/LinearAlgebra/src/hessenberg.jl	/^Hessenberg(factors::AbstractMatrix, τ::AbstractVector, H::AbstractMatrix=UpperHessenberg(factor/;"	f
Hessenberg	stdlib/LinearAlgebra/src/hessenberg.jl	/^struct Hessenberg{T,SH<:AbstractMatrix,S<:AbstractMatrix,W<:AbstractVector,V<:Number} <: Factori/;"	f
HessenbergQ	stdlib/LinearAlgebra/src/hessenberg.jl	/^    function HessenbergQ{T,S,W,sym}(uplo::AbstractChar, factors, τ) where {T,S<:AbstractMatrix,/;"	f
HessenbergQ	stdlib/LinearAlgebra/src/hessenberg.jl	/^HessenbergQ(F::Hessenberg{<:Any,<:SymTridiagonal,S,W}) where {S,W} = HessenbergQ{eltype(F.factor/;"	f
HessenbergQ	stdlib/LinearAlgebra/src/hessenberg.jl	/^HessenbergQ(F::Hessenberg{<:Any,<:UpperHessenberg,S,W}) where {S,W} = HessenbergQ{eltype(F.facto/;"	f
HessenbergQ	stdlib/LinearAlgebra/src/hessenberg.jl	/^struct HessenbergQ{T,S<:AbstractMatrix,W<:AbstractVector,sym} <: AbstractQ{T}$/;"	f
HiddenBit	base/grisu/float.jl	/^HiddenBit(::Type{Float16}) = 0x0400$/;"	f
HiddenBit	base/grisu/float.jl	/^HiddenBit(::Type{Float32}) = 0x00800000$/;"	f
HiddenBit	base/grisu/float.jl	/^HiddenBit(::Type{Float64}) = 0x0010000000000000$/;"	f
High-Level Embedding	doc/src/manual/embedding.md	/^## High-Level Embedding$/;"	s
High-Level Embedding on Windows with Visual Studio	doc/src/manual/embedding.md	/^## High-Level Embedding on Windows with Visual Studio$/;"	s
High-level Overview of the Native-Code Generation Process	doc/src/devdocs/compiler.md	/^# High-level Overview of the Native-Code Generation Process$/;"	c
HigherOrderFns	stdlib/SparseArrays/src/higherorderfns.jl	/^module HigherOrderFns$/;"	f
HigherOrderFnsTests	stdlib/SparseArrays/test/higherorderfns.jl	/^module HigherOrderFnsTests$/;"	f
HistoryPrompt	stdlib/REPL/src/LineEdit.jl	/^    HistoryPrompt(hp) = new(hp, EmptyCompletionProvider())$/;"	f
HistoryPrompt	stdlib/REPL/src/LineEdit.jl	/^mutable struct HistoryPrompt <: TextInterface$/;"	f
HistoryProvider	stdlib/REPL/src/LineEdit.jl	/^abstract type HistoryProvider end$/;"	f
HistoryTable	src/stackwalk.c	/^static UNWIND_HISTORY_TABLE HistoryTable;$/;"	v	typeref:typename:UNWIND_HISTORY_TABLE	file:
HistoryTable	src/stackwalk.c	/^} HistoryTable;$/;"	v	typeref:struct:__anon8a94e5d20108
Hold up: why macros?	doc/src/manual/metaprogramming.md	/^### Hold up: why macros?$/;"	S
Hooking into the `Random` API	stdlib/Random/docs/src/index.md	/^## Hooking into the `Random` API$/;"	s
HorizontalRule	stdlib/Markdown/src/Common/block.jl	/^mutable struct HorizontalRule$/;"	f
How can I modify the declaration of a type in my session?	doc/src/manual/faq.md	/^### How can I modify the declaration of a type in my session?$/;"	S
How do I catch CTRL-C in a script?	doc/src/manual/faq.md	/^### How do I catch CTRL-C in a script?$/;"	S
How do I check if the current file is being run as the main script?	doc/src/manual/faq.md	/^### How do I check if the current file is being run as the main script?$/;"	S
How do I delete an object in memory?	doc/src/manual/faq.md	/^### How do I delete an object in memory?$/;"	S
How do I pass options to `julia` using `#!/usr/bin/env`?	doc/src/manual/faq.md	/^### How do I pass options to `julia` using `#!\/usr\/bin\/env`?$/;"	S
How inference works	doc/src/devdocs/inference.md	/^## How inference works$/;"	s
How to file a bug report	CONTRIBUTING.md	/^## How to file a bug report$/;"	s
Hull4141	test/core.jl	/^mutable struct Hull4141{F<:Face4141}; end$/;"	f
Hygiene	doc/src/manual/metaprogramming.md	/^### Hygiene$/;"	S
I	stdlib/LinearAlgebra/src/uniformscaling.jl	/^const I = UniformScaling(true)$/;"	v
I	test/offsetarray.jl	/^I = findall(!iszero, z)$/;"	v
I passed an argument `x` to a function, modified it inside that function, but on the outside, the variable `x` is still unchanged. Why?	doc/src/manual/faq.md	/^### I passed an argument `x` to a function, modified it inside that function, but on the outside/;"	S
I/O and Network	doc/src/base/io-network.md	/^# I\/O and Network$/;"	c
I11798	test/docs.jl	/^module I11798$/;"	f
I12515	test/docs.jl	/^module I12515$/;"	f
I13068	test/docs.jl	/^module I13068$/;"	f
I13229	stdlib/Profile/test/runtests.jl	/^module I13229$/;"	f
I13385	test/docs.jl	/^struct I13385$/;"	f
I13636	test/core.jl	/^module I13636$/;"	f
I13636.foo	test/core.jl	/^    function I13636.foo(y::Int;k::Int=1)$/;"	f
I1438T	test/dict.jl	/^mutable struct I1438T$/;"	f
I15424	test/docs.jl	/^module I15424$/;"	f
I16	test/misc.jl	/^I16 = [$/;"	v
I1628	test/compiler/inference.jl	/^mutable struct I1628{X}$/;"	f
I21016	test/docs.jl	/^module I21016$/;"	f
I22105	test/docs.jl	/^module I22105$/;"	f
I24002	test/arrayops.jl	/^module I24002$/;"	f
I2619	test/core.jl	/^mutable struct I2619{T}$/;"	f
I26729	test/compiler/inference.jl	/^module I26729$/;"	f
I31663	test/compiler/inference.jl	/^module I31663$/;"	f
I31703	test/subtype.jl	/^module I31703$/;"	f
I8	test/misc.jl	/^I8 = [(s,map(UInt16,s)) for s in X8]$/;"	v
I8978	test/core.jl	/^module I8978$/;"	f
I9475	test/core.jl	/^module I9475$/;"	f
I::UniformScaling	stdlib/LinearAlgebra/src/uniformscaling.jl	/^(I::UniformScaling)(n::Integer) = Diagonal(fill(I.λ, n))$/;"	f
ID	deps/srccache/patchelf-0.9/Makefile.in	/^ID: $(am__tagged_files)$/;"	t
ID	deps/srccache/patchelf-0.9/src/Makefile.in	/^ID: $(am__tagged_files)$/;"	t
ID	deps/srccache/patchelf-0.9/tests/Makefile.in	/^ID: $(am__tagged_files)$/;"	t
ID	src/jitlayers.cpp	/^    static char ID;$/;"	m	class:JuliaPipeline	typeref:typename:char	file:
ID	src/jitlayers.cpp	/^template<> char JuliaPipeline<0>::ID = 0;$/;"	m	class:JuliaPipeline<0>	typeref:typename:char
ID	src/jitlayers.cpp	/^template<> char JuliaPipeline<2>::ID = 0;$/;"	m	class:JuliaPipeline<2>	typeref:typename:char
ID	src/jitlayers.cpp	/^template<> char JuliaPipeline<3>::ID = 0;$/;"	m	class:JuliaPipeline<3>	typeref:typename:char
ID	src/llvm-alloc-opt.cpp	/^    static char ID;$/;"	m	struct:__anon0a1571000111::AllocOpt	typeref:typename:char	file:
ID	src/llvm-alloc-opt.cpp	/^char AllocOpt::ID = 0;$/;"	m	class:__anon0a1571000111::AllocOpt	typeref:typename:char
ID	src/llvm-final-gc-lowering.cpp	/^    static char ID;$/;"	m	struct:FinalLowerGC	typeref:typename:char	file:
ID	src/llvm-final-gc-lowering.cpp	/^char FinalLowerGC::ID = 0;$/;"	m	class:FinalLowerGC	typeref:typename:char
ID	src/llvm-gc-invariant-verifier.cpp	/^    static char ID;$/;"	m	struct:GCInvariantVerifier	typeref:typename:char	file:
ID	src/llvm-gc-invariant-verifier.cpp	/^char GCInvariantVerifier::ID = 0;$/;"	m	class:GCInvariantVerifier	typeref:typename:char
ID	src/llvm-late-gc-lowering.cpp	/^    static char ID;$/;"	m	struct:LateLowerGCFrame	typeref:typename:char	file:
ID	src/llvm-late-gc-lowering.cpp	/^char LateLowerGCFrame::ID = 0;$/;"	m	class:LateLowerGCFrame	typeref:typename:char
ID	src/llvm-lower-handlers.cpp	/^    static char ID;$/;"	m	struct:LowerExcHandlers	typeref:typename:char	file:
ID	src/llvm-lower-handlers.cpp	/^char LowerExcHandlers::ID = 0;$/;"	m	class:LowerExcHandlers	typeref:typename:char
ID	src/llvm-muladd.cpp	/^    static char ID;$/;"	m	struct:CombineMulAdd	typeref:typename:char	file:
ID	src/llvm-muladd.cpp	/^char CombineMulAdd::ID = 0;$/;"	m	class:CombineMulAdd	typeref:typename:char
ID	src/llvm-multiversioning.cpp	/^    static char ID;$/;"	m	struct:__anond5683ea40111::MultiVersioning	typeref:typename:char	file:
ID	src/llvm-multiversioning.cpp	/^char MultiVersioning::ID = 0;$/;"	m	class:__anond5683ea40111::MultiVersioning	typeref:typename:char
ID	src/llvm-propagate-addrspaces.cpp	/^    static char ID;$/;"	m	struct:PropagateJuliaAddrspaces	typeref:typename:char	file:
ID	src/llvm-propagate-addrspaces.cpp	/^char PropagateJuliaAddrspaces::ID = 0;$/;"	m	class:PropagateJuliaAddrspaces	typeref:typename:char
ID	src/llvm-ptls.cpp	/^    static char ID;$/;"	m	struct:__anonf46923380111::LowerPTLS	typeref:typename:char	file:
ID	src/llvm-ptls.cpp	/^char LowerPTLS::ID = 0;$/;"	m	class:__anonf46923380111::LowerPTLS	typeref:typename:char
ID	src/llvm-simdloop.cpp	/^    static char ID;$/;"	m	struct:llvm::LowerSIMDLoop	typeref:typename:char	file:
ID	src/llvm-simdloop.cpp	/^char LowerSIMDLoop::ID = 0;$/;"	m	class:llvm::LowerSIMDLoop	typeref:typename:char
IDEDidComputeMac32BitWarning	contrib/mac/frameworkapp/JuliaLauncher.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist	/^	<key>IDEDidComputeMac32BitWarning<\/key>$/;"	k
IDXENTRY_ADDED	stdlib/LibGit2/src/consts.jl	/^const IDXENTRY_ADDED             = Cint(1 << 3)$/;"	v
IDXENTRY_CONFLICTED	stdlib/LibGit2/src/consts.jl	/^const IDXENTRY_CONFLICTED        = Cint(1 << 7)$/;"	v
IDXENTRY_EXTENDED	stdlib/LibGit2/src/consts.jl	/^const IDXENTRY_EXTENDED   = (0x4000)$/;"	v
IDXENTRY_HASHED	stdlib/LibGit2/src/consts.jl	/^const IDXENTRY_HASHED            = Cint(1 << 4)$/;"	v
IDXENTRY_NAMEMASK	stdlib/LibGit2/src/consts.jl	/^const IDXENTRY_NAMEMASK   = (0x0fff)$/;"	v
IDXENTRY_NEW_SKIP_WORKTREE	stdlib/LibGit2/src/consts.jl	/^const IDXENTRY_NEW_SKIP_WORKTREE = Cint(1 << 9)$/;"	v
IDXENTRY_REMOVE	stdlib/LibGit2/src/consts.jl	/^const IDXENTRY_REMOVE            = Cint(1 << 1)$/;"	v
IDXENTRY_STAGEMASK	stdlib/LibGit2/src/consts.jl	/^const IDXENTRY_STAGEMASK  = (0x3000)$/;"	v
IDXENTRY_STAGESHIFT	stdlib/LibGit2/src/consts.jl	/^const IDXENTRY_STAGESHIFT = Cint(12)$/;"	v
IDXENTRY_UNHASHED	stdlib/LibGit2/src/consts.jl	/^const IDXENTRY_UNHASHED          = Cint(1 << 5)$/;"	v
IDXENTRY_UNPACKED	stdlib/LibGit2/src/consts.jl	/^const IDXENTRY_UNPACKED          = Cint(1 << 8)$/;"	v
IDXENTRY_UPDATE	stdlib/LibGit2/src/consts.jl	/^const IDXENTRY_UPDATE            = Cint(1 << 0)$/;"	v
IDXENTRY_UPTODATE	stdlib/LibGit2/src/consts.jl	/^const IDXENTRY_UPTODATE          = Cint(1 << 2)$/;"	v
IDXENTRY_VALID	stdlib/LibGit2/src/consts.jl	/^const IDXENTRY_VALID      = (0x8000)$/;"	v
IDXENTRY_WT_REMOVE	stdlib/LibGit2/src/consts.jl	/^const IDXENTRY_WT_REMOVE         = Cint(1 << 6)$/;"	v
IEEEFloat	base/float.jl	/^const IEEEFloat = Union{Float16, Float32, Float64}$/;"	v
IF	src/flisp/flisp.h	/^    value_t LAMBDA, IF, TRYCATCH;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
II8978	test/core.jl	/^module II8978$/;"	f
INCLUDE_STATE	base/Base.jl	/^INCLUDE_STATE = 1 # include = Core.include$/;"	v
INCLUDE_STATE	base/Base.jl	/^INCLUDE_STATE = 2 # include = _include (from lines above)$/;"	v
INCLUDE_STATE	base/Base.jl	/^INCLUDE_STATE = 3 # include = include_relative$/;"	v
INDEXCAP_FROM_OWNER	stdlib/LibGit2/src/consts.jl	/^const INDEXCAP_FROM_OWNER  = ~Cuint(0)$/;"	v
INDEXCAP_IGNORE_CASE	stdlib/LibGit2/src/consts.jl	/^const INDEXCAP_IGNORE_CASE = Cuint(1)$/;"	v
INDEXCAP_NO_FILEMODE	stdlib/LibGit2/src/consts.jl	/^const INDEXCAP_NO_FILEMODE = Cuint(2)$/;"	v
INDEXCAP_NO_SYMLINKS	stdlib/LibGit2/src/consts.jl	/^const INDEXCAP_NO_SYMLINKS = Cuint(4)$/;"	v
INDEX_ADD_CHECK_PATHSPEC	stdlib/LibGit2/src/consts.jl	/^const INDEX_ADD_CHECK_PATHSPEC         = Cuint(1 << 2)$/;"	v
INDEX_ADD_DEFAULT	stdlib/LibGit2/src/consts.jl	/^const INDEX_ADD_DEFAULT                = Cuint(0)$/;"	v
INDEX_ADD_DISABLE_PATHSPEC_MATCH	stdlib/LibGit2/src/consts.jl	/^const INDEX_ADD_DISABLE_PATHSPEC_MATCH = Cuint(1 << 1)$/;"	v
INDEX_ADD_FORCE	stdlib/LibGit2/src/consts.jl	/^const INDEX_ADD_FORCE                  = Cuint(1 << 0)$/;"	v
INDEX_STAGE_ANY	stdlib/LibGit2/src/consts.jl	/^const INDEX_STAGE_ANY = Cint(-1)$/;"	v
INIT_CACHE_SIZE	src/typemap.c	/^#define INIT_CACHE_SIZE /;"	d	file:
INIT_SZ	src/support/asprintf.c	/^#define INIT_SZ /;"	d	file:
INSTALL	deps/srccache/patchelf-0.9/Makefile.in	/^INSTALL = @INSTALL@$/;"	m
INSTALL	deps/srccache/patchelf-0.9/src/Makefile.in	/^INSTALL = @INSTALL@$/;"	m
INSTALL	deps/srccache/patchelf-0.9/tests/Makefile.in	/^INSTALL = @INSTALL@$/;"	m
INSTALL_DATA	deps/srccache/patchelf-0.9/Makefile.in	/^INSTALL_DATA = @INSTALL_DATA@$/;"	m
INSTALL_DATA	deps/srccache/patchelf-0.9/src/Makefile.in	/^INSTALL_DATA = @INSTALL_DATA@$/;"	m
INSTALL_DATA	deps/srccache/patchelf-0.9/tests/Makefile.in	/^INSTALL_DATA = @INSTALL_DATA@$/;"	m
INSTALL_HEADER	deps/srccache/patchelf-0.9/Makefile.in	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	deps/srccache/patchelf-0.9/src/Makefile.in	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	deps/srccache/patchelf-0.9/tests/Makefile.in	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PROGRAM	deps/srccache/patchelf-0.9/Makefile.in	/^INSTALL_PROGRAM = @INSTALL_PROGRAM@$/;"	m
INSTALL_PROGRAM	deps/srccache/patchelf-0.9/src/Makefile.in	/^INSTALL_PROGRAM = @INSTALL_PROGRAM@$/;"	m
INSTALL_PROGRAM	deps/srccache/patchelf-0.9/tests/Makefile.in	/^INSTALL_PROGRAM = @INSTALL_PROGRAM@$/;"	m
INSTALL_SCRIPT	deps/srccache/patchelf-0.9/Makefile.in	/^INSTALL_SCRIPT = @INSTALL_SCRIPT@$/;"	m
INSTALL_SCRIPT	deps/srccache/patchelf-0.9/src/Makefile.in	/^INSTALL_SCRIPT = @INSTALL_SCRIPT@$/;"	m
INSTALL_SCRIPT	deps/srccache/patchelf-0.9/tests/Makefile.in	/^INSTALL_SCRIPT = @INSTALL_SCRIPT@$/;"	m
INSTALL_STRIP_PROGRAM	deps/srccache/patchelf-0.9/Makefile.in	/^INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@$/;"	m
INSTALL_STRIP_PROGRAM	deps/srccache/patchelf-0.9/src/Makefile.in	/^INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@$/;"	m
INSTALL_STRIP_PROGRAM	deps/srccache/patchelf-0.9/tests/Makefile.in	/^INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@$/;"	m
INT	stdlib/SuiteSparse/src/cholmod_h.jl	/^const INT     = Int32(0)  # all integer arrays are int$/;"	v
INT32_TAG	stdlib/Serialization/src/Serialization.jl	/^const INT32_TAG = sertag(Int32)$/;"	v
INT64_TAG	stdlib/Serialization/src/Serialization.jl	/^const INT64_TAG = sertag(Int64)$/;"	v
INT8_TAG	stdlib/Serialization/src/Serialization.jl	/^const INT8_TAG = sertag(Int8)$/;"	v
INTLONG	stdlib/SuiteSparse/src/cholmod_h.jl	/^const INTLONG = Int32(1)  # most are int, some are SuiteSparse_long$/;"	v
INTRINSICS	src/intrinsics.h	/^    INTRINSICS$/;"	e	enum:intrinsic
INTRINSICS	src/intrinsics.h	/^#define INTRINSICS /;"	d
INTT	src/intrinsics.cpp	/^static Type *INTT(Type *t)$/;"	f	typeref:typename:Type *	file:
INT_INF	base/compiler/tfuncs.jl	/^const INT_INF = typemax(Int) # integer infinity$/;"	v
INVALID_CALL_ARG	base/compiler/validation.jl	/^const INVALID_CALL_ARG = "invalid :call argument"$/;"	v
INVALID_EXPR_HEAD	base/compiler/validation.jl	/^const INVALID_EXPR_HEAD = "invalid expression head"$/;"	v
INVALID_EXPR_NARGS	base/compiler/validation.jl	/^const INVALID_EXPR_NARGS = "invalid number of expression args"$/;"	v
INVALID_LVALUE	base/compiler/validation.jl	/^const INVALID_LVALUE = "invalid LHS value"$/;"	v
INVALID_RETURN	base/compiler/validation.jl	/^const INVALID_RETURN = "invalid argument to :return"$/;"	v
INVALID_RVALUE	base/compiler/validation.jl	/^const INVALID_RVALUE = "invalid RHS value"$/;"	v
INV_2PI	base/special/rem_pio2.jl	/^const INV_2PI = UInt64[$/;"	v
IO	base/boot.jl	/^abstract type IO end$/;"	f
IO Output Contextual Properties	doc/src/manual/networking-and-streams.md	/^## IO Output Contextual Properties$/;"	s
IO13433	test/core.jl	/^mutable struct IO13433 <: IO end$/;"	f
IOBuffer	base/iobuffer.jl	/^const IOBuffer = GenericIOBuffer{Vector{UInt8}}$/;"	v
IOBuffer	base/iobuffer.jl	/^function IOBuffer($/;"	f
IOBuffer	base/iobuffer.jl	/^function IOBuffer(;$/;"	f
IOBuffer	base/strings/io.jl	/^IOBuffer(s::SubString{String}) = IOBuffer(view(unsafe_wrap(Vector{UInt8}, s.string), s.offset + /;"	f
IOBuffer	base/strings/io.jl	/^IOBuffer(str::String) = IOBuffer(unsafe_wrap(Vector{UInt8}, str))$/;"	f
IOContext	base/compiler/ssair/show.jl	/^IOContext(io::IO, KV::Pair) = IOContext(io, Base.Pair(KV[1], KV[2]))$/;"	f
IOContext	base/show.jl	/^    function IOContext{IO_t}(io::IO_t, dict::ImmutableDict{Symbol, Any}) where IO_t<:IO$/;"	f
IOContext	base/show.jl	/^IOContext(io::IO) = convert(IOContext, io)$/;"	f
IOContext	base/show.jl	/^IOContext(io::IO, KV::Pair, KVs::Pair...) = IOContext(IOContext(io, KV), KVs...)$/;"	f
IOContext	base/show.jl	/^IOContext(io::IO, context::IO) = IOContext(unwrapcontext(io)[1], unwrapcontext(context)[2])$/;"	f
IOContext	base/show.jl	/^function IOContext(io::IO, KV::Pair)$/;"	f
IOContext	base/show.jl	/^function IOContext(io::IO, dict::ImmutableDict)$/;"	f
IOContext	base/show.jl	/^struct IOContext{IO_t <: IO} <: AbstractPipe$/;"	f
IOError	base/libuv.jl	/^    IOError(msg::AbstractString, code::Integer) = new(msg, code)$/;"	f
IOError	base/libuv.jl	/^struct IOError <: Exception$/;"	f
IOError	src/flisp/flisp.h	/^    value_t IOError, ParseError, TypeError, ArgError, UnboundError, KeyError;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
IOS_BUFSIZE	src/support/ios.h	/^#define IOS_BUFSIZE /;"	d
IOS_EOF	src/support/ios.h	/^#define IOS_EOF /;"	d
IOS_INLSIZE	src/support/ios.h	/^#define IOS_INLSIZE /;"	d
IOServer	base/stream.jl	/^abstract type IOServer end$/;"	f
IOStream	base/iostream.jl	/^    IOStream(name::AbstractString, buf::Array{UInt8,1}) = new(pointer(buf), buf, name, -1, Reent/;"	f
IOStream	base/iostream.jl	/^IOStream(name::AbstractString) = IOStream(name, true)$/;"	f
IOStream	base/iostream.jl	/^function IOStream(name::AbstractString, finalize::Bool)$/;"	f
IOStream	base/iostream.jl	/^mutable struct IOStream <: IO$/;"	f
IOTests	stdlib/Dates/test/io.jl	/^module IOTests$/;"	f
IPAddr	stdlib/Sockets/src/IPAddr.jl	/^abstract type IPAddr end$/;"	f
IPv4	stdlib/Sockets/src/IPAddr.jl	/^    IPv4(a::UInt8,b::UInt8,c::UInt8,d::UInt8) = new(UInt32(a)<<24|$/;"	f
IPv4	stdlib/Sockets/src/IPAddr.jl	/^    IPv4(host::UInt32) = new(host)$/;"	f
IPv4	stdlib/Sockets/src/IPAddr.jl	/^    function IPv4(a::Integer,b::Integer,c::Integer,d::Integer)$/;"	f
IPv4	stdlib/Sockets/src/IPAddr.jl	/^IPv4(str::AbstractString) = parse(IPv4, str)$/;"	f
IPv4	stdlib/Sockets/src/IPAddr.jl	/^function IPv4(host::Integer)$/;"	f
IPv4	stdlib/Sockets/src/IPAddr.jl	/^struct IPv4 <: IPAddr$/;"	f
IPv6	stdlib/Sockets/src/IPAddr.jl	/^    IPv6(host::UInt128) = new(host)$/;"	f
IPv6	stdlib/Sockets/src/IPAddr.jl	/^    function IPv6(a::Integer,b::Integer,c::Integer,d::Integer,$/;"	f
IPv6	stdlib/Sockets/src/IPAddr.jl	/^IPv6(str::AbstractString) = parse(IPv6, str)$/;"	f
IPv6	stdlib/Sockets/src/IPAddr.jl	/^function IPv6(host::Integer)$/;"	f
IPv6	stdlib/Sockets/src/IPAddr.jl	/^struct IPv6 <: IPAddr$/;"	f
IR	base/boot.jl	/^module IR$/;"	f
IRCode	base/compiler/ssair/ir.jl	/^    function IRCode(ir::IRCode, stmts::Vector{Any}, types::Vector{Any}, lines::Vector{Int32}, fl/;"	f
IRCode	base/compiler/ssair/ir.jl	/^    function IRCode(stmts::Vector{Any}, types::Vector{Any}, lines::Vector{Int32}, flags::Vector{/;"	f
IRCode	base/compiler/ssair/ir.jl	/^struct IRCode$/;"	f
IRShow	base/show.jl	/^module IRShow$/;"	f
IR_FLAG_INBOUNDS	base/compiler/optimize.jl	/^const IR_FLAG_INBOUNDS = 0x01$/;"	v
ISDAYOFWEEK	stdlib/Dates/src/adjusters.jl	/^ISDAYOFWEEK = Dict(Mon => DateFunction(ismonday, Date(0)),$/;"	v
ISOCalendar	stdlib/Dates/src/types.jl	/^struct ISOCalendar <: Calendar end$/;"	f
ISODateFormat	stdlib/Dates/src/io.jl	/^const ISODateFormat = DateFormat("yyyy-mm-dd")$/;"	v
ISODateTimeFormat	stdlib/Dates/src/io.jl	/^const ISODateTimeFormat = DateFormat("yyyy-mm-dd\\\\THH:MM:SS.s")$/;"	v
ISONE_CUTOFF	stdlib/LinearAlgebra/src/dense.jl	/^const ISONE_CUTOFF = 2^21 # 2M$/;"	v
ISOTimeFormat	stdlib/Dates/src/io.jl	/^const ISOTimeFormat = DateFormat("HH:MM:SS.s")$/;"	v
IT	test/docs.jl	/^struct IT$/;"	f
IT4805	test/core.jl	/^abstract type IT4805{N, T} end$/;"	f
IT4805_2	test/subtype.jl	/^abstract type IT4805_2{N, T} end$/;"	f
I_REPLACE_SONAME_FNNAME_ZU	deps/valgrind/valgrind.h	/^#define I_REPLACE_SONAME_FNNAME_ZU(/;"	d
I_REPLACE_SONAME_FNNAME_ZZ	deps/valgrind/valgrind.h	/^#define I_REPLACE_SONAME_FNNAME_ZZ(/;"	d
I_WRAP_SONAME_FNNAME_ZU	deps/valgrind/valgrind.h	/^#define I_WRAP_SONAME_FNNAME_ZU(/;"	d
I_WRAP_SONAME_FNNAME_ZZ	deps/valgrind/valgrind.h	/^#define I_WRAP_SONAME_FNNAME_ZZ(/;"	d
IdDict	base/abstractdict.jl	/^    function IdDict{K,V}(itr) where {K, V}$/;"	f
IdDict	base/abstractdict.jl	/^    function IdDict{K,V}(pairs::Pair...) where {K, V}$/;"	f
IdDict	base/abstractdict.jl	/^IdDict() = IdDict{Any,Any}()$/;"	f
IdDict	base/abstractdict.jl	/^IdDict(kv::Tuple{}) = IdDict()$/;"	f
IdDict	base/abstractdict.jl	/^IdDict(ps::(Pair{K,V} where K)...) where {V}   = IdDict{Any,V}(ps)$/;"	f
IdDict	base/abstractdict.jl	/^IdDict(ps::Pair...)                            = IdDict{Any,Any}(ps)$/;"	f
IdDict	base/abstractdict.jl	/^IdDict(ps::Pair{K,V}...)           where {K,V} = IdDict{K,V}(ps)$/;"	f
IdDict	base/abstractdict.jl	/^IdDict(ps::Pair{K}...)             where {K}   = IdDict{K,Any}(ps)$/;"	f
IdDict	base/abstractdict.jl	/^function IdDict(kv)$/;"	f
IdDict	base/abstractdict.jl	/^mutable struct IdDict{K,V} <: AbstractDict{K,V}$/;"	f
IdSet	base/abstractdict.jl	/^IdSet() = IdSet{Any}()$/;"	f
IdSet	base/abstractdict.jl	/^mutable struct IdSet{T} <: AbstractSet{T}$/;"	f
IdentifySocketAckMsg	stdlib/Distributed/src/messages.jl	/^struct IdentifySocketAckMsg <: AbstractMsg$/;"	f
IdentifySocketMsg	stdlib/Distributed/src/messages.jl	/^struct IdentifySocketMsg <: AbstractMsg$/;"	f
IdentityTestKV	test/ccall.jl	/^mutable struct IdentityTestKV{K, V}$/;"	f
IdentityUnitRange	base/indices.jl	/^IdentityUnitRange(S::IdentityUnitRange) = S$/;"	f
IdentityUnitRange	base/indices.jl	/^struct IdentityUnitRange{T<:AbstractUnitRange} <: AbstractUnitRange{Int}$/;"	f
Ignored	stdlib/Test/src/logging.jl	/^struct Ignored ; end$/;"	f
Image	stdlib/Markdown/src/Common/inline.jl	/^mutable struct Image$/;"	f
ImageBase	src/stackwalk.c	/^    DWORD64 ImageBase;$/;"	m	struct:__anon8a94e5d20108	typeref:typename:DWORD64	file:
Immutable;	test/copy.jl	/^    struct Immutable; x::Int; end$/;"	f
ImmutableDict	base/dict.jl	/^ImmutableDict(KV::Pair{K,V}) where {K,V} = ImmutableDict{K,V}(KV[1], KV[2])$/;"	f
ImmutableDict	base/dict.jl	/^ImmutableDict(t::ImmutableDict{K,V}, KV::Pair) where {K,V} = ImmutableDict{K,V}(t, KV[1], KV[2])$/;"	f
ImmutableDict	base/dict.jl	/^struct ImmutableDict{K,V} <: AbstractDict{K,V}$/;"	f
ImmutableTestArray	test/subarray.jl	/^    struct ImmutableTestArray{T, N} <: Base.DenseArray{T, N}$/;"	f
Implementation	doc/src/manual/arrays.md	/^## Implementation$/;"	s
Implementation overview	doc/src/devdocs/sysimg.md	/^### Implementation overview$/;"	S
ImportIntrinsics15819	stdlib/InteractiveUtils/test/runtests.jl	/^module ImportIntrinsics15819$/;"	f
Imports and such	doc/src/devdocs/ast.md	/^### Imports and such$/;"	S
Improving LLVM optimizations for Julia	doc/src/devdocs/llvm.md	/^## Improving LLVM optimizations for Julia$/;"	s
Improving documentation	CONTRIBUTING.md	/^### Improving documentation$/;"	S
Incomplete Initialization	doc/src/manual/constructors.md	/^## Incomplete Initialization$/;"	s
IncrementalCompact	base/compiler/ssair/ir.jl	/^    function IncrementalCompact(code::IRCode, allow_cfg_transforms::Bool=false)$/;"	f
IncrementalCompact	base/compiler/ssair/ir.jl	/^    function IncrementalCompact(parent::IncrementalCompact, code::IRCode, result_offset)$/;"	f
IncrementalCompact	base/compiler/ssair/ir.jl	/^mutable struct IncrementalCompact$/;"	f
Index replacement	doc/src/devdocs/subarrays.md	/^## Index replacement$/;"	s
Index translation	doc/src/devdocs/subarrays.md	/^### Index translation$/;"	S
IndexCartesian	base/indices.jl	/^struct IndexCartesian <: IndexStyle end$/;"	f
IndexEntry	stdlib/LibGit2/src/types.jl	/^struct IndexEntry$/;"	f
IndexLinear	base/indices.jl	/^struct IndexLinear <: IndexStyle end$/;"	f
IndexStyle	base/bitarray.jl	/^IndexStyle(::Type{<:BitArray}) = IndexLinear()$/;"	f
IndexStyle	base/indices.jl	/^IndexStyle(::IndexLinear, ::IndexLinear) = IndexLinear()$/;"	f
IndexStyle	base/indices.jl	/^IndexStyle(::IndexStyle, ::IndexStyle) = IndexCartesian()$/;"	f
IndexStyle	base/indices.jl	/^IndexStyle(::Type{<:AbstractArray}) = IndexCartesian()$/;"	f
IndexStyle	base/indices.jl	/^IndexStyle(::Type{<:AbstractRange}) = IndexLinear()$/;"	f
IndexStyle	base/indices.jl	/^IndexStyle(::Type{<:Array}) = IndexLinear()$/;"	f
IndexStyle	base/indices.jl	/^IndexStyle(::Type{<:LinearIndices}) = IndexLinear()$/;"	f
IndexStyle	base/indices.jl	/^IndexStyle(::Type{Union{}}) = IndexLinear()$/;"	f
IndexStyle	base/indices.jl	/^IndexStyle(A::AbstractArray) = IndexStyle(typeof(A))$/;"	f
IndexStyle	base/indices.jl	/^IndexStyle(A::AbstractArray, B::AbstractArray) = IndexStyle(IndexStyle(A), IndexStyle(B))$/;"	f
IndexStyle	base/indices.jl	/^IndexStyle(A::AbstractArray, B::AbstractArray...) = IndexStyle(IndexStyle(A), IndexStyle(B...))$/;"	f
IndexStyle	base/indices.jl	/^abstract type IndexStyle end$/;"	f
IndexStyle	base/missing.jl	/^IndexStyle(::Type{<:SkipMissing{T}}) where {T} = IndexStyle(T)$/;"	f
IndexStyle	base/reinterpretarray.jl	/^IndexStyle(a::ReinterpretArray) = IndexStyle(a.parent)$/;"	f
IndexStyle	base/reshapedarray.jl	/^IndexStyle(::Type{<:ReshapedArrayLF}) = IndexLinear()$/;"	f
IndexStyle	base/strings/basic.jl	/^IndexStyle(::Type{<:CodeUnits}) = IndexLinear()$/;"	f
IndexStyle	base/subarray.jl	/^IndexStyle(::Type{<:FastSubArray}) = IndexLinear()$/;"	f
IndexStyle	base/subarray.jl	/^IndexStyle(::Type{<:SubArray}) = IndexCartesian()$/;"	f
IndexStyle	stdlib/LinearAlgebra/src/adjtrans.jl	/^IndexStyle(::Type{<:AdjOrTransAbsMat}) = IndexCartesian()$/;"	f
IndexStyle	stdlib/LinearAlgebra/src/adjtrans.jl	/^IndexStyle(::Type{<:AdjOrTransAbsVec}) = IndexLinear()$/;"	f
IndexStyle	stdlib/SharedArrays/src/SharedArrays.jl	/^IndexStyle(::Type{<:SharedArray}) = IndexLinear()$/;"	f
IndexStyle	stdlib/SuiteSparse/src/cholmod.jl	/^IndexStyle(::Dense) = IndexLinear()$/;"	f
IndexStyle	stdlib/SuiteSparse/src/cholmod.jl	/^IndexStyle(::Sparse) = IndexCartesian()$/;"	f
IndexTime	stdlib/LibGit2/src/types.jl	/^struct IndexTime$/;"	f
Indexable Collections	doc/src/base/collections.md	/^## Indexable Collections$/;"	s
Indexing	doc/src/manual/interfaces.md	/^## Indexing$/;"	s
Indexing and assignment	doc/src/base/arrays.md	/^## Indexing and assignment$/;"	s
Indirect Calls	doc/src/manual/calling-c-and-fortran-code.md	/^## Indirect Calls$/;"	s
InetAddr	stdlib/Sockets/src/IPAddr.jl	/^InetAddr(ip::IPAddr, port) = InetAddr{typeof(ip)}(ip, port)$/;"	f
InetAddr	stdlib/Sockets/src/IPAddr.jl	/^InetAddr(str::AbstractString, port) = InetAddr(parse(IPAddr, str), port)$/;"	f
InetAddr	stdlib/Sockets/src/IPAddr.jl	/^struct InetAddr{T<:IPAddr}$/;"	f
InexactError	base/boot.jl	/^    InexactError(f::Symbol, @nospecialize(T), @nospecialize(val)) = (@_noinline_meta; new(f, T, /;"	f
InexactError	base/boot.jl	/^struct InexactError <: Exception$/;"	f
Inf	base/float.jl	/^const Inf = Inf64$/;"	v
Inf16	base/float.jl	/^const Inf16 = bitcast(Float16, 0x7c00)$/;"	v
Inf32	base/float.jl	/^const Inf32 = bitcast(Float32, 0x7f800000)$/;"	v
Inf64	base/float.jl	/^const Inf64 = bitcast(Float64, 0x7ff0000000000000)$/;"	v
Inference	doc/src/devdocs/inference.md	/^# Inference$/;"	c
InferenceResult	base/compiler/inferenceresult.jl	/^    function InferenceResult(linfo::MethodInstance, given_argtypes = nothing)$/;"	f
InferenceResult	base/compiler/inferenceresult.jl	/^mutable struct InferenceResult$/;"	f
InferenceState	base/compiler/inferencestate.jl	/^    function InferenceState(result::InferenceResult, src::CodeInfo,$/;"	f
InferenceState	base/compiler/inferencestate.jl	/^function InferenceState(result::InferenceResult, cached::Bool, params::Params)$/;"	f
InferenceState	base/compiler/inferencestate.jl	/^mutable struct InferenceState$/;"	f
Info	base/logging.jl	/^const Info          = LogLevel(       0)$/;"	v
Info	src/llvm-multiversioning.cpp	/^        Info(Use *use, T *val, size_t offset, bool samebits) :$/;"	f	struct:__anond5683ea40111::ConstantUses::Info	file:
Info	src/llvm-multiversioning.cpp	/^        Info(Use *use, size_t offset, bool samebits) :$/;"	f	struct:__anond5683ea40111::ConstantUses::Info	file:
Info	src/llvm-multiversioning.cpp	/^    struct Info {$/;"	s	struct:__anond5683ea40111::ConstantUses	file:
InitAlloc	src/cgmemmgr.cpp	/^        InitAlloc = (1 << 0),$/;"	e	enum:__anon06c686bc0111::SplitPtrBlock::State	file:
InitError	base/boot.jl	/^struct InitError <: WrappedException$/;"	f
Initialization of the Julia runtime	doc/src/devdocs/init.md	/^# Initialization of the Julia runtime$/;"	c
InjectFunctionProto	src/ccall.cpp	/^    Value *InjectFunctionProto(Function *F)$/;"	f	class:FunctionMover	typeref:typename:Value *	file:
Inline elements	stdlib/Markdown/docs/src/index.md	/^## Inline elements$/;"	s
InliningTodo	base/compiler/ssair/inlining.jl	/^struct InliningTodo$/;"	f
Inner	test/docs.jl	/^module Inner$/;"	f
Inner	test/precompile.jl	/^              module Inner$/;"	f
Inner Constructor Methods	doc/src/manual/constructors.md	/^## Inner Constructor Methods$/;"	s
Inner5906	test/compiler/inference.jl	/^struct Inner5906{T}$/;"	f
InnerConfig	stdlib/Markdown/src/parse/config.jl	/^const InnerConfig = Dict{Char, Vector{Function}}$/;"	v
InputAreaState	stdlib/REPL/src/LineEdit.jl	/^struct InputAreaState$/;"	f
Inserting breakpoints for inspection from gdb	doc/src/devdocs/debuggingtips.md	/^## Inserting breakpoints for inspection from gdb$/;"	s
Inserting breakpoints upon certain conditions	doc/src/devdocs/debuggingtips.md	/^## Inserting breakpoints upon certain conditions$/;"	s
InsertionSort	base/sort.jl	/^const InsertionSort = InsertionSortAlg()$/;"	v
InsertionSortAlg	base/sort.jl	/^struct InsertionSortAlg <: Algorithm end$/;"	f
Installation	contrib/README.md	/^Installation$/;"	c
Instance1	stdlib/Serialization/test/runtests.jl	/^module Instance1$/;"	f
InstanceType11007	test/errorshow.jl	/^mutable struct InstanceType11007 <: MethodType11007$/;"	f
Instant	stdlib/Dates/src/types.jl	/^abstract type Instant <: AbstractTime end$/;"	f
InstrLoc	src/disasm.cpp	/^    DILocation *InstrLoc = nullptr;$/;"	m	class:LineNumberAnnotatedWriter	typeref:typename:DILocation *	file:
Instructions	src/flisp/compiler.lsp	/^(define Instructions$/;"	f
Int	base/boot.jl	/^Int(x::Ptr)  = bitcast(Int, x)$/;"	f
Int	base/reflection.jl	/^           struct Int end$/;"	f
Int	test/intrinsics.jl	/^Int(x::Int24) = Core.Intrinsics.zext_int(Int, x)$/;"	f
Int128	base/boot.jl	/^Int128(x::BuiltinInts)  = toInt128(x)::Int128$/;"	f
Int128	base/boot.jl	/^primitive type Int128  <: Signed   128 end$/;"	f
Int16	base/boot.jl	/^Int16(x::BuiltinInts)   = toInt16(x)::Int16$/;"	f
Int16	base/boot.jl	/^primitive type Int16   <: Signed   16 end$/;"	f
Int24	test/intrinsics.jl	/^Int24(x::Int) = Core.Intrinsics.trunc_int(Int24, x)$/;"	f
Int24	test/intrinsics.jl	/^primitive type Int24 24 end$/;"	f
Int32	base/boot.jl	/^Int32(x::BuiltinInts)   = toInt32(x)::Int32$/;"	f
Int5142	test/core.jl	/^primitive type Int5142 64 end$/;"	f
Int5142b	test/core.jl	/^primitive type Int5142b 8 end$/;"	f
Int64	base/boot.jl	/^Int64(x::BuiltinInts)   = toInt64(x)::Int64$/;"	f
Int64	base/boot.jl	/^Int64(x::Ptr) = Int64(UInt32(x))$/;"	f
Int64	test/core.jl	/^    struct Int64$/;"	f
Int8	base/boot.jl	/^Int8(x::BuiltinInts)    = toInt8(x)::Int8$/;"	f
Int8	base/boot.jl	/^primitive type Int8    <: Signed   8 end$/;"	f
IntLike	test/ccall.jl	/^mutable struct IntLike$/;"	f
IntOrInd	base/array.jl	/^const IntOrInd = Union{Int, AbstractUnitRange}$/;"	v
IntTypes	base/atomics.jl	/^const IntTypes = Union{inttypes...}$/;"	v
Integer	base/boot.jl	/^Integer(x::Integer) = x$/;"	f
Integer	base/boot.jl	/^Integer(x::Union{Float32, Float64}) = Int(x)$/;"	f
Integer	base/boot.jl	/^abstract type Integer  <: Real end$/;"	f
Integer	src/abi_x86_64.cpp	/^enum ArgClass { Integer, Sse, SseUp, X87, X87Up, ComplexX87, NoClass, Memory };$/;"	e	enum:ArgClass	file:
IntegerOrC	stdlib/LinearAlgebra/test/addmul.jl	/^const IntegerOrC = Union{Integer, Complex{<: Integer}}$/;"	v
Integers	doc/src/base/numbers.md	/^### Integers$/;"	S
Integers	doc/src/manual/integers-and-floating-point-numbers.md	/^## Integers$/;"	s
Integers and Floating-Point Numbers	doc/src/manual/integers-and-floating-point-numbers.md	/^# Integers and Floating-Point Numbers$/;"	c
Intel MKL	doc/build/build.md	/^### Intel MKL$/;"	S
Interactive Utilities	stdlib/InteractiveUtils/docs/src/index.md	/^# Interactive Utilities$/;"	c
InteractiveUtils	HISTORY.md	/^#### InteractiveUtils$/;"	t
InteractiveUtils	stdlib/InteractiveUtils/src/InteractiveUtils.jl	/^module InteractiveUtils$/;"	f
Interface between JL_STD* and Julia code	doc/src/devdocs/stdio.md	/^## Interface between JL_STD* and Julia code$/;"	s
Interfaces	doc/src/manual/interfaces.md	/^# Interfaces$/;"	c
Intermediate and compiled representations	doc/src/devdocs/reflection.md	/^## Intermediate and compiled representations$/;"	s
Internals	doc/src/base/base.md	/^## Internals$/;"	s
Interpolation	doc/src/manual/metaprogramming.md	/^### Interpolation$/;"	S
InterpreterIP	base/error.jl	/^struct InterpreterIP$/;"	f
InterruptException	base/boot.jl	/^struct InterruptException <: Exception end$/;"	f
Interval	test/specificity.jl	/^struct Interval{L,R,T} <: AbstractInterval{T}$/;"	f
IntrinsicDescription	src/llvm-pass-helpers.h	/^        IntrinsicDescription($/;"	f	struct:jl_intrinsics::IntrinsicDescription
IntrinsicDescription	src/llvm-pass-helpers.h	/^    struct IntrinsicDescription final {$/;"	s	namespace:jl_intrinsics
Introduction	doc/src/base/base.md	/^## Introduction$/;"	s
Introduction to the internal machinery	doc/src/devdocs/types.md	/^## Introduction to the internal machinery$/;"	s
InvalidCharError	base/char.jl	/^struct InvalidCharError{T<:AbstractChar} <: Exception$/;"	f
InvalidCodeError	base/compiler/validation.jl	/^InvalidCodeError(kind::AbstractString) = InvalidCodeError(kind, nothing)$/;"	f
InvalidCodeError	base/compiler/validation.jl	/^struct InvalidCodeError <: Exception$/;"	f
InvalidStateException	base/channels.jl	/^struct InvalidStateException <: Exception$/;"	f
Invariants	doc/src/devdocs/llvm.md	/^### Invariants$/;"	S
InvasiveLinkedList	base/linked_list.jl	/^mutable struct InvasiveLinkedList{T}$/;"	f
InvasiveLinkedListSynchronized	base/task.jl	/^struct InvasiveLinkedListSynchronized{T}$/;"	f
Investigating results	doc/build/distributing.md	/^### Investigating results$/;"	S
InvokeData	base/compiler/ssair/inlining.jl	/^struct InvokeData$/;"	f
InvokeType11007	test/errorshow.jl	/^abstract type InvokeType11007 end$/;"	f
Iptr	test/compiler/codegen.jl	/^const Iptr = sizeof(Int) == 8 ? "i64" : "i32"$/;"	v
Irrational	base/irrationals.jl	/^struct Irrational{sym} <: AbstractIrrational end$/;"	f
Irrational2	test/ambiguous.jl	/^struct Irrational2 <: AbstractIrrational; end$/;"	f
Is Julia named after someone or something?	doc/src/manual/faq.md	/^### Is Julia named after someone or something?$/;"	S
IsInfinite	base/generator.jl	/^struct IsInfinite <: IteratorSize end$/;"	f
IsPermRooted	src/llvm-late-gc-lowering.cpp	/^static bool IsPermRooted(Value *V, State *S)$/;"	f	typeref:typename:bool	file:
Issue12939	test/core.jl	/^module Issue12939$/;"	f
Issue19774	test/misc.jl	/^module Issue19774$/;"	f
Issue19774.f	test/misc.jl	/^        @eval Issue19774.f(x::Int) = 2$/;"	f
Issue19774.f	test/misc.jl	/^        @eval Issue19774.f(x::Int) = 3$/;"	f
Issue2403	test/core.jl	/^mutable struct Issue2403$/;"	f
Issue29451String	test/parse.jl	/^struct Issue29451String <: AbstractString end$/;"	f
Issue8712;	test/core.jl	/^mutable struct Issue8712; end$/;"	f
Italic	stdlib/Markdown/src/Common/inline.jl	/^mutable struct Italic$/;"	f
Italics	stdlib/Markdown/docs/src/index.md	/^### Italics$/;"	S
Iter27594	test/core.jl	/^struct Iter27594 end$/;"	f
Iterable Collections	doc/src/base/collections.md	/^## Iterable Collections$/;"	s
Iterated dispatch	doc/src/manual/methods.md	/^### Iterated dispatch$/;"	S
Iteration	doc/src/manual/arrays.md	/^## Iteration$/;"	s
Iteration utilities	doc/src/base/iterators.md	/^# Iteration utilities$/;"	c
IterationCutShort;	base/iterators.jl	/^struct IterationCutShort; end$/;"	f
Iterator27434	test/compiler/inference.jl	/^struct Iterator27434$/;"	f
IteratorEltype	base/asyncmap.jl	/^IteratorEltype(::Type{AsyncGenerator}) = EltypeUnknown()$/;"	f
IteratorEltype	base/generator.jl	/^IteratorEltype(::Type) = HasEltype()  # HasEltype is the default$/;"	f
IteratorEltype	base/generator.jl	/^IteratorEltype(::Type{Any}) = EltypeUnknown()$/;"	f
IteratorEltype	base/generator.jl	/^IteratorEltype(::Type{Generator{I,T}}) where {I,T} = EltypeUnknown()$/;"	f
IteratorEltype	base/generator.jl	/^IteratorEltype(x) = IteratorEltype(typeof(x))$/;"	f
IteratorEltype	base/generator.jl	/^abstract type IteratorEltype end$/;"	f
IteratorEltype	base/iterators.jl	/^IteratorEltype(::Type{<:PartitionIterator{T}}) where {T} = IteratorEltype(T)$/;"	f
IteratorEltype	base/iterators.jl	/^IteratorEltype(::Type{<:Repeated}) = HasEltype()$/;"	f
IteratorEltype	base/iterators.jl	/^IteratorEltype(::Type{<:Rest{I}}) where {I} = IteratorEltype(I)$/;"	f
IteratorEltype	base/iterators.jl	/^IteratorEltype(::Type{Cycle{I}}) where {I} = IteratorEltype(I)$/;"	f
IteratorEltype	base/iterators.jl	/^IteratorEltype(::Type{Drop{I}}) where {I} = IteratorEltype(I)$/;"	f
IteratorEltype	base/iterators.jl	/^IteratorEltype(::Type{Enumerate{I}}) where {I} = IteratorEltype(I)$/;"	f
IteratorEltype	base/iterators.jl	/^IteratorEltype(::Type{Filter{F,I}}) where {F,I} = IteratorEltype(I)$/;"	f
IteratorEltype	base/iterators.jl	/^IteratorEltype(::Type{Flatten{I}}) where {I} = _flatteneltype(I, IteratorEltype(I))$/;"	f
IteratorEltype	base/iterators.jl	/^IteratorEltype(::Type{Flatten{Tuple{}}}) = IteratorEltype(Tuple{})$/;"	f
IteratorEltype	base/iterators.jl	/^IteratorEltype(::Type{ProductIterator{Tuple{I}}}) where {I} = IteratorEltype(I)$/;"	f
IteratorEltype	base/iterators.jl	/^IteratorEltype(::Type{ProductIterator{Tuple{}}}) = HasEltype()$/;"	f
IteratorEltype	base/iterators.jl	/^IteratorEltype(::Type{Reverse{T}}) where {T} = IteratorEltype(T)$/;"	f
IteratorEltype	base/iterators.jl	/^IteratorEltype(::Type{Stateful{T,VS}}) where {T,VS} = IteratorEltype(T)$/;"	f
IteratorEltype	base/iterators.jl	/^IteratorEltype(::Type{Take{I}}) where {I} = IteratorEltype(I)$/;"	f
IteratorEltype	base/iterators.jl	/^IteratorEltype(::Type{Zip{Is}}) where {Is<:Tuple} = _zip_iterator_eltype(Is)$/;"	f
IteratorEltype	base/iterators.jl	/^function IteratorEltype(::Type{ProductIterator{T}}) where {T<:Tuple}$/;"	f
IteratorEltype	base/missing.jl	/^IteratorEltype(::Type{SkipMissing{T}}) where {T} = IteratorEltype(T)$/;"	f
IteratorSize	base/asyncmap.jl	/^IteratorSize(::Type{AsyncGenerator}) = SizeUnknown()$/;"	f
IteratorSize	base/channels.jl	/^IteratorSize(::Type{<:Channel}) = SizeUnknown()$/;"	f
IteratorSize	base/char.jl	/^IteratorSize(::Type{Char}) = HasShape{0}()$/;"	f
IteratorSize	base/generator.jl	/^IteratorSize(::Type) = HasLength()  # HasLength is the default$/;"	f
IteratorSize	base/generator.jl	/^IteratorSize(::Type{<:AbstractArray{<:Any,N}})  where {N} = HasShape{N}()$/;"	f
IteratorSize	base/generator.jl	/^IteratorSize(::Type{Any}) = SizeUnknown()$/;"	f
IteratorSize	base/generator.jl	/^IteratorSize(::Type{Generator{I,F}}) where {I,F} = IteratorSize(I)$/;"	f
IteratorSize	base/generator.jl	/^IteratorSize(x) = IteratorSize(typeof(x))$/;"	f
IteratorSize	base/generator.jl	/^abstract type IteratorSize end$/;"	f
IteratorSize	base/io.jl	/^IteratorSize(::Type{<:EachLine}) = SizeUnknown()$/;"	f
IteratorSize	base/iterators.jl	/^IteratorSize(::Type{<:Count}) = IsInfinite()$/;"	f
IteratorSize	base/iterators.jl	/^IteratorSize(::Type{<:Filter}) = SizeUnknown()$/;"	f
IteratorSize	base/iterators.jl	/^IteratorSize(::Type{<:Pairs{<:Any, <:Any, <:Base.AbstractUnitRange, <:Tuple}}) = HasLength()$/;"	f
IteratorSize	base/iterators.jl	/^IteratorSize(::Type{<:Pairs{<:Any, <:Any, I}}) where {I} = IteratorSize(I)$/;"	f
IteratorSize	base/iterators.jl	/^IteratorSize(::Type{<:Repeated}) = IsInfinite()$/;"	f
IteratorSize	base/iterators.jl	/^IteratorSize(::Type{<:Rest{I}}) where {I} = rest_iteratorsize(IteratorSize(I))$/;"	f
IteratorSize	base/iterators.jl	/^IteratorSize(::Type{Cycle{I}}) where {I} = IsInfinite()$/;"	f
IteratorSize	base/iterators.jl	/^IteratorSize(::Type{Drop{I}}) where {I} = drop_iteratorsize(IteratorSize(I))$/;"	f
IteratorSize	base/iterators.jl	/^IteratorSize(::Type{Enumerate{I}}) where {I} = IteratorSize(I)$/;"	f
IteratorSize	base/iterators.jl	/^IteratorSize(::Type{Flatten{I}}) where {I} = _flatten_iteratorsize(IteratorSize(I), IteratorElty/;"	f
IteratorSize	base/iterators.jl	/^IteratorSize(::Type{ProductIterator{Tuple{}}}) = HasShape{0}()$/;"	f
IteratorSize	base/iterators.jl	/^IteratorSize(::Type{ProductIterator{T}}) where {T<:Tuple} =$/;"	f
IteratorSize	base/iterators.jl	/^IteratorSize(::Type{Reverse{T}}) where {T} = IteratorSize(T)$/;"	f
IteratorSize	base/iterators.jl	/^IteratorSize(::Type{Stateful{T,VS}}) where {T,VS} = IteratorSize(T) isa HasShape ? HasLength() :/;"	f
IteratorSize	base/iterators.jl	/^IteratorSize(::Type{Take{I}}) where {I} = take_iteratorsize(IteratorSize(I))$/;"	f
IteratorSize	base/iterators.jl	/^IteratorSize(::Type{Zip{Is}}) where {Is<:Tuple} = _zip_iterator_size(Is)$/;"	f
IteratorSize	base/iterators.jl	/^function IteratorSize(::Type{PartitionIterator{T}}) where {T}$/;"	f
IteratorSize	base/missing.jl	/^IteratorSize(::Type{<:SkipMissing}) = SizeUnknown()$/;"	f
IteratorSize	base/multidimensional.jl	/^    IteratorSize(::Type{<:CartesianIndices{N}}) where {N} = Base.HasShape{N}()$/;"	f
IteratorSize	base/number.jl	/^IteratorSize(::Type{<:Number}) = HasShape{0}()$/;"	f
IteratorSize	base/refpointer.jl	/^IteratorSize(::Type{<:Ref}) = HasShape{0}()$/;"	f
IteratorSize	base/regex.jl	/^IteratorSize(::Type{RegexMatchIterator}) = SizeUnknown()$/;"	f
IteratorSize	base/reinterpretarray.jl	/^IteratorSize(::Type{<:CyclePadding}) = IsInfinite()$/;"	f
Iterators	base/iterators.jl	/^module Iterators$/;"	f
Iterators	test/precompile.jl	/^              module Iterators$/;"	f
IteratorsMD	base/multidimensional.jl	/^module IteratorsMD$/;"	f
Iv::	stdlib/SparseArrays/src/sparsematrix.jl	/^        Iv::(Ti) = hasz ? _findz(A) : i1$/;"	f
JIT	src/jitlayers.h	/^        JuliaOJIT &JIT;$/;"	m	class:JuliaOJIT::DebugObjectRegistrar	typeref:typename:JuliaOJIT &
JI_FORMAT_VERSION	src/dump.c	/^static const int JI_FORMAT_VERSION = 9;$/;"	v	typeref:typename:const int	file:
JI_MAGIC	src/dump.c	/^static const char JI_MAGIC[] = "\\373jli\\r\\n\\032\\n"; \/\/ based on PNG signature$/;"	v	typeref:typename:const char[]	file:
JL Call Convention	doc/src/devdocs/callconv.md	/^## JL Call Convention$/;"	s
JLCALL_F2_CC	src/codegen_shared.h	/^#define JLCALL_F2_CC /;"	d
JLCALL_F_CC	src/codegen_shared.h	/^#define JLCALL_F_CC /;"	d
JLCall14301	test/core.jl	/^module JLCall14301$/;"	f
JLD2_hash	test/compiler/inference.jl	/^function JLD2_hash(k::Ptr{UInt8}, n::Integer=length(k), initval::UInt32=UInt32(0))$/;"	f
JLOptions	base/options.jl	/^JLOptions() = unsafe_load(cglobal(:jl_options, JLOptions))$/;"	f
JLOptions	base/options.jl	/^struct JLOptions$/;"	f
JL_ALWAYS_LEAFTYPE	src/stackwalk.c	/^static jl_value_t *array_ptr_void_type JL_ALWAYS_LEAFTYPE = NULL;$/;"	v	typeref:typename:jl_value_t * array_ptr_void_type	file:
JL_ALWAYS_LEAFTYPE	src/support/analyzer_annotations.h	/^#define JL_ALWAYS_LEAFTYPE /;"	d
JL_ALWAYS_LEAFTYPE	src/support/analyzer_annotations.h	/^#define JL_ALWAYS_LEAFTYPE$/;"	d
JL_APINT_C_H	src/APInt-C.h	/^#define JL_APINT_C_H$/;"	d
JL_API_BOXED	src/staticdata.c	/^    JL_API_BOXED,$/;"	e	enum:__anonc3a2e68f0203	file:
JL_API_BUILTIN	src/staticdata.c	/^    JL_API_BUILTIN,$/;"	e	enum:__anonc3a2e68f0203	file:
JL_API_CONST	src/staticdata.c	/^    JL_API_CONST,$/;"	e	enum:__anonc3a2e68f0203	file:
JL_API_INTERPRETED	src/staticdata.c	/^    JL_API_INTERPRETED,$/;"	e	enum:__anonc3a2e68f0203	file:
JL_API_MAX	src/staticdata.c	/^    JL_API_MAX$/;"	e	enum:__anonc3a2e68f0203	file:
JL_API_NULL	src/staticdata.c	/^    JL_API_NULL,$/;"	e	enum:__anonc3a2e68f0203	file:
JL_API_WITH_PARAMETERS	src/staticdata.c	/^    JL_API_WITH_PARAMETERS,$/;"	e	enum:__anonc3a2e68f0203	file:
JL_ARRAYLIST_H	src/support/arraylist.h	/^#define JL_ARRAYLIST_H$/;"	d
JL_ARRAY_ALIGN	src/array.c	/^#define JL_ARRAY_ALIGN(/;"	d	file:
JL_ARRAY_ALIGN	src/staticdata.c	/^#define JL_ARRAY_ALIGN(/;"	d	file:
JL_ARRAY_IMPL_NUL	src/array.c	/^#define JL_ARRAY_IMPL_NUL /;"	d	file:
JL_ASAN_ENABLED	src/julia_internal.h	/^#define JL_ASAN_ENABLED /;"	d
JL_ASAN_ENABLED	src/options.h	/^#define JL_ASAN_ENABLED$/;"	d
JL_AST_PRESERVE_POP	src/ast.c	/^#define JL_AST_PRESERVE_POP(/;"	d	file:
JL_AST_PRESERVE_PUSH	src/ast.c	/^#define JL_AST_PRESERVE_PUSH(/;"	d	file:
JL_ATOMICS_H	src/atomics.h	/^#define JL_ATOMICS_H$/;"	d
JL_ATTRIBUTE_ALIGN_PTRSIZE	src/support/dtypes.h	/^#  define JL_ATTRIBUTE_ALIGN_PTRSIZE(/;"	d
JL_BITVECTOR_H	src/support/bitvector.h	/^#define JL_BITVECTOR_H$/;"	d
JL_BT_INTERP_FRAME	src/julia_internal.h	/^#define JL_BT_INTERP_FRAME /;"	d
JL_BUILTIN_PROTO_H	src/builtin_proto.h	/^#define JL_BUILTIN_PROTO_H$/;"	d
JL_CACHE_BYTE_ALIGNMENT	src/julia_internal.h	/^#define JL_CACHE_BYTE_ALIGNMENT /;"	d
JL_CALLABLE	src/builtins.c	/^JL_CALLABLE(jl_f_is)$/;"	f
JL_CALLABLE	src/builtins.c	/^JL_CALLABLE(jl_f_issubtype)$/;"	f
JL_CALLABLE	src/builtins.c	/^JL_CALLABLE(jl_f_sizeof)$/;"	f
JL_CALLABLE	src/builtins.c	/^JL_CALLABLE(jl_f_typeof)$/;"	f
JL_CALLABLE	src/julia_internal.h	/^#define JL_CALLABLE(/;"	d
JL_CATCH	src/julia.h	/^#define JL_CATCH /;"	d
JL_CONST_FUNC	src/julia.h	/^#  define JL_CONST_FUNC /;"	d
JL_CONST_FUNC	src/julia.h	/^#  define JL_CONST_FUNC$/;"	d
JL_CPU_WAKE_NOOP	src/julia_threads.h	/^#  define JL_CPU_WAKE_NOOP /;"	d
JL_CRC32C_USE_IFUNC	src/crc32c.c	/^#  define JL_CRC32C_USE_IFUNC$/;"	d	file:
JL_DATA_TYPE	src/julia.h	/^#define JL_DATA_TYPE$/;"	d
JL_DEBUG_METHOD_INVALIDATION	src/gf.c	/^int JL_DEBUG_METHOD_INVALIDATION = 0;$/;"	v	typeref:typename:int
JL_DELETE_NON_INLINEABLE	src/options.h	/^#define JL_DELETE_NON_INLINEABLE /;"	d
JL_DIRPATH_H	src/support/dirpath.h	/^#define JL_DIRPATH_H$/;"	d
JL_DISABLE_FPO	src/jitlayers.cpp	/^#  define JL_DISABLE_FPO$/;"	d	file:
JL_DLLEXPORT	src/support/dtypes.h	/^#  define JL_DLLEXPORT /;"	d
JL_DLLEXPORT	src/support/dtypes.h	/^#define JL_DLLEXPORT /;"	d
JL_DL_LIBNAME	src/julia_internal.h	/^#define JL_DL_LIBNAME /;"	d
JL_DO_PRAGMA	src/julia_internal.h	/^#define JL_DO_PRAGMA(/;"	d
JL_DTYPES_H	src/support/dtypes.h	/^#define JL_DTYPES_H$/;"	d
JL_ELF_TLS_INIT_SIZE	src/threading.c	/^#    define JL_ELF_TLS_INIT_SIZE /;"	d	file:
JL_ELF_TLS_VARIANT	src/threading.c	/^#    define JL_ELF_TLS_VARIANT /;"	d	file:
JL_EQUALHASH_H	src/flisp/equalhash.h	/^#define JL_EQUALHASH_H$/;"	d
JL_EXE_LIBNAME	src/julia_internal.h	/^#define JL_EXE_LIBNAME /;"	d
JL_EXTENSION	src/support/dtypes.h	/^#define JL_EXTENSION /;"	d
JL_EXTENSION	src/support/dtypes.h	/^#define JL_EXTENSION$/;"	d
JL_FALLTHROUGH	src/support/dtypes.h	/^#define JL_FALLTHROUGH /;"	d
JL_FALLTHROUGH	src/support/dtypes.h	/^#define JL_FALLTHROUGH$/;"	d
JL_FEATURE_DEF	src/processor.h	/^#define JL_FEATURE_DEF(/;"	d
JL_FEATURE_DEF	src/processor_arm.cpp	/^#define JL_FEATURE_DEF(/;"	d	file:
JL_FEATURE_DEF	src/processor_x86.cpp	/^#define JL_FEATURE_DEF(/;"	d	file:
JL_FEATURE_DEF_NAME	src/processor.h	/^#define JL_FEATURE_DEF_NAME(/;"	d
JL_FEATURE_DEF_NAME	src/processor_arm.cpp	/^#define JL_FEATURE_DEF_NAME(/;"	d	file:
JL_FEATURE_DEF_NAME	src/processor_x86.cpp	/^#define JL_FEATURE_DEF_NAME(/;"	d	file:
JL_FEAT_TEST	src/cgutils.cpp	/^#define JL_FEAT_TEST(/;"	d	file:
JL_GCC_IGNORE_START	src/julia_internal.h	/^#define JL_GCC_IGNORE_START(/;"	d
JL_GCC_IGNORE_STOP	src/julia_internal.h	/^#define JL_GCC_IGNORE_STOP /;"	d
JL_GCC_IGNORE_STOP	src/julia_internal.h	/^#define JL_GCC_IGNORE_STOP$/;"	d
JL_GCEXT_H	src/julia_gcext.h	/^#define JL_GCEXT_H$/;"	d
JL_GC_ASSERT_LIVE	src/julia_internal.h	/^  #define JL_GC_ASSERT_LIVE(/;"	d
JL_GC_DISABLED	src/support/analyzer_annotations.h	/^#define JL_GC_DISABLED /;"	d
JL_GC_DISABLED	src/support/analyzer_annotations.h	/^#define JL_GC_DISABLED$/;"	d
JL_GC_H	src/gc.h	/^#define JL_GC_H$/;"	d
JL_GC_N_POOLS	src/julia_threads.h	/^#  define JL_GC_N_POOLS /;"	d
JL_GC_POP	src/julia.h	/^#define JL_GC_POP(/;"	d
JL_GC_PROMISE_ROOTED	src/support/analyzer_annotations.h	/^#define JL_GC_PROMISE_ROOTED(/;"	d
JL_GC_PUSH1	src/julia.h	/^#define JL_GC_PUSH1(/;"	d
JL_GC_PUSH2	src/julia.h	/^#define JL_GC_PUSH2(/;"	d
JL_GC_PUSH3	src/julia.h	/^#define JL_GC_PUSH3(/;"	d
JL_GC_PUSH4	src/julia.h	/^#define JL_GC_PUSH4(/;"	d
JL_GC_PUSH5	src/julia.h	/^#define JL_GC_PUSH5(/;"	d
JL_GC_PUSH6	src/julia.h	/^#define JL_GC_PUSH6(/;"	d
JL_GC_PUSHARGS	src/julia.h	/^#define JL_GC_PUSHARGS(/;"	d
JL_GC_STATE_SAFE	src/julia_threads.h	/^#define JL_GC_STATE_SAFE /;"	d
JL_GC_STATE_WAITING	src/julia_threads.h	/^#define JL_GC_STATE_WAITING /;"	d
JL_GLOBALLY_ROOTED	src/dump.c	/^static jl_array_t *serializer_worklist JL_GLOBALLY_ROOTED;$/;"	v	typeref:typename:jl_array_t * serializer_worklist	file:
JL_GLOBALLY_ROOTED	src/method.c	/^jl_array_t *jl_all_methods JL_GLOBALLY_ROOTED;$/;"	v	typeref:typename:jl_array_t * jl_all_methods
JL_GLOBALLY_ROOTED	src/support/analyzer_annotations.h	/^#define JL_GLOBALLY_ROOTED /;"	d
JL_GLOBALLY_ROOTED	src/support/analyzer_annotations.h	/^#define JL_GLOBALLY_ROOTED$/;"	d
JL_GLOBALLY_ROOTED	src/task.c	/^static jl_function_t *task_done_hook_func JL_GLOBALLY_ROOTED = NULL;$/;"	v	typeref:typename:jl_function_t * task_done_hook_func	file:
JL_GLOBALLY_ROOTED	src/threading.c	/^jl_ptls_t *jl_all_tls_states JL_GLOBALLY_ROOTED;$/;"	v	typeref:typename:jl_ptls_t * jl_all_tls_states
JL_GLOBALLY_ROOTED	test/clangsa/MissingRoots.c	/^static jl_value_t *some_global JL_GLOBALLY_ROOTED;$/;"	v	typeref:typename:jl_value_t * some_global	file:
JL_HASHING_H	src/support/hashing.h	/^#define JL_HASHING_H$/;"	d
JL_HAVE_ASM	src/julia_threads.h	/^#define JL_HAVE_ASM$/;"	d
JL_HAVE_ASYNCIFY	src/julia_threads.h	/^#define JL_HAVE_ASYNCIFY$/;"	d
JL_HAVE_UCONTEXT	src/julia_threads.h	/^#define JL_HAVE_UCONTEXT$/;"	d
JL_HAVE_UNW_CONTEXT	src/julia_threads.h	/^#define JL_HAVE_UNW_CONTEXT$/;"	d
JL_HEAP_ALIGNMENT	src/julia_internal.h	/^#define JL_HEAP_ALIGNMENT /;"	d
JL_HOOK_CALL	src/cgutils.cpp	/^#define JL_HOOK_CALL(/;"	d	file:
JL_HOOK_TEST	src/cgutils.cpp	/^#define JL_HOOK_TEST(/;"	d	file:
JL_HTABLE_H	src/support/htable.h	/^#define JL_HTABLE_H$/;"	d
JL_I	src/intrinsics.cpp	/^namespace JL_I {$/;"	n	file:
JL_IMAGE_CWD	src/julia.h	/^    JL_IMAGE_CWD = 0,$/;"	e	enum:__anon055fe4271603
JL_IMAGE_JULIA_HOME	src/julia.h	/^    JL_IMAGE_JULIA_HOME = 1,$/;"	e	enum:__anon055fe4271603
JL_IMAGE_SEARCH	src/julia.h	/^} JL_IMAGE_SEARCH;$/;"	t	typeref:enum:__anon055fe4271603
JL_INTERNAL_H	src/julia_internal.h	/^#define JL_INTERNAL_H$/;"	d
JL_IOS_H	src/support/ios.h	/^#define JL_IOS_H$/;"	d
JL_JITSymbol	src/jitlayers.h	/^typedef JITSymbol JL_JITSymbol;$/;"	t	typeref:typename:JITSymbol
JL_LIBSUPPORT_H	src/support/libsupport.h	/^#define JL_LIBSUPPORT_H$/;"	d
JL_LLVM_VERSION	src/llvm-version.h	/^#define JL_LLVM_VERSION /;"	d
JL_LOCK	src/locks.h	/^#define JL_LOCK(/;"	d
JL_LOCKS_H	src/locks.h	/^#define JL_LOCKS_H$/;"	d
JL_LOCK_NOGC	src/locks.h	/^#define JL_LOCK_NOGC(/;"	d
JL_LOGLEVEL_ABOVEMAX	src/julia.h	/^#define JL_LOGLEVEL_ABOVEMAX /;"	d
JL_LOGLEVEL_BELOWMIN	src/julia.h	/^#define JL_LOGLEVEL_BELOWMIN /;"	d
JL_LOGLEVEL_DEBUG	src/julia.h	/^#define JL_LOGLEVEL_DEBUG /;"	d
JL_LOGLEVEL_ERROR	src/julia.h	/^#define JL_LOGLEVEL_ERROR /;"	d
JL_LOGLEVEL_INFO	src/julia.h	/^#define JL_LOGLEVEL_INFO /;"	d
JL_LOGLEVEL_WARN	src/julia.h	/^#define JL_LOGLEVEL_WARN /;"	d
JL_LOG_ALL	src/julia.h	/^#define JL_LOG_ALL /;"	d
JL_LOG_NONE	src/julia.h	/^#define JL_LOG_NONE /;"	d
JL_LOG_USER	src/julia.h	/^#define JL_LOG_USER /;"	d
JL_MAJOR_MINOR_SHLIB_EXT	src/Makefile	/^JL_MAJOR_MINOR_SHLIB_EXT := $(SHLIB_EXT)$/;"	m
JL_MAJOR_MINOR_SHLIB_EXT	src/Makefile	/^JL_MAJOR_MINOR_SHLIB_EXT := $(SHLIB_EXT).$(SOMAJOR).$(SOMINOR)$/;"	m
JL_MAJOR_MINOR_SHLIB_EXT	src/Makefile	/^JL_MAJOR_MINOR_SHLIB_EXT := $(SOMAJOR).$(SOMINOR).$(SHLIB_EXT)$/;"	m
JL_MAJOR_SHLIB_EXT	src/Makefile	/^JL_MAJOR_SHLIB_EXT := $(SHLIB_EXT).$(SOMAJOR)$/;"	m
JL_MAJOR_SHLIB_EXT	src/Makefile	/^JL_MAJOR_SHLIB_EXT := $(SOMAJOR).$(SHLIB_EXT)$/;"	m
JL_MAX_BT_SIZE	src/julia_threads.h	/^#define JL_MAX_BT_SIZE /;"	d
JL_MAYBE_UNROOTED	src/support/analyzer_annotations.h	/^#define JL_MAYBE_UNROOTED /;"	d
JL_MAYBE_UNROOTED	src/support/analyzer_annotations.h	/^#define JL_MAYBE_UNROOTED$/;"	d
JL_MSAN_ENABLED	src/julia_internal.h	/^#define JL_MSAN_ENABLED$/;"	d
JL_MSAN_ENABLED	src/options.h	/^#define JL_MSAN_ENABLED$/;"	d
JL_MURMURHASH3_H	src/support/MurmurHash3.h	/^#define JL_MURMURHASH3_H$/;"	d
JL_MUTEX_INIT	src/locks.h	/^#define JL_MUTEX_INIT(/;"	d
JL_NARGS	src/julia.h	/^#define JL_NARGS(/;"	d
JL_NARGSV	src/julia.h	/^#define JL_NARGSV(/;"	d
JL_NEED_FLOATTEMP_VAR	src/codegen.cpp	/^#define JL_NEED_FLOATTEMP_VAR /;"	d	file:
JL_NONNULL	src/support/analyzer_annotations.h	/^#define JL_NONNULL /;"	d
JL_NORETURN	src/julia.h	/^#  define JL_NORETURN /;"	d
JL_NORETURN	src/julia.h	/^#  define JL_NORETURN$/;"	d
JL_NOTSAFEPOINT	src/runtime_intrinsics.c	/^typedef int (*intrinsic_checked_t)(unsigned, void*, void*, void*) JL_NOTSAFEPOINT;$/;"	t	file:
JL_NOTSAFEPOINT	src/support/analyzer_annotations.h	/^#define JL_NOTSAFEPOINT /;"	d
JL_NOTSAFEPOINT	src/support/analyzer_annotations.h	/^#define JL_NOTSAFEPOINT$/;"	d
JL_N_STACK_POOLS	src/julia_threads.h	/^#define JL_N_STACK_POOLS /;"	d
JL_OPCODES_H	src/flisp/opcodes.h	/^#define JL_OPCODES_H$/;"	d
JL_OPTIONS_CHECK_BOUNDS_DEFAULT	src/julia.h	/^#define JL_OPTIONS_CHECK_BOUNDS_DEFAULT /;"	d
JL_OPTIONS_CHECK_BOUNDS_OFF	src/julia.h	/^#define JL_OPTIONS_CHECK_BOUNDS_OFF /;"	d
JL_OPTIONS_CHECK_BOUNDS_ON	src/julia.h	/^#define JL_OPTIONS_CHECK_BOUNDS_ON /;"	d
JL_OPTIONS_COLOR_AUTO	src/julia.h	/^#define JL_OPTIONS_COLOR_AUTO /;"	d
JL_OPTIONS_COLOR_OFF	src/julia.h	/^#define JL_OPTIONS_COLOR_OFF /;"	d
JL_OPTIONS_COLOR_ON	src/julia.h	/^#define JL_OPTIONS_COLOR_ON /;"	d
JL_OPTIONS_COMPILE_ALL	src/julia.h	/^#define JL_OPTIONS_COMPILE_ALL /;"	d
JL_OPTIONS_COMPILE_DEFAULT	src/julia.h	/^#define JL_OPTIONS_COMPILE_DEFAULT /;"	d
JL_OPTIONS_COMPILE_MIN	src/julia.h	/^#define JL_OPTIONS_COMPILE_MIN /;"	d
JL_OPTIONS_COMPILE_OFF	src/julia.h	/^#define JL_OPTIONS_COMPILE_OFF /;"	d
JL_OPTIONS_COMPILE_ON	src/julia.h	/^#define JL_OPTIONS_COMPILE_ON /;"	d
JL_OPTIONS_DEPWARN_ERROR	src/julia.h	/^#define JL_OPTIONS_DEPWARN_ERROR /;"	d
JL_OPTIONS_DEPWARN_OFF	src/julia.h	/^#define JL_OPTIONS_DEPWARN_OFF /;"	d
JL_OPTIONS_DEPWARN_ON	src/julia.h	/^#define JL_OPTIONS_DEPWARN_ON /;"	d
JL_OPTIONS_FAST_MATH_DEFAULT	src/julia.h	/^#define JL_OPTIONS_FAST_MATH_DEFAULT /;"	d
JL_OPTIONS_FAST_MATH_OFF	src/julia.h	/^#define JL_OPTIONS_FAST_MATH_OFF /;"	d
JL_OPTIONS_FAST_MATH_ON	src/julia.h	/^#define JL_OPTIONS_FAST_MATH_ON /;"	d
JL_OPTIONS_H	src/options.h	/^#define JL_OPTIONS_H$/;"	d
JL_OPTIONS_HANDLE_SIGNALS_OFF	src/julia.h	/^#define JL_OPTIONS_HANDLE_SIGNALS_OFF /;"	d
JL_OPTIONS_HANDLE_SIGNALS_ON	src/julia.h	/^#define JL_OPTIONS_HANDLE_SIGNALS_ON /;"	d
JL_OPTIONS_HISTORYFILE_OFF	src/julia.h	/^#define JL_OPTIONS_HISTORYFILE_OFF /;"	d
JL_OPTIONS_HISTORYFILE_ON	src/julia.h	/^#define JL_OPTIONS_HISTORYFILE_ON /;"	d
JL_OPTIONS_POLLY_OFF	src/julia.h	/^#define JL_OPTIONS_POLLY_OFF /;"	d
JL_OPTIONS_POLLY_ON	src/julia.h	/^#define JL_OPTIONS_POLLY_ON /;"	d
JL_OPTIONS_STARTUPFILE_OFF	src/julia.h	/^#define JL_OPTIONS_STARTUPFILE_OFF /;"	d
JL_OPTIONS_STARTUPFILE_ON	src/julia.h	/^#define JL_OPTIONS_STARTUPFILE_ON /;"	d
JL_OPTIONS_USE_COMPILED_MODULES_NO	src/julia.h	/^#define JL_OPTIONS_USE_COMPILED_MODULES_NO /;"	d
JL_OPTIONS_USE_COMPILED_MODULES_YES	src/julia.h	/^#define JL_OPTIONS_USE_COMPILED_MODULES_YES /;"	d
JL_OPTIONS_USE_SYSIMAGE_NATIVE_CODE_NO	src/julia.h	/^#define JL_OPTIONS_USE_SYSIMAGE_NATIVE_CODE_NO /;"	d
JL_OPTIONS_USE_SYSIMAGE_NATIVE_CODE_YES	src/julia.h	/^#define JL_OPTIONS_USE_SYSIMAGE_NATIVE_CODE_YES /;"	d
JL_OPTIONS_WARN_OVERWRITE_OFF	src/julia.h	/^#define JL_OPTIONS_WARN_OVERWRITE_OFF /;"	d
JL_OPTIONS_WARN_OVERWRITE_ON	src/julia.h	/^#define JL_OPTIONS_WARN_OVERWRITE_ON /;"	d
JL_PLATFORM_H	src/support/platform.h	/^#define JL_PLATFORM_H$/;"	d
JL_PRIVATE_LIBS-0	Makefile	/^JL_PRIVATE_LIBS-0 := libccalltest libllvmcalltest$/;"	m
JL_PROMPT_PASTE	stdlib/REPL/src/REPL.jl	/^const JL_PROMPT_PASTE = Ref(true)$/;"	v
JL_PROPAGATES_ROOT	src/support/analyzer_annotations.h	/^#define JL_PROPAGATES_ROOT /;"	d
JL_PROPAGATES_ROOT	src/support/analyzer_annotations.h	/^#define JL_PROPAGATES_ROOT$/;"	d
JL_PTRHASH_H	src/support/ptrhash.h	/^#define JL_PTRHASH_H$/;"	d
JL_REQUIRE_ROOTED_SLOT	src/support/analyzer_annotations.h	/^#define JL_REQUIRE_ROOTED_SLOT /;"	d
JL_REQUIRE_ROOTED_SLOT	src/support/analyzer_annotations.h	/^#define JL_REQUIRE_ROOTED_SLOT$/;"	d
JL_ROOTED_ARGUMENT	src/support/analyzer_annotations.h	/^#define JL_ROOTED_ARGUMENT /;"	d
JL_ROOTED_ARGUMENT	src/support/analyzer_annotations.h	/^#define JL_ROOTED_ARGUMENT$/;"	d
JL_ROOTED_VALUE_COLLECTION	src/subtype.c	/^} JL_ROOTED_VALUE_COLLECTION;$/;"	v	typeref:struct:subtype_tuple_env
JL_ROOTED_VALUE_COLLECTION	src/support/analyzer_annotations.h	/^#define JL_ROOTED_VALUE_COLLECTION /;"	d
JL_ROOTED_VALUE_COLLECTION	src/support/analyzer_annotations.h	/^#define JL_ROOTED_VALUE_COLLECTION$/;"	d
JL_ROOTING_ARGUMENT	src/support/analyzer_annotations.h	/^#define JL_ROOTING_ARGUMENT /;"	d
JL_ROOTING_ARGUMENT	src/support/analyzer_annotations.h	/^#define JL_ROOTING_ARGUMENT$/;"	d
JL_ROOTS_TEMPORARILY	src/support/analyzer_annotations.h	/^#define JL_ROOTS_TEMPORARILY /;"	d
JL_ROOTS_TEMPORARILY	src/support/analyzer_annotations.h	/^#define JL_ROOTS_TEMPORARILY$/;"	d
JL_RTLD	src/dlload.c	/^#define JL_RTLD(/;"	d	file:
JL_RTLD_CONSTANT	src/julia.h	/^enum JL_RTLD_CONSTANT {$/;"	g
JL_RTLD_DEEPBIND	src/julia.h	/^     JL_RTLD_DEEPBIND=64U,$/;"	e	enum:JL_RTLD_CONSTANT
JL_RTLD_DEFAULT	src/julia.h	/^#define JL_RTLD_DEFAULT /;"	d
JL_RTLD_FIRST	src/julia.h	/^     JL_RTLD_FIRST=128U$/;"	e	enum:JL_RTLD_CONSTANT
JL_RTLD_GLOBAL	src/julia.h	/^     JL_RTLD_GLOBAL=2U,$/;"	e	enum:JL_RTLD_CONSTANT
JL_RTLD_LAZY	src/julia.h	/^     JL_RTLD_LAZY=4U,$/;"	e	enum:JL_RTLD_CONSTANT
JL_RTLD_LOCAL	src/julia.h	/^     JL_RTLD_LOCAL=1U,$/;"	e	enum:JL_RTLD_CONSTANT
JL_RTLD_NODELETE	src/julia.h	/^     JL_RTLD_NODELETE=16U,$/;"	e	enum:JL_RTLD_CONSTANT
JL_RTLD_NOLOAD	src/julia.h	/^     JL_RTLD_NOLOAD=32U,$/;"	e	enum:JL_RTLD_CONSTANT
JL_RTLD_NOW	src/julia.h	/^     JL_RTLD_NOW=8U,$/;"	e	enum:JL_RTLD_CONSTANT
JL_SECTION	src/julia.h	/^#  define JL_SECTION(/;"	d
JL_SIGATOMIC_BEGIN	src/locks.h	/^#define JL_SIGATOMIC_BEGIN(/;"	d
JL_SIGATOMIC_END	src/locks.h	/^#define JL_SIGATOMIC_END(/;"	d
JL_SMALL_BYTE_ALIGNMENT	src/julia_internal.h	/^#define JL_SMALL_BYTE_ALIGNMENT /;"	d
JL_STACK_SIZE	src/options.h	/^#define JL_STACK_SIZE /;"	d
JL_STDERR	src/julia.h	/^#define JL_STDERR /;"	d
JL_STDERR	src/sys.c	/^JL_STREAM *JL_STDERR = (JL_STREAM*)STDERR_FILENO;$/;"	v	typeref:typename:JL_STREAM *
JL_STDIN	src/julia.h	/^#define JL_STDIN /;"	d
JL_STDIN	src/sys.c	/^JL_STREAM *JL_STDIN  = (JL_STREAM*)STDIN_FILENO;$/;"	v	typeref:typename:JL_STREAM *
JL_STDOUT	src/julia.h	/^#define JL_STDOUT /;"	d
JL_STDOUT	src/sys.c	/^JL_STREAM *JL_STDOUT = (JL_STREAM*)STDOUT_FILENO;$/;"	v	typeref:typename:JL_STREAM *
JL_STREAM	src/julia.h	/^#define JL_STREAM /;"	d
JL_STRTOD_H	src/support/strtod.h	/^#define JL_STRTOD_H$/;"	d
JL_SymbolInfo	src/jitlayers.h	/^typedef JITSymbol JL_SymbolInfo;$/;"	t	typeref:typename:JITSymbol
JL_TARGET_CLONE_ALL	src/processor.h	/^    JL_TARGET_CLONE_ALL = 1 << 1,$/;"	e	enum:__anon7b4d3ed20103
JL_TARGET_CLONE_LOOP	src/processor.h	/^    JL_TARGET_CLONE_LOOP = 1 << 3,$/;"	e	enum:__anon7b4d3ed20103
JL_TARGET_CLONE_MATH	src/processor.h	/^    JL_TARGET_CLONE_MATH = 1 << 2,$/;"	e	enum:__anon7b4d3ed20103
JL_TARGET_CLONE_SIMD	src/processor.h	/^    JL_TARGET_CLONE_SIMD = 1 << 4,$/;"	e	enum:__anon7b4d3ed20103
JL_TARGET_MINSIZE	src/processor.h	/^    JL_TARGET_MINSIZE = 1 << 7,$/;"	e	enum:__anon7b4d3ed20103
JL_TARGET_OPTSIZE	src/processor.h	/^    JL_TARGET_OPTSIZE = 1 << 6,$/;"	e	enum:__anon7b4d3ed20103
JL_TARGET_UNKNOWN_NAME	src/processor.h	/^    JL_TARGET_UNKNOWN_NAME = 1 << 5,$/;"	e	enum:__anon7b4d3ed20103
JL_TARGET_VEC_CALL	src/processor.h	/^    JL_TARGET_VEC_CALL = 1 << 0,$/;"	e	enum:__anon7b4d3ed20103
JL_THREADS_H	src/julia_threads.h	/^#define JL_THREADS_H$/;"	d
JL_THREAD_LOCAL	src/julia.h	/^#  define JL_THREAD_LOCAL /;"	d
JL_THREAD_LOCAL	src/julia.h	/^#  define JL_THREAD_LOCAL$/;"	d
JL_TIMEFUNCS_H	src/support/timefuncs.h	/^#define JL_TIMEFUNCS_H$/;"	d
JL_TIMING	src/timing.h	/^#define JL_TIMING(/;"	d
JL_TIMING_H	src/timing.h	/^#define JL_TIMING_H$/;"	d
JL_TIMING_OWNERS	src/timing.h	/^    JL_TIMING_OWNERS$/;"	e	enum:jl_timing_owners
JL_TIMING_OWNERS	src/timing.h	/^#define JL_TIMING_OWNERS /;"	d
JL_TLS_H	src/tls.h	/^#define JL_TLS_H$/;"	d
JL_TRY	src/julia.h	/^#define JL_TRY /;"	d
JL_TYPECHK	src/julia.h	/^#define JL_TYPECHK(/;"	d
JL_TYPECHKS	src/julia.h	/^#define JL_TYPECHKS(/;"	d
JL_UNLOCK	src/locks.h	/^#define JL_UNLOCK(/;"	d
JL_UNLOCK_NOGC	src/locks.h	/^#define JL_UNLOCK_NOGC(/;"	d
JL_UNUSED	src/support/dtypes.h	/^#define JL_UNUSED /;"	d
JL_UNUSED	src/support/dtypes.h	/^#define JL_UNUSED$/;"	d
JL_UNW_HAS_FORMAT_IP	src/julia_internal.h	/^#    define JL_UNW_HAS_FORMAT_IP /;"	d
JL_USED_FUNC	src/julia.h	/^#  define JL_USED_FUNC /;"	d
JL_USED_FUNC	src/julia.h	/^#  define JL_USED_FUNC$/;"	d
JL_USE_IFUNC	src/julia_internal.h	/^#    define JL_USE_IFUNC /;"	d
JL_USE_IFUNC	src/julia_internal.h	/^#  define JL_USE_IFUNC /;"	d
JL_UTF8_H	src/support/utf8.h	/^#define JL_UTF8_H$/;"	d
JL_UTILS_H	src/support/utils.h	/^#define JL_UTILS_H$/;"	d
JL_UV_LOCK	src/jl_uv.c	/^void JL_UV_LOCK(void)$/;"	f	typeref:typename:void
JL_UV_UNLOCK	src/julia_internal.h	/^#define JL_UV_UNLOCK(/;"	d
JL_VARARG_BOUND	src/julia.h	/^    JL_VARARG_BOUND   = 2,$/;"	e	enum:__anon055fe4271503
JL_VARARG_INT	src/julia.h	/^    JL_VARARG_INT     = 1,$/;"	e	enum:__anon055fe4271503
JL_VARARG_NONE	src/julia.h	/^    JL_VARARG_NONE    = 0,$/;"	e	enum:__anon055fe4271503
JL_VARARG_UNBOUND	src/julia.h	/^    JL_VARARG_UNBOUND = 3$/;"	e	enum:__anon055fe4271503
JL_WINUCONTEXT_H	src/support/win32_ucontext.h	/^#define JL_WINUCONTEXT_H$/;"	d
JL_X86_64ONLY_VER	src/features_x86.h	/^#define JL_X86_64ONLY_VER(/;"	d
JL_X86_AVX_MIN_VER	src/features_x86.h	/^#define JL_X86_AVX_MIN_VER /;"	d
JN32	stdlib/Random/src/DSFMT.jl	/^const JN32 = (N+1)*4+1+1$/;"	v
JPOLY1e20	stdlib/Random/src/DSFMT.jl	/^const JPOLY1e20 = "e172e20c5d2de26b567c0cace9e7c6cc4407bd5ffcd22ca59d37b73d54fdbd937cd3abc6f502e/;"	v
JULIA	doc/man/julia.1	/^.TH JULIA 1 2013-12-10 Julia "Julia Programmers' Reference Guide"$/;"	t
JULIAHOME	Makefile	/^JULIAHOME := $(abspath $(dir $(lastword $(MAKEFILE_LIST))))$/;"	m
JULIAHOME	base/Makefile	/^JULIAHOME := $(abspath $(SRCDIR)\/..)$/;"	m
JULIAHOME	contrib/mac/app/Makefile	/^JULIAHOME := $(abspath ..\/..\/..)$/;"	m
JULIAHOME	contrib/mac/framework/Makefile	/^JULIAHOME := $(abspath ..\/..\/..)$/;"	m
JULIAHOME	contrib/mac/frameworkapp/Makefile	/^JULIAHOME := $(abspath ..\/..\/..)$/;"	m
JULIAHOME	deps/Makefile	/^JULIAHOME := $(abspath $(SRCDIR)\/..)$/;"	m
JULIAHOME	doc/Makefile	/^JULIAHOME        := $(abspath $(SRCDIR)\/..)$/;"	m
JULIAHOME	src/Makefile	/^JULIAHOME := $(abspath $(SRCDIR)\/..)$/;"	m
JULIAHOME	src/flisp/Makefile	/^JULIAHOME := $(abspath $(SRCDIR)\/..\/..)$/;"	m
JULIAHOME	src/support/Makefile	/^JULIAHOME := $(abspath $(SRCDIR)\/..\/..)$/;"	m
JULIAHOME	stdlib/Makefile	/^JULIAHOME := $(abspath $(SRCDIR)\/..)$/;"	m
JULIAHOME	sysimage.mk	/^JULIAHOME := $(SRCDIR)$/;"	m
JULIAHOME	test/Makefile	/^JULIAHOME := $(abspath $(SRCDIR)\/..)$/;"	m
JULIAHOME	test/llvmpasses/Makefile	/^JULIAHOME := $(abspath $(SRCDIR)\/..\/..)$/;"	m
JULIAHOME	ui/Makefile	/^JULIAHOME := $(abspath $(SRCDIR)\/..)$/;"	m
JULIANEPOCH	stdlib/Dates/src/conversions.jl	/^const JULIANEPOCH = value(DateTime(-4713, 11, 24, 12))$/;"	v
JULIA_CONFIG	test/embedding/Makefile	/^JULIA_CONFIG := $(JULIA) -e 'include(joinpath(Sys.BINDIR, Base.DATAROOTDIR, "julia", "julia-conf/;"	m
JULIA_CONFIG	test/gcext/Makefile	/^JULIA_CONFIG := $(JULIA) -e 'include(joinpath(Sys.BINDIR, Base.DATAROOTDIR, "julia", "julia-conf/;"	m
JULIA_DEFINE_FAST_TLS	src/julia.h	/^#define JULIA_DEFINE_FAST_TLS(/;"	d
JULIA_DEFINE_FAST_TLS	test/embedding/embedding.c	/^JULIA_DEFINE_FAST_TLS() \/\/ only define this once, in an executable$/;"	f
JULIA_DEFINE_FAST_TLS	ui/repl.c	/^JULIA_DEFINE_FAST_TLS()$/;"	f
JULIA_EXECUTABLE	doc/Makefile	/^JULIA_EXECUTABLE := $(call spawn,$(build_bindir)\/julia) --startup-file=no$/;"	m
JULIA_FRAMEWORK_LIB	contrib/mac/frameworkapp/Makefile	/^JULIA_FRAMEWORK_LIB := $(FRAMEWORK_DESTDIR)\/$(framework_dylib)$/;"	m
JULIA_FRAMEWORK_PATH	contrib/mac/frameworkapp/Makefile	/^JULIA_FRAMEWORK_PATH := $(FRAMEWORK_DESTDIR)\/$(framework_directory)$/;"	m
JULIA_H	src/julia.h	/^#define JULIA_H$/;"	d
JULIA_NUM_THREADS	src/options.h	/^#  define JULIA_NUM_THREADS /;"	d
JULIA_PROMPT	stdlib/REPL/src/REPL.jl	/^const JULIA_PROMPT = "julia> "$/;"	v
JULIA_SPLITDEBUG	src/Makefile	/^JULIA_SPLITDEBUG := 0$/;"	m
JULIA_SPLITDEBUG	src/Makefile	/^JULIA_SPLITDEBUG := 1$/;"	m
JULIA_VERSION_MAJOR_MINOR	contrib/mac/app/Makefile	/^JULIA_VERSION_MAJOR_MINOR:=$(shell echo $(JULIA_VERSION) | grep -o '^[0-9]\\+.[0-9]\\+')$/;"	m
JULIA_VERSION_MAJOR_MINOR_PATCH	contrib/mac/app/Makefile	/^JULIA_VERSION_MAJOR_MINOR_PATCH:=$(shell echo $(JULIA_VERSION) | grep -o '^[0-9]\\+.[0-9]\\+.[0-/;"	m
JULIA_VERSION_MAJOR_MINOR_PATCH	contrib/mac/frameworkapp/Makefile	/^JULIA_VERSION_MAJOR_MINOR_PATCH := $(JULIA_MAJOR_VERSION).$(JULIA_MINOR_VERSION).$(JULIA_PATCH_V/;"	m
JULIA_VERSION_OPT_COMMIT	contrib/mac/app/Makefile	/^JULIA_VERSION_OPT_COMMIT:=$(shell [ $$(git describe --tags --exact-match 2>\/dev\/null) ] && ech/;"	m
Jac_24305	test/subtype.jl	/^Jac_24305(x) = [ x[2] x[1] -2*x[3] ; x[2]*x[3]-2x[1]  x[1]*x[3]+2x[2]  x[1]*x[2] ; exp(x[1])  -e/;"	f
Jan	stdlib/Dates/src/query.jl	/^const Jan = 1$/;"	v
Jan	stdlib/Dates/test/adjusters.jl	/^Jan = Dates.DateTime(2013, 1, 1) #Tuesday$/;"	v
Jan	stdlib/Dates/test/query.jl	/^Jan = Dates.DateTime(2013, 1, 1) # Tuesday$/;"	v
January	stdlib/Dates/src/query.jl	/^const January = 1$/;"	v
JoinCompleteMsg	stdlib/Distributed/src/messages.jl	/^struct JoinCompleteMsg <: AbstractMsg$/;"	f
JoinPGRPMsg	stdlib/Distributed/src/messages.jl	/^struct JoinPGRPMsg <: AbstractMsg$/;"	f
Jul	stdlib/Dates/src/query.jl	/^const Jul = 7$/;"	v
Jul	stdlib/Dates/test/adjusters.jl	/^Jul = Dates.DateTime(2013, 7, 7) #Sunday$/;"	v
Jul	stdlib/Dates/test/query.jl	/^Jul = Dates.DateTime(2013, 7, 7) # Sunday$/;"	v
Julia ASTs	doc/src/devdocs/ast.md	/^# Julia ASTs$/;"	c
Julia Community Standards	.github/CODE_OF_CONDUCT.md	/^Julia Community Standards$/;"	c
Julia Documentation README	doc/README.md	/^# Julia Documentation README$/;"	c
Julia Execution	doc/src/devdocs/eval.md	/^## Julia Execution$/;"	s
Julia Functions	doc/src/devdocs/functions.md	/^# Julia Functions$/;"	c
Julia Native Calling Convention	doc/src/devdocs/callconv.md	/^## Julia Native Calling Convention$/;"	s
Julia OS X packaging	contrib/mac/app/README.md	/^Julia OS X packaging$/;"	c
Julia Releases	doc/src/manual/faq.md	/^## Julia Releases$/;"	s
Julia SSA-form IR	doc/src/devdocs/ssair.md	/^# Julia SSA-form IR$/;"	c
Julia on Windows	doc/build/windows.md	/^# Julia on Windows$/;"	c
Julia v0.2.0 Release Notes	HISTORY.md	/^Julia v0.2.0 Release Notes$/;"	c
Julia v0.3.0 Release Notes	HISTORY.md	/^Julia v0.3.0 Release Notes$/;"	c
Julia v0.4.0 Release Notes	HISTORY.md	/^Julia v0.4.0 Release Notes$/;"	c
Julia v0.5.0 Release Notes	HISTORY.md	/^Julia v0.5.0 Release Notes$/;"	c
Julia v0.6.0 Release Notes	HISTORY.md	/^Julia v0.6.0 Release Notes$/;"	c
Julia v0.7.0 Release Notes	HISTORY.md	/^Julia v0.7.0 Release Notes$/;"	c
Julia v1.0.0 Release Notes	HISTORY.md	/^Julia v1.0.0 Release Notes$/;"	c
Julia v1.1 Release Notes	HISTORY.md	/^Julia v1.1 Release Notes$/;"	c
Julia v1.2 Release Notes	HISTORY.md	/^Julia v1.2 Release Notes$/;"	c
Julia v1.3 Release Notes	HISTORY.md	/^Julia v1.3 Release Notes$/;"	c
Julia v1.4 Release Notes	NEWS.md	/^Julia v1.4 Release Notes$/;"	c
Julia-2014	CITATION.bib	/^@inproceedings{Julia-2014,$/;"	j
Julia-2017	CITATION.bib	/^@article{Julia-2017,$/;"	a
Julia-2019-a	CITATION.bib	/^@article{Julia-2019-a,$/;"	a
Julia-2019-b	CITATION.bib	/^@article{Julia-2019-b,$/;"	a
JuliaBasicBlockPass	src/llvm-api.cpp	/^    JuliaBasicBlockPass(const char *Name, jl_value_t *Callback)$/;"	f	class:llvm::JuliaBasicBlockPass	file:
JuliaBasicBlockPass	src/llvm-api.cpp	/^class JuliaBasicBlockPass : public BasicBlockPass {$/;"	c	namespace:llvm	file:
JuliaFunctionPass	src/llvm-api.cpp	/^    JuliaFunctionPass(const char *Name, jl_value_t *Callback)$/;"	f	class:llvm::JuliaFunctionPass	file:
JuliaFunctionPass	src/llvm-api.cpp	/^class JuliaFunctionPass : public FunctionPass {$/;"	c	namespace:llvm	file:
JuliaFunctionTableAccess64	src/stackwalk.c	/^static PVOID CALLBACK JuliaFunctionTableAccess64($/;"	f	typeref:typename:PVOID CALLBACK	file:
JuliaGetModuleBase64	src/stackwalk.c	/^static DWORD64 WINAPI JuliaGetModuleBase64($/;"	f	typeref:typename:DWORD64 WINAPI	file:
JuliaJITEventListener	src/debuginfo.cpp	/^    JuliaJITEventListener(){}$/;"	f	class:JuliaJITEventListener	file:
JuliaJITEventListener	src/debuginfo.cpp	/^class JuliaJITEventListener: public JITEventListener$/;"	c	file:
JuliaListener	src/jitlayers.h	/^        std::unique_ptr<JITEventListener> JuliaListener;$/;"	m	class:JuliaOJIT::DebugObjectRegistrar	typeref:typename:std::unique_ptr<JITEventListener>
JuliaModulePass	src/llvm-api.cpp	/^    JuliaModulePass(const char *Name, jl_value_t *Callback)$/;"	f	class:llvm::JuliaModulePass	file:
JuliaModulePass	src/llvm-api.cpp	/^class JuliaModulePass : public ModulePass {$/;"	c	namespace:llvm	file:
JuliaOJIT	src/jitlayers.cpp	/^JuliaOJIT::JuliaOJIT(TargetMachine &TM)$/;"	f	class:JuliaOJIT
JuliaOJIT	src/jitlayers.h	/^class JuliaOJIT {$/;"	c
JuliaPassContext	src/llvm-pass-helpers.cpp	/^JuliaPassContext::JuliaPassContext()$/;"	f	class:JuliaPassContext
JuliaPassContext	src/llvm-pass-helpers.h	/^struct JuliaPassContext {$/;"	s
JuliaPipeline	src/jitlayers.cpp	/^    JuliaPipeline() : Pass(PT_PassManager, ID) {}$/;"	f	class:JuliaPipeline	file:
JuliaPipeline	src/jitlayers.cpp	/^class JuliaPipeline : public Pass {$/;"	c	file:
JuliaStartMenuFolder	contrib/windows/build-installer.nsi	/^!define JuliaStartMenuFolder "Julia ${Version}"$/;"	d
JuliaTask	contrib/mac/frameworkapp/ExecSandbox/ExecSandbox.m	/^@implementation JuliaTask$/;"	I
JuliaTask	contrib/mac/frameworkapp/ExecSandbox/ExecSandbox.m	/^@interface JuliaTask : NSObject <TaskProtocol> {$/;"	i	protocols:TaskProtocol
JuliaVariant	contrib/mac/frameworkapp/JuliaLauncher/AppDelegate.m	/^@implementation JuliaVariant$/;"	I
JuliaVariant	contrib/mac/frameworkapp/JuliaLauncher/AppDelegate.m	/^@interface JuliaVariant : NSObject$/;"	i
July	stdlib/Dates/src/query.jl	/^const July = 7$/;"	v
JumpPolys	stdlib/Random/src/DSFMT.jl	/^const JumpPolys = Dict{BigInt,GF2X}()$/;"	v
Jun	stdlib/Dates/src/query.jl	/^const Jun = 6$/;"	v
Jun	stdlib/Dates/test/adjusters.jl	/^Jun = Dates.DateTime(2013, 6, 7) #Friday$/;"	v
Jun	stdlib/Dates/test/query.jl	/^Jun = Dates.DateTime(2013, 6, 7) # Friday$/;"	v
June	stdlib/Dates/src/query.jl	/^const June = 6$/;"	v
K	src/clangsa/GCChecker.cpp	/^            enum Kind { Root, RootArray } K;$/;"	m	struct:__anon9c5a21540111::GCChecker::RootState	typeref:enum:__anon9c5a21540111::GCChecker::RootState::Kind	file:
K	test/docs.jl	/^const K = :K$/;"	v
K1	stdlib/SHA/src/constants.jl	/^const K1 = UInt32[$/;"	v
K20111	test/show.jl	/^    K20111(x) = y -> x$/;"	f
K256	stdlib/SHA/src/constants.jl	/^const K256 = UInt32[$/;"	v
K512	stdlib/SHA/src/constants.jl	/^const K512 = UInt64[$/;"	v
KEEP_BODIES	src/options.h	/^#define KEEP_BODIES$/;"	d
KEEP_ESC	base/regex.jl	/^const KEEP_ESC = [SUB_CHAR, GROUP_CHAR, '0':'9'...]$/;"	v
KERNEL	base/sysinfo.jl	/^const KERNEL = ccall(:jl_get_UNAME, Any, ())$/;"	v
KEY_DIR	stdlib/LibGit2/test/libgit2.jl	/^const KEY_DIR = joinpath(@__DIR__, "keys")$/;"	v
KIND	test/loading.jl	/^const KIND = [(i + j) % 3 for i = 1:M, j = 1:N]$/;"	v
KIND0	test/loading.jl	/^const KIND0 = filter(i -> KIND[i] == 0, NODES)$/;"	v
KIND2	test/loading.jl	/^const KIND2 = filter(i -> KIND[i] == 2, NODES)$/;"	v
Keeping values alive in the absence of uses	doc/src/devdocs/llvm.md	/^### Keeping values alive in the absence of uses$/;"	S
Key bindings	stdlib/REPL/docs/src/index.md	/^## Key bindings$/;"	s
KeyAlias	stdlib/REPL/src/LineEdit.jl	/^    KeyAlias(seq) = new(normalize_key(seq))$/;"	f
KeyAlias	stdlib/REPL/src/LineEdit.jl	/^struct KeyAlias$/;"	f
KeyError	base/abstractdict.jl	/^struct KeyError <: Exception$/;"	f
KeyError	src/flisp/flisp.h	/^    value_t IOError, ParseError, TypeError, ArgError, UnboundError, KeyError;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
KeySet	base/abstractdict.jl	/^struct KeySet{K, T <: AbstractDict{K}} <: AbstractSet{K}$/;"	f
Keyword	base/docs/basedocs.jl	/^struct Keyword$/;"	f
Keyword Arguments	doc/src/manual/functions.md	/^## Keyword Arguments$/;"	s
Keyword arguments	doc/src/devdocs/functions.md	/^## Keyword arguments$/;"	s
KeywordCompletion	stdlib/REPL/src/REPLCompletions.jl	/^struct KeywordCompletion <: Completion$/;"	f
Keywords	doc/src/base/base.md	/^## Keywords$/;"	s
Kind	src/clangsa/GCChecker.cpp	/^            enum Kind { Root, RootArray } K;$/;"	g	struct:__anon9c5a21540111::GCChecker::RootState	file:
Kwargs19774	test/misc.jl	/^module Kwargs19774$/;"	f
Kwargs19774.f	test/misc.jl	/^        @eval Kwargs19774.f(x::Int, y::Int; z=3) = z$/;"	f
L	test/gcext/gcext.c	/^#define L(/;"	d	file:
L	test/loading.jl	/^L(i::Int) = NAMES[mod1(i, M)]$/;"	f
L64	stdlib/SHA/src/base_functions.jl	/^L64(b,x) = lrot(b,x,64)$/;"	f
LAMBDA	src/flisp/flisp.h	/^    value_t LAMBDA, IF, TRYCATCH;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
LAPACK	stdlib/LinearAlgebra/src/lapack.jl	/^module LAPACK$/;"	f
LAPACK Functions	stdlib/LinearAlgebra/docs/src/index.md	/^## LAPACK Functions$/;"	s
LAPACKException	stdlib/LinearAlgebra/src/exceptions.jl	/^struct LAPACKException <: Exception$/;"	f
LAPACK_MFLAGS	deps/blas.mk	/^LAPACK_MFLAGS := NOOPT="$(FFLAGS) $(JFFLAGS) $(USE_BLAS_FFLAGS) -O0" \\$/;"	m
LAST_TAG	src/dump.c	/^#define LAST_TAG /;"	d	file:
LC_UUID	src/debuginfo.cpp	/^#define LC_UUID /;"	d	file:
LDFLAGS	deps/srccache/patchelf-0.9/Makefile.in	/^LDFLAGS = @LDFLAGS@$/;"	m
LDFLAGS	deps/srccache/patchelf-0.9/src/Makefile.in	/^LDFLAGS = @LDFLAGS@$/;"	m
LDFLAGS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^LDFLAGS = @LDFLAGS@$/;"	m
LDFLAGS_ADD	test/embedding/Makefile	/^LDFLAGS_ADD = -lm $(shell $(JULIA_CONFIG) --ldflags --ldlibs)$/;"	m
LDFLAGS_ADD	test/gcext/Makefile	/^LDFLAGS_ADD = -lm $(shell $(JULIA_CONFIG) --ldflags --ldlibs)$/;"	m
LDFLAGS_local	deps/srccache/patchelf-0.9/tests/Makefile.am	/^LDFLAGS_local = -Wl,--disable-new-dtags -Wl,-rpath-link=. -L. $(AM_LDFLAGS)$/;"	m
LDFLAGS_local	deps/srccache/patchelf-0.9/tests/Makefile.in	/^LDFLAGS_local = -Wl,--disable-new-dtags -Wl,-rpath-link=. -L. $(AM_LDFLAGS)$/;"	m
LDFLAGS_sharedlib	deps/srccache/patchelf-0.9/tests/Makefile.am	/^LDFLAGS_sharedlib = -Wl,--disable-new-dtags -shared -L. $(AM_LDFLAGS)$/;"	m
LDFLAGS_sharedlib	deps/srccache/patchelf-0.9/tests/Makefile.in	/^LDFLAGS_sharedlib = -Wl,--disable-new-dtags -shared -L. $(AM_LDFLAGS)$/;"	m
LDLt	stdlib/LinearAlgebra/src/ldlt.jl	/^    function LDLt{T,S}(data) where {T,S<:AbstractMatrix{T}}$/;"	f
LDLt	stdlib/LinearAlgebra/src/ldlt.jl	/^LDLt(data::AbstractMatrix{T}) where {T} = LDLt{T,typeof(data)}(data)$/;"	f
LDLt	stdlib/LinearAlgebra/src/ldlt.jl	/^struct LDLt{T,S<:AbstractMatrix{T}} <: Factorization{T}$/;"	f
LEGAL_ALT	src/support/strptime.c	/^#define LEGAL_ALT(/;"	d	file:
LIBCXX_DEPENDENCY	deps/llvm.mk	/^LIBCXX_DEPENDENCY := $(build_libdir)\/libc++abi.so.1.0 $(build_libdir)\/libc++.so.1.0$/;"	m
LIBCXX_EXTRA_FLAGS	deps/llvm.mk	/^LIBCXX_EXTRA_FLAGS := -Bstatic -lirc -Bdynamic$/;"	m
LIBFILES_debug	src/flisp/Makefile	/^LIBFILES_debug := $(LLT_debug) $(LIBUV) $(LIBUTF8PROC)$/;"	m
LIBFILES_release	src/flisp/Makefile	/^LIBFILES_release := $(LLT_release) $(LIBUV) $(LIBUTF8PROC)$/;"	m
LIBGIT2_BB_NAME	deps/libgit2.mk	/^LIBGIT2_BB_NAME := LibGit2.v$(LIBGIT2_VER)$/;"	m
LIBGIT2_BB_URL_BASE	deps/libgit2.mk	/^LIBGIT2_BB_URL_BASE := https:\/\/github.com\/JuliaPackaging\/Yggdrasil\/releases\/download\/LibG/;"	m
LIBGIT2_GIT_URL	deps/libgit2.mk	/^LIBGIT2_GIT_URL := git:\/\/github.com\/libgit2\/libgit2.git$/;"	m
LIBGIT2_HELPER_PATH	stdlib/LibGit2/test/libgit2.jl	/^const LIBGIT2_HELPER_PATH = joinpath(@__DIR__, "libgit2-helpers.jl")$/;"	v
LIBGIT2_INSTALL	deps/libgit2.mk	/^define LIBGIT2_INSTALL$/;"	m
LIBGIT2_MIN_VER	stdlib/LibGit2/test/libgit2.jl	/^const LIBGIT2_MIN_VER = v"0.23.0"$/;"	v
LIBGIT2_OPTS	deps/libgit2.mk	/^LIBGIT2_OPTS := $(CMAKE_COMMON) -DCMAKE_BUILD_TYPE=Release -DTHREADSAFE=ON -DUSE_BUNDLED_ZLIB=ON$/;"	m
LIBGIT2_SRC_PATH	deps/libgit2.mk	/^LIBGIT2_SRC_PATH := $(SRCCACHE)\/$(LIBGIT2_SRC_DIR)$/;"	m
LIBGIT2_TAR_URL	deps/libgit2.mk	/^LIBGIT2_TAR_URL = https:\/\/api.github.com\/repos\/libgit2\/libgit2\/tarball\/$1$/;"	m
LIBOBJS	deps/srccache/patchelf-0.9/Makefile.in	/^LIBOBJS = @LIBOBJS@$/;"	m
LIBOBJS	deps/srccache/patchelf-0.9/src/Makefile.in	/^LIBOBJS = @LIBOBJS@$/;"	m
LIBOBJS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^LIBOBJS = @LIBOBJS@$/;"	m
LIBS	deps/srccache/patchelf-0.9/Makefile.in	/^LIBS = @LIBS@$/;"	m
LIBS	deps/srccache/patchelf-0.9/src/Makefile.in	/^LIBS = @LIBS@$/;"	m
LIBS	deps/srccache/patchelf-0.9/tests/Makefile.am	/^LIBS =$/;"	m
LIBS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^LIBS = $/;"	m
LIBS	src/flisp/Makefile	/^LIBS :=$/;"	m
LIBSSH2_BB_NAME	deps/libssh2.mk	/^LIBSSH2_BB_NAME := LibSSH2.v$(LIBSSH2_VER)$/;"	m
LIBSSH2_BB_URL_BASE	deps/libssh2.mk	/^LIBSSH2_BB_URL_BASE := https:\/\/github.com\/JuliaPackaging\/Yggdrasil\/releases\/download\/LibS/;"	m
LIBSSH2_GIT_URL	deps/libssh2.mk	/^LIBSSH2_GIT_URL := git:\/\/github.com\/libssh2\/libssh2.git$/;"	m
LIBSSH2_OPTS	deps/libssh2.mk	/^LIBSSH2_OPTS := $(CMAKE_COMMON) -DBUILD_SHARED_LIBS=ON -DBUILD_EXAMPLES=OFF \\$/;"	m
LIBSSH2_TAR_URL	deps/libssh2.mk	/^LIBSSH2_TAR_URL = https:\/\/api.github.com\/repos\/libssh2\/libssh2\/tarball\/$1$/;"	m
LIBTARGET	src/flisp/Makefile	/^LIBTARGET := lib$(NAME)$/;"	m
LIBTOOL_CCLD	deps/tools/common.mk	/^LIBTOOL_CCLD := CCLD="$(CC) -no-undefined -avoid-version"$/;"	m
LIBUNWIND_CFLAGS	deps/unwind.mk	/^LIBUNWIND_CFLAGS := -U_FORTIFY_SOURCE $(fPIC)$/;"	m
LIBUNWIND_CPPFLAGS	deps/unwind.mk	/^LIBUNWIND_CPPFLAGS :=$/;"	m
LIBUV_BB_NAME	deps/libuv.mk	/^LIBUV_BB_NAME := LibUV.v2.0.0+$(LIBUV_VER)-julia$/;"	m
LIBUV_BB_URL_BASE	deps/libuv.mk	/^LIBUV_BB_URL_BASE := https:\/\/github.com\/JuliaPackaging\/Yggdrasil\/releases\/download\/LibUV-/;"	m
LIBUV_BUILDDIR	deps/libuv.mk	/^LIBUV_BUILDDIR := $(BUILDDIR)\/$(LIBUV_SRC_DIR)$/;"	m
LIBUV_GIT_URL	deps/libuv.mk	/^LIBUV_GIT_URL:=git:\/\/github.com\/JuliaLang\/libuv.git$/;"	m
LIBUV_TAR_URL	deps/libuv.mk	/^LIBUV_TAR_URL=https:\/\/api.github.com\/repos\/JuliaLang\/libuv\/tarball\/$1$/;"	m
LIBWHICH_GIT_URL	deps/libwhich.mk	/^LIBWHICH_GIT_URL := git:\/\/github.com\/vtjnash\/libwhich.git$/;"	m
LIBWHICH_INSTALL	deps/libwhich.mk	/^define LIBWHICH_INSTALL$/;"	m
LIBWHICH_MFLAGS	deps/libwhich.mk	/^LIBWHICH_MFLAGS := CC="$(CC)"$/;"	m
LIBWHICH_OBJ_LIB	deps/libwhich.mk	/^LIBWHICH_OBJ_LIB := $(build_depsbindir)\/libwhich$/;"	m
LIBWHICH_TAR_URL	deps/libwhich.mk	/^LIBWHICH_TAR_URL = https:\/\/api.github.com\/repos\/vtjnash\/libwhich\/tarball\/$1$/;"	m
LIMIT_IO_SIZE	src/support/ios.c	/^#define LIMIT_IO_SIZE(/;"	d	file:
LINE_CHUNK_SIZE	src/support/ios.c	/^#define LINE_CHUNK_SIZE /;"	d	file:
LINE_NUMBER	test/docs.jl	/^const LINE_NUMBER = @__LINE__() + 1$/;"	v
LINK	deps/srccache/patchelf-0.9/src/Makefile.in	/^LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@$/;"	m
LINK	deps/srccache/patchelf-0.9/tests/Makefile.in	/^LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@$/;"	m
LITTLE_ENDIAN	src/support/dtypes.h	/^#define LITTLE_ENDIAN /;"	d
LITUSE_ALPHA_ADDR	deps/srccache/patchelf-0.9/src/elf.h	/^#define LITUSE_ALPHA_ADDR	/;"	d
LITUSE_ALPHA_BASE	deps/srccache/patchelf-0.9/src/elf.h	/^#define LITUSE_ALPHA_BASE	/;"	d
LITUSE_ALPHA_BYTOFF	deps/srccache/patchelf-0.9/src/elf.h	/^#define LITUSE_ALPHA_BYTOFF	/;"	d
LITUSE_ALPHA_JSR	deps/srccache/patchelf-0.9/src/elf.h	/^#define LITUSE_ALPHA_JSR	/;"	d
LITUSE_ALPHA_TLS_GD	deps/srccache/patchelf-0.9/src/elf.h	/^#define LITUSE_ALPHA_TLS_GD	/;"	d
LITUSE_ALPHA_TLS_LDM	deps/srccache/patchelf-0.9/src/elf.h	/^#define LITUSE_ALPHA_TLS_LDM	/;"	d
LL31783	test/core.jl	/^struct LL31783{T}$/;"	f
LLTDIR	src/flisp/Makefile	/^LLTDIR := ..\/support$/;"	m
LLTSRCDIR	src/flisp/Makefile	/^LLTSRCDIR := $(SRCDIR)\/$(LLTDIR)$/;"	m
LLT_ALIGN	src/support/dtypes.h	/^#define LLT_ALIGN(/;"	d
LLT_ALLOC	src/support/dtypes.h	/^#define LLT_ALLOC(/;"	d
LLT_BUILDDIR	src/flisp/Makefile	/^LLT_BUILDDIR := $(BUILDDIR)\/$(LLTDIR)$/;"	m
LLT_BUILDDIR	src/flisp/Makefile	/^LLT_BUILDDIR := $(BUILDDIR)\/..\/$(LLTDIR)\/host$/;"	m
LLT_FREE	src/support/dtypes.h	/^#define LLT_FREE(/;"	d
LLT_REALLOC	src/support/dtypes.h	/^#define LLT_REALLOC(/;"	d
LLT_debug	src/flisp/Makefile	/^LLT_debug := $(LLT_BUILDDIR)\/libsupport-debug.a$/;"	m
LLT_release	src/flisp/Makefile	/^LLT_release := $(LLT_BUILDDIR)\/libsupport.a$/;"	m
LLVM	doc/build/build.md	/^### LLVM$/;"	S
LLVM Interface	doc/src/base/c.md	/^# LLVM Interface$/;"	c
LLVMAShr	src/APInt-C.cpp	/^void LLVMAShr(unsigned numbits, integerPart *pa, integerPart *pb, integerPart *pr) {$/;"	f	typeref:typename:JL_DLLEXPORT void
LLVMAdd	src/APInt-C.cpp	/^void LLVMAdd(unsigned numbits, integerPart *pa, integerPart *pb, integerPart *pr) {$/;"	f	typeref:typename:JL_DLLEXPORT void
LLVMAdd_sov	src/APInt-C.cpp	/^int LLVMAdd_sov(unsigned numbits, integerPart *pa, integerPart *pb, integerPart *pr) {$/;"	f	typeref:typename:JL_DLLEXPORT int
LLVMAdd_uov	src/APInt-C.cpp	/^int LLVMAdd_uov(unsigned numbits, integerPart *pa, integerPart *pb, integerPart *pr) {$/;"	f	typeref:typename:JL_DLLEXPORT int
LLVMAnd	src/APInt-C.cpp	/^void LLVMAnd(unsigned numbits, integerPart *pa, integerPart *pb, integerPart *pr) {$/;"	f	typeref:typename:JL_DLLEXPORT void
LLVMByteSwap	src/APInt-C.cpp	/^void LLVMByteSwap(unsigned numbits, integerPart *pa, integerPart *pr) {$/;"	f	typeref:typename:JL_DLLEXPORT void
LLVMCallFunctionTest	test/llvmcall.jl	/^module LLVMCallFunctionTest$/;"	f
LLVMCountLeadingOnes	src/APInt-C.cpp	/^unsigned LLVMCountLeadingOnes(unsigned numbits, integerPart *pa) {$/;"	f	typeref:typename:JL_DLLEXPORT unsigned
LLVMCountLeadingZeros	src/APInt-C.cpp	/^unsigned LLVMCountLeadingZeros(unsigned numbits, integerPart *pa) {$/;"	f	typeref:typename:JL_DLLEXPORT unsigned
LLVMCountPopulation	src/APInt-C.cpp	/^unsigned LLVMCountPopulation(unsigned numbits, integerPart *pa) {$/;"	f	typeref:typename:JL_DLLEXPORT unsigned
LLVMCountTrailingOnes	src/APInt-C.cpp	/^unsigned LLVMCountTrailingOnes(unsigned numbits, integerPart *pa) {$/;"	f	typeref:typename:JL_DLLEXPORT unsigned
LLVMCountTrailingZeros	src/APInt-C.cpp	/^unsigned LLVMCountTrailingZeros(unsigned numbits, integerPart *pa) {$/;"	f	typeref:typename:JL_DLLEXPORT unsigned
LLVMDiv_sov	src/APInt-C.cpp	/^int LLVMDiv_sov(unsigned numbits, integerPart *pa, integerPart *pb, integerPart *pr) {$/;"	f	typeref:typename:JL_DLLEXPORT int
LLVMDiv_uov	src/APInt-C.cpp	/^int LLVMDiv_uov(unsigned numbits, integerPart *pa, integerPart *pb, integerPart *pr) {$/;"	f	typeref:typename:JL_DLLEXPORT int
LLVMExtraAddAllocOptPass	src/llvm-alloc-opt.cpp	/^extern "C" JL_DLLEXPORT void LLVMExtraAddAllocOptPass(LLVMPassManagerRef PM)$/;"	f	typeref:typename:JL_DLLEXPORT void
LLVMExtraAddBarrierNoopPass	src/llvm-api.cpp	/^extern "C" JL_DLLEXPORT void LLVMExtraAddBarrierNoopPass(LLVMPassManagerRef PM)$/;"	f	namespace:llvm	typeref:typename:JL_DLLEXPORT void
LLVMExtraAddCombineMulAddPass	src/llvm-muladd.cpp	/^extern "C" JL_DLLEXPORT void LLVMExtraAddCombineMulAddPass(LLVMPassManagerRef PM)$/;"	f	typeref:typename:JL_DLLEXPORT void
LLVMExtraAddFinalLowerGCPass	src/llvm-final-gc-lowering.cpp	/^extern "C" JL_DLLEXPORT void LLVMExtraAddFinalLowerGCPass(LLVMPassManagerRef PM)$/;"	f	typeref:typename:JL_DLLEXPORT void
LLVMExtraAddGCInvariantVerifierPass	src/llvm-gc-invariant-verifier.cpp	/^extern "C" JL_DLLEXPORT void LLVMExtraAddGCInvariantVerifierPass(LLVMPassManagerRef PM, LLVMBool/;"	f	typeref:typename:JL_DLLEXPORT void
LLVMExtraAddInternalizePassWithExportList	src/llvm-api.cpp	/^extern "C" JL_DLLEXPORT void LLVMExtraAddInternalizePassWithExportList($/;"	f	namespace:llvm	typeref:typename:JL_DLLEXPORT void
LLVMExtraAddLateLowerGCFramePass	src/llvm-late-gc-lowering.cpp	/^extern "C" JL_DLLEXPORT void LLVMExtraAddLateLowerGCFramePass(LLVMPassManagerRef PM)$/;"	f	typeref:typename:JL_DLLEXPORT void
LLVMExtraAddLowerExcHandlersPass	src/llvm-lower-handlers.cpp	/^extern "C" JL_DLLEXPORT void LLVMExtraAddLowerExcHandlersPass(LLVMPassManagerRef PM)$/;"	f	typeref:typename:JL_DLLEXPORT void
LLVMExtraAddLowerPTLSPass	src/llvm-ptls.cpp	/^extern "C" JL_DLLEXPORT void LLVMExtraAddLowerPTLSPass(LLVMPassManagerRef PM, LLVMBool imaging_m/;"	f	typeref:typename:JL_DLLEXPORT void
LLVMExtraAddLowerSimdLoopPass	src/llvm-simdloop.cpp	/^extern "C" JL_DLLEXPORT void LLVMExtraAddLowerSimdLoopPass(LLVMPassManagerRef PM)$/;"	f	namespace:llvm	typeref:typename:JL_DLLEXPORT void
LLVMExtraAddMultiVersioningPass	src/llvm-multiversioning.cpp	/^extern "C" JL_DLLEXPORT void LLVMExtraAddMultiVersioningPass(LLVMPassManagerRef PM)$/;"	f	typeref:typename:JL_DLLEXPORT void
LLVMExtraAddNVVMReflectFunctionPass	src/llvm-api.cpp	/^extern "C" JL_DLLEXPORT void LLVMExtraAddNVVMReflectFunctionPass(LLVMPassManagerRef PM, unsigned/;"	f	namespace:llvm	typeref:typename:JL_DLLEXPORT void
LLVMExtraAddNVVMReflectPass	src/llvm-api.cpp	/^extern "C" JL_DLLEXPORT void LLVMExtraAddNVVMReflectPass(LLVMPassManagerRef PM)$/;"	f	namespace:llvm	typeref:typename:JL_DLLEXPORT void
LLVMExtraAddPropagateJuliaAddrspaces	src/llvm-propagate-addrspaces.cpp	/^extern "C" JL_DLLEXPORT void LLVMExtraAddPropagateJuliaAddrspaces(LLVMPassManagerRef PM)$/;"	f	typeref:typename:JL_DLLEXPORT void
LLVMExtraAddTargetLibraryInfoByTiple	src/llvm-api.cpp	/^LLVMExtraAddTargetLibraryInfoByTiple(const char *T, LLVMPassManagerRef PM)$/;"	f	namespace:llvm	typeref:typename:JL_DLLEXPORT void
LLVMExtraCreateBasicBlockPass	src/llvm-api.cpp	/^LLVMExtraCreateBasicBlockPass(const char *Name, jl_value_t *Callback)$/;"	f	namespace:llvm	typeref:typename:JL_DLLEXPORT LLVMPassRef
LLVMExtraCreateFunctionPass	src/llvm-api.cpp	/^LLVMExtraCreateFunctionPass(const char *Name, jl_value_t *Callback)$/;"	f	namespace:llvm	typeref:typename:JL_DLLEXPORT LLVMPassRef
LLVMExtraCreateModulePass	src/llvm-api.cpp	/^LLVMExtraCreateModulePass(const char *Name, jl_value_t *Callback)$/;"	f	namespace:llvm	typeref:typename:JL_DLLEXPORT LLVMPassRef
LLVMExtraGetDebugMDVersion	src/llvm-api.cpp	/^extern "C" JL_DLLEXPORT unsigned int LLVMExtraGetDebugMDVersion()$/;"	f	namespace:llvm	typeref:typename:JL_DLLEXPORT unsigned int
LLVMExtraGetSourceLocation	src/llvm-api.cpp	/^extern "C" JL_DLLEXPORT int LLVMExtraGetSourceLocation(LLVMValueRef V, int index,$/;"	f	namespace:llvm	typeref:typename:JL_DLLEXPORT int
LLVMExtraGetValueContext	src/llvm-api.cpp	/^extern "C" JL_DLLEXPORT LLVMContextRef LLVMExtraGetValueContext(LLVMValueRef V)$/;"	f	namespace:llvm	typeref:typename:JL_DLLEXPORT LLVMContextRef
LLVMExtraInitializeAllAsmParsers	src/llvm-api.cpp	/^extern "C" JL_DLLEXPORT void LLVMExtraInitializeAllAsmParsers()$/;"	f	namespace:llvm	typeref:typename:JL_DLLEXPORT void
LLVMExtraInitializeAllAsmPrinters	src/llvm-api.cpp	/^extern "C" JL_DLLEXPORT void LLVMExtraInitializeAllAsmPrinters()$/;"	f	namespace:llvm	typeref:typename:JL_DLLEXPORT void
LLVMExtraInitializeAllDisassemblers	src/llvm-api.cpp	/^extern "C" JL_DLLEXPORT void LLVMExtraInitializeAllDisassemblers()$/;"	f	namespace:llvm	typeref:typename:JL_DLLEXPORT void
LLVMExtraInitializeAllTargetInfos	src/llvm-api.cpp	/^extern "C" JL_DLLEXPORT void LLVMExtraInitializeAllTargetInfos()$/;"	f	namespace:llvm	typeref:typename:JL_DLLEXPORT void
LLVMExtraInitializeAllTargetMCs	src/llvm-api.cpp	/^extern "C" JL_DLLEXPORT void LLVMExtraInitializeAllTargetMCs()$/;"	f	namespace:llvm	typeref:typename:JL_DLLEXPORT void
LLVMExtraInitializeAllTargets	src/llvm-api.cpp	/^extern "C" JL_DLLEXPORT void LLVMExtraInitializeAllTargets()$/;"	f	namespace:llvm	typeref:typename:JL_DLLEXPORT void
LLVMExtraInitializeNativeAsmParser	src/llvm-api.cpp	/^extern "C" JL_DLLEXPORT LLVMBool LLVMExtraInitializeNativeAsmParser()$/;"	f	namespace:llvm	typeref:typename:JL_DLLEXPORT LLVMBool
LLVMExtraInitializeNativeAsmPrinter	src/llvm-api.cpp	/^extern "C" JL_DLLEXPORT LLVMBool LLVMExtraInitializeNativeAsmPrinter()$/;"	f	namespace:llvm	typeref:typename:JL_DLLEXPORT LLVMBool
LLVMExtraInitializeNativeDisassembler	src/llvm-api.cpp	/^extern "C" JL_DLLEXPORT LLVMBool LLVMExtraInitializeNativeDisassembler()$/;"	f	namespace:llvm	typeref:typename:JL_DLLEXPORT LLVMBool
LLVMExtraInitializeNativeTarget	src/llvm-api.cpp	/^extern "C" JL_DLLEXPORT LLVMBool LLVMExtraInitializeNativeTarget()$/;"	f	namespace:llvm	typeref:typename:JL_DLLEXPORT LLVMBool
LLVMFPtoInt	src/APInt-C.cpp	/^void LLVMFPtoInt(unsigned numbits, integerPart *pa, unsigned onumbits, integerPart *pr, bool isS/;"	f	typeref:typename:void
LLVMFPtoSI	src/APInt-C.cpp	/^void LLVMFPtoSI(unsigned numbits, integerPart *pa, unsigned onumbits, integerPart *pr) {$/;"	f	typeref:typename:JL_DLLEXPORT void
LLVMFPtoSI_exact	src/APInt-C.cpp	/^int LLVMFPtoSI_exact(unsigned numbits, integerPart *pa, unsigned onumbits, integerPart *pr) {$/;"	f	typeref:typename:JL_DLLEXPORT int
LLVMFPtoUI	src/APInt-C.cpp	/^void LLVMFPtoUI(unsigned numbits, integerPart *pa, unsigned onumbits, integerPart *pr) {$/;"	f	typeref:typename:JL_DLLEXPORT void
LLVMFPtoUI_exact	src/APInt-C.cpp	/^int LLVMFPtoUI_exact(unsigned numbits, integerPart *pa, unsigned onumbits, integerPart *pr) {$/;"	f	typeref:typename:JL_DLLEXPORT int
LLVMFlipAllBits	src/APInt-C.cpp	/^void LLVMFlipAllBits(unsigned numbits, integerPart *pa, integerPart *pr) {$/;"	f	typeref:typename:JL_DLLEXPORT void
LLVMICmpEQ	src/APInt-C.cpp	/^int LLVMICmpEQ(unsigned numbits, integerPart *pa, integerPart *pb) {$/;"	f	typeref:typename:JL_DLLEXPORT int
LLVMICmpNE	src/APInt-C.cpp	/^int LLVMICmpNE(unsigned numbits, integerPart *pa, integerPart *pb) {$/;"	f	typeref:typename:JL_DLLEXPORT int
LLVMICmpSLE	src/APInt-C.cpp	/^int LLVMICmpSLE(unsigned numbits, integerPart *pa, integerPart *pb) {$/;"	f	typeref:typename:JL_DLLEXPORT int
LLVMICmpSLT	src/APInt-C.cpp	/^int LLVMICmpSLT(unsigned numbits, integerPart *pa, integerPart *pb) {$/;"	f	typeref:typename:JL_DLLEXPORT int
LLVMICmpULE	src/APInt-C.cpp	/^int LLVMICmpULE(unsigned numbits, integerPart *pa, integerPart *pb) {$/;"	f	typeref:typename:JL_DLLEXPORT int
LLVMICmpULT	src/APInt-C.cpp	/^int LLVMICmpULT(unsigned numbits, integerPart *pa, integerPart *pb) {$/;"	f	typeref:typename:JL_DLLEXPORT int
LLVMLINK	src/Makefile	/^LLVMLINK :=$/;"	m
LLVMLShr	src/APInt-C.cpp	/^void LLVMLShr(unsigned numbits, integerPart *pa, integerPart *pb, integerPart *pr) {$/;"	f	typeref:typename:JL_DLLEXPORT void
LLVMMul	src/APInt-C.cpp	/^void LLVMMul(unsigned numbits, integerPart *pa, integerPart *pb, integerPart *pr) {$/;"	f	typeref:typename:JL_DLLEXPORT void
LLVMMul_sov	src/APInt-C.cpp	/^int LLVMMul_sov(unsigned numbits, integerPart *pa, integerPart *pb, integerPart *pr) {$/;"	f	typeref:typename:JL_DLLEXPORT int
LLVMMul_uov	src/APInt-C.cpp	/^int LLVMMul_uov(unsigned numbits, integerPart *pa, integerPart *pb, integerPart *pr) {$/;"	f	typeref:typename:JL_DLLEXPORT int
LLVMNeg	src/APInt-C.cpp	/^void LLVMNeg(unsigned numbits, integerPart *pa, integerPart *pr) {$/;"	f	typeref:typename:JL_DLLEXPORT void
LLVMOr	src/APInt-C.cpp	/^void LLVMOr(unsigned numbits, integerPart *pa, integerPart *pb, integerPart *pr) {$/;"	f	typeref:typename:JL_DLLEXPORT void
LLVMPassRef	src/llvm-api.cpp	/^typedef struct LLVMOpaquePass *LLVMPassRef;$/;"	t	namespace:llvm	typeref:struct:LLVMOpaquePass *	file:
LLVMRem_sov	src/APInt-C.cpp	/^int LLVMRem_sov(unsigned numbits, integerPart *pa, integerPart *pb, integerPart *pr) {$/;"	f	typeref:typename:JL_DLLEXPORT int
LLVMRem_uov	src/APInt-C.cpp	/^int LLVMRem_uov(unsigned numbits, integerPart *pa, integerPart *pb, integerPart *pr) {$/;"	f	typeref:typename:JL_DLLEXPORT int
LLVMSDiv	src/APInt-C.cpp	/^void LLVMSDiv(unsigned numbits, integerPart *pa, integerPart *pb, integerPart *pr) {$/;"	f	typeref:typename:JL_DLLEXPORT void
LLVMSExt	src/APInt-C.cpp	/^void LLVMSExt(unsigned inumbits, integerPart *pa, unsigned onumbits, integerPart *pr) {$/;"	f	typeref:typename:JL_DLLEXPORT void
LLVMSItoFP	src/APInt-C.cpp	/^void LLVMSItoFP(unsigned numbits, integerPart *pa, unsigned onumbits, integerPart *pr) {$/;"	f	typeref:typename:JL_DLLEXPORT void
LLVMSRem	src/APInt-C.cpp	/^void LLVMSRem(unsigned numbits, integerPart *pa, integerPart *pb, integerPart *pr) {$/;"	f	typeref:typename:JL_DLLEXPORT void
LLVMShl	src/APInt-C.cpp	/^void LLVMShl(unsigned numbits, integerPart *pa, integerPart *pb, integerPart *pr) {$/;"	f	typeref:typename:JL_DLLEXPORT void
LLVMSub	src/APInt-C.cpp	/^void LLVMSub(unsigned numbits, integerPart *pa, integerPart *pb, integerPart *pr) {$/;"	f	typeref:typename:JL_DLLEXPORT void
LLVMSub_sov	src/APInt-C.cpp	/^int LLVMSub_sov(unsigned numbits, integerPart *pa, integerPart *pb, integerPart *pr) {$/;"	f	typeref:typename:JL_DLLEXPORT int
LLVMSub_uov	src/APInt-C.cpp	/^int LLVMSub_uov(unsigned numbits, integerPart *pa, integerPart *pb, integerPart *pr) {$/;"	f	typeref:typename:JL_DLLEXPORT int
LLVMTrunc	src/APInt-C.cpp	/^void LLVMTrunc(unsigned inumbits, integerPart *pa, unsigned onumbits, integerPart *pr) {$/;"	f	typeref:typename:JL_DLLEXPORT void
LLVMUDiv	src/APInt-C.cpp	/^void LLVMUDiv(unsigned numbits, integerPart *pa, integerPart *pb, integerPart *pr) {$/;"	f	typeref:typename:JL_DLLEXPORT void
LLVMUItoFP	src/APInt-C.cpp	/^void LLVMUItoFP(unsigned numbits, integerPart *pa, unsigned onumbits, integerPart *pr) {$/;"	f	typeref:typename:JL_DLLEXPORT void
LLVMURem	src/APInt-C.cpp	/^void LLVMURem(unsigned numbits, integerPart *pa, integerPart *pb, integerPart *pr) {$/;"	f	typeref:typename:JL_DLLEXPORT void
LLVMXor	src/APInt-C.cpp	/^void LLVMXor(unsigned numbits, integerPart *pa, integerPart *pb, integerPart *pr) {$/;"	f	typeref:typename:JL_DLLEXPORT void
LLVMZExt	src/APInt-C.cpp	/^void LLVMZExt(unsigned inumbits, integerPart *pa, unsigned onumbits, integerPart *pr) {$/;"	f	typeref:typename:JL_DLLEXPORT void
LLVM_BB_NAME	deps/llvm.mk	/^LLVM_BB_NAME := LLVM.asserts.v$(LLVM_VER)$/;"	m
LLVM_BB_NAME	deps/llvm.mk	/^LLVM_BB_NAME := LLVM.v$(LLVM_VER)$/;"	m
LLVM_BB_URL_BASE	deps/llvm.mk	/^LLVM_BB_URL_BASE := https:\/\/github.com\/JuliaPackaging\/Yggdrasil\/releases\/download\/LLVM-v$/;"	m
LLVM_BUILDDIR_withtype	deps/llvm-options.mk	/^LLVM_BUILDDIR_withtype := $(LLVM_BUILD_DIR)\/build_$(LLVM_BUILDTYPE)$/;"	m
LLVM_BUILDTYPE	deps/llvm-options.mk	/^LLVM_BUILDTYPE := $(LLVM_BUILDTYPE)+Asserts$/;"	m
LLVM_BUILDTYPE	deps/llvm-options.mk	/^LLVM_BUILDTYPE := $(LLVM_BUILDTYPE)+MSAN$/;"	m
LLVM_BUILDTYPE	deps/llvm-options.mk	/^LLVM_BUILDTYPE := Debug$/;"	m
LLVM_BUILDTYPE	deps/llvm-options.mk	/^LLVM_BUILDTYPE := RelWithDebInfo$/;"	m
LLVM_BUILDTYPE	deps/llvm-options.mk	/^LLVM_BUILDTYPE := Release$/;"	m
LLVM_BUILD_DIR	deps/llvm-options.mk	/^LLVM_BUILD_DIR:=$(BUILDDIR)\/llvm-$(LLVM_VER)$/;"	m
LLVM_CFLAGS	deps/llvm.mk	/^LLVM_CFLAGS :=$/;"	m
LLVM_CLANG_TAR	deps/llvm.mk	/^LLVM_CLANG_TAR:=$(SRCCACHE)\/cfe-$(LLVM_TAR_EXT)$/;"	m
LLVM_CLANG_TAR	deps/llvm.mk	/^LLVM_CLANG_TAR:=$/;"	m
LLVM_CMAKE	deps/llvm.mk	/^LLVM_CMAKE :=$/;"	m
LLVM_CMAKE_BUILDTYPE	deps/llvm-options.mk	/^LLVM_CMAKE_BUILDTYPE := $(LLVM_BUILDTYPE)$/;"	m
LLVM_CMAKE_LIBCXX	deps/llvm.mk	/^LLVM_CMAKE_LIBCXX := $(LLVM_CMAKE) \\$/;"	m
LLVM_COMPILER_RT_TAR	deps/llvm.mk	/^LLVM_COMPILER_RT_TAR:=$(SRCCACHE)\/compiler-rt-$(LLVM_TAR_EXT)$/;"	m
LLVM_COMPILER_RT_TAR	deps/llvm.mk	/^LLVM_COMPILER_RT_TAR:=$/;"	m
LLVM_CONFIG_ABSOLUTE	src/Makefile	/^LLVM_CONFIG_ABSOLUTE := $(shell which $(LLVM_CONFIG))$/;"	m
LLVM_CONFIG_HOST_LIBS	base/Makefile	/^LLVM_CONFIG_HOST_LIBS := $(shell $(LLVM_CONFIG_HOST) --libdir)\/libLLVM.$(SHLIB_EXT)$/;"	m
LLVM_CONFIG_HOST_LIBS	base/Makefile	/^LLVM_CONFIG_HOST_LIBS := $(shell $(LLVM_CONFIG_HOST) --libfiles)$/;"	m
LLVM_CPPFLAGS	deps/llvm.mk	/^LLVM_CPPFLAGS :=$/;"	m
LLVM_CXXFLAGS	deps/llvm.mk	/^LLVM_CXXFLAGS :=$/;"	m
LLVM_DEBUG	src/llvm-final-gc-lowering.cpp	/^#define LLVM_DEBUG /;"	d	file:
LLVM_DEBUG	src/llvm-late-gc-lowering.cpp	/^#define LLVM_DEBUG /;"	d	file:
LLVM_DEBUG	src/llvm-simdloop.cpp	/^#define LLVM_DEBUG /;"	d	file:
LLVM_EXPERIMENTAL_TARGETS	deps/llvm.mk	/^LLVM_EXPERIMENTAL_TARGETS := WebAssembly$/;"	m
LLVM_GIT_URL_BASE	deps/llvm.mk	/^LLVM_GIT_URL_BASE ?= http:\/\/llvm.org\/git$/;"	m
LLVM_GIT_URL_CLANG	deps/llvm.mk	/^LLVM_GIT_URL_CLANG ?= $(LLVM_GIT_URL_BASE)\/clang.git$/;"	m
LLVM_GIT_URL_COMPILER_RT	deps/llvm.mk	/^LLVM_GIT_URL_COMPILER_RT ?= $(LLVM_GIT_URL_BASE)\/compiler-rt.git$/;"	m
LLVM_GIT_URL_LIBCXX	deps/llvm.mk	/^LLVM_GIT_URL_LIBCXX ?= $(LLVM_GIT_URL_BASE)\/libcxx.git$/;"	m
LLVM_GIT_URL_LIBCXXABI	deps/llvm.mk	/^LLVM_GIT_URL_LIBCXXABI ?= $(LLVM_GIT_URL_BASE)\/libcxxabi.git$/;"	m
LLVM_GIT_URL_LLDB	deps/llvm.mk	/^LLVM_GIT_URL_LLDB ?= $(LLVM_GIT_URL_BASE)\/lldb.git$/;"	m
LLVM_GIT_URL_LLVM	deps/llvm.mk	/^LLVM_GIT_URL_LLVM ?= $(LLVM_GIT_URL_BASE)\/llvm.git$/;"	m
LLVM_GIT_URL_POLLY	deps/llvm.mk	/^LLVM_GIT_URL_POLLY ?= $(LLVM_GIT_URL_BASE)\/polly.git$/;"	m
LLVM_INSTALL	deps/llvm.mk	/^LLVM_INSTALL = \\$/;"	m
LLVM_LDFLAGS	deps/llvm.mk	/^LLVM_LDFLAGS :=$/;"	m
LLVM_LIBCXX_LDFLAGS	deps/llvm.mk	/^LLVM_LIBCXX_LDFLAGS := -lc++ -lc++abi$/;"	m
LLVM_LIBCXX_LDFLAGS	deps/llvm.mk	/^LLVM_LIBCXX_LDFLAGS :=$/;"	m
LLVM_LIBCXX_TAR	deps/llvm.mk	/^LLVM_LIBCXX_TAR:=$(SRCCACHE)\/libcxx-$(LLVM_TAR_EXT)$/;"	m
LLVM_LIBCXX_TAR	deps/llvm.mk	/^LLVM_LIBCXX_TAR:=$/;"	m
LLVM_LIBS	src/Makefile	/^LLVM_LIBS := all$/;"	m
LLVM_LIBS	src/Makefile	/^LLVM_LIBS := support$/;"	m
LLVM_LIB_FILE	deps/llvm.mk	/^LLVM_LIB_FILE := libLLVMCodeGen.a$/;"	m
LLVM_LLDB_TAR	deps/llvm.mk	/^LLVM_LLDB_TAR:=$(SRCCACHE)\/lldb-$(LLVM_TAR_EXT)$/;"	m
LLVM_PASS_HELPERS_H	src/llvm-pass-helpers.h	/^#define LLVM_PASS_HELPERS_H$/;"	d
LLVM_PATCH	deps/llvm.mk	/^define LLVM_PATCH$/;"	m
LLVM_SIZE	Makefile	/^LLVM_SIZE := $(build_depsbindir)\/llvm-size$(EXE)$/;"	m
LLVM_SIZE	Makefile	/^LLVM_SIZE := llvm-size$(EXE)$/;"	m
LLVM_SRC_URL	deps/llvm.mk	/^LLVM_SRC_URL := http:\/\/releases.llvm.org\/$(LLVM_VER)$/;"	m
LLVM_TAR	deps/llvm.mk	/^LLVM_TAR:=$(SRCCACHE)\/llvm-$(LLVM_TAR_EXT)$/;"	m
LLVM_TARGETS	deps/llvm.mk	/^LLVM_TARGETS := host;NVPTX;AMDGPU$/;"	m
LLVM_TAR_EXT	deps/llvm.mk	/^LLVM_TAR_EXT:=$(LLVM_VER).src.tar.xz$/;"	m
LL_DELAY_LOAD	deps/srccache/patchelf-0.9/src/elf.h	/^#define LL_DELAY_LOAD	/;"	d
LL_DELTA	deps/srccache/patchelf-0.9/src/elf.h	/^#define LL_DELTA	/;"	d
LL_EXACT_MATCH	deps/srccache/patchelf-0.9/src/elf.h	/^#define LL_EXACT_MATCH	/;"	d
LL_EXPORTS	deps/srccache/patchelf-0.9/src/elf.h	/^#define LL_EXPORTS	/;"	d
LL_IGNORE_INT_VER	deps/srccache/patchelf-0.9/src/elf.h	/^#define LL_IGNORE_INT_VER /;"	d
LL_NONE	deps/srccache/patchelf-0.9/src/elf.h	/^#define LL_NONE	/;"	d
LL_REQUIRE_MINOR	deps/srccache/patchelf-0.9/src/elf.h	/^#define LL_REQUIRE_MINOR /;"	d
LN10	base/special/exp10.jl	/^const LN10 = 2.302585092994045684017991454684364207601101488628772976033327900967572609677367$/;"	v
LN2	base/special/exp.jl	/^const LN2 = 6.931471805599453094172321214581765680755001343602552541206800094933936219696955e-01$/;"	v
LN2L	base/special/exp.jl	/^LN2L(::Type{Float32}) = 9.0580006145f-6$/;"	f
LN2L	base/special/exp.jl	/^LN2L(::Type{Float64}) = 1.90821492927058770002e-10$/;"	f
LN2U	base/special/exp.jl	/^LN2U(::Type{Float32}) = 6.9313812256f-1$/;"	f
LN2U	base/special/exp.jl	/^LN2U(::Type{Float64}) = 6.93147180369123816490e-1$/;"	f
LOAD_PATH	base/initdefs.jl	/^const LOAD_PATH = copy(DEFAULT_LOAD_PATH)$/;"	v
LOCALES	stdlib/Dates/src/query.jl	/^const LOCALES = Dict{String, DateLocale}("english" => ENGLISH)$/;"	v
LOG10_2	base/special/exp10.jl	/^const LOG10_2 = 3.010299956639811952137388947244930267681898814621085413104274611271081892744238/;"	v
LOG10_2L	base/special/exp10.jl	/^LOG10_2L(::Type{Float32}) = 2.48745663981195213739f-4$/;"	f
LOG10_2L	base/special/exp10.jl	/^LOG10_2L(::Type{Float64}) = 4.60503898119521373889e-6$/;"	f
LOG10_2U	base/special/exp10.jl	/^LOG10_2U(::Type{Float32}) = 3.00781250000000000000f-1$/;"	f
LOG10_2U	base/special/exp10.jl	/^LOG10_2U(::Type{Float64}) = 3.01025390625000000000e-1$/;"	f
LOG2_10	base/special/exp10.jl	/^const LOG2_10 = 3.321928094887362347870319429489390175864831393024580612054756395815934776608624$/;"	v
LOG2_E	base/special/exp.jl	/^const LOG2_E = 1.442695040888963407359924681001892137426646$/;"	v
LOG_COMPILE	deps/srccache/patchelf-0.9/tests/Makefile.in	/^LOG_COMPILE = $(LOG_COMPILER) $(AM_LOG_FLAGS) $(LOG_FLAGS)$/;"	m
LOG_DRIVER	deps/srccache/patchelf-0.9/tests/Makefile.in	/^LOG_DRIVER = $(SHELL) $(top_srcdir)\/build-aux\/test-driver$/;"	m
LONG	src/crc32c.c	/^#define LONG /;"	d	file:
LONG	stdlib/SuiteSparse/src/cholmod_h.jl	/^const LONG    = Int32(2)  # all integer arrays are SuiteSparse_long$/;"	v
LONGBACKREF_TAG	stdlib/Serialization/src/Serialization.jl	/^const LONGBACKREF_TAG      = Int32(o0+3)$/;"	v
LONGEXPR_TAG	stdlib/Serialization/src/Serialization.jl	/^const LONGEXPR_TAG         = Int32(o0+7)$/;"	v
LONGSTRING_TAG	stdlib/Serialization/src/Serialization.jl	/^const LONGSTRING_TAG       = Int32(o0+8)$/;"	v
LONGSYMBOL_TAG	stdlib/Serialization/src/Serialization.jl	/^const LONGSYMBOL_TAG       = Int32(o0+6)$/;"	v
LONGTUPLE_TAG	stdlib/Serialization/src/Serialization.jl	/^const LONGTUPLE_TAG        = Int32(o0+5)$/;"	v
LONGx1	src/crc32c.c	/^#define LONGx1 /;"	d	file:
LONGx2	src/crc32c.c	/^#define LONGx2 /;"	d	file:
LOOP_BODY	src/gf.c	/^#define LOOP_BODY(/;"	d	file:
LPROC	stdlib/Distributed/src/cluster.jl	/^const LPROC = LocalProcess()$/;"	v
LPROCROLE	stdlib/Distributed/src/cluster.jl	/^const LPROCROLE = Ref{Symbol}(:master)$/;"	v
LQ	stdlib/LinearAlgebra/src/lq.jl	/^    function LQ{T,S}(factors, τ) where {T,S<:AbstractMatrix{T}}$/;"	f
LQ	stdlib/LinearAlgebra/src/lq.jl	/^LQ(factors::AbstractMatrix{T}, τ::Vector{T}) where {T} = LQ{T,typeof(factors)}(factors, τ)$/;"	f
LQ	stdlib/LinearAlgebra/src/lq.jl	/^function LQ{T}(factors::AbstractMatrix, τ::AbstractVector) where {T}$/;"	f
LQ	stdlib/LinearAlgebra/src/lq.jl	/^struct LQ{T,S<:AbstractMatrix{T}} <: Factorization{T}$/;"	f
LQPackedQ	stdlib/LinearAlgebra/src/lq.jl	/^LQPackedQ(factors::AbstractMatrix{T}, τ::Vector{T}) where {T} = LQPackedQ{T,typeof(factors)}(fa/;"	f
LQPackedQ	stdlib/LinearAlgebra/src/lq.jl	/^struct LQPackedQ{T,S<:AbstractMatrix} <: AbstractMatrix{T}$/;"	f
LReplace	base/cartesian.jl	/^LReplace(sym::Symbol, val::Integer) = LReplace(sym, string(sym), val)$/;"	f
LReplace	base/cartesian.jl	/^struct LReplace{S<:AbstractString}$/;"	f
LSMinimumSystemVersion	contrib/mac/frameworkapp/JuliaLauncher/Info.plist	/^	<key>LSMinimumSystemVersion<\/key>$/;"	k
LTLIBOBJS	deps/srccache/patchelf-0.9/Makefile.in	/^LTLIBOBJS = @LTLIBOBJS@$/;"	m
LTLIBOBJS	deps/srccache/patchelf-0.9/src/Makefile.in	/^LTLIBOBJS = @LTLIBOBJS@$/;"	m
LTLIBOBJS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^LTLIBOBJS = @LTLIBOBJS@$/;"	m
LTri	stdlib/LinearAlgebra/test/addmul.jl	/^const LTri = Union{LowerTriangular, UnitLowerTriangular, Diagonal}$/;"	v
LU	stdlib/LinearAlgebra/src/lu.jl	/^    function LU{T,S}(factors, ipiv, info) where {T,S<:AbstractMatrix{T}}$/;"	f
LU	stdlib/LinearAlgebra/src/lu.jl	/^function LU(factors::AbstractMatrix{T}, ipiv::Vector{BlasInt}, info::BlasInt) where {T}$/;"	f
LU	stdlib/LinearAlgebra/src/lu.jl	/^function LU{T}(F::LU) where T$/;"	f
LU	stdlib/LinearAlgebra/src/lu.jl	/^function LU{T}(factors::AbstractMatrix, ipiv::AbstractVector{<:Integer}, info::Integer) where {T/;"	f
LU	stdlib/LinearAlgebra/src/lu.jl	/^struct LU{T,S<:AbstractMatrix{T}} <: Factorization{T}$/;"	f
LaTeX	stdlib/Markdown/src/IPython/IPython.jl	/^mutable struct LaTeX$/;"	f
Language changes	HISTORY.md	/^Language changes$/;"	s
Language changes	NEWS.md	/^Language changes$/;"	s
Language tooling improvements	HISTORY.md	/^Language tooling improvements$/;"	s
LargeStruct	test/compiler/codegen.jl	/^    LargeStruct() = new()$/;"	f
LargeStruct	test/compiler/codegen.jl	/^struct LargeStruct$/;"	f
LastSpecial	src/codegen_shared.h	/^    LastSpecial = Loaded,$/;"	e	enum:AddressSpace
LateLowerGCFrame	src/llvm-late-gc-lowering.cpp	/^    LateLowerGCFrame() : FunctionPass(ID)$/;"	f	struct:LateLowerGCFrame	file:
LateLowerGCFrame	src/llvm-late-gc-lowering.cpp	/^struct LateLowerGCFrame: public FunctionPass, private JuliaPassContext {$/;"	s	file:
LatexCompletions	stdlib/REPL/src/REPL.jl	/^struct LatexCompletions <: CompletionProvider end$/;"	f
LaunchWorkerError	stdlib/Distributed/src/cluster.jl	/^struct LaunchWorkerError <: Exception$/;"	f
Layer_1	doc/images/jltypes.svg	/^	 xml:space="preserve">$/;"	i
Layer_1-2	contrib/julia.svg	/^<svg xmlns="http:\/\/www.w3.org\/2000\/svg" viewBox="0 0 153.14 98.64"><defs><style>.cls-1{fill:/;"	i
Layer_2	contrib/julia.svg	/^<svg xmlns="http:\/\/www.w3.org\/2000\/svg" viewBox="0 0 153.14 98.64"><defs><style>.cls-1{fill:/;"	i
LazyFunctions	src/ccall.cpp	/^    std::vector<Function *> LazyFunctions;$/;"	m	class:FunctionMover	typeref:typename:std::vector<Function * >	file:
LazyHelp	test/docs.jl	/^struct LazyHelp$/;"	f
LazyModule	src/ccall.cpp	/^    LazyModule(Func2 &&func)$/;"	f	struct:LazyModule	file:
LazyModule	src/ccall.cpp	/^struct LazyModule {$/;"	s	file:
Leaf	test/compiler/inference.jl	/^struct Leaf <: AbstractNode$/;"	f
Learning Julia	CONTRIBUTING.md	/^## Learning Julia$/;"	s
Left	base/sort.jl	/^struct Left <: Ordering end$/;"	f
Legacy `ios.c` library	doc/src/devdocs/stdio.md	/^## Legacy `ios.c` library$/;"	s
Less	test/compiler/inference.jl	/^struct Less{O}$/;"	f
LessThan	stdlib/Random/src/Random.jl	/^struct LessThan{T<:Integer,S} <: Sampler{T}$/;"	f
Let Blocks	doc/src/manual/variables-and-scoping.md	/^### Let Blocks$/;"	S
Levels	src/llvm-late-gc-lowering.cpp	/^    std::vector<std::vector<int>> Levels;$/;"	m	struct:PEOIterator	typeref:typename:std::vector<std::vector<int>>	file:
Lib4771	test/core.jl	/^module Lib4771$/;"	f
LibGit2	stdlib/LibGit2/docs/src/index.md	/^# LibGit2$/;"	c
LibGit2	stdlib/LibGit2/src/LibGit2.jl	/^module LibGit2$/;"	f
LibGit2OnlineTests	stdlib/LibGit2/test/online.jl	/^module LibGit2OnlineTests$/;"	f
LibGit2Tests	stdlib/LibGit2/test/libgit2.jl	/^module LibGit2Tests$/;"	f
Libc	base/libc.jl	/^module Libc$/;"	f
Libc.getpid	base/process.jl	/^function Libc.getpid(p::Process)$/;"	f
Libdl	HISTORY.md	/^#### Libdl$/;"	t
Libdl	NEWS.md	/^#### Libdl$/;"	t
Libdl	stdlib/Libdl/src/Libdl.jl	/^module Libdl$/;"	f
Library improvements	HISTORY.md	/^Library improvements$/;"	s
Libuv wrappers for stdio	doc/src/devdocs/stdio.md	/^## Libuv wrappers for stdio$/;"	s
LibuvServer	base/stream.jl	/^abstract type LibuvServer <: IOServer end$/;"	f
LibuvStream	base/stream.jl	/^abstract type LibuvStream <: IO end$/;"	f
License	deps/srccache/patchelf-0.9/patchelf.spec	/^License: GPL$/;"	t
License	deps/srccache/patchelf-0.9/patchelf.spec.in	/^License: GPL$/;"	t
Lifetime	src/llvm-alloc-opt.cpp	/^    struct Lifetime {$/;"	s	struct:__anon0a1571000111::Optimizer	file:
LiftPhi	src/llvm-late-gc-lowering.cpp	/^void LateLowerGCFrame::LiftPhi(State &S, PHINode *Phi, SmallVector<int, 16> &PHINumbers)$/;"	f	class:LateLowerGCFrame	typeref:typename:void
LiftPointer	src/llvm-propagate-addrspaces.cpp	/^Value *PropagateJuliaAddrspaces::LiftPointer(Value *V, Type *LocTy, Instruction *InsertPt) {$/;"	f	class:PropagateJuliaAddrspaces	typeref:typename:Value *
LiftSelect	src/llvm-late-gc-lowering.cpp	/^bool LateLowerGCFrame::LiftSelect(State &S, SelectInst *SI) {$/;"	f	class:LateLowerGCFrame	typeref:typename:bool
LiftedPhi	base/compiler/ssair/passes.jl	/^struct LiftedPhi$/;"	f
LiftingMap	src/llvm-propagate-addrspaces.cpp	/^    DenseMap<Value *, Value *> LiftingMap;$/;"	m	struct:PropagateJuliaAddrspaces	typeref:typename:DenseMap<Value *,Value * >	file:
Limb_high_bit	stdlib/Random/src/generation.jl	/^const Limb_high_bit = one(Limb) << (bits_in_Limb-1)$/;"	v
LinRange	base/range.jl	/^    function LinRange{T}(start,stop,len) where T$/;"	f
LinRange	base/range.jl	/^LinRange(r::AbstractRange{T}) where {T} = LinRange{T}(r)$/;"	f
LinRange	base/range.jl	/^function LinRange(start, stop, len::Integer)$/;"	f
LinRange	base/range.jl	/^struct LinRange{T} <: AbstractRange{T}$/;"	f
LinSlowMatrix	test/arrayops.jl	/^struct LinSlowMatrix{T} <: DenseArray{T,2}$/;"	f
Line endings	doc/build/windows.md	/^### Line endings$/;"	S
Line numbers	doc/src/devdocs/ast.md	/^### Line numbers$/;"	S
LineBreak	stdlib/Markdown/src/Common/inline.jl	/^mutable struct LineBreak end$/;"	f
LineEdit	stdlib/REPL/src/LineEdit.jl	/^module LineEdit$/;"	f
LineEdit.accept_result_newmode	stdlib/REPL/src/REPL.jl	/^function LineEdit.accept_result_newmode(hist::REPLHistoryProvider)$/;"	f
LineEdit.reset_state	stdlib/REPL/src/REPL.jl	/^LineEdit.reset_state(hist::REPLHistoryProvider) = history_reset_state(hist)$/;"	f
LineEditREPL	stdlib/REPL/src/REPL.jl	/^    LineEditREPL(t,hascolor,prompt_color,input_color,answer_color,shell_color,help_color,history/;"	f
LineEditREPL	stdlib/REPL/src/REPL.jl	/^LineEditREPL(t::TextTerminal, hascolor::Bool, envcolors::Bool=false) =$/;"	f
LineEditREPL	stdlib/REPL/src/REPL.jl	/^mutable struct LineEditREPL <: AbstractREPL$/;"	f
LineEditTest	stdlib/REPL/test/runtests.jl	/^module LineEditTest$/;"	f
LineInfoDict	stdlib/Profile/src/Profile.jl	/^const LineInfoDict = Dict{UInt64, Vector{StackFrame}}$/;"	v
LineInfoFlatDict	stdlib/Profile/src/Profile.jl	/^const LineInfoFlatDict = Dict{UInt64, StackFrame}$/;"	v
LineNum	base/compiler/inferencestate.jl	/^const LineNum = Int$/;"	v
LineNumberAnnotatedWriter	src/disasm.cpp	/^    LineNumberAnnotatedWriter(const char *debuginfo)$/;"	f	class:LineNumberAnnotatedWriter	file:
LineNumberAnnotatedWriter	src/disasm.cpp	/^class LineNumberAnnotatedWriter : public AssemblyAnnotationWriter {$/;"	c	file:
LinePrinter	src/disasm.cpp	/^    DILineInfoPrinter LinePrinter{"; ", false};$/;"	m	class:LineNumberAnnotatedWriter	typeref:typename:DILineInfoPrinter	file:
LineStart	src/disasm.cpp	/^    const char* LineStart = "; ";$/;"	m	class:DILineInfoPrinter	typeref:typename:const char *	file:
Linear Algebra	stdlib/LinearAlgebra/docs/src/index.md	/^# Linear Algebra$/;"	c
Linear indexing	doc/src/devdocs/subarrays.md	/^### Linear indexing$/;"	S
Linear indexing	doc/src/manual/arrays.md	/^#### Linear indexing$/;"	t
Linear indexing (`LinearIndices`)	doc/src/devdocs/offset-arrays.md	/^### Linear indexing (`LinearIndices`)$/;"	S
LinearAlgebra	HISTORY.md	/^#### LinearAlgebra$/;"	t
LinearAlgebra	NEWS.md	/^#### LinearAlgebra$/;"	t
LinearAlgebra	stdlib/LinearAlgebra/src/LinearAlgebra.jl	/^module LinearAlgebra$/;"	f
LinearAlgebra.Adjoint	stdlib/LinearAlgebra/test/generic.jl	/^LinearAlgebra.Adjoint(a::ModInt{n}) where {n} = adjoint(a)$/;"	f
LinearAlgebra.Transpose	stdlib/LinearAlgebra/test/generic.jl	/^LinearAlgebra.Transpose(a::ModInt{n}) where {n} = transpose(a)$/;"	f
LinearAlgebra.axpy!	stdlib/SparseArrays/src/sparsevector.jl	/^function LinearAlgebra.axpy!(a::Number, x::SparseVectorUnion, y::AbstractVector)$/;"	f
LinearAlgebra.fillstored!	stdlib/SparseArrays/src/sparsematrix.jl	/^LinearAlgebra.fillstored!(S::AbstractSparseMatrixCSC, x) = (fill!(nzvalview(S), x); S)$/;"	f
LinearAlgebra.fillstored!	stdlib/SparseArrays/src/sparsevector.jl	/^LinearAlgebra.fillstored!(x::SparseVector, y) = (fill!(nonzeros(x), y); x)$/;"	f
LinearAlgebra.issuccess	stdlib/SuiteSparse/src/umfpack.jl	/^LinearAlgebra.issuccess(lu::UmfpackLU) = lu.status == UMFPACK_OK$/;"	f
LinearAlgebra.lmul!	stdlib/SuiteSparse/src/spqr.jl	/^function LinearAlgebra.lmul!(Q::QRSparseQ, A::StridedVecOrMat)$/;"	f
LinearAlgebra.lmul!	stdlib/SuiteSparse/src/spqr.jl	/^function LinearAlgebra.lmul!(adjQ::Adjoint{<:Any,<:QRSparseQ}, A::StridedVecOrMat)$/;"	f
LinearAlgebra.lowrankupdate!	stdlib/SparseArrays/src/sparsevector.jl	/^function LinearAlgebra.lowrankupdate!(A::StridedMatrix, x::AbstractVector, y::SparseVectorUnion,/;"	f
LinearAlgebra.qr	stdlib/SuiteSparse/src/spqr.jl	/^LinearAlgebra.qr(A::SparseMatrixCSC; tol = _default_tol(A)) = qr(A, Val{true}, tol = tol)$/;"	f
LinearAlgebra.qr	stdlib/SuiteSparse/src/spqr.jl	/^function LinearAlgebra.qr(A::SparseMatrixCSC{Tv}; tol = _default_tol(A)) where {Tv <: CHOLMOD.VT/;"	f
LinearAlgebra.rank	stdlib/SuiteSparse/src/spqr.jl	/^LinearAlgebra.rank(F::QRSparse) = reduce(max, view(rowvals(F.R), 1:nnz(F.R)), init = eltype(rowv/;"	f
LinearAlgebra.rank	stdlib/SuiteSparse/src/spqr.jl	/^LinearAlgebra.rank(S::SparseMatrixCSC) = rank(qr(S))$/;"	f
LinearAlgebra.rdiv!	stdlib/LinearAlgebra/src/cholesky.jl	/^function LinearAlgebra.rdiv!(B::StridedMatrix, C::CholeskyPivoted)$/;"	f
LinearAlgebra.rmul!	stdlib/SuiteSparse/src/spqr.jl	/^function LinearAlgebra.rmul!(A::StridedMatrix, Q::QRSparseQ)$/;"	f
LinearAlgebra.rmul!	stdlib/SuiteSparse/src/spqr.jl	/^function LinearAlgebra.rmul!(A::StridedMatrix, adjQ::Adjoint{<:Any,<:QRSparseQ})$/;"	f
LinearAlgebra.sylvester	stdlib/LinearAlgebra/test/triangular.jl	/^LinearAlgebra.sylvester(a::Furlong,b::Furlong,c::Furlong) = -c \/ (a + b)$/;"	f
LinearIndices	base/indices.jl	/^LinearIndices(::Tuple{}) = LinearIndices{0,typeof(())}(())$/;"	f
LinearIndices	base/indices.jl	/^LinearIndices(A::Union{AbstractArray,SimpleVector}) = LinearIndices(axes(A))$/;"	f
LinearIndices	base/indices.jl	/^LinearIndices(inds::NTuple{N,AbstractUnitRange{<:Integer}}) where {N} =$/;"	f
LinearIndices	base/indices.jl	/^LinearIndices(inds::NTuple{N,Union{<:Integer,AbstractUnitRange{<:Integer}}}) where {N} =$/;"	f
LinearIndices	base/indices.jl	/^LinearIndices(sz::NTuple{N,<:Integer}) where {N} = LinearIndices(map(Base.OneTo, sz))$/;"	f
LinearIndices	base/indices.jl	/^struct LinearIndices{N,R<:NTuple{N,AbstractUnitRange{Int}}} <: AbstractArray{Int,N}$/;"	f
Link	stdlib/Markdown/src/Common/inline.jl	/^mutable struct Link$/;"	f
LinkedListItem	base/linked_list.jl	/^mutable struct LinkedListItem{T}$/;"	f
Links	stdlib/Markdown/docs/src/index.md	/^### Links$/;"	S
Linux	doc/build/distributing.md	/^### Linux$/;"	S
Linux	doc/build/distributing.md	/^Linux$/;"	s
Linux	doc/build/linux.md	/^## Linux$/;"	s
Linux Build Troubleshooting	doc/build/linux.md	/^### Linux Build Troubleshooting$/;"	S
List	stdlib/Markdown/src/Common/block.jl	/^List(b::Integer) = List(Any[], b)$/;"	f
List	stdlib/Markdown/src/Common/block.jl	/^List(x::AbstractVector) = List(x, -1)$/;"	f
List	stdlib/Markdown/src/Common/block.jl	/^List(x::AbstractVector, b::Integer) = List(x, b, false)$/;"	f
List	stdlib/Markdown/src/Common/block.jl	/^List(xs...) = List(vcat(xs...))$/;"	f
List	stdlib/Markdown/src/Common/block.jl	/^mutable struct List$/;"	f
Lists	stdlib/Markdown/docs/src/index.md	/^### Lists$/;"	S
Literal zero and one	doc/src/manual/integers-and-floating-point-numbers.md	/^## Literal zero and one$/;"	s
Literals	stdlib/Markdown/docs/src/index.md	/^### Literals$/;"	S
LiveIfLiveOut	src/llvm-late-gc-lowering.cpp	/^    std::vector<std::vector<int>> LiveIfLiveOut;$/;"	m	struct:State	typeref:typename:std::vector<std::vector<int>>	file:
LiveIn	src/llvm-late-gc-lowering.cpp	/^    BitVector LiveIn;$/;"	m	struct:BBState	typeref:typename:BitVector	file:
LiveOut	src/llvm-late-gc-lowering.cpp	/^    BitVector LiveOut;$/;"	m	struct:BBState	typeref:typename:BitVector	file:
LiveSets	src/llvm-late-gc-lowering.cpp	/^    std::vector<BitVector> LiveSets;$/;"	m	struct:State	typeref:typename:std::vector<BitVector>	file:
LoadError	base/boot.jl	/^struct LoadError <: WrappedException$/;"	f
Loaded	src/codegen_shared.h	/^    Loaded = 13,$/;"	e	enum:AddressSpace
Loading a particular file	doc/src/devdocs/debuggingtips.md	/^### Loading a particular file$/;"	S
Local Scope	doc/src/manual/variables-and-scoping.md	/^## Local Scope$/;"	s
Local invocations	doc/src/manual/parallel-computing.md	/^## Local invocations$/;"	s
LocalBar	stdlib/Distributed/test/distributed_exec.jl	/^module LocalBar$/;"	f
LocalFoo	stdlib/Distributed/test/distributed_exec.jl	/^module LocalFoo$/;"	f
LocalManager	stdlib/Distributed/src/managers.jl	/^struct LocalManager <: ClusterManager$/;"	f
LocalModule	test/embedding/LocalModule.jl	/^module LocalModule$/;"	f
LocalProcess	stdlib/Distributed/src/cluster.jl	/^    LocalProcess() = new(1)$/;"	f
LocalProcess	stdlib/Distributed/src/cluster.jl	/^mutable struct LocalProcess$/;"	f
LocalScan	src/llvm-late-gc-lowering.cpp	/^State LateLowerGCFrame::LocalScan(Function &F) {$/;"	f	class:LateLowerGCFrame	typeref:typename:State
LocalSymbolTable	src/jitlayers.h	/^    SymbolTableT LocalSymbolTable;$/;"	m	class:JuliaOJIT	typeref:typename:SymbolTableT
Locale	stdlib/Dates/src/io.jl	/^const Locale = Union{DateLocale, String}$/;"	v
Locks	doc/src/devdocs/locks.md	/^## Locks$/;"	s
Log event structure	stdlib/Logging/docs/src/index.md	/^## Log event structure$/;"	s
LogLevel	base/logging.jl	/^LogLevel(level::LogLevel) = level$/;"	f
LogLevel	base/logging.jl	/^struct LogLevel$/;"	f
LogLevelTest	test/logging.jl	/^@eval module LogLevelTest$/;"	f
LogModuleTest	test/logging.jl	/^@eval module LogModuleTest$/;"	f
LogRecord	stdlib/Test/src/logging.jl	/^LogRecord(args...; kwargs...) = LogRecord(args..., kwargs)$/;"	f
LogRecord	stdlib/Test/src/logging.jl	/^struct LogRecord$/;"	f
LogState	base/logging.jl	/^LogState(logger) = LogState(LogLevel(min_enabled_level(logger)), logger)$/;"	f
LogState	base/logging.jl	/^struct LogState$/;"	f
LogTestFailure	stdlib/Test/src/logging.jl	/^mutable struct LogTestFailure <: Result$/;"	f
Loggers	stdlib/Logging/docs/src/index.md	/^### Loggers$/;"	S
Logging	stdlib/Logging/docs/src/index.md	/^# Logging$/;"	c
Logging	stdlib/Logging/src/Logging.jl	/^module Logging$/;"	f
Logging module	stdlib/Logging/docs/src/index.md	/^### Logging module$/;"	S
Logical Operations on Arrays	doc/src/manual/missing.md	/^## Logical Operations on Arrays$/;"	s
Logical indexing	doc/src/manual/arrays.md	/^### Logical indexing$/;"	S
Logical operators	doc/src/manual/missing.md	/^## Logical operators$/;"	s
LogicalIndex	base/multidimensional.jl	/^LogicalIndex(mask::AbstractArray{Bool, N}) where {N} = LogicalIndex{CartesianIndex{N}, typeof(ma/;"	f
LogicalIndex	base/multidimensional.jl	/^LogicalIndex(mask::AbstractVector{Bool}) = LogicalIndex{Int, typeof(mask)}(mask)$/;"	f
LogicalIndex	base/multidimensional.jl	/^struct LogicalIndex{T, A<:AbstractArray{Bool}} <: AbstractVector{T}$/;"	f
LooksLikeFrameRef	src/llvm-late-gc-lowering.cpp	/^static bool LooksLikeFrameRef(Value *V) {$/;"	f	typeref:typename:bool	file:
Low-level matrix operations	stdlib/LinearAlgebra/docs/src/index.md	/^## Low-level matrix operations$/;"	s
Low-level synchronization primitives	doc/src/base/multi-threading.md	/^# Low-level synchronization primitives$/;"	c
LowerExcHandlers	src/llvm-lower-handlers.cpp	/^    LowerExcHandlers() : FunctionPass(ID)$/;"	f	struct:LowerExcHandlers	file:
LowerExcHandlers	src/llvm-lower-handlers.cpp	/^struct LowerExcHandlers : public FunctionPass {$/;"	s	file:
LowerPTLS	src/llvm-ptls.cpp	/^    LowerPTLS(bool imaging_mode=false)$/;"	f	struct:__anonf46923380111::LowerPTLS	file:
LowerPTLS	src/llvm-ptls.cpp	/^struct LowerPTLS: public ModulePass {$/;"	s	namespace:__anonf46923380111	file:
LowerSIMDLoop	src/llvm-simdloop.cpp	/^    LowerSIMDLoop() : ModulePass(ID)$/;"	f	struct:llvm::LowerSIMDLoop	file:
LowerSIMDLoop	src/llvm-simdloop.cpp	/^struct LowerSIMDLoop : public ModulePass {$/;"	s	namespace:llvm	file:
LowerTriangular	stdlib/LinearAlgebra/src/special.jl	/^LowerTriangular(A::Bidiagonal) =$/;"	f
LowerTriangular	stdlib/LinearAlgebra/src/triangular.jl	/^LowerTriangular(U::UpperTriangular) = throw(ArgumentError($/;"	f
Lowered form	doc/src/devdocs/ast.md	/^## Lowered form$/;"	s
Ls	stdlib/REPL/src/latex_symbols.jl	/^Ls = Set()$/;"	v
Lt	base/ordering.jl	/^struct Lt{T} <: Ordering$/;"	f
Lunions	src/subtype.c	/^    jl_unionstate_t Lunions;  \/\/ union state for unions on the left of A <: B$/;"	m	struct:jl_stenv_t	typeref:typename:jl_unionstate_t	file:
M	src/llvm-multiversioning.cpp	/^    Module &M;$/;"	m	struct:__anond5683ea40111::CloneCtx	typeref:typename:Module &	file:
M	src/llvm-multiversioning.cpp	/^    Module &M;$/;"	m	struct:__anond5683ea40111::ConstantUses	typeref:typename:Module &	file:
M	src/llvm-ptls.cpp	/^    Module *M;$/;"	m	struct:__anonf46923380111::LowerPTLS	typeref:typename:Module *	file:
M	test/loading.jl	/^const M = 3 # number of node names$/;"	v
M14726	test/threads_exec.jl	/^module M14726$/;"	f
M14726_2	test/threads_exec.jl	/^module M14726_2$/;"	f
M14893	test/core.jl	/^module M14893$/;"	f
M15455	test/core.jl	/^module M15455$/;"	f
M16096	test/syntax.jl	/^module M16096$/;"	f
M20889	test/numbers.jl	/^module M20889 # do we get the expected behavior without importing Base.^?$/;"	f
M21581	test/core.jl	/^module M21581$/;"	f
M22026	test/core.jl	/^module M22026$/;"	f
M22314	test/syntax.jl	/^module M22314$/;"	f
M25341	test/ambiguous.jl	/^module M25341$/;"	f
M26267	test/reflection.jl	/^module M26267$/;"	f
M27832	test/docs.jl	/^module M27832$/;"	f
M2982	test/core.jl	/^module M2982$/;"	f
M29955	test/subtype.jl	/^struct M29955{T, TV<:AbstractVector{T}}$/;"	f
M29962	test/reflection.jl	/^module M29962 end$/;"	f
M30442	test/show.jl	/^module M30442$/;"	f
M6846	test/core.jl	/^module M6846$/;"	f
M6938	test/core.jl	/^module M6938$/;"	f
M7864	test/core.jl	/^module M7864$/;"	f
M9835	test/core.jl	/^module M9835$/;"	f
M;	test/meta.jl	/^    module M; x = 2; end$/;"	f
MACHINE	base/sysinfo.jl	/^const MACHINE = Base.MACHINE$/;"	v
MACHINE_EXCLUSIVE_NAME	src/options.h	/^#define MACHINE_EXCLUSIVE_NAME /;"	d
MAKEINFO	deps/srccache/patchelf-0.9/Makefile.in	/^MAKEINFO = @MAKEINFO@$/;"	m
MAKEINFO	deps/srccache/patchelf-0.9/src/Makefile.in	/^MAKEINFO = @MAKEINFO@$/;"	m
MAKEINFO	deps/srccache/patchelf-0.9/tests/Makefile.in	/^MAKEINFO = @MAKEINFO@$/;"	m
MAKE_COMMON	deps/tools/common.mk	/^MAKE_COMMON := DESTDIR="" prefix=$(build_prefix) bindir=$(build_depsbindir) libdir=$(build_libdi/;"	m
MAKE_INSTALL	deps/tools/common.mk	/^MAKE_INSTALL = +$$(MAKE) -C $1 install $$(MAKE_COMMON) $3 DESTDIR="$2"$/;"	m
MALLOC_THRESH	src/array.c	/^#define MALLOC_THRESH /;"	d	file:
MANGLE	src/interpreter-stacktrace.c	/^#define MANGLE(/;"	d	file:
MANS	deps/srccache/patchelf-0.9/Makefile.in	/^MANS = $(man1_MANS)$/;"	m
MANTISSA_MASK	base/ryu/utils.jl	/^const MANTISSA_MASK = 0x000fffffffffffff$/;"	v
MAP_ANONYMOUS	src/cgmemmgr.cpp	/^#    define MAP_ANONYMOUS /;"	d	file:
MAP_ANONYMOUS	src/gc.h	/^#define MAP_ANONYMOUS /;"	d
MAP_ANONYMOUS	src/runtime_ccall.cpp	/^#define MAP_ANONYMOUS /;"	d	file:
MAP_ANONYMOUS	src/safepoint.c	/^#define MAP_ANONYMOUS /;"	d	file:
MAP_ANONYMOUS	src/signals-unix.c	/^#define MAP_ANONYMOUS /;"	d	file:
MAP_ANONYMOUS	stdlib/Mmap/src/Mmap.jl	/^const MAP_ANONYMOUS = Cint(Sys.isbsd() ? 0x1000 : 0x20)$/;"	v
MAP_FAILED	src/gc-stacks.c	/^#define MAP_FAILED /;"	d	file:
MAP_NORESERVE	src/gc-pages.c	/^#define MAP_NORESERVE /;"	d	file:
MAP_PRIVATE	stdlib/Mmap/src/Mmap.jl	/^const MAP_PRIVATE   = Cint(2)$/;"	v
MAP_SHARED	stdlib/Mmap/src/Mmap.jl	/^const MAP_SHARED    = Cint(1)$/;"	v
MAXHOSTNAMELEN	src/runtime_ccall.cpp	/^# define MAXHOSTNAMELEN /;"	d	file:
MAXINTVAL	src/array.c	/^#define MAXINTVAL /;"	d	file:
MAXSIZE	src/support/ios.c	/^#define MAXSIZE /;"	d	file:
MAX_ALIGN	src/julia.h	/^#    define MAX_ALIGN /;"	d
MAX_ALIGN	src/julia.h	/^#  define MAX_ALIGN /;"	d
MAX_ARGS	src/flisp/unittest.lsp	/^(define MAX_ARGS 255)$/;"	f
MAX_EXP	base/special/exp.jl	/^MAX_EXP(::Type{Float32}) = 88.72283905206835f0      # log 2^127 *(2-2^-23)$/;"	f
MAX_EXP	base/special/exp.jl	/^MAX_EXP(::Type{Float64}) = 7.09782712893383996732e2 # log 2^1023*(2-2^-52)$/;"	f
MAX_EXP10	base/special/exp10.jl	/^MAX_EXP10(::Type{Float32}) = 38.531839419103626f0     # log 2^127 *(2-2^-23)$/;"	f
MAX_EXP10	base/special/exp10.jl	/^MAX_EXP10(::Type{Float64}) = 3.08254715559916743851e2 # log 2^1023*(2-2^-52)$/;"	f
MAX_INLINE_CONST_SIZE	base/compiler/typelimits.jl	/^const MAX_INLINE_CONST_SIZE = 256$/;"	v
MAX_INL_SIZE	src/flisp/flisp.h	/^#define MAX_INL_SIZE /;"	d
MAX_INTERP_STATE_SIZE	src/interpreter-stacktrace.c	/^#define MAX_INTERP_STATE_SIZE /;"	d	file:
MAX_METHLIST_COUNT	src/typemap.c	/^#define MAX_METHLIST_COUNT /;"	d	file:
MAX_NUM_PRECOMPILE_FILES	base/loading.jl	/^const MAX_NUM_PRECOMPILE_FILES = 10$/;"	v
MAX_STACK_MAPPINGS	src/gc-stacks.c	/^#  define MAX_STACK_MAPPINGS /;"	d	file:
MAX_TYPEUNION_COMPLEXITY	base/compiler/typelimits.jl	/^const MAX_TYPEUNION_COMPLEXITY = 3$/;"	v
MAX_TYPEUNION_LENGTH	base/compiler/typelimits.jl	/^const MAX_TYPEUNION_LENGTH = 3$/;"	v
MAX_UNSPECIALIZED_CONFLICTS	src/gf.c	/^#define MAX_UNSPECIALIZED_CONFLICTS /;"	d	file:
MBEDTLS_BB_NAME	deps/mbedtls.mk	/^MBEDTLS_BB_NAME := MbedTLS.v$(MBEDTLS_VER)$/;"	m
MBEDTLS_BB_URL_BASE	deps/mbedtls.mk	/^MBEDTLS_BB_URL_BASE := https:\/\/github.com\/JuliaWeb\/MbedTLSBuilder\/releases\/download\/$(MBE/;"	m
MBEDTLS_INSTALL	deps/mbedtls.mk	/^define MBEDTLS_INSTALL$/;"	m
MBEDTLS_OPTS	deps/mbedtls.mk	/^MBEDTLS_OPTS := $(CMAKE_COMMON) -DUSE_SHARED_MBEDTLS_LIBRARY=ON \\$/;"	m
MBEDTLS_SRC	deps/mbedtls.mk	/^MBEDTLS_SRC = mbedtls-$(MBEDTLS_VER)-apache$/;"	m
MBEDTLS_SRC	deps/mbedtls.mk	/^MBEDTLS_SRC = mbedtls-$(MBEDTLS_VER)-gpl$/;"	m
MBEDTLS_URL	deps/mbedtls.mk	/^MBEDTLS_URL = https:\/\/tls.mbed.org\/download\/$(MBEDTLS_SRC).tgz$/;"	m
MD	stdlib/Markdown/src/parse/parse.jl	/^    MD(content::AbstractVector, meta::Dict = Dict()) =$/;"	f
MD	stdlib/Markdown/src/parse/parse.jl	/^MD(xs...) = MD(vcat(xs...))$/;"	f
MD	stdlib/Markdown/src/parse/parse.jl	/^function MD(cfg::Config, xs...)$/;"	f
MD	stdlib/Markdown/src/parse/parse.jl	/^mutable struct MD$/;"	f
MEMDEBUG	src/options.h	/^#define MEMDEBUG$/;"	d
MEMDEBUG	stdlib/InteractiveUtils/test/runtests.jl	/^const MEMDEBUG = ccall(:jl_is_memdebug, Bool, ())$/;"	v
META	base/docs/Docs.jl	/^const META    = gensym(:meta)$/;"	v
META	stdlib/Markdown/src/parse/config.jl	/^const META = IdDict{Function, Dict{Symbol, Any}}()$/;"	v
METHODINSTANCE_TAG	stdlib/Serialization/src/Serialization.jl	/^const METHODINSTANCE_TAG = sertag(Core.MethodInstance)$/;"	v
METHOD_TAG	stdlib/Serialization/src/Serialization.jl	/^const METHOD_TAG = sertag(Method)$/;"	v
MEXP	stdlib/Random/src/DSFMT.jl	/^const MEXP = 19937$/;"	v
MIME	base/multimedia.jl	/^MIME(s) = MIME{Symbol(s)}()$/;"	f
MIME	base/multimedia.jl	/^struct MIME{mime} end$/;"	f
MIME_str	base/multimedia.jl	/^macro MIME_str(s)$/;"	f
MINSPERHOUR	src/support/tzfile.h	/^#define MINSPERHOUR	/;"	d
MINSTKSZ	src/task.c	/^#define MINSTKSZ /;"	d	file:
MIN_BLOCK_PG_ALLOC	src/gc-pages.c	/^#define MIN_BLOCK_PG_ALLOC /;"	d	file:
MIN_EXP	base/special/exp.jl	/^MIN_EXP(::Type{Float32}) = -103.97207708f0            # log 2^-150$/;"	f
MIN_EXP	base/special/exp.jl	/^MIN_EXP(::Type{Float64}) = -7.451332191019412076235e2 # log 2^-1075$/;"	f
MIN_EXP10	base/special/exp10.jl	/^MIN_EXP10(::Type{Float32}) = -45.15449934959718f0         # log10 2^-150$/;"	f
MIN_EXP10	base/special/exp10.jl	/^MIN_EXP10(::Type{Float64}) = -3.23607245338779784854769e2 # log10 2^-1075$/;"	f
MIN_STACK	src/interpreter-stacktrace.c	/^#define MIN_STACK /;"	d	file:
MIN_STACK_MAPPINGS_PER_POOL	src/gc-stacks.c	/^#define MIN_STACK_MAPPINGS_PER_POOL /;"	d	file:
MIState	stdlib/REPL/src/LineEdit.jl	/^MIState(i, c, a, m) = MIState(i, c, a, m, String[], 0, Char[], 0, :none, :none)$/;"	f
MIState	stdlib/REPL/src/LineEdit.jl	/^mutable struct MIState$/;"	f
MIX	src/flisp/equal.c	/^#define MIX(/;"	d	file:
MKDIR_P	deps/srccache/patchelf-0.9/Makefile.in	/^MKDIR_P = @MKDIR_P@$/;"	m
MKDIR_P	deps/srccache/patchelf-0.9/src/Makefile.in	/^MKDIR_P = @MKDIR_P@$/;"	m
MKDIR_P	deps/srccache/patchelf-0.9/tests/Makefile.in	/^MKDIR_P = @MKDIR_P@$/;"	m
MM_HERMITIAN	stdlib/SuiteSparse/src/cholmod_h.jl	/^const MM_HERMITIAN          = 4$/;"	v
MM_HERMITIAN_POSDIAG	stdlib/SuiteSparse/src/cholmod_h.jl	/^const MM_HERMITIAN_POSDIAG  = 7$/;"	v
MM_RECTANGULAR	stdlib/SuiteSparse/src/cholmod_h.jl	/^const MM_RECTANGULAR        = 1$/;"	v
MM_SKEW_SYMMETRIC	stdlib/SuiteSparse/src/cholmod_h.jl	/^const MM_SKEW_SYMMETRIC     = 5$/;"	v
MM_SYMMETRIC	stdlib/SuiteSparse/src/cholmod_h.jl	/^const MM_SYMMETRIC          = 3$/;"	v
MM_SYMMETRIC_POSDIAG	stdlib/SuiteSparse/src/cholmod_h.jl	/^const MM_SYMMETRIC_POSDIAG  = 6$/;"	v
MM_UNSYMMETRIC	stdlib/SuiteSparse/src/cholmod_h.jl	/^const MM_UNSYMMETRIC        = 2$/;"	v
MODE_INVALID	src/dump.c	/^    MODE_INVALID = 0,$/;"	e	enum:_DUMP_MODES	file:
MODE_IR	src/dump.c	/^    MODE_IR,$/;"	e	enum:_DUMP_MODES	file:
MODE_MODULE	src/dump.c	/^    MODE_MODULE$/;"	e	enum:_DUMP_MODES	file:
MODULE_TAG	stdlib/Serialization/src/Serialization.jl	/^const MODULE_TAG = sertag(Module)$/;"	v
MONSPERYEAR	src/support/tzfile.h	/^#define MONSPERYEAR	/;"	d
MONTHDAYS	stdlib/Dates/src/query.jl	/^const MONTHDAYS = (0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334)$/;"	v
MOST_OF	src/support/ios.c	/^#define MOST_OF(/;"	d	file:
MPFR	base/mpfr.jl	/^module MPFR$/;"	f
MPFR.BigFloat	base/deprecated.jl	/^MPFR.BigFloat(x, prec::Int) = BigFloat(x; precision=prec)$/;"	f
MPFR.BigFloat	base/deprecated.jl	/^MPFR.BigFloat(x, prec::Int, rounding::RoundingMode) = BigFloat(x, rounding; precision=prec)$/;"	f
MPFR.BigFloat	base/deprecated.jl	/^MPFR.BigFloat(x::Real, prec::Int) = BigFloat(x; precision=prec)$/;"	f
MPFR.BigFloat	base/deprecated.jl	/^MPFR.BigFloat(x::Real, prec::Int, rounding::RoundingMode) = BigFloat(x, rounding; precision=prec/;"	f
MPFR_BB_NAME	deps/mpfr.mk	/^MPFR_BB_NAME := MPFR.v$(MPFR_VER)$/;"	m
MPFR_BB_URL_BASE	deps/mpfr.mk	/^MPFR_BB_URL_BASE := https:\/\/github.com\/JuliaPackaging\/Yggdrasil\/releases\/download\/MPFR-v$/;"	m
MPFR_CHECK_MFLAGS	deps/mpfr.mk	/^MPFR_CHECK_MFLAGS := LDFLAGS="$(LDFLAGS) -Wl,-rpath,'$(build_libdir)'"$/;"	m
MPFR_OPTS	deps/mpfr.mk	/^MPFR_OPTS := --with-gmp-include=$(abspath $(build_includedir)) --with-gmp-lib=$(abspath $(build_/;"	m
MPZ	base/gmp.jl	/^module MPZ$/;"	f
MSG_BOUNDARY	stdlib/Distributed/src/messages.jl	/^const MSG_BOUNDARY = UInt8[0x79, 0x8e, 0x8e, 0xf5, 0x6e, 0x9b, 0x2e, 0x97, 0xd5, 0x7d]$/;"	v
MS_ASYNC	stdlib/Mmap/src/Mmap.jl	/^const MS_ASYNC = 1$/;"	v
MS_INVALIDATE	stdlib/Mmap/src/Mmap.jl	/^const MS_INVALIDATE = 2$/;"	v
MS_SYNC	stdlib/Mmap/src/Mmap.jl	/^const MS_SYNC = 4$/;"	v
MT_CACHE_F	stdlib/Random/src/RNGs.jl	/^const MT_CACHE_F = 501 << 1 # number of Float64 in the cache$/;"	v
MT_CACHE_I	stdlib/Random/src/RNGs.jl	/^const MT_CACHE_I = 501 << 4 # number of bytes in the UInt128 cache$/;"	v
MUI_DIRECTORYPAGE_TEXT_TOP	contrib/windows/build-installer.nsi	/^!define MUI_DIRECTORYPAGE_TEXT_TOP "Julia may be installed in any accessible directory.$\\r$\\n$/;"	d
MUI_FINISHPAGE_RUN	contrib/windows/build-installer.nsi	/^!define MUI_FINISHPAGE_RUN$/;"	d
MUI_FINISHPAGE_RUN_FUNCTION	contrib/windows/build-installer.nsi	/^!define MUI_FINISHPAGE_RUN_FUNCTION ShowInstallFolder$/;"	d
MUI_FINISHPAGE_RUN_TEXT	contrib/windows/build-installer.nsi	/^!define MUI_FINISHPAGE_RUN_TEXT "Open the Julia install folder"$/;"	d
MUI_FINISHPAGE_SHOWREADME	contrib/windows/build-installer.nsi	/^!define MUI_FINISHPAGE_SHOWREADME$/;"	d
MUI_FINISHPAGE_SHOWREADME_FUNCTION	contrib/windows/build-installer.nsi	/^!define MUI_FINISHPAGE_SHOWREADME_FUNCTION AddToStartMenu$/;"	d
MUI_FINISHPAGE_SHOWREADME_TEXT	contrib/windows/build-installer.nsi	/^!define MUI_FINISHPAGE_SHOWREADME_TEXT "Create Start Menu folder and shortcut"$/;"	d
MUI_FINISHPAGE_TEXT	contrib/windows/build-installer.nsi	/^!define MUI_FINISHPAGE_TEXT "Julia has been successfully installed.$\\r$\\n$\\r$\\nClick Finish /;"	d
MUI_FINISHPAGE_TITLE	contrib/windows/build-installer.nsi	/^!define MUI_FINISHPAGE_TITLE "Julia installation complete"$/;"	d
MUI_HEADERIMAGE	contrib/windows/build-installer.nsi	/^!define MUI_HEADERIMAGE$/;"	d
MUI_HEADERIMAGE_BITMAP	contrib/windows/build-installer.nsi	/^!define MUI_HEADERIMAGE_BITMAP "${JULIAHOME}\\contrib\\windows\\julia-header.bmp"$/;"	d
MUI_HEADERIMAGE_RIGHT	contrib/windows/build-installer.nsi	/^!define MUI_HEADERIMAGE_RIGHT$/;"	d
MUI_ICON	contrib/windows/build-installer.nsi	/^!define MUI_ICON "${JULIAHOME}\\contrib\\windows\\julia.ico"$/;"	d
MUI_PAGE_CUSTOMFUNCTION_LEAVE	contrib/windows/build-installer.nsi	/^!define MUI_PAGE_CUSTOMFUNCTION_LEAVE createDesktopLink$/;"	d
MUI_PAGE_CUSTOMFUNCTION_SHOW	contrib/windows/build-installer.nsi	/^!define MUI_PAGE_CUSTOMFUNCTION_SHOW desktopCheckbox$/;"	d
MUI_PAGE_HEADER_SUBTEXT	contrib/windows/build-installer.nsi	/^!define MUI_PAGE_HEADER_SUBTEXT ""$/;"	d
MUI_PAGE_HEADER_TEXT	contrib/windows/build-installer.nsi	/^!define MUI_PAGE_HEADER_TEXT "Choose Installation Directory"$/;"	d
MUI_PAGE_HEADER_TEXT	contrib/windows/build-installer.nsi	/^!define MUI_PAGE_HEADER_TEXT "Uninstall Julia"$/;"	d
MUI_UNCONFIRMPAGE_TEXT_LOCATION	contrib/windows/build-installer.nsi	/^!define MUI_UNCONFIRMPAGE_TEXT_LOCATION "Uninstalling from"$/;"	d
MUI_UNCONFIRMPAGE_TEXT_TOP	contrib/windows/build-installer.nsi	/^!define MUI_UNCONFIRMPAGE_TEXT_TOP "Julia will be uninstalled from the following folder."$/;"	d
MUI_UNICON	contrib/windows/build-installer.nsi	/^!define MUI_UNICON "${JULIAHOME}\\contrib\\windows\\julia.ico"$/;"	d
MUI_WELCOMEFINISHPAGE_BITMAP	contrib/windows/build-installer.nsi	/^!define MUI_WELCOMEFINISHPAGE_BITMAP "${JULIAHOME}\\contrib\\windows\\julia-banner.bmp"$/;"	d
MUI_WELCOMEPAGE_TEXT	contrib/windows/build-installer.nsi	/^!define MUI_WELCOMEPAGE_TEXT  "Setup will guide you through installation.$\\r$\\n$\\r$\\nClick N/;"	d
MUI_WELCOMEPAGE_TITLE	contrib/windows/build-installer.nsi	/^!define MUI_WELCOMEPAGE_TITLE "Welcome to Julia ${Version}"$/;"	d
MULTIQ_HEAP_C	src/options.h	/^#define MULTIQ_HEAP_C /;"	d
MULTIQ_TASKS_PER_HEAP	src/options.h	/^#define MULTIQ_TASKS_PER_HEAP /;"	d
Machine epsilon	doc/src/manual/integers-and-floating-point-numbers.md	/^### Machine epsilon$/;"	S
Macro invocation	doc/src/manual/metaprogramming.md	/^### Macro invocation$/;"	S
Macro-generated code	doc/src/manual/documentation.md	/^### Macro-generated code$/;"	S
MacroCalls	test/testhelpers/MacroCalls.jl	/^module MacroCalls$/;"	f
MacroGenerated	test/docs.jl	/^module MacroGenerated$/;"	f
MacroTest	stdlib/InteractiveUtils/test/runtests.jl	/^module MacroTest$/;"	f
Macro_Yielding_Global_Assignment	test/core.jl	/^module Macro_Yielding_Global_Assignment$/;"	f
Macros	doc/src/devdocs/ast.md	/^### Macros$/;"	S
Macros	doc/src/manual/documentation.md	/^### Macros$/;"	S
Macros and dispatch	doc/src/manual/metaprogramming.md	/^### Macros and dispatch$/;"	S
Main SSA data structure	doc/src/devdocs/ssair.md	/^## Main SSA data structure$/;"	s
Maj	stdlib/SHA/src/base_functions.jl	/^Maj(x,y,z) = ((x & y) ⊻ (x & z) ⊻ (y & z))$/;"	f
MakeIdentityFunction	src/llvmcalltest.cpp	/^JL_DLLEXPORT llvm::Function *MakeIdentityFunction(llvm::PointerType *AnyTy) {$/;"	f	typeref:typename:JL_DLLEXPORT llvm::Function *
MakeLoadGlobalFunction	src/llvmcalltest.cpp	/^JL_DLLEXPORT llvm::Function *MakeLoadGlobalFunction(llvm::PointerType *AnyTy) {$/;"	f	typeref:typename:JL_DLLEXPORT llvm::Function *
MakePDP	src/clangsa/GCChecker.cpp	/^    #define MakePDP /;"	d	file:
Makefile	deps/srccache/patchelf-0.9/Makefile.in	/^Makefile: $(srcdir)\/Makefile.in $(top_builddir)\/config.status$/;"	t
Makefile	deps/srccache/patchelf-0.9/src/Makefile.in	/^Makefile: $(srcdir)\/Makefile.in $(top_builddir)\/config.status$/;"	t
Makefile	deps/srccache/patchelf-0.9/tests/Makefile.in	/^Makefile: $(srcdir)\/Makefile.in $(top_builddir)\/config.status$/;"	t
Manipulating the Garbage Collector	doc/src/manual/embedding.md	/^### Manipulating the Garbage Collector$/;"	S
Mapping C Functions to Julia	doc/src/manual/calling-c-and-fortran-code.md	/^## Mapping C Functions to Julia$/;"	s
Mar	stdlib/Dates/src/query.jl	/^const Mar = 3$/;"	v
Mar	stdlib/Dates/test/adjusters.jl	/^Mar = Dates.DateTime(2013, 3, 3) #Sunday$/;"	v
Mar	stdlib/Dates/test/query.jl	/^Mar = Dates.DateTime(2013, 3, 3) # Sunday$/;"	v
March	stdlib/Dates/src/query.jl	/^const March = 3$/;"	v
Markdown	stdlib/Markdown/docs/src/index.md	/^# Markdown$/;"	c
Markdown	stdlib/Markdown/src/Markdown.jl	/^module Markdown$/;"	f
Masked	stdlib/Random/src/Random.jl	/^struct Masked{T<:Integer,S} <: Sampler{T}$/;"	f
Math	base/math.jl	/^module Math$/;"	f
MathConstants	base/mathconstants.jl	/^module MathConstants$/;"	f
Mathematical Functions	doc/src/base/math.md	/^## Mathematical Functions$/;"	s
Mathematical Operations and Elementary Functions	doc/src/manual/mathematical-operations.md	/^# Mathematical Operations and Elementary Functions$/;"	c
Mathematics	doc/src/base/math.md	/^# Mathematics$/;"	c
Matrix	base/baseext.jl	/^Matrix(::UndefInitializer, m::Integer, n::Integer) = Matrix{Any}(undef, Int(m), Int(n))$/;"	f
Matrix	stdlib/LinearAlgebra/src/bidiag.jl	/^Matrix(A::Bidiagonal{T}) where {T} = Matrix{T}(A)$/;"	f
Matrix	stdlib/LinearAlgebra/src/bidiag.jl	/^function Matrix{T}(A::Bidiagonal) where T$/;"	f
Matrix	stdlib/LinearAlgebra/src/cholesky.jl	/^Matrix(C::Cholesky) = Array(AbstractArray(C))$/;"	f
Matrix	stdlib/LinearAlgebra/src/cholesky.jl	/^Matrix(F::CholeskyPivoted) = Array(AbstractArray(F))$/;"	f
Matrix	stdlib/LinearAlgebra/src/diagonal.jl	/^Matrix(D::Diagonal) = diagm(0 => D.diag)$/;"	f
Matrix	stdlib/LinearAlgebra/src/eigen.jl	/^Matrix(F::Eigen) = Array(AbstractArray(F))$/;"	f
Matrix	stdlib/LinearAlgebra/src/hessenberg.jl	/^Matrix(F::Hessenberg) = Array(AbstractArray(F))$/;"	f
Matrix	stdlib/LinearAlgebra/src/hessenberg.jl	/^Matrix(H::UpperHessenberg{T}) where {T} = Matrix{T}(H)$/;"	f
Matrix	stdlib/LinearAlgebra/src/hessenberg.jl	/^function Matrix{T}(H::UpperHessenberg) where T$/;"	f
Matrix	stdlib/LinearAlgebra/src/ldlt.jl	/^Matrix(F::LDLt) = Array(AbstractArray(F))$/;"	f
Matrix	stdlib/LinearAlgebra/src/lq.jl	/^Matrix(A::LQ) = Array(AbstractArray(A))$/;"	f
Matrix	stdlib/LinearAlgebra/src/lq.jl	/^Matrix(A::LQPackedQ{T}) where {T} = Matrix{T}(A)$/;"	f
Matrix	stdlib/LinearAlgebra/src/lu.jl	/^Matrix(F::LU) = Array(AbstractArray(F))$/;"	f
Matrix	stdlib/LinearAlgebra/src/lu.jl	/^Matrix(F::LU{T,Tridiagonal{T,V}}) where {T,V} = Array(AbstractArray(F))$/;"	f
Matrix	stdlib/LinearAlgebra/src/qr.jl	/^Matrix(F::QRPivoted) = Array(AbstractArray(F))$/;"	f
Matrix	stdlib/LinearAlgebra/src/qr.jl	/^Matrix(F::Union{QR,QRCompactWY}) = Array(AbstractArray(F))$/;"	f
Matrix	stdlib/LinearAlgebra/src/qr.jl	/^Matrix(Q::AbstractQ{T}) where {T} = Matrix{T}(Q)$/;"	f
Matrix	stdlib/LinearAlgebra/src/schur.jl	/^Matrix(F::Schur) = Array(AbstractArray(F))$/;"	f
Matrix	stdlib/LinearAlgebra/src/svd.jl	/^Matrix(F::SVD) = Array(AbstractArray(F))$/;"	f
Matrix	stdlib/LinearAlgebra/src/symmetric.jl	/^function Matrix(A::Hermitian)$/;"	f
Matrix	stdlib/LinearAlgebra/src/symmetric.jl	/^function Matrix(A::Symmetric)$/;"	f
Matrix	stdlib/LinearAlgebra/src/triangular.jl	/^        Matrix(A::$t{T}) where {T} = Matrix{T}(A)$/;"	f
Matrix	stdlib/LinearAlgebra/src/triangular.jl	/^function Matrix{T}(A::LowerTriangular) where T$/;"	f
Matrix	stdlib/LinearAlgebra/src/triangular.jl	/^function Matrix{T}(A::UnitLowerTriangular) where T$/;"	f
Matrix	stdlib/LinearAlgebra/src/triangular.jl	/^function Matrix{T}(A::UnitUpperTriangular) where T$/;"	f
Matrix	stdlib/LinearAlgebra/src/triangular.jl	/^function Matrix{T}(A::UpperTriangular) where T$/;"	f
Matrix	stdlib/LinearAlgebra/src/tridiag.jl	/^Matrix(M::SymTridiagonal{T}) where {T} = Matrix{T}(M)$/;"	f
Matrix	stdlib/LinearAlgebra/src/tridiag.jl	/^Matrix(M::Tridiagonal{T}) where {T} = Matrix{T}(M)$/;"	f
Matrix	stdlib/LinearAlgebra/src/tridiag.jl	/^function Matrix{T}(M::SymTridiagonal) where T$/;"	f
Matrix	stdlib/LinearAlgebra/src/tridiag.jl	/^function Matrix{T}(M::Tridiagonal{T}) where T$/;"	f
Matrix	stdlib/LinearAlgebra/src/uniformscaling.jl	/^Matrix(s::UniformScaling, dims::Dims{2}) = Matrix{eltype(s)}(s, dims)$/;"	f
Matrix	stdlib/LinearAlgebra/src/uniformscaling.jl	/^Matrix(s::UniformScaling, m::Integer, n::Integer) = Matrix(s, Dims((m, n)))$/;"	f
Matrix	stdlib/LinearAlgebra/src/uniformscaling.jl	/^function Matrix{T}(s::UniformScaling, dims::Dims{2}) where {T}$/;"	f
Matrix	stdlib/SparseArrays/src/sparsematrix.jl	/^function Matrix(S::AbstractSparseMatrixCSC{Tv}) where Tv$/;"	f
Matrix	stdlib/SuiteSparse/src/cholmod.jl	/^Matrix(D::Dense{T}) where {T} = Matrix{T}(D)$/;"	f
Matrix	stdlib/SuiteSparse/src/cholmod.jl	/^function Matrix{T}(D::Dense{T}) where T$/;"	f
Matrix factorizations	stdlib/LinearAlgebra/docs/src/index.md	/^### Matrix factorizations$/;"	S
MatrixIllConditionedException	stdlib/SuiteSparse/src/umfpack.jl	/^struct MatrixIllConditionedException <: Exception$/;"	f
MaxDecimalExponent	base/grisu/float.jl	/^const MaxDecimalExponent = 340$/;"	v
MaxPtrNumber	src/llvm-late-gc-lowering.cpp	/^    int MaxPtrNumber;$/;"	m	struct:State	typeref:typename:int	file:
MaxSafepointNumber	src/llvm-late-gc-lowering.cpp	/^    int MaxSafepointNumber;$/;"	m	struct:State	typeref:typename:int	file:
May	stdlib/Dates/src/query.jl	/^const May = 5$/;"	v
May	stdlib/Dates/test/adjusters.jl	/^May = Dates.DateTime(2013, 5, 5) #Sunday$/;"	v
May	stdlib/Dates/test/query.jl	/^May = Dates.DateTime(2013, 5, 5) # Sunday$/;"	v
MaybeExtractUnion	src/llvm-late-gc-lowering.cpp	/^Value *LateLowerGCFrame::MaybeExtractUnion(std::pair<Value*,int> Val, Instruction *InsertBefore)/;"	f	class:LateLowerGCFrame	typeref:typename:Value *
MaybeFunc	test/core.jl	/^@noinline MaybeFunc(T) = Union{T, Nothing}$/;"	f
MaybeNoteDef	src/llvm-late-gc-lowering.cpp	/^void LateLowerGCFrame::MaybeNoteDef(State &S, BBState &BBS, Value *Def, const std::vector<int> &/;"	f	class:LateLowerGCFrame	typeref:typename:void
MaybeResize	src/llvm-late-gc-lowering.cpp	/^static void MaybeResize(BBState &BBS, unsigned Idx) {$/;"	f	typeref:typename:void	file:
MaybeUndef	base/compiler/typelattice.jl	/^    MaybeUndef(@nospecialize(typ)) = new(typ)$/;"	f
MaybeUndef	base/compiler/typelattice.jl	/^struct MaybeUndef$/;"	f
Measure performance with [`@time`](@ref) and pay attention to memory allocation	doc/src/manual/performance-tips.md	/^## Measure performance with [`@time`](@ref) and pay attention to memory allocation$/;"	s
MemMgr	src/jitlayers.h	/^    std::shared_ptr<RTDyldMemoryManager> MemMgr;$/;"	m	class:JuliaOJIT	typeref:typename:std::shared_ptr<RTDyldMemoryManager>
MemObj	src/disasm.cpp	/^    const FuncMCView &MemObj;$/;"	m	class:__anon2853c92e0211::SymbolTable	typeref:typename:const FuncMCView &	file:
MemOp	src/llvm-alloc-opt.cpp	/^        MemOp(Instruction *inst, unsigned opno)$/;"	f	struct:__anon0a1571000111::Optimizer::MemOp	file:
MemOp	src/llvm-alloc-opt.cpp	/^    struct MemOp {$/;"	s	struct:__anon0a1571000111::Optimizer	file:
Memory	doc/src/manual/faq.md	/^## Memory$/;"	s
Memory	src/abi_x86_64.cpp	/^enum ArgClass { Integer, Sse, SseUp, X87, X87Up, ComplexX87, NoClass, Memory };$/;"	e	enum:ArgClass	file:
Memory Management	doc/src/manual/embedding.md	/^## Memory Management$/;"	s
Memory Ownership	doc/src/manual/calling-c-and-fortran-code.md	/^### Memory Ownership$/;"	S
Memory Sanitizer (MSAN)	doc/src/devdocs/sanitizers.md	/^## Memory Sanitizer (MSAN)$/;"	s
Memory allocation analysis	doc/src/manual/profile.md	/^# Memory allocation analysis$/;"	c
Memory layout	doc/src/base/base.md	/^### Memory layout$/;"	S
Memory layout of Julia Objects	doc/src/devdocs/object.md	/^# Memory layout of Julia Objects$/;"	c
Memory-mapped I/O	stdlib/Mmap/docs/src/index.md	/^# Memory-mapped I\/O$/;"	c
MergeOptions	stdlib/LibGit2/src/types.jl	/^@kwdef struct MergeOptions$/;"	f
MergeSort	base/sort.jl	/^const MergeSort     = MergeSortAlg()$/;"	v
MergeSortAlg	base/sort.jl	/^struct MergeSortAlg     <: Algorithm end$/;"	f
Merging backports into the release branch	doc/build/distributing.md	/^## Merging backports into the release branch$/;"	s
MersenneTwister	stdlib/Random/src/RNGs.jl	/^    function MersenneTwister(seed, state, vals, ints, idxF, idxI)$/;"	f
MersenneTwister	stdlib/Random/src/RNGs.jl	/^MersenneTwister(seed::Vector{UInt32}, state::DSFMT_state) =$/;"	f
MersenneTwister	stdlib/Random/src/RNGs.jl	/^MersenneTwister(seed=nothing) =$/;"	f
MersenneTwister	stdlib/Random/src/RNGs.jl	/^mutable struct MersenneTwister <: AbstractRNG$/;"	f
Meta	base/meta.jl	/^module Meta$/;"	f
Meta	doc/src/base/base.md	/^## Meta$/;"	s
Meta.isexpr	test/syntax.jl	/^@test Meta.isexpr(Meta.lower(@__MODULE__, :(@id28992((.+)(a,b) = 0))), :error)$/;"	f
Meta.lower	test/syntax.jl	/^@test Meta.lower(@__MODULE__, :( :(:) = 2 )) == Expr(:error, "invalid assignment location \\":(:/;"	f
Meta.lower	test/syntax.jl	/^@test Meta.lower(Main, :(@inline f(p::Int=2) = 3)).args[1].code[end-1].args[3].inlineable$/;"	f
Meta.lower	test/syntax.jl	/^@test Meta.lower(Main, :(f(d:Int...) = nothing)) == Expr(:error, "\\"d:Int\\" is not a valid fun/;"	f
Meta.lower	test/syntax.jl	/^@test Meta.lower(Main, :(struct A; A() = new{Int}(); end)) == Expr(:error, "too many type parame/;"	f
Meta.lower	test/syntax.jl	/^@test Meta.lower(Main, :(struct A{T, S}; A() = new{Int}(); end)) == Expr(:error, "too few type p/;"	f
Meta.lower	test/syntax.jl	/^@test Meta.lower(Main, Meta.parse("false(x) = x")) == Expr(:error, "invalid function name \\"fal/;"	f
Meta.lower	test/syntax.jl	/^@test Meta.lower(Main, Meta.parse("foo(y = (global x)) = y")) == Expr(:error, "misplaced \\"glob/;"	f
Meta.lower	test/syntax.jl	/^@test Meta.lower(Main, Meta.parse("true(x) = x")) == Expr(:error, "invalid function name \\"true/;"	f
Meta.parse	test/syntax.jl	/^@test Meta.parse("+(x::T,y::T) where {T} = 0") == Meta.parse("(+)(x::T,y::T) where {T} = 0")$/;"	f
Metaprogramming	doc/src/manual/metaprogramming.md	/^# Metaprogramming$/;"	c
MeterUnits	test/arrayops.jl	/^    MeterUnits(val::T, pow::Int) where {T} = MeterUnits{T,pow}(val)$/;"	f
MeterUnits	test/arrayops.jl	/^    struct MeterUnits{T,P} <: Number$/;"	f
Method	doc/src/devdocs/ast.md	/^### Method$/;"	S
Method Tables	doc/src/devdocs/functions.md	/^## Method Tables$/;"	s
MethodCompletion	stdlib/REPL/src/REPLCompletions.jl	/^struct MethodCompletion <: Completion$/;"	f
MethodDeletion	test/reflection.jl	/^module MethodDeletion$/;"	f
MethodError	base/boot.jl	/^    MethodError(@nospecialize(f), @nospecialize(args), world::UInt) = new(f, args, world)$/;"	f
MethodError	base/boot.jl	/^MethodError(@nospecialize(f), @nospecialize(args)) = MethodError(f, args, typemax_UInt)$/;"	f
MethodError	base/boot.jl	/^struct MethodError <: Exception$/;"	f
MethodInstance	doc/src/devdocs/ast.md	/^### MethodInstance$/;"	S
MethodList	base/reflection.jl	/^function MethodList(mt::Core.MethodTable)$/;"	f
MethodList	base/reflection.jl	/^mutable struct MethodList$/;"	f
MethodType11007	test/errorshow.jl	/^abstract type MethodType11007 <: InvokeType11007 end$/;"	f
Methods	doc/src/manual/methods.md	/^# Methods$/;"	c
MinDecimalExponent	base/grisu/float.jl	/^const MinDecimalExponent = -348$/;"	v
MiniCassette	test/compiler/contextual.jl	/^module MiniCassette$/;"	f
Miscellaneous	HISTORY.md	/^#### Miscellaneous$/;"	t
Miscellaneous changes	HISTORY.md	/^Miscellaneous changes$/;"	s
Missing	base/essentials.jl	/^struct Missing end$/;"	f
Missing Values	doc/src/base/base.md	/^## Missing Values$/;"	s
MissingException	base/missing.jl	/^struct MissingException <: Exception$/;"	f
MixedKeyDict	test/compiler/inference.jl	/^struct MixedKeyDict{T<:Tuple} #<: AbstractDict{Any,Any}$/;"	f
Mmap	stdlib/Mmap/src/Mmap.jl	/^module Mmap$/;"	f
Mod18756	test/syntax.jl	/^module Mod18756$/;"	f
ModInt	stdlib/LinearAlgebra/test/generic.jl	/^struct ModInt{n}$/;"	f
ModalInterface	stdlib/REPL/src/LineEdit.jl	/^struct ModalInterface <: TextInterface$/;"	f
ModeState	stdlib/REPL/src/LineEdit.jl	/^abstract type ModeState end$/;"	f
Modifying an existing docstring in `base/`	CONTRIBUTING.md	/^#### Modifying an existing docstring in `base\/`$/;"	t
Modifying base more efficiently with Revise.jl	CONTRIBUTING.md	/^#### Modifying base more efficiently with Revise.jl$/;"	t
Modifying files in `doc/src/`	CONTRIBUTING.md	/^#### Modifying files in `doc\/src\/`$/;"	t
Module	base/boot.jl	/^Module(name::Symbol=:anonymous, std_imports::Bool=true) = ccall(:jl_f_new_module, Ref{Module}, (/;"	f
Module bindings	doc/src/devdocs/reflection.md	/^## Module bindings$/;"	s
Module initialization and precompilation	doc/src/manual/modules.md	/^### Module initialization and precompilation$/;"	S
Module loading	doc/src/devdocs/require.md	/^# Module loading$/;"	c
Module loading callbacks	doc/src/devdocs/require.md	/^### Module loading callbacks$/;"	S
ModuleCompletion	stdlib/REPL/src/REPLCompletions.jl	/^struct ModuleCompletion <: Completion$/;"	f
ModuleHandleT	src/jitlayers.h	/^    typedef orc::VModuleKey ModuleHandleT;$/;"	t	class:JuliaOJIT	typeref:typename:orc::VModuleKey
ModuleMacroDoc	test/docs.jl	/^module ModuleMacroDoc$/;"	f
Modules	doc/src/manual/documentation.md	/^### Modules$/;"	S
Modules and files	doc/src/manual/modules.md	/^### Modules and files$/;"	S
More About Callbacks	doc/src/manual/calling-c-and-fortran-code.md	/^## More About Callbacks$/;"	s
More about types	doc/src/devdocs/types.md	/^# More about types$/;"	c
More dots: Fuse vectorized operations	doc/src/manual/performance-tips.md	/^## More dots: Fuse vectorized operations$/;"	s
Mozilla's Record and Replay Framework (rr)	doc/src/devdocs/debuggingtips.md	/^## Mozilla's Record and Replay Framework (rr)$/;"	s
MsgHeader	stdlib/Distributed/src/messages.jl	/^    MsgHeader(respond_oid=RRID(0,0), notify_oid=RRID(0,0)) =$/;"	f
MsgHeader	stdlib/Distributed/src/messages.jl	/^struct MsgHeader$/;"	f
Mul	test/subtype.jl	/^const Mul = Applied{Style,Factors} where Factors<:Tuple where Style$/;"	v
MulAddMul	stdlib/LinearAlgebra/src/generic.jl	/^MulAddMul() = MulAddMul(true, false)$/;"	f
MulAddMul	stdlib/LinearAlgebra/src/generic.jl	/^MulAddMul(alpha::TA, beta::TB) where {TA, TB} =$/;"	f
MulAddMul	stdlib/LinearAlgebra/src/generic.jl	/^struct MulAddMul{ais1, bis0, TA, TB}$/;"	f
MulQuasiArray	test/subtype.jl	/^const MulQuasiArray = ApplyQuasiArray{T,N,MUL} where MUL<:(Applied{Style,Factors} where Factors</;"	v
Multi-Core or Distributed Processing	doc/src/manual/parallel-computing.md	/^# Multi-Core or Distributed Processing$/;"	c
Multi-threading changes	HISTORY.md	/^Multi-threading changes$/;"	s
Multi-threading changes	NEWS.md	/^Multi-threading changes$/;"	s
MultiDoc	base/docs/Docs.jl	/^    MultiDoc() = new(Type[], IdDict())$/;"	f
MultiDoc	base/docs/Docs.jl	/^mutable struct MultiDoc$/;"	f
MultiSelectMenu	stdlib/REPL/docs/src/index.md	/^### MultiSelectMenu$/;"	S
MultiSelectMenu	stdlib/REPL/src/TerminalMenus/MultiSelectMenu.jl	/^function MultiSelectMenu(options::Array{String,1}; pagesize::Int=10)$/;"	f
MultiSelectMenu	stdlib/REPL/src/TerminalMenus/MultiSelectMenu.jl	/^mutable struct MultiSelectMenu <: AbstractMenu$/;"	f
MultiVersioning	src/llvm-multiversioning.cpp	/^    MultiVersioning()$/;"	f	struct:__anond5683ea40111::MultiVersioning	file:
MultiVersioning	src/llvm-multiversioning.cpp	/^struct MultiVersioning: public ModulePass {$/;"	s	namespace:__anond5683ea40111	file:
Multidimensional Arrays	doc/src/manual/embedding.md	/^### Multidimensional Arrays$/;"	S
Multimedia	base/multimedia.jl	/^module Multimedia$/;"	f
Multimedia I/O	doc/src/base/io-network.md	/^## Multimedia I\/O$/;"	s
Multiple Objects	doc/src/manual/documentation.md	/^### Multiple Objects$/;"	S
Multiple Return Values	doc/src/manual/functions.md	/^## Multiple Return Values$/;"	s
MultiplicativeInverse	base/multinverses.jl	/^abstract type  MultiplicativeInverse{T} end$/;"	f
MultiplicativeInverses	base/multinverses.jl	/^module MultiplicativeInverses$/;"	f
MurmurHash3_x64_128	src/support/MurmurHash3.c	/^void MurmurHash3_x64_128 ( const void * key, const int len,$/;"	f	typeref:typename:void
MurmurHash3_x86_128	src/support/MurmurHash3.c	/^void MurmurHash3_x86_128 ( const void * key, const int len,$/;"	f	typeref:typename:void
MurmurHash3_x86_32	src/support/MurmurHash3.c	/^void MurmurHash3_x86_32 ( const void * key, int len,$/;"	f	typeref:typename:void
Mutable Composite Types	doc/src/manual/types.md	/^## Mutable Composite Types$/;"	s
Mutable collections	doc/src/manual/conversion-and-promotion.md	/^#### Mutable collections$/;"	t
Mutable;	test/copy.jl	/^    mutable struct Mutable; x::Int; end$/;"	f
MutableStruct	test/compiler/codegen.jl	/^    MutableStruct() = new()$/;"	f
MutableStruct	test/compiler/codegen.jl	/^mutable struct MutableStruct$/;"	f
My8156	test/core.jl	/^struct My8156{A, B}$/;"	f
MyArray	stdlib/LinearAlgebra/test/matmul.jl	/^    struct MyArray{T,N} <: AbstractArray{T,N}$/;"	f
MyArray	test/ambiguous.jl	/^struct MyArray{T,N} <: AbstractArray{T,N}$/;"	f
MyArray	test/core.jl	/^mutable struct MyArray{N} <: AbstractArray{Int, N}$/;"	f
MyArray15367	stdlib/LinearAlgebra/test/matmul.jl	/^module MyArray15367$/;"	f
MyArrayStyle	base/broadcast.jl	/^    struct MyArrayStyle <: Broadcast.AbstractArrayStyle{Any} end$/;"	f
MyArrayStyleDim	base/broadcast.jl	/^    struct MyArrayStyleDim{N} <: Broadcast.AbstractArrayStyle{N} end$/;"	f
MyBitsType	test/int.jl	/^primitive type MyBitsType <: Integer 8 end$/;"	f
MyColors	test/compiler/inference.jl	/^module MyColors$/;"	f
MyContainerStyle	base/broadcast.jl	/^    struct MyContainerStyle <: BroadcastStyle end$/;"	f
MyErrorTypeTest	stdlib/Serialization/test/runtests.jl	/^struct MyErrorTypeTest <: Exception end$/;"	f
MyFunc	test/docs.jl	/^mutable struct MyFunc$/;"	f
MyInt	test/dict.jl	/^struct MyInt <: Integer$/;"	f
MyInt26779	test/int.jl	/^struct MyInt26779 <: Integer$/;"	f
MyLevel	test/logging.jl	/^    struct MyLevel$/;"	f
MyNullable	stdlib/Serialization/test/runtests.jl	/^struct MyNullable{T}$/;"	f
MyString	test/dict.jl	/^struct MyString <: AbstractString$/;"	f
MyStruct22929	test/core.jl	/^    MyStruct22929() = new()$/;"	f
MyStruct22929	test/core.jl	/^mutable struct MyStruct22929$/;"	f
MyTest8497	test/staged.jl	/^module MyTest8497$/;"	f
MyTime	test/core.jl	/^struct MyTime <: Dates.TimeType$/;"	f
MyType	base/docs/basedocs.jl	/^           MyType() = new()$/;"	f
MyType	base/docs/basedocs.jl	/^struct MyType$/;"	f
MyType	test/precompile.jl	/^              struct MyType{T} end$/;"	f
MyType12580	test/subtype.jl	/^struct MyType12580{T}<:AbstractMyType12580{T} end$/;"	f
MyType18457	test/compiler/inference.jl	/^struct MyType18457{T,F,G}<:AbstractMyType18457{T,F,G} end$/;"	f
MyType4154	test/core.jl	/^mutable struct MyType4154{T}$/;"	f
MyType8010	test/core.jl	/^struct MyType8010$/;"	f
MyType8010_ghost	test/core.jl	/^struct MyType8010_ghost$/;"	f
MyURange	test/offsetarray.jl	/^    struct MyURange <: AbstractUnitRange{Int}$/;"	f
N	doc/NEWS-update.jl	/^N = map(m -> parse(Int,m.captures[1]), eachmatch(r"\\[#([0-9]+)\\]", s))$/;"	v
N	stdlib/Random/src/DSFMT.jl	/^const N = floor(Int, ((MEXP - 128) \/ 104 + 1))$/;"	v
N	test/loading.jl	/^const N = 12 # different UUIDs per name$/;"	v
N10281	test/core.jl	/^const N10281 = 1000$/;"	v
N21581	test/core.jl	/^module N21581$/;"	f
NAME	deps/srccache/patchelf-0.9/patchelf.1	/^.SH NAME$/;"	s	title:PATCHELF
NAME	doc/man/julia.1	/^.SH NAME$/;"	s	title:JULIA
NAME	src/flisp/Makefile	/^NAME := flisp$/;"	m
NAMES	test/loading.jl	/^const NAMES = map(string, ('A':'Z')[1:M])$/;"	v
NATIVE_BUILDDIR	src/flisp/Makefile	/^NATIVE_BUILDDIR := $(BUILDDIR)$/;"	m
NATIVE_BUILDDIR	src/flisp/Makefile	/^NATIVE_BUILDDIR := $(BUILDDIR)\/..$/;"	m
NATIVE_BUILDDIR	src/flisp/Makefile	/^NATIVE_BUILDDIR :=$/;"	m
NAUXROOTS	test/gcext/gcext.c	/^#define NAUXROOTS /;"	d	file:
NArray_17003	test/compiler/inference.jl	/^NArray_17003(::Array{T,N}) where {T,N} = NArray_17003{T,N}()$/;"	f
NArray_17003	test/compiler/inference.jl	/^struct NArray_17003{T,N} <: AArray_17003{Nable_17003{T},N}$/;"	f
NBITS	src/support/dtypes.h	/^#define NBITS /;"	d
NBOX_C	src/datatype.c	/^#define NBOX_C /;"	d	file:
NBOX_C	src/staticdata.c	/^#define NBOX_C /;"	d	file:
NDEBUG	src/julia_assert.h	/^#    define NDEBUG$/;"	d
NEWS	doc/NEWS-update.jl	/^NEWS = get(ARGS, 1, "NEWS.md")$/;"	v
NEW_GC_FRAME_NAME	src/llvm-pass-helpers.cpp	/^    static const char *NEW_GC_FRAME_NAME = "julia.new_gc_frame";$/;"	v	namespace:jl_intrinsics	typeref:typename:const char *	file:
NEXT_OP	src/flisp/flisp.c	/^#define NEXT_OP /;"	d	file:
NIL	src/flisp/flisp.h	/^    value_t NIL, T, F, FL_EOF, QUOTE;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
NIX_DONT_SET_RPATH	deps/srccache/patchelf-0.9/tests/Makefile.am	/^export NIX_DONT_SET_RPATH=1$/;"	m
NIX_DONT_SET_RPATH	deps/srccache/patchelf-0.9/tests/Makefile.in	/^export NIX_DONT_SET_RPATH=1$/;"	m
NIX_LDFLAGS	deps/srccache/patchelf-0.9/tests/Makefile.am	/^export NIX_LDFLAGS=$/;"	m
NIX_LDFLAGS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^export NIX_LDFLAGS=$/;"	m
NInitializedTestType	test/core.jl	/^    NInitializedTestType() = new()$/;"	f
NInitializedTestType	test/core.jl	/^struct NInitializedTestType$/;"	f
NODES	test/loading.jl	/^const NODES = 1:M*N$/;"	v
NOINLINE	src/support/dtypes.h	/^#  define NOINLINE /;"	d
NOINLINE_DECL	src/support/dtypes.h	/^#  define NOINLINE_DECL(/;"	d
NOMINMAX	src/codegen.cpp	/^#define NOMINMAX$/;"	d	file:
NON_TOP_LEVEL_GLOBAL	base/compiler/validation.jl	/^const NON_TOP_LEVEL_GLOBAL = "encountered `Expr` head `:global` in non-top-level code (i.e. `nar/;"	v
NON_TOP_LEVEL_METHOD	base/compiler/validation.jl	/^const NON_TOP_LEVEL_METHOD = "encountered `Expr` head `:method` in non-top-level code (i.e. `nar/;"	v
NORMAL_INSTALL	deps/srccache/patchelf-0.9/Makefile.in	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	deps/srccache/patchelf-0.9/src/Makefile.in	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	deps/srccache/patchelf-0.9/tests/Makefile.in	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	deps/srccache/patchelf-0.9/Makefile.in	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	deps/srccache/patchelf-0.9/src/Makefile.in	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	deps/srccache/patchelf-0.9/tests/Makefile.in	/^NORMAL_UNINSTALL = :$/;"	m
NOT_FOUND	base/compiler/typelattice.jl	/^const NOT_FOUND = NotFound()$/;"	v
NO_INTERP_BT	src/interpreter-stacktrace.c	/^#define NO_INTERP_BT$/;"	d	file:
NO_OFFSET	base/bitset.jl	/^const NO_OFFSET = Int === Int64 ? -one(Int) << 60 : -one(Int) << 29$/;"	v
NRM2_CUTOFF	stdlib/LinearAlgebra/src/dense.jl	/^const NRM2_CUTOFF = 32$/;"	v
NROFF	deps/srccache/patchelf-0.9/Makefile.in	/^NROFF = nroff$/;"	m
NSAppleEventsUsageDescription	contrib/mac/frameworkapp/JuliaLauncher/Info.plist	/^	<key>NSAppleEventsUsageDescription<\/key>$/;"	k
NSHumanReadableCopyright	contrib/mac/frameworkapp/JuliaLauncher/Info.plist	/^	<key>NSHumanReadableCopyright<\/key>$/;"	k
NSMainNibFile	contrib/mac/frameworkapp/JuliaLauncher/Info.plist	/^	<key>NSMainNibFile<\/key>$/;"	k
NSMetadataQuery	contrib/mac/frameworkapp/JuliaLauncher/AppDelegate.m	/^  NSMetadataQuery *_Nullable _mdq;$/;"	C	interface:AppDelegate
NSMutableArray	contrib/mac/frameworkapp/ExecSandbox/ExecSandbox.m	/^  NSMutableArray<JuliaTask *> *_Nonnull _tasks;$/;"	C	interface:ExecSandbox	protocols:JuliaTask
NSPrincipalClass	contrib/mac/frameworkapp/JuliaLauncher/Info.plist	/^	<key>NSPrincipalClass<\/key>$/;"	k
NSSupportsAutomaticTermination	contrib/mac/frameworkapp/JuliaLauncher/Info.plist	/^	<key>NSSupportsAutomaticTermination<\/key>$/;"	k
NSSupportsSuddenTermination	contrib/mac/frameworkapp/JuliaLauncher/Info.plist	/^	<key>NSSupportsSuddenTermination<\/key>$/;"	k
NTAGS	stdlib/Serialization/src/Serialization.jl	/^const NTAGS = length(TAGS)$/;"	v
NT_386_IOPERM	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_386_IOPERM	/;"	d
NT_386_TLS	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_386_TLS	/;"	d
NT_ARM_HW_BREAK	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_ARM_HW_BREAK	/;"	d
NT_ARM_HW_WATCH	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_ARM_HW_WATCH	/;"	d
NT_ARM_TLS	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_ARM_TLS	/;"	d
NT_ARM_VFP	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_ARM_VFP	/;"	d
NT_ASRS	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_ASRS	/;"	d
NT_AUXV	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_AUXV	/;"	d
NT_FILE	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_FILE	/;"	d
NT_FPREGSET	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_FPREGSET	/;"	d
NT_GNU_ABI_TAG	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_GNU_ABI_TAG	/;"	d
NT_GNU_BUILD_ID	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_GNU_BUILD_ID	/;"	d
NT_GNU_GOLD_VERSION	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_GNU_GOLD_VERSION	/;"	d
NT_GNU_HWCAP	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_GNU_HWCAP	/;"	d
NT_GWINDOWS	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_GWINDOWS	/;"	d
NT_LWPSINFO	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_LWPSINFO	/;"	d
NT_LWPSTATUS	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_LWPSTATUS	/;"	d
NT_PLATFORM	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_PLATFORM	/;"	d
NT_PPC_SPE	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_PPC_SPE	/;"	d
NT_PPC_VMX	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_PPC_VMX	/;"	d
NT_PPC_VSX	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_PPC_VSX	/;"	d
NT_PRCRED	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_PRCRED	/;"	d
NT_PRFPXREG	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_PRFPXREG	/;"	d
NT_PRPSINFO	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_PRPSINFO	/;"	d
NT_PRSTATUS	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_PRSTATUS	/;"	d
NT_PRXFPREG	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_PRXFPREG	/;"	d
NT_PRXREG	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_PRXREG	/;"	d
NT_PSINFO	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_PSINFO	/;"	d
NT_PSTATUS	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_PSTATUS	/;"	d
NT_S390_CTRS	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_S390_CTRS	/;"	d
NT_S390_HIGH_GPRS	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_S390_HIGH_GPRS	/;"	d
NT_S390_LAST_BREAK	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_S390_LAST_BREAK	/;"	d
NT_S390_PREFIX	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_S390_PREFIX	/;"	d
NT_S390_SYSTEM_CALL	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_S390_SYSTEM_CALL	/;"	d
NT_S390_TDB	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_S390_TDB	/;"	d
NT_S390_TIMER	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_S390_TIMER	/;"	d
NT_S390_TODCMP	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_S390_TODCMP	/;"	d
NT_S390_TODPREG	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_S390_TODPREG	/;"	d
NT_SIGINFO	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_SIGINFO	/;"	d
NT_TASKSTRUCT	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_TASKSTRUCT	/;"	d
NT_UTSNAME	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_UTSNAME	/;"	d
NT_VERSION	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_VERSION	/;"	d
NT_X86_XSTATE	deps/srccache/patchelf-0.9/src/elf.h	/^#define NT_X86_XSTATE	/;"	d
NUM_OR_BULLETS	stdlib/Markdown/src/Common/block.jl	/^const NUM_OR_BULLETS = r"^ {0,3}(\\*|\\+|-|\\d+(\\.|\\)))( |$)"$/;"	v
NUM_THREADS_NAME	src/options.h	/^#define NUM_THREADS_NAME /;"	d
NVALGRIND	deps/valgrind/valgrind.h	/^#    define NVALGRIND /;"	d
NWORDS	src/flisp/cvalues.c	/^#define NWORDS(/;"	d	file:
NWORDS	src/julia.h	/^#define NWORDS(/;"	d
N_BUILTINS	src/flisp/flisp.h	/^#define N_BUILTINS /;"	d
N_CALL_CACHE	src/options.h	/^#define N_CALL_CACHE /;"	d
N_EXTENSIONS	src/dlload.c	/^#define N_EXTENSIONS /;"	d	file:
N_GCHND	src/flisp/flisp.h	/^    uint32_t N_GCHND;$/;"	m	struct:_fl_context_t	typeref:typename:uint32_t
N_IFUNC	base/compiler/tfuncs.jl	/^const N_IFUNC = reinterpret(Int32, arraylen) + 1$/;"	v
N_NUMTYPES	src/support/dtypes.h	/^#define N_NUMTYPES /;"	d
N_OPCODES	src/flisp/opcodes.h	/^    N_OPCODES$/;"	e	enum:__anon10a850cc0103
N_STACK	src/flisp/flisp.h	/^    uint32_t N_STACK;$/;"	m	struct:_fl_context_t	typeref:typename:uint32_t
NaN	base/float.jl	/^const NaN = NaN64$/;"	v
NaN16	base/float.jl	/^const NaN16 = bitcast(Float16, 0x7e00)$/;"	v
NaN32	base/float.jl	/^const NaN32 = bitcast(Float32, 0x7fc00000)$/;"	v
NaN64	base/float.jl	/^const NaN64 = bitcast(Float64, 0x7ff8000000000000)$/;"	v
Nable_17003	test/compiler/inference.jl	/^struct Nable_17003{T}$/;"	f
Name	deps/srccache/patchelf-0.9/patchelf.spec	/^Name: patchelf$/;"	t
Name	deps/srccache/patchelf-0.9/patchelf.spec.in	/^Name: patchelf$/;"	t
Named Tuple Types	doc/src/manual/types.md	/^### Named Tuple Types$/;"	S
Named Tuples	doc/src/manual/functions.md	/^## Named Tuples$/;"	s
NamedTuple	base/boot.jl	/^NamedTuple() = NamedTuple{(),Tuple{}}(())$/;"	f
NamedTuple	base/namedtuple.jl	/^function NamedTuple{names,T}(args::Tuple) where {names, T <: Tuple}$/;"	f
NamedTuple	base/namedtuple.jl	/^function NamedTuple{names}(nt::NamedTuple) where {names}$/;"	f
NamedTuple_typename	base/reflection.jl	/^const NamedTuple_typename = NamedTuple.body.body.name$/;"	v
Namespace miscellanea	doc/src/manual/modules.md	/^### Namespace miscellanea$/;"	S
NeedsShaping	base/array.jl	/^const NeedsShaping = Union{Tuple{Integer,Vararg{Integer}}, Tuple{OneTo,Vararg{OneTo}}}$/;"	v
Neighbors	src/llvm-late-gc-lowering.cpp	/^    const std::vector<SetVector<int>> &Neighbors;$/;"	m	struct:PEOIterator	typeref:typename:const std::vector<SetVector<int>> &	file:
Neighbors	src/llvm-late-gc-lowering.cpp	/^    std::vector<SetVector<int>> Neighbors;$/;"	m	struct:State	typeref:typename:std::vector<SetVector<int>>	file:
Nested quote	doc/src/manual/metaprogramming.md	/^### Nested quote$/;"	S
NestedTuple	base/broadcast.jl	/^const NestedTuple = Tuple{<:Broadcasted,Vararg{Any}}$/;"	v
Network I/O	doc/src/base/io-network.md	/^## Network I\/O$/;"	s
Network Requirements for LocalManager and SSHManager	doc/src/manual/parallel-computing.md	/^### Network Requirements for LocalManager and SSHManager$/;"	S
Networking and Streams	doc/src/manual/networking-and-streams.md	/^# Networking and Streams$/;"	c
New IR nodes	doc/src/devdocs/ssair.md	/^## New IR nodes$/;"	s
New Julia Launcher App	contrib/mac/frameworkapp/README.md	/^New Julia Launcher App$/;"	c
New architectures	HISTORY.md	/^New architectures$/;"	s
New language features	HISTORY.md	/^New language features$/;"	s
New language features	NEWS.md	/^New language features$/;"	s
New library functions	HISTORY.md	/^New library functions$/;"	s
New library functions	NEWS.md	/^New library functions$/;"	s
NewEntity	test/core.jl	/^function NewEntity(components::Type{T}...) where T<:Component$/;"	f
NewNode	base/compiler/ssair/ir.jl	/^    NewNode(pos::Int, attach_after::Bool, @nospecialize(typ), @nospecialize(node), line::Int32) /;"	f
NewNode	base/compiler/ssair/ir.jl	/^struct NewNode$/;"	f
NewSSAValue	base/compiler/ssair/ir.jl	/^struct NewSSAValue$/;"	f
News-worthy changes	CONTRIBUTING.md	/^#### News-worthy changes$/;"	t
Nmax	test/arrayops.jl	/^Nmax = 3 # TODO: go up to CARTESIAN_DIMS+2 (currently this exposes problems)$/;"	v
NoClass	src/abi_x86_64.cpp	/^enum ArgClass { Integer, Sse, SseUp, X87, X87Up, ComplexX87, NoClass, Memory };$/;"	e	enum:ArgClass	file:
NoInit31164	test/compiler/inference.jl	/^    NoInit31164(a::Int) = new(a)$/;"	f
NoInit31164	test/compiler/inference.jl	/^    NoInit31164(a::Int, b) = new(a, b)$/;"	f
NoInit31164	test/compiler/inference.jl	/^struct NoInit31164$/;"	f
NoMethodHasThisType	stdlib/InteractiveUtils/test/runtests.jl	/^struct NoMethodHasThisType end$/;"	f
NoMethodsDefinedHere;	test/errorshow.jl	/^struct NoMethodsDefinedHere; end$/;"	f
NoThrowTestSet	stdlib/Test/test/runtests.jl	/^    NoThrowTestSet(desc) = new([])$/;"	f
NoThrowTestSet	stdlib/Test/test/runtests.jl	/^mutable struct NoThrowTestSet <: Test.AbstractTestSet$/;"	f
Node	base/compiler/ssair/domtree.jl	/^    struct Node$/;"	f
Node	test/compiler/inference.jl	/^struct Node{N1<:AbstractNode, N2<:AbstractNode} <: AbstractNode$/;"	f
Node	test/core.jl	/^mutable struct Node{T}$/;"	f
Node2	test/core.jl	/^mutable struct Node2{T}$/;"	f
Node23685	test/compiler/inference.jl	/^struct Node23685{T}$/;"	f
Node2562	test/core.jl	/^Node2562(value::T, args...) where {T} = Node2562{T}(value, args...)$/;"	f
Node2562	test/core.jl	/^mutable struct Node2562{T}$/;"	f
NominalPool	test/precompile.jl	/^              struct NominalPool{T, R <: Integer, V} <: CategoricalPool{T, R, V}$/;"	f
NominalValue	test/precompile.jl	/^              struct NominalValue{T, R <: Integer} <: CategoricalValue{T, R}$/;"	f
Non-Standard String Literals	doc/src/manual/metaprogramming.md	/^## Non-Standard String Literals$/;"	s
Non-constant Function Specifications	doc/src/manual/calling-c-and-fortran-code.md	/^## Non-constant Function Specifications$/;"	s
NonBitstype	test/compiler/inference.jl	/^struct NonBitstype$/;"	f
NonStandardIntegerRangeTest	test/ranges.jl	/^module NonStandardIntegerRangeTest$/;"	f
NonleafHandlingStyles	base/broadcast.jl	/^const NonleafHandlingStyles = Union{DefaultArrayStyle,ArrayConflict}$/;"	v
NotFound	base/compiler/typelattice.jl	/^struct NotFound end$/;"	f
NotPkgModule;	test/loading.jl	/^module NotPkgModule; end$/;"	f
NotReal;	test/ranges.jl	/^struct NotReal; val; end$/;"	f
Note on Optional and keyword Arguments	doc/src/manual/methods.md	/^## Note on Optional and keyword Arguments$/;"	s
NoteDef	src/llvm-late-gc-lowering.cpp	/^static void NoteDef(State &S, BBState &BBS, int Num, const std::vector<int> &SafepointsSoFar) {$/;"	f	typeref:typename:void	file:
NoteOperandUses	src/llvm-late-gc-lowering.cpp	/^    void NoteOperandUses(State &S, BBState &BBS, User &UI){$/;"	f	struct:LateLowerGCFrame	typeref:typename:void	file:
NoteOperandUses	src/llvm-late-gc-lowering.cpp	/^void LateLowerGCFrame::NoteOperandUses(State &S, BBState &BBS, User &UI, BitVector &Uses) {$/;"	f	class:LateLowerGCFrame	typeref:typename:void
NoteSafepoint	src/llvm-late-gc-lowering.cpp	/^static int NoteSafepoint(State &S, BBState &BBS, CallInst *CI) {$/;"	f	typeref:typename:int	file:
NoteUse	src/llvm-late-gc-lowering.cpp	/^    void NoteUse(State &S, BBState &BBS, Value *V) {$/;"	f	struct:LateLowerGCFrame	typeref:typename:void	file:
NoteUse	src/llvm-late-gc-lowering.cpp	/^void LateLowerGCFrame::NoteUse(State &S, BBState &BBS, Value *V, BitVector &Uses) {$/;"	f	class:LateLowerGCFrame	typeref:typename:void
Notes for Julia Contributors	CONTRIBUTING.md	/^# Notes for Julia Contributors$/;"	c
Notes for building binary distributions	doc/build/distributing.md	/^Notes for building binary distributions$/;"	c
Notes on BLAS and LAPACK	doc/build/distributing.md	/^Notes on BLAS and LAPACK$/;"	s
Noteworthy Differences from other Languages	doc/src/manual/noteworthy-differences.md	/^# Noteworthy Differences from other Languages$/;"	c
Noteworthy differences from C/C++	doc/src/manual/noteworthy-differences.md	/^## Noteworthy differences from C\/C++$/;"	s
Noteworthy differences from Common Lisp	doc/src/manual/noteworthy-differences.md	/^## Noteworthy differences from Common Lisp$/;"	s
Noteworthy differences from MATLAB	doc/src/manual/noteworthy-differences.md	/^## Noteworthy differences from MATLAB$/;"	s
Noteworthy differences from Python	doc/src/manual/noteworthy-differences.md	/^## Noteworthy differences from Python$/;"	s
Noteworthy differences from R	doc/src/manual/noteworthy-differences.md	/^## Noteworthy differences from R$/;"	s
Noteworthy external packages	doc/src/manual/parallel-computing.md	/^## Noteworthy external packages$/;"	s
Nothing	base/boot.jl	/^Nothing() = nothing$/;"	f
Nothingness and missing values	doc/src/manual/faq.md	/^## Nothingness and missing values$/;"	s
NotifyFinalizer	src/jitlayers.cpp	/^void JuliaOJIT::NotifyFinalizer(RTDyldObjHandleT Key,$/;"	f	class:JuliaOJIT	typeref:typename:void
NotifyObjectEmitted	src/debuginfo.cpp	/^    virtual void NotifyObjectEmitted(const object::ObjectFile &obj,$/;"	f	class:JuliaJITEventListener	typeref:typename:void	file:
Nov	stdlib/Dates/src/query.jl	/^const Nov = 11$/;"	v
Nov	stdlib/Dates/test/adjusters.jl	/^Nov = Dates.DateTime(2013, 11, 11) #Monday$/;"	v
Nov	stdlib/Dates/test/query.jl	/^Nov = Dates.DateTime(2013, 11, 11) # Monday$/;"	v
November	stdlib/Dates/src/query.jl	/^const November = 11$/;"	v
NullLogger	base/logging.jl	/^struct NullLogger <: AbstractLogger; end$/;"	f
Nullable11904	test/core.jl	/^struct Nullable11904{T}$/;"	f
Nullable14027	test/copy.jl	/^struct Nullable14027{T}$/;"	f
Nullable27770	test/core.jl	/^    Nullable27770() = new(false)$/;"	f
Nullable27770	test/core.jl	/^    Nullable27770(v::Handle27770) = new(true, Handle27770)$/;"	f
Nullable27770	test/core.jl	/^struct Nullable27770$/;"	f
Number	base/boot.jl	/^abstract type Number end$/;"	f
Number	base/docs/basedocs.jl	/^abstract type Number end$/;"	f
Number	src/llvm-late-gc-lowering.cpp	/^int LateLowerGCFrame::Number(State &S, Value *V) {$/;"	f	class:LateLowerGCFrame	typeref:typename:int
Number of indices	doc/src/manual/arrays.md	/^### Number of indices$/;"	S
NumberBase	src/llvm-late-gc-lowering.cpp	/^int LateLowerGCFrame::NumberBase(State &S, Value *V, Value *CurrentV)$/;"	f	class:LateLowerGCFrame	typeref:typename:int
NumberVector	src/llvm-late-gc-lowering.cpp	/^std::vector<int> LateLowerGCFrame::NumberVector(State &S, Value *V) {$/;"	f	class:LateLowerGCFrame	typeref:typename:std::vector<int>
NumberVectorBase	src/llvm-late-gc-lowering.cpp	/^std::vector<int> LateLowerGCFrame::NumberVectorBase(State &S, Value *CurrentV) {$/;"	f	class:LateLowerGCFrame	typeref:typename:std::vector<int>
Numbers	doc/src/devdocs/ast.md	/^### Numbers$/;"	S
Numeric Comparisons	doc/src/manual/mathematical-operations.md	/^## Numeric Comparisons$/;"	s
Numerical Conversions	doc/src/manual/mathematical-operations.md	/^## Numerical Conversions$/;"	s
OAs_name	test/offsetarray.jl	/^const OAs_name = join(fullname(OffsetArrays), ".")$/;"	v
OBJCONV_BB_NAME	deps/objconv.mk	/^OBJCONV_BB_NAME := Objconv.v$(OBJCONV_VER)$/;"	m
OBJCONV_BB_URL_BASE	deps/objconv.mk	/^OBJCONV_BB_URL_BASE := https:\/\/github.com\/JuliaPackaging\/Yggdrasil\/releases\/download\/Objc/;"	m
OBJECT_TAG	stdlib/Serialization/src/Serialization.jl	/^const OBJECT_TAG           = Int32(o0+12)$/;"	v
OBJEXT	deps/srccache/patchelf-0.9/Makefile.in	/^OBJEXT = @OBJEXT@$/;"	m
OBJEXT	deps/srccache/patchelf-0.9/src/Makefile.in	/^OBJEXT = @OBJEXT@$/;"	m
OBJEXT	deps/srccache/patchelf-0.9/tests/Makefile.in	/^OBJEXT = @OBJEXT@$/;"	m
OBJS	src/Makefile	/^OBJS := $(SRCS:%=$(BUILDDIR)\/%.o)$/;"	m
OBJS	src/flisp/Makefile	/^OBJS := $(SRCS:%.c=$(BUILDDIR)\/%.o)$/;"	m
OBJS	src/support/Makefile	/^OBJS := $(SRCS:%=$(BUILDDIR)\/%.o)$/;"	m
ODK_EXCEPTIONS	deps/srccache/patchelf-0.9/src/elf.h	/^#define ODK_EXCEPTIONS	/;"	d
ODK_FILL	deps/srccache/patchelf-0.9/src/elf.h	/^#define ODK_FILL	/;"	d
ODK_HWAND	deps/srccache/patchelf-0.9/src/elf.h	/^#define ODK_HWAND	/;"	d
ODK_HWOR	deps/srccache/patchelf-0.9/src/elf.h	/^#define ODK_HWOR	/;"	d
ODK_HWPATCH	deps/srccache/patchelf-0.9/src/elf.h	/^#define ODK_HWPATCH	/;"	d
ODK_NULL	deps/srccache/patchelf-0.9/src/elf.h	/^#define ODK_NULL	/;"	d
ODK_PAD	deps/srccache/patchelf-0.9/src/elf.h	/^#define ODK_PAD	/;"	d
ODK_REGINFO	deps/srccache/patchelf-0.9/src/elf.h	/^#define ODK_REGINFO	/;"	d
ODK_TAGS	deps/srccache/patchelf-0.9/src/elf.h	/^#define ODK_TAGS	/;"	d
OEX_DISMISS	deps/srccache/patchelf-0.9/src/elf.h	/^#define OEX_DISMISS	/;"	d
OEX_FPDBUG	deps/srccache/patchelf-0.9/src/elf.h	/^#define OEX_FPDBUG	/;"	d
OEX_FPU_DIV0	deps/srccache/patchelf-0.9/src/elf.h	/^#define OEX_FPU_DIV0	/;"	d
OEX_FPU_INEX	deps/srccache/patchelf-0.9/src/elf.h	/^#define OEX_FPU_INEX	/;"	d
OEX_FPU_INVAL	deps/srccache/patchelf-0.9/src/elf.h	/^#define OEX_FPU_INVAL	/;"	d
OEX_FPU_MAX	deps/srccache/patchelf-0.9/src/elf.h	/^#define OEX_FPU_MAX	/;"	d
OEX_FPU_MIN	deps/srccache/patchelf-0.9/src/elf.h	/^#define OEX_FPU_MIN	/;"	d
OEX_FPU_OFLO	deps/srccache/patchelf-0.9/src/elf.h	/^#define OEX_FPU_OFLO	/;"	d
OEX_FPU_UFLO	deps/srccache/patchelf-0.9/src/elf.h	/^#define OEX_FPU_UFLO	/;"	d
OEX_PAGE0	deps/srccache/patchelf-0.9/src/elf.h	/^#define OEX_PAGE0	/;"	d
OEX_PRECISEFP	deps/srccache/patchelf-0.9/src/elf.h	/^#define OEX_PRECISEFP	/;"	d
OEX_SMM	deps/srccache/patchelf-0.9/src/elf.h	/^#define OEX_SMM	/;"	d
OHWA0_R4KEOP_CHECKED	deps/srccache/patchelf-0.9/src/elf.h	/^#define OHWA0_R4KEOP_CHECKED	/;"	d
OHWA1_R4KEOP_CLEAN	deps/srccache/patchelf-0.9/src/elf.h	/^#define OHWA1_R4KEOP_CLEAN	/;"	d
OHW_R4KEOP	deps/srccache/patchelf-0.9/src/elf.h	/^#define OHW_R4KEOP	/;"	d
OHW_R5KCVTL	deps/srccache/patchelf-0.9/src/elf.h	/^#define OHW_R5KCVTL	/;"	d
OHW_R5KEOP	deps/srccache/patchelf-0.9/src/elf.h	/^#define OHW_R5KEOP	/;"	d
OHW_R8KPFETCH	deps/srccache/patchelf-0.9/src/elf.h	/^#define OHW_R8KPFETCH	/;"	d
OID_HEXSZ	stdlib/LibGit2/src/types.jl	/^const OID_HEXSZ = OID_RAWSZ * 2$/;"	v
OID_MINPREFIXLEN	stdlib/LibGit2/src/types.jl	/^const OID_MINPREFIXLEN = 4$/;"	v
OID_RAWSZ	stdlib/LibGit2/src/types.jl	/^const OID_RAWSZ = 20$/;"	v
OLD_STDERR	stdlib/Test/test/runtests.jl	/^OLD_STDERR = stderr$/;"	v
OLD_STDOUT	stdlib/Test/test/runtests.jl	/^OLD_STDOUT = stdout$/;"	v
OLD_STDOUT	test/core.jl	/^OLD_STDOUT = stdout$/;"	v
ONE	base/gmp.jl	/^const ONE  = BigInt()$/;"	v
ON_P64	src/support/ios.h	/^#define ON_P64(/;"	d
OOBToken	base/compiler/ssair/ir.jl	/^struct OOBToken$/;"	f
OOB_Functor	test/arrayops.jl	/^mutable struct OOB_Functor{T}; a::T; end$/;"	f
OP	src/flisp/flisp.c	/^#define OP(/;"	d	file:
OPAD_POSTFIX	deps/srccache/patchelf-0.9/src/elf.h	/^#define OPAD_POSTFIX	/;"	d
OPAD_PREFIX	deps/srccache/patchelf-0.9/src/elf.h	/^#define OPAD_PREFIX	/;"	d
OPAD_SYMBOL	deps/srccache/patchelf-0.9/src/elf.h	/^#define OPAD_SYMBOL	/;"	d
OPENBLAS_BB_NAME	deps/blas.mk	/^OPENBLAS_BB_NAME := OpenBLAS.v$(OPENBLAS_VER)$/;"	m
OPENBLAS_BB_URL_BASE	deps/blas.mk	/^OPENBLAS_BB_URL_BASE := https:\/\/github.com\/JuliaPackaging\/Yggdrasil\/releases\/download\/Ope/;"	m
OPENBLAS_BUILD_OPTS	deps/blas.mk	/^OPENBLAS_BUILD_OPTS := CC="$(CC)" FC="$(FC)" LD="$(LD)" RANLIB="$(RANLIB)" TARGET=$(OPENBLAS_TAR/;"	m
OPENBLAS_CFLAGS	deps/blas.mk	/^OPENBLAS_CFLAGS := -O2$/;"	m
OPENBLAS_FFLAGS	deps/blas.mk	/^OPENBLAS_FFLAGS := $(JFFLAGS)$/;"	m
OPENBLAS_GIT_URL	deps/blas.mk	/^OPENBLAS_GIT_URL := git:\/\/github.com\/xianyi\/OpenBLAS.git$/;"	m
OPENBLAS_INSTALL	deps/blas.mk	/^define OPENBLAS_INSTALL$/;"	m
OPENBLAS_TAR_URL	deps/blas.mk	/^OPENBLAS_TAR_URL = https:\/\/api.github.com\/repos\/xianyi\/OpenBLAS\/tarball\/$1$/;"	m
OPENLIBM_BB_NAME	deps/openlibm.mk	/^OPENLIBM_BB_NAME := OpenLibm.v$(OPENLIBM_VER)$/;"	m
OPENLIBM_BB_URL_BASE	deps/openlibm.mk	/^OPENLIBM_BB_URL_BASE := https:\/\/github.com\/JuliaPackaging\/Yggdrasil\/releases\/download\/Ope/;"	m
OPENLIBM_FLAGS	deps/openlibm.mk	/^OPENLIBM_FLAGS := ARCH="$(ARCH)" REAL_ARCH="$(MARCH)" CC="$(CC)" FC="$(FC)" AR="$(AR)" OS="$(OS)/;"	m
OPENLIBM_GIT_URL	deps/openlibm.mk	/^OPENLIBM_GIT_URL := git:\/\/github.com\/JuliaMath\/openlibm.git$/;"	m
OPENLIBM_TAR_URL	deps/openlibm.mk	/^OPENLIBM_TAR_URL = https:\/\/api.github.com\/repos\/JuliaMath\/openlibm\/tarball\/$1$/;"	m
OPTIONS	deps/srccache/patchelf-0.9/patchelf.1	/^.SH OPTIONS$/;"	s	title:PATCHELF
OPTIONS_MASK	base/pcre.jl	/^const OPTIONS_MASK = COMPILE_MASK | EXECUTE_MASK$/;"	v
OP_ADD	src/flisp/opcodes.h	/^    OP_ADD, OP_SUB, OP_MUL, OP_DIV, OP_IDIV, OP_NUMEQ, OP_LT, OP_COMPARE,$/;"	e	enum:__anon10a850cc0103
OP_ADD2	src/flisp/opcodes.h	/^    OP_TAPPLY, OP_ADD2, OP_SUB2, OP_NEG, OP_LARGC, OP_LVARGC,$/;"	e	enum:__anon10a850cc0103
OP_APPLY	src/flisp/opcodes.h	/^    OP_APPLY,$/;"	e	enum:__anon10a850cc0103
OP_AREF	src/flisp/opcodes.h	/^    OP_VECTOR, OP_AREF, OP_ASET,$/;"	e	enum:__anon10a850cc0103
OP_ARGC	src/flisp/opcodes.h	/^    OP_CLOSURE, OP_ARGC, OP_VARGC, OP_TRYCATCH, OP_FOR,$/;"	e	enum:__anon10a850cc0103
OP_ASET	src/flisp/opcodes.h	/^    OP_VECTOR, OP_AREF, OP_ASET,$/;"	e	enum:__anon10a850cc0103
OP_ATOMP	src/flisp/opcodes.h	/^    OP_EQ, OP_EQV, OP_EQUAL, OP_ATOMP, OP_NOT, OP_NULLP, OP_BOOLEANP,$/;"	e	enum:__anon10a850cc0103
OP_BOOLEANP	src/flisp/opcodes.h	/^    OP_EQ, OP_EQV, OP_EQUAL, OP_ATOMP, OP_NOT, OP_NULLP, OP_BOOLEANP,$/;"	e	enum:__anon10a850cc0103
OP_BOOL_CONST_F	src/flisp/opcodes.h	/^    OP_BOOL_CONST_T, OP_BOOL_CONST_F, OP_THE_EMPTY_LIST, OP_EOF_OBJECT,$/;"	e	enum:__anon10a850cc0103
OP_BOOL_CONST_T	src/flisp/opcodes.h	/^    OP_BOOL_CONST_T, OP_BOOL_CONST_F, OP_THE_EMPTY_LIST, OP_EOF_OBJECT,$/;"	e	enum:__anon10a850cc0103
OP_BOUNDP	src/flisp/opcodes.h	/^    OP_SYMBOLP, OP_NUMBERP, OP_BOUNDP, OP_PAIRP, OP_BUILTINP, OP_VECTORP,$/;"	e	enum:__anon10a850cc0103
OP_BOX	src/flisp/opcodes.h	/^    OP_OPTARGS, OP_BRBOUND, OP_KEYARGS, OP_BOX, OP_BOXL, OP_SHIFT,$/;"	e	enum:__anon10a850cc0103
OP_BOXL	src/flisp/opcodes.h	/^    OP_OPTARGS, OP_BRBOUND, OP_KEYARGS, OP_BOX, OP_BOXL, OP_SHIFT,$/;"	e	enum:__anon10a850cc0103
OP_BRBOUND	src/flisp/opcodes.h	/^    OP_OPTARGS, OP_BRBOUND, OP_KEYARGS, OP_BOX, OP_BOXL, OP_SHIFT,$/;"	e	enum:__anon10a850cc0103
OP_BRF	src/flisp/opcodes.h	/^    OP_NOP=0, OP_DUP, OP_POP, OP_CALL, OP_TCALL, OP_JMP, OP_BRF, OP_BRT,$/;"	e	enum:__anon10a850cc0103
OP_BRFL	src/flisp/opcodes.h	/^    OP_JMPL, OP_BRFL, OP_BRTL, OP_RET,$/;"	e	enum:__anon10a850cc0103
OP_BRN	src/flisp/opcodes.h	/^    OP_BRNE, OP_BRNEL, OP_CADR, OP_BRNN, OP_BRNNL, OP_BRN, OP_BRNL,$/;"	e	enum:__anon10a850cc0103
OP_BRNE	src/flisp/opcodes.h	/^    OP_BRNE, OP_BRNEL, OP_CADR, OP_BRNN, OP_BRNNL, OP_BRN, OP_BRNL,$/;"	e	enum:__anon10a850cc0103
OP_BRNEL	src/flisp/opcodes.h	/^    OP_BRNE, OP_BRNEL, OP_CADR, OP_BRNN, OP_BRNNL, OP_BRN, OP_BRNL,$/;"	e	enum:__anon10a850cc0103
OP_BRNL	src/flisp/opcodes.h	/^    OP_BRNE, OP_BRNEL, OP_CADR, OP_BRNN, OP_BRNNL, OP_BRN, OP_BRNL,$/;"	e	enum:__anon10a850cc0103
OP_BRNN	src/flisp/opcodes.h	/^    OP_BRNE, OP_BRNEL, OP_CADR, OP_BRNN, OP_BRNNL, OP_BRN, OP_BRNL,$/;"	e	enum:__anon10a850cc0103
OP_BRNNL	src/flisp/opcodes.h	/^    OP_BRNE, OP_BRNEL, OP_CADR, OP_BRNN, OP_BRNNL, OP_BRN, OP_BRNL,$/;"	e	enum:__anon10a850cc0103
OP_BRT	src/flisp/opcodes.h	/^    OP_NOP=0, OP_DUP, OP_POP, OP_CALL, OP_TCALL, OP_JMP, OP_BRF, OP_BRT,$/;"	e	enum:__anon10a850cc0103
OP_BRTL	src/flisp/opcodes.h	/^    OP_JMPL, OP_BRFL, OP_BRTL, OP_RET,$/;"	e	enum:__anon10a850cc0103
OP_BUILTINP	src/flisp/opcodes.h	/^    OP_SYMBOLP, OP_NUMBERP, OP_BOUNDP, OP_PAIRP, OP_BUILTINP, OP_VECTORP,$/;"	e	enum:__anon10a850cc0103
OP_CADR	src/flisp/opcodes.h	/^    OP_BRNE, OP_BRNEL, OP_CADR, OP_BRNN, OP_BRNNL, OP_BRN, OP_BRNL,$/;"	e	enum:__anon10a850cc0103
OP_CALL	src/flisp/opcodes.h	/^    OP_NOP=0, OP_DUP, OP_POP, OP_CALL, OP_TCALL, OP_JMP, OP_BRF, OP_BRT,$/;"	e	enum:__anon10a850cc0103
OP_CALLL	src/flisp/opcodes.h	/^    OP_LOADA0, OP_LOADA1, OP_LOADC0, OP_LOADC1, OP_CALLL, OP_TCALLL,$/;"	e	enum:__anon10a850cc0103
OP_CAR	src/flisp/opcodes.h	/^    OP_CONS, OP_LIST, OP_CAR, OP_CDR, OP_SETCAR, OP_SETCDR,$/;"	e	enum:__anon10a850cc0103
OP_CDR	src/flisp/opcodes.h	/^    OP_CONS, OP_LIST, OP_CAR, OP_CDR, OP_SETCAR, OP_SETCDR,$/;"	e	enum:__anon10a850cc0103
OP_CLOSURE	src/flisp/opcodes.h	/^    OP_CLOSURE, OP_ARGC, OP_VARGC, OP_TRYCATCH, OP_FOR,$/;"	e	enum:__anon10a850cc0103
OP_COMPARE	src/flisp/opcodes.h	/^    OP_ADD, OP_SUB, OP_MUL, OP_DIV, OP_IDIV, OP_NUMEQ, OP_LT, OP_COMPARE,$/;"	e	enum:__anon10a850cc0103
OP_CONS	src/flisp/opcodes.h	/^    OP_CONS, OP_LIST, OP_CAR, OP_CDR, OP_SETCAR, OP_SETCDR,$/;"	e	enum:__anon10a850cc0103
OP_DIV	src/flisp/opcodes.h	/^    OP_ADD, OP_SUB, OP_MUL, OP_DIV, OP_IDIV, OP_NUMEQ, OP_LT, OP_COMPARE,$/;"	e	enum:__anon10a850cc0103
OP_DUP	src/flisp/opcodes.h	/^    OP_NOP=0, OP_DUP, OP_POP, OP_CALL, OP_TCALL, OP_JMP, OP_BRF, OP_BRT,$/;"	e	enum:__anon10a850cc0103
OP_EOF_OBJECT	src/flisp/opcodes.h	/^    OP_BOOL_CONST_T, OP_BOOL_CONST_F, OP_THE_EMPTY_LIST, OP_EOF_OBJECT,$/;"	e	enum:__anon10a850cc0103
OP_EQ	src/flisp/opcodes.h	/^    OP_EQ, OP_EQV, OP_EQUAL, OP_ATOMP, OP_NOT, OP_NULLP, OP_BOOLEANP,$/;"	e	enum:__anon10a850cc0103
OP_EQ	src/support/ptrhash.c	/^#define OP_EQ(/;"	d	file:
OP_EQUAL	src/flisp/opcodes.h	/^    OP_EQ, OP_EQV, OP_EQUAL, OP_ATOMP, OP_NOT, OP_NULLP, OP_BOOLEANP,$/;"	e	enum:__anon10a850cc0103
OP_EQV	src/flisp/opcodes.h	/^    OP_EQ, OP_EQV, OP_EQUAL, OP_ATOMP, OP_NOT, OP_NULLP, OP_BOOLEANP,$/;"	e	enum:__anon10a850cc0103
OP_FIXNUMP	src/flisp/opcodes.h	/^    OP_FIXNUMP, OP_FUNCTIONP,$/;"	e	enum:__anon10a850cc0103
OP_FOR	src/flisp/opcodes.h	/^    OP_CLOSURE, OP_ARGC, OP_VARGC, OP_TRYCATCH, OP_FOR,$/;"	e	enum:__anon10a850cc0103
OP_FUNCTIONP	src/flisp/opcodes.h	/^    OP_FIXNUMP, OP_FUNCTIONP,$/;"	e	enum:__anon10a850cc0103
OP_IDIV	src/flisp/opcodes.h	/^    OP_ADD, OP_SUB, OP_MUL, OP_DIV, OP_IDIV, OP_NUMEQ, OP_LT, OP_COMPARE,$/;"	e	enum:__anon10a850cc0103
OP_JMP	src/flisp/opcodes.h	/^    OP_NOP=0, OP_DUP, OP_POP, OP_CALL, OP_TCALL, OP_JMP, OP_BRF, OP_BRT,$/;"	e	enum:__anon10a850cc0103
OP_JMPL	src/flisp/opcodes.h	/^    OP_JMPL, OP_BRFL, OP_BRTL, OP_RET,$/;"	e	enum:__anon10a850cc0103
OP_KEYARGS	src/flisp/opcodes.h	/^    OP_OPTARGS, OP_BRBOUND, OP_KEYARGS, OP_BOX, OP_BOXL, OP_SHIFT,$/;"	e	enum:__anon10a850cc0103
OP_LARGC	src/flisp/opcodes.h	/^    OP_TAPPLY, OP_ADD2, OP_SUB2, OP_NEG, OP_LARGC, OP_LVARGC,$/;"	e	enum:__anon10a850cc0103
OP_LIST	src/flisp/opcodes.h	/^    OP_CONS, OP_LIST, OP_CAR, OP_CDR, OP_SETCAR, OP_SETCDR,$/;"	e	enum:__anon10a850cc0103
OP_LOAD0	src/flisp/opcodes.h	/^    OP_LOADT, OP_LOADF, OP_LOADNIL, OP_LOAD0, OP_LOAD1, OP_LOADI8,$/;"	e	enum:__anon10a850cc0103
OP_LOAD1	src/flisp/opcodes.h	/^    OP_LOADT, OP_LOADF, OP_LOADNIL, OP_LOAD0, OP_LOAD1, OP_LOADI8,$/;"	e	enum:__anon10a850cc0103
OP_LOADA	src/flisp/opcodes.h	/^    OP_LOADA, OP_LOADAL, OP_LOADC, OP_LOADCL,$/;"	e	enum:__anon10a850cc0103
OP_LOADA0	src/flisp/opcodes.h	/^    OP_LOADA0, OP_LOADA1, OP_LOADC0, OP_LOADC1, OP_CALLL, OP_TCALLL,$/;"	e	enum:__anon10a850cc0103
OP_LOADA1	src/flisp/opcodes.h	/^    OP_LOADA0, OP_LOADA1, OP_LOADC0, OP_LOADC1, OP_CALLL, OP_TCALLL,$/;"	e	enum:__anon10a850cc0103
OP_LOADAL	src/flisp/opcodes.h	/^    OP_LOADA, OP_LOADAL, OP_LOADC, OP_LOADCL,$/;"	e	enum:__anon10a850cc0103
OP_LOADC	src/flisp/opcodes.h	/^    OP_LOADA, OP_LOADAL, OP_LOADC, OP_LOADCL,$/;"	e	enum:__anon10a850cc0103
OP_LOADC0	src/flisp/opcodes.h	/^    OP_LOADA0, OP_LOADA1, OP_LOADC0, OP_LOADC1, OP_CALLL, OP_TCALLL,$/;"	e	enum:__anon10a850cc0103
OP_LOADC1	src/flisp/opcodes.h	/^    OP_LOADA0, OP_LOADA1, OP_LOADC0, OP_LOADC1, OP_CALLL, OP_TCALLL,$/;"	e	enum:__anon10a850cc0103
OP_LOADCL	src/flisp/opcodes.h	/^    OP_LOADA, OP_LOADAL, OP_LOADC, OP_LOADCL,$/;"	e	enum:__anon10a850cc0103
OP_LOADF	src/flisp/opcodes.h	/^    OP_LOADT, OP_LOADF, OP_LOADNIL, OP_LOAD0, OP_LOAD1, OP_LOADI8,$/;"	e	enum:__anon10a850cc0103
OP_LOADG	src/flisp/opcodes.h	/^    OP_LOADG, OP_LOADGL,$/;"	e	enum:__anon10a850cc0103
OP_LOADGL	src/flisp/opcodes.h	/^    OP_LOADG, OP_LOADGL,$/;"	e	enum:__anon10a850cc0103
OP_LOADI8	src/flisp/opcodes.h	/^    OP_LOADT, OP_LOADF, OP_LOADNIL, OP_LOAD0, OP_LOAD1, OP_LOADI8,$/;"	e	enum:__anon10a850cc0103
OP_LOADNIL	src/flisp/opcodes.h	/^    OP_LOADT, OP_LOADF, OP_LOADNIL, OP_LOAD0, OP_LOAD1, OP_LOADI8,$/;"	e	enum:__anon10a850cc0103
OP_LOADT	src/flisp/opcodes.h	/^    OP_LOADT, OP_LOADF, OP_LOADNIL, OP_LOAD0, OP_LOAD1, OP_LOADI8,$/;"	e	enum:__anon10a850cc0103
OP_LOADV	src/flisp/opcodes.h	/^    OP_LOADV, OP_LOADVL,$/;"	e	enum:__anon10a850cc0103
OP_LOADVL	src/flisp/opcodes.h	/^    OP_LOADV, OP_LOADVL,$/;"	e	enum:__anon10a850cc0103
OP_LT	src/flisp/opcodes.h	/^    OP_ADD, OP_SUB, OP_MUL, OP_DIV, OP_IDIV, OP_NUMEQ, OP_LT, OP_COMPARE,$/;"	e	enum:__anon10a850cc0103
OP_LVARGC	src/flisp/opcodes.h	/^    OP_TAPPLY, OP_ADD2, OP_SUB2, OP_NEG, OP_LARGC, OP_LVARGC,$/;"	e	enum:__anon10a850cc0103
OP_MUL	src/flisp/opcodes.h	/^    OP_ADD, OP_SUB, OP_MUL, OP_DIV, OP_IDIV, OP_NUMEQ, OP_LT, OP_COMPARE,$/;"	e	enum:__anon10a850cc0103
OP_NEG	src/flisp/opcodes.h	/^    OP_TAPPLY, OP_ADD2, OP_SUB2, OP_NEG, OP_LARGC, OP_LVARGC,$/;"	e	enum:__anon10a850cc0103
OP_NOP	src/flisp/opcodes.h	/^    OP_NOP=0, OP_DUP, OP_POP, OP_CALL, OP_TCALL, OP_JMP, OP_BRF, OP_BRT,$/;"	e	enum:__anon10a850cc0103
OP_NOT	src/flisp/opcodes.h	/^    OP_EQ, OP_EQV, OP_EQUAL, OP_ATOMP, OP_NOT, OP_NULLP, OP_BOOLEANP,$/;"	e	enum:__anon10a850cc0103
OP_NULLP	src/flisp/opcodes.h	/^    OP_EQ, OP_EQV, OP_EQUAL, OP_ATOMP, OP_NOT, OP_NULLP, OP_BOOLEANP,$/;"	e	enum:__anon10a850cc0103
OP_NUMBERP	src/flisp/opcodes.h	/^    OP_SYMBOLP, OP_NUMBERP, OP_BOUNDP, OP_PAIRP, OP_BUILTINP, OP_VECTORP,$/;"	e	enum:__anon10a850cc0103
OP_NUMEQ	src/flisp/opcodes.h	/^    OP_ADD, OP_SUB, OP_MUL, OP_DIV, OP_IDIV, OP_NUMEQ, OP_LT, OP_COMPARE,$/;"	e	enum:__anon10a850cc0103
OP_OPTARGS	src/flisp/opcodes.h	/^    OP_OPTARGS, OP_BRBOUND, OP_KEYARGS, OP_BOX, OP_BOXL, OP_SHIFT,$/;"	e	enum:__anon10a850cc0103
OP_PAIRP	src/flisp/opcodes.h	/^    OP_SYMBOLP, OP_NUMBERP, OP_BOUNDP, OP_PAIRP, OP_BUILTINP, OP_VECTORP,$/;"	e	enum:__anon10a850cc0103
OP_POP	src/flisp/opcodes.h	/^    OP_NOP=0, OP_DUP, OP_POP, OP_CALL, OP_TCALL, OP_JMP, OP_BRF, OP_BRT,$/;"	e	enum:__anon10a850cc0103
OP_REMOVED_SETC	src/flisp/opcodes.h	/^    OP_SETA, OP_SETAL, OP_REMOVED_SETC, OP_REMOVED_SETCL,$/;"	e	enum:__anon10a850cc0103
OP_REMOVED_SETCL	src/flisp/opcodes.h	/^    OP_SETA, OP_SETAL, OP_REMOVED_SETC, OP_REMOVED_SETCL,$/;"	e	enum:__anon10a850cc0103
OP_RET	src/flisp/opcodes.h	/^    OP_JMPL, OP_BRFL, OP_BRTL, OP_RET,$/;"	e	enum:__anon10a850cc0103
OP_SETA	src/flisp/opcodes.h	/^    OP_SETA, OP_SETAL, OP_REMOVED_SETC, OP_REMOVED_SETCL,$/;"	e	enum:__anon10a850cc0103
OP_SETAL	src/flisp/opcodes.h	/^    OP_SETA, OP_SETAL, OP_REMOVED_SETC, OP_REMOVED_SETCL,$/;"	e	enum:__anon10a850cc0103
OP_SETCAR	src/flisp/opcodes.h	/^    OP_CONS, OP_LIST, OP_CAR, OP_CDR, OP_SETCAR, OP_SETCDR,$/;"	e	enum:__anon10a850cc0103
OP_SETCDR	src/flisp/opcodes.h	/^    OP_CONS, OP_LIST, OP_CAR, OP_CDR, OP_SETCAR, OP_SETCDR,$/;"	e	enum:__anon10a850cc0103
OP_SETG	src/flisp/opcodes.h	/^    OP_SETG, OP_SETGL,$/;"	e	enum:__anon10a850cc0103
OP_SETGL	src/flisp/opcodes.h	/^    OP_SETG, OP_SETGL,$/;"	e	enum:__anon10a850cc0103
OP_SHIFT	src/flisp/opcodes.h	/^    OP_OPTARGS, OP_BRBOUND, OP_KEYARGS, OP_BOX, OP_BOXL, OP_SHIFT,$/;"	e	enum:__anon10a850cc0103
OP_SUB	src/flisp/opcodes.h	/^    OP_ADD, OP_SUB, OP_MUL, OP_DIV, OP_IDIV, OP_NUMEQ, OP_LT, OP_COMPARE,$/;"	e	enum:__anon10a850cc0103
OP_SUB2	src/flisp/opcodes.h	/^    OP_TAPPLY, OP_ADD2, OP_SUB2, OP_NEG, OP_LARGC, OP_LVARGC,$/;"	e	enum:__anon10a850cc0103
OP_SYMBOLP	src/flisp/opcodes.h	/^    OP_SYMBOLP, OP_NUMBERP, OP_BOUNDP, OP_PAIRP, OP_BUILTINP, OP_VECTORP,$/;"	e	enum:__anon10a850cc0103
OP_TAPPLY	src/flisp/opcodes.h	/^    OP_TAPPLY, OP_ADD2, OP_SUB2, OP_NEG, OP_LARGC, OP_LVARGC,$/;"	e	enum:__anon10a850cc0103
OP_TCALL	src/flisp/opcodes.h	/^    OP_NOP=0, OP_DUP, OP_POP, OP_CALL, OP_TCALL, OP_JMP, OP_BRF, OP_BRT,$/;"	e	enum:__anon10a850cc0103
OP_TCALLL	src/flisp/opcodes.h	/^    OP_LOADA0, OP_LOADA1, OP_LOADC0, OP_LOADC1, OP_CALLL, OP_TCALLL,$/;"	e	enum:__anon10a850cc0103
OP_THE_EMPTY_LIST	src/flisp/opcodes.h	/^    OP_BOOL_CONST_T, OP_BOOL_CONST_F, OP_THE_EMPTY_LIST, OP_EOF_OBJECT,$/;"	e	enum:__anon10a850cc0103
OP_TRYCATCH	src/flisp/opcodes.h	/^    OP_CLOSURE, OP_ARGC, OP_VARGC, OP_TRYCATCH, OP_FOR,$/;"	e	enum:__anon10a850cc0103
OP_VARGC	src/flisp/opcodes.h	/^    OP_CLOSURE, OP_ARGC, OP_VARGC, OP_TRYCATCH, OP_FOR,$/;"	e	enum:__anon10a850cc0103
OP_VECTOR	src/flisp/opcodes.h	/^    OP_VECTOR, OP_AREF, OP_ASET,$/;"	e	enum:__anon10a850cc0103
OP_VECTORP	src/flisp/opcodes.h	/^    OP_SYMBOLP, OP_NUMBERP, OP_BOUNDP, OP_PAIRP, OP_BUILTINP, OP_VECTORP,$/;"	e	enum:__anon10a850cc0103
ORCNotifyObjectEmitted	src/debuginfo.cpp	/^JL_DLLEXPORT void ORCNotifyObjectEmitted(JITEventListener *Listener,$/;"	f	typeref:typename:JL_DLLEXPORT void
ORDERING_AMD	stdlib/SuiteSparse/src/spqr.jl	/^const ORDERING_AMD     = Int32(5) # AMD(A'*A)$/;"	v
ORDERING_BEST	stdlib/SuiteSparse/src/spqr.jl	/^const ORDERING_BEST    = Int32(8) # try COLAMD, AMD, and METIS; pick best$/;"	v
ORDERING_BESTAMD	stdlib/SuiteSparse/src/spqr.jl	/^const ORDERING_BESTAMD = Int32(9) # try COLAMD and AMD; pick best#$/;"	v
ORDERING_CHOLMOD	stdlib/SuiteSparse/src/spqr.jl	/^const ORDERING_CHOLMOD = Int32(4) # CHOLMOD best-effort (COLAMD, METIS,...)$/;"	v
ORDERING_COLAMD	stdlib/SuiteSparse/src/spqr.jl	/^const ORDERING_COLAMD  = Int32(2)$/;"	v
ORDERING_DEFAULT	stdlib/SuiteSparse/src/spqr.jl	/^const ORDERING_DEFAULT = Int32(7) # SuiteSparseQR default ordering$/;"	v
ORDERING_FIXED	stdlib/SuiteSparse/src/spqr.jl	/^const ORDERING_FIXED   = Int32(0)$/;"	v
ORDERING_GIVEN	stdlib/SuiteSparse/src/spqr.jl	/^const ORDERING_GIVEN   = Int32(3) # only used for C\/C++ interface$/;"	v
ORDERING_METIS	stdlib/SuiteSparse/src/spqr.jl	/^const ORDERING_METIS   = Int32(6) # metis(A'*A)$/;"	v
ORDERING_NATURAL	stdlib/SuiteSparse/src/spqr.jl	/^const ORDERING_NATURAL = Int32(1)$/;"	v
OS X	doc/build/distributing.md	/^OS X$/;"	s
OSXUNWIND_BB_NAME	deps/unwind.mk	/^OSXUNWIND_BB_NAME := LibOSXUnwind.v$(OSXUNWIND_VER)$/;"	m
OSXUNWIND_BB_URL_BASE	deps/unwind.mk	/^OSXUNWIND_BB_URL_BASE := https:\/\/github.com\/JuliaPackaging\/Yggdrasil\/releases\/download\/Li/;"	m
OSXUNWIND_FLAGS	deps/unwind.mk	/^OSXUNWIND_FLAGS := ARCH="$(ARCH)" CC="$(CC)" FC="$(FC)" AR="$(AR)" OS="$(OS)" USECLANG=$(USECLAN/;"	m
Obj;	test/core.jl	/^mutable struct Obj; x; end$/;"	f
Obj;	test/missing.jl	/^mutable struct Obj; x; end$/;"	f
ObjBufferSV	src/jitlayers.h	/^    SmallVector<char, 4096> ObjBufferSV;$/;"	m	class:JuliaOJIT	typeref:typename:SmallVector<char,4096>
ObjLayerT	src/jitlayers.h	/^    typedef orc::LegacyRTDyldObjectLinkingLayer ObjLayerT;$/;"	t	class:JuliaOJIT	typeref:typename:orc::LegacyRTDyldObjectLinkingLayer
ObjLoadTest	test/llvmcall.jl	/^module ObjLoadTest$/;"	f
ObjMember	test/core.jl	/^mutable struct ObjMember$/;"	f
ObjStream	src/jitlayers.h	/^    raw_svector_ostream ObjStream;$/;"	m	class:JuliaOJIT	typeref:typename:raw_svector_ostream
Object allocation	doc/src/devdocs/object.md	/^## Object allocation$/;"	s
Object layout (`jl_value_t`)	doc/src/devdocs/object.md	/^## Object layout (`jl_value_t`)$/;"	s
ObjectInfo	src/debuginfo.cpp	/^struct ObjectInfo {$/;"	s	file:
ObjectLayer	src/jitlayers.h	/^    ObjLayerT ObjectLayer;$/;"	m	class:JuliaOJIT	typeref:typename:ObjLayerT
Oct	stdlib/Dates/src/query.jl	/^const Oct = 10$/;"	v
Oct	stdlib/Dates/test/adjusters.jl	/^Oct = Dates.DateTime(2013, 10, 10) #Thursday$/;"	v
Oct	stdlib/Dates/test/query.jl	/^Oct = Dates.DateTime(2013, 10, 10) # Thursday$/;"	v
October	stdlib/Dates/src/query.jl	/^const October = 10$/;"	v
OffsetArray	stdlib/Random/test/runtests.jl	/^                   OffsetArray(rand(2, 3), (4, -5)) => Float64]$/;"	f
OffsetArray	test/testhelpers/OffsetArrays.jl	/^OffsetArray(A::AbstractArray{T,N}, offsets::NTuple{N,Int}) where {T,N} = OffsetArray{T,N,typeof(/;"	f
OffsetArray	test/testhelpers/OffsetArrays.jl	/^OffsetArray(A::AbstractArray{T,N}, offsets::Vararg{Int,N}) where {T,N} = OffsetArray(A, offsets)$/;"	f
OffsetArray	test/testhelpers/OffsetArrays.jl	/^struct OffsetArray{T,N,AA<:AbstractArray} <: AbstractArray{T,N}$/;"	f
OffsetArrays	test/testhelpers/OffsetArrays.jl	/^module OffsetArrays$/;"	f
OffsetAxis	test/testhelpers/OffsetArrays.jl	/^const OffsetAxis = Union{Integer, UnitRange, Base.IdentityUnitRange{<:UnitRange}, Base.OneTo}$/;"	v
OldSSAValue	base/compiler/ssair/ir.jl	/^struct OldSSAValue$/;"	f
Omitted and extra indices	doc/src/manual/arrays.md	/^#### Omitted and extra indices$/;"	t
On the command line	doc/src/manual/embedding.md	/^#### On the command line$/;"	t
OneTo	base/range.jl	/^    function OneTo{T}(r::AbstractRange) where {T<:Integer}$/;"	f
OneTo	base/range.jl	/^OneTo(r::AbstractRange{T}) where {T<:Integer} = OneTo{T}(r)$/;"	f
OneTo	base/range.jl	/^OneTo(stop::T) where {T<:Integer} = OneTo{T}(stop)$/;"	f
OneTo	base/range.jl	/^struct OneTo{T<:Integer} <: AbstractUnitRange{T}$/;"	f
Ones	test/subtype.jl	/^struct Ones{T, N, Axes} end$/;"	f
OpInfoLookup	src/disasm.cpp	/^static int OpInfoLookup(void *DisInfo, uint64_t PC, uint64_t Offset, uint64_t Size,$/;"	f	namespace:__anon2853c92e0211	typeref:typename:int	file:
OpenInterval	test/sets.jl	/^struct OpenInterval{T}$/;"	f
Operations on Types	doc/src/manual/types.md	/^## Operations on Types$/;"	s
Operator Precedence and Associativity	doc/src/manual/mathematical-operations.md	/^## Operator Precedence and Associativity$/;"	s
Operators	doc/src/devdocs/ast.md	/^### Operators$/;"	S
Operators Are Functions	doc/src/manual/functions.md	/^## Operators Are Functions$/;"	s
Operators With Special Names	doc/src/manual/functions.md	/^## Operators With Special Names$/;"	s
OptimizationState	base/compiler/optimize.jl	/^    function OptimizationState(frame::InferenceState)$/;"	f
OptimizationState	base/compiler/optimize.jl	/^    function OptimizationState(linfo::MethodInstance, src::CodeInfo,$/;"	f
OptimizationState	base/compiler/optimize.jl	/^function OptimizationState(linfo::MethodInstance, params::Params)$/;"	f
OptimizationState	base/compiler/optimize.jl	/^mutable struct OptimizationState$/;"	f
Optimize network I/O during parallel execution	doc/src/manual/performance-tips.md	/^## Optimize network I\/O during parallel execution$/;"	s
Optimizer	src/llvm-alloc-opt.cpp	/^    Optimizer(Function &F, AllocOpt &pass)$/;"	f	struct:__anon0a1571000111::Optimizer	file:
Optimizer	src/llvm-alloc-opt.cpp	/^struct Optimizer {$/;"	s	namespace:__anon0a1571000111	file:
Optional Arguments	doc/src/manual/functions.md	/^## Optional Arguments$/;"	s
Optionally-generated functions	doc/src/manual/metaprogramming.md	/^### Optionally-generated functions$/;"	S
Options	stdlib/REPL/src/REPL.jl	/^mutable struct Options$/;"	f
Options for controlling the display of profile results	doc/src/manual/profile.md	/^## Options for controlling the display of profile results$/;"	s
OrCmds	base/cmd.jl	/^    OrCmds(a::AbstractCmd, b::AbstractCmd) = new(a, b)$/;"	f
OrCmds	base/cmd.jl	/^struct OrCmds <: AbstractCmd$/;"	f
Order	base/ordering.jl	/^module Order$/;"	f
Order-Related Functions	doc/src/base/sort.md	/^## Order-Related Functions$/;"	s
OrderStyle	base/traits.jl	/^OrderStyle(::Type{<:Any}) = Unordered()$/;"	f
OrderStyle	base/traits.jl	/^OrderStyle(::Type{<:Real}) = Ordered()$/;"	f
OrderStyle	base/traits.jl	/^OrderStyle(instance) = OrderStyle(typeof(instance))$/;"	f
OrderStyle	base/traits.jl	/^abstract type OrderStyle end$/;"	f
Ordered	base/traits.jl	/^struct Ordered <: OrderStyle end$/;"	f
Ordering	base/ordering.jl	/^abstract type Ordering end$/;"	f
OrdinalRange	base/range.jl	/^abstract type OrdinalRange{T,S} <: AbstractRange{T} end$/;"	f
OrdinalValue	test/precompile.jl	/^              struct OrdinalValue{T, R <: Integer} <: CategoricalValue{T, R}$/;"	f
OrigFn	deps/valgrind/valgrind.h	/^   OrigFn;$/;"	t	typeref:struct:__anon428795130108
OrigFn	deps/valgrind/valgrind.h	/^   OrigFn;$/;"	t	typeref:struct:__anon428795130208
OrigFn	deps/valgrind/valgrind.h	/^   OrigFn;$/;"	t	typeref:struct:__anon428795130308
OrigFn	deps/valgrind/valgrind.h	/^   OrigFn;$/;"	t	typeref:struct:__anon428795130408
OrigFn	deps/valgrind/valgrind.h	/^   OrigFn;$/;"	t	typeref:struct:__anon428795130508
OrigFn	deps/valgrind/valgrind.h	/^   OrigFn;$/;"	t	typeref:struct:__anon428795130608
OrigFn	deps/valgrind/valgrind.h	/^   OrigFn;$/;"	t	typeref:struct:__anon428795130708
OrigFn	deps/valgrind/valgrind.h	/^   OrigFn;$/;"	t	typeref:struct:__anon428795130808
OrigFn	deps/valgrind/valgrind.h	/^   OrigFn;$/;"	t	typeref:struct:__anon428795130a08
OrigFn	deps/valgrind/valgrind.h	/^   OrigFn;$/;"	t	typeref:struct:__anon428795130b08
OrigFn	deps/valgrind/valgrind.h	/^  OrigFn;$/;"	t	typeref:struct:__anon428795130908
Other Test Macros	stdlib/Test/docs/src/index.md	/^## Other Test Macros$/;"	s
OtherInt	stdlib/Serialization/src/Serialization.jl	/^const OtherInt = Int32$/;"	v
OtherInt	stdlib/Serialization/src/Serialization.jl	/^const OtherInt = Int64$/;"	v
OtherPeriod	stdlib/Dates/src/periods.jl	/^const OtherPeriod = Union{Month, Year}$/;"	v
OutOfMemoryError	base/boot.jl	/^struct OutOfMemoryError    <: Exception end$/;"	f
OutOfMemoryError	src/flisp/flisp.h	/^    value_t OutOfMemoryError, DivideError, BoundsError, EnumerationError;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
Outer Constructor Methods	doc/src/manual/constructors.md	/^## Outer Constructor Methods$/;"	s
Outer-only constructors	doc/src/manual/constructors.md	/^## Outer-only constructors$/;"	s
Outer5906	test/compiler/inference.jl	/^abstract type Outer5906{T} end$/;"	f
Output-type computation	doc/src/manual/methods.md	/^### Output-type computation$/;"	S
Overflow behavior	doc/src/manual/integers-and-floating-point-numbers.md	/^### Overflow behavior$/;"	S
OverflowError	base/boot.jl	/^struct OverflowError <: Exception$/;"	f
OverflowSafe	base/range.jl	/^const OverflowSafe = Union{Bool,Int8,Int16,Int32,Int64,Int128,$/;"	v
Overview of Julia to LLVM Interface	doc/src/devdocs/llvm.md	/^## Overview of Julia to LLVM Interface$/;"	s
OwningObj	src/jitlayers.h	/^    typedef object::OwningBinary<object::ObjectFile> OwningObj;$/;"	t	class:JuliaOJIT	typeref:typename:object::OwningBinary<object::ObjectFile>
P	test/offsetarray.jl	/^P = OffsetArray(rand(8,8), (1,1))$/;"	v
PACKAGE	deps/srccache/patchelf-0.9/Makefile.in	/^PACKAGE = @PACKAGE@$/;"	m
PACKAGE	deps/srccache/patchelf-0.9/src/Makefile.in	/^PACKAGE = @PACKAGE@$/;"	m
PACKAGE	deps/srccache/patchelf-0.9/tests/Makefile.in	/^PACKAGE = @PACKAGE@$/;"	m
PACKAGE_BUGREPORT	deps/srccache/patchelf-0.9/Makefile.in	/^PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@$/;"	m
PACKAGE_BUGREPORT	deps/srccache/patchelf-0.9/src/Makefile.in	/^PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@$/;"	m
PACKAGE_BUGREPORT	deps/srccache/patchelf-0.9/tests/Makefile.in	/^PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@$/;"	m
PACKAGE_NAME	deps/srccache/patchelf-0.9/Makefile.in	/^PACKAGE_NAME = @PACKAGE_NAME@$/;"	m
PACKAGE_NAME	deps/srccache/patchelf-0.9/src/Makefile.in	/^PACKAGE_NAME = @PACKAGE_NAME@$/;"	m
PACKAGE_NAME	deps/srccache/patchelf-0.9/tests/Makefile.in	/^PACKAGE_NAME = @PACKAGE_NAME@$/;"	m
PACKAGE_STRING	deps/srccache/patchelf-0.9/Makefile.in	/^PACKAGE_STRING = @PACKAGE_STRING@$/;"	m
PACKAGE_STRING	deps/srccache/patchelf-0.9/src/Makefile.in	/^PACKAGE_STRING = @PACKAGE_STRING@$/;"	m
PACKAGE_STRING	deps/srccache/patchelf-0.9/tests/Makefile.in	/^PACKAGE_STRING = @PACKAGE_STRING@$/;"	m
PACKAGE_TARNAME	deps/srccache/patchelf-0.9/Makefile.in	/^PACKAGE_TARNAME = @PACKAGE_TARNAME@$/;"	m
PACKAGE_TARNAME	deps/srccache/patchelf-0.9/src/Makefile.in	/^PACKAGE_TARNAME = @PACKAGE_TARNAME@$/;"	m
PACKAGE_TARNAME	deps/srccache/patchelf-0.9/tests/Makefile.in	/^PACKAGE_TARNAME = @PACKAGE_TARNAME@$/;"	m
PACKAGE_URL	deps/srccache/patchelf-0.9/Makefile.in	/^PACKAGE_URL = @PACKAGE_URL@$/;"	m
PACKAGE_URL	deps/srccache/patchelf-0.9/src/Makefile.in	/^PACKAGE_URL = @PACKAGE_URL@$/;"	m
PACKAGE_URL	deps/srccache/patchelf-0.9/tests/Makefile.in	/^PACKAGE_URL = @PACKAGE_URL@$/;"	m
PACKAGE_VERSION	deps/srccache/patchelf-0.9/Makefile.in	/^PACKAGE_VERSION = @PACKAGE_VERSION@$/;"	m
PACKAGE_VERSION	deps/srccache/patchelf-0.9/src/Makefile.in	/^PACKAGE_VERSION = @PACKAGE_VERSION@$/;"	m
PACKAGE_VERSION	deps/srccache/patchelf-0.9/tests/Makefile.in	/^PACKAGE_VERSION = @PACKAGE_VERSION@$/;"	m
PAGES	doc/make.jl	/^const PAGES = [$/;"	v
PAGESIZE	deps/srccache/patchelf-0.9/configure.ac	/^AC_DEFINE_UNQUOTED(PAGESIZE, ${PAGESIZE})$/;"	d
PAGESIZE	stdlib/Mmap/src/Mmap.jl	/^const PAGESIZE = Int(Sys.isunix() ? ccall(:jl_getpagesize, Clong, ()) : ccall(:jl_getallocationg/;"	v
PAGE_EXECUTE_READ	stdlib/Mmap/src/Mmap.jl	/^const PAGE_EXECUTE_READ      = DWORD(0x20)$/;"	v
PAGE_EXECUTE_READWRITE	stdlib/Mmap/src/Mmap.jl	/^const PAGE_EXECUTE_READWRITE = DWORD(0x40)$/;"	v
PAGE_EXECUTE_WRITECOPY	stdlib/Mmap/src/Mmap.jl	/^const PAGE_EXECUTE_WRITECOPY = DWORD(0x80)$/;"	v
PAGE_PRESENT	src/signals-mach.c	/^    PAGE_PRESENT = 0x1$/;"	e	enum:x86_trap_flags	file:
PAGE_READONLY	stdlib/Mmap/src/Mmap.jl	/^const PAGE_READONLY          = DWORD(0x02)$/;"	v
PAGE_READWRITE	stdlib/Mmap/src/Mmap.jl	/^const PAGE_READWRITE         = DWORD(0x04)$/;"	v
PAGE_WRITECOPY	stdlib/Mmap/src/Mmap.jl	/^const PAGE_WRITECOPY         = DWORD(0x08)$/;"	v
PATCHELF	deps/Makefile	/^PATCHELF:=$(build_depsbindir)\/patchelf$/;"	m
PATCHELF	deps/Makefile	/^PATCHELF:=patchelf$/;"	m
PATCHELF	deps/srccache/patchelf-0.9/patchelf.1	/^.TH PATCHELF 1 "JUNE 2010" PATCHELF "User Manuals"$/;"	t
PATCHELF_BIN	deps/Makefile	/^PATCHELF_BIN := $(CUSTOM_LD_LIBRARY_PATH) $(PATCHELF)$/;"	m
PATHBUF	src/dlload.c	/^#define PATHBUF /;"	d	file:
PATHLISTSEPSTRING	src/support/dirpath.h	/^#define PATHLISTSEPSTRING /;"	d
PATHSEPSTRING	src/support/dirpath.h	/^#define PATHSEPSTRING /;"	d
PATH_MAX	src/support/dirpath.h	/^#define PATH_MAX /;"	d
PATH_SEPARATOR	deps/srccache/patchelf-0.9/Makefile.in	/^PATH_SEPARATOR = @PATH_SEPARATOR@$/;"	m
PATH_SEPARATOR	deps/srccache/patchelf-0.9/src/Makefile.in	/^PATH_SEPARATOR = @PATH_SEPARATOR@$/;"	m
PATH_SEPARATOR	deps/srccache/patchelf-0.9/tests/Makefile.in	/^PATH_SEPARATOR = @PATH_SEPARATOR@$/;"	m
PATTERN	stdlib/SuiteSparse/src/cholmod_h.jl	/^const PATTERN = Int32(0)       # pattern only, no numerical values$/;"	v
PCRE	base/pcre.jl	/^module PCRE$/;"	f
PCRE_BB_NAME	deps/pcre.mk	/^PCRE_BB_NAME := PCRE2.v$(PCRE_VER).0$/;"	m
PCRE_BB_URL_BASE	deps/pcre.mk	/^PCRE_BB_URL_BASE := https:\/\/github.com\/JuliaPackaging\/Yggdrasil\/releases\/download\/PCRE2-v/;"	m
PCRE_CFLAGS	deps/pcre.mk	/^PCRE_CFLAGS := -O3$/;"	m
PCRE_COMPILE_LOCK	base/pcre.jl	/^PCRE_COMPILE_LOCK = nothing$/;"	v
PCRE_CONST	base/Makefile	/^PCRE_CONST := 0x[0-9a-fA-F]+|[0-9]+|\\([\\-0-9]+\\)$/;"	m
PCRE_INCL_PATH	base/Makefile	/^  PCRE_INCL_PATH := $(build_includedir)\/pcre2.h$/;"	m
PCRE_INCL_PATH	base/Makefile	/^  PCRE_INCL_PATH := $(shell $(PCRE_CONFIG) --prefix)\/include\/pcre2.h$/;"	m
PCRE_LDFLAGS	deps/pcre.mk	/^PCRE_LDFLAGS := $(RPATH_ESCAPED_ORIGIN)$/;"	m
PCRE_LIB	base/pcre.jl	/^const PCRE_LIB = "libpcre2-8"$/;"	v
PDP	src/clangsa/GCChecker.cpp	/^    #define PDP /;"	d	file:
PDP_ENDIAN	src/support/dtypes.h	/^#define PDP_ENDIAN /;"	d
PEOIterator	src/llvm-late-gc-lowering.cpp	/^    PEOIterator(const std::vector<SetVector<int>> &Neighbors) : Neighbors(Neighbors) {$/;"	f	struct:PEOIterator	file:
PEOIterator	src/llvm-late-gc-lowering.cpp	/^struct PEOIterator {$/;"	s	file:
PERMBOXN_FUNC	src/datatype.c	/^#define PERMBOXN_FUNC(/;"	d	file:
PF_ARM_ABS	deps/srccache/patchelf-0.9/src/elf.h	/^#define PF_ARM_ABS	/;"	d
PF_ARM_PI	deps/srccache/patchelf-0.9/src/elf.h	/^#define PF_ARM_PI	/;"	d
PF_ARM_SB	deps/srccache/patchelf-0.9/src/elf.h	/^#define PF_ARM_SB	/;"	d
PF_HP_CODE	deps/srccache/patchelf-0.9/src/elf.h	/^#define PF_HP_CODE	/;"	d
PF_HP_FAR_SHARED	deps/srccache/patchelf-0.9/src/elf.h	/^#define PF_HP_FAR_SHARED	/;"	d
PF_HP_LAZYSWAP	deps/srccache/patchelf-0.9/src/elf.h	/^#define PF_HP_LAZYSWAP	/;"	d
PF_HP_MODIFY	deps/srccache/patchelf-0.9/src/elf.h	/^#define PF_HP_MODIFY	/;"	d
PF_HP_NEAR_SHARED	deps/srccache/patchelf-0.9/src/elf.h	/^#define PF_HP_NEAR_SHARED	/;"	d
PF_HP_PAGE_SIZE	deps/srccache/patchelf-0.9/src/elf.h	/^#define PF_HP_PAGE_SIZE	/;"	d
PF_HP_SBP	deps/srccache/patchelf-0.9/src/elf.h	/^#define PF_HP_SBP	/;"	d
PF_IA_64_NORECOV	deps/srccache/patchelf-0.9/src/elf.h	/^#define PF_IA_64_NORECOV	/;"	d
PF_MASKOS	deps/srccache/patchelf-0.9/src/elf.h	/^#define PF_MASKOS	/;"	d
PF_MASKPROC	deps/srccache/patchelf-0.9/src/elf.h	/^#define PF_MASKPROC	/;"	d
PF_MIPS_LOCAL	deps/srccache/patchelf-0.9/src/elf.h	/^#define PF_MIPS_LOCAL	/;"	d
PF_PARISC_SBP	deps/srccache/patchelf-0.9/src/elf.h	/^#define PF_PARISC_SBP	/;"	d
PF_R	deps/srccache/patchelf-0.9/src/elf.h	/^#define PF_R	/;"	d
PF_W	deps/srccache/patchelf-0.9/src/elf.h	/^#define PF_W	/;"	d
PF_X	deps/srccache/patchelf-0.9/src/elf.h	/^#define PF_X	/;"	d
PGRP	stdlib/Distributed/src/cluster.jl	/^const PGRP = ProcessGroup([])$/;"	v
PIO2_HI	base/special/trig.jl	/^PIO2_HI(::Type{Float32}) = 1.5707962513f+00$/;"	f
PIO2_HI	base/special/trig.jl	/^PIO2_HI(::Type{Float64}) = 1.57079632679489655800e+00$/;"	f
PIO2_LO	base/special/trig.jl	/^PIO2_LO(::Type{Float32}) = 7.5497894159f-08$/;"	f
PIO2_LO	base/special/trig.jl	/^PIO2_LO(::Type{Float64}) = 6.12323399573676603587e-17$/;"	f
PKG_GIT_URL	stdlib/Makefile	/^PKG_GIT_URL := git:\/\/github.com\/JuliaLang\/Pkg.jl.git$/;"	m
PKG_TAR_URL	stdlib/Makefile	/^PKG_TAR_URL = https:\/\/api.github.com\/repos\/JuliaLang\/Pkg.jl\/tarball\/$1$/;"	m
PLAT_amd64_darwin	deps/valgrind/valgrind.h	/^#  define PLAT_amd64_darwin /;"	d
PLAT_amd64_linux	deps/valgrind/valgrind.h	/^#  define PLAT_amd64_linux /;"	d
PLAT_amd64_win64	deps/valgrind/valgrind.h	/^#  define PLAT_amd64_win64 /;"	d
PLAT_arm64_linux	deps/valgrind/valgrind.h	/^#  define PLAT_arm64_linux /;"	d
PLAT_arm_linux	deps/valgrind/valgrind.h	/^#  define PLAT_arm_linux /;"	d
PLAT_mips32_linux	deps/valgrind/valgrind.h	/^#  define PLAT_mips32_linux /;"	d
PLAT_mips64_linux	deps/valgrind/valgrind.h	/^#  define PLAT_mips64_linux /;"	d
PLAT_ppc32_linux	deps/valgrind/valgrind.h	/^#  define PLAT_ppc32_linux /;"	d
PLAT_ppc64be_linux	deps/valgrind/valgrind.h	/^#  define PLAT_ppc64be_linux /;"	d
PLAT_ppc64le_linux	deps/valgrind/valgrind.h	/^#  define PLAT_ppc64le_linux /;"	d
PLAT_s390x_linux	deps/valgrind/valgrind.h	/^#  define PLAT_s390x_linux /;"	d
PLAT_x86_darwin	deps/valgrind/valgrind.h	/^#  define PLAT_x86_darwin /;"	d
PLAT_x86_linux	deps/valgrind/valgrind.h	/^#  define PLAT_x86_linux /;"	d
PLAT_x86_win32	deps/valgrind/valgrind.h	/^#  define PLAT_x86_win32 /;"	d
PM	src/jitlayers.h	/^    legacy::PassManager PM;$/;"	m	class:JuliaOJIT	typeref:typename:legacy::PassManager
PNG	stdlib/Base64/test/runtests.jl	/^struct PNG end$/;"	f
PN_XNUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define PN_XNUM	/;"	d
POLY	src/crc32c.c	/^#define POLY /;"	d	file:
POP	src/flisp/flisp.c	/^#define POP(/;"	d	file:
POPN	src/flisp/flisp.c	/^#define POPN(/;"	d	file:
POP_GC_FRAME_NAME	src/llvm-pass-helpers.cpp	/^    static const char *POP_GC_FRAME_NAME = "julia.pop_gc_frame";$/;"	v	namespace:jl_intrinsics	typeref:typename:const char *	file:
POST_INSTALL	deps/srccache/patchelf-0.9/Makefile.in	/^POST_INSTALL = :$/;"	m
POST_INSTALL	deps/srccache/patchelf-0.9/src/Makefile.in	/^POST_INSTALL = :$/;"	m
POST_INSTALL	deps/srccache/patchelf-0.9/tests/Makefile.in	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	deps/srccache/patchelf-0.9/Makefile.in	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	deps/srccache/patchelf-0.9/src/Makefile.in	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	deps/srccache/patchelf-0.9/tests/Makefile.in	/^POST_UNINSTALL = :$/;"	m
POW10_OFFSET	base/ryu/utils.jl	/^const POW10_OFFSET = UInt16[$/;"	v
POW10_SPLIT	base/ryu/utils.jl	/^const POW10_SPLIT = collect(Iterators.flatten(map(0:63) do idx$/;"	v
PPC64_LOCAL_ENTRY_OFFSET	deps/srccache/patchelf-0.9/src/elf.h	/^#define PPC64_LOCAL_ENTRY_OFFSET(/;"	d
PPC64_OPT_MULTI_TOC	deps/srccache/patchelf-0.9/src/elf.h	/^#define PPC64_OPT_MULTI_TOC	/;"	d
PPC64_OPT_TLS	deps/srccache/patchelf-0.9/src/elf.h	/^#define PPC64_OPT_TLS	/;"	d
PR16155	test/errorshow.jl	/^mutable struct PR16155$/;"	f
PR16155line	test/errorshow.jl	/^PR16155line = @__LINE__() + 2$/;"	v
PR16155line2	test/errorshow.jl	/^PR16155line2 = @__LINE__() + 1$/;"	v
PR20530;	test/numbers.jl	/^struct PR20530; end$/;"	f
PR20889;	test/numbers.jl	/^    struct PR20889; x; end$/;"	f
PR20889;	test/numbers.jl	/^struct PR20889; x; end$/;"	f
PRECISION	base/grisu/grisu.jl	/^const PRECISION = 3$/;"	v
PRE_INSTALL	deps/srccache/patchelf-0.9/Makefile.in	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	deps/srccache/patchelf-0.9/src/Makefile.in	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	deps/srccache/patchelf-0.9/tests/Makefile.in	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	deps/srccache/patchelf-0.9/Makefile.in	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	deps/srccache/patchelf-0.9/src/Makefile.in	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	deps/srccache/patchelf-0.9/tests/Makefile.in	/^PRE_UNINSTALL = :$/;"	m
PRIjint	src/ccalltest.c	/^#define PRIjint /;"	d	file:
PRODUCTARCHIVE	contrib/mac/frameworkapp/Makefile	/^PRODUCTARCHIVE := $(BUILDROOT)\/$(FRAMEWORK_NAME)-$(JULIA_VERSION).pkg$/;"	m
PROFILE_JL_THREADING	src/threading.h	/^#define PROFILE_JL_THREADING /;"	d
PROGRAMS	deps/srccache/patchelf-0.9/src/Makefile.in	/^PROGRAMS = $(bin_PROGRAMS)$/;"	m
PROMOTE_AGE	src/gc.c	/^#define PROMOTE_AGE /;"	d	file:
PROT_READ	stdlib/Mmap/src/Mmap.jl	/^const PROT_READ     = Cint(1)$/;"	v
PROT_WRITE	stdlib/Mmap/src/Mmap.jl	/^const PROT_WRITE    = Cint(2)$/;"	v
PT_ARM_EXIDX	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_ARM_EXIDX	/;"	d
PT_DYNAMIC	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_DYNAMIC	/;"	d
PT_GNU_EH_FRAME	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_GNU_EH_FRAME	/;"	d
PT_GNU_RELRO	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_GNU_RELRO	/;"	d
PT_GNU_STACK	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_GNU_STACK	/;"	d
PT_HIOS	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_HIOS	/;"	d
PT_HIPROC	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_HIPROC	/;"	d
PT_HISUNW	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_HISUNW	/;"	d
PT_HP_CORE_COMM	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_HP_CORE_COMM	/;"	d
PT_HP_CORE_KERNEL	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_HP_CORE_KERNEL	/;"	d
PT_HP_CORE_LOADABLE	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_HP_CORE_LOADABLE	/;"	d
PT_HP_CORE_MMF	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_HP_CORE_MMF	/;"	d
PT_HP_CORE_NONE	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_HP_CORE_NONE	/;"	d
PT_HP_CORE_PROC	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_HP_CORE_PROC	/;"	d
PT_HP_CORE_SHM	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_HP_CORE_SHM	/;"	d
PT_HP_CORE_STACK	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_HP_CORE_STACK	/;"	d
PT_HP_CORE_VERSION	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_HP_CORE_VERSION	/;"	d
PT_HP_FASTBIND	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_HP_FASTBIND	/;"	d
PT_HP_HSL_ANNOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_HP_HSL_ANNOT	/;"	d
PT_HP_OPT_ANNOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_HP_OPT_ANNOT	/;"	d
PT_HP_PARALLEL	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_HP_PARALLEL	/;"	d
PT_HP_STACK	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_HP_STACK	/;"	d
PT_HP_TLS	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_HP_TLS	/;"	d
PT_IA_64_ARCHEXT	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_IA_64_ARCHEXT	/;"	d
PT_IA_64_HP_HSL_ANOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_IA_64_HP_HSL_ANOT	/;"	d
PT_IA_64_HP_OPT_ANOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_IA_64_HP_OPT_ANOT	/;"	d
PT_IA_64_HP_STACK	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_IA_64_HP_STACK	/;"	d
PT_IA_64_UNWIND	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_IA_64_UNWIND	/;"	d
PT_INTERP	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_INTERP	/;"	d
PT_LOAD	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_LOAD	/;"	d
PT_LOOS	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_LOOS	/;"	d
PT_LOPROC	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_LOPROC	/;"	d
PT_LOSUNW	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_LOSUNW	/;"	d
PT_MIPS_OPTIONS	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_MIPS_OPTIONS /;"	d
PT_MIPS_REGINFO	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_MIPS_REGINFO	/;"	d
PT_MIPS_RTPROC	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_MIPS_RTPROC /;"	d
PT_NOTE	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_NOTE	/;"	d
PT_NULL	deps/srccache/patchelf-0.9/src/elf.h	/^#define	PT_NULL	/;"	d
PT_NUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define	PT_NUM	/;"	d
PT_PARISC_ARCHEXT	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_PARISC_ARCHEXT	/;"	d
PT_PARISC_UNWIND	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_PARISC_UNWIND	/;"	d
PT_PHDR	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_PHDR	/;"	d
PT_SHLIB	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_SHLIB	/;"	d
PT_SUNWBSS	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_SUNWBSS	/;"	d
PT_SUNWSTACK	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_SUNWSTACK	/;"	d
PT_TLS	deps/srccache/patchelf-0.9/src/elf.h	/^#define PT_TLS	/;"	d
PUBLIC_HEADERS	src/Makefile	/^PUBLIC_HEADERS := $(BUILDDIR)\/julia_version.h $(wildcard $(SRCDIR)\/support\/*.h) $(addprefix $/;"	m
PUBLIC_HEADER_TARGETS	src/Makefile	/^PUBLIC_HEADER_TARGETS := $(addprefix $(build_includedir)\/julia\/,$(notdir $(PUBLIC_HEADERS)) $(/;"	m
PUSH	src/flisp/flisp.c	/^#define PUSH(/;"	d	file:
PUSH_GC_FRAME_NAME	src/llvm-pass-helpers.cpp	/^    static const char *PUSH_GC_FRAME_NAME = "julia.push_gc_frame";$/;"	v	namespace:jl_intrinsics	typeref:typename:const char *	file:
PUSH_RET	src/task.c	/^#define PUSH_RET(/;"	d	file:
PUT_INT32	src/flisp/flisp.c	/^#define PUT_INT32(/;"	d	file:
PV	test/offsetarray.jl	/^PV = view(P, 2:3, :)$/;"	v
PVD	src/clangsa/GCChecker.cpp	/^            const ParmVarDecl *PVD;$/;"	m	struct:__anon9c5a21540111::GCChecker::ValueState	typeref:typename:const ParmVarDecl *	file:
P_LEVEL	src/flisp/flisp.h	/^    fixnum_t P_LEVEL;$/;"	m	struct:_fl_context_t	typeref:typename:fixnum_t
Package Compatibility Across Releases	CONTRIBUTING.md	/^### Package Compatibility Across Releases$/;"	S
Package directories	doc/src/manual/code-loading.md	/^### Package directories$/;"	S
PackageCompletion	stdlib/REPL/src/REPLCompletions.jl	/^struct PackageCompletion <: Completion$/;"	f
Packages and Modules	doc/src/manual/faq.md	/^## Packages and Modules$/;"	s
Padding	base/reinterpretarray.jl	/^struct Padding$/;"	f
PaddingError	base/reinterpretarray.jl	/^struct PaddingError$/;"	f
Paint	test/compiler/inference.jl	/^abstract type Paint{T} end$/;"	f
Pair	base/pair.jl	/^    function Pair{A, B}(@nospecialize(a), @nospecialize(b)) where {A, B}$/;"	f
Pair	base/pair.jl	/^Pair(a, b) = Pair{typeof(a), typeof(b)}(a, b)$/;"	f
Pair	base/pair.jl	/^struct Pair{A, B}$/;"	f
Pair	test/show.jl	/^                   Pair(Pair(1,2), Pair(3,4))             => "(1 => 2) => (3 => 4)",$/;"	f
Pair	test/show.jl	/^Pair = 0$/;"	v
Pair,	base/pair.jl	/^Pair, =>$/;"	v
Pairs	base/iterators.jl	/^    Pairs(data::A, itr::I) where {A, I} = new{eltype(I), eltype(A), I, A}(data, itr)$/;"	f
Pairs	base/iterators.jl	/^struct Pairs{K, V, I, A} <: AbstractDict{K, V}$/;"	f
Paragraph	stdlib/Markdown/src/Common/block.jl	/^Paragraph() = Paragraph([])$/;"	f
Paragraph	stdlib/Markdown/src/Common/block.jl	/^mutable struct Paragraph$/;"	f
Paragraphs	stdlib/Markdown/docs/src/index.md	/^### Paragraphs$/;"	S
Parallel Computing	doc/src/manual/parallel-computing.md	/^# Parallel Computing$/;"	c
Parallel Map and Loops	doc/src/manual/parallel-computing.md	/^## Parallel Map and Loops$/;"	s
Parallelization	doc/src/manual/environment-variables.md	/^## Parallelization$/;"	s
ParameterizedByte__	test/reflection.jl	/^primitive type ParameterizedByte__{A,B} 8 end$/;"	f
Parametric Abstract Types	doc/src/manual/types.md	/^### Parametric Abstract Types$/;"	S
Parametric Composite Types	doc/src/manual/types.md	/^### Parametric Composite Types$/;"	S
Parametric Constructors	doc/src/manual/constructors.md	/^## Parametric Constructors$/;"	s
Parametric Methods	doc/src/manual/methods.md	/^## Parametric Methods$/;"	s
Parametric Primitive Types	doc/src/manual/types.md	/^### Parametric Primitive Types$/;"	S
Parametric Types	doc/src/manual/types.md	/^## Parametric Types$/;"	s
Parametrically-constrained Varargs methods	doc/src/manual/methods.md	/^## Parametrically-constrained Varargs methods$/;"	s
Params	base/compiler/params.jl	/^    function Params(world::UInt)$/;"	f
Params	base/compiler/params.jl	/^struct Params$/;"	f
ParseError	base/meta.jl	/^struct ParseError <: Exception$/;"	f
ParseError	src/flisp/flisp.h	/^    value_t IOError, ParseError, TypeError, ArgError, UnboundError, KeyError;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
ParseError	test/syntax.jl	/^@test_throws ParseError("expected \\"}\\" or separator in arguments to \\"{ }\\"; got \\"V)\\"")/;"	f
PartialQuickSort	base/sort.jl	/^struct PartialQuickSort{T <: Union{Int,OrdinalRange}} <: Algorithm$/;"	f
PartialStruct	base/compiler/typelattice.jl	/^struct PartialStruct$/;"	f
PartialTypeVar	base/compiler/typelattice.jl	/^    PartialTypeVar(tv::TypeVar, lb_certain::Bool, ub_certain::Bool) = new(tv, lb_certain, ub_cer/;"	f
PartialTypeVar	base/compiler/typelattice.jl	/^struct PartialTypeVar$/;"	f
PartitionIterator	base/iterators.jl	/^struct PartitionIterator{T}$/;"	f
Pass	src/disasm.cpp	/^    int Pass;$/;"	m	class:__anon2853c92e0211::SymbolTable	typeref:typename:int	file:
Pass	stdlib/Test/src/Test.jl	/^struct Pass <: Result$/;"	f
PassIDs	src/llvm-api.cpp	/^StringMap<char *> PassIDs;$/;"	v	namespace:llvm	typeref:typename:StringMap<char * >
Passing Pointers for Modifying Inputs	doc/src/manual/calling-c-and-fortran-code.md	/^### Passing Pointers for Modifying Inputs$/;"	S
Passing options to LLVM	doc/src/devdocs/llvm.md	/^## Passing options to LLVM$/;"	s
PathCompletion	stdlib/REPL/src/REPLCompletions.jl	/^struct PathCompletion <: Completion$/;"	f
Period	stdlib/Dates/src/types.jl	/^abstract type Period     <: AbstractTime end$/;"	f
Period Types	stdlib/Dates/docs/src/index.md	/^## Period Types$/;"	s
Periods	stdlib/Dates/docs/src/index.md	/^### Periods$/;"	S
PeriodsTest	stdlib/Dates/test/periods.jl	/^module PeriodsTest$/;"	f
Perm	base/ordering.jl	/^struct Perm{O<:Ordering,V<:AbstractVector} <: Ordering$/;"	f
PermutedDimsArray	base/permuteddimsarray.jl	/^    function PermutedDimsArray{T,N,perm,iperm,AA}(data::AA) where {T,N,perm,iperm,AA<:AbstractAr/;"	f
PermutedDimsArray	base/permuteddimsarray.jl	/^function PermutedDimsArray(data::AbstractArray{T,N}, perm) where {T,N}$/;"	f
PermutedDimsArray	base/permuteddimsarray.jl	/^struct PermutedDimsArray{T,N,perm,iperm,AA<:AbstractArray} <: AbstractArray{T,N}$/;"	f
PermutedDimsArrays	base/permuteddimsarray.jl	/^module PermutedDimsArrays$/;"	f
Peterson	test/threads_exec.jl	/^    Peterson() =$/;"	f
Peterson	test/threads_exec.jl	/^mutable struct Peterson$/;"	f
Phi nodes and Pi nodes	doc/src/devdocs/ssair.md	/^### Phi nodes and Pi nodes$/;"	S
PhiC nodes and Upsilon nodes	doc/src/devdocs/ssair.md	/^### PhiC nodes and Upsilon nodes$/;"	S
PhiNodes	src/codegen.cpp	/^    std::vector<std::tuple<jl_cgval_t, BasicBlock *, AllocaInst *, PHINode *, jl_value_t *>> Phi/;"	m	class:jl_codectx_t	typeref:typename:std::vector<std::tuple<jl_cgval_t,BasicBlock *,AllocaInst *,PHINode *,jl_value_t * >>	file:
PhiOuts	src/llvm-late-gc-lowering.cpp	/^    BitVector PhiOuts;$/;"	m	struct:BBState	typeref:typename:BitVector	file:
PhysQuantities	test/testhelpers/PhysQuantities.jl	/^module PhysQuantities$/;"	f
PhysQuantity	test/testhelpers/PhysQuantities.jl	/^struct PhysQuantity{n,T}   # n is like the exponent of the unit$/;"	f
PhysicalSignificandSize	base/grisu/float.jl	/^PhysicalSignificandSize(::Type{Float16}) = Int32(10)$/;"	f
PhysicalSignificandSize	base/grisu/float.jl	/^PhysicalSignificandSize(::Type{Float32}) = Int32(23)$/;"	f
PhysicalSignificandSize	base/grisu/float.jl	/^PhysicalSignificandSize(::Type{Float64}) = Int32(52)$/;"	f
Pipe	base/stream.jl	/^Pipe() = Pipe(PipeEndpoint(), PipeEndpoint())$/;"	f
Pipe	base/stream.jl	/^mutable struct Pipe <: AbstractPipe$/;"	f
PipeBuffer	base/iobuffer.jl	/^PipeBuffer(data::Vector{UInt8}=UInt8[]; maxsize::Int = typemax(Int)) =$/;"	f
PipeBuffer	base/iobuffer.jl	/^PipeBuffer(maxsize::Integer) = (x = PipeBuffer(StringVector(maxsize), maxsize = maxsize); x.size/;"	f
PipeEndpoint	base/stream.jl	/^    PipeEndpoint(fd::RawFD) = PipeEndpoint(Libc._get_osfhandle(fd))$/;"	f
PipeEndpoint	base/stream.jl	/^    function PipeEndpoint(handle::Ptr{Cvoid}, status)$/;"	f
PipeEndpoint	base/stream.jl	/^function PipeEndpoint()$/;"	f
PipeEndpoint	base/stream.jl	/^function PipeEndpoint(fd::OS_HANDLE)$/;"	f
PipeEndpoint	base/stream.jl	/^mutable struct PipeEndpoint <: LibuvStream$/;"	f
PipeServer	stdlib/Sockets/src/PipeServer.jl	/^    function PipeServer(handle::Ptr{Cvoid}, status)$/;"	f
PipeServer	stdlib/Sockets/src/PipeServer.jl	/^function PipeServer()$/;"	f
PipeServer	stdlib/Sockets/src/PipeServer.jl	/^mutable struct PipeServer <: LibuvServer$/;"	f
Pipelines	doc/src/manual/running-external-programs.md	/^## Pipelines$/;"	s
Pkg	contrib/generate_precompile.jl	/^Pkg = get(Base.loaded_modules,$/;"	v
Pkg27477	test/ccall.jl	/^@eval module Pkg27477$/;"	f
PkgId	base/loading.jl	/^    PkgId(::Nothing, name::AbstractString) = new(nothing, name)$/;"	f
PkgId	base/loading.jl	/^    PkgId(u::UUID, name::AbstractString) = new(UInt128(u) == 0 ? nothing : u, name)$/;"	f
PkgId	base/loading.jl	/^PkgId(name::AbstractString) = PkgId(nothing, name)$/;"	f
PkgId	base/loading.jl	/^function PkgId(m::Module, name::String = String(nameof(moduleroot(m))))$/;"	f
PkgId	base/loading.jl	/^struct PkgId$/;"	f
PlaceGCFrameStore	src/llvm-late-gc-lowering.cpp	/^void LateLowerGCFrame::PlaceGCFrameStore(State &S, unsigned R, unsigned MinColorRoot,$/;"	f	class:LateLowerGCFrame	typeref:typename:void
PlaceGCFrameStores	src/llvm-late-gc-lowering.cpp	/^void LateLowerGCFrame::PlaceGCFrameStores(State &S, unsigned MinColorRoot,$/;"	f	class:LateLowerGCFrame	typeref:typename:void
PlaceRootsAndUpdateCalls	src/llvm-late-gc-lowering.cpp	/^void LateLowerGCFrame::PlaceRootsAndUpdateCalls(std::vector<int> &Colors, State &S, std::map<Val/;"	f	class:LateLowerGCFrame	typeref:typename:void
Platform-Specific Notes	doc/build/build.md	/^## Platform-Specific Notes$/;"	s
Point	base/docs/basedocs.jl	/^struct Point <: AbstractPoint$/;"	f
Point	base/docs/basedocs.jl	/^struct Point$/;"	f
Point	base/docs/basedocs.jl	/^struct Point{X}$/;"	f
Point releasing 101	doc/build/distributing.md	/^# Point releasing 101$/;"	c
PoisonValues	src/llvm-propagate-addrspaces.cpp	/^void PropagateJuliaAddrspaces::PoisonValues(std::vector<Value *> &Worklist) {$/;"	f	class:PropagateJuliaAddrspaces	typeref:typename:void
PollingFileWatcher	stdlib/FileWatching/src/FileWatching.jl	/^    PollingFileWatcher(file::AbstractString, interval::Float64=5.007) = PollingFileWatcher(Strin/;"	f
PollingFileWatcher	stdlib/FileWatching/src/FileWatching.jl	/^    function PollingFileWatcher(file::String, interval::Float64=5.007) # same default as nodejs$/;"	f
PollingFileWatcher	stdlib/FileWatching/src/FileWatching.jl	/^mutable struct PollingFileWatcher$/;"	f
Poly19937	stdlib/Random/src/DSFMT.jl	/^const Poly19937 = "10455110544511444054554514541dbbb0a20820a288a00a80a82208280b73237d2ff2ab5e2fc/;"	v
Polygon5884	test/core.jl	/^mutable struct Polygon5884{T<:Real}$/;"	f
Pool18343	test/precompile.jl	/^              struct Pool18343{R, V}$/;"	f
PosDefException	stdlib/LinearAlgebra/src/exceptions.jl	/^struct PosDefException <: Exception$/;"	f
Position	test/ranges.jl	/^Position(x::Position) = x # to resolve ambiguity with boot.jl:728$/;"	f
Position	test/ranges.jl	/^struct Position <: Integer$/;"	f
PossibleTriangularMatrix	stdlib/LinearAlgebra/src/special.jl	/^const PossibleTriangularMatrix = Union{Diagonal, Bidiagonal, AbstractTriangular}$/;"	v
PotentiallyFreed	src/clangsa/GCChecker.cpp	/^            enum State { Allocated, Rooted, PotentiallyFreed, Untracked } S;$/;"	e	enum:__anon9c5a21540111::GCChecker::ValueState::State	file:
Powers, logs and roots	doc/src/manual/mathematical-operations.md	/^### Powers, logs and roots$/;"	S
Pre-allocating outputs	doc/src/manual/performance-tips.md	/^## Pre-allocating outputs$/;"	s
PrecompilableError	base/loading.jl	/^struct PrecompilableError <: Exception end$/;"	f
Prefix	deps/srccache/patchelf-0.9/patchelf.spec	/^Prefix: \/usr$/;"	t
Prefix	deps/srccache/patchelf-0.9/patchelf.spec.in	/^Prefix: \/usr$/;"	t
PrefixHistoryPrompt	stdlib/REPL/src/LineEdit.jl	/^    PrefixHistoryPrompt(hp, parent_prompt) =$/;"	f
PrefixHistoryPrompt	stdlib/REPL/src/LineEdit.jl	/^mutable struct PrefixHistoryPrompt <: TextInterface$/;"	f
PrefixSearchState	stdlib/REPL/src/LineEdit.jl	/^    PrefixSearchState(terminal, histprompt, prefix, response_buffer) =$/;"	f
PrefixSearchState	stdlib/REPL/src/LineEdit.jl	/^mutable struct PrefixSearchState <: ModeState$/;"	f
Prehashed	base/multidimensional.jl	/^struct Prehashed$/;"	f
Primitive Types	doc/src/manual/types.md	/^## Primitive Types$/;"	s
Principles of usage	doc/src/devdocs/cartesian.md	/^## Principles of usage$/;"	s
Printf	base/printf.jl	/^module Printf$/;"	f
Printf	stdlib/Printf/docs/src/index.md	/^# Printf$/;"	c
Printf	stdlib/Printf/src/Printf.jl	/^module Printf$/;"	f
Printing of debug information	doc/src/devdocs/reflection.md	/^### Printing of debug information$/;"	S
Process	base/process.jl	/^    function Process(cmd::Cmd, handle::Ptr{Cvoid})$/;"	f
Process	base/process.jl	/^mutable struct Process <: AbstractPipe$/;"	f
ProcessChain	base/process.jl	/^    function ProcessChain()$/;"	f
ProcessChain	base/process.jl	/^mutable struct ProcessChain <: AbstractPipe$/;"	f
ProcessExitedException	stdlib/Distributed/src/cluster.jl	/^ProcessExitedException() = ProcessExitedException(-1)$/;"	f
ProcessExitedException	stdlib/Distributed/src/cluster.jl	/^struct ProcessExitedException <: Exception$/;"	f
ProcessFailedException	base/process.jl	/^ProcessFailedException(proc::Process) = ProcessFailedException([proc])$/;"	f
ProcessFailedException	base/process.jl	/^struct ProcessFailedException <: Exception$/;"	f
ProcessGroup	stdlib/Distributed/src/cluster.jl	/^    ProcessGroup(w::Array{Any,1}) = new("pg-default", w, Dict(), :all_to_all, nothing)$/;"	f
ProcessGroup	stdlib/Distributed/src/cluster.jl	/^mutable struct ProcessGroup$/;"	f
Processing log events	stdlib/Logging/docs/src/index.md	/^## Processing log events$/;"	s
ProductIterator	base/iterators.jl	/^struct ProductIterator{T<:Tuple}$/;"	f
Profile	src/clangsa/GCChecker.cpp	/^            void Profile(llvm::FoldingSetNodeID &ID) const {$/;"	f	struct:__anon9c5a21540111::GCChecker::RootState	typeref:typename:void	file:
Profile	src/clangsa/GCChecker.cpp	/^            void Profile(llvm::FoldingSetNodeID &ID) const {$/;"	f	struct:__anon9c5a21540111::GCChecker::ValueState	typeref:typename:void	file:
Profile	src/clangsa/GCChecker.cpp	/^          void Profile(llvm::FoldingSetNodeID &ID) const override {$/;"	f	class:__anon9c5a21540111::GCChecker::GCBugVisitor	typeref:typename:void	file:
Profile	src/clangsa/GCChecker.cpp	/^          void Profile(llvm::FoldingSetNodeID &ID) const override {$/;"	f	class:__anon9c5a21540111::GCChecker::GCValueBugVisitor	typeref:typename:void	file:
Profile	stdlib/Profile/src/Profile.jl	/^module Profile$/;"	f
ProfileFormat	stdlib/Profile/src/Profile.jl	/^    function ProfileFormat(;$/;"	f
ProfileFormat	stdlib/Profile/src/Profile.jl	/^struct ProfileFormat$/;"	f
Profiling	doc/src/manual/profile.md	/^# Profiling$/;"	c
Program representation	doc/src/manual/metaprogramming.md	/^## Program representation$/;"	s
Project environments	doc/src/manual/code-loading.md	/^### Project environments$/;"	S
PromoteToSparse	stdlib/SparseArrays/src/higherorderfns.jl	/^PromoteToSparse(::Val{0}) = PromoteToSparse()$/;"	f
PromoteToSparse	stdlib/SparseArrays/src/higherorderfns.jl	/^PromoteToSparse(::Val{1}) = PromoteToSparse()$/;"	f
PromoteToSparse	stdlib/SparseArrays/src/higherorderfns.jl	/^PromoteToSparse(::Val{2}) = PromoteToSparse()$/;"	f
PromoteToSparse	stdlib/SparseArrays/src/higherorderfns.jl	/^struct PromoteToSparse <: Broadcast.AbstractArrayStyle{2} end$/;"	f
Promotion	doc/src/manual/conversion-and-promotion.md	/^## Promotion$/;"	s
Prompt	stdlib/REPL/src/LineEdit.jl	/^function Prompt(prompt$/;"	f
Prompt	stdlib/REPL/src/LineEdit.jl	/^mutable struct Prompt <: TextInterface$/;"	f
PromptState	stdlib/REPL/src/LineEdit.jl	/^mutable struct PromptState <: ModeState$/;"	f
PropagateJuliaAddrspaces	src/llvm-propagate-addrspaces.cpp	/^    PropagateJuliaAddrspaces() : FunctionPass(ID) {};$/;"	f	struct:PropagateJuliaAddrspaces	file:
PropagateJuliaAddrspaces	src/llvm-propagate-addrspaces.cpp	/^struct PropagateJuliaAddrspaces : public FunctionPass, public InstVisitor<PropagateJuliaAddrspac/;"	s	file:
Propagating inbounds	doc/src/devdocs/boundscheck.md	/^## Propagating inbounds$/;"	s
Propagation of Missing Values	doc/src/manual/missing.md	/^## Propagation of Missing Values$/;"	s
Proper maintenance and care of multi-threading locks	doc/src/devdocs/locks.md	/^# Proper maintenance and care of multi-threading locks$/;"	c
Properties of Types	doc/src/base/base.md	/^## Properties of Types$/;"	s
PropertyCompletion	stdlib/REPL/src/REPLCompletions.jl	/^struct PropertyCompletion <: Completion$/;"	f
Prot	src/cgmemmgr.cpp	/^enum class Prot : int {$/;"	g	namespace:__anon06c686bc0111	typeref:typename:int	file:
ProxyOptions	stdlib/LibGit2/src/types.jl	/^@kwdef struct ProxyOptions$/;"	f
PtrNumbering	src/llvm-late-gc-lowering.cpp	/^    std::map<Value *, int> PtrNumbering;$/;"	m	struct:State	typeref:typename:std::map<Value *,int>	file:
PtrStruct	test/compiler/codegen.jl	/^struct PtrStruct$/;"	f
Punctuation	doc/src/base/punctuation.md	/^# Punctuation$/;"	c
PushOptions	stdlib/LibGit2/src/types.jl	/^    function PushOptions(; callbacks::RemoteCallbacks=RemoteCallbacks(), kwargs...)$/;"	f
PushOptions	stdlib/LibGit2/src/types.jl	/^struct PushOptions$/;"	f
PushOptionsStruct	stdlib/LibGit2/src/types.jl	/^@kwdef struct PushOptionsStruct$/;"	f
Q	stdlib/LinearAlgebra/src/qr.jl	/^Q = \\\\prod_{i=1}^{\\\\min(m,n)} (I - \\\\tau_i v_i v_i^T)$/;"	v
Q	stdlib/LinearAlgebra/src/qr.jl	/^Q = \\\\prod_{i=1}^{\\\\min(m,n)} (I - \\\\tau_i v_i v_i^T).$/;"	v
QR	stdlib/LinearAlgebra/src/qr.jl	/^    function QR{T,S}(factors, τ) where {T,S<:AbstractMatrix{T}}$/;"	f
QR	stdlib/LinearAlgebra/src/qr.jl	/^QR(factors::AbstractMatrix{T}, τ::Vector{T}) where {T} = QR{T,typeof(factors)}(factors, τ)$/;"	f
QR	stdlib/LinearAlgebra/src/qr.jl	/^function QR{T}(factors::AbstractMatrix, τ::AbstractVector) where {T}$/;"	f
QR	stdlib/LinearAlgebra/src/qr.jl	/^struct QR{T,S<:AbstractMatrix{T}} <: Factorization{T}$/;"	f
QRCompactWY	stdlib/LinearAlgebra/src/qr.jl	/^    function QRCompactWY{S,M}(factors, T) where {S,M<:AbstractMatrix{S}}$/;"	f
QRCompactWY	stdlib/LinearAlgebra/src/qr.jl	/^QRCompactWY(factors::AbstractMatrix{S}, T::Matrix{S}) where {S} = QRCompactWY{S,typeof(factors)}/;"	f
QRCompactWY	stdlib/LinearAlgebra/src/qr.jl	/^function QRCompactWY{S}(factors::AbstractMatrix, T::AbstractMatrix) where {S}$/;"	f
QRCompactWY	stdlib/LinearAlgebra/src/qr.jl	/^struct QRCompactWY{S,M<:AbstractMatrix{S}} <: Factorization{S}$/;"	f
QRCompactWYQ	stdlib/LinearAlgebra/src/qr.jl	/^    function QRCompactWYQ{S,M}(factors, T) where {S,M<:AbstractMatrix{S}}$/;"	f
QRCompactWYQ	stdlib/LinearAlgebra/src/qr.jl	/^QRCompactWYQ(factors::AbstractMatrix{S}, T::Matrix{S}) where {S} = QRCompactWYQ{S,typeof(factors/;"	f
QRCompactWYQ	stdlib/LinearAlgebra/src/qr.jl	/^function QRCompactWYQ{S}(factors::AbstractMatrix, T::AbstractMatrix) where {S}$/;"	f
QRCompactWYQ	stdlib/LinearAlgebra/src/qr.jl	/^struct QRCompactWYQ{S, M<:AbstractMatrix{S}} <: AbstractQ{S}$/;"	f
QRIteration	stdlib/LinearAlgebra/src/LinearAlgebra.jl	/^struct QRIteration <: Algorithm end$/;"	f
QRPackedQ	stdlib/LinearAlgebra/src/qr.jl	/^    function QRPackedQ{T,S}(factors, τ) where {T,S<:AbstractMatrix{T}}$/;"	f
QRPackedQ	stdlib/LinearAlgebra/src/qr.jl	/^QRPackedQ(factors::AbstractMatrix{T}, τ::Vector{T}) where {T} = QRPackedQ{T,typeof(factors)}(fa/;"	f
QRPackedQ	stdlib/LinearAlgebra/src/qr.jl	/^function QRPackedQ{T}(factors::AbstractMatrix, τ::AbstractVector) where {T}$/;"	f
QRPackedQ	stdlib/LinearAlgebra/src/qr.jl	/^struct QRPackedQ{T,S<:AbstractMatrix{T}} <: AbstractQ{T}$/;"	f
QRPivoted	stdlib/LinearAlgebra/src/qr.jl	/^    function QRPivoted{T,S}(factors, τ, jpvt) where {T,S<:AbstractMatrix{T}}$/;"	f
QRPivoted	stdlib/LinearAlgebra/src/qr.jl	/^QRPivoted(factors::AbstractMatrix{T}, τ::Vector{T}, jpvt::Vector{BlasInt}) where {T} =$/;"	f
QRPivoted	stdlib/LinearAlgebra/src/qr.jl	/^function QRPivoted{T}(factors::AbstractMatrix, τ::AbstractVector, jpvt::AbstractVector) where {/;"	f
QRPivoted	stdlib/LinearAlgebra/src/qr.jl	/^struct QRPivoted{T,S<:AbstractMatrix{T}} <: Factorization{T}$/;"	f
QRSparse	stdlib/SuiteSparse/src/spqr.jl	/^struct QRSparse{Tv,Ti} <: LinearAlgebra.Factorization{Tv}$/;"	f
QRSparseQ	stdlib/SuiteSparse/src/spqr.jl	/^struct QRSparseQ{Tv<:CHOLMOD.VTypes,Ti<:Integer} <: LinearAlgebra.AbstractQ{Tv}$/;"	f
QUARTERDAYS	stdlib/Dates/src/query.jl	/^const QUARTERDAYS = (0, 90, 181, 273)$/;"	v
QUEUE_GC_ROOT_NAME	src/llvm-pass-helpers.cpp	/^    static const char *QUEUE_GC_ROOT_NAME = "julia.queue_gc_root";$/;"	v	namespace:jl_intrinsics	typeref:typename:const char *	file:
QUOTE	src/flisp/flisp.h	/^    value_t NIL, T, F, FL_EOF, QUOTE;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
QualifiedStringMacro	test/syntax.jl	/^module QualifiedStringMacro$/;"	f
QuasiAdjoint	test/subtype.jl	/^struct QuasiAdjoint{T,S} end$/;"	f
Quaternion	test/testhelpers/Quaternions.jl	/^Quaternion(s::Real, v1::Real, v2::Real, v3::Real) = Quaternion(promote(s, v1, v2, v3)...)$/;"	f
Quaternion	test/testhelpers/Quaternions.jl	/^struct Quaternion{T<:Real} <: Number$/;"	f
Quaternions	test/testhelpers/Quaternions.jl	/^module Quaternions$/;"	f
Query Functions	stdlib/Dates/docs/src/index.md	/^## Query Functions$/;"	s
Query Functions	stdlib/Dates/docs/src/index.md	/^### Query Functions$/;"	S
QueryTests	stdlib/Dates/test/query.jl	/^module QueryTests$/;"	f
QuickSort	base/sort.jl	/^const QuickSort     = QuickSortAlg()$/;"	v
QuickSortAlg	base/sort.jl	/^struct QuickSortAlg     <: Algorithm end$/;"	f
Quote expressions	doc/src/devdocs/ast.md	/^### Quote expressions$/;"	S
Quoting	doc/src/manual/metaprogramming.md	/^### Quoting$/;"	S
Quoting	doc/src/manual/running-external-programs.md	/^## Quoting$/;"	s
Qux	test/project/deps/Qux.jl	/^module Qux$/;"	f
Qux_	test/core.jl	/^abstract type Qux_{T} <: Sup_{Qux_{Int},T} end$/;"	f
R	stdlib/SHA/src/base_functions.jl	/^R(b,x)   = (x >> b)$/;"	f
R	test/arrayops.jl	/^R = CartesianIndices((0,3))$/;"	v
R	test/arrayops.jl	/^R = CartesianIndices((1,3))$/;"	v
R	test/arrayops.jl	/^R = CartesianIndices((3,0))$/;"	v
R	test/gcext/gcext.c	/^#define R(/;"	d	file:
R	test/offsetarray.jl	/^R = similar(A, (-2:1, 1:1))$/;"	v
R	test/offsetarray.jl	/^R = similar(A, (1:1, 6:9))$/;"	v
R27316	test/compiler/inference.jl	/^const R27316 = Tuple{Tuple{Vector{T}}} where T$/;"	v
RD19668	test/compiler/inference.jl	/^        RD19668() = new(0)$/;"	f
RD19668	test/compiler/inference.jl	/^        RD19668(; x = true) = new(x)$/;"	f
RD19668	test/compiler/inference.jl	/^    struct RD19668$/;"	f
README	deps/srccache/patchelf-0.9/Makefile.am	/^doc_DATA = README$/;"	D	directory:doc
REAL	stdlib/SuiteSparse/src/cholmod_h.jl	/^const REAL    = Int32(1)       # a real matrix$/;"	v
RECHECK_LOGS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^RECHECK_LOGS = $(TEST_LOGS)$/;"	m
RECURSIVE_CLEAN_TARGETS	deps/srccache/patchelf-0.9/Makefile.in	/^RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\\$/;"	m
RECURSIVE_TARGETS	deps/srccache/patchelf-0.9/Makefile.in	/^RECURSIVE_TARGETS = all-recursive check-recursive cscopelist-recursive \\$/;"	m
REDUCERS_FRAC	src/options.h	/^#define REDUCERS_FRAC /;"	d
REFCOUNT	stdlib/LibGit2/src/LibGit2.jl	/^const REFCOUNT = Threads.Atomic{Int}(0)$/;"	v
REF_ID	stdlib/Distributed/src/messages.jl	/^const REF_ID = Ref(1)$/;"	v
REF_INVALID	stdlib/LibGit2/src/consts.jl	/^const REF_INVALID  = Cint(0)$/;"	v
REF_LISTALL	stdlib/LibGit2/src/consts.jl	/^const REF_LISTALL  = REF_OID | REF_SYMBOLIC$/;"	v
REF_OBJECT_TAG	stdlib/Serialization/src/Serialization.jl	/^const REF_OBJECT_TAG       = Int32(o0+13)$/;"	v
REF_OID	stdlib/LibGit2/src/consts.jl	/^const REF_OID      = Cint(1)$/;"	v
REF_SYMBOLIC	stdlib/LibGit2/src/consts.jl	/^const REF_SYMBOLIC = Cint(2)$/;"	v
REGION0_INDEX	src/gc.h	/^#define REGION0_INDEX(/;"	d
REGION0_PG_COUNT	src/gc.h	/^#define REGION0_PG_COUNT /;"	d
REGION1_INDEX	src/gc.h	/^#define REGION1_INDEX(/;"	d
REGION1_PG_COUNT	src/gc.h	/^#define REGION1_PG_COUNT /;"	d
REGION2_PG_COUNT	src/gc.h	/^#define REGION2_PG_COUNT /;"	d
REGION_INDEX	src/gc.h	/^#define REGION_INDEX(/;"	d
REGISTER_TRAIT_WITH_PROGRAMSTATE	src/clangsa/GCChecker.cpp	/^REGISTER_TRAIT_WITH_PROGRAMSTATE(GCDepth, unsigned)$/;"	f
RELBUILDROOT	sysimage.mk	/^RELBUILDROOT := $(shell $(JULIAHOME)\/contrib\/relative_path.sh "$(JULIAHOME)\/base" "$(BUILDROO/;"	m
RELEASE_LIBS	src/Makefile	/^RELEASE_LIBS := $(WHOLE_ARCHIVE) $(BUILDDIR)\/flisp\/libflisp.a $(WHOLE_ARCHIVE) $(BUILDDIR)\/su/;"	m
RELOC_TAG_OFFSET	src/staticdata.c	/^#define RELOC_TAG_OFFSET /;"	d	file:
REMOTE_DOWNLOAD_TAGS_ALL	stdlib/LibGit2/src/consts.jl	/^const REMOTE_DOWNLOAD_TAGS_ALL         = Cint(3)$/;"	v
REMOTE_DOWNLOAD_TAGS_AUTO	stdlib/LibGit2/src/consts.jl	/^const REMOTE_DOWNLOAD_TAGS_AUTO        = Cint(1)$/;"	v
REMOTE_DOWNLOAD_TAGS_NONE	stdlib/LibGit2/src/consts.jl	/^const REMOTE_DOWNLOAD_TAGS_NONE        = Cint(2)$/;"	v
REMOTE_DOWNLOAD_TAGS_UNSPECIFIED	stdlib/LibGit2/src/consts.jl	/^const REMOTE_DOWNLOAD_TAGS_UNSPECIFIED = Cint(0)$/;"	v
REMOTE_ORIGIN	stdlib/LibGit2/src/consts.jl	/^const REMOTE_ORIGIN = "origin"$/;"	v
REPL	stdlib/REPL/src/REPL.jl	/^module REPL$/;"	f
REPL formatting	doc/src/manual/environment-variables.md	/^## REPL formatting$/;"	s
REPL improvements	HISTORY.md	/^REPL improvements$/;"	s
REPL-based workflow	doc/src/manual/workflow-tips.md	/^## REPL-based workflow$/;"	s
REPL.GlobalOptions.auto_indent_time_threshold	stdlib/REPL/test/lineedit.jl	/^REPL.GlobalOptions.auto_indent_time_threshold = -0.0$/;"	v
REPL.GlobalOptions.region_animation_duration	stdlib/REPL/test/lineedit.jl	/^REPL.GlobalOptions.region_animation_duration=0.0001$/;"	v
REPL.Terminals.hascolor	stdlib/REPL/test/FakeTerminals.jl	/^REPL.Terminals.hascolor(t::FakeTerminal) = t.hascolor$/;"	f
REPL.Terminals.raw!	stdlib/REPL/test/FakeTerminals.jl	/^REPL.Terminals.raw!(t::FakeTerminal, raw::Bool) = t.raw = raw$/;"	f
REPL.Terminals.size	stdlib/REPL/test/FakeTerminals.jl	/^REPL.Terminals.size(t::FakeTerminal) = (24, 80)$/;"	f
REPL.docsearch	test/docs.jl	/^REPL.docsearch(haystack::LazyHelp, needle) = REPL.docsearch(haystack.text, needle)$/;"	f
REPLBackend	stdlib/REPL/src/REPL.jl	/^    REPLBackend(repl_channel, response_channel, in_eval) =$/;"	f
REPLBackend	stdlib/REPL/src/REPL.jl	/^mutable struct REPLBackend$/;"	f
REPLBackendRef	stdlib/REPL/src/REPL.jl	/^struct REPLBackendRef$/;"	f
REPLCompletionProvider	stdlib/REPL/src/REPL.jl	/^mutable struct REPLCompletionProvider <: CompletionProvider end$/;"	f
REPLCompletions	stdlib/REPL/src/REPLCompletions.jl	/^module REPLCompletions$/;"	f
REPLCompletionsTest	stdlib/REPL/test/runtests.jl	/^module REPLCompletionsTest$/;"	f
REPLDisplay	stdlib/REPL/src/REPL.jl	/^struct REPLDisplay{R<:AbstractREPL} <: AbstractDisplay$/;"	f
REPLHistoryProvider	stdlib/REPL/src/REPL.jl	/^REPLHistoryProvider(mode_mapping) =$/;"	f
REPLHistoryProvider	stdlib/REPL/src/REPL.jl	/^mutable struct REPLHistoryProvider <: HistoryProvider$/;"	f
REPLTests	stdlib/REPL/test/runtests.jl	/^module REPLTests$/;"	f
REPL_MODULE_REF	base/client.jl	/^const REPL_MODULE_REF = Ref{Module}()$/;"	v
RESET_HARD	stdlib/LibGit2/src/consts.jl	/^const RESET_HARD  = Cint(3) # MIXED plus changes in working tree discarded$/;"	v
RESET_MIXED	stdlib/LibGit2/src/consts.jl	/^const RESET_MIXED = Cint(2) # SOFT plus reset index to the commit$/;"	v
RESET_SOFT	stdlib/LibGit2/src/consts.jl	/^const RESET_SOFT  = Cint(1) # Move the head to the given commit$/;"	v
RETURN_NUM_AS	src/flisp/cvalues.c	/^#define RETURN_NUM_AS(/;"	d	file:
RFC1123Format	stdlib/Dates/src/io.jl	/^const RFC1123Format = DateFormat("e, dd u yyyy HH:MM:SS")$/;"	v
RGB	test/compiler/inference.jl	/^struct RGB{T<:AbstractFloat} <: Paint{T}$/;"	f
RHF_CORD	deps/srccache/patchelf-0.9/src/elf.h	/^#define RHF_CORD	/;"	d
RHF_DEFAULT_DELAY_LOAD	deps/srccache/patchelf-0.9/src/elf.h	/^#define RHF_DEFAULT_DELAY_LOAD	/;"	d
RHF_DELTA_C_PLUS_PLUS	deps/srccache/patchelf-0.9/src/elf.h	/^#define RHF_DELTA_C_PLUS_PLUS	/;"	d
RHF_GUARANTEE_INIT	deps/srccache/patchelf-0.9/src/elf.h	/^#define RHF_GUARANTEE_INIT	/;"	d
RHF_GUARANTEE_START_INIT	deps/srccache/patchelf-0.9/src/elf.h	/^#define RHF_GUARANTEE_START_INIT /;"	d
RHF_NONE	deps/srccache/patchelf-0.9/src/elf.h	/^#define RHF_NONE	/;"	d
RHF_NOTPOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define RHF_NOTPOT	/;"	d
RHF_NO_LIBRARY_REPLACEMENT	deps/srccache/patchelf-0.9/src/elf.h	/^#define RHF_NO_LIBRARY_REPLACEMENT /;"	d
RHF_NO_MOVE	deps/srccache/patchelf-0.9/src/elf.h	/^#define RHF_NO_MOVE	/;"	d
RHF_NO_UNRES_UNDEF	deps/srccache/patchelf-0.9/src/elf.h	/^#define RHF_NO_UNRES_UNDEF	/;"	d
RHF_PIXIE	deps/srccache/patchelf-0.9/src/elf.h	/^#define RHF_PIXIE	/;"	d
RHF_QUICKSTART	deps/srccache/patchelf-0.9/src/elf.h	/^#define RHF_QUICKSTART	/;"	d
RHF_REQUICKSTART	deps/srccache/patchelf-0.9/src/elf.h	/^#define RHF_REQUICKSTART	/;"	d
RHF_REQUICKSTARTED	deps/srccache/patchelf-0.9/src/elf.h	/^#define RHF_REQUICKSTARTED	/;"	d
RHF_RLD_ORDER_SAFE	deps/srccache/patchelf-0.9/src/elf.h	/^#define RHF_RLD_ORDER_SAFE	/;"	d
RHF_SGI_ONLY	deps/srccache/patchelf-0.9/src/elf.h	/^#define RHF_SGI_ONLY	/;"	d
RLimit	stdlib/Sockets/test/runtests.jl	/^mutable struct RLimit$/;"	f
RO	src/cgmemmgr.cpp	/^    RO = PAGE_READONLY$/;"	e	enum:__anon06c686bc0111::Prot	file:
RO	src/cgmemmgr.cpp	/^    RO = PROT_READ$/;"	e	enum:__anon06c686bc0111::Prot	file:
ROAllocator	src/cgmemmgr.cpp	/^class ROAllocator {$/;"	c	namespace:__anon06c686bc0111	file:
ROOTFILES	contrib/mac/app/Makefile	/^ROOTFILES := $(shell ls -ld dmg\/*.app *.dmg 2> \/dev\/null | awk '{print $$3}')$/;"	m
ROOT_TASK_STACK_ADJUSTMENT	src/task.c	/^#define ROOT_TASK_STACK_ADJUSTMENT /;"	d	file:
ROTL32	src/support/MurmurHash3.c	/^#define ROTL32(/;"	d	file:
ROTL64	src/support/MurmurHash3.c	/^#define ROTL64(/;"	d	file:
ROUNDING_MODE	base/mpfr.jl	/^const ROUNDING_MODE = Ref{MPFRRoundingMode}(MPFRRoundNearest)$/;"	v
ROW	stdlib/SuiteSparse/src/cholmod_h.jl	/^const ROW    = Int32(1)        # A = diag(s)*A$/;"	v
RPathOp	deps/srccache/patchelf-0.9/src/patchelf.cc	/^    typedef enum { rpPrint, rpShrink, rpSet, rpRemove } RPathOp;$/;"	t	class:ElfFile	typeref:enum:ElfFile::__anon94ea2e970203	file:
RRID	stdlib/Distributed/src/messages.jl	/^    RRID() = RRID(myid(),next_ref_id())$/;"	f
RRID	stdlib/Distributed/src/messages.jl	/^    RRID(whence, id) = new(whence,id)$/;"	f
RRID	stdlib/Distributed/src/messages.jl	/^struct RRID$/;"	f
RTDyldMemoryManagerJL	src/cgmemmgr.cpp	/^    RTDyldMemoryManagerJL()$/;"	f	class:__anon06c686bc0111::RTDyldMemoryManagerJL	file:
RTDyldMemoryManagerJL	src/cgmemmgr.cpp	/^class RTDyldMemoryManagerJL : public SectionMemoryManager {$/;"	c	namespace:__anon06c686bc0111	file:
RTDyldObjHandleT	src/jitlayers.h	/^using RTDyldObjHandleT = orc::RTDyldObjectLinkingLayerBase::ObjHandleT;$/;"	t	typeref:typename:orc::RTDyldObjectLinkingLayerBase::ObjHandleT
RTDyldObjHandleT	src/jitlayers.h	/^using RTDyldObjHandleT = orc::VModuleKey;$/;"	t	typeref:typename:orc::VModuleKey
RTLD_DEEPBIND	stdlib/Libdl/src/Libdl.jl	/^const RTLD_DEEPBIND  = 0x00000040$/;"	v
RTLD_FIRST	stdlib/Libdl/src/Libdl.jl	/^const RTLD_FIRST     = 0x00000080$/;"	v
RTLD_GLOBAL	stdlib/Libdl/src/Libdl.jl	/^const RTLD_GLOBAL    = 0x00000002$/;"	v
RTLD_LAZY	stdlib/Libdl/src/Libdl.jl	/^const RTLD_LAZY      = 0x00000004$/;"	v
RTLD_LOCAL	stdlib/Libdl/src/Libdl.jl	/^const RTLD_LOCAL     = 0x00000001$/;"	v
RTLD_NODELETE	stdlib/Libdl/src/Libdl.jl	/^const RTLD_NODELETE  = 0x00000010$/;"	v
RTLD_NOLOAD	stdlib/Libdl/src/Libdl.jl	/^const RTLD_NOLOAD    = 0x00000020$/;"	v
RTLD_NOW	stdlib/Libdl/src/Libdl.jl	/^const RTLD_NOW       = 0x00000008$/;"	v
RUNNING_ON_VALGRIND	deps/valgrind/valgrind.h	/^#define RUNNING_ON_VALGRIND /;"	d
RUNNING_ON_VALGRIND	src/dump.c	/^#define RUNNING_ON_VALGRIND /;"	d	file:
RUNNING_ON_VALGRIND	src/staticdata.c	/^#define RUNNING_ON_VALGRIND /;"	d	file:
RUNTIME_C_SRCS	src/Makefile	/^RUNTIME_C_SRCS := \\$/;"	m
RUNTIME_SRCS	src/Makefile	/^RUNTIME_SRCS := APInt-C runtime_ccall processor rtutils $(RUNTIME_C_SRCS)$/;"	m
RUsage	test/netload/memtest.jl	/^struct RUsage$/;"	f
RW	src/cgmemmgr.cpp	/^    RW = PAGE_READWRITE,$/;"	e	enum:__anon06c686bc0111::Prot	file:
RW	src/cgmemmgr.cpp	/^    RW = PROT_READ | PROT_WRITE,$/;"	e	enum:__anon06c686bc0111::Prot	file:
RWAllocator	src/cgmemmgr.cpp	/^class RWAllocator {$/;"	c	namespace:__anon06c686bc0111	file:
RX	src/cgmemmgr.cpp	/^    RX = PAGE_EXECUTE,$/;"	e	enum:__anon06c686bc0111::Prot	file:
RX	src/cgmemmgr.cpp	/^    RX = PROT_READ | PROT_EXEC,$/;"	e	enum:__anon06c686bc0111::Prot	file:
R_386_16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_16	/;"	d
R_386_32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_32	/;"	d
R_386_32PLT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_32PLT	/;"	d
R_386_8	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_8	/;"	d
R_386_COPY	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_COPY	/;"	d
R_386_GLOB_DAT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_GLOB_DAT	/;"	d
R_386_GOT32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_GOT32	/;"	d
R_386_GOTOFF	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_GOTOFF	/;"	d
R_386_GOTPC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_GOTPC	/;"	d
R_386_IRELATIVE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_IRELATIVE	/;"	d
R_386_JMP_SLOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_JMP_SLOT	/;"	d
R_386_NONE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_NONE	/;"	d
R_386_NUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_NUM	/;"	d
R_386_PC16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_PC16	/;"	d
R_386_PC32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_PC32	/;"	d
R_386_PC8	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_PC8	/;"	d
R_386_PLT32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_PLT32	/;"	d
R_386_RELATIVE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_RELATIVE	/;"	d
R_386_SIZE32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_SIZE32	/;"	d
R_386_TLS_DESC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_TLS_DESC /;"	d
R_386_TLS_DESC_CALL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_TLS_DESC_CALL /;"	d
R_386_TLS_DTPMOD32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_TLS_DTPMOD32 /;"	d
R_386_TLS_DTPOFF32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_TLS_DTPOFF32 /;"	d
R_386_TLS_GD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_TLS_GD	/;"	d
R_386_TLS_GD_32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_TLS_GD_32	/;"	d
R_386_TLS_GD_CALL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_TLS_GD_CALL /;"	d
R_386_TLS_GD_POP	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_TLS_GD_POP /;"	d
R_386_TLS_GD_PUSH	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_TLS_GD_PUSH /;"	d
R_386_TLS_GOTDESC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_TLS_GOTDESC /;"	d
R_386_TLS_GOTIE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_TLS_GOTIE	/;"	d
R_386_TLS_IE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_TLS_IE	/;"	d
R_386_TLS_IE_32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_TLS_IE_32	/;"	d
R_386_TLS_LDM	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_TLS_LDM	/;"	d
R_386_TLS_LDM_32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_TLS_LDM_32 /;"	d
R_386_TLS_LDM_CALL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_TLS_LDM_CALL /;"	d
R_386_TLS_LDM_POP	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_TLS_LDM_POP /;"	d
R_386_TLS_LDM_PUSH	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_TLS_LDM_PUSH /;"	d
R_386_TLS_LDO_32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_TLS_LDO_32 /;"	d
R_386_TLS_LE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_TLS_LE	/;"	d
R_386_TLS_LE_32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_TLS_LE_32	/;"	d
R_386_TLS_TPOFF	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_TLS_TPOFF	/;"	d
R_386_TLS_TPOFF32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_386_TLS_TPOFF32 /;"	d
R_390_12	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_12	/;"	d
R_390_16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_16	/;"	d
R_390_20	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_20	/;"	d
R_390_32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_32	/;"	d
R_390_64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_64	/;"	d
R_390_8	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_8	/;"	d
R_390_COPY	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_COPY	/;"	d
R_390_GLOB_DAT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_GLOB_DAT	/;"	d
R_390_GOT12	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_GOT12	/;"	d
R_390_GOT16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_GOT16	/;"	d
R_390_GOT20	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_GOT20	/;"	d
R_390_GOT32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_GOT32	/;"	d
R_390_GOT64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_GOT64	/;"	d
R_390_GOTENT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_GOTENT	/;"	d
R_390_GOTOFF16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_GOTOFF16	/;"	d
R_390_GOTOFF32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_GOTOFF32	/;"	d
R_390_GOTOFF64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_GOTOFF64	/;"	d
R_390_GOTPC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_GOTPC	/;"	d
R_390_GOTPCDBL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_GOTPCDBL	/;"	d
R_390_GOTPLT12	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_GOTPLT12	/;"	d
R_390_GOTPLT16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_GOTPLT16	/;"	d
R_390_GOTPLT20	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_GOTPLT20	/;"	d
R_390_GOTPLT32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_GOTPLT32	/;"	d
R_390_GOTPLT64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_GOTPLT64	/;"	d
R_390_GOTPLTENT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_GOTPLTENT	/;"	d
R_390_IRELATIVE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_IRELATIVE /;"	d
R_390_JMP_SLOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_JMP_SLOT	/;"	d
R_390_NONE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_NONE	/;"	d
R_390_NUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_NUM	/;"	d
R_390_PC16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_PC16	/;"	d
R_390_PC16DBL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_PC16DBL	/;"	d
R_390_PC32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_PC32	/;"	d
R_390_PC32DBL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_PC32DBL	/;"	d
R_390_PC64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_PC64	/;"	d
R_390_PLT16DBL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_PLT16DBL	/;"	d
R_390_PLT32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_PLT32	/;"	d
R_390_PLT32DBL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_PLT32DBL	/;"	d
R_390_PLT64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_PLT64	/;"	d
R_390_PLTOFF16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_PLTOFF16	/;"	d
R_390_PLTOFF32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_PLTOFF32	/;"	d
R_390_PLTOFF64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_PLTOFF64	/;"	d
R_390_RELATIVE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_RELATIVE	/;"	d
R_390_TLS_DTPMOD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_TLS_DTPMOD	/;"	d
R_390_TLS_DTPOFF	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_TLS_DTPOFF	/;"	d
R_390_TLS_GD32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_TLS_GD32	/;"	d
R_390_TLS_GD64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_TLS_GD64	/;"	d
R_390_TLS_GDCALL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_TLS_GDCALL	/;"	d
R_390_TLS_GOTIE12	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_TLS_GOTIE12	/;"	d
R_390_TLS_GOTIE20	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_TLS_GOTIE20	/;"	d
R_390_TLS_GOTIE32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_TLS_GOTIE32	/;"	d
R_390_TLS_GOTIE64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_TLS_GOTIE64	/;"	d
R_390_TLS_IE32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_TLS_IE32	/;"	d
R_390_TLS_IE64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_TLS_IE64	/;"	d
R_390_TLS_IEENT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_TLS_IEENT	/;"	d
R_390_TLS_LDCALL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_TLS_LDCALL	/;"	d
R_390_TLS_LDM32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_TLS_LDM32	/;"	d
R_390_TLS_LDM64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_TLS_LDM64	/;"	d
R_390_TLS_LDO32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_TLS_LDO32	/;"	d
R_390_TLS_LDO64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_TLS_LDO64	/;"	d
R_390_TLS_LE32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_TLS_LE32	/;"	d
R_390_TLS_LE64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_TLS_LE64	/;"	d
R_390_TLS_LOAD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_TLS_LOAD	/;"	d
R_390_TLS_TPOFF	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_390_TLS_TPOFF	/;"	d
R_68K_16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_16	/;"	d
R_68K_32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_32	/;"	d
R_68K_8	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_8	/;"	d
R_68K_COPY	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_COPY	/;"	d
R_68K_GLOB_DAT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_GLOB_DAT	/;"	d
R_68K_GOT16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_GOT16	/;"	d
R_68K_GOT16O	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_GOT16O	/;"	d
R_68K_GOT32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_GOT32	/;"	d
R_68K_GOT32O	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_GOT32O	/;"	d
R_68K_GOT8	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_GOT8	/;"	d
R_68K_GOT8O	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_GOT8O	/;"	d
R_68K_JMP_SLOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_JMP_SLOT	/;"	d
R_68K_NONE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_NONE	/;"	d
R_68K_NUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_NUM	/;"	d
R_68K_PC16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_PC16	/;"	d
R_68K_PC32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_PC32	/;"	d
R_68K_PC8	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_PC8	/;"	d
R_68K_PLT16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_PLT16	/;"	d
R_68K_PLT16O	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_PLT16O	/;"	d
R_68K_PLT32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_PLT32	/;"	d
R_68K_PLT32O	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_PLT32O	/;"	d
R_68K_PLT8	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_PLT8	/;"	d
R_68K_PLT8O	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_PLT8O	/;"	d
R_68K_RELATIVE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_RELATIVE	/;"	d
R_68K_TLS_DTPMOD32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_TLS_DTPMOD32 /;"	d
R_68K_TLS_DTPREL32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_TLS_DTPREL32 /;"	d
R_68K_TLS_GD16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_TLS_GD16 /;"	d
R_68K_TLS_GD32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_TLS_GD32 /;"	d
R_68K_TLS_GD8	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_TLS_GD8 /;"	d
R_68K_TLS_IE16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_TLS_IE16 /;"	d
R_68K_TLS_IE32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_TLS_IE32 /;"	d
R_68K_TLS_IE8	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_TLS_IE8 /;"	d
R_68K_TLS_LDM16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_TLS_LDM16 /;"	d
R_68K_TLS_LDM32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_TLS_LDM32 /;"	d
R_68K_TLS_LDM8	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_TLS_LDM8 /;"	d
R_68K_TLS_LDO16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_TLS_LDO16 /;"	d
R_68K_TLS_LDO32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_TLS_LDO32 /;"	d
R_68K_TLS_LDO8	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_TLS_LDO8 /;"	d
R_68K_TLS_LE16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_TLS_LE16 /;"	d
R_68K_TLS_LE32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_TLS_LE32 /;"	d
R_68K_TLS_LE8	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_TLS_LE8 /;"	d
R_68K_TLS_TPREL32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_68K_TLS_TPREL32 /;"	d
R_AARCH64_ABS16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_ABS16	/;"	d
R_AARCH64_ABS32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_ABS32 /;"	d
R_AARCH64_ABS64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_ABS64 /;"	d
R_AARCH64_ADD_ABS_LO12_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_ADD_ABS_LO12_NC /;"	d
R_AARCH64_ADR_GOT_PAGE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_ADR_GOT_PAGE	/;"	d
R_AARCH64_ADR_PREL_LO21	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_ADR_PREL_LO21	/;"	d
R_AARCH64_ADR_PREL_PG_HI21	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_ADR_PREL_PG_HI21 /;"	d
R_AARCH64_ADR_PREL_PG_HI21_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_ADR_PREL_PG_HI21_NC /;"	d
R_AARCH64_CALL26	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_CALL26	/;"	d
R_AARCH64_CONDBR19	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_CONDBR19	/;"	d
R_AARCH64_COPY	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_COPY /;"	d
R_AARCH64_GLOB_DAT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_GLOB_DAT /;"	d
R_AARCH64_GOTREL32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_GOTREL32	/;"	d
R_AARCH64_GOTREL64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_GOTREL64	/;"	d
R_AARCH64_GOT_LD_PREL19	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_GOT_LD_PREL19	/;"	d
R_AARCH64_IRELATIVE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_IRELATIVE	/;"	d
R_AARCH64_JUMP26	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_JUMP26	/;"	d
R_AARCH64_JUMP_SLOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_JUMP_SLOT /;"	d
R_AARCH64_LD64_GOTOFF_LO15	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_LD64_GOTOFF_LO15 /;"	d
R_AARCH64_LD64_GOTPAGE_LO15	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_LD64_GOTPAGE_LO15 /;"	d
R_AARCH64_LD64_GOT_LO12_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_LD64_GOT_LO12_NC /;"	d
R_AARCH64_LDST128_ABS_LO12_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_LDST128_ABS_LO12_NC /;"	d
R_AARCH64_LDST16_ABS_LO12_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_LDST16_ABS_LO12_NC /;"	d
R_AARCH64_LDST32_ABS_LO12_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_LDST32_ABS_LO12_NC /;"	d
R_AARCH64_LDST64_ABS_LO12_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_LDST64_ABS_LO12_NC /;"	d
R_AARCH64_LDST8_ABS_LO12_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_LDST8_ABS_LO12_NC /;"	d
R_AARCH64_LD_PREL_LO19	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_LD_PREL_LO19	/;"	d
R_AARCH64_MOVW_GOTOFF_G0	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_MOVW_GOTOFF_G0 /;"	d
R_AARCH64_MOVW_GOTOFF_G0_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_MOVW_GOTOFF_G0_NC /;"	d
R_AARCH64_MOVW_GOTOFF_G1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_MOVW_GOTOFF_G1 /;"	d
R_AARCH64_MOVW_GOTOFF_G1_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_MOVW_GOTOFF_G1_NC /;"	d
R_AARCH64_MOVW_GOTOFF_G2	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_MOVW_GOTOFF_G2 /;"	d
R_AARCH64_MOVW_GOTOFF_G2_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_MOVW_GOTOFF_G2_NC /;"	d
R_AARCH64_MOVW_GOTOFF_G3	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_MOVW_GOTOFF_G3 /;"	d
R_AARCH64_MOVW_PREL_G0	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_MOVW_PREL_G0	/;"	d
R_AARCH64_MOVW_PREL_G0_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_MOVW_PREL_G0_NC /;"	d
R_AARCH64_MOVW_PREL_G1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_MOVW_PREL_G1	/;"	d
R_AARCH64_MOVW_PREL_G1_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_MOVW_PREL_G1_NC /;"	d
R_AARCH64_MOVW_PREL_G2	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_MOVW_PREL_G2	/;"	d
R_AARCH64_MOVW_PREL_G2_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_MOVW_PREL_G2_NC /;"	d
R_AARCH64_MOVW_PREL_G3	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_MOVW_PREL_G3	/;"	d
R_AARCH64_MOVW_SABS_G0	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_MOVW_SABS_G0	/;"	d
R_AARCH64_MOVW_SABS_G1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_MOVW_SABS_G1	/;"	d
R_AARCH64_MOVW_SABS_G2	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_MOVW_SABS_G2	/;"	d
R_AARCH64_MOVW_UABS_G0	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_MOVW_UABS_G0	/;"	d
R_AARCH64_MOVW_UABS_G0_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_MOVW_UABS_G0_NC /;"	d
R_AARCH64_MOVW_UABS_G1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_MOVW_UABS_G1	/;"	d
R_AARCH64_MOVW_UABS_G1_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_MOVW_UABS_G1_NC /;"	d
R_AARCH64_MOVW_UABS_G2	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_MOVW_UABS_G2	/;"	d
R_AARCH64_MOVW_UABS_G2_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_MOVW_UABS_G2_NC /;"	d
R_AARCH64_MOVW_UABS_G3	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_MOVW_UABS_G3	/;"	d
R_AARCH64_NONE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_NONE /;"	d
R_AARCH64_PREL16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_PREL16	/;"	d
R_AARCH64_PREL32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_PREL32	/;"	d
R_AARCH64_PREL64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_PREL64	/;"	d
R_AARCH64_RELATIVE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_RELATIVE /;"	d
R_AARCH64_TLSDESC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSDESC /;"	d
R_AARCH64_TLSDESC_ADD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSDESC_ADD	/;"	d
R_AARCH64_TLSDESC_ADD_LO12	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSDESC_ADD_LO12 /;"	d
R_AARCH64_TLSDESC_ADR_PAGE21	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSDESC_ADR_PAGE21 /;"	d
R_AARCH64_TLSDESC_ADR_PREL21	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSDESC_ADR_PREL21 /;"	d
R_AARCH64_TLSDESC_CALL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSDESC_CALL	/;"	d
R_AARCH64_TLSDESC_LD64_LO12	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSDESC_LD64_LO12 /;"	d
R_AARCH64_TLSDESC_LDR	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSDESC_LDR	/;"	d
R_AARCH64_TLSDESC_LD_PREL19	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSDESC_LD_PREL19 /;"	d
R_AARCH64_TLSDESC_OFF_G0_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSDESC_OFF_G0_NC /;"	d
R_AARCH64_TLSDESC_OFF_G1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSDESC_OFF_G1 /;"	d
R_AARCH64_TLSGD_ADD_LO12_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSGD_ADD_LO12_NC /;"	d
R_AARCH64_TLSGD_ADR_PAGE21	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSGD_ADR_PAGE21 /;"	d
R_AARCH64_TLSGD_ADR_PREL21	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSGD_ADR_PREL21 /;"	d
R_AARCH64_TLSGD_MOVW_G0_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSGD_MOVW_G0_NC /;"	d
R_AARCH64_TLSGD_MOVW_G1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSGD_MOVW_G1	/;"	d
R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21 /;"	d
R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC /;"	d
R_AARCH64_TLSIE_LD_GOTTPREL_PREL19	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSIE_LD_GOTTPREL_PREL19 /;"	d
R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC /;"	d
R_AARCH64_TLSIE_MOVW_GOTTPREL_G1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSIE_MOVW_GOTTPREL_G1 /;"	d
R_AARCH64_TLSLD_ADD_DTPREL_HI12	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLD_ADD_DTPREL_HI12 /;"	d
R_AARCH64_TLSLD_ADD_DTPREL_LO12	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLD_ADD_DTPREL_LO12 /;"	d
R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC /;"	d
R_AARCH64_TLSLD_ADD_LO12_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLD_ADD_LO12_NC /;"	d
R_AARCH64_TLSLD_ADR_PAGE21	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLD_ADR_PAGE21 /;"	d
R_AARCH64_TLSLD_ADR_PREL21	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLD_ADR_PREL21 /;"	d
R_AARCH64_TLSLD_LDST128_DTPREL_LO12	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLD_LDST128_DTPREL_LO12 /;"	d
R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC /;"	d
R_AARCH64_TLSLD_LDST16_DTPREL_LO12	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLD_LDST16_DTPREL_LO12 /;"	d
R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC /;"	d
R_AARCH64_TLSLD_LDST32_DTPREL_LO12	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLD_LDST32_DTPREL_LO12 /;"	d
R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC /;"	d
R_AARCH64_TLSLD_LDST64_DTPREL_LO12	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLD_LDST64_DTPREL_LO12 /;"	d
R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC /;"	d
R_AARCH64_TLSLD_LDST8_DTPREL_LO12	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLD_LDST8_DTPREL_LO12 /;"	d
R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC /;"	d
R_AARCH64_TLSLD_LD_PREL19	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLD_LD_PREL19 /;"	d
R_AARCH64_TLSLD_MOVW_DTPREL_G0	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLD_MOVW_DTPREL_G0 /;"	d
R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC /;"	d
R_AARCH64_TLSLD_MOVW_DTPREL_G1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLD_MOVW_DTPREL_G1 /;"	d
R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC /;"	d
R_AARCH64_TLSLD_MOVW_DTPREL_G2	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLD_MOVW_DTPREL_G2 /;"	d
R_AARCH64_TLSLD_MOVW_G0_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLD_MOVW_G0_NC /;"	d
R_AARCH64_TLSLD_MOVW_G1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLD_MOVW_G1	/;"	d
R_AARCH64_TLSLE_ADD_TPREL_HI12	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLE_ADD_TPREL_HI12 /;"	d
R_AARCH64_TLSLE_ADD_TPREL_LO12	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLE_ADD_TPREL_LO12 /;"	d
R_AARCH64_TLSLE_ADD_TPREL_LO12_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLE_ADD_TPREL_LO12_NC /;"	d
R_AARCH64_TLSLE_LDST128_TPREL_LO12	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLE_LDST128_TPREL_LO12 /;"	d
R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC /;"	d
R_AARCH64_TLSLE_LDST16_TPREL_LO12	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLE_LDST16_TPREL_LO12 /;"	d
R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC /;"	d
R_AARCH64_TLSLE_LDST32_TPREL_LO12	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLE_LDST32_TPREL_LO12 /;"	d
R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC /;"	d
R_AARCH64_TLSLE_LDST64_TPREL_LO12	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLE_LDST64_TPREL_LO12 /;"	d
R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC /;"	d
R_AARCH64_TLSLE_LDST8_TPREL_LO12	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLE_LDST8_TPREL_LO12 /;"	d
R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC /;"	d
R_AARCH64_TLSLE_MOVW_TPREL_G0	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLE_MOVW_TPREL_G0 /;"	d
R_AARCH64_TLSLE_MOVW_TPREL_G0_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLE_MOVW_TPREL_G0_NC /;"	d
R_AARCH64_TLSLE_MOVW_TPREL_G1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLE_MOVW_TPREL_G1 /;"	d
R_AARCH64_TLSLE_MOVW_TPREL_G1_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLE_MOVW_TPREL_G1_NC /;"	d
R_AARCH64_TLSLE_MOVW_TPREL_G2	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLSLE_MOVW_TPREL_G2 /;"	d
R_AARCH64_TLS_DTPMOD64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLS_DTPMOD64 /;"	d
R_AARCH64_TLS_DTPREL64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLS_DTPREL64 /;"	d
R_AARCH64_TLS_TPREL64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TLS_TPREL64 /;"	d
R_AARCH64_TSTBR14	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_AARCH64_TSTBR14	/;"	d
R_ALPHA_BRADDR	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ALPHA_BRADDR	/;"	d
R_ALPHA_COPY	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ALPHA_COPY	/;"	d
R_ALPHA_DTPMOD64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ALPHA_DTPMOD64	/;"	d
R_ALPHA_DTPREL16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ALPHA_DTPREL16	/;"	d
R_ALPHA_DTPREL64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ALPHA_DTPREL64	/;"	d
R_ALPHA_DTPRELHI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ALPHA_DTPRELHI	/;"	d
R_ALPHA_DTPRELLO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ALPHA_DTPRELLO	/;"	d
R_ALPHA_GLOB_DAT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ALPHA_GLOB_DAT	/;"	d
R_ALPHA_GOTDTPREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ALPHA_GOTDTPREL	/;"	d
R_ALPHA_GOTTPREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ALPHA_GOTTPREL	/;"	d
R_ALPHA_GPDISP	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ALPHA_GPDISP	/;"	d
R_ALPHA_GPREL16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ALPHA_GPREL16	/;"	d
R_ALPHA_GPREL32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ALPHA_GPREL32	/;"	d
R_ALPHA_GPRELHIGH	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ALPHA_GPRELHIGH	/;"	d
R_ALPHA_GPRELLOW	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ALPHA_GPRELLOW	/;"	d
R_ALPHA_HINT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ALPHA_HINT	/;"	d
R_ALPHA_JMP_SLOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ALPHA_JMP_SLOT	/;"	d
R_ALPHA_LITERAL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ALPHA_LITERAL	/;"	d
R_ALPHA_LITUSE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ALPHA_LITUSE	/;"	d
R_ALPHA_NONE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ALPHA_NONE	/;"	d
R_ALPHA_NUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ALPHA_NUM	/;"	d
R_ALPHA_REFLONG	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ALPHA_REFLONG	/;"	d
R_ALPHA_REFQUAD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ALPHA_REFQUAD	/;"	d
R_ALPHA_RELATIVE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ALPHA_RELATIVE	/;"	d
R_ALPHA_SREL16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ALPHA_SREL16	/;"	d
R_ALPHA_SREL32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ALPHA_SREL32	/;"	d
R_ALPHA_SREL64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ALPHA_SREL64	/;"	d
R_ALPHA_TLSGD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ALPHA_TLSGD	/;"	d
R_ALPHA_TLS_GD_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ALPHA_TLS_GD_HI	/;"	d
R_ALPHA_TLS_LDM	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ALPHA_TLS_LDM	/;"	d
R_ALPHA_TPREL16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ALPHA_TPREL16	/;"	d
R_ALPHA_TPREL64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ALPHA_TPREL64	/;"	d
R_ALPHA_TPRELHI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ALPHA_TPRELHI	/;"	d
R_ALPHA_TPRELLO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ALPHA_TPRELLO	/;"	d
R_ARM_ABS12	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_ABS12	/;"	d
R_ARM_ABS16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_ABS16	/;"	d
R_ARM_ABS32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_ABS32	/;"	d
R_ARM_ABS32_NOI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_ABS32_NOI	/;"	d
R_ARM_ABS8	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_ABS8	/;"	d
R_ARM_ALU_PCREL_15_8	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_ALU_PCREL_15_8	/;"	d
R_ARM_ALU_PCREL_23_15	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_ALU_PCREL_23_15	/;"	d
R_ARM_ALU_PCREL_7_0	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_ALU_PCREL_7_0	/;"	d
R_ARM_ALU_PC_G0	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_ALU_PC_G0	/;"	d
R_ARM_ALU_PC_G0_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_ALU_PC_G0_NC	/;"	d
R_ARM_ALU_PC_G1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_ALU_PC_G1	/;"	d
R_ARM_ALU_PC_G1_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_ALU_PC_G1_NC	/;"	d
R_ARM_ALU_PC_G2	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_ALU_PC_G2	/;"	d
R_ARM_ALU_SBREL_19_12	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_ALU_SBREL_19_12	/;"	d
R_ARM_ALU_SBREL_27_20	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_ALU_SBREL_27_20	/;"	d
R_ARM_ALU_SB_G0	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_ALU_SB_G0	/;"	d
R_ARM_ALU_SB_G0_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_ALU_SB_G0_NC	/;"	d
R_ARM_ALU_SB_G1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_ALU_SB_G1	/;"	d
R_ARM_ALU_SB_G1_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_ALU_SB_G1_NC	/;"	d
R_ARM_ALU_SB_G2	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_ALU_SB_G2	/;"	d
R_ARM_AMP_VCALL9	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_AMP_VCALL9	/;"	d
R_ARM_BASE_ABS	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_BASE_ABS	/;"	d
R_ARM_CALL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_CALL	/;"	d
R_ARM_COPY	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_COPY	/;"	d
R_ARM_GLOB_DAT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_GLOB_DAT	/;"	d
R_ARM_GNU_VTENTRY	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_GNU_VTENTRY	/;"	d
R_ARM_GNU_VTINHERIT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_GNU_VTINHERIT	/;"	d
R_ARM_GOT32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_GOT32	/;"	d
R_ARM_GOTOFF	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_GOTOFF	/;"	d
R_ARM_GOTOFF12	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_GOTOFF12	/;"	d
R_ARM_GOTPC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_GOTPC	/;"	d
R_ARM_GOTRELAX	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_GOTRELAX	/;"	d
R_ARM_GOT_ABS	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_GOT_ABS	/;"	d
R_ARM_GOT_BREL12	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_GOT_BREL12	/;"	d
R_ARM_GOT_PREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_GOT_PREL	/;"	d
R_ARM_IRELATIVE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_IRELATIVE	/;"	d
R_ARM_JUMP24	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_JUMP24	/;"	d
R_ARM_JUMP_SLOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_JUMP_SLOT	/;"	d
R_ARM_LDC_PC_G0	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_LDC_PC_G0	/;"	d
R_ARM_LDC_PC_G1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_LDC_PC_G1	/;"	d
R_ARM_LDC_PC_G2	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_LDC_PC_G2	/;"	d
R_ARM_LDC_SB_G0	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_LDC_SB_G0	/;"	d
R_ARM_LDC_SB_G1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_LDC_SB_G1	/;"	d
R_ARM_LDC_SB_G2	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_LDC_SB_G2	/;"	d
R_ARM_LDRS_PC_G0	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_LDRS_PC_G0	/;"	d
R_ARM_LDRS_PC_G1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_LDRS_PC_G1	/;"	d
R_ARM_LDRS_PC_G2	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_LDRS_PC_G2	/;"	d
R_ARM_LDRS_SB_G0	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_LDRS_SB_G0	/;"	d
R_ARM_LDRS_SB_G1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_LDRS_SB_G1	/;"	d
R_ARM_LDRS_SB_G2	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_LDRS_SB_G2	/;"	d
R_ARM_LDR_PC_G1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_LDR_PC_G1	/;"	d
R_ARM_LDR_PC_G2	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_LDR_PC_G2	/;"	d
R_ARM_LDR_SBREL_11_0	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_LDR_SBREL_11_0	/;"	d
R_ARM_LDR_SB_G0	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_LDR_SB_G0	/;"	d
R_ARM_LDR_SB_G1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_LDR_SB_G1	/;"	d
R_ARM_LDR_SB_G2	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_LDR_SB_G2	/;"	d
R_ARM_ME_TOO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_ME_TOO	/;"	d
R_ARM_MOVT_ABS	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_MOVT_ABS	/;"	d
R_ARM_MOVT_BREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_MOVT_BREL	/;"	d
R_ARM_MOVT_PREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_MOVT_PREL	/;"	d
R_ARM_MOVW_ABS_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_MOVW_ABS_NC	/;"	d
R_ARM_MOVW_BREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_MOVW_BREL	/;"	d
R_ARM_MOVW_BREL_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_MOVW_BREL_NC	/;"	d
R_ARM_MOVW_PREL_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_MOVW_PREL_NC	/;"	d
R_ARM_NONE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_NONE	/;"	d
R_ARM_NUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_NUM	/;"	d
R_ARM_PC13	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_PC13	/;"	d
R_ARM_PC24	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_PC24	/;"	d
R_ARM_PLT32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_PLT32	/;"	d
R_ARM_PLT32_ABS	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_PLT32_ABS	/;"	d
R_ARM_PREL31	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_PREL31	/;"	d
R_ARM_RABS22	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_RABS22	/;"	d
R_ARM_RBASE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_RBASE	/;"	d
R_ARM_REL32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_REL32	/;"	d
R_ARM_REL32_NOI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_REL32_NOI	/;"	d
R_ARM_RELATIVE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_RELATIVE	/;"	d
R_ARM_RPC24	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_RPC24	/;"	d
R_ARM_RREL32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_RREL32	/;"	d
R_ARM_RSBREL32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_RSBREL32	/;"	d
R_ARM_RXPC25	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_RXPC25	/;"	d
R_ARM_SBREL31	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_SBREL31	/;"	d
R_ARM_SBREL32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_SBREL32	/;"	d
R_ARM_SWI24	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_SWI24	/;"	d
R_ARM_TARGET1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_TARGET1	/;"	d
R_ARM_TARGET2	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_TARGET2	/;"	d
R_ARM_THM_ABS5	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_THM_ABS5	/;"	d
R_ARM_THM_ALU_PREL_11_0	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_THM_ALU_PREL_11_0	/;"	d
R_ARM_THM_GOT_BREL12	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_THM_GOT_BREL12	/;"	d
R_ARM_THM_JUMP19	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_THM_JUMP19	/;"	d
R_ARM_THM_JUMP24	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_THM_JUMP24	/;"	d
R_ARM_THM_JUMP6	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_THM_JUMP6	/;"	d
R_ARM_THM_MOVT_ABS	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_THM_MOVT_ABS	/;"	d
R_ARM_THM_MOVT_BREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_THM_MOVT_BREL	/;"	d
R_ARM_THM_MOVT_PREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_THM_MOVT_PREL	/;"	d
R_ARM_THM_MOVW_ABS_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_THM_MOVW_ABS_NC	/;"	d
R_ARM_THM_MOVW_BREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_THM_MOVW_BREL	/;"	d
R_ARM_THM_MOVW_BREL_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_THM_MOVW_BREL_NC	/;"	d
R_ARM_THM_MOVW_PREL_NC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_THM_MOVW_PREL_NC	/;"	d
R_ARM_THM_PC11	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_THM_PC11	/;"	d
R_ARM_THM_PC12	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_THM_PC12	/;"	d
R_ARM_THM_PC22	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_THM_PC22	/;"	d
R_ARM_THM_PC8	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_THM_PC8	/;"	d
R_ARM_THM_PC9	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_THM_PC9	/;"	d
R_ARM_THM_RPC22	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_THM_RPC22	/;"	d
R_ARM_THM_SWI8	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_THM_SWI8	/;"	d
R_ARM_THM_TLS_CALL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_THM_TLS_CALL	/;"	d
R_ARM_THM_TLS_DESCSEQ	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_THM_TLS_DESCSEQ	/;"	d
R_ARM_THM_TLS_DESCSEQ16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_THM_TLS_DESCSEQ16	/;"	d
R_ARM_THM_TLS_DESCSEQ32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_THM_TLS_DESCSEQ32	/;"	d
R_ARM_THM_XPC22	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_THM_XPC22	/;"	d
R_ARM_TLS_CALL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_TLS_CALL	/;"	d
R_ARM_TLS_DESC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_TLS_DESC	/;"	d
R_ARM_TLS_DESCSEQ	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_TLS_DESCSEQ	/;"	d
R_ARM_TLS_DTPMOD32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_TLS_DTPMOD32	/;"	d
R_ARM_TLS_DTPOFF32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_TLS_DTPOFF32	/;"	d
R_ARM_TLS_GD32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_TLS_GD32	/;"	d
R_ARM_TLS_GOTDESC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_TLS_GOTDESC	/;"	d
R_ARM_TLS_IE12GP	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_TLS_IE12GP	/;"	d
R_ARM_TLS_IE32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_TLS_IE32	/;"	d
R_ARM_TLS_LDM32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_TLS_LDM32	/;"	d
R_ARM_TLS_LDO12	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_TLS_LDO12	/;"	d
R_ARM_TLS_LDO32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_TLS_LDO32	/;"	d
R_ARM_TLS_LE12	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_TLS_LE12	/;"	d
R_ARM_TLS_LE32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_TLS_LE32	/;"	d
R_ARM_TLS_TPOFF32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_TLS_TPOFF32	/;"	d
R_ARM_V4BX	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_V4BX	/;"	d
R_ARM_XPC25	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_ARM_XPC25	/;"	d
R_CRIS_16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_CRIS_16	/;"	d
R_CRIS_16_GOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_CRIS_16_GOT	/;"	d
R_CRIS_16_GOTPLT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_CRIS_16_GOTPLT	/;"	d
R_CRIS_16_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_CRIS_16_PCREL	/;"	d
R_CRIS_32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_CRIS_32	/;"	d
R_CRIS_32_GOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_CRIS_32_GOT	/;"	d
R_CRIS_32_GOTPLT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_CRIS_32_GOTPLT	/;"	d
R_CRIS_32_GOTREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_CRIS_32_GOTREL	/;"	d
R_CRIS_32_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_CRIS_32_PCREL	/;"	d
R_CRIS_32_PLT_GOTREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_CRIS_32_PLT_GOTREL	/;"	d
R_CRIS_32_PLT_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_CRIS_32_PLT_PCREL	/;"	d
R_CRIS_8	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_CRIS_8	/;"	d
R_CRIS_8_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_CRIS_8_PCREL	/;"	d
R_CRIS_COPY	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_CRIS_COPY	/;"	d
R_CRIS_GLOB_DAT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_CRIS_GLOB_DAT	/;"	d
R_CRIS_GNU_VTENTRY	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_CRIS_GNU_VTENTRY	/;"	d
R_CRIS_GNU_VTINHERIT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_CRIS_GNU_VTINHERIT	/;"	d
R_CRIS_JUMP_SLOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_CRIS_JUMP_SLOT	/;"	d
R_CRIS_NONE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_CRIS_NONE	/;"	d
R_CRIS_NUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_CRIS_NUM	/;"	d
R_CRIS_RELATIVE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_CRIS_RELATIVE	/;"	d
R_IA64_COPY	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_COPY	/;"	d
R_IA64_DIR32LSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_DIR32LSB	/;"	d
R_IA64_DIR32MSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_DIR32MSB	/;"	d
R_IA64_DIR64LSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_DIR64LSB	/;"	d
R_IA64_DIR64MSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_DIR64MSB	/;"	d
R_IA64_DTPMOD64LSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_DTPMOD64LSB	/;"	d
R_IA64_DTPMOD64MSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_DTPMOD64MSB	/;"	d
R_IA64_DTPREL14	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_DTPREL14	/;"	d
R_IA64_DTPREL22	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_DTPREL22	/;"	d
R_IA64_DTPREL32LSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_DTPREL32LSB	/;"	d
R_IA64_DTPREL32MSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_DTPREL32MSB	/;"	d
R_IA64_DTPREL64I	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_DTPREL64I	/;"	d
R_IA64_DTPREL64LSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_DTPREL64LSB	/;"	d
R_IA64_DTPREL64MSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_DTPREL64MSB	/;"	d
R_IA64_FPTR32LSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_FPTR32LSB	/;"	d
R_IA64_FPTR32MSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_FPTR32MSB	/;"	d
R_IA64_FPTR64I	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_FPTR64I	/;"	d
R_IA64_FPTR64LSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_FPTR64LSB	/;"	d
R_IA64_FPTR64MSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_FPTR64MSB	/;"	d
R_IA64_GPREL22	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_GPREL22	/;"	d
R_IA64_GPREL32LSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_GPREL32LSB	/;"	d
R_IA64_GPREL32MSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_GPREL32MSB	/;"	d
R_IA64_GPREL64I	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_GPREL64I	/;"	d
R_IA64_GPREL64LSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_GPREL64LSB	/;"	d
R_IA64_GPREL64MSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_GPREL64MSB	/;"	d
R_IA64_IMM14	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_IMM14	/;"	d
R_IA64_IMM22	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_IMM22	/;"	d
R_IA64_IMM64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_IMM64	/;"	d
R_IA64_IPLTLSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_IPLTLSB	/;"	d
R_IA64_IPLTMSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_IPLTMSB	/;"	d
R_IA64_LDXMOV	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_LDXMOV	/;"	d
R_IA64_LTOFF22	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_LTOFF22	/;"	d
R_IA64_LTOFF22X	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_LTOFF22X	/;"	d
R_IA64_LTOFF64I	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_LTOFF64I	/;"	d
R_IA64_LTOFF_DTPMOD22	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_LTOFF_DTPMOD22	/;"	d
R_IA64_LTOFF_DTPREL22	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_LTOFF_DTPREL22	/;"	d
R_IA64_LTOFF_FPTR22	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_LTOFF_FPTR22	/;"	d
R_IA64_LTOFF_FPTR32LSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_LTOFF_FPTR32LSB	/;"	d
R_IA64_LTOFF_FPTR32MSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_LTOFF_FPTR32MSB	/;"	d
R_IA64_LTOFF_FPTR64I	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_LTOFF_FPTR64I	/;"	d
R_IA64_LTOFF_FPTR64LSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_LTOFF_FPTR64LSB	/;"	d
R_IA64_LTOFF_FPTR64MSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_LTOFF_FPTR64MSB	/;"	d
R_IA64_LTOFF_TPREL22	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_LTOFF_TPREL22	/;"	d
R_IA64_LTV32LSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_LTV32LSB	/;"	d
R_IA64_LTV32MSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_LTV32MSB	/;"	d
R_IA64_LTV64LSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_LTV64LSB	/;"	d
R_IA64_LTV64MSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_LTV64MSB	/;"	d
R_IA64_NONE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_NONE	/;"	d
R_IA64_PCREL21B	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_PCREL21B	/;"	d
R_IA64_PCREL21BI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_PCREL21BI	/;"	d
R_IA64_PCREL21F	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_PCREL21F	/;"	d
R_IA64_PCREL21M	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_PCREL21M	/;"	d
R_IA64_PCREL22	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_PCREL22	/;"	d
R_IA64_PCREL32LSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_PCREL32LSB	/;"	d
R_IA64_PCREL32MSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_PCREL32MSB	/;"	d
R_IA64_PCREL60B	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_PCREL60B	/;"	d
R_IA64_PCREL64I	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_PCREL64I	/;"	d
R_IA64_PCREL64LSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_PCREL64LSB	/;"	d
R_IA64_PCREL64MSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_PCREL64MSB	/;"	d
R_IA64_PLTOFF22	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_PLTOFF22	/;"	d
R_IA64_PLTOFF64I	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_PLTOFF64I	/;"	d
R_IA64_PLTOFF64LSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_PLTOFF64LSB	/;"	d
R_IA64_PLTOFF64MSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_PLTOFF64MSB	/;"	d
R_IA64_REL32LSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_REL32LSB	/;"	d
R_IA64_REL32MSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_REL32MSB	/;"	d
R_IA64_REL64LSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_REL64LSB	/;"	d
R_IA64_REL64MSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_REL64MSB	/;"	d
R_IA64_SECREL32LSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_SECREL32LSB	/;"	d
R_IA64_SECREL32MSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_SECREL32MSB	/;"	d
R_IA64_SECREL64LSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_SECREL64LSB	/;"	d
R_IA64_SECREL64MSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_SECREL64MSB	/;"	d
R_IA64_SEGREL32LSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_SEGREL32LSB	/;"	d
R_IA64_SEGREL32MSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_SEGREL32MSB	/;"	d
R_IA64_SEGREL64LSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_SEGREL64LSB	/;"	d
R_IA64_SEGREL64MSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_SEGREL64MSB	/;"	d
R_IA64_SUB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_SUB	/;"	d
R_IA64_TPREL14	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_TPREL14	/;"	d
R_IA64_TPREL22	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_TPREL22	/;"	d
R_IA64_TPREL64I	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_TPREL64I	/;"	d
R_IA64_TPREL64LSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_TPREL64LSB	/;"	d
R_IA64_TPREL64MSB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_IA64_TPREL64MSB	/;"	d
R_M32R_10_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_10_PCREL	/;"	d
R_M32R_10_PCREL_RELA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_10_PCREL_RELA	/;"	d
R_M32R_16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_16	/;"	d
R_M32R_16_RELA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_16_RELA	/;"	d
R_M32R_18_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_18_PCREL	/;"	d
R_M32R_18_PCREL_RELA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_18_PCREL_RELA	/;"	d
R_M32R_24	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_24	/;"	d
R_M32R_24_RELA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_24_RELA	/;"	d
R_M32R_26_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_26_PCREL	/;"	d
R_M32R_26_PCREL_RELA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_26_PCREL_RELA	/;"	d
R_M32R_26_PLTREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_26_PLTREL	/;"	d
R_M32R_32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_32	/;"	d
R_M32R_32_RELA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_32_RELA	/;"	d
R_M32R_COPY	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_COPY	/;"	d
R_M32R_GLOB_DAT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_GLOB_DAT	/;"	d
R_M32R_GNU_VTENTRY	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_GNU_VTENTRY	/;"	d
R_M32R_GNU_VTINHERIT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_GNU_VTINHERIT	/;"	d
R_M32R_GOT16_HI_SLO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_GOT16_HI_SLO	/;"	d
R_M32R_GOT16_HI_ULO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_GOT16_HI_ULO	/;"	d
R_M32R_GOT16_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_GOT16_LO	/;"	d
R_M32R_GOT24	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_GOT24	/;"	d
R_M32R_GOTOFF	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_GOTOFF	/;"	d
R_M32R_GOTOFF_HI_SLO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_GOTOFF_HI_SLO	/;"	d
R_M32R_GOTOFF_HI_ULO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_GOTOFF_HI_ULO	/;"	d
R_M32R_GOTOFF_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_GOTOFF_LO	/;"	d
R_M32R_GOTPC24	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_GOTPC24	/;"	d
R_M32R_GOTPC_HI_SLO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_GOTPC_HI_SLO	/;"	d
R_M32R_GOTPC_HI_ULO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_GOTPC_HI_ULO	/;"	d
R_M32R_GOTPC_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_GOTPC_LO	/;"	d
R_M32R_HI16_SLO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_HI16_SLO	/;"	d
R_M32R_HI16_SLO_RELA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_HI16_SLO_RELA	/;"	d
R_M32R_HI16_ULO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_HI16_ULO	/;"	d
R_M32R_HI16_ULO_RELA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_HI16_ULO_RELA	/;"	d
R_M32R_JMP_SLOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_JMP_SLOT	/;"	d
R_M32R_LO16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_LO16	/;"	d
R_M32R_LO16_RELA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_LO16_RELA	/;"	d
R_M32R_NONE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_NONE	/;"	d
R_M32R_NUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_NUM	/;"	d
R_M32R_REL32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_REL32	/;"	d
R_M32R_RELATIVE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_RELATIVE	/;"	d
R_M32R_RELA_GNU_VTENTRY	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_RELA_GNU_VTENTRY	/;"	d
R_M32R_RELA_GNU_VTINHERIT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_RELA_GNU_VTINHERIT	/;"	d
R_M32R_SDA16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_SDA16	/;"	d
R_M32R_SDA16_RELA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_M32R_SDA16_RELA	/;"	d
R_MICROBLAZE_32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MICROBLAZE_32 /;"	d
R_MICROBLAZE_32_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MICROBLAZE_32_LO	/;"	d
R_MICROBLAZE_32_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MICROBLAZE_32_PCREL	/;"	d
R_MICROBLAZE_32_PCREL_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MICROBLAZE_32_PCREL_LO	/;"	d
R_MICROBLAZE_32_SYM_OP_SYM	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MICROBLAZE_32_SYM_OP_SYM	/;"	d
R_MICROBLAZE_64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MICROBLAZE_64 /;"	d
R_MICROBLAZE_64_NONE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MICROBLAZE_64_NONE	/;"	d
R_MICROBLAZE_64_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MICROBLAZE_64_PCREL	/;"	d
R_MICROBLAZE_COPY	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MICROBLAZE_COPY	/;"	d
R_MICROBLAZE_GLOB_DAT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MICROBLAZE_GLOB_DAT	/;"	d
R_MICROBLAZE_GNU_VTENTRY	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MICROBLAZE_GNU_VTENTRY	/;"	d
R_MICROBLAZE_GNU_VTINHERIT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MICROBLAZE_GNU_VTINHERIT	/;"	d
R_MICROBLAZE_GOTOFF_32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MICROBLAZE_GOTOFF_32	/;"	d
R_MICROBLAZE_GOTOFF_64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MICROBLAZE_GOTOFF_64	/;"	d
R_MICROBLAZE_GOTPC_64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MICROBLAZE_GOTPC_64	/;"	d
R_MICROBLAZE_GOT_64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MICROBLAZE_GOT_64	/;"	d
R_MICROBLAZE_JUMP_SLOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MICROBLAZE_JUMP_SLOT	/;"	d
R_MICROBLAZE_NONE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MICROBLAZE_NONE	/;"	d
R_MICROBLAZE_PLT_64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MICROBLAZE_PLT_64	/;"	d
R_MICROBLAZE_REL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MICROBLAZE_REL	/;"	d
R_MICROBLAZE_SRO32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MICROBLAZE_SRO32	/;"	d
R_MICROBLAZE_SRW32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MICROBLAZE_SRW32	/;"	d
R_MICROBLAZE_TLS	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MICROBLAZE_TLS	/;"	d
R_MICROBLAZE_TLSDTPMOD32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MICROBLAZE_TLSDTPMOD32	/;"	d
R_MICROBLAZE_TLSDTPREL32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MICROBLAZE_TLSDTPREL32	/;"	d
R_MICROBLAZE_TLSDTPREL64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MICROBLAZE_TLSDTPREL64	/;"	d
R_MICROBLAZE_TLSGD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MICROBLAZE_TLSGD	/;"	d
R_MICROBLAZE_TLSGOTTPREL32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MICROBLAZE_TLSGOTTPREL32	/;"	d
R_MICROBLAZE_TLSLD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MICROBLAZE_TLSLD	/;"	d
R_MICROBLAZE_TLSTPREL32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MICROBLAZE_TLSTPREL32 /;"	d
R_MIPS_16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_16	/;"	d
R_MIPS_26	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_26	/;"	d
R_MIPS_32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_32	/;"	d
R_MIPS_64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_64	/;"	d
R_MIPS_ADD_IMMEDIATE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_ADD_IMMEDIATE	/;"	d
R_MIPS_CALL16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_CALL16	/;"	d
R_MIPS_CALL_HI16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_CALL_HI16	/;"	d
R_MIPS_CALL_LO16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_CALL_LO16	/;"	d
R_MIPS_COPY	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_COPY	/;"	d
R_MIPS_DELETE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_DELETE	/;"	d
R_MIPS_GLOB_DAT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_GLOB_DAT	/;"	d
R_MIPS_GOT16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_GOT16	/;"	d
R_MIPS_GOT_DISP	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_GOT_DISP	/;"	d
R_MIPS_GOT_HI16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_GOT_HI16	/;"	d
R_MIPS_GOT_LO16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_GOT_LO16	/;"	d
R_MIPS_GOT_OFST	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_GOT_OFST	/;"	d
R_MIPS_GOT_PAGE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_GOT_PAGE	/;"	d
R_MIPS_GPREL16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_GPREL16	/;"	d
R_MIPS_GPREL32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_GPREL32	/;"	d
R_MIPS_HI16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_HI16	/;"	d
R_MIPS_HIGHER	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_HIGHER	/;"	d
R_MIPS_HIGHEST	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_HIGHEST	/;"	d
R_MIPS_INSERT_A	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_INSERT_A	/;"	d
R_MIPS_INSERT_B	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_INSERT_B	/;"	d
R_MIPS_JALR	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_JALR	/;"	d
R_MIPS_JUMP_SLOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_JUMP_SLOT /;"	d
R_MIPS_LITERAL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_LITERAL	/;"	d
R_MIPS_LO16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_LO16	/;"	d
R_MIPS_NONE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_NONE	/;"	d
R_MIPS_NUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_NUM	/;"	d
R_MIPS_PC16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_PC16	/;"	d
R_MIPS_PJUMP	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_PJUMP	/;"	d
R_MIPS_REL16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_REL16	/;"	d
R_MIPS_REL32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_REL32	/;"	d
R_MIPS_RELGOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_RELGOT	/;"	d
R_MIPS_SCN_DISP	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_SCN_DISP	/;"	d
R_MIPS_SHIFT5	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_SHIFT5	/;"	d
R_MIPS_SHIFT6	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_SHIFT6	/;"	d
R_MIPS_SUB	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_SUB	/;"	d
R_MIPS_TLS_DTPMOD32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_TLS_DTPMOD32	/;"	d
R_MIPS_TLS_DTPMOD64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_TLS_DTPMOD64	/;"	d
R_MIPS_TLS_DTPREL32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_TLS_DTPREL32	/;"	d
R_MIPS_TLS_DTPREL64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_TLS_DTPREL64	/;"	d
R_MIPS_TLS_DTPREL_HI16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_TLS_DTPREL_HI16	/;"	d
R_MIPS_TLS_DTPREL_LO16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_TLS_DTPREL_LO16	/;"	d
R_MIPS_TLS_GD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_TLS_GD	/;"	d
R_MIPS_TLS_GOTTPREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_TLS_GOTTPREL	/;"	d
R_MIPS_TLS_LDM	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_TLS_LDM	/;"	d
R_MIPS_TLS_TPREL32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_TLS_TPREL32	/;"	d
R_MIPS_TLS_TPREL64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_TLS_TPREL64	/;"	d
R_MIPS_TLS_TPREL_HI16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_TLS_TPREL_HI16	/;"	d
R_MIPS_TLS_TPREL_LO16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MIPS_TLS_TPREL_LO16	/;"	d
R_MN10300_16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MN10300_16	/;"	d
R_MN10300_24	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MN10300_24	/;"	d
R_MN10300_32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MN10300_32	/;"	d
R_MN10300_8	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MN10300_8	/;"	d
R_MN10300_ALIGN	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MN10300_ALIGN	/;"	d
R_MN10300_COPY	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MN10300_COPY	/;"	d
R_MN10300_GLOB_DAT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MN10300_GLOB_DAT	/;"	d
R_MN10300_GNU_VTENTRY	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MN10300_GNU_VTENTRY	/;"	d
R_MN10300_GNU_VTINHERIT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MN10300_GNU_VTINHERIT	/;"	d
R_MN10300_GOT16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MN10300_GOT16	/;"	d
R_MN10300_GOT24	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MN10300_GOT24	/;"	d
R_MN10300_GOT32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MN10300_GOT32	/;"	d
R_MN10300_GOTOFF16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MN10300_GOTOFF16	/;"	d
R_MN10300_GOTOFF24	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MN10300_GOTOFF24	/;"	d
R_MN10300_GOTOFF32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MN10300_GOTOFF32	/;"	d
R_MN10300_GOTPC16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MN10300_GOTPC16	/;"	d
R_MN10300_GOTPC32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MN10300_GOTPC32	/;"	d
R_MN10300_JMP_SLOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MN10300_JMP_SLOT	/;"	d
R_MN10300_NONE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MN10300_NONE	/;"	d
R_MN10300_NUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MN10300_NUM	/;"	d
R_MN10300_PCREL16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MN10300_PCREL16	/;"	d
R_MN10300_PCREL32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MN10300_PCREL32	/;"	d
R_MN10300_PCREL8	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MN10300_PCREL8	/;"	d
R_MN10300_PLT16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MN10300_PLT16	/;"	d
R_MN10300_PLT32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MN10300_PLT32	/;"	d
R_MN10300_RELATIVE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MN10300_RELATIVE	/;"	d
R_MN10300_SYM_DIFF	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MN10300_SYM_DIFF	/;"	d
R_MN10300_TLS_DTPMOD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MN10300_TLS_DTPMOD	/;"	d
R_MN10300_TLS_DTPOFF	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MN10300_TLS_DTPOFF	/;"	d
R_MN10300_TLS_GD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MN10300_TLS_GD	/;"	d
R_MN10300_TLS_GOTIE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MN10300_TLS_GOTIE	/;"	d
R_MN10300_TLS_IE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MN10300_TLS_IE	/;"	d
R_MN10300_TLS_LD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MN10300_TLS_LD	/;"	d
R_MN10300_TLS_LDO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MN10300_TLS_LDO	/;"	d
R_MN10300_TLS_LE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MN10300_TLS_LE	/;"	d
R_MN10300_TLS_TPOFF	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_MN10300_TLS_TPOFF	/;"	d
R_PARISC_COPY	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_COPY	/;"	d
R_PARISC_DIR14DR	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_DIR14DR	/;"	d
R_PARISC_DIR14R	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_DIR14R	/;"	d
R_PARISC_DIR14WR	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_DIR14WR	/;"	d
R_PARISC_DIR16DF	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_DIR16DF	/;"	d
R_PARISC_DIR16F	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_DIR16F	/;"	d
R_PARISC_DIR16WF	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_DIR16WF	/;"	d
R_PARISC_DIR17F	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_DIR17F	/;"	d
R_PARISC_DIR17R	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_DIR17R	/;"	d
R_PARISC_DIR21L	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_DIR21L	/;"	d
R_PARISC_DIR32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_DIR32	/;"	d
R_PARISC_DIR64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_DIR64	/;"	d
R_PARISC_DPREL14R	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_DPREL14R	/;"	d
R_PARISC_DPREL21L	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_DPREL21L	/;"	d
R_PARISC_EPLT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_EPLT	/;"	d
R_PARISC_FPTR64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_FPTR64	/;"	d
R_PARISC_GNU_VTENTRY	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_GNU_VTENTRY	/;"	d
R_PARISC_GNU_VTINHERIT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_GNU_VTINHERIT	/;"	d
R_PARISC_GPREL14DR	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_GPREL14DR	/;"	d
R_PARISC_GPREL14R	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_GPREL14R	/;"	d
R_PARISC_GPREL14WR	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_GPREL14WR	/;"	d
R_PARISC_GPREL16DF	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_GPREL16DF	/;"	d
R_PARISC_GPREL16F	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_GPREL16F	/;"	d
R_PARISC_GPREL16WF	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_GPREL16WF	/;"	d
R_PARISC_GPREL21L	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_GPREL21L	/;"	d
R_PARISC_GPREL64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_GPREL64	/;"	d
R_PARISC_HIRESERVE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_HIRESERVE	/;"	d
R_PARISC_IPLT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_IPLT	/;"	d
R_PARISC_LORESERVE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_LORESERVE	/;"	d
R_PARISC_LTOFF14DR	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_LTOFF14DR	/;"	d
R_PARISC_LTOFF14R	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_LTOFF14R	/;"	d
R_PARISC_LTOFF14WR	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_LTOFF14WR	/;"	d
R_PARISC_LTOFF16DF	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_LTOFF16DF	/;"	d
R_PARISC_LTOFF16F	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_LTOFF16F	/;"	d
R_PARISC_LTOFF16WF	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_LTOFF16WF	/;"	d
R_PARISC_LTOFF21L	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_LTOFF21L	/;"	d
R_PARISC_LTOFF64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_LTOFF64	/;"	d
R_PARISC_LTOFF_FPTR14DR	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_LTOFF_FPTR14DR	/;"	d
R_PARISC_LTOFF_FPTR14R	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_LTOFF_FPTR14R	/;"	d
R_PARISC_LTOFF_FPTR14WR	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_LTOFF_FPTR14WR	/;"	d
R_PARISC_LTOFF_FPTR16DF	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_LTOFF_FPTR16DF	/;"	d
R_PARISC_LTOFF_FPTR16F	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_LTOFF_FPTR16F	/;"	d
R_PARISC_LTOFF_FPTR16WF	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_LTOFF_FPTR16WF	/;"	d
R_PARISC_LTOFF_FPTR21L	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_LTOFF_FPTR21L	/;"	d
R_PARISC_LTOFF_FPTR32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_LTOFF_FPTR32	/;"	d
R_PARISC_LTOFF_FPTR64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_LTOFF_FPTR64	/;"	d
R_PARISC_LTOFF_TP14DR	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_LTOFF_TP14DR	/;"	d
R_PARISC_LTOFF_TP14F	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_LTOFF_TP14F	/;"	d
R_PARISC_LTOFF_TP14R	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_LTOFF_TP14R	/;"	d
R_PARISC_LTOFF_TP14WR	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_LTOFF_TP14WR	/;"	d
R_PARISC_LTOFF_TP16DF	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_LTOFF_TP16DF	/;"	d
R_PARISC_LTOFF_TP16F	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_LTOFF_TP16F	/;"	d
R_PARISC_LTOFF_TP16WF	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_LTOFF_TP16WF	/;"	d
R_PARISC_LTOFF_TP21L	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_LTOFF_TP21L	/;"	d
R_PARISC_LTOFF_TP64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_LTOFF_TP64	/;"	d
R_PARISC_NONE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_NONE	/;"	d
R_PARISC_PCREL14DR	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_PCREL14DR	/;"	d
R_PARISC_PCREL14R	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_PCREL14R	/;"	d
R_PARISC_PCREL14WR	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_PCREL14WR	/;"	d
R_PARISC_PCREL16DF	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_PCREL16DF	/;"	d
R_PARISC_PCREL16F	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_PCREL16F	/;"	d
R_PARISC_PCREL16WF	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_PCREL16WF	/;"	d
R_PARISC_PCREL17F	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_PCREL17F	/;"	d
R_PARISC_PCREL17R	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_PCREL17R	/;"	d
R_PARISC_PCREL21L	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_PCREL21L	/;"	d
R_PARISC_PCREL22F	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_PCREL22F	/;"	d
R_PARISC_PCREL32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_PCREL32	/;"	d
R_PARISC_PCREL64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_PCREL64	/;"	d
R_PARISC_PLABEL14R	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_PLABEL14R	/;"	d
R_PARISC_PLABEL21L	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_PLABEL21L	/;"	d
R_PARISC_PLABEL32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_PLABEL32	/;"	d
R_PARISC_PLTOFF14DR	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_PLTOFF14DR	/;"	d
R_PARISC_PLTOFF14R	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_PLTOFF14R	/;"	d
R_PARISC_PLTOFF14WR	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_PLTOFF14WR	/;"	d
R_PARISC_PLTOFF16DF	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_PLTOFF16DF	/;"	d
R_PARISC_PLTOFF16F	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_PLTOFF16F	/;"	d
R_PARISC_PLTOFF16WF	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_PLTOFF16WF	/;"	d
R_PARISC_PLTOFF21L	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_PLTOFF21L	/;"	d
R_PARISC_SECREL32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_SECREL32	/;"	d
R_PARISC_SECREL64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_SECREL64	/;"	d
R_PARISC_SEGBASE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_SEGBASE	/;"	d
R_PARISC_SEGREL32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_SEGREL32	/;"	d
R_PARISC_SEGREL64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_SEGREL64	/;"	d
R_PARISC_TLS_DTPMOD32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_TLS_DTPMOD32	/;"	d
R_PARISC_TLS_DTPMOD64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_TLS_DTPMOD64	/;"	d
R_PARISC_TLS_DTPOFF32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_TLS_DTPOFF32	/;"	d
R_PARISC_TLS_DTPOFF64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_TLS_DTPOFF64	/;"	d
R_PARISC_TLS_GD14R	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_TLS_GD14R	/;"	d
R_PARISC_TLS_GD21L	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_TLS_GD21L	/;"	d
R_PARISC_TLS_GDCALL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_TLS_GDCALL	/;"	d
R_PARISC_TLS_IE14R	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_TLS_IE14R	/;"	d
R_PARISC_TLS_IE21L	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_TLS_IE21L	/;"	d
R_PARISC_TLS_LDM14R	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_TLS_LDM14R	/;"	d
R_PARISC_TLS_LDM21L	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_TLS_LDM21L	/;"	d
R_PARISC_TLS_LDMCALL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_TLS_LDMCALL	/;"	d
R_PARISC_TLS_LDO14R	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_TLS_LDO14R	/;"	d
R_PARISC_TLS_LDO21L	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_TLS_LDO21L	/;"	d
R_PARISC_TLS_LE14R	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_TLS_LE14R	/;"	d
R_PARISC_TLS_LE21L	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_TLS_LE21L	/;"	d
R_PARISC_TLS_TPREL32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_TLS_TPREL32	/;"	d
R_PARISC_TLS_TPREL64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_TLS_TPREL64	/;"	d
R_PARISC_TPREL14DR	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_TPREL14DR	/;"	d
R_PARISC_TPREL14R	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_TPREL14R	/;"	d
R_PARISC_TPREL14WR	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_TPREL14WR	/;"	d
R_PARISC_TPREL16DF	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_TPREL16DF	/;"	d
R_PARISC_TPREL16F	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_TPREL16F	/;"	d
R_PARISC_TPREL16WF	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_TPREL16WF	/;"	d
R_PARISC_TPREL21L	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_TPREL21L	/;"	d
R_PARISC_TPREL32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_TPREL32	/;"	d
R_PARISC_TPREL64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PARISC_TPREL64	/;"	d
R_PPC64_ADDR14	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_ADDR14	/;"	d
R_PPC64_ADDR14_BRNTAKEN	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_ADDR14_BRNTAKEN	/;"	d
R_PPC64_ADDR14_BRTAKEN	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_ADDR14_BRTAKEN	/;"	d
R_PPC64_ADDR16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_ADDR16	/;"	d
R_PPC64_ADDR16_DS	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_ADDR16_DS	/;"	d
R_PPC64_ADDR16_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_ADDR16_HA	/;"	d
R_PPC64_ADDR16_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_ADDR16_HI	/;"	d
R_PPC64_ADDR16_HIGH	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_ADDR16_HIGH	/;"	d
R_PPC64_ADDR16_HIGHA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_ADDR16_HIGHA	/;"	d
R_PPC64_ADDR16_HIGHER	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_ADDR16_HIGHER	/;"	d
R_PPC64_ADDR16_HIGHERA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_ADDR16_HIGHERA	/;"	d
R_PPC64_ADDR16_HIGHEST	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_ADDR16_HIGHEST	/;"	d
R_PPC64_ADDR16_HIGHESTA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_ADDR16_HIGHESTA	/;"	d
R_PPC64_ADDR16_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_ADDR16_LO	/;"	d
R_PPC64_ADDR16_LO_DS	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_ADDR16_LO_DS	/;"	d
R_PPC64_ADDR24	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_ADDR24	/;"	d
R_PPC64_ADDR30	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_ADDR30	/;"	d
R_PPC64_ADDR32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_ADDR32	/;"	d
R_PPC64_ADDR64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_ADDR64	/;"	d
R_PPC64_COPY	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_COPY	/;"	d
R_PPC64_DTPMOD64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_DTPMOD64	/;"	d
R_PPC64_DTPREL16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_DTPREL16	/;"	d
R_PPC64_DTPREL16_DS	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_DTPREL16_DS	/;"	d
R_PPC64_DTPREL16_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_DTPREL16_HA	/;"	d
R_PPC64_DTPREL16_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_DTPREL16_HI	/;"	d
R_PPC64_DTPREL16_HIGH	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_DTPREL16_HIGH	/;"	d
R_PPC64_DTPREL16_HIGHA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_DTPREL16_HIGHA	/;"	d
R_PPC64_DTPREL16_HIGHER	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_DTPREL16_HIGHER	/;"	d
R_PPC64_DTPREL16_HIGHERA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_DTPREL16_HIGHERA /;"	d
R_PPC64_DTPREL16_HIGHEST	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_DTPREL16_HIGHEST /;"	d
R_PPC64_DTPREL16_HIGHESTA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_DTPREL16_HIGHESTA /;"	d
R_PPC64_DTPREL16_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_DTPREL16_LO	/;"	d
R_PPC64_DTPREL16_LO_DS	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_DTPREL16_LO_DS	/;"	d
R_PPC64_DTPREL64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_DTPREL64	/;"	d
R_PPC64_GLOB_DAT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_GLOB_DAT	/;"	d
R_PPC64_GOT16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_GOT16	/;"	d
R_PPC64_GOT16_DS	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_GOT16_DS	/;"	d
R_PPC64_GOT16_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_GOT16_HA	/;"	d
R_PPC64_GOT16_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_GOT16_HI	/;"	d
R_PPC64_GOT16_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_GOT16_LO	/;"	d
R_PPC64_GOT16_LO_DS	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_GOT16_LO_DS	/;"	d
R_PPC64_GOT_DTPREL16_DS	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_GOT_DTPREL16_DS	/;"	d
R_PPC64_GOT_DTPREL16_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_GOT_DTPREL16_HA	/;"	d
R_PPC64_GOT_DTPREL16_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_GOT_DTPREL16_HI	/;"	d
R_PPC64_GOT_DTPREL16_LO_DS	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_GOT_DTPREL16_LO_DS /;"	d
R_PPC64_GOT_TLSGD16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_GOT_TLSGD16	/;"	d
R_PPC64_GOT_TLSGD16_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_GOT_TLSGD16_HA	/;"	d
R_PPC64_GOT_TLSGD16_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_GOT_TLSGD16_HI	/;"	d
R_PPC64_GOT_TLSGD16_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_GOT_TLSGD16_LO	/;"	d
R_PPC64_GOT_TLSLD16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_GOT_TLSLD16	/;"	d
R_PPC64_GOT_TLSLD16_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_GOT_TLSLD16_HA	/;"	d
R_PPC64_GOT_TLSLD16_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_GOT_TLSLD16_HI	/;"	d
R_PPC64_GOT_TLSLD16_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_GOT_TLSLD16_LO	/;"	d
R_PPC64_GOT_TPREL16_DS	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_GOT_TPREL16_DS	/;"	d
R_PPC64_GOT_TPREL16_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_GOT_TPREL16_HA	/;"	d
R_PPC64_GOT_TPREL16_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_GOT_TPREL16_HI	/;"	d
R_PPC64_GOT_TPREL16_LO_DS	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_GOT_TPREL16_LO_DS /;"	d
R_PPC64_IRELATIVE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_IRELATIVE	/;"	d
R_PPC64_JMP_IREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_JMP_IREL	/;"	d
R_PPC64_JMP_SLOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_JMP_SLOT	/;"	d
R_PPC64_NONE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_NONE	/;"	d
R_PPC64_PLT16_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_PLT16_HA	/;"	d
R_PPC64_PLT16_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_PLT16_HI	/;"	d
R_PPC64_PLT16_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_PLT16_LO	/;"	d
R_PPC64_PLT16_LO_DS	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_PLT16_LO_DS	/;"	d
R_PPC64_PLT32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_PLT32	/;"	d
R_PPC64_PLT64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_PLT64	/;"	d
R_PPC64_PLTGOT16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_PLTGOT16	/;"	d
R_PPC64_PLTGOT16_DS	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_PLTGOT16_DS	/;"	d
R_PPC64_PLTGOT16_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_PLTGOT16_HA	/;"	d
R_PPC64_PLTGOT16_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_PLTGOT16_HI	/;"	d
R_PPC64_PLTGOT16_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_PLTGOT16_LO	/;"	d
R_PPC64_PLTGOT16_LO_DS	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_PLTGOT16_LO_DS	/;"	d
R_PPC64_PLTREL32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_PLTREL32	/;"	d
R_PPC64_PLTREL64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_PLTREL64	/;"	d
R_PPC64_REL14	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_REL14	/;"	d
R_PPC64_REL14_BRNTAKEN	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_REL14_BRNTAKEN	/;"	d
R_PPC64_REL14_BRTAKEN	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_REL14_BRTAKEN	/;"	d
R_PPC64_REL16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_REL16	/;"	d
R_PPC64_REL16_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_REL16_HA	/;"	d
R_PPC64_REL16_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_REL16_HI	/;"	d
R_PPC64_REL16_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_REL16_LO	/;"	d
R_PPC64_REL24	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_REL24	/;"	d
R_PPC64_REL32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_REL32	/;"	d
R_PPC64_REL64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_REL64	/;"	d
R_PPC64_RELATIVE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_RELATIVE	/;"	d
R_PPC64_SECTOFF	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_SECTOFF	/;"	d
R_PPC64_SECTOFF_DS	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_SECTOFF_DS	/;"	d
R_PPC64_SECTOFF_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_SECTOFF_HA	/;"	d
R_PPC64_SECTOFF_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_SECTOFF_HI	/;"	d
R_PPC64_SECTOFF_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_SECTOFF_LO	/;"	d
R_PPC64_SECTOFF_LO_DS	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_SECTOFF_LO_DS	/;"	d
R_PPC64_TLS	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_TLS	/;"	d
R_PPC64_TLSGD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_TLSGD	/;"	d
R_PPC64_TLSLD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_TLSLD	/;"	d
R_PPC64_TOC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_TOC	/;"	d
R_PPC64_TOC16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_TOC16	/;"	d
R_PPC64_TOC16_DS	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_TOC16_DS	/;"	d
R_PPC64_TOC16_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_TOC16_HA	/;"	d
R_PPC64_TOC16_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_TOC16_HI	/;"	d
R_PPC64_TOC16_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_TOC16_LO	/;"	d
R_PPC64_TOC16_LO_DS	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_TOC16_LO_DS	/;"	d
R_PPC64_TOCSAVE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_TOCSAVE	/;"	d
R_PPC64_TPREL16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_TPREL16	/;"	d
R_PPC64_TPREL16_DS	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_TPREL16_DS	/;"	d
R_PPC64_TPREL16_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_TPREL16_HA	/;"	d
R_PPC64_TPREL16_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_TPREL16_HI	/;"	d
R_PPC64_TPREL16_HIGH	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_TPREL16_HIGH	/;"	d
R_PPC64_TPREL16_HIGHA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_TPREL16_HIGHA	/;"	d
R_PPC64_TPREL16_HIGHER	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_TPREL16_HIGHER	/;"	d
R_PPC64_TPREL16_HIGHERA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_TPREL16_HIGHERA	/;"	d
R_PPC64_TPREL16_HIGHEST	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_TPREL16_HIGHEST	/;"	d
R_PPC64_TPREL16_HIGHESTA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_TPREL16_HIGHESTA /;"	d
R_PPC64_TPREL16_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_TPREL16_LO	/;"	d
R_PPC64_TPREL16_LO_DS	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_TPREL16_LO_DS	/;"	d
R_PPC64_TPREL64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_TPREL64	/;"	d
R_PPC64_UADDR16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_UADDR16	/;"	d
R_PPC64_UADDR32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_UADDR32	/;"	d
R_PPC64_UADDR64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC64_UADDR64	/;"	d
R_PPC_ADDR14	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_ADDR14	/;"	d
R_PPC_ADDR14_BRNTAKEN	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_ADDR14_BRNTAKEN	/;"	d
R_PPC_ADDR14_BRTAKEN	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_ADDR14_BRTAKEN	/;"	d
R_PPC_ADDR16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_ADDR16	/;"	d
R_PPC_ADDR16_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_ADDR16_HA	/;"	d
R_PPC_ADDR16_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_ADDR16_HI	/;"	d
R_PPC_ADDR16_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_ADDR16_LO	/;"	d
R_PPC_ADDR24	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_ADDR24	/;"	d
R_PPC_ADDR32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_ADDR32	/;"	d
R_PPC_COPY	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_COPY	/;"	d
R_PPC_DIAB_RELSDA_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_DIAB_RELSDA_HA	/;"	d
R_PPC_DIAB_RELSDA_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_DIAB_RELSDA_HI	/;"	d
R_PPC_DIAB_RELSDA_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_DIAB_RELSDA_LO	/;"	d
R_PPC_DIAB_SDA21_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_DIAB_SDA21_HA	/;"	d
R_PPC_DIAB_SDA21_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_DIAB_SDA21_HI	/;"	d
R_PPC_DIAB_SDA21_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_DIAB_SDA21_LO	/;"	d
R_PPC_DTPMOD32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_DTPMOD32	/;"	d
R_PPC_DTPREL16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_DTPREL16	/;"	d
R_PPC_DTPREL16_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_DTPREL16_HA	/;"	d
R_PPC_DTPREL16_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_DTPREL16_HI	/;"	d
R_PPC_DTPREL16_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_DTPREL16_LO	/;"	d
R_PPC_DTPREL32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_DTPREL32	/;"	d
R_PPC_EMB_BIT_FLD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_EMB_BIT_FLD	/;"	d
R_PPC_EMB_MRKREF	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_EMB_MRKREF	/;"	d
R_PPC_EMB_NADDR16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_EMB_NADDR16	/;"	d
R_PPC_EMB_NADDR16_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_EMB_NADDR16_HA	/;"	d
R_PPC_EMB_NADDR16_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_EMB_NADDR16_HI	/;"	d
R_PPC_EMB_NADDR16_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_EMB_NADDR16_LO	/;"	d
R_PPC_EMB_NADDR32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_EMB_NADDR32	/;"	d
R_PPC_EMB_RELSDA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_EMB_RELSDA	/;"	d
R_PPC_EMB_RELSEC16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_EMB_RELSEC16	/;"	d
R_PPC_EMB_RELST_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_EMB_RELST_HA	/;"	d
R_PPC_EMB_RELST_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_EMB_RELST_HI	/;"	d
R_PPC_EMB_RELST_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_EMB_RELST_LO	/;"	d
R_PPC_EMB_SDA21	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_EMB_SDA21	/;"	d
R_PPC_EMB_SDA2I16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_EMB_SDA2I16	/;"	d
R_PPC_EMB_SDA2REL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_EMB_SDA2REL	/;"	d
R_PPC_EMB_SDAI16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_EMB_SDAI16	/;"	d
R_PPC_GLOB_DAT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_GLOB_DAT	/;"	d
R_PPC_GOT16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_GOT16	/;"	d
R_PPC_GOT16_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_GOT16_HA	/;"	d
R_PPC_GOT16_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_GOT16_HI	/;"	d
R_PPC_GOT16_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_GOT16_LO	/;"	d
R_PPC_GOT_DTPREL16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_GOT_DTPREL16	/;"	d
R_PPC_GOT_DTPREL16_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_GOT_DTPREL16_HA	/;"	d
R_PPC_GOT_DTPREL16_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_GOT_DTPREL16_HI	/;"	d
R_PPC_GOT_DTPREL16_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_GOT_DTPREL16_LO	/;"	d
R_PPC_GOT_TLSGD16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_GOT_TLSGD16	/;"	d
R_PPC_GOT_TLSGD16_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_GOT_TLSGD16_HA	/;"	d
R_PPC_GOT_TLSGD16_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_GOT_TLSGD16_HI	/;"	d
R_PPC_GOT_TLSGD16_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_GOT_TLSGD16_LO	/;"	d
R_PPC_GOT_TLSLD16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_GOT_TLSLD16	/;"	d
R_PPC_GOT_TLSLD16_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_GOT_TLSLD16_HA	/;"	d
R_PPC_GOT_TLSLD16_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_GOT_TLSLD16_HI	/;"	d
R_PPC_GOT_TLSLD16_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_GOT_TLSLD16_LO	/;"	d
R_PPC_GOT_TPREL16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_GOT_TPREL16	/;"	d
R_PPC_GOT_TPREL16_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_GOT_TPREL16_HA	/;"	d
R_PPC_GOT_TPREL16_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_GOT_TPREL16_HI	/;"	d
R_PPC_GOT_TPREL16_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_GOT_TPREL16_LO	/;"	d
R_PPC_IRELATIVE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_IRELATIVE	/;"	d
R_PPC_JMP_SLOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_JMP_SLOT	/;"	d
R_PPC_LOCAL24PC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_LOCAL24PC	/;"	d
R_PPC_NONE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_NONE	/;"	d
R_PPC_PLT16_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_PLT16_HA	/;"	d
R_PPC_PLT16_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_PLT16_HI	/;"	d
R_PPC_PLT16_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_PLT16_LO	/;"	d
R_PPC_PLT32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_PLT32	/;"	d
R_PPC_PLTREL24	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_PLTREL24	/;"	d
R_PPC_PLTREL32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_PLTREL32	/;"	d
R_PPC_REL14	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_REL14	/;"	d
R_PPC_REL14_BRNTAKEN	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_REL14_BRNTAKEN	/;"	d
R_PPC_REL14_BRTAKEN	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_REL14_BRTAKEN	/;"	d
R_PPC_REL16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_REL16	/;"	d
R_PPC_REL16_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_REL16_HA	/;"	d
R_PPC_REL16_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_REL16_HI	/;"	d
R_PPC_REL16_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_REL16_LO	/;"	d
R_PPC_REL24	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_REL24	/;"	d
R_PPC_REL32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_REL32	/;"	d
R_PPC_RELATIVE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_RELATIVE	/;"	d
R_PPC_SDAREL16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_SDAREL16	/;"	d
R_PPC_SECTOFF	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_SECTOFF	/;"	d
R_PPC_SECTOFF_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_SECTOFF_HA	/;"	d
R_PPC_SECTOFF_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_SECTOFF_HI	/;"	d
R_PPC_SECTOFF_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_SECTOFF_LO	/;"	d
R_PPC_TLS	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_TLS	/;"	d
R_PPC_TOC16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_TOC16	/;"	d
R_PPC_TPREL16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_TPREL16	/;"	d
R_PPC_TPREL16_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_TPREL16_HA	/;"	d
R_PPC_TPREL16_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_TPREL16_HI	/;"	d
R_PPC_TPREL16_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_TPREL16_LO	/;"	d
R_PPC_TPREL32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_TPREL32	/;"	d
R_PPC_UADDR16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_UADDR16	/;"	d
R_PPC_UADDR32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_PPC_UADDR32	/;"	d
R_SH_ALIGN	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_ALIGN	/;"	d
R_SH_CODE	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_CODE	/;"	d
R_SH_COPY	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_COPY	/;"	d
R_SH_COUNT	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_COUNT	/;"	d
R_SH_DATA	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_DATA	/;"	d
R_SH_DIR32	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_DIR32	/;"	d
R_SH_DIR8BP	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_DIR8BP	/;"	d
R_SH_DIR8L	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_DIR8L	/;"	d
R_SH_DIR8W	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_DIR8W	/;"	d
R_SH_DIR8WPL	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_DIR8WPL	/;"	d
R_SH_DIR8WPN	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_DIR8WPN	/;"	d
R_SH_DIR8WPZ	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_DIR8WPZ	/;"	d
R_SH_GLOB_DAT	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_GLOB_DAT	/;"	d
R_SH_GNU_VTENTRY	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_GNU_VTENTRY	/;"	d
R_SH_GNU_VTINHERIT	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_GNU_VTINHERIT	/;"	d
R_SH_GOT32	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_GOT32	/;"	d
R_SH_GOTOFF	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_GOTOFF	/;"	d
R_SH_GOTPC	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_GOTPC	/;"	d
R_SH_IND12W	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_IND12W	/;"	d
R_SH_JMP_SLOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_JMP_SLOT	/;"	d
R_SH_LABEL	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_LABEL	/;"	d
R_SH_NONE	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_NONE	/;"	d
R_SH_NUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_NUM	/;"	d
R_SH_PLT32	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_PLT32	/;"	d
R_SH_REL32	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_REL32	/;"	d
R_SH_RELATIVE	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_RELATIVE	/;"	d
R_SH_SWITCH16	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_SWITCH16	/;"	d
R_SH_SWITCH32	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_SWITCH32	/;"	d
R_SH_SWITCH8	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_SWITCH8	/;"	d
R_SH_TLS_DTPMOD32	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_TLS_DTPMOD32	/;"	d
R_SH_TLS_DTPOFF32	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_TLS_DTPOFF32	/;"	d
R_SH_TLS_GD_32	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_TLS_GD_32	/;"	d
R_SH_TLS_IE_32	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_TLS_IE_32	/;"	d
R_SH_TLS_LDO_32	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_TLS_LDO_32	/;"	d
R_SH_TLS_LD_32	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_TLS_LD_32	/;"	d
R_SH_TLS_LE_32	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_TLS_LE_32	/;"	d
R_SH_TLS_TPOFF32	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_TLS_TPOFF32	/;"	d
R_SH_USES	deps/srccache/patchelf-0.9/src/elf.h	/^#define	R_SH_USES	/;"	d
R_SPARC_10	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_10	/;"	d
R_SPARC_11	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_11	/;"	d
R_SPARC_13	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_13	/;"	d
R_SPARC_16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_16	/;"	d
R_SPARC_22	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_22	/;"	d
R_SPARC_32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_32	/;"	d
R_SPARC_5	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_5	/;"	d
R_SPARC_6	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_6	/;"	d
R_SPARC_64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_64	/;"	d
R_SPARC_7	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_7	/;"	d
R_SPARC_8	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_8	/;"	d
R_SPARC_COPY	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_COPY	/;"	d
R_SPARC_DISP16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_DISP16	/;"	d
R_SPARC_DISP32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_DISP32	/;"	d
R_SPARC_DISP64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_DISP64	/;"	d
R_SPARC_DISP8	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_DISP8	/;"	d
R_SPARC_GLOB_DAT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_GLOB_DAT	/;"	d
R_SPARC_GLOB_JMP	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_GLOB_JMP	/;"	d
R_SPARC_GNU_VTENTRY	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_GNU_VTENTRY	/;"	d
R_SPARC_GNU_VTINHERIT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_GNU_VTINHERIT	/;"	d
R_SPARC_GOT10	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_GOT10	/;"	d
R_SPARC_GOT13	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_GOT13	/;"	d
R_SPARC_GOT22	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_GOT22	/;"	d
R_SPARC_GOTDATA_HIX22	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_GOTDATA_HIX22	/;"	d
R_SPARC_GOTDATA_LOX10	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_GOTDATA_LOX10	/;"	d
R_SPARC_GOTDATA_OP	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_GOTDATA_OP	/;"	d
R_SPARC_GOTDATA_OP_HIX22	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_GOTDATA_OP_HIX22	/;"	d
R_SPARC_GOTDATA_OP_LOX10	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_GOTDATA_OP_LOX10	/;"	d
R_SPARC_H34	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_H34	/;"	d
R_SPARC_H44	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_H44	/;"	d
R_SPARC_HH22	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_HH22	/;"	d
R_SPARC_HI22	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_HI22	/;"	d
R_SPARC_HIPLT22	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_HIPLT22	/;"	d
R_SPARC_HIX22	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_HIX22	/;"	d
R_SPARC_HM10	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_HM10	/;"	d
R_SPARC_IRELATIVE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_IRELATIVE	/;"	d
R_SPARC_JMP_IREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_JMP_IREL	/;"	d
R_SPARC_JMP_SLOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_JMP_SLOT	/;"	d
R_SPARC_L44	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_L44	/;"	d
R_SPARC_LM22	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_LM22	/;"	d
R_SPARC_LO10	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_LO10	/;"	d
R_SPARC_LOPLT10	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_LOPLT10	/;"	d
R_SPARC_LOX10	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_LOX10	/;"	d
R_SPARC_M44	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_M44	/;"	d
R_SPARC_NONE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_NONE	/;"	d
R_SPARC_NUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_NUM	/;"	d
R_SPARC_OLO10	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_OLO10	/;"	d
R_SPARC_PC10	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_PC10	/;"	d
R_SPARC_PC22	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_PC22	/;"	d
R_SPARC_PCPLT10	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_PCPLT10	/;"	d
R_SPARC_PCPLT22	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_PCPLT22	/;"	d
R_SPARC_PCPLT32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_PCPLT32	/;"	d
R_SPARC_PC_HH22	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_PC_HH22	/;"	d
R_SPARC_PC_HM10	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_PC_HM10	/;"	d
R_SPARC_PC_LM22	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_PC_LM22	/;"	d
R_SPARC_PLT32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_PLT32	/;"	d
R_SPARC_PLT64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_PLT64	/;"	d
R_SPARC_REGISTER	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_REGISTER	/;"	d
R_SPARC_RELATIVE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_RELATIVE	/;"	d
R_SPARC_REV32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_REV32	/;"	d
R_SPARC_SIZE32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_SIZE32	/;"	d
R_SPARC_SIZE64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_SIZE64	/;"	d
R_SPARC_TLS_DTPMOD32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_TLS_DTPMOD32	/;"	d
R_SPARC_TLS_DTPMOD64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_TLS_DTPMOD64	/;"	d
R_SPARC_TLS_DTPOFF32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_TLS_DTPOFF32	/;"	d
R_SPARC_TLS_DTPOFF64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_TLS_DTPOFF64	/;"	d
R_SPARC_TLS_GD_ADD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_TLS_GD_ADD	/;"	d
R_SPARC_TLS_GD_CALL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_TLS_GD_CALL	/;"	d
R_SPARC_TLS_GD_HI22	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_TLS_GD_HI22	/;"	d
R_SPARC_TLS_GD_LO10	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_TLS_GD_LO10	/;"	d
R_SPARC_TLS_IE_ADD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_TLS_IE_ADD	/;"	d
R_SPARC_TLS_IE_HI22	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_TLS_IE_HI22	/;"	d
R_SPARC_TLS_IE_LD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_TLS_IE_LD	/;"	d
R_SPARC_TLS_IE_LDX	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_TLS_IE_LDX	/;"	d
R_SPARC_TLS_IE_LO10	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_TLS_IE_LO10	/;"	d
R_SPARC_TLS_LDM_ADD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_TLS_LDM_ADD	/;"	d
R_SPARC_TLS_LDM_CALL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_TLS_LDM_CALL	/;"	d
R_SPARC_TLS_LDM_HI22	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_TLS_LDM_HI22	/;"	d
R_SPARC_TLS_LDM_LO10	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_TLS_LDM_LO10	/;"	d
R_SPARC_TLS_LDO_ADD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_TLS_LDO_ADD	/;"	d
R_SPARC_TLS_LDO_HIX22	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_TLS_LDO_HIX22	/;"	d
R_SPARC_TLS_LDO_LOX10	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_TLS_LDO_LOX10	/;"	d
R_SPARC_TLS_LE_HIX22	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_TLS_LE_HIX22	/;"	d
R_SPARC_TLS_LE_LOX10	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_TLS_LE_LOX10	/;"	d
R_SPARC_TLS_TPOFF32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_TLS_TPOFF32	/;"	d
R_SPARC_TLS_TPOFF64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_TLS_TPOFF64	/;"	d
R_SPARC_UA16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_UA16	/;"	d
R_SPARC_UA32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_UA32	/;"	d
R_SPARC_UA64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_UA64	/;"	d
R_SPARC_WDISP10	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_WDISP10	/;"	d
R_SPARC_WDISP16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_WDISP16	/;"	d
R_SPARC_WDISP19	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_WDISP19	/;"	d
R_SPARC_WDISP22	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_WDISP22	/;"	d
R_SPARC_WDISP30	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_WDISP30	/;"	d
R_SPARC_WPLT30	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_SPARC_WPLT30	/;"	d
R_TILEGX_16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_16	/;"	d
R_TILEGX_16_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_16_PCREL	/;"	d
R_TILEGX_32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_32	/;"	d
R_TILEGX_32_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_32_PCREL	/;"	d
R_TILEGX_64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_64	/;"	d
R_TILEGX_64_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_64_PCREL	/;"	d
R_TILEGX_8	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_8	/;"	d
R_TILEGX_8_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_8_PCREL	/;"	d
R_TILEGX_BROFF_X1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_BROFF_X1	/;"	d
R_TILEGX_COPY	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_COPY	/;"	d
R_TILEGX_DEST_IMM8_X1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_DEST_IMM8_X1	/;"	d
R_TILEGX_GLOB_DAT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_GLOB_DAT	/;"	d
R_TILEGX_GNU_VTENTRY	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_GNU_VTENTRY	/;"	d
R_TILEGX_GNU_VTINHERIT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_GNU_VTINHERIT	/;"	d
R_TILEGX_HW0	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_HW0	/;"	d
R_TILEGX_HW0_LAST	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_HW0_LAST	/;"	d
R_TILEGX_HW1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_HW1	/;"	d
R_TILEGX_HW1_LAST	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_HW1_LAST	/;"	d
R_TILEGX_HW2	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_HW2	/;"	d
R_TILEGX_HW2_LAST	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_HW2_LAST	/;"	d
R_TILEGX_HW3	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_HW3	/;"	d
R_TILEGX_IMM16_X0_HW0	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X0_HW0	/;"	d
R_TILEGX_IMM16_X0_HW0_GOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X0_HW0_GOT /;"	d
R_TILEGX_IMM16_X0_HW0_LAST	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X0_HW0_LAST /;"	d
R_TILEGX_IMM16_X0_HW0_LAST_GOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X0_HW0_LAST_GOT /;"	d
R_TILEGX_IMM16_X0_HW0_LAST_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X0_HW0_LAST_PCREL /;"	d
R_TILEGX_IMM16_X0_HW0_LAST_PLT_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X0_HW0_LAST_PLT_PCREL /;"	d
R_TILEGX_IMM16_X0_HW0_LAST_TLS_GD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X0_HW0_LAST_TLS_GD /;"	d
R_TILEGX_IMM16_X0_HW0_LAST_TLS_IE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X0_HW0_LAST_TLS_IE /;"	d
R_TILEGX_IMM16_X0_HW0_LAST_TLS_LE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X0_HW0_LAST_TLS_LE /;"	d
R_TILEGX_IMM16_X0_HW0_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X0_HW0_PCREL /;"	d
R_TILEGX_IMM16_X0_HW0_PLT_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X0_HW0_PLT_PCREL /;"	d
R_TILEGX_IMM16_X0_HW0_TLS_GD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X0_HW0_TLS_GD /;"	d
R_TILEGX_IMM16_X0_HW0_TLS_IE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X0_HW0_TLS_IE /;"	d
R_TILEGX_IMM16_X0_HW0_TLS_LE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X0_HW0_TLS_LE /;"	d
R_TILEGX_IMM16_X0_HW1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X0_HW1	/;"	d
R_TILEGX_IMM16_X0_HW1_LAST	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X0_HW1_LAST /;"	d
R_TILEGX_IMM16_X0_HW1_LAST_GOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X0_HW1_LAST_GOT /;"	d
R_TILEGX_IMM16_X0_HW1_LAST_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X0_HW1_LAST_PCREL /;"	d
R_TILEGX_IMM16_X0_HW1_LAST_PLT_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X0_HW1_LAST_PLT_PCREL /;"	d
R_TILEGX_IMM16_X0_HW1_LAST_TLS_GD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X0_HW1_LAST_TLS_GD /;"	d
R_TILEGX_IMM16_X0_HW1_LAST_TLS_IE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X0_HW1_LAST_TLS_IE /;"	d
R_TILEGX_IMM16_X0_HW1_LAST_TLS_LE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X0_HW1_LAST_TLS_LE /;"	d
R_TILEGX_IMM16_X0_HW1_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X0_HW1_PCREL /;"	d
R_TILEGX_IMM16_X0_HW1_PLT_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X0_HW1_PLT_PCREL /;"	d
R_TILEGX_IMM16_X0_HW2	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X0_HW2	/;"	d
R_TILEGX_IMM16_X0_HW2_LAST	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X0_HW2_LAST /;"	d
R_TILEGX_IMM16_X0_HW2_LAST_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X0_HW2_LAST_PCREL /;"	d
R_TILEGX_IMM16_X0_HW2_LAST_PLT_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X0_HW2_LAST_PLT_PCREL /;"	d
R_TILEGX_IMM16_X0_HW2_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X0_HW2_PCREL /;"	d
R_TILEGX_IMM16_X0_HW2_PLT_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X0_HW2_PLT_PCREL /;"	d
R_TILEGX_IMM16_X0_HW3	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X0_HW3	/;"	d
R_TILEGX_IMM16_X0_HW3_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X0_HW3_PCREL /;"	d
R_TILEGX_IMM16_X0_HW3_PLT_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X0_HW3_PLT_PCREL /;"	d
R_TILEGX_IMM16_X1_HW0	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X1_HW0	/;"	d
R_TILEGX_IMM16_X1_HW0_GOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X1_HW0_GOT /;"	d
R_TILEGX_IMM16_X1_HW0_LAST	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X1_HW0_LAST /;"	d
R_TILEGX_IMM16_X1_HW0_LAST_GOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X1_HW0_LAST_GOT /;"	d
R_TILEGX_IMM16_X1_HW0_LAST_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X1_HW0_LAST_PCREL /;"	d
R_TILEGX_IMM16_X1_HW0_LAST_PLT_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X1_HW0_LAST_PLT_PCREL /;"	d
R_TILEGX_IMM16_X1_HW0_LAST_TLS_GD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X1_HW0_LAST_TLS_GD /;"	d
R_TILEGX_IMM16_X1_HW0_LAST_TLS_IE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X1_HW0_LAST_TLS_IE /;"	d
R_TILEGX_IMM16_X1_HW0_LAST_TLS_LE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X1_HW0_LAST_TLS_LE /;"	d
R_TILEGX_IMM16_X1_HW0_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X1_HW0_PCREL /;"	d
R_TILEGX_IMM16_X1_HW0_PLT_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X1_HW0_PLT_PCREL /;"	d
R_TILEGX_IMM16_X1_HW0_TLS_GD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X1_HW0_TLS_GD /;"	d
R_TILEGX_IMM16_X1_HW0_TLS_IE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X1_HW0_TLS_IE /;"	d
R_TILEGX_IMM16_X1_HW0_TLS_LE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X1_HW0_TLS_LE /;"	d
R_TILEGX_IMM16_X1_HW1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X1_HW1	/;"	d
R_TILEGX_IMM16_X1_HW1_LAST	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X1_HW1_LAST /;"	d
R_TILEGX_IMM16_X1_HW1_LAST_GOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X1_HW1_LAST_GOT /;"	d
R_TILEGX_IMM16_X1_HW1_LAST_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X1_HW1_LAST_PCREL /;"	d
R_TILEGX_IMM16_X1_HW1_LAST_PLT_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X1_HW1_LAST_PLT_PCREL /;"	d
R_TILEGX_IMM16_X1_HW1_LAST_TLS_GD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X1_HW1_LAST_TLS_GD /;"	d
R_TILEGX_IMM16_X1_HW1_LAST_TLS_IE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X1_HW1_LAST_TLS_IE /;"	d
R_TILEGX_IMM16_X1_HW1_LAST_TLS_LE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X1_HW1_LAST_TLS_LE /;"	d
R_TILEGX_IMM16_X1_HW1_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X1_HW1_PCREL /;"	d
R_TILEGX_IMM16_X1_HW1_PLT_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X1_HW1_PLT_PCREL /;"	d
R_TILEGX_IMM16_X1_HW2	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X1_HW2	/;"	d
R_TILEGX_IMM16_X1_HW2_LAST	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X1_HW2_LAST /;"	d
R_TILEGX_IMM16_X1_HW2_LAST_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X1_HW2_LAST_PCREL /;"	d
R_TILEGX_IMM16_X1_HW2_LAST_PLT_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X1_HW2_LAST_PLT_PCREL /;"	d
R_TILEGX_IMM16_X1_HW2_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X1_HW2_PCREL /;"	d
R_TILEGX_IMM16_X1_HW2_PLT_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X1_HW2_PLT_PCREL /;"	d
R_TILEGX_IMM16_X1_HW3	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X1_HW3	/;"	d
R_TILEGX_IMM16_X1_HW3_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X1_HW3_PCREL /;"	d
R_TILEGX_IMM16_X1_HW3_PLT_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM16_X1_HW3_PLT_PCREL /;"	d
R_TILEGX_IMM8_X0	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM8_X0	/;"	d
R_TILEGX_IMM8_X0_TLS_ADD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM8_X0_TLS_ADD /;"	d
R_TILEGX_IMM8_X0_TLS_GD_ADD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM8_X0_TLS_GD_ADD /;"	d
R_TILEGX_IMM8_X1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM8_X1	/;"	d
R_TILEGX_IMM8_X1_TLS_ADD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM8_X1_TLS_ADD /;"	d
R_TILEGX_IMM8_X1_TLS_GD_ADD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM8_X1_TLS_GD_ADD /;"	d
R_TILEGX_IMM8_Y0	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM8_Y0	/;"	d
R_TILEGX_IMM8_Y0_TLS_ADD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM8_Y0_TLS_ADD /;"	d
R_TILEGX_IMM8_Y0_TLS_GD_ADD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM8_Y0_TLS_GD_ADD /;"	d
R_TILEGX_IMM8_Y1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM8_Y1	/;"	d
R_TILEGX_IMM8_Y1_TLS_ADD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM8_Y1_TLS_ADD /;"	d
R_TILEGX_IMM8_Y1_TLS_GD_ADD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_IMM8_Y1_TLS_GD_ADD /;"	d
R_TILEGX_JMP_SLOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_JMP_SLOT	/;"	d
R_TILEGX_JUMPOFF_X1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_JUMPOFF_X1	/;"	d
R_TILEGX_JUMPOFF_X1_PLT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_JUMPOFF_X1_PLT	/;"	d
R_TILEGX_MF_IMM14_X1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_MF_IMM14_X1	/;"	d
R_TILEGX_MMEND_X0	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_MMEND_X0	/;"	d
R_TILEGX_MMSTART_X0	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_MMSTART_X0	/;"	d
R_TILEGX_MT_IMM14_X1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_MT_IMM14_X1	/;"	d
R_TILEGX_NONE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_NONE	/;"	d
R_TILEGX_NUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_NUM	/;"	d
R_TILEGX_RELATIVE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_RELATIVE	/;"	d
R_TILEGX_SHAMT_X0	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_SHAMT_X0	/;"	d
R_TILEGX_SHAMT_X1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_SHAMT_X1	/;"	d
R_TILEGX_SHAMT_Y0	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_SHAMT_Y0	/;"	d
R_TILEGX_SHAMT_Y1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_SHAMT_Y1	/;"	d
R_TILEGX_TLS_DTPMOD32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_TLS_DTPMOD32	/;"	d
R_TILEGX_TLS_DTPMOD64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_TLS_DTPMOD64	/;"	d
R_TILEGX_TLS_DTPOFF32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_TLS_DTPOFF32	/;"	d
R_TILEGX_TLS_DTPOFF64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_TLS_DTPOFF64	/;"	d
R_TILEGX_TLS_GD_CALL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_TLS_GD_CALL	/;"	d
R_TILEGX_TLS_IE_LOAD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_TLS_IE_LOAD	/;"	d
R_TILEGX_TLS_TPOFF32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_TLS_TPOFF32	/;"	d
R_TILEGX_TLS_TPOFF64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEGX_TLS_TPOFF64	/;"	d
R_TILEPRO_16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_16	/;"	d
R_TILEPRO_16_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_16_PCREL	/;"	d
R_TILEPRO_32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_32	/;"	d
R_TILEPRO_32_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_32_PCREL	/;"	d
R_TILEPRO_8	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_8	/;"	d
R_TILEPRO_8_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_8_PCREL	/;"	d
R_TILEPRO_BROFF_X1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_BROFF_X1	/;"	d
R_TILEPRO_COPY	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_COPY	/;"	d
R_TILEPRO_DEST_IMM8_X1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_DEST_IMM8_X1	/;"	d
R_TILEPRO_GLOB_DAT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_GLOB_DAT	/;"	d
R_TILEPRO_GNU_VTENTRY	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_GNU_VTENTRY	/;"	d
R_TILEPRO_GNU_VTINHERIT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_GNU_VTINHERIT	/;"	d
R_TILEPRO_HA16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_HA16	/;"	d
R_TILEPRO_HI16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_HI16	/;"	d
R_TILEPRO_IMM16_X0	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X0	/;"	d
R_TILEPRO_IMM16_X0_GOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X0_GOT	/;"	d
R_TILEPRO_IMM16_X0_GOT_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X0_GOT_HA /;"	d
R_TILEPRO_IMM16_X0_GOT_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X0_GOT_HI /;"	d
R_TILEPRO_IMM16_X0_GOT_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X0_GOT_LO /;"	d
R_TILEPRO_IMM16_X0_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X0_HA	/;"	d
R_TILEPRO_IMM16_X0_HA_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X0_HA_PCREL /;"	d
R_TILEPRO_IMM16_X0_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X0_HI	/;"	d
R_TILEPRO_IMM16_X0_HI_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X0_HI_PCREL /;"	d
R_TILEPRO_IMM16_X0_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X0_LO	/;"	d
R_TILEPRO_IMM16_X0_LO_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X0_LO_PCREL /;"	d
R_TILEPRO_IMM16_X0_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X0_PCREL /;"	d
R_TILEPRO_IMM16_X0_TLS_GD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X0_TLS_GD /;"	d
R_TILEPRO_IMM16_X0_TLS_GD_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X0_TLS_GD_HA /;"	d
R_TILEPRO_IMM16_X0_TLS_GD_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X0_TLS_GD_HI /;"	d
R_TILEPRO_IMM16_X0_TLS_GD_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X0_TLS_GD_LO /;"	d
R_TILEPRO_IMM16_X0_TLS_IE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X0_TLS_IE /;"	d
R_TILEPRO_IMM16_X0_TLS_IE_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X0_TLS_IE_HA /;"	d
R_TILEPRO_IMM16_X0_TLS_IE_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X0_TLS_IE_HI /;"	d
R_TILEPRO_IMM16_X0_TLS_IE_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X0_TLS_IE_LO /;"	d
R_TILEPRO_IMM16_X0_TLS_LE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X0_TLS_LE /;"	d
R_TILEPRO_IMM16_X0_TLS_LE_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X0_TLS_LE_HA /;"	d
R_TILEPRO_IMM16_X0_TLS_LE_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X0_TLS_LE_HI /;"	d
R_TILEPRO_IMM16_X0_TLS_LE_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X0_TLS_LE_LO /;"	d
R_TILEPRO_IMM16_X1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X1	/;"	d
R_TILEPRO_IMM16_X1_GOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X1_GOT	/;"	d
R_TILEPRO_IMM16_X1_GOT_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X1_GOT_HA /;"	d
R_TILEPRO_IMM16_X1_GOT_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X1_GOT_HI /;"	d
R_TILEPRO_IMM16_X1_GOT_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X1_GOT_LO /;"	d
R_TILEPRO_IMM16_X1_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X1_HA	/;"	d
R_TILEPRO_IMM16_X1_HA_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X1_HA_PCREL /;"	d
R_TILEPRO_IMM16_X1_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X1_HI	/;"	d
R_TILEPRO_IMM16_X1_HI_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X1_HI_PCREL /;"	d
R_TILEPRO_IMM16_X1_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X1_LO	/;"	d
R_TILEPRO_IMM16_X1_LO_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X1_LO_PCREL /;"	d
R_TILEPRO_IMM16_X1_PCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X1_PCREL /;"	d
R_TILEPRO_IMM16_X1_TLS_GD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X1_TLS_GD /;"	d
R_TILEPRO_IMM16_X1_TLS_GD_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X1_TLS_GD_HA /;"	d
R_TILEPRO_IMM16_X1_TLS_GD_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X1_TLS_GD_HI /;"	d
R_TILEPRO_IMM16_X1_TLS_GD_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X1_TLS_GD_LO /;"	d
R_TILEPRO_IMM16_X1_TLS_IE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X1_TLS_IE /;"	d
R_TILEPRO_IMM16_X1_TLS_IE_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X1_TLS_IE_HA /;"	d
R_TILEPRO_IMM16_X1_TLS_IE_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X1_TLS_IE_HI /;"	d
R_TILEPRO_IMM16_X1_TLS_IE_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X1_TLS_IE_LO /;"	d
R_TILEPRO_IMM16_X1_TLS_LE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X1_TLS_LE /;"	d
R_TILEPRO_IMM16_X1_TLS_LE_HA	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X1_TLS_LE_HA /;"	d
R_TILEPRO_IMM16_X1_TLS_LE_HI	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X1_TLS_LE_HI /;"	d
R_TILEPRO_IMM16_X1_TLS_LE_LO	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM16_X1_TLS_LE_LO /;"	d
R_TILEPRO_IMM8_X0	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM8_X0	/;"	d
R_TILEPRO_IMM8_X0_TLS_GD_ADD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM8_X0_TLS_GD_ADD /;"	d
R_TILEPRO_IMM8_X1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM8_X1	/;"	d
R_TILEPRO_IMM8_X1_TLS_GD_ADD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM8_X1_TLS_GD_ADD /;"	d
R_TILEPRO_IMM8_Y0	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM8_Y0	/;"	d
R_TILEPRO_IMM8_Y0_TLS_GD_ADD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM8_Y0_TLS_GD_ADD /;"	d
R_TILEPRO_IMM8_Y1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM8_Y1	/;"	d
R_TILEPRO_IMM8_Y1_TLS_GD_ADD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_IMM8_Y1_TLS_GD_ADD /;"	d
R_TILEPRO_JMP_SLOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_JMP_SLOT	/;"	d
R_TILEPRO_JOFFLONG_X1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_JOFFLONG_X1	/;"	d
R_TILEPRO_JOFFLONG_X1_PLT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_JOFFLONG_X1_PLT /;"	d
R_TILEPRO_LO16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_LO16	/;"	d
R_TILEPRO_MF_IMM15_X1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_MF_IMM15_X1	/;"	d
R_TILEPRO_MMEND_X0	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_MMEND_X0	/;"	d
R_TILEPRO_MMEND_X1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_MMEND_X1	/;"	d
R_TILEPRO_MMSTART_X0	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_MMSTART_X0	/;"	d
R_TILEPRO_MMSTART_X1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_MMSTART_X1	/;"	d
R_TILEPRO_MT_IMM15_X1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_MT_IMM15_X1	/;"	d
R_TILEPRO_NONE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_NONE	/;"	d
R_TILEPRO_NUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_NUM	/;"	d
R_TILEPRO_RELATIVE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_RELATIVE	/;"	d
R_TILEPRO_SHAMT_X0	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_SHAMT_X0	/;"	d
R_TILEPRO_SHAMT_X1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_SHAMT_X1	/;"	d
R_TILEPRO_SHAMT_Y0	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_SHAMT_Y0	/;"	d
R_TILEPRO_SHAMT_Y1	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_SHAMT_Y1	/;"	d
R_TILEPRO_TLS_DTPMOD32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_TLS_DTPMOD32	/;"	d
R_TILEPRO_TLS_DTPOFF32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_TLS_DTPOFF32	/;"	d
R_TILEPRO_TLS_GD_CALL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_TLS_GD_CALL	/;"	d
R_TILEPRO_TLS_IE_LOAD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_TLS_IE_LOAD	/;"	d
R_TILEPRO_TLS_TPOFF32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_TILEPRO_TLS_TPOFF32	/;"	d
R_X86_64_16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_16	/;"	d
R_X86_64_32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_32	/;"	d
R_X86_64_32S	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_32S	/;"	d
R_X86_64_64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_64	/;"	d
R_X86_64_8	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_8	/;"	d
R_X86_64_COPY	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_COPY	/;"	d
R_X86_64_DTPMOD64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_DTPMOD64	/;"	d
R_X86_64_DTPOFF32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_DTPOFF32	/;"	d
R_X86_64_DTPOFF64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_DTPOFF64	/;"	d
R_X86_64_GLOB_DAT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_GLOB_DAT	/;"	d
R_X86_64_GOT32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_GOT32	/;"	d
R_X86_64_GOT64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_GOT64	/;"	d
R_X86_64_GOTOFF64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_GOTOFF64	/;"	d
R_X86_64_GOTPC32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_GOTPC32	/;"	d
R_X86_64_GOTPC32_TLSDESC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_GOTPC32_TLSDESC /;"	d
R_X86_64_GOTPC64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_GOTPC64	/;"	d
R_X86_64_GOTPCREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_GOTPCREL	/;"	d
R_X86_64_GOTPCREL64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_GOTPCREL64	/;"	d
R_X86_64_GOTPLT64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_GOTPLT64	/;"	d
R_X86_64_GOTTPOFF	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_GOTTPOFF	/;"	d
R_X86_64_IRELATIVE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_IRELATIVE	/;"	d
R_X86_64_JUMP_SLOT	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_JUMP_SLOT	/;"	d
R_X86_64_NONE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_NONE	/;"	d
R_X86_64_NUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_NUM	/;"	d
R_X86_64_PC16	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_PC16	/;"	d
R_X86_64_PC32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_PC32	/;"	d
R_X86_64_PC64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_PC64	/;"	d
R_X86_64_PC8	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_PC8	/;"	d
R_X86_64_PLT32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_PLT32	/;"	d
R_X86_64_PLTOFF64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_PLTOFF64	/;"	d
R_X86_64_RELATIVE	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_RELATIVE	/;"	d
R_X86_64_RELATIVE64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_RELATIVE64	/;"	d
R_X86_64_SIZE32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_SIZE32	/;"	d
R_X86_64_SIZE64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_SIZE64	/;"	d
R_X86_64_TLSDESC	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_TLSDESC /;"	d
R_X86_64_TLSDESC_CALL	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_TLSDESC_CALL /;"	d
R_X86_64_TLSGD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_TLSGD	/;"	d
R_X86_64_TLSLD	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_TLSLD	/;"	d
R_X86_64_TPOFF32	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_TPOFF32	/;"	d
R_X86_64_TPOFF64	deps/srccache/patchelf-0.9/src/elf.h	/^#define R_X86_64_TPOFF64	/;"	d
RadioMenu	stdlib/REPL/docs/src/index.md	/^### RadioMenu$/;"	S
RadioMenu	stdlib/REPL/src/TerminalMenus/RadioMenu.jl	/^function RadioMenu(options::Array{String,1}; pagesize::Int=10)$/;"	f
RadioMenu	stdlib/REPL/src/TerminalMenus/RadioMenu.jl	/^mutable struct RadioMenu <: AbstractMenu$/;"	f
Random	HISTORY.md	/^#### Random$/;"	t
Random	stdlib/Random/src/Random.jl	/^module Random$/;"	f
Random Numbers	stdlib/Random/docs/src/index.md	/^# Random Numbers$/;"	c
Random generation functions	stdlib/Random/docs/src/index.md	/^## Random generation functions$/;"	s
Random numbers module	stdlib/Random/docs/src/index.md	/^## Random numbers module$/;"	s
Random.rand!	stdlib/SharedArrays/src/SharedArrays.jl	/^function Random.rand!(S::SharedArray{T}) where T$/;"	f
Random.randn!	stdlib/SharedArrays/src/SharedArrays.jl	/^function Random.randn!(S::SharedArray)$/;"	f
RandomDevice	stdlib/Random/src/RNGs.jl	/^        RandomDevice() = new(Vector{UInt128}(undef, 1))$/;"	f
RandomDevice	stdlib/Random/src/RNGs.jl	/^        RandomDevice(; unlimited::Bool=true) =$/;"	f
RandomDevice	stdlib/Random/src/RNGs.jl	/^    struct RandomDevice <: AbstractRNG$/;"	f
RandomDevice	stdlib/Random/src/RNGs.jl	/^RandomDevice(::Nothing) = RandomDevice()$/;"	f
RandomStruct23964	stdlib/Random/test/runtests.jl	/^struct RandomStruct23964 end$/;"	f
RangeGenerator	stdlib/Random/src/Random.jl	/^RangeGenerator(x) = Sampler(default_rng(), x)$/;"	f
RangeIndex	base/array.jl	/^const RangeIndex = Union{Int, AbstractRange{Int}, AbstractUnitRange{Int}}$/;"	v
RangeStepIrregular	base/traits.jl	/^struct RangeStepIrregular <: RangeStepStyle end # range with rounding error$/;"	f
RangeStepRegular	base/traits.jl	/^struct RangeStepRegular   <: RangeStepStyle end # range with regular step$/;"	f
RangeStepStyle	base/range.jl	/^RangeStepStyle(::Type{<:AbstractRange{<:Integer}}) = RangeStepRegular()$/;"	f
RangeStepStyle	base/range.jl	/^RangeStepStyle(::Type{<:AbstractRange}) = RangeStepIrregular()$/;"	f
RangeStepStyle	base/traits.jl	/^RangeStepStyle(instance) = RangeStepStyle(typeof(instance))$/;"	f
RangeStepStyle	base/traits.jl	/^abstract type RangeStepStyle end$/;"	f
RangesTest	stdlib/Dates/test/ranges.jl	/^module RangesTest$/;"	f
RankDeficientException	stdlib/LinearAlgebra/src/exceptions.jl	/^struct RankDeficientException <: Exception$/;"	f
Raspberry Pi 1 / Raspberry Pi Zero	doc/build/arm.md	/^### Raspberry Pi 1 \/ Raspberry Pi Zero$/;"	S
Raspberry Pi 2	doc/build/arm.md	/^### Raspberry Pi 2$/;"	S
Rational	base/irrationals.jl	/^@pure function Rational{T}(x::AbstractIrrational) where T<:Integer$/;"	f
Rational	base/mpfr.jl	/^Rational(x::BigFloat) = convert(Rational{BigInt}, x)$/;"	f
Rational	base/rational.jl	/^    function Rational{T}(num::Integer, den::Integer) where T<:Integer$/;"	f
Rational	base/rational.jl	/^Rational(n::Integer) = Rational(n,one(n))$/;"	f
Rational	base/rational.jl	/^Rational(n::Integer, d::Integer) = Rational(promote(n,d)...)$/;"	f
Rational	base/rational.jl	/^Rational(n::T, d::T) where {T<:Integer} = Rational{T}(n,d)$/;"	f
Rational	base/rational.jl	/^Rational(x::Float32) = Rational{Int}(x)$/;"	f
Rational	base/rational.jl	/^Rational(x::Float64) = Rational{Int64}(x)$/;"	f
Rational	base/rational.jl	/^Rational(x::Rational) = x$/;"	f
Rational	base/rational.jl	/^function Rational{T}(x::AbstractFloat) where T<:Integer$/;"	f
Rational	base/rational.jl	/^struct Rational{T<:Integer} <: Real$/;"	f
Rational Numbers	doc/src/manual/complex-and-rational-numbers.md	/^## Rational Numbers$/;"	s
RawFD	base/libc.jl	/^RawFD(fd::Integer) = bitcast(RawFD, Cint(fd))$/;"	f
RawFD	base/libc.jl	/^RawFD(fd::RawFD) = fd$/;"	f
RawFD	base/libc.jl	/^primitive type RawFD 32 end$/;"	f
ReadOnlyMemoryError	base/boot.jl	/^struct ReadOnlyMemoryError <: Exception end$/;"	f
Real	base/boot.jl	/^abstract type Real     <: Number end$/;"	f
Real	base/docs/basedocs.jl	/^abstract type Real <: Number end$/;"	f
RealHermSymComplexHermF64SSL	stdlib/SuiteSparse/src/cholmod.jl	/^const RealHermSymComplexHermF64SSL = Union{$/;"	v
RealStruct	test/compiler/codegen.jl	/^mutable struct RealStruct$/;"	f
RebaseOperation	stdlib/LibGit2/src/types.jl	/^struct RebaseOperation$/;"	f
RebaseOptions	stdlib/LibGit2/src/types.jl	/^@kwdef struct RebaseOptions$/;"	f
RecursivelyVisit	src/llvm-late-gc-lowering.cpp	/^void RecursivelyVisit(callback f, Value *V) {$/;"	f	typeref:typename:void
Redefining Methods	doc/src/manual/methods.md	/^Redefining Methods$/;"	s
Redirectable	base/cmd.jl	/^const Redirectable = Union{IO, FileRedirect, RawFD, OS_HANDLE}$/;"	v
ReentrantLock	base/lock.jl	/^    ReentrantLock() = new(nothing, GenericCondition{Threads.SpinLock}(), 0)$/;"	f
ReentrantLock	base/lock.jl	/^mutable struct ReentrantLock <: AbstractLock$/;"	f
Ref	base/refpointer.jl	/^    Ref(x::AbstractArray, i::Integer) = RefArray(x, i)$/;"	f
Ref	base/refpointer.jl	/^    Ref(x::Any) = RefValue(x)$/;"	f
Ref	base/refpointer.jl	/^    Ref(x::Ptr{T}, i::Integer) where {T} = x + (i - 1) * Core.sizeof(T)$/;"	f
Ref	base/refpointer.jl	/^    Ref(x::Ref, i::Integer) = (i != 1 && error("Ref only has one element"); x)$/;"	f
Ref	base/refpointer.jl	/^    function Ref{P}(a::Array{<:Union{Ptr,Cwstring,Cstring}}) where P<:Union{Ptr,Cwstring,Cstring/;"	f
Ref	base/refpointer.jl	/^    function Ref{P}(a::Array{T}) where P<:Union{Ptr,Cwstring,Cstring} where T$/;"	f
RefArray	base/refpointer.jl	/^RefArray(x::AbstractArray{T}, i::Int, roots::Any) where {T} = RefArray{T,typeof(x),Any}(x, i, ro/;"	f
RefArray	base/refpointer.jl	/^RefArray(x::AbstractArray{T}, i::Int=1, roots::Nothing=nothing) where {T} = RefArray{T,typeof(x)/;"	f
RefArray	base/refpointer.jl	/^struct RefArray{T,A<:AbstractArray{T},R} <: Ref{T}$/;"	f
RefTags	src/staticdata.c	/^enum RefTags {$/;"	g	file:
RefValue	base/refvalue.jl	/^RefValue(x::T) where {T} = RefValue{T}(x)$/;"	f
RefValue	base/refvalue.jl	/^mutable struct RefValue{T} <: Ref{T}$/;"	f
Reference	stdlib/Logging/docs/src/index.md	/^## Reference$/;"	s
Reference	stdlib/Markdown/test/runtests.jl	/^mutable struct Reference$/;"	f
References	stdlib/REPL/docs/src/index.md	/^# References$/;"	c
RefineLiveSet	src/llvm-late-gc-lowering.cpp	/^void LateLowerGCFrame::RefineLiveSet(BitVector &LS, State &S)$/;"	f	class:LateLowerGCFrame	typeref:typename:void
Refinements	src/llvm-late-gc-lowering.cpp	/^    std::map<int, SmallVector<int, 1>> Refinements;$/;"	m	struct:State	typeref:typename:std::map<int,SmallVector<int,1>>	file:
Reflection	doc/src/base/base.md	/^## Reflection$/;"	s
Reflection and introspection	doc/src/devdocs/reflection.md	/^# Reflection and introspection$/;"	c
ReflectionExample	test/reflection.jl	/^struct ReflectionExample{T<:AbstractFloat, N}$/;"	f
ReflectionTest	stdlib/InteractiveUtils/test/runtests.jl	/^module ReflectionTest$/;"	f
ReflectionTest	test/reflection.jl	/^module ReflectionTest$/;"	f
Regex	base/regex.jl	/^    function Regex(pattern::AbstractString, compile_options::Integer,$/;"	f
Regex	base/regex.jl	/^Regex(pattern::AbstractString) = Regex(pattern, DEFAULT_COMPILER_OPTS, DEFAULT_MATCH_OPTS)$/;"	f
Regex	base/regex.jl	/^function Regex(pattern::AbstractString, flags::AbstractString)$/;"	f
Regex	base/regex.jl	/^mutable struct Regex$/;"	f
RegexAndMatchData	base/regex.jl	/^    RegexAndMatchData(re::Regex) = (compile(re); new(re, PCRE.create_match_data(re.regex)))$/;"	f
RegexAndMatchData	base/regex.jl	/^struct RegexAndMatchData$/;"	f
RegexMatch	base/regex.jl	/^struct RegexMatch$/;"	f
RegexMatchIterator	base/regex.jl	/^    function RegexMatchIterator(regex::Regex, string::AbstractString, ovr::Bool=false)$/;"	f
RegexMatchIterator	base/regex.jl	/^struct RegexMatchIterator$/;"	f
Region	stdlib/REPL/src/LineEdit.jl	/^const Region = Pair{<:Integer,<:Integer}$/;"	v
Register	src/codegen.cpp	/^        Register,$/;"	e	enum:jl_returninfo_t::CallingConv	file:
RegisterJITEventListener	src/jitlayers.cpp	/^void JuliaOJIT::RegisterJITEventListener(JITEventListener *L)$/;"	f	class:JuliaOJIT	typeref:typename:void
Regular Expressions	doc/src/manual/strings.md	/^## Regular Expressions$/;"	s
ReinterpretArray	base/reinterpretarray.jl	/^struct ReinterpretArray{T,N,S,A<:AbstractArray{S, N}} <: AbstractArray{T, N}$/;"	f
Relative and absolute module paths	doc/src/manual/modules.md	/^### Relative and absolute module paths$/;"	S
Release	deps/srccache/patchelf-0.9/patchelf.spec	/^Release: 1$/;"	t
Release	deps/srccache/patchelf-0.9/patchelf.spec.in	/^Release: 1$/;"	t
Remote References and AbstractChannels	doc/src/manual/parallel-computing.md	/^## Remote References and AbstractChannels$/;"	s
Remote References and Distributed Garbage Collection	doc/src/manual/parallel-computing.md	/^### Remote References and Distributed Garbage Collection$/;"	S
RemoteCallbacks	stdlib/LibGit2/src/types.jl	/^    function RemoteCallbacks(; version::Cuint=Cuint(1), payload=C_NULL, callbacks...)$/;"	f
RemoteCallbacks	stdlib/LibGit2/src/types.jl	/^function RemoteCallbacks(c::Callbacks)$/;"	f
RemoteCallbacks	stdlib/LibGit2/src/types.jl	/^struct RemoteCallbacks$/;"	f
RemoteCallbacksStruct	stdlib/LibGit2/src/types.jl	/^@kwdef struct RemoteCallbacksStruct$/;"	f
RemoteChannel	stdlib/Distributed/src/remotecall.jl	/^    function RemoteChannel{T}(t::Tuple) where T<:AbstractChannel$/;"	f
RemoteChannel	stdlib/Distributed/src/remotecall.jl	/^    function RemoteChannel{T}(w::Int, rrid::RRID) where T<:AbstractChannel$/;"	f
RemoteChannel	stdlib/Distributed/src/remotecall.jl	/^RemoteChannel(pid::Integer=myid()) = RemoteChannel{Channel{Any}}(pid, RRID())$/;"	f
RemoteChannel	stdlib/Distributed/src/remotecall.jl	/^function RemoteChannel(f::Function, pid::Integer=myid())$/;"	f
RemoteChannel	stdlib/Distributed/src/remotecall.jl	/^mutable struct RemoteChannel{T<:AbstractChannel} <: AbstractRemoteRef$/;"	f
RemoteDoMsg	stdlib/Distributed/src/messages.jl	/^struct RemoteDoMsg <: AbstractMsg$/;"	f
RemoteException	stdlib/Distributed/src/process_messages.jl	/^RemoteException(captured) = RemoteException(myid(), captured)$/;"	f
RemoteException	stdlib/Distributed/src/process_messages.jl	/^struct RemoteException <: Exception$/;"	f
RemoteValue	stdlib/Distributed/src/process_messages.jl	/^    function RemoteValue(c)$/;"	f
RemoteValue	stdlib/Distributed/src/process_messages.jl	/^mutable struct RemoteValue$/;"	f
Repeated	base/iterators.jl	/^struct Repeated{O}$/;"	f
Repetition	stdlib/Random/src/Random.jl	/^const Repetition = Union{Val{1},Val{Inf}}$/;"	v
ReplaceUses	src/llvm-alloc-opt.cpp	/^    struct ReplaceUses {$/;"	s	struct:__anon0a1571000111::Optimizer	file:
ReplacedSections	deps/srccache/patchelf-0.9/src/patchelf.cc	/^    typedef map<SectionName, string> ReplacedSections;$/;"	t	class:ElfFile	typeref:typename:map<SectionName,string>	file:
Reporting a Vulnerability	.github/SECURITY.md	/^## Reporting a Vulnerability$/;"	s
Reporting and analyzing crashes (segfaults)	doc/src/devdocs/backtraces.md	/^# Reporting and analyzing crashes (segfaults)$/;"	c
Representation	doc/src/devdocs/llvm.md	/^### Representation$/;"	S
Representation of Intermediate Values	doc/src/devdocs/compiler.md	/^## Representation of Intermediate Values$/;"	s
Representation of Pointers	doc/src/devdocs/compiler.md	/^## Representation of Pointers$/;"	s
Required Build Tools and External Libraries	doc/build/build.md	/^## Required Build Tools and External Libraries$/;"	s
Requirements	doc/README.md	/^## Requirements$/;"	s
ReshapedArray	base/reshapedarray.jl	/^ReshapedArray(parent::AbstractArray{T}, dims::NTuple{N,Int}, mi) where {T,N} = ReshapedArray{T,N/;"	f
ReshapedArray	base/reshapedarray.jl	/^struct ReshapedArray{T,N,P<:AbstractArray,MI<:Tuple{Vararg{SignedMultiplicativeInverse{Int}}}} </;"	f
ReshapedArrayIterator	base/reshapedarray.jl	/^ReshapedArrayIterator(A::ReshapedArray) = _rs_iterator(parent(A), A.mi)$/;"	f
ReshapedArrayIterator	base/reshapedarray.jl	/^struct ReshapedArrayIterator{I,M}$/;"	f
ReshapedIndex	base/reshapedarray.jl	/^struct ReshapedIndex{T}$/;"	f
ResolveLazyFunctions	src/ccall.cpp	/^    void ResolveLazyFunctions()$/;"	f	class:FunctionMover	typeref:typename:void	file:
Resolving IP Addresses	doc/src/manual/networking-and-streams.md	/^## Resolving IP Addresses$/;"	s
Resources	CONTRIBUTING.md	/^## Resources$/;"	s
Resources	README.md	/^## Resources$/;"	s
Resources	doc/src/manual/getting-started.md	/^## Resources$/;"	s
Rest	base/iterators.jl	/^struct Rest{I,S}$/;"	f
RestrictionMatrix	test/subtype.jl	/^const RestrictionMatrix = BandedMatrix{<:Int, <:Ones}$/;"	v
Result	stdlib/Test/src/Test.jl	/^abstract type Result end$/;"	f
Result	test/precompile.jl	/^              mutable struct Result$/;"	f
ResultMsg	stdlib/Distributed/src/messages.jl	/^struct ResultMsg <: AbstractMsg$/;"	f
RetTypeDecl	test/arrayops.jl	/^module RetTypeDecl$/;"	f
RetainStdioTester	stdlib/Distributed/test/distributed_exec.jl	/^struct RetainStdioTester <: ClusterManager$/;"	f
ReturnNode	base/compiler/ssair/ir.jl	/^    ReturnNode() = new()$/;"	f
ReturnNode	base/compiler/ssair/ir.jl	/^    ReturnNode(@nospecialize(val)) = new(val)$/;"	f
ReturnNode	base/compiler/ssair/ir.jl	/^struct ReturnNode$/;"	f
Returned	stdlib/Test/src/Test.jl	/^struct Returned <: ExecutionResult$/;"	f
ReturnsTwice	src/llvm-late-gc-lowering.cpp	/^    std::vector<Instruction *> ReturnsTwice;$/;"	m	struct:State	typeref:typename:std::vector<Instruction * >	file:
Reverse	base/iterators.jl	/^struct Reverse{T}$/;"	f
Reverse	base/ordering.jl	/^const Reverse = ReverseOrdering(Forward)$/;"	v
Reverse	test/compiler/inference.jl	/^struct Reverse{O}$/;"	f
ReverseOrdering	base/ordering.jl	/^ReverseOrdering(fwd::Fwd) where {Fwd} = ReverseOrdering{Fwd}(fwd)$/;"	f
ReverseOrdering	base/ordering.jl	/^ReverseOrdering(rev::ReverseOrdering) = rev.fwd$/;"	f
ReverseOrdering	base/ordering.jl	/^struct ReverseOrdering{Fwd<:Ordering} <: Ordering$/;"	f
ReversePtrNumbering	src/llvm-late-gc-lowering.cpp	/^    std::map<int, Value *> ReversePtrNumbering;$/;"	m	struct:State	typeref:typename:std::map<int,Value * >	file:
ReverseSafepointNumbering	src/llvm-late-gc-lowering.cpp	/^    std::vector<Instruction *> ReverseSafepointNumbering;$/;"	m	struct:State	typeref:typename:std::vector<Instruction * >	file:
Revise-based workflows	doc/src/manual/workflow-tips.md	/^## Revise-based workflows$/;"	s
Right	base/sort.jl	/^struct Right <: Ordering end$/;"	f
Rinvdepth	src/subtype.c	/^    int Rinvdepth;            \/\/ # of invariant constructors we're nested in on the right$/;"	m	struct:jl_stenv_t	typeref:typename:int	file:
Root	src/clangsa/GCChecker.cpp	/^            const MemRegion *Root;$/;"	m	struct:__anon9c5a21540111::GCChecker::ValueState	typeref:typename:const MemRegion *	file:
Root	src/clangsa/GCChecker.cpp	/^            enum Kind { Root, RootArray } K;$/;"	e	enum:__anon9c5a21540111::GCChecker::RootState::Kind	file:
RootArray	src/clangsa/GCChecker.cpp	/^            enum Kind { Root, RootArray } K;$/;"	e	enum:__anon9c5a21540111::GCChecker::RootState::Kind	file:
RootDepth	src/clangsa/GCChecker.cpp	/^            int RootDepth;$/;"	m	struct:__anon9c5a21540111::GCChecker::ValueState	typeref:typename:int	file:
RootInt	stdlib/LinearAlgebra/test/matmul.jl	/^struct RootInt$/;"	f
RootRelativeBundlePath	contrib/mac/frameworkapp/framework-component.plist	/^		<key>RootRelativeBundlePath<\/key>$/;"	k
RootState	src/clangsa/GCChecker.cpp	/^            RootState(Kind InK, int Depth) : K(InK), RootedAtDepth(Depth) {}$/;"	f	struct:__anon9c5a21540111::GCChecker::RootState	file:
RootState	src/clangsa/GCChecker.cpp	/^        struct RootState {$/;"	s	class:__anon9c5a21540111::GCChecker	file:
Rooted	src/clangsa/GCChecker.cpp	/^            enum State { Allocated, Rooted, PotentiallyFreed, Untracked } S;$/;"	e	enum:__anon9c5a21540111::GCChecker::ValueState::State	file:
RootedAtDepth	src/clangsa/GCChecker.cpp	/^            int RootedAtDepth;$/;"	m	struct:__anon9c5a21540111::GCChecker::RootState	typeref:typename:int	file:
Rotation	stdlib/LinearAlgebra/src/givens.jl	/^struct Rotation{T} <: AbstractRotation{T}$/;"	f
Round0	stdlib/SHA/src/sha1.jl	/^function Round0(b,c,d)$/;"	f
Round1And3	stdlib/SHA/src/sha1.jl	/^function Round1And3(b,c,d)$/;"	f
Round2	stdlib/SHA/src/sha1.jl	/^function Round2(b,c,d)$/;"	f
RoundDown	base/rounding.jl	/^const RoundDown = RoundingMode{:Down}()$/;"	v
RoundFromZero	base/rounding.jl	/^const RoundFromZero = RoundingMode{:FromZero}() # mpfr only$/;"	v
RoundNearest	base/rounding.jl	/^const RoundNearest = RoundingMode{:Nearest}()$/;"	v
RoundNearestTiesAway	base/rounding.jl	/^const RoundNearestTiesAway = RoundingMode{:NearestTiesAway}()$/;"	v
RoundNearestTiesUp	base/rounding.jl	/^const RoundNearestTiesUp = RoundingMode{:NearestTiesUp}()$/;"	v
RoundToZero	base/rounding.jl	/^const RoundToZero = RoundingMode{:ToZero}()$/;"	v
RoundUp	base/rounding.jl	/^const RoundUp = RoundingMode{:Up}()$/;"	v
RoundUpToAlignment	src/APInt-C.cpp	/^inline uint64_t RoundUpToAlignment(uint64_t Value, uint64_t Align, uint64_t Skew = 0) {$/;"	f	typeref:typename:uint64_t
Rounding	base/rounding.jl	/^module Rounding$/;"	f
Rounding	stdlib/Dates/docs/src/index.md	/^## Rounding$/;"	s
Rounding Epoch	stdlib/Dates/docs/src/index.md	/^### Rounding Epoch$/;"	S
Rounding Functions	stdlib/Dates/docs/src/index.md	/^### Rounding Functions$/;"	S
Rounding functions	doc/src/manual/mathematical-operations.md	/^### Rounding functions$/;"	S
Rounding modes	doc/src/manual/integers-and-floating-point-numbers.md	/^### Rounding modes$/;"	S
RoundingMode	base/rounding.jl	/^struct RoundingMode{T} end$/;"	f
RoundingTests	stdlib/Dates/test/rounding.jl	/^module RoundingTests$/;"	f
RunLoopType	contrib/mac/frameworkapp/ExecSandbox/Info.plist	/^		<key>RunLoopType<\/key>$/;"	k	key:XPCService
Runions	src/subtype.c	/^    jl_unionstate_t Runions;  \/\/ union state for unions on the right$/;"	m	struct:jl_stenv_t	typeref:typename:jl_unionstate_t	file:
Running External Programs	doc/src/manual/running-external-programs.md	/^# Running External Programs$/;"	c
Running PackageEvaluator	doc/build/distributing.md	/^### Running PackageEvaluator$/;"	S
Running the Julia test suite under Valgrind	doc/src/devdocs/valgrind.md	/^## Running the Julia test suite under Valgrind$/;"	s
Running the analysis	doc/src/devdocs/gc-sa.md	/^## Running the analysis$/;"	s
Ryu	base/ryu/Ryu.jl	/^module Ryu$/;"	f
S	base/reflection.jl	/^           struct S{T}$/;"	f
S	src/clangsa/GCChecker.cpp	/^            enum State { Allocated, Rooted, PotentiallyFreed, Untracked } S;$/;"	m	struct:__anon9c5a21540111::GCChecker::ValueState	typeref:enum:__anon9c5a21540111::GCChecker::ValueState::State	file:
S	stdlib/SharedArrays/test/runtests.jl	/^S = @inferred(SharedArray{Int,2}(fn, sz))$/;"	v
S	stdlib/SharedArrays/test/runtests.jl	/^S = @inferred(SharedArray{Int}((1,2,3)))$/;"	v
S	stdlib/SharedArrays/test/runtests.jl	/^S = @inferred(SharedArray{Int}(1,2))$/;"	v
S	stdlib/SharedArrays/test/runtests.jl	/^S = @inferred(SharedArray{Int}(1,2,3))$/;"	v
S	stdlib/SharedArrays/test/runtests.jl	/^S = @inferred(SharedArray{Int}(2))$/;"	v
S	stdlib/SharedArrays/test/runtests.jl	/^S = SharedArray{Int,2}(fn2, sz, init=D->(for i in localindices(D); D[i] = myid(); end))$/;"	v
S	stdlib/SharedArrays/test/runtests.jl	/^S = SharedArray{UInt8}(fn3, sz, 4, mode="a+", init=D->(for i in localindices(D); D[i] = 0x02; en/;"	v
S	stdlib/SharedArrays/test/runtests.jl	/^S = nothing$/;"	v
S	test/arrayops.jl	/^S = view(A, :, :)$/;"	v
S	test/docs.jl	/^mutable struct S$/;"	f
S	test/offsetarray.jl	/^S = OffsetArray(view(A0, 1:2, 1:2), (-1,2))   # IndexCartesian$/;"	v
S	test/offsetarray.jl	/^S = view(A, 0, :)$/;"	v
S	test/offsetarray.jl	/^S = view(A, 0:0, 4)$/;"	v
S	test/offsetarray.jl	/^S = view(A, 1, 3:4)$/;"	v
S	test/offsetarray.jl	/^S = view(A, :, 3)$/;"	v
S	test/offsetarray.jl	/^S = view(A, :, :)$/;"	v
S1	test/reinterpretarray.jl	/^struct S1$/;"	f
S1442	test/core.jl	/^mutable struct S1442{T}$/;"	f
S2	test/reinterpretarray.jl	/^struct S2$/;"	f
S28356	test/compiler/inference.jl	/^struct S28356{T<:Union{Float64,Float32}}$/;"	f
S29761	test/core.jl	/^struct S29761$/;"	f
S29761_world	test/core.jl	/^function S29761_world(i)$/;"	f
S3	test/offsetarray.jl	/^S3 = OffsetArray(view(reshape(Vector(1:4*3*1), 4, 3, 1), 1:3, 1:2, :), (-1,-2,1))$/;"	v
S32	stdlib/SHA/src/base_functions.jl	/^S32(b,x) = rrot(b,x,32)$/;"	f
S32488	test/subtype.jl	/^struct S32488{S <: Tuple, T, N, L}$/;"	f
S32499	test/syntax.jl	/^        function S32499(; x=1)$/;"	f
S32499	test/syntax.jl	/^    struct S32499$/;"	f
S32881;	test/misc.jl	/^mutable struct S32881; end$/;"	f
S32_MAX	src/support/dtypes.h	/^#define S32_MAX /;"	d
S32_MIN	src/support/dtypes.h	/^#define S32_MIN /;"	d
S4	test/offsetarray.jl	/^S4 = OffsetArray(view(reshape(Vector(1:4*3*2), 4, 3, 2), 1:3, 1:2, :), (-1,-2,1))$/;"	v
S64	stdlib/SHA/src/base_functions.jl	/^S64(b,x) = rrot(b,x,64)$/;"	f
S64_MAX	src/support/dtypes.h	/^#define S64_MAX /;"	d
S64_MIN	src/support/dtypes.h	/^#define S64_MIN /;"	d
SA	test/subtype.jl	/^struct SA{N,L}$/;"	f
SAFECAST_OP	src/flisp/flisp.c	/^#define SAFECAST_OP(/;"	d	file:
SAFECAST_OP	src/flisp/flisp.c	/^SAFECAST_OP(cons,  cons_t*,  ptr)$/;"	f
SAvalues	src/codegen.cpp	/^    std::vector<jl_cgval_t> SAvalues;$/;"	m	class:jl_codectx_t	typeref:typename:std::vector<jl_cgval_t>	file:
SBOX_F	src/intrinsics.cpp	/^#define SBOX_F(/;"	d	file:
SBOX_F_PERM	src/intrinsics.cpp	/^#define SBOX_F_PERM(/;"	d	file:
SCALAR	stdlib/SuiteSparse/src/cholmod_h.jl	/^const SCALAR = Int32(0)        # A = s*A$/;"	v
SCR_WIDTH	src/flisp/flisp.h	/^    int SCR_WIDTH;$/;"	m	struct:_fl_context_t	typeref:typename:int
SECSPERDAY	src/support/tzfile.h	/^#define SECSPERDAY	/;"	d
SECSPERHOUR	src/support/tzfile.h	/^#define SECSPERHOUR	/;"	d
SECSPERMIN	src/support/tzfile.h	/^#define SECSPERMIN	/;"	d
SECT_INTERP	src/interpreter-stacktrace.c	/^#define SECT_INTERP /;"	d	file:
SECT_INTERP	src/interpreter-stacktrace.c	/^#define SECT_INTERP$/;"	d	file:
SEE ALSO	deps/srccache/patchelf-0.9/patchelf.1	/^.SH "SEE ALSO"$/;"	s	title:PATCHELF
SEEK_CUR	base/filesystem.jl	/^const SEEK_CUR = Int32(1)$/;"	v
SEEK_END	base/filesystem.jl	/^const SEEK_END = Int32(2)$/;"	v
SEEK_SET	base/filesystem.jl	/^const SEEK_SET = Int32(0)$/;"	v
SELECTOR_FUNC	src/runtime_intrinsics.c	/^#define SELECTOR_FUNC(/;"	d	file:
SELECTOR_FUNC	src/runtime_intrinsics.c	/^SELECTOR_FUNC(intrinsic_checked)$/;"	f	file:
SELECTOR_FUNC	src/runtime_intrinsics.c	/^SELECTOR_FUNC(intrinsic_u1)$/;"	f	file:
SELFMAG	deps/srccache/patchelf-0.9/src/elf.h	/^#define	SELFMAG	/;"	d
SET_MAKE	deps/srccache/patchelf-0.9/Makefile.in	/^SET_MAKE = @SET_MAKE@$/;"	m
SET_MAKE	deps/srccache/patchelf-0.9/src/Makefile.in	/^SET_MAKE = @SET_MAKE@$/;"	m
SET_MAKE	deps/srccache/patchelf-0.9/tests/Makefile.in	/^SET_MAKE = @SET_MAKE@$/;"	m
SHA	stdlib/SHA/docs/src/index.md	/^# SHA$/;"	c
SHA	stdlib/SHA/src/SHA.jl	/^module SHA$/;"	f
SHA1	base/loading.jl	/^    function SHA1(bytes::Vector{UInt8})$/;"	f
SHA1	base/loading.jl	/^SHA1(s::AbstractString) = SHA1(hex2bytes(s))$/;"	f
SHA1	base/loading.jl	/^struct SHA1$/;"	f
SHA1_CTX	stdlib/SHA/src/types.jl	/^SHA1_CTX() = SHA1_CTX(copy(SHA1_initial_hash_value), 0, zeros(UInt8, blocklen(SHA1_CTX)), Vector/;"	f
SHA1_CTX	stdlib/SHA/src/types.jl	/^mutable struct SHA1_CTX <: SHA_CTX$/;"	f
SHA1_initial_hash_value	stdlib/SHA/src/constants.jl	/^const SHA1_initial_hash_value = UInt32[$/;"	v
SHA224_CTX	stdlib/SHA/src/types.jl	/^const SHA224_CTX = SHA2_224_CTX$/;"	v
SHA256_CTX	stdlib/SHA/src/types.jl	/^const SHA256_CTX = SHA2_256_CTX$/;"	v
SHA2_224_CTX	stdlib/SHA/src/types.jl	/^SHA2_224_CTX() = SHA2_224_CTX(copy(SHA2_224_initial_hash_value), 0, zeros(UInt8, blocklen(SHA2_2/;"	f
SHA2_224_CTX	stdlib/SHA/src/types.jl	/^mutable struct SHA2_224_CTX <: SHA2_CTX$/;"	f
SHA2_224_initial_hash_value	stdlib/SHA/src/constants.jl	/^const SHA2_224_initial_hash_value = UInt32[$/;"	v
SHA2_256_CTX	stdlib/SHA/src/types.jl	/^SHA2_256_CTX() = SHA2_256_CTX(copy(SHA2_256_initial_hash_value), 0, zeros(UInt8, blocklen(SHA2_2/;"	f
SHA2_256_CTX	stdlib/SHA/src/types.jl	/^mutable struct SHA2_256_CTX <: SHA2_CTX$/;"	f
SHA2_256_initial_hash_value	stdlib/SHA/src/constants.jl	/^const SHA2_256_initial_hash_value = UInt32[$/;"	v
SHA2_384_CTX	stdlib/SHA/src/types.jl	/^SHA2_384_CTX() = SHA2_384_CTX(copy(SHA2_384_initial_hash_value), 0, zeros(UInt8, blocklen(SHA2_3/;"	f
SHA2_384_CTX	stdlib/SHA/src/types.jl	/^mutable struct SHA2_384_CTX <: SHA2_CTX$/;"	f
SHA2_384_initial_hash_value	stdlib/SHA/src/constants.jl	/^const SHA2_384_initial_hash_value = UInt64[$/;"	v
SHA2_512_CTX	stdlib/SHA/src/types.jl	/^SHA2_512_CTX() = SHA2_512_CTX(copy(SHA2_512_initial_hash_value), 0, zeros(UInt8, blocklen(SHA2_5/;"	f
SHA2_512_CTX	stdlib/SHA/src/types.jl	/^mutable struct SHA2_512_CTX <: SHA2_CTX$/;"	f
SHA2_512_initial_hash_value	stdlib/SHA/src/constants.jl	/^const SHA2_512_initial_hash_value = UInt64[$/;"	v
SHA2_CTX	stdlib/SHA/src/types.jl	/^abstract type SHA2_CTX <: SHA_CTX end$/;"	f
SHA384_CTX	stdlib/SHA/src/types.jl	/^const SHA384_CTX = SHA2_384_CTX$/;"	v
SHA3_224_CTX	stdlib/SHA/src/types.jl	/^SHA3_224_CTX() = SHA3_224_CTX(zeros(UInt64, 25), 0, zeros(UInt8, blocklen(SHA3_224_CTX)), Vector/;"	f
SHA3_224_CTX	stdlib/SHA/src/types.jl	/^mutable struct SHA3_224_CTX <: SHA3_CTX$/;"	f
SHA3_256_CTX	stdlib/SHA/src/types.jl	/^SHA3_256_CTX() = SHA3_256_CTX(zeros(UInt64, 25), 0, zeros(UInt8, blocklen(SHA3_256_CTX)), Vector/;"	f
SHA3_256_CTX	stdlib/SHA/src/types.jl	/^mutable struct SHA3_256_CTX <: SHA3_CTX$/;"	f
SHA3_384_CTX	stdlib/SHA/src/types.jl	/^SHA3_384_CTX() = SHA3_384_CTX(zeros(UInt64, 25), 0, zeros(UInt8, blocklen(SHA3_384_CTX)), Vector/;"	f
SHA3_384_CTX	stdlib/SHA/src/types.jl	/^mutable struct SHA3_384_CTX <: SHA3_CTX$/;"	f
SHA3_512_CTX	stdlib/SHA/src/types.jl	/^SHA3_512_CTX() = SHA3_512_CTX(zeros(UInt64, 25), 0, zeros(UInt8, blocklen(SHA3_512_CTX)), Vector/;"	f
SHA3_512_CTX	stdlib/SHA/src/types.jl	/^mutable struct SHA3_512_CTX <: SHA3_CTX$/;"	f
SHA3_CTX	stdlib/SHA/src/types.jl	/^abstract type SHA3_CTX <: SHA_CTX end$/;"	f
SHA3_PILN	stdlib/SHA/src/constants.jl	/^const SHA3_PILN = Int[$/;"	v
SHA3_ROTC	stdlib/SHA/src/constants.jl	/^const SHA3_ROTC = UInt64[$/;"	v
SHA3_ROUND_CONSTS	stdlib/SHA/src/constants.jl	/^const SHA3_ROUND_CONSTS = UInt64[$/;"	v
SHA512_CTX	stdlib/SHA/src/types.jl	/^const SHA512_CTX = SHA2_512_CTX$/;"	v
SHA_CTX	stdlib/SHA/src/types.jl	/^abstract type SHA_CTX end$/;"	f
SHELL	deps/srccache/patchelf-0.9/Makefile.in	/^SHELL = @SHELL@$/;"	m
SHELL	deps/srccache/patchelf-0.9/src/Makefile.in	/^SHELL = @SHELL@$/;"	m
SHELL	deps/srccache/patchelf-0.9/tests/Makefile.in	/^SHELL = @SHELL@$/;"	m
SHF_ALLOC	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHF_ALLOC	/;"	d
SHF_ALPHA_GPREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHF_ALPHA_GPREL	/;"	d
SHF_ARM_COMDEF	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHF_ARM_COMDEF	/;"	d
SHF_ARM_ENTRYSECT	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHF_ARM_ENTRYSECT	/;"	d
SHF_EXCLUDE	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHF_EXCLUDE	/;"	d
SHF_EXECINSTR	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHF_EXECINSTR	/;"	d
SHF_GROUP	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHF_GROUP	/;"	d
SHF_IA_64_NORECOV	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHF_IA_64_NORECOV	/;"	d
SHF_IA_64_SHORT	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHF_IA_64_SHORT	/;"	d
SHF_INFO_LINK	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHF_INFO_LINK	/;"	d
SHF_LINK_ORDER	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHF_LINK_ORDER	/;"	d
SHF_MASKOS	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHF_MASKOS	/;"	d
SHF_MASKPROC	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHF_MASKPROC	/;"	d
SHF_MERGE	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHF_MERGE	/;"	d
SHF_MIPS_ADDR	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHF_MIPS_ADDR	/;"	d
SHF_MIPS_GPREL	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHF_MIPS_GPREL	/;"	d
SHF_MIPS_LOCAL	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHF_MIPS_LOCAL	/;"	d
SHF_MIPS_MERGE	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHF_MIPS_MERGE	/;"	d
SHF_MIPS_NAMES	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHF_MIPS_NAMES	/;"	d
SHF_MIPS_NODUPE	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHF_MIPS_NODUPE	/;"	d
SHF_MIPS_NOSTRIP	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHF_MIPS_NOSTRIP	/;"	d
SHF_MIPS_STRINGS	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHF_MIPS_STRINGS	/;"	d
SHF_ORDERED	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHF_ORDERED	/;"	d
SHF_OS_NONCONFORMING	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHF_OS_NONCONFORMING /;"	d
SHF_PARISC_HUGE	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHF_PARISC_HUGE	/;"	d
SHF_PARISC_SBP	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHF_PARISC_SBP	/;"	d
SHF_PARISC_SHORT	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHF_PARISC_SHORT	/;"	d
SHF_STRINGS	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHF_STRINGS	/;"	d
SHF_TLS	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHF_TLS	/;"	d
SHF_WRITE	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHF_WRITE	/;"	d
SHIFTEDMONTHDAYS	stdlib/Dates/src/types.jl	/^const SHIFTEDMONTHDAYS = (306, 337, 0, 31, 61, 92, 122, 153, 184, 214, 245, 275)$/;"	v
SHLIBFILE_INSTALL	deps/tools/common.mk	/^define SHLIBFILE_INSTALL$/;"	m
SHN_ABS	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHN_ABS	/;"	d
SHN_AFTER	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHN_AFTER	/;"	d
SHN_BEFORE	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHN_BEFORE	/;"	d
SHN_COMMON	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHN_COMMON	/;"	d
SHN_HIOS	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHN_HIOS	/;"	d
SHN_HIPROC	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHN_HIPROC	/;"	d
SHN_HIRESERVE	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHN_HIRESERVE	/;"	d
SHN_LOOS	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHN_LOOS	/;"	d
SHN_LOPROC	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHN_LOPROC	/;"	d
SHN_LORESERVE	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHN_LORESERVE	/;"	d
SHN_MIPS_ACOMMON	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHN_MIPS_ACOMMON	/;"	d
SHN_MIPS_DATA	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHN_MIPS_DATA	/;"	d
SHN_MIPS_SCOMMON	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHN_MIPS_SCOMMON /;"	d
SHN_MIPS_SUNDEFINED	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHN_MIPS_SUNDEFINED	/;"	d
SHN_MIPS_TEXT	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHN_MIPS_TEXT	/;"	d
SHN_PARISC_ANSI_COMMON	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHN_PARISC_ANSI_COMMON	/;"	d
SHN_PARISC_HUGE_COMMON	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHN_PARISC_HUGE_COMMON	/;"	d
SHN_UNDEF	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHN_UNDEF	/;"	d
SHN_XINDEX	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHN_XINDEX	/;"	d
SHORT	src/crc32c.c	/^#define SHORT /;"	d	file:
SHORTBACKREF_TAG	stdlib/Serialization/src/Serialization.jl	/^const SHORTBACKREF_TAG     = Int32(o0+4)$/;"	v
SHORTEST	base/grisu/grisu.jl	/^const SHORTEST = 1$/;"	v
SHORTINT64_TAG	stdlib/Serialization/src/Serialization.jl	/^const SHORTINT64_TAG       = Int32(o0+9)$/;"	v
SHORTx1	src/crc32c.c	/^#define SHORTx1 /;"	d	file:
SHORTx2	src/crc32c.c	/^#define SHORTx2 /;"	d	file:
SHT_ALPHA_DEBUG	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_ALPHA_DEBUG	/;"	d
SHT_ALPHA_REGINFO	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_ALPHA_REGINFO	/;"	d
SHT_ARM_ATTRIBUTES	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_ARM_ATTRIBUTES	/;"	d
SHT_ARM_EXIDX	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_ARM_EXIDX	/;"	d
SHT_ARM_PREEMPTMAP	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_ARM_PREEMPTMAP	/;"	d
SHT_CHECKSUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_CHECKSUM	/;"	d
SHT_DYNAMIC	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_DYNAMIC	/;"	d
SHT_DYNSYM	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_DYNSYM	/;"	d
SHT_FINI_ARRAY	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_FINI_ARRAY	/;"	d
SHT_GNU_ATTRIBUTES	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_GNU_ATTRIBUTES /;"	d
SHT_GNU_HASH	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_GNU_HASH	/;"	d
SHT_GNU_LIBLIST	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_GNU_LIBLIST	/;"	d
SHT_GNU_verdef	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_GNU_verdef	/;"	d
SHT_GNU_verneed	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_GNU_verneed	/;"	d
SHT_GNU_versym	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_GNU_versym	/;"	d
SHT_GROUP	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_GROUP	/;"	d
SHT_HASH	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_HASH	/;"	d
SHT_HIOS	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_HIOS	/;"	d
SHT_HIPROC	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_HIPROC	/;"	d
SHT_HISUNW	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_HISUNW	/;"	d
SHT_HIUSER	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_HIUSER	/;"	d
SHT_IA_64_EXT	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_IA_64_EXT	/;"	d
SHT_IA_64_UNWIND	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_IA_64_UNWIND	/;"	d
SHT_INIT_ARRAY	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_INIT_ARRAY	/;"	d
SHT_LOOS	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_LOOS	/;"	d
SHT_LOPROC	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_LOPROC	/;"	d
SHT_LOSUNW	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_LOSUNW	/;"	d
SHT_LOUSER	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_LOUSER	/;"	d
SHT_MIPS_AUXSYM	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_AUXSYM	/;"	d
SHT_MIPS_CONFLICT	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_CONFLICT	/;"	d
SHT_MIPS_CONTENT	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_CONTENT	/;"	d
SHT_MIPS_DEBUG	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_DEBUG	/;"	d
SHT_MIPS_DELTACLASS	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_DELTACLASS	/;"	d
SHT_MIPS_DELTADECL	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_DELTADECL	/;"	d
SHT_MIPS_DELTAINST	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_DELTAINST	/;"	d
SHT_MIPS_DELTASYM	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_DELTASYM	/;"	d
SHT_MIPS_DENSE	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_DENSE	/;"	d
SHT_MIPS_DWARF	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_DWARF	/;"	d
SHT_MIPS_EH_REGION	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_EH_REGION	/;"	d
SHT_MIPS_EVENTS	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_EVENTS	/;"	d
SHT_MIPS_EXTSYM	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_EXTSYM	/;"	d
SHT_MIPS_FDESC	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_FDESC	/;"	d
SHT_MIPS_GPTAB	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_GPTAB	/;"	d
SHT_MIPS_IFACE	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_IFACE	/;"	d
SHT_MIPS_LIBLIST	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_LIBLIST	/;"	d
SHT_MIPS_LINE	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_LINE	/;"	d
SHT_MIPS_LOCSTR	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_LOCSTR	/;"	d
SHT_MIPS_LOCSYM	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_LOCSYM	/;"	d
SHT_MIPS_MSYM	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_MSYM	/;"	d
SHT_MIPS_OPTIONS	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_OPTIONS	/;"	d
SHT_MIPS_OPTSYM	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_OPTSYM	/;"	d
SHT_MIPS_PACKAGE	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_PACKAGE	/;"	d
SHT_MIPS_PACKSYM	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_PACKSYM	/;"	d
SHT_MIPS_PDESC	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_PDESC	/;"	d
SHT_MIPS_PDR_EXCEPTION	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_PDR_EXCEPTION	/;"	d
SHT_MIPS_PIXIE	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_PIXIE	/;"	d
SHT_MIPS_REGINFO	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_REGINFO	/;"	d
SHT_MIPS_RELD	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_RELD	/;"	d
SHT_MIPS_RFDESC	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_RFDESC	/;"	d
SHT_MIPS_SHDR	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_SHDR	/;"	d
SHT_MIPS_SYMBOL_LIB	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_SYMBOL_LIB	/;"	d
SHT_MIPS_TRANSLATE	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_TRANSLATE	/;"	d
SHT_MIPS_UCODE	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_UCODE	/;"	d
SHT_MIPS_WHIRL	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_WHIRL	/;"	d
SHT_MIPS_XLATE	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_XLATE	/;"	d
SHT_MIPS_XLATE_DEBUG	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_XLATE_DEBUG	/;"	d
SHT_MIPS_XLATE_OLD	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_MIPS_XLATE_OLD	/;"	d
SHT_NOBITS	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_NOBITS	/;"	d
SHT_NOTE	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_NOTE	/;"	d
SHT_NULL	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_NULL	/;"	d
SHT_NUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define	SHT_NUM	/;"	d
SHT_PARISC_DOC	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_PARISC_DOC	/;"	d
SHT_PARISC_EXT	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_PARISC_EXT	/;"	d
SHT_PARISC_UNWIND	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_PARISC_UNWIND	/;"	d
SHT_PREINIT_ARRAY	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_PREINIT_ARRAY /;"	d
SHT_PROGBITS	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_PROGBITS	/;"	d
SHT_REL	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_REL	/;"	d
SHT_RELA	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_RELA	/;"	d
SHT_SHLIB	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_SHLIB	/;"	d
SHT_STRTAB	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_STRTAB	/;"	d
SHT_SUNW_COMDAT	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_SUNW_COMDAT /;"	d
SHT_SUNW_move	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_SUNW_move	/;"	d
SHT_SUNW_syminfo	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_SUNW_syminfo /;"	d
SHT_SYMTAB	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_SYMTAB	/;"	d
SHT_SYMTAB_SHNDX	deps/srccache/patchelf-0.9/src/elf.h	/^#define SHT_SYMTAB_SHNDX /;"	d
SI	test/core.jl	/^mutable struct SI{m, s, kg}$/;"	f
SIBOX_FUNC	src/datatype.c	/^#define SIBOX_FUNC(/;"	d	file:
SIGHUP	base/process.jl	/^const SIGHUP  = 1$/;"	v
SIGINT	base/process.jl	/^const SIGINT  = 2$/;"	v
SIGKILL	base/process.jl	/^const SIGKILL = 9$/;"	v
SIGNATURE_NARGS_MISMATCH	base/compiler/validation.jl	/^const SIGNATURE_NARGS_MISMATCH = "method signature does not match number of method arguments"$/;"	v
SIGPIPE	base/process.jl	/^const SIGPIPE = 13 # !windows$/;"	v
SIGQUIT	base/process.jl	/^const SIGQUIT = 3 # !windows$/;"	v
SIGTERM	base/process.jl	/^const SIGTERM = 15$/;"	v
SIG_AMD	src/processor_x86.cpp	/^const int SIG_AMD = 0x68747541; \/\/ Auth$/;"	v	namespace:X86	typeref:typename:const int
SIG_INTEL	src/processor_x86.cpp	/^const int SIG_INTEL = 0x756e6547; \/\/ Genu$/;"	v	namespace:X86	typeref:typename:const int
SIMD Support	doc/src/base/simd-types.md	/^# SIMD Support$/;"	c
SIMD Values	doc/src/manual/calling-c-and-fortran-code.md	/^### SIMD Values$/;"	S
SIMPLEVECTOR_TAG	stdlib/Serialization/src/Serialization.jl	/^const SIMPLEVECTOR_TAG = sertag(SimpleVector)$/;"	v
SINGLE	stdlib/SuiteSparse/src/cholmod_h.jl	/^const SINGLE = Int32(1)        # all numerical values are float$/;"	v
SIQ	test/core.jl	/^mutable struct SIQ{A,B} <: Number$/;"	f
SIQ20671	test/subtype.jl	/^struct SIQ20671{T<:Number,m,kg,s,A,K,mol,cd,rad,sr} <: Number$/;"	f
SItypes	test/int.jl	/^SItypes = Base.BitSigned_types$/;"	v
SLEEP_TIME	src/support/ios.c	/^#define SLEEP_TIME /;"	d	file:
SLOTFLAGS_MISMATCH	base/compiler/validation.jl	/^const SLOTFLAGS_MISMATCH = "length(slotnames) < length(slotflags)"$/;"	v
SLOTNAMES_NARGS_MISMATCH	base/compiler/validation.jl	/^const SLOTNAMES_NARGS_MISMATCH = "CodeInfo for method contains fewer slotnames than the number o/;"	v
SLOT_ASSIGNEDONCE	base/compiler/optimize.jl	/^const SLOT_ASSIGNEDONCE = 16 # slot is assigned to only once$/;"	v
SLOT_STATICUNDEF	base/compiler/optimize.jl	/^const SLOT_STATICUNDEF  = 1 # slot might be used before it is defined (structurally)$/;"	v
SLOT_USED	base/reflection.jl	/^const SLOT_USED = 0x8$/;"	v
SLOT_USEDUNDEF	base/compiler/optimize.jl	/^const SLOT_USEDUNDEF    = 32 # slot has uses that might raise UndefVarError$/;"	v
SMALL_ALGORITHM	base/sort.jl	/^const SMALL_ALGORITHM  = InsertionSort$/;"	v
SMALL_STR_LEN	src/flisp/print.c	/^#define SMALL_STR_LEN /;"	d	file:
SMALL_THRESHOLD	base/sort.jl	/^const SMALL_THRESHOLD  = 20$/;"	v
SNCA	base/compiler/ssair/domtree.jl	/^    function SNCA(cfg::CFG)$/;"	f
SOE	test/core.jl	/^module SOE$/;"	f
SONAME	src/Makefile	/^  SONAME       := -Wl,-soname=libjulia.$(JL_MAJOR_SHLIB_EXT)$/;"	m
SONAME	src/Makefile	/^  SONAME       :=$/;"	m
SONAME_DEBUG	src/Makefile	/^  SONAME_DEBUG := -Wl,-soname=libjulia-debug.$(JL_MAJOR_SHLIB_EXT)$/;"	m
SONAME_DEBUG	src/Makefile	/^  SONAME_DEBUG :=$/;"	m
SORT_NONE	stdlib/LibGit2/src/consts.jl	/^const SORT_NONE        = Cint(0)$/;"	v
SORT_REVERSE	stdlib/LibGit2/src/consts.jl	/^const SORT_REVERSE     = Cint(1 << 2)$/;"	v
SORT_TIME	stdlib/LibGit2/src/consts.jl	/^const SORT_TIME        = Cint(1 << 1)$/;"	v
SORT_TOPOLOGICAL	stdlib/LibGit2/src/consts.jl	/^const SORT_TOPOLOGICAL = Cint(1 << 0)$/;"	v
SOURCES	deps/srccache/patchelf-0.9/Makefile.in	/^SOURCES =$/;"	m
SOURCES	deps/srccache/patchelf-0.9/src/Makefile.in	/^SOURCES = $(patchelf_SOURCES)$/;"	m
SOURCES	deps/srccache/patchelf-0.9/tests/Makefile.in	/^SOURCES = $(nodist_big_dynstr_SOURCES) $(libbar_scoped_so_SOURCES) \\$/;"	m
SP	src/flisp/flisp.h	/^    uint32_t SP;$/;"	m	struct:_fl_context_t	typeref:typename:uint32_t
SPQR	stdlib/SuiteSparse/src/spqr.jl	/^module SPQR$/;"	f
SPQR_CONFIG	deps/suitesparse.mk	/^SPQR_CONFIG := -DLONGBLAS='long long'$/;"	m
SPVM	stdlib/SparseArrays/src/higherorderfns.jl	/^const SPVM = Union{SparseVecStyle,SparseMatStyle}$/;"	v
SRCCACHE	deps/Makefile	/^SRCCACHE := $(abspath $(SRCDIR)\/srccache)$/;"	m
SRCCACHE	doc/Makefile	/^SRCCACHE         := $(abspath $(JULIAHOME)\/deps\/srccache)$/;"	m
SRCCACHE	stdlib/Makefile	/^SRCCACHE := $(abspath $(SRCDIR)\/srccache)$/;"	m
SRCDIR	base/Makefile	/^SRCDIR := $(abspath $(dir $(lastword $(MAKEFILE_LIST))))$/;"	m
SRCDIR	deps/Makefile	/^SRCDIR := $(abspath $(dir $(lastword $(MAKEFILE_LIST))))$/;"	m
SRCDIR	doc/Makefile	/^SRCDIR           := $(abspath $(dir $(lastword $(MAKEFILE_LIST))))$/;"	m
SRCDIR	src/Makefile	/^SRCDIR := $(abspath $(dir $(lastword $(MAKEFILE_LIST))))$/;"	m
SRCDIR	src/flisp/Makefile	/^SRCDIR := $(abspath $(dir $(lastword $(MAKEFILE_LIST))))$/;"	m
SRCDIR	src/support/Makefile	/^SRCDIR := $(abspath $(dir $(lastword $(MAKEFILE_LIST))))$/;"	m
SRCDIR	stdlib/Makefile	/^SRCDIR := $(abspath $(dir $(lastword $(MAKEFILE_LIST))))$/;"	m
SRCDIR	sysimage.mk	/^SRCDIR := $(abspath $(dir $(lastword $(MAKEFILE_LIST))))$/;"	m
SRCDIR	test/Makefile	/^SRCDIR := $(abspath $(dir $(lastword $(MAKEFILE_LIST))))$/;"	m
SRCDIR	test/embedding/Makefile	/^SRCDIR := $(abspath $(dir $(lastword $(MAKEFILE_LIST))))$/;"	m
SRCDIR	test/gcext/Makefile	/^SRCDIR := $(abspath $(dir $(lastword $(MAKEFILE_LIST))))$/;"	m
SRCDIR	test/llvmpasses/Makefile	/^SRCDIR := $(abspath $(dir $(lastword $(MAKEFILE_LIST))))$/;"	m
SRCDIR	ui/Makefile	/^SRCDIR := $(abspath $(dir $(lastword $(MAKEFILE_LIST))))$/;"	m
SRCS	src/Makefile	/^SRCS := $(RUNTIME_SRCS)$/;"	m
SRCS	src/flisp/Makefile	/^SRCS := flisp.c builtins.c string.c equalhash.c table.c iostream.c \\$/;"	m
SRCS	src/support/Makefile	/^SRCS := hashing timefuncs ptrhash operators utf8 ios htable bitvector \\$/;"	m
SRet	src/codegen.cpp	/^        SRet,$/;"	e	enum:jl_returninfo_t::CallingConv	file:
SSADefUse	base/compiler/ssair/passes.jl	/^SSADefUse() = SSADefUse(Int[], Int[], Int[])$/;"	f
SSADefUse	base/compiler/ssair/passes.jl	/^struct SSADefUse$/;"	f
SSAVALUETYPES_MISMATCH	base/compiler/validation.jl	/^const SSAVALUETYPES_MISMATCH = "not all SSAValues in AST have a type in ssavaluetypes"$/;"	v
SSAVALUETYPES_MISMATCH_UNINFERRED	base/compiler/validation.jl	/^const SSAVALUETYPES_MISMATCH_UNINFERRED = "uninferred CodeInfo ssavaluetypes field does not equa/;"	v
SSHCredential	stdlib/LibGit2/src/types.jl	/^    function SSHCredential(user="", pass="",$/;"	f
SSHCredential	stdlib/LibGit2/src/types.jl	/^mutable struct SSHCredential <: AbstractCredential$/;"	f
SSHManager	stdlib/Distributed/src/managers.jl	/^    function SSHManager(machines)$/;"	f
SSHManager	stdlib/Distributed/src/managers.jl	/^struct SSHManager <: ClusterManager$/;"	f
STACK_PADDING	src/interpreter-stacktrace.c	/^#define STACK_PADDING /;"	d	file:
STACK_SIZE	src/interpreter-stacktrace.c	/^#define STACK_SIZE /;"	d	file:
STATIC_INLINE	src/support/dtypes.h	/^#  define STATIC_INLINE /;"	d
STATIC_OR_JS	src/task.c	/^#define STATIC_OR_JS /;"	d	file:
STATUS_CONFLICTED	stdlib/LibGit2/src/consts.jl	/^const STATUS_CONFLICTED       = Cuint(1 << 15)$/;"	v
STATUS_CURRENT	stdlib/LibGit2/src/consts.jl	/^const STATUS_CURRENT          = Cuint(0)$/;"	v
STATUS_IGNORED	stdlib/LibGit2/src/consts.jl	/^const STATUS_IGNORED          = Cuint(1 << 14)$/;"	v
STATUS_INDEX_DELETED	stdlib/LibGit2/src/consts.jl	/^const STATUS_INDEX_DELETED    = Cuint(1 << 2)$/;"	v
STATUS_INDEX_MODIFIED	stdlib/LibGit2/src/consts.jl	/^const STATUS_INDEX_MODIFIED   = Cuint(1 << 1)$/;"	v
STATUS_INDEX_NEW	stdlib/LibGit2/src/consts.jl	/^const STATUS_INDEX_NEW        = Cuint(1 << 0)$/;"	v
STATUS_INDEX_RENAMED	stdlib/LibGit2/src/consts.jl	/^const STATUS_INDEX_RENAMED    = Cuint(1 << 3)$/;"	v
STATUS_INDEX_TYPECHANGE	stdlib/LibGit2/src/consts.jl	/^const STATUS_INDEX_TYPECHANGE = Cuint(1 << 4)$/;"	v
STATUS_OPT_DISABLE_PATHSPEC_MATCH	stdlib/LibGit2/src/consts.jl	/^const STATUS_OPT_DISABLE_PATHSPEC_MATCH           = Cuint(1 << 5)$/;"	v
STATUS_OPT_EXCLUDE_SUBMODULES	stdlib/LibGit2/src/consts.jl	/^const STATUS_OPT_EXCLUDE_SUBMODULES               = Cuint(1 << 3)$/;"	v
STATUS_OPT_INCLUDE_IGNORED	stdlib/LibGit2/src/consts.jl	/^const STATUS_OPT_INCLUDE_IGNORED                  = Cuint(1 << 1)$/;"	v
STATUS_OPT_INCLUDE_UNMODIFIED	stdlib/LibGit2/src/consts.jl	/^const STATUS_OPT_INCLUDE_UNMODIFIED               = Cuint(1 << 2)$/;"	v
STATUS_OPT_INCLUDE_UNREADABLE	stdlib/LibGit2/src/consts.jl	/^const STATUS_OPT_INCLUDE_UNREADABLE               = Cuint(1 << 14)$/;"	v
STATUS_OPT_INCLUDE_UNREADABLE_AS_UNTRACKED	stdlib/LibGit2/src/consts.jl	/^const STATUS_OPT_INCLUDE_UNREADABLE_AS_UNTRACKED  = Cuint(1 << 15)$/;"	v
STATUS_OPT_INCLUDE_UNTRACKED	stdlib/LibGit2/src/consts.jl	/^const STATUS_OPT_INCLUDE_UNTRACKED                = Cuint(1 << 0)$/;"	v
STATUS_OPT_NO_REFRESH	stdlib/LibGit2/src/consts.jl	/^const STATUS_OPT_NO_REFRESH                       = Cuint(1 << 12)$/;"	v
STATUS_OPT_RECURSE_IGNORED_DIRS	stdlib/LibGit2/src/consts.jl	/^const STATUS_OPT_RECURSE_IGNORED_DIRS             = Cuint(1 << 6)$/;"	v
STATUS_OPT_RECURSE_UNTRACKED_DIRS	stdlib/LibGit2/src/consts.jl	/^const STATUS_OPT_RECURSE_UNTRACKED_DIRS           = Cuint(1 << 4)$/;"	v
STATUS_OPT_RENAMES_FROM_REWRITES	stdlib/LibGit2/src/consts.jl	/^const STATUS_OPT_RENAMES_FROM_REWRITES            = Cuint(1 << 11)$/;"	v
STATUS_OPT_RENAMES_HEAD_TO_INDEX	stdlib/LibGit2/src/consts.jl	/^const STATUS_OPT_RENAMES_HEAD_TO_INDEX            = Cuint(1 << 7)$/;"	v
STATUS_OPT_RENAMES_INDEX_TO_WORKDIR	stdlib/LibGit2/src/consts.jl	/^const STATUS_OPT_RENAMES_INDEX_TO_WORKDIR         = Cuint(1 << 8)$/;"	v
STATUS_OPT_SORT_CASE_INSENSITIVELY	stdlib/LibGit2/src/consts.jl	/^const STATUS_OPT_SORT_CASE_INSENSITIVELY          = Cuint(1 << 10)$/;"	v
STATUS_OPT_SORT_CASE_SENSITIVELY	stdlib/LibGit2/src/consts.jl	/^const STATUS_OPT_SORT_CASE_SENSITIVELY            = Cuint(1 << 9)$/;"	v
STATUS_OPT_UPDATE_INDEX	stdlib/LibGit2/src/consts.jl	/^const STATUS_OPT_UPDATE_INDEX                     = Cuint(1 << 13)$/;"	v
STATUS_SHOW_INDEX_AND_WORKDIR	stdlib/LibGit2/src/consts.jl	/^const STATUS_SHOW_INDEX_AND_WORKDIR = Cint(0)$/;"	v
STATUS_SHOW_INDEX_ONLY	stdlib/LibGit2/src/consts.jl	/^const STATUS_SHOW_INDEX_ONLY        = Cint(1)$/;"	v
STATUS_SHOW_WORKDIR_ONLY	stdlib/LibGit2/src/consts.jl	/^const STATUS_SHOW_WORKDIR_ONLY      = Cint(2)$/;"	v
STATUS_WT_DELETED	stdlib/LibGit2/src/consts.jl	/^const STATUS_WT_DELETED       = Cuint(1 << 9)$/;"	v
STATUS_WT_MODIFIED	stdlib/LibGit2/src/consts.jl	/^const STATUS_WT_MODIFIED      = Cuint(1 << 8)$/;"	v
STATUS_WT_NEW	stdlib/LibGit2/src/consts.jl	/^const STATUS_WT_NEW           = Cuint(1 << 7)$/;"	v
STATUS_WT_RENAMED	stdlib/LibGit2/src/consts.jl	/^const STATUS_WT_RENAMED       = Cuint(1 << 11)$/;"	v
STATUS_WT_TYPECHANGE	stdlib/LibGit2/src/consts.jl	/^const STATUS_WT_TYPECHANGE    = Cuint(1 << 10)$/;"	v
STATUS_WT_UNREADABLE	stdlib/LibGit2/src/consts.jl	/^const STATUS_WT_UNREADABLE    = Cuint(1 << 12)$/;"	v
STB_GLOBAL	deps/srccache/patchelf-0.9/src/elf.h	/^#define STB_GLOBAL	/;"	d
STB_GNU_UNIQUE	deps/srccache/patchelf-0.9/src/elf.h	/^#define STB_GNU_UNIQUE	/;"	d
STB_HIOS	deps/srccache/patchelf-0.9/src/elf.h	/^#define STB_HIOS	/;"	d
STB_HIPROC	deps/srccache/patchelf-0.9/src/elf.h	/^#define STB_HIPROC	/;"	d
STB_LOCAL	deps/srccache/patchelf-0.9/src/elf.h	/^#define STB_LOCAL	/;"	d
STB_LOOS	deps/srccache/patchelf-0.9/src/elf.h	/^#define STB_LOOS	/;"	d
STB_LOPROC	deps/srccache/patchelf-0.9/src/elf.h	/^#define STB_LOPROC	/;"	d
STB_MIPS_SPLIT_COMMON	deps/srccache/patchelf-0.9/src/elf.h	/^#define STB_MIPS_SPLIT_COMMON	/;"	d
STB_NUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define	STB_NUM	/;"	d
STB_WEAK	deps/srccache/patchelf-0.9/src/elf.h	/^#define STB_WEAK	/;"	d
STDCALL	src/support/dtypes.h	/^#define STDCALL /;"	d
STDCALL	src/support/dtypes.h	/^#define STDCALL$/;"	d
STDERR_FILENO	src/support/dtypes.h	/^#define STDERR_FILENO /;"	d
STDERR_NO	base/cmd.jl	/^const STDERR_NO = 2$/;"	v
STDIN_FILENO	src/support/dtypes.h	/^#define STDIN_FILENO /;"	d
STDIN_NO	base/cmd.jl	/^const STDIN_NO  = 0$/;"	v
STDLIB	base/sysinfo.jl	/^STDLIB = "$BINDIR\/..\/share\/julia\/stdlib\/v$(VERSION.major).$(VERSION.minor)" # for bootstrap$/;"	v
STDLIBDIR	test/Makefile	/^STDLIBDIR := $(build_datarootdir)\/julia\/stdlib\/$(VERSDIR)$/;"	m
STDLIBS	stdlib/Makefile	/^STDLIBS = Base64 CRC32c Dates DelimitedFiles Distributed FileWatching \\$/;"	m
STDLIBS	test/choosetests.jl	/^const STDLIBS = filter!(x -> isfile(joinpath(STDLIB_DIR, x, "src", "$(x).jl")), readdir(STDLIB_D/;"	v
STDLIBS_EXT	stdlib/Makefile	/^STDLIBS_EXT = Pkg$/;"	m
STDLIBS_LINK_TARGETS	stdlib/Makefile	/^STDLIBS_LINK_TARGETS := $(addprefix $(build_datarootdir)\/julia\/stdlib\/$(VERSDIR)\/,$(STDLIBS)/;"	m
STDLIB_DIR	doc/make.jl	/^const STDLIB_DIR = Sys.STDLIB$/;"	v
STDLIB_DIR	test/choosetests.jl	/^const STDLIB_DIR = Sys.STDLIB$/;"	v
STDLIB_DOCS	doc/make.jl	/^const STDLIB_DOCS = []$/;"	v
STDLIB_SRCS	sysimage.mk	/^STDLIB_SRCS := $(JULIAHOME)\/base\/sysimg.jl $(shell find $(build_datarootdir)\/julia\/stdlib\/$/;"	m
STDOUT_FILENO	src/support/dtypes.h	/^#define STDOUT_FILENO /;"	d
STDOUT_NO	base/cmd.jl	/^const STDOUT_NO = 1$/;"	v
STD_LIB_PATH	Makefile	/^STD_LIB_PATH := $(shell LANG=C $(CC) -print-search-dirs | grep programs | sed -e "s\/^programs: /;"	m
STD_LIB_PATH	Makefile	/^STD_LIB_PATH := $(shell echo '$(STD_LIB_PATH)' | sed -e "s!\/lib\/!\/bin\/!g")$/;"	m
STD_LIB_PATH	Makefile	/^STD_LIB_PATH ?= $(PATH)$/;"	m
STN_UNDEF	deps/srccache/patchelf-0.9/src/elf.h	/^#define STN_UNDEF	/;"	d
STORE_ARRAY_LEN	src/julia.h	/^#define STORE_ARRAY_LEN$/;"	d
STO_ALPHA_NOPV	deps/srccache/patchelf-0.9/src/elf.h	/^#define STO_ALPHA_NOPV	/;"	d
STO_ALPHA_STD_GPLOAD	deps/srccache/patchelf-0.9/src/elf.h	/^#define STO_ALPHA_STD_GPLOAD	/;"	d
STO_MIPS_DEFAULT	deps/srccache/patchelf-0.9/src/elf.h	/^#define STO_MIPS_DEFAULT	/;"	d
STO_MIPS_HIDDEN	deps/srccache/patchelf-0.9/src/elf.h	/^#define STO_MIPS_HIDDEN	/;"	d
STO_MIPS_INTERNAL	deps/srccache/patchelf-0.9/src/elf.h	/^#define STO_MIPS_INTERNAL	/;"	d
STO_MIPS_PLT	deps/srccache/patchelf-0.9/src/elf.h	/^#define STO_MIPS_PLT	/;"	d
STO_MIPS_PROTECTED	deps/srccache/patchelf-0.9/src/elf.h	/^#define STO_MIPS_PROTECTED	/;"	d
STO_MIPS_SC_ALIGN_UNUSED	deps/srccache/patchelf-0.9/src/elf.h	/^#define STO_MIPS_SC_ALIGN_UNUSED	/;"	d
STO_PPC64_LOCAL_BIT	deps/srccache/patchelf-0.9/src/elf.h	/^#define STO_PPC64_LOCAL_BIT	/;"	d
STO_PPC64_LOCAL_MASK	deps/srccache/patchelf-0.9/src/elf.h	/^#define STO_PPC64_LOCAL_MASK	/;"	d
STR	src/interpreter-stacktrace.c	/^#define STR(/;"	d	file:
STR	src/signals-mach.c	/^#define STR(/;"	d	file:
STR	src/support/ENTRY.amd64.h	/^#define STR(/;"	d
STR	src/support/ENTRY.i387.h	/^#define STR(/;"	d
STRING_TAG	stdlib/Serialization/src/Serialization.jl	/^const STRING_TAG = sertag(String)$/;"	v
STRIP	deps/srccache/patchelf-0.9/Makefile.in	/^STRIP = @STRIP@$/;"	m
STRIP	deps/srccache/patchelf-0.9/src/Makefile.in	/^STRIP = @STRIP@$/;"	m
STRIP	deps/srccache/patchelf-0.9/tests/Makefile.in	/^STRIP = @STRIP@$/;"	m
STT_ARM_16BIT	deps/srccache/patchelf-0.9/src/elf.h	/^#define STT_ARM_16BIT	/;"	d
STT_ARM_TFUNC	deps/srccache/patchelf-0.9/src/elf.h	/^#define STT_ARM_TFUNC	/;"	d
STT_COMMON	deps/srccache/patchelf-0.9/src/elf.h	/^#define STT_COMMON	/;"	d
STT_FILE	deps/srccache/patchelf-0.9/src/elf.h	/^#define STT_FILE	/;"	d
STT_FUNC	deps/srccache/patchelf-0.9/src/elf.h	/^#define STT_FUNC	/;"	d
STT_GNU_IFUNC	deps/srccache/patchelf-0.9/src/elf.h	/^#define STT_GNU_IFUNC	/;"	d
STT_HIOS	deps/srccache/patchelf-0.9/src/elf.h	/^#define STT_HIOS	/;"	d
STT_HIPROC	deps/srccache/patchelf-0.9/src/elf.h	/^#define STT_HIPROC	/;"	d
STT_HP_OPAQUE	deps/srccache/patchelf-0.9/src/elf.h	/^#define STT_HP_OPAQUE	/;"	d
STT_HP_STUB	deps/srccache/patchelf-0.9/src/elf.h	/^#define STT_HP_STUB	/;"	d
STT_LOOS	deps/srccache/patchelf-0.9/src/elf.h	/^#define STT_LOOS	/;"	d
STT_LOPROC	deps/srccache/patchelf-0.9/src/elf.h	/^#define STT_LOPROC	/;"	d
STT_NOTYPE	deps/srccache/patchelf-0.9/src/elf.h	/^#define STT_NOTYPE	/;"	d
STT_NUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define	STT_NUM	/;"	d
STT_OBJECT	deps/srccache/patchelf-0.9/src/elf.h	/^#define STT_OBJECT	/;"	d
STT_PARISC_MILLICODE	deps/srccache/patchelf-0.9/src/elf.h	/^#define STT_PARISC_MILLICODE	/;"	d
STT_SECTION	deps/srccache/patchelf-0.9/src/elf.h	/^#define STT_SECTION	/;"	d
STT_SPARC_REGISTER	deps/srccache/patchelf-0.9/src/elf.h	/^#define STT_SPARC_REGISTER	/;"	d
STT_TLS	deps/srccache/patchelf-0.9/src/elf.h	/^#define STT_TLS	/;"	d
STV_DEFAULT	deps/srccache/patchelf-0.9/src/elf.h	/^#define STV_DEFAULT	/;"	d
STV_HIDDEN	deps/srccache/patchelf-0.9/src/elf.h	/^#define STV_HIDDEN	/;"	d
STV_INTERNAL	deps/srccache/patchelf-0.9/src/elf.h	/^#define STV_INTERNAL	/;"	d
STV_PROTECTED	deps/srccache/patchelf-0.9/src/elf.h	/^#define STV_PROTECTED	/;"	d
SUBDIRS	deps/srccache/patchelf-0.9/Makefile.am	/^SUBDIRS = src tests$/;"	m
SUBDIRS	deps/srccache/patchelf-0.9/Makefile.in	/^SUBDIRS = src tests$/;"	m
SUB_CHAR	base/regex.jl	/^const SUB_CHAR = '\\\\'$/;"	v
SUITESPARSE_BB_NAME	deps/suitesparse.mk	/^SUITESPARSE_BB_NAME := SuiteSparse.v$(SUITESPARSE_VER)$/;"	m
SUITESPARSE_BB_URL_BASE	deps/suitesparse.mk	/^SUITESPARSE_BB_URL_BASE := https:\/\/github.com\/JuliaPackaging\/Yggdrasil\/releases\/download\//;"	m
SUITESPARSE_INC	deps/suitesparse.mk	/^SUITESPARSE_INC := -I $(BUILDDIR)\/SuiteSparse-$(SUITESPARSE_VER)\/CHOLMOD\/Include -I $(BUILDDI/;"	m
SUITESPARSE_INC	deps/suitesparse.mk	/^SUITESPARSE_INC := -I $(LOCALBASE)\/include\/suitesparse$/;"	m
SUITESPARSE_LIB	deps/suitesparse.mk	/^SUITESPARSE_LIB := -L$(build_shlibdir) -lcholmod -lumfpack -lspqr $(RPATH_ORIGIN)$/;"	m
SUITESPARSE_LIB	deps/suitesparse.mk	/^SUITESPARSE_LIB := -lumfpack -lcholmod -lamd -lcamd -lcolamd -lspqr$/;"	m
SUITESPARSE_LIBS	deps/suitesparse.mk	/^SUITESPARSE_LIBS := $(addsuffix .*$(SHLIB_EXT)*,suitesparseconfig amd camd ccolamd colamd cholmo/;"	m
SUITESPARSE_MFLAGS	deps/suitesparse.mk	/^SUITESPARSE_MFLAGS := CC="$(CC)" CXX="$(CXX)" F77="$(FC)" AR="$(AR)" RANLIB="$(RANLIB)" BLAS="$(/;"	m
SUITESPARSE_PROJECTS	deps/suitesparse.mk	/^SUITESPARSE_PROJECTS := AMD CAMD CCOLAMD COLAMD CHOLMOD UMFPACK SPQR$/;"	m
SUITESPARSE_SHLIB_ENV	deps/suitesparse.mk	/^SUITESPARSE_SHLIB_ENV:=LD_LIBRARY_PATH="$(build_shlibdir)"$/;"	m
SUITESPARSE_SHLIB_ENV	deps/suitesparse.mk	/^SUITESPARSE_SHLIB_ENV:=PATH="$(abspath $(dir $<))lib:$(build_bindir):$(PATH)"$/;"	m
SUITE_SPARSE_LIB	deps/suitesparse.mk	/^SUITE_SPARSE_LIB := $(LDFLAGS) -L"$(abspath $(BUILDDIR))\/SuiteSparse-$(SUITESPARSE_VER)\/lib"$/;"	m
SVD	stdlib/LinearAlgebra/src/svd.jl	/^    function SVD{T,Tr,M}(U, S, Vt) where {T,Tr,M<:AbstractArray{T}}$/;"	f
SVD	stdlib/LinearAlgebra/src/svd.jl	/^SVD(U::AbstractArray{T}, S::Vector{Tr}, Vt::AbstractArray{T}) where {T,Tr} = SVD{T,Tr,typeof(U)}/;"	f
SVD	stdlib/LinearAlgebra/src/svd.jl	/^function SVD{T}(U::AbstractArray, S::AbstractVector{Tr}, Vt::AbstractArray) where {T,Tr}$/;"	f
SVD	stdlib/LinearAlgebra/src/svd.jl	/^struct SVD{T,Tr,M<:AbstractArray{T}} <: Factorization{T}$/;"	f
SWAP_INT16	src/flisp/flisp.c	/^#define SWAP_INT16(/;"	d	file:
SWAP_INT32	src/flisp/flisp.c	/^#define SWAP_INT32(/;"	d	file:
SWAP_sf	src/flisp/cvalues.c	/^#define SWAP_sf(/;"	d	file:
SYM	stdlib/SuiteSparse/src/cholmod_h.jl	/^const SYM    = Int32(3)        # A = diag(s)*A*diag(s)$/;"	v
SYMBOL_TAG	stdlib/Serialization/src/Serialization.jl	/^const SYMBOL_TAG = sertag(Symbol)$/;"	v
SYMINFO_BT_LOWRESERVE	deps/srccache/patchelf-0.9/src/elf.h	/^#define SYMINFO_BT_LOWRESERVE	/;"	d
SYMINFO_BT_PARENT	deps/srccache/patchelf-0.9/src/elf.h	/^#define SYMINFO_BT_PARENT	/;"	d
SYMINFO_BT_SELF	deps/srccache/patchelf-0.9/src/elf.h	/^#define SYMINFO_BT_SELF	/;"	d
SYMINFO_CURRENT	deps/srccache/patchelf-0.9/src/elf.h	/^#define SYMINFO_CURRENT	/;"	d
SYMINFO_FLG_COPY	deps/srccache/patchelf-0.9/src/elf.h	/^#define SYMINFO_FLG_COPY	/;"	d
SYMINFO_FLG_DIRECT	deps/srccache/patchelf-0.9/src/elf.h	/^#define SYMINFO_FLG_DIRECT	/;"	d
SYMINFO_FLG_LAZYLOAD	deps/srccache/patchelf-0.9/src/elf.h	/^#define SYMINFO_FLG_LAZYLOAD	/;"	d
SYMINFO_FLG_PASSTHRU	deps/srccache/patchelf-0.9/src/elf.h	/^#define SYMINFO_FLG_PASSTHRU	/;"	d
SYMINFO_NONE	deps/srccache/patchelf-0.9/src/elf.h	/^#define SYMINFO_NONE	/;"	d
SYMINFO_NUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define SYMINFO_NUM	/;"	d
SYMLINK_SYSTEM_LIBRARIES	base/Makefile	/^SYMLINK_SYSTEM_LIBRARIES :=$/;"	m
SYNOPSIS	deps/srccache/patchelf-0.9/patchelf.1	/^.SH SYNOPSIS$/;"	s	title:PATCHELF
SYNOPSIS	doc/man/julia.1	/^.SH SYNOPSIS$/;"	s	title:JULIA
SZ_UNBUFFERED_IO	base/io.jl	/^const SZ_UNBUFFERED_IO = 65536$/;"	v
S_HOUR	src/support/strptime.c	/^#define S_HOUR	/;"	d	file:
S_IRGRP	base/filesystem.jl	/^const S_IRGRP = 0o040$/;"	v
S_IROTH	base/filesystem.jl	/^const S_IROTH = 0o004$/;"	v
S_IRUSR	base/filesystem.jl	/^const S_IRUSR = 0o400$/;"	v
S_IRWXG	base/filesystem.jl	/^const S_IRWXG = 0o070$/;"	v
S_IRWXO	base/filesystem.jl	/^const S_IRWXO = 0o007$/;"	v
S_IRWXU	base/filesystem.jl	/^const S_IRWXU = 0o700$/;"	v
S_IWGRP	base/filesystem.jl	/^const S_IWGRP = 0o020$/;"	v
S_IWOTH	base/filesystem.jl	/^const S_IWOTH = 0o002$/;"	v
S_IWUSR	base/filesystem.jl	/^const S_IWUSR = 0o200$/;"	v
S_IXGRP	base/filesystem.jl	/^const S_IXGRP = 0o010$/;"	v
S_IXOTH	base/filesystem.jl	/^const S_IXOTH = 0o001$/;"	v
S_IXUSR	base/filesystem.jl	/^const S_IXUSR = 0o100$/;"	v
S_MDAY	src/support/strptime.c	/^#define S_MDAY	/;"	d	file:
S_MON	src/support/strptime.c	/^#define S_MON	/;"	d	file:
S_WDAY	src/support/strptime.c	/^#define S_WDAY	/;"	d	file:
S_YDAY	src/support/strptime.c	/^#define S_YDAY	/;"	d	file:
S_YEAR	src/support/strptime.c	/^#define S_YEAR	/;"	d	file:
SafepointNumbering	src/llvm-late-gc-lowering.cpp	/^    std::map<Instruction *, int> SafepointNumbering;$/;"	m	struct:State	typeref:typename:std::map<Instruction *,int>	file:
Safepoints	src/llvm-late-gc-lowering.cpp	/^    std::vector<int> Safepoints;$/;"	m	struct:BBState	typeref:typename:std::vector<int>	file:
Sampler	stdlib/Random/src/RNGs.jl	/^    @eval Sampler(::Type{MersenneTwister}, r::UnitRange{$T}, ::Val{$R}) =$/;"	f
Sampler	stdlib/Random/src/Random.jl	/^Sampler(::Type{<:AbstractRNG}, ::Type{T}, ::Repetition) where {T} = SamplerType{T}()$/;"	f
Sampler	stdlib/Random/src/Random.jl	/^Sampler(::Type{<:AbstractRNG}, sp::Sampler, ::Repetition) =$/;"	f
Sampler	stdlib/Random/src/Random.jl	/^Sampler(::Type{<:AbstractRNG}, x, ::Repetition) = SamplerTrivial(x)$/;"	f
Sampler	stdlib/Random/src/Random.jl	/^Sampler(::Type{RNG}, ::Type{X}) where {RNG<:AbstractRNG,X} = Sampler(RNG, X, Val(Inf))$/;"	f
Sampler	stdlib/Random/src/Random.jl	/^Sampler(::Type{RNG}, X) where {RNG<:AbstractRNG} = Sampler(RNG, X, Val(Inf))$/;"	f
Sampler	stdlib/Random/src/Random.jl	/^Sampler(rng::AbstractRNG, ::Type{X}, r::Repetition=Val(Inf)) where {X} = Sampler(typeof(rng), X,/;"	f
Sampler	stdlib/Random/src/Random.jl	/^Sampler(rng::AbstractRNG, x, r::Repetition=Val(Inf)) = Sampler(typeof(rng), x, r)$/;"	f
Sampler	stdlib/Random/src/Random.jl	/^abstract type Sampler{E} end$/;"	f
Sampler	stdlib/Random/src/generation.jl	/^Sampler(::Type{<:AbstractRNG}, I::FloatInterval{BigFloat}, ::Repetition) =$/;"	f
Sampler	stdlib/Random/src/generation.jl	/^Sampler(::Type{<:AbstractRNG}, t::Tuple{A}, ::Repetition) where {A} =$/;"	f
Sampler	stdlib/Random/src/generation.jl	/^Sampler(::Type{RNG}, ::Type{T}, n::Repetition) where {RNG<:AbstractRNG,T<:AbstractFloat} =$/;"	f
Sampler	stdlib/Random/src/generation.jl	/^Sampler(::Type{RNG}, r::AbstractArray, n::Repetition) where {RNG<:AbstractRNG} =$/;"	f
Sampler	stdlib/Random/src/generation.jl	/^Sampler(::Type{RNG}, t::Set{T}, n::Repetition) where {RNG<:AbstractRNG,T} =$/;"	f
Sampler	stdlib/Random/src/generation.jl	/^Sampler(RNG::Type{<:AbstractRNG}, str::AbstractString, ::Val{1}) =$/;"	f
Sampler	stdlib/Random/src/generation.jl	/^Sampler(RNG::Type{<:AbstractRNG}, str::AbstractString, n::Val{Inf}) = Sampler(RNG, collect(str),/;"	f
Sampler	stdlib/Random/src/generation.jl	/^Sampler(RNG::Type{<:AbstractRNG}, t::Tuple, n::Repetition) =$/;"	f
Sampler	stdlib/Random/src/generation.jl	/^Sampler(RNG::Type{<:AbstractRNG}, t::Tuple{A,B,C,D}, n::Repetition) where {A,B,C,D} =$/;"	f
Sampler	stdlib/Random/src/generation.jl	/^Sampler(RNG::Type{<:AbstractRNG}, t::Tuple{A,B,C}, n::Repetition) where {A,B,C} =$/;"	f
Sampler	stdlib/Random/src/generation.jl	/^Sampler(RNG::Type{<:AbstractRNG}, t::Tuple{A,B}, n::Repetition) where {A,B} =$/;"	f
Sampler	stdlib/Random/src/generation.jl	/^Sampler(RNG::Type{<:AbstractRNG}, t::Union{AbstractDict,AbstractSet}, n::Repetition) =$/;"	f
Sampler	stdlib/Random/src/generation.jl	/^function Sampler(::Type{<:AbstractRNG}, r::AbstractUnitRange{BigInt}, ::Repetition)$/;"	f
Sampler	stdlib/Random/src/generation.jl	/^function Sampler(::Type{RNG}, t::Dict, ::Repetition) where RNG<:AbstractRNG$/;"	f
Sampler	stdlib/Random/src/generation.jl	/^function Sampler(RNG::Type{<:AbstractRNG}, t::BitSet, n::Repetition)$/;"	f
Sampler11587	test/core.jl	/^function Sampler11587()$/;"	f
Sampler11587	test/core.jl	/^mutable struct Sampler11587{N}$/;"	f
SamplerBigFloat	stdlib/Random/src/generation.jl	/^    function SamplerBigFloat{I}(prec::Int) where I<:FloatInterval{BigFloat}$/;"	f
SamplerBigFloat	stdlib/Random/src/generation.jl	/^struct SamplerBigFloat{I<:FloatInterval{BigFloat}} <: Sampler{BigFloat}$/;"	f
SamplerBigInt	stdlib/Random/src/generation.jl	/^struct SamplerBigInt <: Sampler{BigInt}$/;"	f
SamplerBoolBitInteger	stdlib/Random/src/RNGs.jl	/^const SamplerBoolBitInteger = SamplerUnion(Bool, BitInteger_types...)$/;"	v
SamplerRangeFast	stdlib/Random/src/generation.jl	/^function SamplerRangeFast(r::AbstractUnitRange{T}, ::Type{U}) where {T,U}$/;"	f
SamplerRangeFast	stdlib/Random/src/generation.jl	/^struct SamplerRangeFast{U<:BitUnsigned,T<:BitInteger} <: Sampler{T}$/;"	f
SamplerRangeInt	stdlib/Random/src/generation.jl	/^function SamplerRangeInt(r::AbstractUnitRange{T}, ::Type{U}) where {T,U}$/;"	f
SamplerRangeInt	stdlib/Random/src/generation.jl	/^struct SamplerRangeInt{T<:Integer,U<:Unsigned} <: Sampler{T}$/;"	f
SamplerSimple	stdlib/Random/src/Random.jl	/^SamplerSimple(x::T, data::S) where {T,S} = SamplerSimple{T,S,gentype(T)}(x, data)$/;"	f
SamplerSimple	stdlib/Random/src/Random.jl	/^struct SamplerSimple{T,S,E} <: Sampler{E}$/;"	f
SamplerTag	stdlib/Random/src/Random.jl	/^struct SamplerTag{T,S,E} <: Sampler{E}$/;"	f
SamplerTrivial	stdlib/Random/src/Random.jl	/^SamplerTrivial(x::T) where {T} = SamplerTrivial{T,gentype(T)}(x)$/;"	f
SamplerTrivial	stdlib/Random/src/Random.jl	/^struct SamplerTrivial{T,E} <: Sampler{E}$/;"	f
SamplerType	stdlib/Random/src/Random.jl	/^struct SamplerType{T} <: Sampler{T} end$/;"	f
SamplerUnion	stdlib/Random/src/RNGs.jl	/^SamplerUnion(U...) = Union{Any[SamplerType{T} for T in U]...}$/;"	f
Sanitizer support	doc/src/devdocs/sanitizers.md	/^# Sanitizer support$/;"	c
SavedObjects	src/jitlayers.h	/^        std::vector<object::OwningBinary<object::ObjectFile>> SavedObjects;$/;"	m	class:JuliaOJIT::DebugObjectRegistrar	typeref:typename:std::vector<object::OwningBinary<object::ObjectFile>>
ScalarIndex	base/subarray.jl	/^const ScalarIndex = Real$/;"	v
ScaleMinMax	test/ambiguous.jl	/^struct ScaleMinMax{To,From} end$/;"	f
Scheduling	doc/src/base/parallel.md	/^# Scheduling$/;"	c
Schur	stdlib/LinearAlgebra/src/schur.jl	/^Schur(T::AbstractMatrix{Ty}, Z::AbstractMatrix{Ty}, values::Vector) where {Ty} = Schur{Ty, typeo/;"	f
Schur	stdlib/LinearAlgebra/src/schur.jl	/^struct Schur{Ty,S<:AbstractMatrix} <: Factorization{Ty}$/;"	f
Search modes	stdlib/REPL/docs/src/index.md	/^### Search modes$/;"	S
SearchState	stdlib/REPL/src/LineEdit.jl	/^    SearchState(terminal, histprompt, backward, query_buffer, response_buffer) =$/;"	f
SearchState	stdlib/REPL/src/LineEdit.jl	/^mutable struct SearchState <: ModeState$/;"	f
SecDummy	contrib/windows/build-installer.nsi	/^Section "Dummy Section" SecDummy$/;"	d
SecretBuffer	base/secretbuffer.jl	/^    function SecretBuffer(; sizehint=128)$/;"	f
SecretBuffer	base/secretbuffer.jl	/^SecretBuffer(str::AbstractString) = SecretBuffer(String(str))$/;"	f
SecretBuffer	base/secretbuffer.jl	/^function SecretBuffer(str::String)$/;"	f
SecretBuffer	base/secretbuffer.jl	/^mutable struct SecretBuffer <: IO$/;"	f
SecretBuffer!	base/secretbuffer.jl	/^function SecretBuffer!(d::Vector{UInt8})$/;"	f
SectionName	deps/srccache/patchelf-0.9/src/patchelf.cc	/^    typedef string SectionName;$/;"	t	class:ElfFile	typeref:typename:string	file:
SectionSize	src/debuginfo.cpp	/^    size_t SectionSize;$/;"	m	struct:ObjectInfo	typeref:typename:size_t	file:
Security Policy	.github/SECURITY.md	/^# Security Policy$/;"	c
Segfaults during bootstrap (`sysimg.jl`)	doc/src/devdocs/backtraces.md	/^## Segfaults during bootstrap (`sysimg.jl`)$/;"	s
Segfaults when running a script	doc/src/devdocs/backtraces.md	/^## Segfaults when running a script$/;"	s
SegmentationFault	base/boot.jl	/^struct SegmentationFault   <: Exception end$/;"	f
Selecting an appropriate output array	doc/src/manual/interfaces.md	/^### Selecting an appropriate output array$/;"	S
SelfMemAllocator	src/cgmemmgr.cpp	/^    SelfMemAllocator()$/;"	f	class:__anon06c686bc0111::SelfMemAllocator	file:
SelfMemAllocator	src/cgmemmgr.cpp	/^class SelfMemAllocator : public ROAllocator<exec> {$/;"	c	namespace:__anon06c686bc0111	file:
Semaphore	base/lock.jl	/^    Semaphore(sem_size) = sem_size > 0 ? new(sem_size, 0, Threads.Condition()) : throw(ArgumentE/;"	f
Semaphore	base/lock.jl	/^mutable struct Semaphore$/;"	f
Sep	stdlib/Dates/src/query.jl	/^const Sep = 9$/;"	v
Sep	stdlib/Dates/test/adjusters.jl	/^Sep = Dates.DateTime(2013, 9, 9) #Monday$/;"	v
Sep	stdlib/Dates/test/query.jl	/^Sep = Dates.DateTime(2013, 9, 9) # Monday$/;"	v
Separate convert and kernel logic	doc/src/manual/methods.md	/^### Separate convert and kernel logic$/;"	S
September	stdlib/Dates/src/query.jl	/^const September = 9$/;"	v
Serialization	stdlib/Serialization/docs/src/index.md	/^# Serialization$/;"	c
Serialization	stdlib/Serialization/src/Serialization.jl	/^module Serialization$/;"	f
Serialization.deserialize	stdlib/Distributed/test/distributed_exec.jl	/^    Serialization.deserialize(s::AbstractSerializer, ::Type{TestSerCnt}) = TestSerCnt(deserializ/;"	f
Serialization.serialize	stdlib/Distributed/test/distributed_exec.jl	/^    function Serialization.serialize(s::AbstractSerializer, t::TestSerCnt)$/;"	f
Serializer	stdlib/Serialization/src/Serialization.jl	/^Serializer(io::IO) = Serializer{typeof(io)}(io)$/;"	f
Serializer	stdlib/Serialization/src/Serialization.jl	/^mutable struct Serializer{I<:IO} <: AbstractSerializer$/;"	f
ServiceDelegate	contrib/mac/frameworkapp/ExecSandbox/main.m	/^@implementation ServiceDelegate$/;"	I
ServiceDelegate	contrib/mac/frameworkapp/ExecSandbox/main.m	/^@interface ServiceDelegate : NSObject <NSXPCListenerDelegate>$/;"	i	protocols:NSXPCListenerDelegate
ServiceType	contrib/mac/frameworkapp/ExecSandbox/Info.plist	/^		<key>ServiceType<\/key>$/;"	k	key:XPCService
Sessions and the REPL	doc/src/manual/faq.md	/^## Sessions and the REPL$/;"	s
Set	base/set.jl	/^Set() = Set{Any}()$/;"	f
Set	base/set.jl	/^Set(itr) = _Set(itr, IteratorEltype(itr))$/;"	f
Set	base/set.jl	/^struct Set{T} <: AbstractSet{T}$/;"	f
Set	src/julia-parser.scm	/^(define (Set l)$/;"	f
Set-Like Collections	doc/src/base/collections.md	/^## Set-Like Collections$/;"	s
SetVerbosity	src/disasm.cpp	/^    void SetVerbosity(const char *c)$/;"	f	class:DILineInfoPrinter	typeref:typename:void	file:
Setting up PackageEvaluator	doc/build/distributing.md	/^### Setting up PackageEvaluator$/;"	S
Setup	doc/src/manual/parallel-computing.md	/^## Setup$/;"	s
Sgnd	test/core.jl	/^mutable struct Sgnd <: Signed$/;"	f
Shape31406	test/core.jl	/^abstract type Shape31406 end$/;"	f
Shared Arrays	stdlib/SharedArrays/docs/src/index.md	/^# Shared Arrays$/;"	c
Shared Arrays and Distributed Garbage Collection	doc/src/manual/parallel-computing.md	/^### Shared Arrays and Distributed Garbage Collection$/;"	S
Shared Global Data Structures	doc/src/devdocs/locks.md	/^## Shared Global Data Structures$/;"	s
SharedArray	stdlib/SharedArrays/src/SharedArrays.jl	/^    function SharedArray{T,N}(d,p,r,sn,s) where {T,N}$/;"	f
SharedArray	stdlib/SharedArrays/src/SharedArrays.jl	/^function SharedArray(A::Array)$/;"	f
SharedArray	stdlib/SharedArrays/src/SharedArrays.jl	/^function SharedArray{T,N}(dims::Dims{N}; init=false, pids=Int[]) where {T,N}$/;"	f
SharedArray	stdlib/SharedArrays/src/SharedArrays.jl	/^function SharedArray{T,N}(filename::AbstractString, dims::NTuple{N,Int}, offset::Integer=0;$/;"	f
SharedArray	stdlib/SharedArrays/src/SharedArrays.jl	/^function SharedArray{TS,N}(A::Array{TA,N}) where {TS,TA,N}$/;"	f
SharedArray	stdlib/SharedArrays/src/SharedArrays.jl	/^function SharedArray{T}(A::Array) where T$/;"	f
SharedArray	stdlib/SharedArrays/src/SharedArrays.jl	/^mutable struct SharedArray{T,N} <: DenseArray{T,N}$/;"	f
SharedArrays	stdlib/SharedArrays/src/SharedArrays.jl	/^module SharedArrays$/;"	f
SharedMatrix	stdlib/SharedArrays/src/SharedArrays.jl	/^SharedMatrix(A::Matrix) = SharedArray(A)$/;"	f
SharedVector	stdlib/SharedArrays/src/SharedArrays.jl	/^SharedVector(A::Vector) = SharedArray(A)$/;"	f
Shell	stdlib/Serialization/test/runtests.jl	/^module Shell$/;"	f
Shell.foo	stdlib/Serialization/test/runtests.jl	/^Shell.foo(x::Int) = "This is an Int"$/;"	f
ShellCompletion	stdlib/REPL/src/REPLCompletions.jl	/^struct ShellCompletion <: Completion$/;"	f
ShellCompletionProvider	stdlib/REPL/src/REPL.jl	/^mutable struct ShellCompletionProvider <: CompletionProvider end$/;"	f
ShmemFoo	stdlib/SharedArrays/test/runtests.jl	/^@everywhere struct ShmemFoo end$/;"	f
Short-Circuit Evaluation	doc/src/manual/control-flow.md	/^## Short-Circuit Evaluation$/;"	s
ShowInstallFolder	contrib/windows/build-installer.nsi	/^Function ShowInstallFolder$/;"	f
Side effects and mutable function arguments	doc/src/manual/parallel-computing.md	/^## Side effects and mutable function arguments$/;"	s
Sigma0_256	stdlib/SHA/src/base_functions.jl	/^Sigma0_256(x) = (S32(2,  UInt32(x)) ⊻ S32(13, UInt32(x)) ⊻ S32(22, UInt32(x)))$/;"	f
Sigma0_512	stdlib/SHA/src/base_functions.jl	/^Sigma0_512(x) = (S64(28, UInt64(x)) ⊻ S64(34, UInt64(x)) ⊻ S64(39, UInt64(x)))$/;"	f
Sigma1_256	stdlib/SHA/src/base_functions.jl	/^Sigma1_256(x) = (S32(6,  UInt32(x)) ⊻ S32(11, UInt32(x)) ⊻ S32(25, UInt32(x)))$/;"	f
Sigma1_512	stdlib/SHA/src/base_functions.jl	/^Sigma1_512(x) = (S64(14, UInt64(x)) ⊻ S64(18, UInt64(x)) ⊻ S64(41, UInt64(x)))$/;"	f
Sign and absolute value functions	doc/src/manual/mathematical-operations.md	/^### Sign and absolute value functions$/;"	S
Signature	base/compiler/ssair/inlining.jl	/^    Signature(f, ft, atypes) = new(f, ft, atypes)$/;"	f
Signature	base/compiler/ssair/inlining.jl	/^    Signature(f, ft, atypes, atype) = new(f, ft, atypes, atype)$/;"	f
Signature	base/compiler/ssair/inlining.jl	/^struct Signature$/;"	f
Signature	stdlib/LibGit2/src/signature.jl	/^Signature(sig::GitSignature) = Signature(sig.ptr)$/;"	f
Signature	stdlib/LibGit2/src/signature.jl	/^function Signature(name::AbstractString, email::AbstractString)$/;"	f
Signature	stdlib/LibGit2/src/signature.jl	/^function Signature(ptr::Ptr{SignatureStruct})$/;"	f
Signature	stdlib/LibGit2/src/signature.jl	/^function Signature(repo::GitRepo)$/;"	f
Signature	stdlib/LibGit2/src/types.jl	/^mutable struct Signature$/;"	f
SignatureStruct	stdlib/LibGit2/src/types.jl	/^struct SignatureStruct$/;"	f
Signed	base/boot.jl	/^Signed(x::UInt128)  = Int128(x)$/;"	f
Signed	base/boot.jl	/^Signed(x::UInt16)   = Int16(x)$/;"	f
Signed	base/boot.jl	/^Signed(x::UInt32)   = Int32(x)$/;"	f
Signed	base/boot.jl	/^Signed(x::UInt64)   = Int64(x)$/;"	f
Signed	base/boot.jl	/^Signed(x::UInt8)    = Int8(x)$/;"	f
Signed	base/boot.jl	/^Signed(x::Union{Float32, Float64, Bool})   = Int(x)$/;"	f
Signed	base/boot.jl	/^abstract type Signed   <: Integer end$/;"	f
Signed	base/gmp.jl	/^Signed(x::BigInt) = x$/;"	f
SignedInt	base/checked.jl	/^const SignedInt = Union{Int8,Int16,Int32,Int64,Int128}$/;"	v
SignedInt	base/compiler/compiler.jl	/^const SignedInt = Union{Int8,Int16,Int32,Int64,Int128}$/;"	v
SignedMultiplicativeInverse	base/multinverses.jl	/^    function SignedMultiplicativeInverse{T}(d::T) where T<:Signed$/;"	f
SignedMultiplicativeInverse	base/multinverses.jl	/^SignedMultiplicativeInverse(x::Signed) = SignedMultiplicativeInverse{typeof(x)}(x)$/;"	f
SignedMultiplicativeInverse	base/multinverses.jl	/^struct SignedMultiplicativeInverse{T<:Signed} <: MultiplicativeInverse{T}$/;"	f
SignificandMask	base/grisu/float.jl	/^SignificandMask(::Type{Float16}) = 0x03ff$/;"	f
SignificandMask	base/grisu/float.jl	/^SignificandMask(::Type{Float32}) = 0x007FFFFF$/;"	f
SignificandMask	base/grisu/float.jl	/^SignificandMask(::Type{Float64}) = 0x000FFFFFFFFFFFFF$/;"	f
SignificandSize	base/grisu/float.jl	/^SignificandSize(::Type{Float16}) = Int32(11)$/;"	f
SignificandSize	base/grisu/float.jl	/^SignificandSize(::Type{Float32}) = Int32(24)$/;"	f
SignificandSize	base/grisu/float.jl	/^SignificandSize(::Type{Float64}) = Int32(53)$/;"	f
Signing binaries	doc/build/distributing.md	/^## Signing binaries$/;"	s
SillyArray	stdlib/Test/test/runtests.jl	/^struct SillyArray <: AbstractArray{Float64,1} end$/;"	f
SimdError	base/simdloop.jl	/^struct SimdError <: Exception$/;"	f
SimdLoop	base/simdloop.jl	/^module SimdLoop$/;"	f
SimilarUR	test/offsetarray.jl	/^module SimilarUR$/;"	f
SimpleCartesian	base/compiler/ssair/inlining.jl	/^struct SimpleCartesian$/;"	f
SimpleLogger	base/logging.jl	/^SimpleLogger(stream::IO=stderr, level=Info) = SimpleLogger(stream, level, Dict{Any,Int}())$/;"	f
SimpleLogger	base/logging.jl	/^struct SimpleLogger <: AbstractLogger$/;"	f
SimpleTest9222	test/compiler/inference.jl	/^function SimpleTest9222(pdedata, mu_actual::Vector{T1},$/;"	f
SingularException	stdlib/LinearAlgebra/src/exceptions.jl	/^struct SingularException <: Exception$/;"	f
SizeUnknown	base/generator.jl	/^struct SizeUnknown <: IteratorSize end$/;"	f
SkipMissing	base/missing.jl	/^struct SkipMissing{T}$/;"	f
Skipping Missing Values	doc/src/manual/missing.md	/^## Skipping Missing Values$/;"	s
Slice	base/indices.jl	/^Slice(S::Slice) = S$/;"	f
Slice	base/indices.jl	/^struct Slice{T<:AbstractUnitRange} <: AbstractUnitRange{Int}$/;"	f
SlotInfo	base/compiler/ssair/slot2ssa.jl	/^SlotInfo() = SlotInfo(Int[], Int[], false)$/;"	f
SlotInfo	base/compiler/ssair/slot2ssa.jl	/^mutable struct SlotInfo$/;"	f
SmallFloatingPoint	base/printf.jl	/^const SmallFloatingPoint = Union{Float64,Float32,Float16}$/;"	v
SmallNumber	base/printf.jl	/^const SmallNumber = Union{SmallFloatingPoint,Base.BitInteger}$/;"	v
SmallPowersOfTen	base/grisu/fastshortest.jl	/^const SmallPowersOfTen = [$/;"	v
Sockets	HISTORY.md	/^#### Sockets$/;"	t
Sockets	NEWS.md	/^#### Sockets$/;"	t
Sockets	stdlib/Sockets/docs/src/index.md	/^# Sockets$/;"	c
Sockets	stdlib/Sockets/src/Sockets.jl	/^module Sockets$/;"	f
Some	base/some.jl	/^struct Some{T}$/;"	f
SomeArbitraryStruct;	test/compiler/inline.jl	/^struct SomeArbitraryStruct; end$/;"	f
SomeFunctor	test/reduce.jl	/^struct SomeFunctor end$/;"	f
SometimesDefined	test/compiler/inference.jl	/^    function SometimesDefined()$/;"	f
SometimesDefined	test/compiler/inference.jl	/^mutable struct SometimesDefined$/;"	f
Sort	base/sort.jl	/^module Sort$/;"	f
Sorting Algorithms	doc/src/base/sort.md	/^## Sorting Algorithms$/;"	s
Sorting Functions	doc/src/base/sort.md	/^## Sorting Functions$/;"	s
Sorting and Related Functions	doc/src/base/sort.md	/^# Sorting and Related Functions$/;"	c
SortingTests	test/sorting.jl	/^module SortingTests$/;"	f
Source Code Organization	README.md	/^## Source Code Organization$/;"	s
Source distribution	doc/build/windows.md	/^## Source distribution$/;"	s
Source0	deps/srccache/patchelf-0.9/patchelf.spec	/^Source0: %{name}-%{version}.tar.bz2$/;"	t
Source0	deps/srccache/patchelf-0.9/patchelf.spec.in	/^Source0: %{name}-%{version}.tar.bz2$/;"	t
Sparse	stdlib/SuiteSparse/src/cholmod.jl	/^    function Sparse{Tv}(ptr::Ptr{C_Sparse{Tv}}) where Tv<:VTypes$/;"	f
Sparse	stdlib/SuiteSparse/src/cholmod.jl	/^Sparse(A::Dense) = dense_to_sparse(A, SuiteSparse_long)$/;"	f
Sparse	stdlib/SuiteSparse/src/cholmod.jl	/^Sparse(A::Hermitian{Tv,SparseMatrixCSC{Tv,Ti}}) where {Tv, Ti} =$/;"	f
Sparse	stdlib/SuiteSparse/src/cholmod.jl	/^Sparse(A::SparseVector) = Sparse(SparseMatrixCSC(A))$/;"	f
Sparse	stdlib/SuiteSparse/src/cholmod.jl	/^Sparse(A::Symmetric{Tv, SparseMatrixCSC{Tv,Ti}}) where {Tv<:Real, Ti} =$/;"	f
Sparse	stdlib/SuiteSparse/src/cholmod.jl	/^Sparse(L::Factor) = factor_to_sparse!(copy(L))$/;"	f
Sparse	stdlib/SuiteSparse/src/cholmod.jl	/^Sparse(p::Ptr{C_Sparse{Tv}}) where {Tv<:VTypes} = Sparse{Tv}(p)$/;"	f
Sparse	stdlib/SuiteSparse/src/cholmod.jl	/^function Sparse(A::SparseMatrixCSC)$/;"	f
Sparse	stdlib/SuiteSparse/src/cholmod.jl	/^function Sparse(A::SparseMatrixCSC{Tv,SuiteSparse_long}, stype::Integer) where {Tv}$/;"	f
Sparse	stdlib/SuiteSparse/src/cholmod.jl	/^function Sparse(filename::String)$/;"	f
Sparse	stdlib/SuiteSparse/src/cholmod.jl	/^function Sparse(m::Integer, n::Integer,$/;"	f
Sparse	stdlib/SuiteSparse/src/cholmod.jl	/^function Sparse(p::Ptr{C_Sparse{Cvoid}})$/;"	f
Sparse	stdlib/SuiteSparse/src/cholmod.jl	/^function Sparse{Tv}(A::SparseMatrixCSC, stype::Integer) where Tv<:VTypes$/;"	f
Sparse	stdlib/SuiteSparse/src/cholmod.jl	/^mutable struct Sparse{Tv<:VTypes} <: AbstractSparseMatrix{Tv,SuiteSparse_long}$/;"	f
Sparse Arrays	stdlib/SparseArrays/docs/src/index.md	/^# Sparse Arrays$/;"	c
Sparse Vector Storage	stdlib/SparseArrays/docs/src/index.md	/^## Sparse Vector Storage$/;"	s
Sparse Vector and Matrix Constructors	stdlib/SparseArrays/docs/src/index.md	/^## Sparse Vector and Matrix Constructors$/;"	s
Sparse matrix operations	stdlib/SparseArrays/docs/src/index.md	/^## Sparse matrix operations$/;"	s
SparseArrays	HISTORY.md	/^#### SparseArrays$/;"	t
SparseArrays	NEWS.md	/^#### SparseArrays$/;"	t
SparseArrays	stdlib/SparseArrays/src/SparseArrays.jl	/^module SparseArrays$/;"	f
SparseMatStyle	stdlib/SparseArrays/src/higherorderfns.jl	/^SparseMatStyle(::Val{0}) = SparseMatStyle()$/;"	f
SparseMatStyle	stdlib/SparseArrays/src/higherorderfns.jl	/^SparseMatStyle(::Val{1}) = SparseMatStyle()$/;"	f
SparseMatStyle	stdlib/SparseArrays/src/higherorderfns.jl	/^SparseMatStyle(::Val{2}) = SparseMatStyle()$/;"	f
SparseMatStyle	stdlib/SparseArrays/src/higherorderfns.jl	/^struct SparseMatStyle <: Broadcast.AbstractArrayStyle{2} end$/;"	f
SparseMatrixCSC	stdlib/SparseArrays/src/sparseconvert.jl	/^    @eval SparseMatrixCSC(A::$wr) = _sparsem(A)$/;"	f
SparseMatrixCSC	stdlib/SparseArrays/src/sparsematrix.jl	/^    function SparseMatrixCSC{Tv,Ti}(m::Integer, n::Integer, colptr::Vector{Ti},$/;"	f
SparseMatrixCSC	stdlib/SparseArrays/src/sparsematrix.jl	/^SparseMatrixCSC(M::AbstractMatrix{Tv}) where {Tv} = SparseMatrixCSC{Tv,Int}(M)$/;"	f
SparseMatrixCSC	stdlib/SparseArrays/src/sparsematrix.jl	/^SparseMatrixCSC(M::Adjoint{<:Any,<:AbstractSparseMatrixCSC}) = copy(M)$/;"	f
SparseMatrixCSC	stdlib/SparseArrays/src/sparsematrix.jl	/^SparseMatrixCSC(M::Matrix) = sparse(M)$/;"	f
SparseMatrixCSC	stdlib/SparseArrays/src/sparsematrix.jl	/^SparseMatrixCSC(M::Transpose{<:Any,<:AbstractSparseMatrixCSC}) = copy(M)$/;"	f
SparseMatrixCSC	stdlib/SparseArrays/src/sparsematrix.jl	/^SparseMatrixCSC(S::AbstractSparseMatrixCSC) = copy(S)$/;"	f
SparseMatrixCSC	stdlib/SparseArrays/src/sparsematrix.jl	/^SparseMatrixCSC(s::UniformScaling, dims::Dims{2}) = SparseMatrixCSC{eltype(s)}(s, dims)$/;"	f
SparseMatrixCSC	stdlib/SparseArrays/src/sparsematrix.jl	/^SparseMatrixCSC(s::UniformScaling, m::Integer, n::Integer) = SparseMatrixCSC(s, Dims((m, n)))$/;"	f
SparseMatrixCSC	stdlib/SparseArrays/src/sparsematrix.jl	/^function SparseMatrixCSC(B::Bidiagonal{Tv}) where Tv$/;"	f
SparseMatrixCSC	stdlib/SparseArrays/src/sparsematrix.jl	/^function SparseMatrixCSC(D::Diagonal{T}) where T$/;"	f
SparseMatrixCSC	stdlib/SparseArrays/src/sparsematrix.jl	/^function SparseMatrixCSC(T::SymTridiagonal{Tv}) where Tv$/;"	f
SparseMatrixCSC	stdlib/SparseArrays/src/sparsematrix.jl	/^function SparseMatrixCSC(T::Tridiagonal{Tv}) where Tv$/;"	f
SparseMatrixCSC	stdlib/SparseArrays/src/sparsematrix.jl	/^function SparseMatrixCSC(m::Integer, n::Integer, colptr::Vector, rowval::Vector, nzval::Vector)$/;"	f
SparseMatrixCSC	stdlib/SparseArrays/src/sparsematrix.jl	/^function SparseMatrixCSC{Tv,Ti}(M::AbstractMatrix) where {Tv,Ti}$/;"	f
SparseMatrixCSC	stdlib/SparseArrays/src/sparsematrix.jl	/^function SparseMatrixCSC{Tv,Ti}(M::StridedMatrix) where {Tv,Ti}$/;"	f
SparseMatrixCSC	stdlib/SparseArrays/src/sparsematrix.jl	/^function SparseMatrixCSC{Tv,Ti}(S::AbstractSparseMatrixCSC) where {Tv,Ti}$/;"	f
SparseMatrixCSC	stdlib/SparseArrays/src/sparsematrix.jl	/^function SparseMatrixCSC{Tv,Ti}(s::UniformScaling, dims::Dims{2}) where {Tv,Ti}$/;"	f
SparseMatrixCSC	stdlib/SparseArrays/src/sparsematrix.jl	/^struct SparseMatrixCSC{Tv,Ti<:Integer} <: AbstractSparseMatrixCSC{Tv,Ti}$/;"	f
SparseMatrixCSC	stdlib/SparseArrays/src/sparsevector.jl	/^SparseMatrixCSC(x::AbstractSparseVector{Tv,Ti}) where {Tv,Ti} = SparseMatrixCSC{Tv,Ti}(x)$/;"	f
SparseMatrixCSC	stdlib/SparseArrays/src/sparsevector.jl	/^function SparseMatrixCSC{Tv,Ti}(x::AbstractSparseVector) where {Tv,Ti}$/;"	f
SparseMatrixCSC	stdlib/SuiteSparse/src/cholmod.jl	/^function SparseMatrixCSC{Tv,SuiteSparse_long}(A::Sparse{Tv}) where Tv$/;"	f
SparseMatrixStyle	base/broadcast.jl	/^    struct SparseMatrixStyle <: Broadcast.AbstractArrayStyle{2} end$/;"	f
SparseOrStructuredMatrix	stdlib/SparseArrays/src/higherorderfns.jl	/^SparseOrStructuredMatrix = Union{SparseMatrixCSC,LinearAlgebra.StructuredMatrix}$/;"	v
SparseTests	stdlib/SparseArrays/test/sparse.jl	/^module SparseTests$/;"	f
SparseVecOrMat	stdlib/SparseArrays/src/higherorderfns.jl	/^SparseVecOrMat = Union{SparseVector,AbstractSparseMatrixCSC}$/;"	v
SparseVecStyle	stdlib/SparseArrays/src/higherorderfns.jl	/^SparseVecStyle(::Val{0}) = SparseVecStyle()$/;"	f
SparseVecStyle	stdlib/SparseArrays/src/higherorderfns.jl	/^SparseVecStyle(::Val{1}) = SparseVecStyle()$/;"	f
SparseVecStyle	stdlib/SparseArrays/src/higherorderfns.jl	/^SparseVecStyle(::Val{2}) = SparseMatStyle()$/;"	f
SparseVecStyle	stdlib/SparseArrays/src/higherorderfns.jl	/^struct SparseVecStyle <: Broadcast.AbstractArrayStyle{1} end$/;"	f
SparseVector	stdlib/SparseArrays/src/sparsevector.jl	/^    function SparseVector{Tv,Ti}(n::Integer, nzind::Vector{Ti}, nzval::Vector{Tv}) where {Tv,Ti</;"	f
SparseVector	stdlib/SparseArrays/src/sparsevector.jl	/^SparseVector(n::Integer, nzind::Vector{Ti}, nzval::Vector{Tv}) where {Tv,Ti} =$/;"	f
SparseVector	stdlib/SparseArrays/src/sparsevector.jl	/^SparseVector(s::AbstractSparseMatrixCSC{Tv,Ti}) where {Tv,Ti} = SparseVector{Tv,Ti}(s)$/;"	f
SparseVector	stdlib/SparseArrays/src/sparsevector.jl	/^SparseVector(s::AbstractVector{Tv}) where {Tv} = SparseVector{Tv,Int}(s)$/;"	f
SparseVector	stdlib/SparseArrays/src/sparsevector.jl	/^function SparseVector{Tv,Ti}(s::AbstractSparseMatrixCSC{Tv,Ti}) where {Tv,Ti<:Integer}$/;"	f
SparseVector	stdlib/SparseArrays/src/sparsevector.jl	/^struct SparseVector{Tv,Ti<:Integer} <: AbstractSparseVector{Tv,Ti}$/;"	f
SparseVectorTests	stdlib/SparseArrays/test/sparsevector.jl	/^module SparseVectorTests$/;"	f
SpawnIOs	base/process.jl	/^const SpawnIOs = Vector{Any} # convenience name for readability$/;"	v
Special Types	doc/src/base/base.md	/^## Special Types$/;"	s
Special floating-point values	doc/src/manual/integers-and-floating-point-numbers.md	/^### Special floating-point values$/;"	S
Special functions	doc/src/manual/mathematical-operations.md	/^### Special functions$/;"	S
Special matrices	stdlib/LinearAlgebra/docs/src/index.md	/^## Special matrices$/;"	s
Special values	doc/src/base/base.md	/^### Special values$/;"	S
Specialized Calling Convention Signature Representation	doc/src/devdocs/compiler.md	/^## Specialized Calling Convention Signature Representation$/;"	s
Specializing `axes`	doc/src/devdocs/offset-arrays.md	/^### Specializing `axes`$/;"	S
Specializing `reshape`	doc/src/devdocs/offset-arrays.md	/^### Specializing `reshape`$/;"	S
Specializing `similar`	doc/src/devdocs/offset-arrays.md	/^### Specializing `similar`$/;"	S
Specializing array generation	stdlib/Random/docs/src/index.md	/^#### Specializing array generation$/;"	t
Specifying Network Topology (Experimental)	doc/src/manual/parallel-computing.md	/^## Specifying Network Topology (Experimental)$/;"	s
Specifying multiple system image targets	doc/src/devdocs/sysimg.md	/^### Specifying multiple system image targets$/;"	S
SpillPint	test/ccall.jl	/^struct SpillPint$/;"	f
SpinLock	base/locks-mt.jl	/^    SpinLock() = new(Atomic{Int}(0))$/;"	f
SpinLock	base/locks-mt.jl	/^struct SpinLock <: AbstractLock$/;"	f
SplatNew	test/core.jl	/^    SplatNew(args...) = new{Float32}(args...)$/;"	f
SplatNew	test/core.jl	/^struct SplatNew{T}$/;"	f
Splatting interpolation	doc/src/manual/metaprogramming.md	/^### Splatting interpolation$/;"	S
SplitPtrBlock	src/cgmemmgr.cpp	/^    SplitPtrBlock(SplitPtrBlock &&other)$/;"	f	struct:__anon06c686bc0111::SplitPtrBlock	file:
SplitPtrBlock	src/cgmemmgr.cpp	/^struct SplitPtrBlock : public Block {$/;"	s	namespace:__anon06c686bc0111	file:
SplitSlot	src/llvm-alloc-opt.cpp	/^    struct SplitSlot {$/;"	s	function:__anon0a1571000111::Optimizer::splitOnStack	file:
SquaresVector	test/arrayops.jl	/^struct SquaresVector <: AbstractArray{Int, 1}$/;"	f
Sse	src/abi_x86_64.cpp	/^enum ArgClass { Integer, Sse, SseUp, X87, X87Up, ComplexX87, NoClass, Memory };$/;"	e	enum:ArgClass	file:
SseUp	src/abi_x86_64.cpp	/^enum ArgClass { Integer, Sse, SseUp, X87, X87Up, ComplexX87, NoClass, Memory };$/;"	e	enum:ArgClass	file:
Stable	stdlib/InteractiveUtils/test/runtests.jl	/^mutable struct Stable{T,N}$/;"	f
Stack	src/flisp/flisp.h	/^    value_t *Stack;$/;"	m	struct:_fl_context_t	typeref:typename:value_t *
Stack	src/llvm-alloc-opt.cpp	/^        typedef SmallVector<Frame,4> Stack;$/;"	t	struct:__anon0a1571000111::Optimizer::CheckInst	typeref:typename:SmallVector<Frame,4>	file:
Stack	src/llvm-alloc-opt.cpp	/^        typedef SmallVector<Frame,4> Stack;$/;"	t	struct:__anon0a1571000111::Optimizer::Lifetime	typeref:typename:SmallVector<Frame,4>	file:
Stack	src/llvm-alloc-opt.cpp	/^        typedef SmallVector<Frame,4> Stack;$/;"	t	struct:__anon0a1571000111::Optimizer::ReplaceUses	typeref:typename:SmallVector<Frame,4>	file:
Stack	test/gcext/LocalTest.jl	/^const Stack = Main.TestGCExt.Stack$/;"	v
Stack Traces	doc/src/manual/stacktraces.md	/^# Stack Traces$/;"	c
StackFrame	base/stacktraces.jl	/^StackFrame(func, file, line) = StackFrame(Symbol(func), Symbol(file), line,$/;"	f
StackFrame	base/stacktraces.jl	/^struct StackFrame # this type should be kept platform-agnostic so that profiles can be dumped on/;"	f
StackFrameTree	stdlib/Profile/src/Profile.jl	/^mutable struct StackFrameTree{T} # where T <: Union{UInt64, StackFrame}$/;"	f
StackOverflowError	base/boot.jl	/^struct StackOverflowError  <: Exception end$/;"	f
StackTrace	base/stacktraces.jl	/^const StackTrace = Vector{StackFrame}$/;"	v
StackTraces	base/stacktraces.jl	/^module StackTraces$/;"	f
StackTraces	doc/src/base/stacktraces.md	/^# StackTraces$/;"	c
StackTracesTestMod	test/stacktraces.jl	/^module StackTracesTestMod$/;"	f
Standard Functions	stdlib/LinearAlgebra/docs/src/index.md	/^## Standard Functions$/;"	s
Standard Library Changes	HISTORY.md	/^Standard Library Changes$/;"	s
Standard Modules	doc/src/base/base.md	/^## Standard Modules$/;"	s
Standard Numeric Types	doc/src/base/numbers.md	/^## Standard Numeric Types$/;"	s
Standard library changes	HISTORY.md	/^Standard library changes$/;"	s
Standard library changes	NEWS.md	/^Standard library changes$/;"	s
Standard modules	doc/src/manual/modules.md	/^### Standard modules$/;"	S
Starting and managing worker processes	doc/src/manual/parallel-computing.md	/^## Starting and managing worker processes$/;"	s
StatStruct	base/stat.jl	/^StatStruct() = StatStruct(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)$/;"	f
StatStruct	base/stat.jl	/^StatStruct(buf::Union{Vector{UInt8},Ptr{UInt8}}) = StatStruct($/;"	f
StatStruct	base/stat.jl	/^struct StatStruct$/;"	f
State	src/cgmemmgr.cpp	/^    enum State {$/;"	g	struct:__anon06c686bc0111::SplitPtrBlock	file:
State	src/clangsa/GCChecker.cpp	/^            enum State { Allocated, Rooted, PotentiallyFreed, Untracked } S;$/;"	g	struct:__anon9c5a21540111::GCChecker::ValueState	file:
State	src/llvm-late-gc-lowering.cpp	/^    State(Function &F) : F(&F), DT(nullptr), MaxPtrNumber(-1), MaxSafepointNumber(-1) {}$/;"	f	struct:State	file:
State	src/llvm-late-gc-lowering.cpp	/^struct State {$/;"	s	file:
State	stdlib/LibGit2/src/LibGit2.jl	/^struct State$/;"	f
StateUpdate	base/compiler/typelattice.jl	/^struct StateUpdate$/;"	f
Stateful	base/iterators.jl	/^    @inline function Stateful(itr::T) where {T}$/;"	f
Stateful	base/iterators.jl	/^    @inline function Stateful{<:Any, Any}(itr::T) where {T}$/;"	f
Stateful	base/iterators.jl	/^mutable struct Stateful{T, VS}$/;"	f
Static Analysis Algorithm	doc/src/devdocs/gc-sa.md	/^## Static Analysis Algorithm$/;"	s
Static analyzer annotations for GC correctness in C code	doc/src/devdocs/gc-sa.md	/^# Static analyzer annotations for GC correctness in C code$/;"	c
Statistics	HISTORY.md	/^#### Statistics$/;"	t
Statistics	NEWS.md	/^#### Statistics$/;"	t
Statistics	stdlib/Statistics/docs/src/index.md	/^# Statistics$/;"	c
Statistics	stdlib/Statistics/src/Statistics.jl	/^module Statistics$/;"	f
Statistics.middle	stdlib/Statistics/test/runtests.jl	/^Statistics.middle(x::Furlong{p}) where {p} = Furlong{p}(middle(x.val))$/;"	f
Statistics.middle	stdlib/Statistics/test/runtests.jl	/^Statistics.middle(x::Furlong{p}, y::Furlong{p}) where {p} = Furlong{p}(middle(x.val, y.val))$/;"	f
StatusActive	base/stream.jl	/^const StatusActive      = 4 # handle is listening for read\/write\/connect events$/;"	v
StatusClosed	base/stream.jl	/^const StatusClosed      = 6 # handle is closed$/;"	v
StatusClosing	base/stream.jl	/^const StatusClosing     = 5 # handle is closing \/ being closed$/;"	v
StatusConnecting	base/stream.jl	/^const StatusConnecting  = 2 # handle is in process of connecting$/;"	v
StatusEOF	base/stream.jl	/^const StatusEOF         = 7 # handle is a TTY that has seen an EOF event (pretends to be closed /;"	v
StatusEntry	stdlib/LibGit2/src/types.jl	/^struct StatusEntry$/;"	f
StatusInit	base/stream.jl	/^const StatusInit        = 1 # handle is valid, but not connected\/active$/;"	v
StatusOpen	base/stream.jl	/^const StatusOpen        = 3 # handle is usable$/;"	v
StatusOptions	stdlib/LibGit2/src/types.jl	/^@kwdef struct StatusOptions$/;"	f
StatusPaused	base/stream.jl	/^const StatusPaused      = 8 # handle is Active, but not consuming events, and will transition to/;"	v
StatusUninit	base/stream.jl	/^const StatusUninit      = 0 # handle is allocated, but not initialized$/;"	v
StdIOSet	base/cmd.jl	/^const StdIOSet = NTuple{3, Redirectable}$/;"	v
StepRange	base/range.jl	/^    function StepRange{T,S}(start::T, step::S, stop::T) where {T,S}$/;"	f
StepRange	base/range.jl	/^StepRange(r::AbstractUnitRange{T}) where {T} =$/;"	f
StepRange	base/range.jl	/^StepRange(start::T, step::S, stop::T) where {T,S} = StepRange{T,S}(start, step, stop)$/;"	f
StepRange	base/range.jl	/^struct StepRange{T,S} <: OrdinalRange{T,S}$/;"	f
StepRangeLen	base/range.jl	/^    function StepRangeLen{T,R,S}(ref::R, step::S, len::Integer, offset::Integer = 1) where {T,R,/;"	f
StepRangeLen	base/range.jl	/^StepRangeLen(r::AbstractRange) = StepRangeLen{eltype(r)}(r)$/;"	f
StepRangeLen	base/range.jl	/^StepRangeLen(ref::R, step::S, len::Integer, offset::Integer = 1) where {R,S} =$/;"	f
StepRangeLen	base/range.jl	/^struct StepRangeLen{T,R,S} <: AbstractRange{T}$/;"	f
StickyWorkqueue	base/task.jl	/^const StickyWorkqueue = InvasiveLinkedListSynchronized{Task}$/;"	v
StmtRange	base/compiler/ssair/ir.jl	/^StmtRange(range::UnitRange{Int}) = StmtRange(first(range), last(range))$/;"	f
StmtRange	base/compiler/ssair/ir.jl	/^struct StmtRange <: AbstractUnitRange{Int}$/;"	f
Str	test/subtype.jl	/^struct Str{C} <: AbstractString$/;"	f
StrArrayStruct	stdlib/LibGit2/src/types.jl	/^StrArrayStruct() = StrArrayStruct(C_NULL, 0)$/;"	f
StrArrayStruct	stdlib/LibGit2/src/types.jl	/^struct StrArrayStruct$/;"	f
StrangeType18623	test/broadcast.jl	/^StrangeType18623(x) = x$/;"	f
StrangeType18623	test/broadcast.jl	/^StrangeType18623(x,y) = (x,y)$/;"	f
StrangeType18623	test/broadcast.jl	/^struct StrangeType18623 end$/;"	f
StreamREPL	stdlib/REPL/src/REPL.jl	/^    StreamREPL(stream,pc,ic,ac) = new(stream,pc,ic,ac,false)$/;"	f
StreamREPL	stdlib/REPL/src/REPL.jl	/^StreamREPL(stream::IO) = StreamREPL(stream, Base.text_colors[:green], Base.input_color(), Base.a/;"	f
StreamREPL	stdlib/REPL/src/REPL.jl	/^mutable struct StreamREPL <: AbstractREPL$/;"	f
String	base/boot.jl	/^String(s::String) = s  # no constructor yet$/;"	f
String	base/strings/io.jl	/^function String(a::AbstractVector{Char})$/;"	f
String	base/strings/io.jl	/^function String(chars::AbstractVector{<:AbstractChar})$/;"	f
String	base/strings/string.jl	/^String(s::AbstractString) = print_to_string(s)$/;"	f
String	base/strings/string.jl	/^String(s::CodeUnits{UInt8,String}) = s.s$/;"	f
String	base/strings/string.jl	/^String(s::Symbol) = unsafe_string(unsafe_convert(Ptr{UInt8}, s))$/;"	f
String	base/strings/string.jl	/^String(v::AbstractVector{UInt8}) = String(copyto!(StringVector(length(v)), v))$/;"	f
String	base/strings/string.jl	/^String(v::Vector{UInt8}) = ccall(:jl_array_to_string, Ref{String}, (Any,), v)$/;"	f
String	base/strings/substring.jl	/^String(s::SubString{String}) = unsafe_string(pointer(s.string, s.offset+1), s.ncodeunits)$/;"	f
String	test/errorshow.jl	/^String() = throw(ErrorException("1"))$/;"	f
String	test/show.jl	/^    @test String(take!(s)) == "(1 => 2) => Pair{Any,Any}(3, 4)"$/;"	f
String Basics	doc/src/manual/strings.md	/^## String Basics$/;"	s
StringIndexError	base/strings/string.jl	/^struct StringIndexError <: Exception$/;"	f
StringVector	base/iobuffer.jl	/^StringVector(n::Integer) = unsafe_wrap(Vector{UInt8}, _string_n(n))$/;"	f
Strings	doc/src/devdocs/ast.md	/^### Strings$/;"	S
Strong	src/llvm-gc-invariant-verifier.cpp	/^    bool Strong;$/;"	m	struct:GCInvariantVerifier	typeref:typename:bool	file:
Struct	test/docs.jl	/^function Struct{T}(arg1) where Integer <: T <: Real$/;"	f
Struct	test/docs.jl	/^function Struct{T}(arg1) where T >: Int$/;"	f
Struct	test/docs.jl	/^function Struct{T}(arg1) where T$/;"	f
Struct	test/docs.jl	/^function Struct{T}(arg1) where T<:Float64$/;"	f
Struct	test/docs.jl	/^struct Struct{T}$/;"	f
Struct Type Correspondences	doc/src/manual/calling-c-and-fortran-code.md	/^### Struct Type Correspondences$/;"	S
Struct1	test/ccall.jl	/^mutable struct Struct1$/;"	f
Struct10	test/ccall.jl	/^mutable struct Struct10$/;"	f
Struct10I	test/ccall.jl	/^struct Struct10I$/;"	f
Struct11	test/ccall.jl	/^mutable struct Struct11$/;"	f
Struct11I	test/ccall.jl	/^struct Struct11I$/;"	f
Struct12	test/ccall.jl	/^mutable struct Struct12$/;"	f
Struct12I	test/ccall.jl	/^struct Struct12I$/;"	f
Struct13	test/ccall.jl	/^mutable struct Struct13$/;"	f
Struct13I	test/ccall.jl	/^struct Struct13I$/;"	f
Struct14	test/ccall.jl	/^mutable struct Struct14$/;"	f
Struct14I	test/ccall.jl	/^struct Struct14I$/;"	f
Struct15	test/ccall.jl	/^mutable struct Struct15$/;"	f
Struct15I	test/ccall.jl	/^struct Struct15I$/;"	f
Struct16	test/ccall.jl	/^mutable struct Struct16$/;"	f
Struct16I	test/ccall.jl	/^struct Struct16I$/;"	f
Struct17	test/ccall.jl	/^mutable struct Struct17$/;"	f
Struct17I	test/ccall.jl	/^struct Struct17I$/;"	f
Struct18	test/ccall.jl	/^mutable struct Struct18$/;"	f
Struct18I	test/ccall.jl	/^struct Struct18I$/;"	f
Struct1I	test/ccall.jl	/^struct Struct1I$/;"	f
Struct4	test/ccall.jl	/^mutable struct Struct4$/;"	f
Struct4I	test/ccall.jl	/^struct Struct4I$/;"	f
Struct5	test/ccall.jl	/^mutable struct Struct5$/;"	f
Struct5I	test/ccall.jl	/^struct Struct5I$/;"	f
Struct6	test/ccall.jl	/^mutable struct Struct6$/;"	f
Struct6I	test/ccall.jl	/^struct Struct6I$/;"	f
Struct7	test/ccall.jl	/^mutable struct Struct7$/;"	f
Struct7I	test/ccall.jl	/^struct Struct7I$/;"	f
Struct8	test/ccall.jl	/^mutable struct Struct8$/;"	f
Struct8I	test/ccall.jl	/^struct Struct8I$/;"	f
Struct9	test/ccall.jl	/^mutable struct Struct9$/;"	f
Struct9I	test/ccall.jl	/^struct Struct9I$/;"	f
Struct_AA64_1	test/ccall.jl	/^struct Struct_AA64_1$/;"	f
Struct_AA64_2	test/ccall.jl	/^struct Struct_AA64_2$/;"	f
Struct_AA64_3	test/ccall.jl	/^struct Struct_AA64_3$/;"	f
Struct_AA64_4	test/ccall.jl	/^struct Struct_AA64_4$/;"	f
Struct_Big	test/ccall.jl	/^mutable struct Struct_Big$/;"	f
Struct_BigI	test/ccall.jl	/^struct Struct_BigI$/;"	f
Struct_huge1_ppc64	test/ccall.jl	/^mutable struct Struct_huge1_ppc64$/;"	f
Struct_huge1_ppc64_hva	test/ccall.jl	/^mutable struct Struct_huge1_ppc64_hva$/;"	f
Struct_huge1a	test/ccall.jl	/^const Struct_huge1a = NTuple{8, Int64}$/;"	v
Struct_huge1b	test/ccall.jl	/^const Struct_huge1b = NTuple{9, Int64}$/;"	v
Struct_huge2_ppc64	test/ccall.jl	/^mutable struct Struct_huge2_ppc64$/;"	f
Struct_huge2_ppc64_hva	test/ccall.jl	/^mutable struct Struct_huge2_ppc64_hva$/;"	f
Struct_huge2a	test/ccall.jl	/^const Struct_huge2a = NTuple{8, Cdouble}$/;"	v
Struct_huge2b	test/ccall.jl	/^const Struct_huge2b = NTuple{9, Cdouble}$/;"	v
Struct_huge3_ppc64	test/ccall.jl	/^mutable struct Struct_huge3_ppc64$/;"	f
Struct_huge3_ppc64_hva	test/ccall.jl	/^mutable struct Struct_huge3_ppc64_hva$/;"	f
Struct_huge3a	test/ccall.jl	/^mutable struct Struct_huge3a$/;"	f
Struct_huge3b	test/ccall.jl	/^mutable struct Struct_huge3b$/;"	f
Struct_huge3c	test/ccall.jl	/^mutable struct Struct_huge3c$/;"	f
Struct_huge4_ppc64	test/ccall.jl	/^mutable struct Struct_huge4_ppc64$/;"	f
Struct_huge4_ppc64_hva	test/ccall.jl	/^mutable struct Struct_huge4_ppc64_hva$/;"	f
Struct_huge4a	test/ccall.jl	/^mutable struct Struct_huge4a$/;"	f
Struct_huge4b	test/ccall.jl	/^mutable struct Struct_huge4b$/;"	f
Struct_huge5_ppc64	test/ccall.jl	/^mutable struct Struct_huge5_ppc64$/;"	f
Struct_huge5_ppc64_hva	test/ccall.jl	/^mutable struct Struct_huge5_ppc64_hva$/;"	f
Struct_huge5a	test/ccall.jl	/^const Struct_huge5a = NTuple{8, Complex{Cint}}$/;"	v
Struct_huge5b	test/ccall.jl	/^const Struct_huge5b = NTuple{9, Complex{Cint}}$/;"	v
Struct_huge6_ppc64	test/ccall.jl	/^mutable struct Struct_huge6_ppc64$/;"	f
Struct_huge7_ppc64	test/ccall.jl	/^mutable struct Struct_huge7_ppc64$/;"	f
StructuredMatrix	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^const StructuredMatrix = Union{Diagonal,Bidiagonal,SymTridiagonal,Tridiagonal,LowerTriangular,Un/;"	v
StructuredMatrix	stdlib/SparseArrays/src/higherorderfns.jl	/^const StructuredMatrix = Union{Diagonal,Bidiagonal,Tridiagonal,SymTridiagonal}$/;"	v
StructuredMatrixStyle	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^struct StructuredMatrixStyle{T} <: Broadcast.AbstractArrayStyle{2} end$/;"	f
Style	base/broadcast.jl	/^struct Style{T} <: BroadcastStyle end$/;"	f
Style Guide	doc/src/manual/style-guide.md	/^# Style Guide$/;"	c
Stylistic Conventions	doc/src/manual/variables.md	/^## Stylistic Conventions$/;"	s
SubArray	base/subarray.jl	/^    function SubArray{T,N,P,I,L}(parent, indices, offset1, stride1) where {T,N,P,I,L}$/;"	f
SubArray	base/subarray.jl	/^function SubArray(::IndexCartesian, parent::P, indices::I, ::NTuple{N,Any}) where {P,I,N}$/;"	f
SubArray	base/subarray.jl	/^function SubArray(::IndexLinear, parent::P, indices::I, ::NTuple{N,Any}) where {P,I,N}$/;"	f
SubArray	base/subarray.jl	/^function SubArray(parent::AbstractArray, indices::Tuple)$/;"	f
SubArray	base/subarray.jl	/^struct SubArray{T,N,P,I,L} <: AbstractArray{T,N}$/;"	f
SubArray design	doc/src/devdocs/subarrays.md	/^## SubArray design$/;"	s
SubArrays	doc/src/devdocs/subarrays.md	/^# SubArrays$/;"	c
SubModule	test/syntax.jl	/^module SubModule$/;"	f
SubString	base/strings/substring.jl	/^    function SubString{T}(s::T, i::Int, j::Int) where T<:AbstractString$/;"	f
SubString	base/strings/substring.jl	/^@propagate_inbounds SubString(s::AbstractString, i::Integer, j::Integer=lastindex(s)) = SubStrin/;"	f
SubString	base/strings/substring.jl	/^@propagate_inbounds SubString(s::AbstractString, r::UnitRange{<:Integer}) = SubString(s, first(r/;"	f
SubString	base/strings/substring.jl	/^@propagate_inbounds SubString(s::T, i::Int, j::Int) where {T<:AbstractString} = SubString{T}(s, /;"	f
SubString	base/strings/substring.jl	/^@propagate_inbounds function SubString(s::SubString, i::Int, j::Int)$/;"	f
SubString	base/strings/substring.jl	/^SubString(s::AbstractString) = SubString(s, 1, lastindex(s))$/;"	f
SubString	base/strings/substring.jl	/^struct SubString{T<:AbstractString} <: AbstractString$/;"	f
SubString	test/strings/types.jl	/^    SubString(s, 1, 0)   => "",$/;"	f
SubString	test/strings/types.jl	/^    SubString(s, 1, 11)  => "lorem ipsum",$/;"	f
SubString	test/strings/types.jl	/^    SubString(s, 1, 6)   => "lorem ",$/;"	f
SubString	test/strings/types.jl	/^    SubString(s, 15, 14) => "",$/;"	f
SubString	test/strings/types.jl	/^    SubString(s, 2, 11)  => "orem ipsum",$/;"	f
SubString	test/strings/types.jl	/^    SubString(s, 2, 4)   => "ore",$/;"	f
Submitting contributions	CONTRIBUTING.md	/^## Submitting contributions$/;"	s
Submodule	test/logging.jl	/^    module Submodule$/;"	f
Subprogram	src/disasm.cpp	/^    DenseMap<const Function *, DISubprogram *> Subprogram;$/;"	m	class:LineNumberAnnotatedWriter	typeref:typename:DenseMap<const Function *,DISubprogram * >	file:
Subsequences, permutations and shuffling	stdlib/Random/docs/src/index.md	/^## Subsequences, permutations and shuffling$/;"	s
SubstitutionString	base/regex.jl	/^struct SubstitutionString{T<:AbstractString} <: AbstractString$/;"	f
Subtypes	doc/src/devdocs/reflection.md	/^## Subtypes$/;"	s
Subtyping and method sorting	doc/src/devdocs/types.md	/^## Subtyping and method sorting$/;"	s
Subtyping diagonal variables	doc/src/devdocs/types.md	/^## Subtyping diagonal variables$/;"	s
SuffSet	src/julia-parser.scm	/^(define (SuffSet l)$/;"	f
SuiteSparse	stdlib/SuiteSparse/src/SuiteSparse.jl	/^module SuiteSparse$/;"	f
SuiteSparseStruct	stdlib/SuiteSparse/src/cholmod.jl	/^abstract type SuiteSparseStruct end$/;"	f
SuiteSparse_config/SuiteSparse_config.h	deps/patches/SuiteSparse-winclang.patch	/^--- SuiteSparse_config\/SuiteSparse_config.h	2015-07-15 03:26:41.000000000 +0000$/;"	m
Summary	deps/srccache/patchelf-0.9/patchelf.spec	/^Summary: A utility for patching ELF binaries$/;"	t
Summary	deps/srccache/patchelf-0.9/patchelf.spec.in	/^Summary: A utility for patching ELF binaries$/;"	t
Summary of module usage	doc/src/manual/modules.md	/^## Summary of module usage$/;"	s
SummarySize	base/summarysize.jl	/^struct SummarySize$/;"	f
Sup2a_	test/core.jl	/^abstract type Sup2a_ end$/;"	f
Sup2b_	test/core.jl	/^abstract type Sup2b_{A <: Sup2a_, B} <: Sup2a_ end$/;"	f
Sup_	test/core.jl	/^abstract type Sup_{A,B} end$/;"	f
Supplying the number of expressions	doc/src/devdocs/cartesian.md	/^### Supplying the number of expressions$/;"	S
Supported Versions	.github/SECURITY.md	/^## Supported Versions$/;"	s
Supported build platforms	doc/build/windows.md	/^### Supported build platforms$/;"	S
Supporting [`ccall`](@ref)	doc/src/devdocs/llvm.md	/^### Supporting [`ccall`](@ref)$/;"	S
Supporting [`pointer_from_objref`](@ref)	doc/src/devdocs/llvm.md	/^### Supporting [`pointer_from_objref`](@ref)$/;"	S
Suppressions	doc/src/devdocs/valgrind.md	/^## Suppressions$/;"	s
Surface syntax AST	doc/src/devdocs/ast.md	/^## Surface syntax AST$/;"	s
Sym	src/clangsa/GCChecker.cpp	/^          SymbolRef Sym;$/;"	m	class:__anon9c5a21540111::GCChecker::GCValueBugVisitor	typeref:typename:SymbolRef	file:
SymMapGV	src/ccall.cpp	/^typedef StringMap<std::pair<GlobalVariable*,void*>> SymMapGV;$/;"	t	typeref:typename:StringMap<std::pair<GlobalVariable *,void * >>	file:
SymRef	src/debuginfo.cpp	/^typedef object::SymbolRef SymRef;$/;"	t	typeref:typename:object::SymbolRef	file:
SymTridiagonal	stdlib/LinearAlgebra/src/ldlt.jl	/^function SymTridiagonal(F::LDLt)$/;"	f
SymTridiagonal	stdlib/LinearAlgebra/src/special.jl	/^SymTridiagonal(A::AbstractTriangular) = SymTridiagonal(Tridiagonal(A))$/;"	f
SymTridiagonal	stdlib/LinearAlgebra/src/special.jl	/^SymTridiagonal(A::Bidiagonal) =$/;"	f
SymTridiagonal	stdlib/LinearAlgebra/src/special.jl	/^SymTridiagonal(A::Diagonal) = SymTridiagonal(A.diag, fill!(similar(A.diag, length(A.diag)-1), 0)/;"	f
SymTridiagonal	stdlib/LinearAlgebra/src/special.jl	/^SymTridiagonal(A::Tridiagonal) =$/;"	f
SymTridiagonal	stdlib/LinearAlgebra/src/tridiag.jl	/^    function SymTridiagonal{T,V}(dv, ev) where {T,V<:AbstractVector{T}}$/;"	f
SymTridiagonal	stdlib/LinearAlgebra/src/tridiag.jl	/^SymTridiagonal(S::SymTridiagonal) = S$/;"	f
SymTridiagonal	stdlib/LinearAlgebra/src/tridiag.jl	/^SymTridiagonal(dv::V, ev::V) where {T,V<:AbstractVector{T}} = SymTridiagonal{T}(dv, ev)$/;"	f
SymTridiagonal	stdlib/LinearAlgebra/src/tridiag.jl	/^function SymTridiagonal(A::AbstractMatrix)$/;"	f
SymTridiagonal	stdlib/LinearAlgebra/src/tridiag.jl	/^function SymTridiagonal{T}(M::Tridiagonal) where T$/;"	f
SymTridiagonal	stdlib/LinearAlgebra/src/tridiag.jl	/^function SymTridiagonal{T}(dv::AbstractVector, ev::AbstractVector) where {T}$/;"	f
SymTridiagonal	stdlib/LinearAlgebra/src/tridiag.jl	/^struct SymTridiagonal{T,V<:AbstractVector{T}} <: AbstractMatrix{T}$/;"	f
Symbol	base/boot.jl	/^Symbol(s::Symbol) = s$/;"	f
Symbol	base/boot.jl	/^function Symbol(a::Array{UInt8,1})$/;"	f
Symbol	base/boot.jl	/^function Symbol(s::String)$/;"	f
Symbol	base/strings/basic.jl	/^Symbol(s::AbstractString) = Symbol(String(s))$/;"	f
Symbol	base/strings/basic.jl	/^Symbol(x...) = Symbol(string(x...))$/;"	f
SymbolLookup	src/disasm.cpp	/^static const char *SymbolLookup(void *DisInfo, uint64_t ReferenceValue, uint64_t *ReferenceType,$/;"	f	namespace:__anon2853c92e0211	typeref:typename:const char *	file:
SymbolRef	src/staticdata.c	/^    SymbolRef,$/;"	e	enum:RefTags	file:
SymbolResolver	src/jitlayers.h	/^    std::shared_ptr<llvm::orc::SymbolResolver> SymbolResolver;$/;"	m	class:JuliaOJIT	typeref:typename:std::shared_ptr<llvm::orc::SymbolResolver>
SymbolTable	src/disasm.cpp	/^    SymbolTable(MCContext &Ctx, const object::ObjectFile *object, int64_t slide, const FuncMCVie/;"	f	class:__anon2853c92e0211::SymbolTable	file:
SymbolTable	src/disasm.cpp	/^class SymbolTable {$/;"	c	namespace:__anon2853c92e0211	file:
SymbolTableT	src/jitlayers.h	/^    typedef StringMap<void*> SymbolTableT;$/;"	t	class:JuliaOJIT	typeref:typename:StringMap<void * >
Symbols	doc/src/manual/metaprogramming.md	/^### Symbols$/;"	S
Symmetric	stdlib/LinearAlgebra/src/symmetric.jl	/^    function Symmetric{T,S}(data, uplo) where {T,S<:AbstractMatrix{<:T}}$/;"	f
Symmetric	stdlib/LinearAlgebra/src/symmetric.jl	/^function Symmetric(A::AbstractMatrix, uplo::Symbol=:U)$/;"	f
Symmetric	stdlib/LinearAlgebra/src/symmetric.jl	/^struct Symmetric{T,S<:AbstractMatrix{<:T}} <: AbstractMatrix{T}$/;"	f
SyncTake	stdlib/Distributed/src/process_messages.jl	/^struct SyncTake$/;"	f
Syntax	doc/src/base/base.md	/^## Syntax$/;"	s
Syntax Conflicts	doc/src/manual/integers-and-floating-point-numbers.md	/^### Syntax Conflicts$/;"	S
Syntax Guide	doc/src/manual/documentation.md	/^## Syntax Guide$/;"	s
Sys	base/sysinfo.jl	/^module Sys$/;"	f
SysimgMatch	src/processor.cpp	/^struct SysimgMatch {$/;"	s	namespace:__anon839834ed0111	file:
System	doc/src/base/base.md	/^## System$/;"	s
System Image Building	doc/src/devdocs/sysimg.md	/^# System Image Building$/;"	c
System image optimized for multiple microarchitectures	doc/src/devdocs/sysimg.md	/^## System image optimized for multiple microarchitectures$/;"	s
SystemError	base/io.jl	/^    SystemError(p::AbstractString) = new(p, Libc.errno())$/;"	f
SystemError	base/io.jl	/^    SystemError(p::AbstractString, e::Integer) = new(p, e, nothing)$/;"	f
SystemError	base/io.jl	/^    SystemError(p::AbstractString, e::Integer, extrainfo) = new(p, e, extrainfo)$/;"	f
SystemError	base/io.jl	/^struct SystemError <: Exception$/;"	f
T	src/flisp/flisp.h	/^    value_t NIL, T, F, FL_EOF, QUOTE;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
T	test/ambiguous.jl	/^struct T end$/;"	f
T	test/docs.jl	/^mutable struct T <: AT$/;"	f
T	test/docs.jl	/^mutable struct T$/;"	f
T	test/show.jl	/^    struct T end$/;"	f
T	test/subtype.jl	/^T = HFPotential{_A,Float64,Any,Applied{Int,Tuple{ApplyQuasiArray{Float64,2,Applied{Int,Tuple{Any/;"	v
T10207	test/compiler/inference.jl	/^mutable struct T10207{A, B}$/;"	f
T10647	test/dict.jl	/^mutable struct T10647{T}; x::T; end$/;"	f
T11053	test/arrayops.jl	/^mutable struct T11053$/;"	f
T11675	test/core.jl	/^struct T11675{T}$/;"	f
T1234321	stdlib/InteractiveUtils/test/runtests.jl	/^struct T1234321$/;"	f
T12960	test/show.jl	/^mutable struct T12960 end$/;"	f
T14691;	test/core.jl	/^mutable struct T14691; a::UInt; end$/;"	f
T16091	stdlib/Distributed/test/distributed_exec.jl	/^mutable struct T16091 end$/;"	f
T16793	test/core.jl	/^    abstract type T16793 end$/;"	f
T17951	test/core.jl	/^    struct T17951$/;"	f
T19714	test/operators.jl	/^struct T19714 <: Integer end$/;"	f
T20267	test/compiler/inference.jl	/^mutable struct T20267{T}$/;"	f
T20324	stdlib/Serialization/test/runtests.jl	/^struct T20324{T}$/;"	f
T20332	test/show.jl	/^struct T20332{T}$/;"	f
T20804	test/keywordargs.jl	/^struct T20804{T}$/;"	f
T20999	test/core.jl	/^struct T20999$/;"	f
T21516	test/core.jl	/^    T21516(x::Vector{T}, y::Vector{T}) where {T<:Real} = new(float.(x), float.(y))$/;"	f
T21516	test/core.jl	/^struct T21516$/;"	f
T21719	test/core.jl	/^mutable struct T21719{V}$/;"	f
T21972	test/deprecation_exec.jl	/^    @noinline function T21972()$/;"	f
T21972	test/deprecation_exec.jl	/^struct T21972$/;"	f
T22053	test/broadcast.jl	/^struct T22053$/;"	f
T22624	test/core.jl	/^struct T22624{A,B,C}; v::Vector{T22624{Int64,A}}; end$/;"	f
T24460	test/core.jl	/^const T24460 = Tuple{T,T} where T$/;"	v
T24Linear	test/abstractarray.jl	/^    function T24Linear{T,N,d}(v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,$/;"	f
T24Linear	test/abstractarray.jl	/^T24Linear(     X::AbstractArray{T,N}) where {T,N  } = T24Linear{T,N}(X)$/;"	f
T24Linear	test/abstractarray.jl	/^T24Linear(::Type{T}, dims::NTuple{N,Int}) where {T,N} = T24Linear{T,N,dims}()$/;"	f
T24Linear	test/abstractarray.jl	/^mutable struct T24Linear{T,N,dims} <: AbstractArray{T,N}$/;"	f
T25958	test/arrayops.jl	/^struct T25958$/;"	f
T26321	test/core.jl	/^struct T26321{N,S<:NTuple{N}}$/;"	f
T27059	test/compiler/inference.jl	/^T27059 = Tuple{Float64,Vararg{Float32}}$/;"	v
T27078	test/compiler/inference.jl	/^T27078 = Vector{Vector{T}} where T$/;"	v
T27269	test/core.jl	/^struct T27269{X, Y <: Vector{X}}$/;"	f
T27351	test/compiler/inference.jl	/^struct T27351 <: AbstractT27351 end$/;"	f
T29145	test/core.jl	/^    function T29145()$/;"	f
T29145	test/core.jl	/^struct T29145{A,B}$/;"	f
T4801	test/keywordargs.jl	/^mutable struct T4801{X}$/;"	f
T5165	test/core.jl	/^primitive type T5165{S} 64 end$/;"	f
T5589	test/show.jl	/^struct T5589$/;"	f
TA	test/docs.jl	/^const TA = Union{T, IT}$/;"	v
TA1	stdlib/Serialization/test/runtests.jl	/^mutable struct TA1$/;"	f
TAGGED_RELEASE_BANNER	base/Makefile	/^TAGGED_RELEASE_BANNER := ""$/;"	m
TAGS	deps/srccache/patchelf-0.9/Makefile.in	/^TAGS: tags$/;"	t
TAGS	deps/srccache/patchelf-0.9/src/Makefile.in	/^TAGS: tags$/;"	t
TAGS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^TAGS: tags$/;"	t
TAGS	stdlib/Serialization/src/Serialization.jl	/^const TAGS = Any[$/;"	v
TAG_ARRAY	src/dump.c	/^#define TAG_ARRAY /;"	d	file:
TAG_ARRAY1D	src/dump.c	/^#define TAG_ARRAY1D /;"	d	file:
TAG_BACKREF	src/dump.c	/^#define TAG_BACKREF /;"	d	file:
TAG_BASE	src/dump.c	/^#define TAG_BASE /;"	d	file:
TAG_BITYPENAME	src/dump.c	/^#define TAG_BITYPENAME /;"	d	file:
TAG_CALL1	src/dump.c	/^#define TAG_CALL1 /;"	d	file:
TAG_CALL2	src/dump.c	/^#define TAG_CALL2 /;"	d	file:
TAG_CODE_INSTANCE	src/dump.c	/^#define TAG_CODE_INSTANCE /;"	d	file:
TAG_COMMONSYM	src/dump.c	/^#define TAG_COMMONSYM /;"	d	file:
TAG_CONS	src/flisp/flisp.h	/^#define TAG_CONS /;"	d
TAG_CORE	src/dump.c	/^#define TAG_CORE /;"	d	file:
TAG_CPRIM	src/flisp/flisp.h	/^#define TAG_CPRIM /;"	d
TAG_CVALUE	src/flisp/flisp.h	/^#define TAG_CVALUE /;"	d
TAG_DATATYPE	src/dump.c	/^#define TAG_DATATYPE /;"	d	file:
TAG_EXPR	src/dump.c	/^#define TAG_EXPR /;"	d	file:
TAG_FUNCTION	src/flisp/flisp.h	/^#define TAG_FUNCTION /;"	d
TAG_FWD	src/flisp/flisp.h	/^#define TAG_FWD /;"	d
TAG_GENERAL	src/dump.c	/^#define TAG_GENERAL /;"	d	file:
TAG_GLOBALREF	src/dump.c	/^#define TAG_GLOBALREF /;"	d	file:
TAG_GOTONODE	src/dump.c	/^#define TAG_GOTONODE /;"	d	file:
TAG_INT32	src/dump.c	/^#define TAG_INT32 /;"	d	file:
TAG_INT64	src/dump.c	/^#define TAG_INT64 /;"	d	file:
TAG_LINEINFO	src/dump.c	/^#define TAG_LINEINFO /;"	d	file:
TAG_LONG_EXPR	src/dump.c	/^#define TAG_LONG_EXPR /;"	d	file:
TAG_LONG_METHODROOT	src/dump.c	/^#define TAG_LONG_METHODROOT /;"	d	file:
TAG_LONG_PHICNODE	src/dump.c	/^#define TAG_LONG_PHICNODE /;"	d	file:
TAG_LONG_PHINODE	src/dump.c	/^#define TAG_LONG_PHINODE /;"	d	file:
TAG_LONG_SSAVALUE	src/dump.c	/^#define TAG_LONG_SSAVALUE /;"	d	file:
TAG_LONG_SVEC	src/dump.c	/^#define TAG_LONG_SVEC /;"	d	file:
TAG_LONG_SYMBOL	src/dump.c	/^#define TAG_LONG_SYMBOL /;"	d	file:
TAG_METHOD	src/dump.c	/^#define TAG_METHOD /;"	d	file:
TAG_METHODROOT	src/dump.c	/^#define TAG_METHODROOT /;"	d	file:
TAG_METHOD_INSTANCE	src/dump.c	/^#define TAG_METHOD_INSTANCE /;"	d	file:
TAG_MODULE	src/dump.c	/^#define TAG_MODULE /;"	d	file:
TAG_NEARBYGLOBAL	src/dump.c	/^#define TAG_NEARBYGLOBAL /;"	d	file:
TAG_NEARBYMODULE	src/dump.c	/^#define TAG_NEARBYMODULE /;"	d	file:
TAG_NULL	src/dump.c	/^#define TAG_NULL /;"	d	file:
TAG_NUM	src/flisp/flisp.h	/^#define TAG_NUM /;"	d
TAG_NUM1	src/flisp/flisp.h	/^#define TAG_NUM1 /;"	d
TAG_PHICNODE	src/dump.c	/^#define TAG_PHICNODE /;"	d	file:
TAG_PHINODE	src/dump.c	/^#define TAG_PHINODE /;"	d	file:
TAG_PTRTY	src/dump.c	/^#define TAG_PTRTY /;"	d	file:
TAG_QUOTENODE	src/dump.c	/^#define TAG_QUOTENODE /;"	d	file:
TAG_SHORTER_INT64	src/dump.c	/^#define TAG_SHORTER_INT64 /;"	d	file:
TAG_SHORT_BACKREF	src/dump.c	/^#define TAG_SHORT_BACKREF /;"	d	file:
TAG_SHORT_GENERAL	src/dump.c	/^#define TAG_SHORT_GENERAL /;"	d	file:
TAG_SHORT_INT32	src/dump.c	/^#define TAG_SHORT_INT32 /;"	d	file:
TAG_SHORT_INT64	src/dump.c	/^#define TAG_SHORT_INT64 /;"	d	file:
TAG_SINGLETON	src/dump.c	/^#define TAG_SINGLETON /;"	d	file:
TAG_SLOTNUMBER	src/dump.c	/^#define TAG_SLOTNUMBER /;"	d	file:
TAG_SSAVALUE	src/dump.c	/^#define TAG_SSAVALUE /;"	d	file:
TAG_STRING	src/dump.c	/^#define TAG_STRING /;"	d	file:
TAG_SVEC	src/dump.c	/^#define TAG_SVEC /;"	d	file:
TAG_SYM	src/flisp/flisp.h	/^#define TAG_SYM /;"	d
TAG_SYMBOL	src/dump.c	/^#define TAG_SYMBOL /;"	d	file:
TAG_TVAR	src/dump.c	/^#define TAG_TVAR /;"	d	file:
TAG_TYPEMAP_ENTRY	src/dump.c	/^#define TAG_TYPEMAP_ENTRY /;"	d	file:
TAG_UINT8	src/dump.c	/^#define TAG_UINT8 /;"	d	file:
TAG_UNIONALL	src/dump.c	/^#define TAG_UNIONALL /;"	d	file:
TAG_VECTOR	src/flisp/flisp.h	/^#define TAG_VECTOR /;"	d
TAG_VECTORTY	src/dump.c	/^#define TAG_VECTORTY /;"	d	file:
TANH_LARGE_X	base/special/hyperbolic.jl	/^TANH_LARGE_X(::Type{Float32}) = 9.0f0$/;"	f
TANH_LARGE_X	base/special/hyperbolic.jl	/^TANH_LARGE_X(::Type{Float64}) = 22.0$/;"	f
TASK_TAG	stdlib/Serialization/src/Serialization.jl	/^const TASK_TAG = sertag(Task)$/;"	v
TCPServer	stdlib/Sockets/src/Sockets.jl	/^    function TCPServer(handle::Ptr{Cvoid}, status)$/;"	f
TCPServer	stdlib/Sockets/src/Sockets.jl	/^function TCPServer(; delay=true)$/;"	f
TCPServer	stdlib/Sockets/src/Sockets.jl	/^mutable struct TCPServer <: LibuvServer$/;"	f
TCPSocket	stdlib/Sockets/src/Sockets.jl	/^    TCPSocket(fd::RawFD) = TCPSocket(Libc._get_osfhandle(fd))$/;"	f
TCPSocket	stdlib/Sockets/src/Sockets.jl	/^    function TCPSocket(handle::Ptr{Cvoid}, status)$/;"	f
TCPSocket	stdlib/Sockets/src/Sockets.jl	/^function TCPSocket(; delay=true)$/;"	f
TCPSocket	stdlib/Sockets/src/Sockets.jl	/^function TCPSocket(fd::OS_HANDLE)$/;"	f
TCPSocket	stdlib/Sockets/src/Sockets.jl	/^mutable struct TCPSocket <: LibuvStream$/;"	f
TEMP_CLEANUP	base/file.jl	/^const TEMP_CLEANUP = Dict{String,Bool}()$/;"	v
TEMP_CLEANUP_LOCK	base/file.jl	/^const TEMP_CLEANUP_LOCK = ReentrantLock()$/;"	v
TEMP_CLEANUP_MAX	base/file.jl	/^const TEMP_CLEANUP_MAX = Ref(1024)$/;"	v
TEMP_CLEANUP_MIN	base/file.jl	/^const TEMP_CLEANUP_MIN = Ref(1024)$/;"	v
TEST	test/keywordargs.jl	/^macro TEST()$/;"	f
TEST4538	test/keywordargs.jl	/^macro TEST4538()$/;"	f
TEST4538_2	test/keywordargs.jl	/^macro TEST4538_2()$/;"	f
TEST4538_3	test/keywordargs.jl	/^macro TEST4538_3()$/;"	f
TESTGROUPS	test/Makefile	/^TESTGROUPS = unicode strings compiler$/;"	m
TESTS	deps/srccache/patchelf-0.9/tests/Makefile.am	/^TESTS = $(src_TESTS) $(build_TESTS)$/;"	m
TESTS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^TESTS = $(src_TESTS) $(build_TESTS)$/;"	m
TESTS	test/Makefile	/^TESTS = all stdlib $(TESTGROUPS) \\$/;"	m
TESTSET_PRINT_ENABLE	stdlib/Test/src/Test.jl	/^const TESTSET_PRINT_ENABLE = Ref(true)$/;"	v
TESTS_ENVIRONMENT	deps/srccache/patchelf-0.9/tests/Makefile.am	/^TESTS_ENVIRONMENT = PATCHELF_DEBUG=1$/;"	m
TESTS_ENVIRONMENT	deps/srccache/patchelf-0.9/tests/Makefile.in	/^TESTS_ENVIRONMENT = PATCHELF_DEBUG=1$/;"	m
TEST_EXTENSIONS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^TEST_EXTENSIONS = @EXEEXT@ .test$/;"	m
TEST_LOGS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^TEST_LOGS = $(am__test_logs2:.test.log=.log)$/;"	m
TEST_LOG_COMPILE	deps/srccache/patchelf-0.9/tests/Makefile.in	/^TEST_LOG_COMPILE = $(TEST_LOG_COMPILER) $(AM_TEST_LOG_FLAGS) \\$/;"	m
TEST_LOG_DRIVER	deps/srccache/patchelf-0.9/tests/Makefile.in	/^TEST_LOG_DRIVER = $(SHELL) $(top_srcdir)\/build-aux\/test-driver$/;"	m
TEST_SUITE_LOG	deps/srccache/patchelf-0.9/tests/Makefile.in	/^TEST_SUITE_LOG = test-suite.log$/;"	m
THIRTY	stdlib/Dates/src/query.jl	/^const THIRTY = BitSet([1, 2, 8, 9, 15, 16, 22, 23, 29, 30])$/;"	v
THIRTYONE	stdlib/Dates/src/query.jl	/^const THIRTYONE = BitSet([1, 2, 3, 8, 9, 10, 15, 16, 17, 22, 23, 24, 29, 30, 31])$/;"	v
THREADING_H	src/threading.h	/^#define THREADING_H$/;"	d
THREAD_MATCH_CONTEXTS	base/pcre.jl	/^const THREAD_MATCH_CONTEXTS = Ptr{Cvoid}[C_NULL]$/;"	v
THREAD_RNGs	stdlib/Random/src/RNGs.jl	/^const THREAD_RNGs = MersenneTwister[]$/;"	v
THREAD_SLEEP_THRESHOLD_NAME	src/options.h	/^#define THREAD_SLEEP_THRESHOLD_NAME /;"	d
TIME_MAX	src/support/strptime.c	/^#define TIME_MAX	/;"	d	file:
TIndex	src/codegen.cpp	/^    Value *TIndex; \/\/ if `V` is an unboxed (tagged) Union described by `typ`, this gives the D/;"	m	struct:jl_cgval_t	typeref:typename:Value *	file:
TLayout	test/reflection.jl	/^mutable struct TLayout$/;"	f
TM	src/jitlayers.h	/^    TargetMachine &TM;$/;"	m	class:JuliaOJIT	typeref:typename:TargetMachine &
TM_APRIL	src/support/tzfile.h	/^#define TM_APRIL	/;"	d
TM_AUGUST	src/support/tzfile.h	/^#define TM_AUGUST	/;"	d
TM_DECEMBER	src/support/tzfile.h	/^#define TM_DECEMBER	/;"	d
TM_FEBRUARY	src/support/tzfile.h	/^#define TM_FEBRUARY	/;"	d
TM_FRIDAY	src/support/tzfile.h	/^#define TM_FRIDAY	/;"	d
TM_JANUARY	src/support/tzfile.h	/^#define TM_JANUARY	/;"	d
TM_JULY	src/support/tzfile.h	/^#define TM_JULY	/;"	d
TM_JUNE	src/support/tzfile.h	/^#define TM_JUNE	/;"	d
TM_MARCH	src/support/tzfile.h	/^#define TM_MARCH	/;"	d
TM_MAY	src/support/tzfile.h	/^#define TM_MAY	/;"	d
TM_MONDAY	src/support/tzfile.h	/^#define TM_MONDAY	/;"	d
TM_NOVEMBER	src/support/tzfile.h	/^#define TM_NOVEMBER	/;"	d
TM_OCTOBER	src/support/tzfile.h	/^#define TM_OCTOBER	/;"	d
TM_SATURDAY	src/support/tzfile.h	/^#define TM_SATURDAY	/;"	d
TM_SEPTEMBER	src/support/tzfile.h	/^#define TM_SEPTEMBER	/;"	d
TM_SUNDAY	src/support/tzfile.h	/^#define TM_SUNDAY	/;"	d
TM_THURSDAY	src/support/tzfile.h	/^#define TM_THURSDAY	/;"	d
TM_TUESDAY	src/support/tzfile.h	/^#define TM_TUESDAY	/;"	d
TM_WEDNESDAY	src/support/tzfile.h	/^#define TM_WEDNESDAY	/;"	d
TM_YEAR_BASE	src/support/tzfile.h	/^#define TM_YEAR_BASE	/;"	d
TO23094	test/operators.jl	/^struct TO23094$/;"	f
TOK_BACKREF	src/flisp/read.c	/^    TOK_SHARPDOT, TOK_LABEL, TOK_BACKREF, TOK_SHARPQUOTE, TOK_SHARPOPEN,$/;"	e	enum:__anonbc184df60103	file:
TOK_BQ	src/flisp/read.c	/^    TOK_BQ, TOK_COMMA, TOK_COMMAAT, TOK_COMMADOT,$/;"	e	enum:__anonbc184df60103	file:
TOK_CLOSE	src/flisp/read.c	/^    TOK_NONE, TOK_OPEN, TOK_CLOSE, TOK_DOT, TOK_QUOTE, TOK_SYM, TOK_NUM,$/;"	e	enum:__anonbc184df60103	file:
TOK_CLOSEB	src/flisp/read.c	/^    TOK_OPENB, TOK_CLOSEB, TOK_SHARPSYM, TOK_GENSYM, TOK_DOUBLEQUOTE$/;"	e	enum:__anonbc184df60103	file:
TOK_COMMA	src/flisp/read.c	/^    TOK_BQ, TOK_COMMA, TOK_COMMAAT, TOK_COMMADOT,$/;"	e	enum:__anonbc184df60103	file:
TOK_COMMAAT	src/flisp/read.c	/^    TOK_BQ, TOK_COMMA, TOK_COMMAAT, TOK_COMMADOT,$/;"	e	enum:__anonbc184df60103	file:
TOK_COMMADOT	src/flisp/read.c	/^    TOK_BQ, TOK_COMMA, TOK_COMMAAT, TOK_COMMADOT,$/;"	e	enum:__anonbc184df60103	file:
TOK_DOT	src/flisp/read.c	/^    TOK_NONE, TOK_OPEN, TOK_CLOSE, TOK_DOT, TOK_QUOTE, TOK_SYM, TOK_NUM,$/;"	e	enum:__anonbc184df60103	file:
TOK_DOUBLEQUOTE	src/flisp/read.c	/^    TOK_OPENB, TOK_CLOSEB, TOK_SHARPSYM, TOK_GENSYM, TOK_DOUBLEQUOTE$/;"	e	enum:__anonbc184df60103	file:
TOK_GENSYM	src/flisp/read.c	/^    TOK_OPENB, TOK_CLOSEB, TOK_SHARPSYM, TOK_GENSYM, TOK_DOUBLEQUOTE$/;"	e	enum:__anonbc184df60103	file:
TOK_LABEL	src/flisp/read.c	/^    TOK_SHARPDOT, TOK_LABEL, TOK_BACKREF, TOK_SHARPQUOTE, TOK_SHARPOPEN,$/;"	e	enum:__anonbc184df60103	file:
TOK_NONE	src/flisp/read.c	/^    TOK_NONE, TOK_OPEN, TOK_CLOSE, TOK_DOT, TOK_QUOTE, TOK_SYM, TOK_NUM,$/;"	e	enum:__anonbc184df60103	file:
TOK_NUM	src/flisp/read.c	/^    TOK_NONE, TOK_OPEN, TOK_CLOSE, TOK_DOT, TOK_QUOTE, TOK_SYM, TOK_NUM,$/;"	e	enum:__anonbc184df60103	file:
TOK_OPEN	src/flisp/read.c	/^    TOK_NONE, TOK_OPEN, TOK_CLOSE, TOK_DOT, TOK_QUOTE, TOK_SYM, TOK_NUM,$/;"	e	enum:__anonbc184df60103	file:
TOK_OPENB	src/flisp/read.c	/^    TOK_OPENB, TOK_CLOSEB, TOK_SHARPSYM, TOK_GENSYM, TOK_DOUBLEQUOTE$/;"	e	enum:__anonbc184df60103	file:
TOK_QUOTE	src/flisp/read.c	/^    TOK_NONE, TOK_OPEN, TOK_CLOSE, TOK_DOT, TOK_QUOTE, TOK_SYM, TOK_NUM,$/;"	e	enum:__anonbc184df60103	file:
TOK_SHARPDOT	src/flisp/read.c	/^    TOK_SHARPDOT, TOK_LABEL, TOK_BACKREF, TOK_SHARPQUOTE, TOK_SHARPOPEN,$/;"	e	enum:__anonbc184df60103	file:
TOK_SHARPOPEN	src/flisp/read.c	/^    TOK_SHARPDOT, TOK_LABEL, TOK_BACKREF, TOK_SHARPQUOTE, TOK_SHARPOPEN,$/;"	e	enum:__anonbc184df60103	file:
TOK_SHARPQUOTE	src/flisp/read.c	/^    TOK_SHARPDOT, TOK_LABEL, TOK_BACKREF, TOK_SHARPQUOTE, TOK_SHARPOPEN,$/;"	e	enum:__anonbc184df60103	file:
TOK_SHARPSYM	src/flisp/read.c	/^    TOK_OPENB, TOK_CLOSEB, TOK_SHARPSYM, TOK_GENSYM, TOK_DOUBLEQUOTE$/;"	e	enum:__anonbc184df60103	file:
TOK_SYM	src/flisp/read.c	/^    TOK_NONE, TOK_OPEN, TOK_CLOSE, TOK_DOT, TOK_QUOTE, TOK_SYM, TOK_NUM,$/;"	e	enum:__anonbc184df60103	file:
TOP_BIT	src/support/dtypes.h	/^#define TOP_BIT /;"	d
TOP_TUPLE	base/compiler/optimize.jl	/^const TOP_TUPLE = GlobalRef(Core, :tuple)$/;"	v
TOTAL_STACK_PADDING	src/interpreter-stacktrace.c	/^size_t TOTAL_STACK_PADDING = 0;$/;"	v	typeref:typename:size_t
TOTAL_STACK_PADDING	src/interpreter-stacktrace.c	/^size_t TOTAL_STACK_PADDING = MIN_STACK;$/;"	v	typeref:typename:size_t
TOTAL_STACK_PADDING	src/interpreter-stacktrace.c	/^size_t TOTAL_STACK_PADDING = STACK_PADDING + 32;$/;"	v	typeref:typename:size_t
TOTAL_STACK_PADDING	src/interpreter-stacktrace.c	/^size_t TOTAL_STACK_PADDING = STACK_PADDING;$/;"	v	typeref:typename:size_t
TPM	src/jitlayers.cpp	/^        PMTopLevelManager *TPM;$/;"	m	struct:JuliaPipeline::TPMAdapter	typeref:typename:PMTopLevelManager *	file:
TPMAdapter	src/jitlayers.cpp	/^        TPMAdapter(PMTopLevelManager *TPM) : TPM(TPM) {}$/;"	f	struct:JuliaPipeline::TPMAdapter	file:
TPMAdapter	src/jitlayers.cpp	/^    struct TPMAdapter : public PassManagerBase {$/;"	s	class:JuliaPipeline	file:
TParametricPrint	test/show.jl	/^struct TParametricPrint{a}; end$/;"	f
TRUE	stdlib/SuiteSparse/src/cholmod_h.jl	/^const TRUE  = Int32(1)$/;"	v
TRUE_TAG	stdlib/Serialization/src/Serialization.jl	/^const TRUE_TAG = sertag(true)$/;"	v
TRYCATCH	src/flisp/flisp.h	/^    value_t LAMBDA, IF, TRYCATCH;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
TSlow	test/abstractarray.jl	/^TSlow(     X::AbstractArray{T,N}) where {T,N  } = TSlow{T,N}(X)$/;"	f
TSlow	test/abstractarray.jl	/^TSlow(::Type{T}, dims::Int...) where {T} = TSlow(T, dims)$/;"	f
TSlow	test/abstractarray.jl	/^TSlow(::Type{T}, dims::NTuple{N,Int}) where {T,N} = TSlow{T,N}(Dict{NTuple{N,Int}, T}(), dims)$/;"	f
TSlow	test/abstractarray.jl	/^struct TSlow{T,N} <: AbstractArray{T,N}$/;"	f
TSlow18399	test/compiler/inference.jl	/^mutable struct TSlow18399{T}$/;"	f
TSlowNIndexes	test/abstractarray.jl	/^mutable struct TSlowNIndexes{T,N} <: AbstractArray{T,N}$/;"	f
TT20103	test/subtype.jl	/^struct TT20103{X,Y} end$/;"	f
TTY	base/stream.jl	/^    TTY(fd::RawFD) = TTY(Libc._get_osfhandle(fd))$/;"	f
TTY	base/stream.jl	/^    function TTY(handle::Ptr{Cvoid}, status)$/;"	f
TTY	base/stream.jl	/^function TTY(fd::OS_HANDLE)$/;"	f
TTY	base/stream.jl	/^mutable struct TTY <: LibuvStream$/;"	f
TTYTerminal	stdlib/REPL/src/Terminals.jl	/^mutable struct TTYTerminal <: UnixTerminal$/;"	f
TUPLE_TAG	stdlib/Serialization/src/Serialization.jl	/^const TUPLE_TAG = sertag(Tuple)$/;"	v
TWENTYNINE	stdlib/Dates/src/query.jl	/^const TWENTYNINE = BitSet([1, 8, 15, 22, 29])$/;"	v
TYPENAME_MODULE_FIELDINDEX	base/compiler/tfuncs.jl	/^const TYPENAME_MODULE_FIELDINDEX = fieldindex(Core.TypeName, :module)$/;"	v
TYPENAME_NAME_FIELDINDEX	base/compiler/tfuncs.jl	/^const TYPENAME_NAME_FIELDINDEX = fieldindex(Core.TypeName, :name)$/;"	v
TYPENAME_TAG	stdlib/Serialization/src/Serialization.jl	/^const TYPENAME_TAG = sertag(Core.TypeName)$/;"	v
TYPENAME_WRAPPER_FIELDINDEX	base/compiler/tfuncs.jl	/^const TYPENAME_WRAPPER_FIELDINDEX = fieldindex(Core.TypeName, :wrapper)$/;"	v
TZDEFAULT	src/support/tzfile.h	/^#define TZDEFAULT	/;"	d
TZDEFRULES	src/support/tzfile.h	/^#define TZDEFRULES	/;"	d
TZDIR	src/support/tzfile.h	/^#define TZDIR	/;"	d
TZ_MAGIC	src/support/tzfile.h	/^#define	TZ_MAGIC	/;"	d
TZ_MAX_CHARS	src/support/tzfile.h	/^#define TZ_MAX_CHARS	/;"	d
TZ_MAX_LEAPS	src/support/tzfile.h	/^#define TZ_MAX_LEAPS	/;"	d
TZ_MAX_TIMES	src/support/tzfile.h	/^#define TZ_MAX_TIMES	/;"	d
TZ_MAX_TYPES	src/support/tzfile.h	/^#define TZ_MAX_TYPES	/;"	d
T_30763	test/sorting.jl	/^            struct T_30763{T}$/;"	f
T_DOUBLE	src/support/dtypes.h	/^               T_INT64, T_UINT64, T_FLOAT, T_DOUBLE } numerictype_t;$/;"	e	enum:__anon085ab8f70103
T_FFUNC_COST	base/compiler/tfuncs.jl	/^const T_FFUNC_COST = Vector{Int}()$/;"	v
T_FFUNC_KEY	base/compiler/tfuncs.jl	/^const T_FFUNC_KEY = Vector{Any}()$/;"	v
T_FFUNC_VAL	base/compiler/tfuncs.jl	/^const T_FFUNC_VAL = Vector{Tuple{Int, Int, Any}}()$/;"	v
T_FIXNUM	src/flisp/flisp.h	/^#define T_FIXNUM /;"	d
T_FLOAT	src/support/dtypes.h	/^               T_INT64, T_UINT64, T_FLOAT, T_DOUBLE } numerictype_t;$/;"	e	enum:__anon085ab8f70103
T_IFUNC	base/compiler/tfuncs.jl	/^const T_IFUNC = Vector{Tuple{Int, Int, Any}}(undef, N_IFUNC)$/;"	v
T_IFUNC_COST	base/compiler/tfuncs.jl	/^const T_IFUNC_COST = Vector{Int}(undef, N_IFUNC)$/;"	v
T_INT16	src/support/dtypes.h	/^typedef enum { T_INT8, T_UINT8, T_INT16, T_UINT16, T_INT32, T_UINT32,$/;"	e	enum:__anon085ab8f70103
T_INT32	src/support/dtypes.h	/^typedef enum { T_INT8, T_UINT8, T_INT16, T_UINT16, T_INT32, T_UINT32,$/;"	e	enum:__anon085ab8f70103
T_INT64	src/support/dtypes.h	/^               T_INT64, T_UINT64, T_FLOAT, T_DOUBLE } numerictype_t;$/;"	e	enum:__anon085ab8f70103
T_INT8	src/support/dtypes.h	/^typedef enum { T_INT8, T_UINT8, T_INT16, T_UINT16, T_INT32, T_UINT32,$/;"	e	enum:__anon085ab8f70103
T_PTRDIFF	src/support/dtypes.h	/^# define T_PTRDIFF /;"	d
T_SIZE	src/support/dtypes.h	/^# define T_SIZE /;"	d
T_UINT16	src/support/dtypes.h	/^typedef enum { T_INT8, T_UINT8, T_INT16, T_UINT16, T_INT32, T_UINT32,$/;"	e	enum:__anon085ab8f70103
T_UINT32	src/support/dtypes.h	/^typedef enum { T_INT8, T_UINT8, T_INT16, T_UINT16, T_INT32, T_UINT32,$/;"	e	enum:__anon085ab8f70103
T_UINT64	src/support/dtypes.h	/^               T_INT64, T_UINT64, T_FLOAT, T_DOUBLE } numerictype_t;$/;"	e	enum:__anon085ab8f70103
T_UINT8	src/support/dtypes.h	/^typedef enum { T_INT8, T_UINT8, T_INT16, T_UINT16, T_INT32, T_UINT32,$/;"	e	enum:__anon085ab8f70103
T_char	src/codegen.cpp	/^static IntegerType *T_char;$/;"	v	typeref:typename:IntegerType *	file:
T_float128	src/codegen.cpp	/^static Type *T_float128;$/;"	v	typeref:typename:Type *	file:
T_float16	src/codegen.cpp	/^static Type *T_float16;$/;"	v	typeref:typename:Type *	file:
T_float32	src/codegen.cpp	/^static Type *T_float32;$/;"	v	typeref:typename:Type *	file:
T_float64	src/codegen.cpp	/^static Type *T_float64;$/;"	v	typeref:typename:Type *	file:
T_int1	src/codegen.cpp	/^static IntegerType *T_int1;$/;"	v	typeref:typename:IntegerType *	file:
T_int16	src/codegen.cpp	/^static IntegerType *T_int16;$/;"	v	typeref:typename:IntegerType *	file:
T_int32	src/codegen.cpp	/^static IntegerType *T_int32;$/;"	v	typeref:typename:IntegerType *	file:
T_int32	src/llvm-alloc-opt.cpp	/^    Type *T_int32;$/;"	m	struct:__anon0a1571000111::AllocOpt	typeref:typename:Type *	file:
T_int32	src/llvm-multiversioning.cpp	/^    Type *T_int32;$/;"	m	struct:__anond5683ea40111::CloneCtx	typeref:typename:Type *	file:
T_int32	src/llvm-pass-helpers.h	/^    llvm::Type *T_int32;$/;"	m	struct:JuliaPassContext	typeref:typename:llvm::Type *
T_int64	src/codegen.cpp	/^static IntegerType *T_int64;$/;"	v	typeref:typename:IntegerType *	file:
T_int64	src/llvm-alloc-opt.cpp	/^    Type *T_int64;$/;"	m	struct:__anon0a1571000111::AllocOpt	typeref:typename:Type *	file:
T_int8	src/codegen.cpp	/^static IntegerType *T_int8;$/;"	v	typeref:typename:IntegerType *	file:
T_int8	src/llvm-alloc-opt.cpp	/^    Type *T_int8;$/;"	m	struct:__anon0a1571000111::AllocOpt	typeref:typename:Type *	file:
T_int8	src/llvm-pass-helpers.h	/^    llvm::Type *T_int8;$/;"	m	struct:JuliaPassContext	typeref:typename:llvm::Type *
T_int8	src/llvm-ptls.cpp	/^    Type *T_int8;$/;"	m	struct:__anonf46923380111::LowerPTLS	typeref:typename:Type *	file:
T_jlvalue	src/codegen.cpp	/^static Type *T_jlvalue;$/;"	v	typeref:typename:Type *	file:
T_jlvalue	src/llvm-pass-helpers.h	/^    llvm::Type *T_jlvalue;$/;"	m	struct:JuliaPassContext	typeref:typename:llvm::Type *
T_pfloat32	src/codegen.cpp	/^static Type *T_pfloat32;$/;"	v	typeref:typename:Type *	file:
T_pfloat64	src/codegen.cpp	/^static Type *T_pfloat64;$/;"	v	typeref:typename:Type *	file:
T_pint16	src/codegen.cpp	/^static Type *T_pint16;$/;"	v	typeref:typename:Type *	file:
T_pint32	src/codegen.cpp	/^static Type *T_pint32;$/;"	v	typeref:typename:Type *	file:
T_pint64	src/codegen.cpp	/^static Type *T_pint64;$/;"	v	typeref:typename:Type *	file:
T_pint8	src/codegen.cpp	/^static Type *T_pint8;$/;"	v	typeref:typename:Type *	file:
T_pint8	src/llvm-alloc-opt.cpp	/^    Type *T_pint8;$/;"	m	struct:__anon0a1571000111::AllocOpt	typeref:typename:Type *	file:
T_pint8	src/llvm-pass-helpers.h	/^    llvm::PointerType *T_pint8;$/;"	m	struct:JuliaPassContext	typeref:typename:llvm::PointerType *
T_pint8	src/llvm-ptls.cpp	/^    PointerType *T_pint8;$/;"	m	struct:__anonf46923380111::LowerPTLS	typeref:typename:PointerType *	file:
T_pjlvalue	src/codegen.cpp	/^static Type *T_pjlvalue;$/;"	v	typeref:typename:Type *	file:
T_pjlvalue	src/jitlayers.cpp	/^static Type *T_pjlvalue;$/;"	v	typeref:typename:Type *	file:
T_pjlvalue	src/llvm-alloc-opt.cpp	/^    Type *T_pjlvalue;$/;"	m	struct:__anon0a1571000111::AllocOpt	typeref:typename:Type *	file:
T_pjlvalue	src/llvm-pass-helpers.h	/^    llvm::PointerType *T_pjlvalue;$/;"	m	struct:JuliaPassContext	typeref:typename:llvm::PointerType *
T_pjlvalue_der	src/llvm-pass-helpers.h	/^    llvm::PointerType *T_pjlvalue_der;$/;"	m	struct:JuliaPassContext	typeref:typename:llvm::PointerType *
T_ppint8	src/codegen.cpp	/^static Type *T_ppint8;$/;"	v	typeref:typename:Type *	file:
T_ppjlvalue	src/codegen.cpp	/^static Type *T_ppjlvalue;$/;"	v	typeref:typename:Type *	file:
T_ppjlvalue	src/llvm-pass-helpers.h	/^    llvm::PointerType *T_ppjlvalue;$/;"	m	struct:JuliaPassContext	typeref:typename:llvm::PointerType *
T_ppjlvalue	src/llvm-ptls.cpp	/^    PointerType *T_ppjlvalue;$/;"	m	struct:__anonf46923380111::LowerPTLS	typeref:typename:PointerType *	file:
T_ppjlvalue_der	src/llvm-pass-helpers.h	/^    llvm::PointerType *T_ppjlvalue_der;$/;"	m	struct:JuliaPassContext	typeref:typename:llvm::PointerType *
T_pppint8	src/codegen.cpp	/^static Type *T_pppint8;$/;"	v	typeref:typename:Type *	file:
T_pppjlvalue	src/llvm-ptls.cpp	/^    PointerType *T_pppjlvalue;$/;"	m	struct:__anonf46923380111::LowerPTLS	typeref:typename:PointerType *	file:
T_pprjlvalue	src/codegen.cpp	/^static Type *T_pprjlvalue;$/;"	v	typeref:typename:Type *	file:
T_pprjlvalue	src/llvm-alloc-opt.cpp	/^    Type *T_pprjlvalue;$/;"	m	struct:__anon0a1571000111::AllocOpt	typeref:typename:Type *	file:
T_prjlvalue	src/codegen.cpp	/^static Type *T_prjlvalue;$/;"	v	typeref:typename:Type *	file:
T_prjlvalue	src/llvm-alloc-opt.cpp	/^    Type *T_prjlvalue;$/;"	m	struct:__anon0a1571000111::AllocOpt	typeref:typename:Type *	file:
T_prjlvalue	src/llvm-pass-helpers.h	/^    llvm::PointerType *T_prjlvalue;$/;"	m	struct:JuliaPassContext	typeref:typename:llvm::PointerType *
T_psize	src/codegen.cpp	/^static Type *T_psize;$/;"	v	typeref:typename:Type *	file:
T_psize	src/jitlayers.cpp	/^static Type *T_psize;$/;"	v	typeref:typename:Type *	file:
T_psize	src/llvm-multiversioning.cpp	/^    PointerType *T_psize;$/;"	m	struct:__anond5683ea40111::CloneCtx	typeref:typename:PointerType *	file:
T_ptls_getter	src/llvm-ptls.cpp	/^    PointerType *T_ptls_getter;$/;"	m	struct:__anonf46923380111::LowerPTLS	typeref:typename:PointerType *	file:
T_pvoidfunc	src/codegen.cpp	/^static Type *T_pvoidfunc;$/;"	v	typeref:typename:Type *	file:
T_pvoidfunc	src/llvm-multiversioning.cpp	/^    PointerType *T_pvoidfunc;$/;"	m	struct:__anond5683ea40111::CloneCtx	typeref:typename:PointerType *	file:
T_sigatomic	src/codegen.cpp	/^static IntegerType *T_sigatomic;$/;"	v	typeref:typename:IntegerType *	file:
T_size	src/codegen.cpp	/^static IntegerType *T_size;$/;"	v	typeref:typename:IntegerType *	file:
T_size	src/jitlayers.cpp	/^static IntegerType *T_size;$/;"	v	typeref:typename:IntegerType *	file:
T_size	src/llvm-alloc-opt.cpp	/^    Type *T_size;$/;"	m	struct:__anon0a1571000111::AllocOpt	typeref:typename:Type *	file:
T_size	src/llvm-multiversioning.cpp	/^    Type *T_size;$/;"	m	struct:__anond5683ea40111::CloneCtx	typeref:typename:Type *	file:
T_size	src/llvm-pass-helpers.h	/^    llvm::Type *T_size;$/;"	m	struct:JuliaPassContext	typeref:typename:llvm::Type *
T_size	src/llvm-ptls.cpp	/^    Type *T_size;$/;"	m	struct:__anonf46923380111::LowerPTLS	typeref:typename:Type *	file:
T_uint16	src/codegen.cpp	/^static IntegerType *T_uint16;$/;"	v	typeref:typename:IntegerType *	file:
T_uint32	src/codegen.cpp	/^static IntegerType *T_uint32;$/;"	v	typeref:typename:IntegerType *	file:
T_uint32	src/jitlayers.cpp	/^static IntegerType *T_uint32;$/;"	v	typeref:typename:IntegerType *	file:
T_uint64	src/codegen.cpp	/^static IntegerType *T_uint64;$/;"	v	typeref:typename:IntegerType *	file:
T_uint64	src/jitlayers.cpp	/^static IntegerType *T_uint64;$/;"	v	typeref:typename:IntegerType *	file:
T_uint8	src/codegen.cpp	/^static IntegerType *T_uint8;$/;"	v	typeref:typename:IntegerType *	file:
T_void	src/codegen.cpp	/^static Type *T_void;$/;"	v	typeref:typename:Type *	file:
T_void	src/llvm-multiversioning.cpp	/^    Type *T_void;$/;"	m	struct:__anond5683ea40111::CloneCtx	typeref:typename:Type *	file:
Tab completion	stdlib/REPL/docs/src/index.md	/^## Tab completion$/;"	s
Table	src/disasm.cpp	/^    TableType Table;$/;"	m	class:__anon2853c92e0211::SymbolTable	typeref:typename:TableType	file:
Table	stdlib/Markdown/src/GitHub/table.jl	/^mutable struct Table$/;"	f
TableType	src/disasm.cpp	/^    typedef std::map<uint64_t, std::string> TableType;$/;"	t	class:__anon2853c92e0211::SymbolTable	typeref:typename:std::map<uint64_t,std::string>	file:
TagRef	src/staticdata.c	/^    TagRef,$/;"	e	enum:RefTags	file:
Tagging the release	doc/build/distributing.md	/^## Tagging the release$/;"	s
Take	base/iterators.jl	/^    function Take(xs::I, n::Integer) where {I}$/;"	f
Take	base/iterators.jl	/^struct Take{I}$/;"	f
Talking to the compiler (the `:meta` mechanism)	doc/src/devdocs/meta.md	/^# Talking to the compiler (the `:meta` mechanism)$/;"	c
Target	src/llvm-multiversioning.cpp	/^        Target(int idx, const jl_target_spec_t &spec) :$/;"	f	struct:__anond5683ea40111::CloneCtx::Target	file:
Target	src/llvm-multiversioning.cpp	/^    struct Target {$/;"	s	struct:__anond5683ea40111::CloneCtx	file:
Target Architectures	doc/build/distributing.md	/^Target Architectures$/;"	s
TargetData	src/processor.cpp	/^struct TargetData {$/;"	s	namespace:__anon839834ed0111	file:
Task states	doc/src/manual/control-flow.md	/^### Task states$/;"	S
TaskFailedException	base/task.jl	/^struct TaskFailedException <: Exception$/;"	f
TaskProtocol	contrib/mac/frameworkapp/ExecSandbox/ExecSandboxProtocol.h	/^@protocol TaskProtocol$/;"	P
Tasks	doc/src/base/parallel.md	/^# Tasks$/;"	c
Tasks and events	doc/src/manual/control-flow.md	/^### Tasks and events$/;"	S
Terminal, Editors and IDEs	README.md	/^## Terminal, Editors and IDEs$/;"	s
TerminalBuffer	stdlib/REPL/src/Terminals.jl	/^mutable struct TerminalBuffer <: UnixTerminal$/;"	f
TerminalMenus	stdlib/REPL/docs/src/index.md	/^# TerminalMenus$/;"	c
TerminalMenus	stdlib/REPL/src/TerminalMenus/TerminalMenus.jl	/^module TerminalMenus$/;"	f
TerminalMenusTest	stdlib/REPL/test/runtests.jl	/^module TerminalMenusTest$/;"	f
Terminals	stdlib/REPL/src/Terminals.jl	/^module Terminals$/;"	f
TerminatorInst	src/codegen.cpp	/^typedef Instruction TerminatorInst;$/;"	t	typeref:typename:Instruction	file:
TerminatorInst	src/llvm-ptls.cpp	/^typedef Instruction TerminatorInst;$/;"	t	typeref:typename:Instruction	file:
Test	stdlib/Test/src/Test.jl	/^module Test$/;"	f
Test.finish	stdlib/Test/test/runtests.jl	/^Test.finish(ts::NoThrowTestSet) = ts.results$/;"	f
Test.record	stdlib/Test/test/runtests.jl	/^Test.record(ts::NoThrowTestSet, t::Test.Result) = (push!(ts.results, t); t)$/;"	f
Test13452	stdlib/Serialization/test/runtests.jl	/^module Test13452$/;"	f
Test15264	test/core.jl	/^module Test15264$/;"	f
Test20653	test/syntax.jl	/^module Test20653$/;"	f
Test21604	test/syntax.jl	/^@test_nowarn @eval module Test21604$/;"	f
Test21607	test/syntax.jl	/^module Test21607$/;"	f
Test27477	test/ccall.jl	/^module Test27477$/;"	f
Test27970Empty	test/misc.jl	/^@kwdef struct Test27970Empty end$/;"	f
Test27970Typed	test/misc.jl	/^@kwdef struct Test27970Typed$/;"	f
Test27970Untyped	test/misc.jl	/^@kwdef struct Test27970Untyped$/;"	f
Test29307	test/misc.jl	/^@kwdef struct Test29307{T<:Integer} <: AbstractTest29307$/;"	f
TestAbstractArray	test/abstractarray.jl	/^mutable struct TestAbstractArray end$/;"	f
TestAddmul	stdlib/LinearAlgebra/test/addmul.jl	/^module TestAddmul$/;"	f
TestAdjointTranspose	stdlib/LinearAlgebra/test/adjtrans.jl	/^module TestAdjointTranspose$/;"	f
TestArrayNUL	test/core.jl	/^module TestArrayNUL$/;"	f
TestBLAS	stdlib/LinearAlgebra/test/blas.jl	/^module TestBLAS$/;"	f
TestBidiagonal	stdlib/LinearAlgebra/test/bidiag.jl	/^module TestBidiagonal$/;"	f
TestBoundsCheck	test/boundscheck_exec.jl	/^module TestBoundsCheck$/;"	f
TestBroadcastInternals	test/broadcast.jl	/^module TestBroadcastInternals$/;"	f
TestBunchKaufman	stdlib/LinearAlgebra/test/bunchkaufman.jl	/^module TestBunchKaufman$/;"	f
TestCholesky	stdlib/LinearAlgebra/test/cholesky.jl	/^module TestCholesky$/;"	f
TestDeadElim16011	test/core.jl	/^module TestDeadElim16011$/;"	f
TestDense	stdlib/LinearAlgebra/test/dense.jl	/^module TestDense$/;"	f
TestDiagonal	stdlib/LinearAlgebra/test/diagonal.jl	/^module TestDiagonal$/;"	f
TestDict	test/dict.jl	/^            function TestDict(args...)$/;"	f
TestDict	test/dict.jl	/^        mutable struct TestDict{K, V}  <: AbstractDict{K, V}$/;"	f
TestEigen	stdlib/LinearAlgebra/test/eigen.jl	/^module TestEigen$/;"	f
TestExpandModule	test/meta.jl	/^module TestExpandModule$/;"	f
TestGeneratedThrow	test/staged.jl	/^module TestGeneratedThrow$/;"	f
TestGeneric	stdlib/LinearAlgebra/test/generic.jl	/^module TestGeneric$/;"	f
TestGivens	stdlib/LinearAlgebra/test/givens.jl	/^module TestGivens$/;"	f
TestHessenberg	stdlib/LinearAlgebra/test/hessenberg.jl	/^module TestHessenberg$/;"	f
TestInitError	test/core.jl	/^            module TestInitError$/;"	f
TestInnerConstructor	test/misc.jl	/^    TestInnerConstructor(a::Int) = (@assert a>0; new(a))$/;"	f
TestInnerConstructor	test/misc.jl	/^    function TestInnerConstructor(a::String)$/;"	f
TestInnerConstructor	test/misc.jl	/^@kwdef struct TestInnerConstructor$/;"	f
TestKWError	test/errorshow.jl	/^module TestKWError$/;"	f
TestLAPACK	stdlib/LinearAlgebra/test/lapack.jl	/^module TestLAPACK$/;"	f
TestLDLT	stdlib/LinearAlgebra/test/ldlt.jl	/^module TestLDLT$/;"	f
TestLQ	stdlib/LinearAlgebra/test/lq.jl	/^module TestLQ$/;"	f
TestLU	stdlib/LinearAlgebra/test/lu.jl	/^module TestLU$/;"	f
TestLogger	stdlib/Test/src/logging.jl	/^TestLogger(; min_level=Info, catch_exceptions=false) = TestLogger(LogRecord[], min_level, catch_/;"	f
TestLogger	stdlib/Test/src/logging.jl	/^mutable struct TestLogger <: AbstractLogger$/;"	f
TestMacroGlobalFunction	test/core.jl	/^module TestMacroGlobalFunction$/;"	f
TestMatmul	stdlib/LinearAlgebra/test/matmul.jl	/^module TestMatmul$/;"	f
TestMeta_16578	test/syntax.jl	/^module TestMeta_16578$/;"	f
TestMod7648	test/reflection.jl	/^module TestMod7648$/;"	f
TestModSub9475	test/reflection.jl	/^module TestModSub9475$/;"	f
TestModuleAssignment	test/core.jl	/^module TestModuleAssignment$/;"	f
TestMutable	test/core.jl	/^mutable struct TestMutable$/;"	f
TestNLoops15895	test/arrayops.jl	/^module TestNLoops15895$/;"	f
TestNewTypeError	test/core.jl	/^module TestNewTypeError$/;"	f
TestOutsideVar	test/misc.jl	/^@kwdef struct TestOutsideVar$/;"	f
TestPR18218	stdlib/LinearAlgebra/test/matmul.jl	/^module TestPR18218$/;"	f
TestPinv	stdlib/LinearAlgebra/test/pinv.jl	/^module TestPinv$/;"	f
TestPkg	test/TestPkg/src/TestPkg.jl	/^module TestPkg$/;"	f
TestQR	stdlib/LinearAlgebra/test/qr.jl	/^module TestQR$/;"	f
TestRecursiveConstGlobalStructCtor	test/core.jl	/^module TestRecursiveConstGlobalStructCtor$/;"	f
TestSSA16244	test/core.jl	/^module TestSSA16244$/;"	f
TestSVD	stdlib/LinearAlgebra/test/svd.jl	/^module TestSVD$/;"	f
TestSchur	stdlib/LinearAlgebra/test/schur.jl	/^module TestSchur$/;"	f
TestSerCnt	stdlib/Distributed/test/distributed_exec.jl	/^    mutable struct TestSerCnt$/;"	f
TestSetException	stdlib/Test/src/Test.jl	/^struct TestSetException <: Exception$/;"	f
TestSharedArrayResize	test/core.jl	/^module TestSharedArrayResize$/;"	f
TestShowType	test/show.jl	/^module TestShowType$/;"	f
TestSpecial	stdlib/LinearAlgebra/test/special.jl	/^module TestSpecial$/;"	f
TestStructuredBroadcast	stdlib/LinearAlgebra/test/structuredbroadcast.jl	/^module TestStructuredBroadcast$/;"	f
TestSymmetric	stdlib/LinearAlgebra/test/symmetric.jl	/^module TestSymmetric$/;"	f
TestThrowNoGetindex	test/abstractarray.jl	/^mutable struct TestThrowNoGetindex{T} <: AbstractVector{T} end$/;"	f
TestTriangular	stdlib/LinearAlgebra/test/triangular.jl	/^module TestTriangular$/;"	f
TestTridiagonal	stdlib/LinearAlgebra/test/tridiag.jl	/^module TestTridiagonal$/;"	f
TestUniformscaling	stdlib/LinearAlgebra/test/uniformscaling.jl	/^module TestUniformscaling$/;"	f
Test_type	test/errorshow.jl	/^mutable struct Test_type end$/;"	f
Test_x	stdlib/REPL/test/replcompletions.jl	/^        mutable struct Test_x$/;"	f
Test_y	stdlib/REPL/test/replcompletions.jl	/^        mutable struct Test_y$/;"	f
Testing	doc/README.md	/^## Testing$/;"	s
Testing Base Julia	stdlib/Test/docs/src/index.md	/^## Testing Base Julia$/;"	s
Testing log events	stdlib/Logging/docs/src/index.md	/^## Testing log events$/;"	s
TestingExported	test/reflection.jl	/^module TestingExported$/;"	f
Text	base/docs/utils.jl	/^mutable struct Text{T}$/;"	f
Text I/O	doc/src/base/io-network.md	/^## Text I\/O$/;"	s
Text I/O	doc/src/manual/networking-and-streams.md	/^## Text I\/O$/;"	s
TextDisplay	base/multimedia.jl	/^struct TextDisplay <: AbstractDisplay$/;"	f
TextInterface	stdlib/REPL/src/LineEdit.jl	/^abstract type TextInterface end$/;"	f
TextTerminal	stdlib/REPL/src/Terminals.jl	/^abstract type TextTerminal <: AbstractTerminal end$/;"	f
The Julia Language	README.md	/^## The Julia Language$/;"	s
The Julia REPL	stdlib/REPL/docs/src/index.md	/^# The Julia REPL$/;"	c
The Julian mode	stdlib/REPL/docs/src/index.md	/^### The Julian mode$/;"	S
The [`throw`](@ref) function	doc/src/manual/control-flow.md	/^### The [`throw`](@ref) function$/;"	S
The `@threads` Macro	doc/src/manual/parallel-computing.md	/^## The `@threads` Macro$/;"	s
The `return` Keyword	doc/src/manual/functions.md	/^## The `return` Keyword$/;"	s
The `try/catch` statement	doc/src/manual/control-flow.md	/^### The `try\/catch` statement$/;"	S
The analyzer annotations	doc/src/devdocs/gc-sa.md	/^## The analyzer annotations$/;"	s
The bounds checking call hierarchy	doc/src/devdocs/boundscheck.md	/^## The bounds checking call hierarchy$/;"	s
The dangers of abusing multiple dispatch (aka, more on types with values-as-parameters)	doc/src/manual/performance-tips.md	/^## The dangers of abusing multiple dispatch (aka, more on types with values-as-parameters)$/;"	s
The different prompt modes	stdlib/REPL/docs/src/index.md	/^## The different prompt modes$/;"	s
The inlining algorithm (inline_worthy)	doc/src/devdocs/inference.md	/^## The inlining algorithm (inline_worthy)$/;"	s
The jlcall calling convention	doc/src/devdocs/llvm.md	/^## The jlcall calling convention$/;"	s
The two uses of the `...` operator: slurping and splatting	doc/src/manual/faq.md	/^### The two uses of the `...` operator: slurping and splatting$/;"	S
The uniform scaling operator	stdlib/LinearAlgebra/docs/src/index.md	/^### The uniform scaling operator$/;"	S
Things to watch out for	doc/src/devdocs/offset-arrays.md	/^### Things to watch out for$/;"	S
Thread-safety	doc/src/manual/calling-c-and-fortran-code.md	/^## Thread-safety$/;"	s
ThreadSynchronizer	base/lock.jl	/^const ThreadSynchronizer = GenericCondition{Threads.SpinLock}$/;"	v
Threads	base/threads.jl	/^module Threads$/;"	f
Threads.threadid	base/task.jl	/^Threads.threadid(t::Task) = Int(ccall(:jl_get_task_tid, Int16, (Any,), t)+1)$/;"	f
Threw	stdlib/Test/src/Test.jl	/^struct Threw <: ExecutionResult$/;"	f
Throwing Julia Exceptions	doc/src/manual/embedding.md	/^### Throwing Julia Exceptions$/;"	S
Thunk	src/codegen.cpp	/^static Attribute Thunk;$/;"	v	typeref:typename:Attribute	file:
Time	stdlib/Dates/src/adjusters.jl	/^function Time(func::Function, h, mi, s, ms, us; step::Period=Nanosecond(1), limit::Int=10000)$/;"	f
Time	stdlib/Dates/src/adjusters.jl	/^function Time(func::Function, h, mi, s, ms; step::Period=Microsecond(1), limit::Int=10000)$/;"	f
Time	stdlib/Dates/src/adjusters.jl	/^function Time(func::Function, h, mi, s; step::Period=Millisecond(1), limit::Int=10000)$/;"	f
Time	stdlib/Dates/src/adjusters.jl	/^function Time(func::Function, h, mi=0; step::Period=Second(1), limit::Int=10000)$/;"	f
Time	stdlib/Dates/src/conversions.jl	/^Time(dt::DateTime) = convert(Time, dt)$/;"	f
Time	stdlib/Dates/src/io.jl	/^Time(t::AbstractString, df::DateFormat=ISOTimeFormat) = parse(Time, t, df)$/;"	f
Time	stdlib/Dates/src/io.jl	/^function Time(t::AbstractString, format::AbstractString; locale::Locale=ENGLISH)$/;"	f
Time	stdlib/Dates/src/types.jl	/^    Time(instant::Nanosecond) = new(instant)$/;"	f
Time	stdlib/Dates/src/types.jl	/^Time(dt::Base.Libc.TmStruct) = Time(dt.hour, dt.min, dt.sec)$/;"	f
Time	stdlib/Dates/src/types.jl	/^Time(h, mi=0, s=0, ms=0, us=0, ns=0, ampm::AMPM=TWENTYFOURHOUR) = Time(Int64(h), Int64(mi), Int6/;"	f
Time	stdlib/Dates/src/types.jl	/^function Time(h::Hour, mi::Minute=Minute(0), s::Second=Second(0),$/;"	f
Time	stdlib/Dates/src/types.jl	/^function Time(h::Int64, mi::Int64=0, s::Int64=0, ms::Int64=0, us::Int64=0, ns::Int64=0, ampm::AM/;"	f
Time	stdlib/Dates/src/types.jl	/^function Time(period::TimePeriod, periods::TimePeriod...)$/;"	f
Time	stdlib/Dates/src/types.jl	/^struct Time <: TimeType$/;"	f
TimePeriod	stdlib/Dates/src/types.jl	/^abstract type TimePeriod <: Period end$/;"	f
TimeStruct	stdlib/LibGit2/src/types.jl	/^struct TimeStruct$/;"	f
TimeType	stdlib/Dates/src/types.jl	/^abstract type TimeType <: AbstractTime end$/;"	f
TimeType-Period Arithmetic	stdlib/Dates/docs/src/index.md	/^## TimeType-Period Arithmetic$/;"	s
TimeTypeOrPeriod	stdlib/Dates/src/rounding.jl	/^const TimeTypeOrPeriod = Union{TimeType, ConvertiblePeriod}$/;"	v
TimeVal	base/libc.jl	/^function TimeVal()$/;"	f
TimeVal	base/libc.jl	/^struct TimeVal$/;"	f
TimeZone	stdlib/Dates/src/types.jl	/^abstract type TimeZone end$/;"	f
Timer	base/asyncevent.jl	/^    function Timer(timeout::Real; interval::Real = 0.0)$/;"	f
Timer	base/asyncevent.jl	/^function Timer(cb::Function, timeout::Real; interval::Real=0.0)$/;"	f
Timer	base/asyncevent.jl	/^mutable struct Timer$/;"	f
Timer	stdlib/Dates/src/types.jl	/^Timer(time::Period; interval::Period = Second(0)) =$/;"	f
TmStruct	base/libc.jl	/^    TmStruct() = new(0,0,0,0,0,0,0,0,0,0,0,0,0,0)$/;"	f
TmStruct	base/libc.jl	/^    TmStruct(sec, min, hour, mday, month, year, wday, yday, isdst) =$/;"	f
TmStruct	base/libc.jl	/^    function TmStruct(t::Real)$/;"	f
TmStruct	base/libc.jl	/^mutable struct TmStruct$/;"	f
Tmp14173	stdlib/InteractiveUtils/test/runtests.jl	/^module Tmp14173$/;"	f
ToDelete	src/llvm-propagate-addrspaces.cpp	/^    std::vector<Instruction *> ToDelete;$/;"	m	struct:PropagateJuliaAddrspaces	typeref:typename:std::vector<Instruction * >	file:
ToInsert	src/llvm-propagate-addrspaces.cpp	/^    std::vector<std::pair<Instruction *, Instruction *>> ToInsert;$/;"	m	struct:PropagateJuliaAddrspaces	typeref:typename:std::vector<std::pair<Instruction *,Instruction * >>	file:
Tooling Improvements	HISTORY.md	/^Tooling Improvements$/;"	s
Tooling Improvements	NEWS.md	/^Tooling Improvements$/;"	s
Toplevel elements	stdlib/Markdown/docs/src/index.md	/^## Toplevel elements$/;"	s
TopmostSafepoint	src/llvm-late-gc-lowering.cpp	/^    int TopmostSafepoint = -1;$/;"	m	struct:BBState	typeref:typename:int	file:
TopoTestManager	stdlib/Distributed/test/topology.jl	/^mutable struct TopoTestManager <: ClusterManager$/;"	f
Tracked	src/codegen_shared.h	/^    Tracked = 10,$/;"	e	enum:AddressSpace
Trait-based dispatch	doc/src/manual/methods.md	/^### Trait-based dispatch$/;"	S
TransferProgress	stdlib/LibGit2/src/types.jl	/^@kwdef struct TransferProgress$/;"	f
Transform	test/core.jl	/^    Transform() = new(0, 0, 0)$/;"	f
Transform	test/core.jl	/^mutable struct Transform <: Component$/;"	f
Transpose	stdlib/LinearAlgebra/src/adjtrans.jl	/^    function Transpose{T,S}(A::S) where {T,S}$/;"	f
Transpose	stdlib/LinearAlgebra/src/adjtrans.jl	/^Transpose(A) = Transpose{Base.promote_op(transpose,eltype(A)),typeof(A)}(A)$/;"	f
Transpose	stdlib/LinearAlgebra/src/adjtrans.jl	/^struct Transpose{T,S} <: AbstractMatrix{T}$/;"	f
Transpose	stdlib/LinearAlgebra/test/matmul.jl	/^Transpose(x::RootInt) = x$/;"	f
Treat Subnormal Numbers as Zeros	doc/src/manual/performance-tips.md	/^## Treat Subnormal Numbers as Zeros$/;"	s
TrickyArithmetic	stdlib/LinearAlgebra/test/trickyarithmetic.jl	/^module TrickyArithmetic$/;"	f
Tridiagonal	stdlib/LinearAlgebra/src/bidiag.jl	/^function Tridiagonal{T}(A::Bidiagonal) where T$/;"	f
Tridiagonal	stdlib/LinearAlgebra/src/lu.jl	/^function Tridiagonal(F::LU{T,Tridiagonal{T,V}}) where {T,V}$/;"	f
Tridiagonal	stdlib/LinearAlgebra/src/special.jl	/^Tridiagonal(A::AbstractTriangular) =$/;"	f
Tridiagonal	stdlib/LinearAlgebra/src/special.jl	/^Tridiagonal(A::Bidiagonal) =$/;"	f
Tridiagonal	stdlib/LinearAlgebra/src/special.jl	/^Tridiagonal(A::Diagonal) = Tridiagonal(fill!(similar(A.diag, length(A.diag)-1), 0), A.diag,$/;"	f
Tridiagonal	stdlib/LinearAlgebra/src/special.jl	/^Tridiagonal(A::SymTridiagonal) =$/;"	f
Tridiagonal	stdlib/LinearAlgebra/src/tridiag.jl	/^    function Tridiagonal{T,V}(dl, d, du) where {T,V<:AbstractVector{T}}$/;"	f
Tridiagonal	stdlib/LinearAlgebra/src/tridiag.jl	/^    function Tridiagonal{T,V}(dl, d, du, du2) where {T,V<:AbstractVector{T}}$/;"	f
Tridiagonal	stdlib/LinearAlgebra/src/tridiag.jl	/^Tridiagonal(A::AbstractMatrix) = Tridiagonal(diag(A,-1), diag(A,0), diag(A,1))$/;"	f
Tridiagonal	stdlib/LinearAlgebra/src/tridiag.jl	/^Tridiagonal(A::Tridiagonal) = A$/;"	f
Tridiagonal	stdlib/LinearAlgebra/src/tridiag.jl	/^Tridiagonal(dl::V, d::V, du::V) where {T,V<:AbstractVector{T}} = Tridiagonal{T,V}(dl, d, du)$/;"	f
Tridiagonal	stdlib/LinearAlgebra/src/tridiag.jl	/^Tridiagonal(dl::V, d::V, du::V, du2::V) where {T,V<:AbstractVector{T}} = Tridiagonal{T,V}(dl, d,/;"	f
Tridiagonal	stdlib/LinearAlgebra/src/tridiag.jl	/^function Tridiagonal{T}(A::Tridiagonal) where {T}$/;"	f
Tridiagonal	stdlib/LinearAlgebra/src/tridiag.jl	/^function Tridiagonal{T}(dl::AbstractVector, d::AbstractVector, du::AbstractVector) where {T}$/;"	f
Tridiagonal	stdlib/LinearAlgebra/src/tridiag.jl	/^struct Tridiagonal{T,V<:AbstractVector{T}} <: AbstractMatrix{T}$/;"	f
Trigonometric and hyperbolic functions	doc/src/manual/mathematical-operations.md	/^### Trigonometric and hyperbolic functions$/;"	S
Triple-Quoted String Literals	doc/src/manual/strings.md	/^## Triple-Quoted String Literals$/;"	s
Triple18015	test/compiler/inference.jl	/^mutable struct Triple18015$/;"	f
Tsym	src/flisp/flisp.h	/^    value_t tsym, Tsym, fsym, Fsym, booleansym, nullsym, evalsym, fnsym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
Tuple	base/multidimensional.jl	/^    Tuple(index::CartesianIndex) = index.I$/;"	f
Tuple	base/namedtuple.jl	/^    Tuple(nt::NamedTuple) = (nt...,)$/;"	f
Tuple Types	doc/src/manual/types.md	/^### Tuple Types$/;"	S
Tuple and NTuple arguments	doc/src/manual/methods.md	/^### Tuple and NTuple arguments$/;"	S
Tuple types	doc/src/devdocs/types.md	/^## Tuple types$/;"	s
TupleOf31406	test/core.jl	/^TupleOf31406(cols::Union{Shape31406,Type}...) = TupleOf31406(collect(Shape31406, cols))$/;"	f
TupleOf31406	test/core.jl	/^struct TupleOf31406 <: Shape31406$/;"	f
TupleParam	test/core.jl	/^mutable struct TupleParam{P}$/;"	f
Tuples	doc/src/manual/functions.md	/^## Tuples$/;"	s
Twain	test/sorting.jl	/^mutable struct Twain$/;"	f
Tweaks	doc/src/manual/performance-tips.md	/^## Tweaks$/;"	s
TwicePrecision	base/twiceprecision.jl	/^TwicePrecision(x) = TwicePrecision{typeof(x)}(x)$/;"	f
TwicePrecision	base/twiceprecision.jl	/^function TwicePrecision{T}(nd::Tuple{Any,Any}) where {T}$/;"	f
TwicePrecision	base/twiceprecision.jl	/^function TwicePrecision{T}(nd::Tuple{I,I}, nb::Integer) where {T,I}$/;"	f
TwicePrecision	base/twiceprecision.jl	/^function TwicePrecision{T}(nd::Tuple{Integer,Integer}) where {T<:Union{Float16,Float32}}$/;"	f
TwicePrecision	base/twiceprecision.jl	/^function TwicePrecision{T}(x) where {T}$/;"	f
TwicePrecision	base/twiceprecision.jl	/^struct TwicePrecision{T}$/;"	f
TwoParams	test/subtype.jl	/^mutable struct TwoParams{S,T}; x::S; y::T; end$/;"	f
Type	test/syntax.jl	/^mutable struct Type$/;"	f
Type Aliases	doc/src/manual/types.md	/^## Type Aliases$/;"	s
Type Correspondences	doc/src/manual/calling-c-and-fortran-code.md	/^### Type Correspondences$/;"	S
Type Declarations	doc/src/manual/types.md	/^## Type Declarations$/;"	s
Type Parameters	doc/src/manual/calling-c-and-fortran-code.md	/^### Type Parameters$/;"	S
Type Unions	doc/src/manual/types.md	/^## Type Unions$/;"	s
Type declarations	doc/src/manual/performance-tips.md	/^## Type declarations$/;"	s
Type parameters and fields	doc/src/devdocs/subarrays.md	/^### Type parameters and fields$/;"	S
Type relations	doc/src/base/base.md	/^### Type relations$/;"	S
Type11167	test/core.jl	/^mutable struct Type11167{T,N} end$/;"	f
Type11243	test/core.jl	/^mutable struct Type11243{A, B}$/;"	f
Type4Union	stdlib/InteractiveUtils/test/runtests.jl	/^struct Type4Union end$/;"	f
TypeA	stdlib/LinearAlgebra/test/matmul.jl	/^    struct TypeA$/;"	f
TypeA	test/show.jl	/^    struct TypeA end$/;"	f
TypeB	stdlib/LinearAlgebra/test/matmul.jl	/^    struct TypeB$/;"	f
TypeC	stdlib/LinearAlgebra/test/matmul.jl	/^    struct TypeC$/;"	f
TypeError	base/boot.jl	/^    TypeError(func, context, @nospecialize(expected::Type), @nospecialize(got)) =$/;"	f
TypeError	base/boot.jl	/^TypeError(where, @nospecialize(expected::Type), @nospecialize(got)) =$/;"	f
TypeError	base/boot.jl	/^struct TypeError <: Exception$/;"	f
TypeError	src/flisp/flisp.h	/^    value_t IOError, ParseError, TypeError, ArgError, UnboundError, KeyError;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
TypeFuncs	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^const TypeFuncs = Union{typeof(round),typeof(trunc),typeof(floor),typeof(ceil)}$/;"	v
TypeNames	doc/src/devdocs/types.md	/^## TypeNames$/;"	s
TypeTable	src/flisp/flisp.h	/^    htable_t TypeTable;$/;"	m	struct:_fl_context_t	typeref:typename:htable_t
TypeVar	base/boot.jl	/^TypeVar(n::Symbol) = _typevar(n, Union{}, Any)$/;"	f
TypeVar	base/boot.jl	/^TypeVar(n::Symbol, @nospecialize(lb), @nospecialize(ub)) = _typevar(n, lb, ub)$/;"	f
TypeVar	base/boot.jl	/^TypeVar(n::Symbol, @nospecialize(ub)) = _typevar(n, Union{}, ub)$/;"	f
TypeWith4Params	test/show.jl	/^struct TypeWith4Params{a,b,c,d}$/;"	f
TypeWithIntParam	test/errorshow.jl	/^struct TypeWithIntParam{T <: Integer} end$/;"	f
TypeWithIrrelevantParameter	test/reflection.jl	/^struct TypeWithIrrelevantParameter{T}$/;"	f
TypeWrapper	test/operators.jl	/^struct TypeWrapper$/;"	f
Typed array initializers	doc/src/manual/arrays.md	/^## Typed array initializers$/;"	s
Typeof	base/boot.jl	/^function Typeof end$/;"	f
Types	doc/src/manual/documentation.md	/^### Types$/;"	S
Types and sets (and `Any` and `Union{}`/`Bottom`)	doc/src/devdocs/types.md	/^## Types and sets (and `Any` and `Union{}`\/`Bottom`)$/;"	s
Types with values-as-parameters	doc/src/manual/performance-tips.md	/^## Types with values-as-parameters$/;"	s
Types, type declarations, and constructors	doc/src/manual/faq.md	/^## Types, type declarations, and constructors$/;"	s
TypesTest	stdlib/Dates/test/types.jl	/^module TypesTest$/;"	f
TypesView	base/compiler/ssair/ir.jl	/^struct TypesView$/;"	f
U	test/core.jl	/^U = unboxedunions[1]$/;"	v
U	test/core.jl	/^abstract type U end$/;"	f
U32_MAX	src/support/dtypes.h	/^#define U32_MAX /;"	d
U64_MAX	src/support/dtypes.h	/^#define U64_MAX /;"	d
UBOX_F	src/intrinsics.cpp	/^#define UBOX_F(/;"	d	file:
UBOX_F_PERM	src/intrinsics.cpp	/^#define UBOX_F_PERM(/;"	d	file:
UDPSocket	stdlib/Sockets/src/Sockets.jl	/^    function UDPSocket(handle::Ptr{Cvoid}, status)$/;"	f
UDPSocket	stdlib/Sockets/src/Sockets.jl	/^function UDPSocket()$/;"	f
UDPSocket	stdlib/Sockets/src/Sockets.jl	/^mutable struct UDPSocket <: LibuvStream$/;"	f
UEOF	src/support/utf8.h	/^#define UEOF /;"	d
UIBOX_FUNC	src/datatype.c	/^#define UIBOX_FUNC(/;"	d	file:
UInt	base/boot.jl	/^UInt(x::Ptr) = bitcast(UInt, x)$/;"	f
UInt10	stdlib/Random/src/Random.jl	/^struct UInt10{T}    <: UniformBits{T} end$/;"	f
UInt104	stdlib/Random/src/Random.jl	/^struct UInt104{T}    <: UniformBits{T} end$/;"	f
UInt104Raw	stdlib/Random/src/Random.jl	/^struct UInt104Raw{T} <: UniformBits{T} end$/;"	f
UInt10Raw	stdlib/Random/src/Random.jl	/^struct UInt10Raw{T} <: UniformBits{T} end$/;"	f
UInt128	base/boot.jl	/^UInt128(x::BuiltinInts) = toUInt128(x)::UInt128$/;"	f
UInt128	base/boot.jl	/^primitive type UInt128 <: Unsigned 128 end$/;"	f
UInt128	base/uuid.jl	/^UInt128(u::UUID) = u.value$/;"	f
UInt16	base/boot.jl	/^UInt16(x::BuiltinInts)  = toUInt16(x)::UInt16$/;"	f
UInt16	base/boot.jl	/^primitive type UInt16  <: Unsigned 16 end$/;"	f
UInt23	stdlib/Random/src/Random.jl	/^struct UInt23{T}    <: UniformBits{T} end$/;"	f
UInt23Raw	stdlib/Random/src/Random.jl	/^struct UInt23Raw{T} <: UniformBits{T} end$/;"	f
UInt2x52	stdlib/Random/src/Random.jl	/^struct UInt2x52{T}    <: UniformBits{T} end$/;"	f
UInt2x52Raw	stdlib/Random/src/Random.jl	/^struct UInt2x52Raw{T} <: UniformBits{T} end$/;"	f
UInt32	base/boot.jl	/^UInt32(x::BuiltinInts)  = toUInt32(x)::UInt32$/;"	f
UInt32	base/char.jl	/^function UInt32(c::Char)$/;"	f
UInt52	stdlib/Random/src/Random.jl	/^struct UInt52{T}    <: UniformBits{T} end$/;"	f
UInt52Raw	stdlib/Random/src/Random.jl	/^struct UInt52Raw{T} <: UniformBits{T} end$/;"	f
UInt64	base/boot.jl	/^UInt64(x::BuiltinInts)  = toUInt64(x)::UInt64$/;"	f
UInt64	base/boot.jl	/^UInt64(x::Ptr) = UInt64(UInt32(x))$/;"	f
UInt8	base/boot.jl	/^UInt8(x::BuiltinInts)   = toUInt8(x)::UInt8$/;"	f
UItypes	test/int.jl	/^UItypes = Base.BitUnsigned_types$/;"	v
UMFPACK	stdlib/SuiteSparse/src/umfpack.jl	/^module UMFPACK$/;"	f
UMFPACK_A	stdlib/SuiteSparse/src/umfpack_h.jl	/^const UMFPACK_A     =  0     # Ax=b$/;"	v
UMFPACK_Aat	stdlib/SuiteSparse/src/umfpack_h.jl	/^const UMFPACK_Aat   =  2     # transpose(A)x=b$/;"	v
UMFPACK_At	stdlib/SuiteSparse/src/umfpack_h.jl	/^const UMFPACK_At    =  1     # adjoint(A)x=b$/;"	v
UMFPACK_CONFIG	deps/suitesparse.mk	/^UMFPACK_CONFIG := -DLONGBLAS='long long'$/;"	m
UMFPACK_CONTROL	stdlib/SuiteSparse/src/umfpack_h.jl	/^const UMFPACK_CONTROL = 20$/;"	v
UMFPACK_ERROR_argument_missing	stdlib/SuiteSparse/src/umfpack_h.jl	/^const UMFPACK_ERROR_argument_missing        = -5$/;"	v
UMFPACK_ERROR_different_pattern	stdlib/SuiteSparse/src/umfpack_h.jl	/^const UMFPACK_ERROR_different_pattern       = -11$/;"	v
UMFPACK_ERROR_file_IO	stdlib/SuiteSparse/src/umfpack_h.jl	/^const UMFPACK_ERROR_file_IO                 = -17$/;"	v
UMFPACK_ERROR_internal_error	stdlib/SuiteSparse/src/umfpack_h.jl	/^const UMFPACK_ERROR_internal_error          = -911$/;"	v
UMFPACK_ERROR_invalid_Numeric_object	stdlib/SuiteSparse/src/umfpack_h.jl	/^const UMFPACK_ERROR_invalid_Numeric_object  = -3$/;"	v
UMFPACK_ERROR_invalid_Symbolic_object	stdlib/SuiteSparse/src/umfpack_h.jl	/^const UMFPACK_ERROR_invalid_Symbolic_object = -4$/;"	v
UMFPACK_ERROR_invalid_matrix	stdlib/SuiteSparse/src/umfpack_h.jl	/^const UMFPACK_ERROR_invalid_matrix          = -8$/;"	v
UMFPACK_ERROR_invalid_permutation	stdlib/SuiteSparse/src/umfpack_h.jl	/^const UMFPACK_ERROR_invalid_permutation     = -15$/;"	v
UMFPACK_ERROR_invalid_system	stdlib/SuiteSparse/src/umfpack_h.jl	/^const UMFPACK_ERROR_invalid_system          = -13$/;"	v
UMFPACK_ERROR_n_nonpositive	stdlib/SuiteSparse/src/umfpack_h.jl	/^const UMFPACK_ERROR_n_nonpositive           = -6$/;"	v
UMFPACK_ERROR_ordering_failed	stdlib/SuiteSparse/src/umfpack_h.jl	/^const UMFPACK_ERROR_ordering_failed         = -18$/;"	v
UMFPACK_ERROR_out_of_memory	stdlib/SuiteSparse/src/umfpack_h.jl	/^const UMFPACK_ERROR_out_of_memory           = -1$/;"	v
UMFPACK_INFO	stdlib/SuiteSparse/src/umfpack_h.jl	/^const UMFPACK_INFO = 90$/;"	v
UMFPACK_L	stdlib/SuiteSparse/src/umfpack_h.jl	/^const UMFPACK_L     =  4     # Lx=b$/;"	v
UMFPACK_Lat	stdlib/SuiteSparse/src/umfpack_h.jl	/^const UMFPACK_Lat   =  8     # transpose(L)x=b$/;"	v
UMFPACK_Lat_P	stdlib/SuiteSparse/src/umfpack_h.jl	/^const UMFPACK_Lat_P =  6     # transpose(L)Px=b$/;"	v
UMFPACK_Lt	stdlib/SuiteSparse/src/umfpack_h.jl	/^const UMFPACK_Lt    =  7     # adjoint(L)x=b$/;"	v
UMFPACK_Lt_P	stdlib/SuiteSparse/src/umfpack_h.jl	/^const UMFPACK_Lt_P  =  5     # adjoint(L)Px=b$/;"	v
UMFPACK_OK	stdlib/SuiteSparse/src/umfpack_h.jl	/^const UMFPACK_OK = 0$/;"	v
UMFPACK_PRL	stdlib/SuiteSparse/src/umfpack_h.jl	/^const UMFPACK_PRL = 1$/;"	v
UMFPACK_Pt_L	stdlib/SuiteSparse/src/umfpack_h.jl	/^const UMFPACK_Pt_L  =  3     # adjoint(P)Lx=b$/;"	v
UMFPACK_Q_Uat	stdlib/SuiteSparse/src/umfpack_h.jl	/^const UMFPACK_Q_Uat =  12    # Q*transpose(U)x=b$/;"	v
UMFPACK_Q_Ut	stdlib/SuiteSparse/src/umfpack_h.jl	/^const UMFPACK_Q_Ut  =  11    # Q*adjoint(U)x=b$/;"	v
UMFPACK_U	stdlib/SuiteSparse/src/umfpack_h.jl	/^const UMFPACK_U     =  10    # Ux=b$/;"	v
UMFPACK_U_Qt	stdlib/SuiteSparse/src/umfpack_h.jl	/^const UMFPACK_U_Qt  =  9     # U*adjoint(Q)x=b$/;"	v
UMFPACK_Uat	stdlib/SuiteSparse/src/umfpack_h.jl	/^const UMFPACK_Uat   =  14    # transpose(U)x=b$/;"	v
UMFPACK_Ut	stdlib/SuiteSparse/src/umfpack_h.jl	/^const UMFPACK_Ut    =  13    # adjoint(U)x=b$/;"	v
UMFPACK_WARNING_determinant_overflow	stdlib/SuiteSparse/src/umfpack_h.jl	/^const UMFPACK_WARNING_determinant_overflow  = 3$/;"	v
UMFPACK_WARNING_determinant_underflow	stdlib/SuiteSparse/src/umfpack_h.jl	/^const UMFPACK_WARNING_determinant_underflow = 2$/;"	v
UMFPACK_WARNING_singular_matrix	stdlib/SuiteSparse/src/umfpack_h.jl	/^const UMFPACK_WARNING_singular_matrix       = 1$/;"	v
UMFVTypes	stdlib/SuiteSparse/src/umfpack.jl	/^const UMFVTypes = Union{Float64,ComplexF64}$/;"	v
UNAVAILABLE	src/anticodegen.c	/^#define UNAVAILABLE /;"	d	file:
UNBOUND	src/flisp/flisp.h	/^#define UNBOUND /;"	d
UNBOX_FUNC	src/datatype.c	/^#define UNBOX_FUNC(/;"	d	file:
UNDEFREF_TAG	stdlib/Serialization/src/Serialization.jl	/^const UNDEFREF_TAG         = Int32(o0+1)$/;"	v
UNIONALL_TAG	stdlib/Serialization/src/Serialization.jl	/^const UNIONALL_TAG = sertag(UnionAll)$/;"	v
UNIXEPOCH	stdlib/Dates/src/conversions.jl	/^const UNIXEPOCH = value(DateTime(1970)) #Rata Die milliseconds for 1970-01-01T00:00:00$/;"	v
UNKNOWN	base/stacktraces.jl	/^const UNKNOWN = StackFrame(empty_sym, empty_sym, -1, nothing, true, false, 0) # === lookup(C_NUL/;"	v
UNSET	base/pcre.jl	/^const UNSET = ~Csize_t(0)  # Indicates that an output vector element is unset$/;"	v
UNTAR	deps/tools/common.mk	/^UNTAR = $(TAR) -xmUzf$/;"	m
UNUSED	src/julia-syntax.scm	/^(define UNUSED '|#unused#|)$/;"	f
UNWIND_BB_NAME	deps/unwind.mk	/^UNWIND_BB_NAME := LibUnwind.v$(UNWIND_VER)$/;"	m
UNWIND_BB_URL_BASE	deps/unwind.mk	/^UNWIND_BB_URL_BASE := https:\/\/github.com\/JuliaPackaging\/Yggdrasil\/releases\/download\/LibUn/;"	m
UNW_LOCAL_ONLY	src/julia_internal.h	/^#  define UNW_LOCAL_ONLY$/;"	d
UNW_LOCAL_ONLY	src/julia_threads.h	/^#define UNW_LOCAL_ONLY$/;"	d
UP_ARROW	contrib/generate_precompile.jl	/^UP_ARROW = "\\e[A"$/;"	v
URL	deps/srccache/patchelf-0.9/patchelf.spec	/^URL: http:\/\/nixos.org\/patchelf.html$/;"	t
URL	deps/srccache/patchelf-0.9/patchelf.spec.in	/^URL: http:\/\/nixos.org\/patchelf.html$/;"	t
URL_REGEX	stdlib/LibGit2/src/utils.jl	/^const URL_REGEX = r"""$/;"	v
USER_MODE	src/signals-mach.c	/^    USER_MODE = 0x4,$/;"	e	enum:x86_trap_flags	file:
USE_BLAS_FFLAGS	deps/tools/common.mk	/^USE_BLAS_FFLAGS :=$/;"	m
UTC	stdlib/Dates/src/types.jl	/^struct UTC <: TimeZone end$/;"	f
UTD	stdlib/Dates/src/types.jl	/^UTD(x) = UTInstant(Day(x))$/;"	f
UTExportedTypeDeclarations	contrib/mac/frameworkapp/JuliaLauncher/Info.plist	/^	<key>UTExportedTypeDeclarations<\/key>$/;"	k
UTF16CSE	test/subtype.jl	/^const UTF16CSE = CSE{1}$/;"	v
UTF16Str	test/subtype.jl	/^const UTF16Str = Str{UTF16CSE}$/;"	v
UTF8PROC_BUILDDIR	deps/utf8proc.mk	/^UTF8PROC_BUILDDIR   := $(BUILDDIR)\/$(UTF8PROC_SRC_DIR)$/;"	m
UTF8PROC_CASEFOLD	base/strings/unicode.jl	/^const UTF8PROC_CASEFOLD  = (1<<10)$/;"	v
UTF8PROC_CATEGORY_CC	base/strings/unicode.jl	/^const UTF8PROC_CATEGORY_CC = 26$/;"	v
UTF8PROC_CATEGORY_CF	base/strings/unicode.jl	/^const UTF8PROC_CATEGORY_CF = 27$/;"	v
UTF8PROC_CATEGORY_CN	base/strings/unicode.jl	/^const UTF8PROC_CATEGORY_CN = 0$/;"	v
UTF8PROC_CATEGORY_CO	base/strings/unicode.jl	/^const UTF8PROC_CATEGORY_CO = 29$/;"	v
UTF8PROC_CATEGORY_CS	base/strings/unicode.jl	/^const UTF8PROC_CATEGORY_CS = 28$/;"	v
UTF8PROC_CATEGORY_LL	base/strings/unicode.jl	/^const UTF8PROC_CATEGORY_LL = 2$/;"	v
UTF8PROC_CATEGORY_LM	base/strings/unicode.jl	/^const UTF8PROC_CATEGORY_LM = 4$/;"	v
UTF8PROC_CATEGORY_LO	base/strings/unicode.jl	/^const UTF8PROC_CATEGORY_LO = 5$/;"	v
UTF8PROC_CATEGORY_LT	base/strings/unicode.jl	/^const UTF8PROC_CATEGORY_LT = 3$/;"	v
UTF8PROC_CATEGORY_LU	base/strings/unicode.jl	/^const UTF8PROC_CATEGORY_LU = 1$/;"	v
UTF8PROC_CATEGORY_MC	base/strings/unicode.jl	/^const UTF8PROC_CATEGORY_MC = 7$/;"	v
UTF8PROC_CATEGORY_ME	base/strings/unicode.jl	/^const UTF8PROC_CATEGORY_ME = 8$/;"	v
UTF8PROC_CATEGORY_MN	base/strings/unicode.jl	/^const UTF8PROC_CATEGORY_MN = 6$/;"	v
UTF8PROC_CATEGORY_ND	base/strings/unicode.jl	/^const UTF8PROC_CATEGORY_ND = 9$/;"	v
UTF8PROC_CATEGORY_NL	base/strings/unicode.jl	/^const UTF8PROC_CATEGORY_NL = 10$/;"	v
UTF8PROC_CATEGORY_NO	base/strings/unicode.jl	/^const UTF8PROC_CATEGORY_NO = 11$/;"	v
UTF8PROC_CATEGORY_PC	base/strings/unicode.jl	/^const UTF8PROC_CATEGORY_PC = 12$/;"	v
UTF8PROC_CATEGORY_PD	base/strings/unicode.jl	/^const UTF8PROC_CATEGORY_PD = 13$/;"	v
UTF8PROC_CATEGORY_PE	base/strings/unicode.jl	/^const UTF8PROC_CATEGORY_PE = 15$/;"	v
UTF8PROC_CATEGORY_PF	base/strings/unicode.jl	/^const UTF8PROC_CATEGORY_PF = 17$/;"	v
UTF8PROC_CATEGORY_PI	base/strings/unicode.jl	/^const UTF8PROC_CATEGORY_PI = 16$/;"	v
UTF8PROC_CATEGORY_PO	base/strings/unicode.jl	/^const UTF8PROC_CATEGORY_PO = 18$/;"	v
UTF8PROC_CATEGORY_PS	base/strings/unicode.jl	/^const UTF8PROC_CATEGORY_PS = 14$/;"	v
UTF8PROC_CATEGORY_SC	base/strings/unicode.jl	/^const UTF8PROC_CATEGORY_SC = 20$/;"	v
UTF8PROC_CATEGORY_SK	base/strings/unicode.jl	/^const UTF8PROC_CATEGORY_SK = 21$/;"	v
UTF8PROC_CATEGORY_SM	base/strings/unicode.jl	/^const UTF8PROC_CATEGORY_SM = 19$/;"	v
UTF8PROC_CATEGORY_SO	base/strings/unicode.jl	/^const UTF8PROC_CATEGORY_SO = 22$/;"	v
UTF8PROC_CATEGORY_ZL	base/strings/unicode.jl	/^const UTF8PROC_CATEGORY_ZL = 24$/;"	v
UTF8PROC_CATEGORY_ZP	base/strings/unicode.jl	/^const UTF8PROC_CATEGORY_ZP = 25$/;"	v
UTF8PROC_CATEGORY_ZS	base/strings/unicode.jl	/^const UTF8PROC_CATEGORY_ZS = 23$/;"	v
UTF8PROC_CFLAGS	deps/utf8proc.mk	/^UTF8PROC_CFLAGS     := -O2$/;"	m
UTF8PROC_CHARBOUND	base/strings/unicode.jl	/^const UTF8PROC_CHARBOUND = (1<<11)$/;"	v
UTF8PROC_COMPAT	base/strings/unicode.jl	/^const UTF8PROC_COMPAT    = (1<<2)$/;"	v
UTF8PROC_COMPOSE	base/strings/unicode.jl	/^const UTF8PROC_COMPOSE   = (1<<3)$/;"	v
UTF8PROC_DECOMPOSE	base/strings/unicode.jl	/^const UTF8PROC_DECOMPOSE = (1<<4)$/;"	v
UTF8PROC_GIT_URL	deps/utf8proc.mk	/^UTF8PROC_GIT_URL := git:\/\/github.com\/JuliaLang\/utf8proc.git$/;"	m
UTF8PROC_IGNORE	base/strings/unicode.jl	/^const UTF8PROC_IGNORE    = (1<<5)$/;"	v
UTF8PROC_INSTALL	deps/utf8proc.mk	/^define UTF8PROC_INSTALL$/;"	m
UTF8PROC_LUMP	base/strings/unicode.jl	/^const UTF8PROC_LUMP      = (1<<12)$/;"	v
UTF8PROC_MFLAGS	deps/utf8proc.mk	/^UTF8PROC_MFLAGS     := CC="$(CC)" CFLAGS="$(CFLAGS) $(UTF8PROC_CFLAGS)" PICFLAG="$(fPIC)" AR="$(/;"	m
UTF8PROC_NLF2LF	base/strings/unicode.jl	/^const UTF8PROC_NLF2LF    = (UTF8PROC_NLF2LS | UTF8PROC_NLF2PS)$/;"	v
UTF8PROC_NLF2LS	base/strings/unicode.jl	/^const UTF8PROC_NLF2LS    = (1<<7)$/;"	v
UTF8PROC_NLF2PS	base/strings/unicode.jl	/^const UTF8PROC_NLF2PS    = (1<<8)$/;"	v
UTF8PROC_OBJ_HEADER	deps/utf8proc.mk	/^UTF8PROC_OBJ_HEADER := $(build_includedir)\/utf8proc.h$/;"	m
UTF8PROC_OBJ_LIB	deps/utf8proc.mk	/^UTF8PROC_OBJ_LIB    := $(build_libdir)\/libutf8proc.a$/;"	m
UTF8PROC_REJECTNA	base/strings/unicode.jl	/^const UTF8PROC_REJECTNA  = (1<<6)$/;"	v
UTF8PROC_STABLE	base/strings/unicode.jl	/^const UTF8PROC_STABLE    = (1<<1)$/;"	v
UTF8PROC_STRIPCC	base/strings/unicode.jl	/^const UTF8PROC_STRIPCC   = (1<<9)$/;"	v
UTF8PROC_STRIPMARK	base/strings/unicode.jl	/^const UTF8PROC_STRIPMARK = (1<<13)$/;"	v
UTF8PROC_TAR_URL	deps/utf8proc.mk	/^UTF8PROC_TAR_URL = https:\/\/api.github.com\/repos\/JuliaLang\/utf8proc\/tarball\/$1$/;"	m
UTInstant	stdlib/Dates/src/types.jl	/^struct UTInstant{P<:Period} <: Instant$/;"	f
UTM	stdlib/Dates/src/types.jl	/^UTM(x) = UTInstant(Millisecond(x))$/;"	f
UTTypeConformsTo	contrib/mac/frameworkapp/JuliaLauncher/Info.plist	/^			<key>UTTypeConformsTo<\/key>$/;"	k	key:UTExportedTypeDeclarations
UTTypeDescription	contrib/mac/frameworkapp/JuliaLauncher/Info.plist	/^			<key>UTTypeDescription<\/key>$/;"	k	key:UTExportedTypeDeclarations
UTTypeIconFile	contrib/mac/frameworkapp/JuliaLauncher/Info.plist	/^			<key>UTTypeIconFile<\/key>$/;"	k	key:UTExportedTypeDeclarations
UTTypeIdentifier	contrib/mac/frameworkapp/JuliaLauncher/Info.plist	/^			<key>UTTypeIdentifier<\/key>$/;"	k	key:UTExportedTypeDeclarations
UTTypeReferenceURL	contrib/mac/frameworkapp/JuliaLauncher/Info.plist	/^			<key>UTTypeReferenceURL<\/key>$/;"	k	key:UTExportedTypeDeclarations
UTTypeTagSpecification	contrib/mac/frameworkapp/JuliaLauncher/Info.plist	/^			<key>UTTypeTagSpecification<\/key>$/;"	k	key:UTExportedTypeDeclarations
UTri	stdlib/LinearAlgebra/test/addmul.jl	/^const UTri = Union{UpperTriangular, UnitUpperTriangular, Diagonal}$/;"	v
UUID	base/uuid.jl	/^    function UUID(s::AbstractString)$/;"	f
UUID	base/uuid.jl	/^UUID(u::NTuple{2, UInt64}) = UUID((UInt128(u[1]) << 64) | UInt128(u[2]))$/;"	f
UUID	base/uuid.jl	/^UUID(u::NTuple{4, UInt32}) = UUID((UInt128(u[1]) << 96) | (UInt128(u[2]) << 64) |$/;"	f
UUID	base/uuid.jl	/^struct UUID$/;"	f
UUIDS	test/loading.jl	/^const UUIDS = [uuid4() for i = 1:M, j = 1:N]$/;"	v
UUIDs	stdlib/UUIDs/docs/src/index.md	/^# UUIDs$/;"	c
UUIDs	stdlib/UUIDs/src/UUIDs.jl	/^module UUIDs$/;"	f
UV_CFLAGS	deps/libuv.mk	/^UV_CFLAGS := -O2$/;"	m
UV_CHANGE	stdlib/FileWatching/src/FileWatching.jl	/^const UV_CHANGE = 2$/;"	v
UV_CLOSED	src/jl_uv.c	/^#define UV_CLOSED /;"	d	file:
UV_DISCONNECT	stdlib/FileWatching/src/FileWatching.jl	/^const UV_DISCONNECT = 4$/;"	v
UV_FLAGS	deps/libuv.mk	/^UV_FLAGS := LDFLAGS="$(LDFLAGS) $(CLDFLAGS) -v"$/;"	m
UV_HEADERS	src/Makefile	/^UV_HEADERS :=$/;"	m
UV_PROCESS_DETACHED	base/cmd.jl	/^const UV_PROCESS_DETACHED = UInt8(1 << 3)$/;"	v
UV_PROCESS_WINDOWS_HIDE	base/cmd.jl	/^const UV_PROCESS_WINDOWS_HIDE = UInt8(1 << 4)$/;"	v
UV_PROCESS_WINDOWS_VERBATIM_ARGUMENTS	base/cmd.jl	/^const UV_PROCESS_WINDOWS_VERBATIM_ARGUMENTS = UInt8(1 << 2)$/;"	v
UV_READABLE	stdlib/FileWatching/src/FileWatching.jl	/^const UV_READABLE = 1$/;"	v
UV_RENAME	stdlib/FileWatching/src/FileWatching.jl	/^const UV_RENAME = 1$/;"	v
UV_TCP_IPV6ONLY	stdlib/Sockets/src/Sockets.jl	/^const UV_TCP_IPV6ONLY = 1$/;"	v
UV_UDP_IPV6ONLY	stdlib/Sockets/src/Sockets.jl	/^const UV_UDP_IPV6ONLY = 1$/;"	v
UV_UDP_PARTIAL	stdlib/Sockets/src/Sockets.jl	/^const UV_UDP_PARTIAL = 2$/;"	v
UV_UDP_REUSEADDR	stdlib/Sockets/src/Sockets.jl	/^const UV_UDP_REUSEADDR = 4$/;"	v
UV_WRITABLE	stdlib/FileWatching/src/FileWatching.jl	/^const UV_WRITABLE = 2$/;"	v
UV__ERR	src/uv_constants.h	/^# define UV__ERR(/;"	d
UV_cpu_info_t	base/sysinfo.jl	/^mutable struct UV_cpu_info_t$/;"	f
UmfpackLU	stdlib/SuiteSparse/src/umfpack.jl	/^mutable struct UmfpackLU{Tv<:UMFVTypes,Ti<:UMFITypes} <: Factorization{Tv}$/;"	f
UnboundError	src/flisp/flisp.h	/^    value_t IOError, ParseError, TypeError, ArgError, UnboundError, KeyError;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
UndefField	test/core.jl	/^    UndefField() = new()$/;"	f
UndefField	test/core.jl	/^mutable struct UndefField$/;"	f
UndefField__	test/compiler/inference.jl	/^mutable struct UndefField__$/;"	f
UndefInitializer	base/boot.jl	/^struct UndefInitializer end$/;"	f
UndefKeywordError	base/boot.jl	/^struct UndefKeywordError <: Exception$/;"	f
UndefRefError	base/boot.jl	/^struct UndefRefError       <: Exception end$/;"	f
UndefToken	base/compiler/ssair/ir.jl	/^struct UndefToken$/;"	f
UndefToken	base/compiler/ssair/slot2ssa.jl	/^struct UndefToken$/;"	f
UndefVarError	base/boot.jl	/^struct UndefVarError <: Exception$/;"	f
Undocumented	test/docs.jl	/^module Undocumented$/;"	f
UnexportedOperators	test/show.jl	/^module UnexportedOperators$/;"	f
Unicode	base/strings/unicode.jl	/^module Unicode$/;"	f
Unicode	stdlib/Unicode/docs/src/index.md	/^# Unicode$/;"	c
Unicode	stdlib/Unicode/src/Unicode.jl	/^module Unicode$/;"	f
Unicode Input	doc/src/manual/unicode-input.md	/^# Unicode Input$/;"	c
Unicode and UTF-8	doc/src/manual/strings.md	/^## Unicode and UTF-8$/;"	s
Unicode font support	doc/build/windows.md	/^### Unicode font support$/;"	S
UniformBits	stdlib/Random/src/Random.jl	/^abstract type UniformBits{T<:BitInteger} end$/;"	f
UniformScaling	stdlib/LinearAlgebra/src/uniformscaling.jl	/^struct UniformScaling{T<:Number}$/;"	f
UniformT	stdlib/Random/src/Random.jl	/^struct UniformT{T} <: Sampler{T} end$/;"	f
UnimplementedArray	test/abstractarray.jl	/^mutable struct UnimplementedArray{T, N} <: AbstractArray{T, N} end$/;"	f
UnimplementedFastArray	test/abstractarray.jl	/^mutable struct UnimplementedFastArray{T, N} <: AbstractArray{T, N} end$/;"	f
UnimplementedSlowArray	test/abstractarray.jl	/^mutable struct UnimplementedSlowArray{T, N} <: AbstractArray{T, N} end$/;"	f
UninstLog	contrib/windows/build-installer.nsi	/^!define UninstLog "uninstall.log"$/;"	d
UninstLog	contrib/windows/build-installer.nsi	/^var UninstLog$/;"	v
Uninstalling Julia	README.md	/^### Uninstalling Julia$/;"	S
Union	src/codegen.cpp	/^        Union,$/;"	e	enum:jl_returninfo_t::CallingConv	file:
Union representation	doc/src/devdocs/compiler.md	/^## Union representation$/;"	s
UnionAll	base/boot.jl	/^UnionAll(v::TypeVar, @nospecialize(t)) = ccall(:jl_type_unionall, Any, (Any, Any), v, t)$/;"	f
UnionAll	test/subtype.jl	/^macro UnionAll(var, expr)$/;"	f
UnionAll Types	doc/src/manual/types.md	/^## UnionAll Types$/;"	s
UnionAll types	doc/src/devdocs/types.md	/^## UnionAll types$/;"	s
UnionField	test/core.jl	/^mutable struct UnionField$/;"	f
UnionField2	test/core.jl	/^    @noinline UnionField2() = new()$/;"	f
UnionField2	test/core.jl	/^mutable struct UnionField2$/;"	f
UnionField3	test/core.jl	/^    @noinline UnionField3() = new()$/;"	f
UnionField3	test/core.jl	/^struct UnionField3$/;"	f
UnionField4	test/core.jl	/^    @noinline UnionField4() = new()$/;"	f
UnionField4	test/core.jl	/^    @noinline UnionField4(x, y) = new(x, y, (0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88))$/;"	f
UnionField4	test/core.jl	/^mutable struct UnionField4$/;"	f
UnionField5	test/core.jl	/^    @noinline UnionField5() = new()$/;"	f
UnionField5	test/core.jl	/^    @noinline UnionField5(x, y) = new(x, y, (0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88))$/;"	f
UnionField5	test/core.jl	/^struct UnionField5$/;"	f
UnionField6	test/core.jl	/^struct UnionField6$/;"	f
UnionFieldInlineStruct	test/core.jl	/^struct UnionFieldInlineStruct$/;"	f
UnionOptimizations	test/core.jl	/^module UnionOptimizations$/;"	f
UnionSplit	base/compiler/ssair/inlining.jl	/^struct UnionSplit$/;"	f
UnionSplitSignature	base/compiler/ssair/inlining.jl	/^function UnionSplitSignature(atypes::Vector{Any})$/;"	f
UnionSplitSignature	base/compiler/ssair/inlining.jl	/^struct UnionSplitSignature$/;"	f
Unit	test/missing.jl	/^struct Unit$/;"	f
Unit Testing	stdlib/Test/docs/src/index.md	/^# Unit Testing$/;"	c
UnitDiagonalTriangular	stdlib/SparseArrays/src/linalg.jl	/^const UnitDiagonalTriangular = Union{UnitUpperTriangular,UnitLowerTriangular}$/;"	v
UnitRange	base/range.jl	/^UnitRange(r::AbstractUnitRange) = UnitRange(first(r), last(r))$/;"	f
UnitRange	base/range.jl	/^UnitRange(start::T, stop::T) where {T<:Real} = UnitRange{T}(start, stop)$/;"	f
UnitRange	base/range.jl	/^struct UnitRange{T<:Real} <: AbstractUnitRange{T}$/;"	f
UnitUpperTriangular	test/subtype.jl	/^struct UnitUpperTriangular{T,S<:AbstractMatrix} <: AbstractTriangular{T,S} end$/;"	f
UnixTerminal	stdlib/REPL/src/Terminals.jl	/^abstract type UnixTerminal <: TextTerminal end$/;"	f
Unknown	base/broadcast.jl	/^struct Unknown <: BroadcastStyle end$/;"	f
Unordered	base/traits.jl	/^struct Unordered <: OrderStyle end$/;"	f
UnsafeView	stdlib/Random/src/RNGs.jl	/^struct UnsafeView{T} <: DenseArray{T,1}$/;"	f
Unsigned	base/boot.jl	/^Unsigned(x::Int128) = UInt128(x)$/;"	f
Unsigned	base/boot.jl	/^Unsigned(x::Int16)  = UInt16(x)$/;"	f
Unsigned	base/boot.jl	/^Unsigned(x::Int32)  = UInt32(x)$/;"	f
Unsigned	base/boot.jl	/^Unsigned(x::Int64)  = UInt64(x)$/;"	f
Unsigned	base/boot.jl	/^Unsigned(x::Int8)   = UInt8(x)$/;"	f
Unsigned	base/boot.jl	/^Unsigned(x::Union{Float32, Float64, Bool}) = UInt(x)$/;"	f
Unsigned	base/boot.jl	/^abstract type Unsigned <: Integer end$/;"	f
UnsignedInt	base/checked.jl	/^const UnsignedInt = Union{UInt8,UInt16,UInt32,UInt64,UInt128}$/;"	v
UnsignedInt	base/compiler/compiler.jl	/^const UnsignedInt = Union{UInt8,UInt16,UInt32,UInt64,UInt128}$/;"	v
UnsignedMultiplicativeInverse	base/multinverses.jl	/^    function UnsignedMultiplicativeInverse{T}(d::T) where T<:Unsigned$/;"	f
UnsignedMultiplicativeInverse	base/multinverses.jl	/^UnsignedMultiplicativeInverse(x::Unsigned) = UnsignedMultiplicativeInverse{typeof(x)}(x)$/;"	f
UnsignedMultiplicativeInverse	base/multinverses.jl	/^struct UnsignedMultiplicativeInverse{T<:Unsigned} <: MultiplicativeInverse{T}$/;"	f
Unstable	stdlib/InteractiveUtils/test/runtests.jl	/^mutable struct Unstable{T}$/;"	f
Untracked	src/clangsa/GCChecker.cpp	/^            enum State { Allocated, Rooted, PotentiallyFreed, Untracked } S;$/;"	e	enum:__anon9c5a21540111::GCChecker::ValueState::State	file:
UpExposedUses	src/llvm-late-gc-lowering.cpp	/^    BitVector UpExposedUses;$/;"	m	struct:BBState	typeref:typename:BitVector	file:
UpExposedUsesUnrooted	src/llvm-late-gc-lowering.cpp	/^    BitVector UpExposedUsesUnrooted;$/;"	m	struct:BBState	typeref:typename:BitVector	file:
UpdatePtrNumbering	src/llvm-late-gc-lowering.cpp	/^static inline void UpdatePtrNumbering(Value *From, Value *To, State *S)$/;"	f	typeref:typename:void	file:
Updating an existing source tree	doc/build/build.md	/^## Updating an existing source tree$/;"	s
Updating fields of GC-managed objects	doc/src/manual/embedding.md	/^### Updating fields of GC-managed objects$/;"	S
Updating operators	doc/src/manual/mathematical-operations.md	/^## Updating operators$/;"	s
Uploading binaries	doc/build/distributing.md	/^## Uploading binaries$/;"	s
UpperHessenberg	stdlib/LinearAlgebra/src/hessenberg.jl	/^    function UpperHessenberg{T,S}(data) where {T,S<:AbstractMatrix{T}}$/;"	f
UpperHessenberg	stdlib/LinearAlgebra/src/hessenberg.jl	/^UpperHessenberg(A::AbstractMatrix) = UpperHessenberg{eltype(A),typeof(A)}(A)$/;"	f
UpperHessenberg	stdlib/LinearAlgebra/src/hessenberg.jl	/^UpperHessenberg(H::UpperHessenberg) = H$/;"	f
UpperHessenberg	stdlib/LinearAlgebra/src/hessenberg.jl	/^struct UpperHessenberg{T,S<:AbstractMatrix{T}} <: AbstractMatrix{T}$/;"	f
UpperTriangular	stdlib/LinearAlgebra/src/special.jl	/^UpperTriangular(A::Bidiagonal) =$/;"	f
UpperTriangular	stdlib/LinearAlgebra/src/triangular.jl	/^UpperTriangular(U::LowerTriangular) = throw(ArgumentError($/;"	f
UpperTriangular	test/subtype.jl	/^struct UpperTriangular{T,S<:AbstractMatrix} <: AbstractTriangular{T,S} end$/;"	f
Use in Makefiles	doc/src/manual/embedding.md	/^#### Use in Makefiles$/;"	t
Use naming conventions consistent with Julia `base/`	doc/src/manual/style-guide.md	/^## Use naming conventions consistent with Julia `base\/`$/;"	s
UseInfo	src/llvm-multiversioning.cpp	/^    using UseInfo = Info<U>;$/;"	t	struct:__anond5683ea40111::ConstantUses	typeref:typename:Info<U>	file:
UseRef	base/compiler/ssair/ir.jl	/^    UseRef(@nospecialize(a)) = new(a, 0)$/;"	f
UseRef	base/compiler/ssair/ir.jl	/^mutable struct UseRef$/;"	f
UseRefIterator	base/compiler/ssair/ir.jl	/^    UseRefIterator(@nospecialize(a), relevant::Bool) = new((UseRef(a), nothing), relevant)$/;"	f
UseRefIterator	base/compiler/ssair/ir.jl	/^struct UseRefIterator$/;"	f
Useful Julia functions for Inspecting those variables	doc/src/devdocs/debuggingtips.md	/^## Useful Julia functions for Inspecting those variables$/;"	s
Useful Julia variables for Inspecting	doc/src/devdocs/debuggingtips.md	/^## Useful Julia variables for Inspecting$/;"	s
UserPasswordCredential	stdlib/LibGit2/src/types.jl	/^    function UserPasswordCredential(user::AbstractString="", pass::Union{AbstractString, Base.Se/;"	f
UserPasswordCredential	stdlib/LibGit2/src/types.jl	/^mutable struct UserPasswordCredential <: AbstractCredential$/;"	f
Using Loggers	stdlib/Logging/docs/src/index.md	/^### Using Loggers$/;"	S
Using Valgrind with Julia	doc/src/devdocs/valgrind.md	/^# Using Valgrind with Julia$/;"	c
Using `axes` for bounds checks and loop iteration	doc/src/devdocs/offset-arrays.md	/^### Using `axes` for bounds checks and loop iteration$/;"	S
Using a Windows VM	doc/build/windows.md	/^## Using a Windows VM$/;"	s
Using distinct algorithms for scalar or array generation	stdlib/Random/docs/src/index.md	/^#### Using distinct algorithms for scalar or array generation$/;"	t
Using julia-config to automatically determine build parameters	doc/src/manual/embedding.md	/^### Using julia-config to automatically determine build parameters$/;"	S
Utility Collections	doc/src/base/collections.md	/^## Utility Collections$/;"	s
V	src/codegen.cpp	/^    Value *V; \/\/ may be of type T* or T, or set to NULL if ghost (or if the value has not been/;"	m	struct:jl_cgval_t	typeref:typename:Value *	file:
V	test/subarray.jl	/^V = view(A, 1:1 ,:, 1:3, :)$/;"	v
V	test/subarray.jl	/^V = view(A, 2:5, :, 2:5, 1:2:5)$/;"	v
V1	test/boundscheck_exec.jl	/^function V1()$/;"	f
V16	test/misc.jl	/^V16 = [$/;"	v
V26163	test/arrayops.jl	/^struct V26163 <: AbstractArray{Int,1}; end$/;"	f
V2xF32	test/ccall.jl	/^const V2xF32 = VecReg{2,Float32}$/;"	v
V2xF64	test/ccall.jl	/^const V2xF64 = VecReg{2,Float64}$/;"	v
V2xI32	test/ccall.jl	/^const V2xI32 = VecReg{2,Int32}$/;"	v
V4xF32	test/ccall.jl	/^const V4xF32 = VecReg{4,Float32}$/;"	v
V4xI32	test/ccall.jl	/^const V4xI32 = VecReg{4,Int32}$/;"	v
V8	test/misc.jl	/^V8 = [$/;"	v
VALGRIND_ALIGN_STACK	deps/valgrind/valgrind.h	/^#define VALGRIND_ALIGN_STACK /;"	d
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11	deps/valgrind/valgrind.h	/^#define VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 /;"	d
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R12	deps/valgrind/valgrind.h	/^#define VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R12 /;"	d
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4	deps/valgrind/valgrind.h	/^#define VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4 /;"	d
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_X8	deps/valgrind/valgrind.h	/^#define VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_X8 /;"	d
VALGRIND_CALL_NOREDIR_EAX	deps/valgrind/valgrind.h	/^#define VALGRIND_CALL_NOREDIR_EAX /;"	d
VALGRIND_CALL_NOREDIR_R1	deps/valgrind/valgrind.h	/^#define VALGRIND_CALL_NOREDIR_R1 /;"	d
VALGRIND_CALL_NOREDIR_RAX	deps/valgrind/valgrind.h	/^#define VALGRIND_CALL_NOREDIR_RAX /;"	d
VALGRIND_CALL_NOREDIR_T9	deps/valgrind/valgrind.h	/^#define VALGRIND_CALL_NOREDIR_T9 /;"	d
VALGRIND_CFI_EPILOGUE	deps/valgrind/valgrind.h	/^#  define VALGRIND_CFI_EPILOGUE /;"	d
VALGRIND_CFI_EPILOGUE	deps/valgrind/valgrind.h	/^#  define VALGRIND_CFI_EPILOGUE$/;"	d
VALGRIND_CFI_PROLOGUE	deps/valgrind/valgrind.h	/^#  define VALGRIND_CFI_PROLOGUE /;"	d
VALGRIND_CFI_PROLOGUE	deps/valgrind/valgrind.h	/^#  define VALGRIND_CFI_PROLOGUE$/;"	d
VALGRIND_COUNT_ERRORS	deps/valgrind/valgrind.h	/^#define VALGRIND_COUNT_ERRORS /;"	d
VALGRIND_CREATE_MEMPOOL	deps/valgrind/valgrind.h	/^#define VALGRIND_CREATE_MEMPOOL(/;"	d
VALGRIND_DESTROY_MEMPOOL	deps/valgrind/valgrind.h	/^#define VALGRIND_DESTROY_MEMPOOL(/;"	d
VALGRIND_DISABLE_ERROR_REPORTING	deps/valgrind/valgrind.h	/^#define VALGRIND_DISABLE_ERROR_REPORTING /;"	d
VALGRIND_DISCARD_TRANSLATIONS	deps/valgrind/valgrind.h	/^#define VALGRIND_DISCARD_TRANSLATIONS(/;"	d
VALGRIND_DO_CLIENT_REQUEST	deps/valgrind/valgrind.h	/^#define VALGRIND_DO_CLIENT_REQUEST(/;"	d
VALGRIND_DO_CLIENT_REQUEST_EXPR	deps/valgrind/valgrind.h	/^#define VALGRIND_DO_CLIENT_REQUEST_EXPR(/;"	d
VALGRIND_DO_CLIENT_REQUEST_STMT	deps/valgrind/valgrind.h	/^#define VALGRIND_DO_CLIENT_REQUEST_STMT(/;"	d
VALGRIND_ENABLE_ERROR_REPORTING	deps/valgrind/valgrind.h	/^#define VALGRIND_ENABLE_ERROR_REPORTING /;"	d
VALGRIND_FREELIKE_BLOCK	deps/valgrind/valgrind.h	/^#define VALGRIND_FREELIKE_BLOCK(/;"	d
VALGRIND_GET_NR_CONTEXT	deps/valgrind/valgrind.h	/^#define VALGRIND_GET_NR_CONTEXT(/;"	d
VALGRIND_GET_ORIG_FN	deps/valgrind/valgrind.h	/^#define VALGRIND_GET_ORIG_FN(/;"	d
VALGRIND_LOAD_PDB_DEBUGINFO	deps/valgrind/valgrind.h	/^#define VALGRIND_LOAD_PDB_DEBUGINFO(/;"	d
VALGRIND_MALLOCLIKE_BLOCK	deps/valgrind/valgrind.h	/^#define VALGRIND_MALLOCLIKE_BLOCK(/;"	d
VALGRIND_MAP_IP_TO_SRCLOC	deps/valgrind/valgrind.h	/^#define VALGRIND_MAP_IP_TO_SRCLOC(/;"	d
VALGRIND_MEMPOOL_ALLOC	deps/valgrind/valgrind.h	/^#define VALGRIND_MEMPOOL_ALLOC(/;"	d
VALGRIND_MEMPOOL_CHANGE	deps/valgrind/valgrind.h	/^#define VALGRIND_MEMPOOL_CHANGE(/;"	d
VALGRIND_MEMPOOL_EXISTS	deps/valgrind/valgrind.h	/^#define VALGRIND_MEMPOOL_EXISTS(/;"	d
VALGRIND_MEMPOOL_FREE	deps/valgrind/valgrind.h	/^#define VALGRIND_MEMPOOL_FREE(/;"	d
VALGRIND_MEMPOOL_TRIM	deps/valgrind/valgrind.h	/^#define VALGRIND_MEMPOOL_TRIM(/;"	d
VALGRIND_MONITOR_COMMAND	deps/valgrind/valgrind.h	/^#define VALGRIND_MONITOR_COMMAND(/;"	d
VALGRIND_MOVE_MEMPOOL	deps/valgrind/valgrind.h	/^#define VALGRIND_MOVE_MEMPOOL(/;"	d
VALGRIND_NON_SIMD_CALL0	deps/valgrind/valgrind.h	/^#define VALGRIND_NON_SIMD_CALL0(/;"	d
VALGRIND_NON_SIMD_CALL1	deps/valgrind/valgrind.h	/^#define VALGRIND_NON_SIMD_CALL1(/;"	d
VALGRIND_NON_SIMD_CALL2	deps/valgrind/valgrind.h	/^#define VALGRIND_NON_SIMD_CALL2(/;"	d
VALGRIND_NON_SIMD_CALL3	deps/valgrind/valgrind.h	/^#define VALGRIND_NON_SIMD_CALL3(/;"	d
VALGRIND_PRINTF	deps/valgrind/valgrind.h	/^VALGRIND_PRINTF(const char *format, ...)$/;"	f	typeref:typename:int
VALGRIND_PRINTF_BACKTRACE	deps/valgrind/valgrind.h	/^VALGRIND_PRINTF_BACKTRACE(const char *format, ...)$/;"	f	typeref:typename:int
VALGRIND_RESIZEINPLACE_BLOCK	deps/valgrind/valgrind.h	/^#define VALGRIND_RESIZEINPLACE_BLOCK(/;"	d
VALGRIND_RESTORE_STACK	deps/valgrind/valgrind.h	/^#define VALGRIND_RESTORE_STACK /;"	d
VALGRIND_STACK_CHANGE	deps/valgrind/valgrind.h	/^#define VALGRIND_STACK_CHANGE(/;"	d
VALGRIND_STACK_DEREGISTER	deps/valgrind/valgrind.h	/^#define VALGRIND_STACK_DEREGISTER(/;"	d
VALGRIND_STACK_REGISTER	deps/valgrind/valgrind.h	/^#define VALGRIND_STACK_REGISTER(/;"	d
VALGRIND_VEX_INJECT_IR	deps/valgrind/valgrind.h	/^#define VALGRIND_VEX_INJECT_IR(/;"	d
VALID_EXPR_HEADS	base/compiler/validation.jl	/^const VALID_EXPR_HEADS = IdDict{Any,Any}($/;"	v
VALUE_TAGS	stdlib/Serialization/src/Serialization.jl	/^const VALUE_TAGS = sertag(())$/;"	v
VA_COPY	src/support/asprintf.c	/^#   define VA_COPY(/;"	d	file:
VA_COPY	src/support/asprintf.c	/^#  define VA_COPY(/;"	d	file:
VERBOSE	stdlib/SHA/test/runtests.jl	/^const VERBOSE = false$/;"	v
VERSDIR	Makefile	/^VERSDIR := v`cut -d. -f1-2 < $(JULIAHOME)\/VERSION`$/;"	m
VERSDIR	stdlib/Makefile	/^VERSDIR := v$(shell cut -d. -f1-2 < $(JULIAHOME)\/VERSION)$/;"	m
VERSDIR	sysimage.mk	/^VERSDIR := v`cut -d. -f1-2 < $(JULIAHOME)\/VERSION`$/;"	m
VERSDIR	test/Makefile	/^VERSDIR := v$(shell cut -d. -f1-2 < $(JULIAHOME)\/VERSION)$/;"	m
VERSION	base/gmp.jl	/^const VERSION = version()$/;"	v
VERSION	base/version.jl	/^const VERSION = try$/;"	v
VERSION	deps/srccache/patchelf-0.9/Makefile.in	/^VERSION = @VERSION@$/;"	m
VERSION	deps/srccache/patchelf-0.9/src/Makefile.in	/^VERSION = @VERSION@$/;"	m
VERSION	deps/srccache/patchelf-0.9/tests/Makefile.in	/^VERSION = @VERSION@$/;"	m
VERSION	stdlib/LibGit2/src/utils.jl	/^const VERSION = version()$/;"	v
VERSION_REGEX	base/version.jl	/^const VERSION_REGEX = r"^$/;"	v
VER_DEF_CURRENT	deps/srccache/patchelf-0.9/src/elf.h	/^#define VER_DEF_CURRENT	/;"	d
VER_DEF_NONE	deps/srccache/patchelf-0.9/src/elf.h	/^#define VER_DEF_NONE	/;"	d
VER_DEF_NUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define VER_DEF_NUM	/;"	d
VER_FLG_BASE	deps/srccache/patchelf-0.9/src/elf.h	/^#define VER_FLG_BASE	/;"	d
VER_FLG_WEAK	deps/srccache/patchelf-0.9/src/elf.h	/^#define VER_FLG_WEAK	/;"	d
VER_NDX_ELIMINATE	deps/srccache/patchelf-0.9/src/elf.h	/^#define	VER_NDX_ELIMINATE	/;"	d
VER_NDX_GLOBAL	deps/srccache/patchelf-0.9/src/elf.h	/^#define	VER_NDX_GLOBAL	/;"	d
VER_NDX_LOCAL	deps/srccache/patchelf-0.9/src/elf.h	/^#define	VER_NDX_LOCAL	/;"	d
VER_NDX_LORESERVE	deps/srccache/patchelf-0.9/src/elf.h	/^#define	VER_NDX_LORESERVE	/;"	d
VER_NEED_CURRENT	deps/srccache/patchelf-0.9/src/elf.h	/^#define VER_NEED_CURRENT /;"	d
VER_NEED_NONE	deps/srccache/patchelf-0.9/src/elf.h	/^#define VER_NEED_NONE	/;"	d
VER_NEED_NUM	deps/srccache/patchelf-0.9/src/elf.h	/^#define VER_NEED_NUM	/;"	d
VG_CONCAT4	deps/valgrind/valgrind.h	/^#define VG_CONCAT4(/;"	d
VG_IS_TOOL_USERREQ	deps/valgrind/valgrind.h	/^#define VG_IS_TOOL_USERREQ(/;"	d
VG_USERREQ_TOOL_BASE	deps/valgrind/valgrind.h	/^#define VG_USERREQ_TOOL_BASE(/;"	d
VG_USERREQ__CHANGE_ERR_DISABLEMENT	deps/valgrind/valgrind.h	/^          VG_USERREQ__CHANGE_ERR_DISABLEMENT = 0x1801,$/;"	e	enum:__anon428795130c03
VG_USERREQ__CLIENT_CALL0	deps/valgrind/valgrind.h	/^          VG_USERREQ__CLIENT_CALL0 = 0x1101,$/;"	e	enum:__anon428795130c03
VG_USERREQ__CLIENT_CALL1	deps/valgrind/valgrind.h	/^          VG_USERREQ__CLIENT_CALL1 = 0x1102,$/;"	e	enum:__anon428795130c03
VG_USERREQ__CLIENT_CALL2	deps/valgrind/valgrind.h	/^          VG_USERREQ__CLIENT_CALL2 = 0x1103,$/;"	e	enum:__anon428795130c03
VG_USERREQ__CLIENT_CALL3	deps/valgrind/valgrind.h	/^          VG_USERREQ__CLIENT_CALL3 = 0x1104,$/;"	e	enum:__anon428795130c03
VG_USERREQ__COUNT_ERRORS	deps/valgrind/valgrind.h	/^          VG_USERREQ__COUNT_ERRORS = 0x1201,$/;"	e	enum:__anon428795130c03
VG_USERREQ__CREATE_MEMPOOL	deps/valgrind/valgrind.h	/^          VG_USERREQ__CREATE_MEMPOOL   = 0x1303,$/;"	e	enum:__anon428795130c03
VG_USERREQ__DESTROY_MEMPOOL	deps/valgrind/valgrind.h	/^          VG_USERREQ__DESTROY_MEMPOOL  = 0x1304,$/;"	e	enum:__anon428795130c03
VG_USERREQ__DISCARD_TRANSLATIONS	deps/valgrind/valgrind.h	/^          VG_USERREQ__DISCARD_TRANSLATIONS = 0x1002,$/;"	e	enum:__anon428795130c03
VG_USERREQ__FREELIKE_BLOCK	deps/valgrind/valgrind.h	/^          VG_USERREQ__FREELIKE_BLOCK   = 0x1302,$/;"	e	enum:__anon428795130c03
VG_USERREQ__GDB_MONITOR_COMMAND	deps/valgrind/valgrind.h	/^          VG_USERREQ__GDB_MONITOR_COMMAND = 0x1202,$/;"	e	enum:__anon428795130c03
VG_USERREQ__LOAD_PDB_DEBUGINFO	deps/valgrind/valgrind.h	/^          VG_USERREQ__LOAD_PDB_DEBUGINFO = 0x1601,$/;"	e	enum:__anon428795130c03
VG_USERREQ__MALLOCLIKE_BLOCK	deps/valgrind/valgrind.h	/^          VG_USERREQ__MALLOCLIKE_BLOCK = 0x1301,$/;"	e	enum:__anon428795130c03
VG_USERREQ__MAP_IP_TO_SRCLOC	deps/valgrind/valgrind.h	/^          VG_USERREQ__MAP_IP_TO_SRCLOC = 0x1701,$/;"	e	enum:__anon428795130c03
VG_USERREQ__MEMPOOL_ALLOC	deps/valgrind/valgrind.h	/^          VG_USERREQ__MEMPOOL_ALLOC    = 0x1305,$/;"	e	enum:__anon428795130c03
VG_USERREQ__MEMPOOL_CHANGE	deps/valgrind/valgrind.h	/^          VG_USERREQ__MEMPOOL_CHANGE   = 0x1309,$/;"	e	enum:__anon428795130c03
VG_USERREQ__MEMPOOL_EXISTS	deps/valgrind/valgrind.h	/^          VG_USERREQ__MEMPOOL_EXISTS   = 0x130a,$/;"	e	enum:__anon428795130c03
VG_USERREQ__MEMPOOL_FREE	deps/valgrind/valgrind.h	/^          VG_USERREQ__MEMPOOL_FREE     = 0x1306,$/;"	e	enum:__anon428795130c03
VG_USERREQ__MEMPOOL_TRIM	deps/valgrind/valgrind.h	/^          VG_USERREQ__MEMPOOL_TRIM     = 0x1307,$/;"	e	enum:__anon428795130c03
VG_USERREQ__MOVE_MEMPOOL	deps/valgrind/valgrind.h	/^          VG_USERREQ__MOVE_MEMPOOL     = 0x1308,$/;"	e	enum:__anon428795130c03
VG_USERREQ__PRINTF	deps/valgrind/valgrind.h	/^          VG_USERREQ__PRINTF           = 0x1401,$/;"	e	enum:__anon428795130c03
VG_USERREQ__PRINTF_BACKTRACE	deps/valgrind/valgrind.h	/^          VG_USERREQ__PRINTF_BACKTRACE = 0x1402,$/;"	e	enum:__anon428795130c03
VG_USERREQ__PRINTF_BACKTRACE_VALIST_BY_REF	deps/valgrind/valgrind.h	/^          VG_USERREQ__PRINTF_BACKTRACE_VALIST_BY_REF = 0x1404,$/;"	e	enum:__anon428795130c03
VG_USERREQ__PRINTF_VALIST_BY_REF	deps/valgrind/valgrind.h	/^          VG_USERREQ__PRINTF_VALIST_BY_REF = 0x1403,$/;"	e	enum:__anon428795130c03
VG_USERREQ__RESIZEINPLACE_BLOCK	deps/valgrind/valgrind.h	/^          VG_USERREQ__RESIZEINPLACE_BLOCK = 0x130b,$/;"	e	enum:__anon428795130c03
VG_USERREQ__RUNNING_ON_VALGRIND	deps/valgrind/valgrind.h	/^   enum { VG_USERREQ__RUNNING_ON_VALGRIND  = 0x1001,$/;"	e	enum:__anon428795130c03
VG_USERREQ__STACK_CHANGE	deps/valgrind/valgrind.h	/^          VG_USERREQ__STACK_CHANGE     = 0x1503,$/;"	e	enum:__anon428795130c03
VG_USERREQ__STACK_DEREGISTER	deps/valgrind/valgrind.h	/^          VG_USERREQ__STACK_DEREGISTER = 0x1502,$/;"	e	enum:__anon428795130c03
VG_USERREQ__STACK_REGISTER	deps/valgrind/valgrind.h	/^          VG_USERREQ__STACK_REGISTER   = 0x1501,$/;"	e	enum:__anon428795130c03
VG_USERREQ__VEX_INIT_FOR_IRI	deps/valgrind/valgrind.h	/^          VG_USERREQ__VEX_INIT_FOR_IRI = 0x1901$/;"	e	enum:__anon428795130c03
VInt	base/version.jl	/^const VInt = UInt32$/;"	v
VM_APPLY_LABELS	src/flisp/opcodes.h	/^#define VM_APPLY_LABELS /;"	d
VM_APPLY_LABELS	src/flisp/opcodes.h	/^#define VM_APPLY_LABELS$/;"	d
VM_LABELS	src/flisp/opcodes.h	/^#define VM_LABELS /;"	d
VM_LABELS	src/flisp/opcodes.h	/^#define VM_LABELS$/;"	d
VMap	src/ccall.cpp	/^    ValueToValueMapTy VMap;$/;"	m	class:FunctionMover	typeref:typename:ValueToValueMapTy	file:
VOL_NAME	contrib/mac/app/Makefile	/^VOL_NAME:=Julia-$(JULIA_VERSION_OPT_COMMIT)$/;"	m
VPATH	deps/srccache/patchelf-0.9/Makefile.in	/^VPATH = @srcdir@$/;"	m
VPATH	deps/srccache/patchelf-0.9/src/Makefile.in	/^VPATH = @srcdir@$/;"	m
VPATH	deps/srccache/patchelf-0.9/tests/Makefile.in	/^VPATH = @srcdir@$/;"	m
VPOS	src/flisp/flisp.h	/^    int HPOS, VPOS;$/;"	m	struct:_fl_context_t	typeref:typename:int
VRealTypes	stdlib/SuiteSparse/src/cholmod_h.jl	/^const VRealTypes = Union{Float64}$/;"	v
VTypes	stdlib/SuiteSparse/src/cholmod_h.jl	/^const VTypes = Union{ComplexF64, Float64}$/;"	v
V_null	src/codegen.cpp	/^static Constant *V_null;$/;"	v	typeref:typename:Constant *	file:
Val	base/essentials.jl	/^Val(x) = (@_pure_meta; Val{x}())$/;"	f
Val	base/essentials.jl	/^struct Val{x}$/;"	f
Value18343	test/precompile.jl	/^              struct Value18343{T, R}$/;"	f
ValueIterator	base/abstractdict.jl	/^struct ValueIterator{T<:AbstractDict}$/;"	f
ValueOf31406	test/core.jl	/^struct ValueOf31406 <: Shape31406$/;"	f
ValueState	src/clangsa/GCChecker.cpp	/^            ValueState() : S(Untracked), Root(nullptr), RootDepth(0), FD(nullptr), PVD(nullptr) /;"	f	struct:__anon9c5a21540111::GCChecker::ValueState	file:
ValueState	src/clangsa/GCChecker.cpp	/^            ValueState(State InS, const MemRegion *Root, int Depth) : S(InS), Root(Root), RootDe/;"	f	struct:__anon9c5a21540111::GCChecker::ValueState	file:
ValueState	src/clangsa/GCChecker.cpp	/^        struct ValueState {$/;"	s	class:__anon9c5a21540111::GCChecker	file:
VarState	base/compiler/typelattice.jl	/^    VarState(@nospecialize(typ), undef::Bool) = new(typ, undef)$/;"	f
VarState	base/compiler/typelattice.jl	/^struct VarState$/;"	f
VarTable	base/compiler/typelattice.jl	/^const VarTable = Array{Any,1}$/;"	v
Vararg Tuple Types	doc/src/manual/types.md	/^### Vararg Tuple Types$/;"	S
Varargs Functions	doc/src/manual/functions.md	/^## Varargs Functions$/;"	s
Variables	doc/src/manual/variables.md	/^# Variables$/;"	c
Vboxed	src/codegen.cpp	/^    Value *Vboxed;$/;"	m	struct:jl_cgval_t	typeref:typename:Value *	file:
Vec3_8932	test/core.jl	/^struct Vec3_8932$/;"	f
Vec8010	test/core.jl	/^Vec8010(a::AbstractVector) = Vec8010(ntuple(x->a[x],2)...)$/;"	f
Vec8010	test/core.jl	/^struct Vec8010{T}$/;"	f
VecElement	base/boot.jl	/^VecElement(arg::T) where {T} = VecElement{T}(arg)$/;"	f
VecElement	base/boot.jl	/^struct VecElement{T}$/;"	f
Vector	base/baseext.jl	/^Vector() = Vector{Any}(undef, 0)$/;"	f
Vector	base/baseext.jl	/^Vector(::UndefInitializer, m::Integer) = Vector{Any}(undef, Int(m))$/;"	f
Vector	stdlib/SparseArrays/src/sparsevector.jl	/^function Vector(x::AbstractSparseVector{Tv}) where Tv$/;"	f
Vector	stdlib/SuiteSparse/src/cholmod.jl	/^Vector(D::Dense{T}) where {T} = Vector{T}(D)$/;"	f
Vector	stdlib/SuiteSparse/src/cholmod.jl	/^function Vector{T}(D::Dense{T}) where T$/;"	f
Version	deps/srccache/patchelf-0.9/patchelf.spec	/^Version: 0.9$/;"	t
Version	deps/srccache/patchelf-0.9/patchelf.spec.in	/^Version: @PACKAGE_VERSION@$/;"	t
VersionNumber	base/version.jl	/^    function VersionNumber(major::VInt, minor::VInt, patch::VInt,$/;"	f
VersionNumber	base/version.jl	/^VersionNumber(v::Tuple) = VersionNumber(v...)$/;"	f
VersionNumber	base/version.jl	/^function VersionNumber(v::AbstractString)$/;"	f
VersionNumber	base/version.jl	/^struct VersionNumber$/;"	f
Versioning	doc/src/base/base.md	/^## Versioning$/;"	s
Versioning and Git	doc/build/distributing.md	/^Versioning and Git$/;"	s
Vertex4141	test/core.jl	/^mutable struct Vertex4141{N,T}; end$/;"	f
Vg_ClientRequest	deps/valgrind/valgrind.h	/^   } Vg_ClientRequest;$/;"	t	typeref:enum:__anon428795130c03
ViewIndex	base/subarray.jl	/^const ViewIndex = Union{Real, AbstractArray}$/;"	v
Viewing a stack trace	doc/src/manual/stacktraces.md	/^## Viewing a stack trace$/;"	s
Views (SubArrays and other view types)	doc/src/base/arrays.md	/^## Views (SubArrays and other view types)$/;"	s
VisitNode	src/clangsa/GCChecker.cpp	/^PDP GCChecker::GCBugVisitor::VisitNode($/;"	f	class:GCChecker::GCBugVisitor	typeref:typename:PDP
VisitNode	src/clangsa/GCChecker.cpp	/^PDP GCChecker::GCValueBugVisitor::VisitNode($/;"	f	class:GCChecker::GCValueBugVisitor	typeref:typename:PDP
Visited	src/llvm-propagate-addrspaces.cpp	/^    SmallPtrSet<Value *, 4> Visited;$/;"	m	struct:PropagateJuliaAddrspaces	typeref:typename:SmallPtrSet<Value *,4>	file:
VoxelIndices	test/compiler/inference.jl	/^struct VoxelIndices{T <: Integer}$/;"	f
WAIT_T	src/sys.c	/^#define WAIT_T /;"	d	file:
WCOREDUMP	src/sys.c	/^#define WCOREDUMP(/;"	d	file:
WEEKEPOCH	stdlib/Dates/src/rounding.jl	/^const WEEKEPOCH = value(Date(0, 1, 3))$/;"	v
WEEK_INDEX	stdlib/Dates/src/accessors.jl	/^const WEEK_INDEX = (15, 23, 3, 11)$/;"	v
WEXITSTATUS	src/sys.c	/^#define WEXITSTATUS(/;"	d	file:
WIFEXITED	src/sys.c	/^#define WIFEXITED(/;"	d	file:
WIFSIGNALED	src/sys.c	/^#define WIFSIGNALED(/;"	d	file:
WIFSTOPPED	src/sys.c	/^#define WIFSTOPPED(/;"	d	file:
WIN32_LEAN_AND_MEAN	src/init.c	/^#define WIN32_LEAN_AND_MEAN$/;"	d	file:
WIN32_LEAN_AND_MEAN	src/support/win32_ucontext.c	/^#define WIN32_LEAN_AND_MEAN$/;"	d	file:
WINDOWS_VISTA_VER	base/sysinfo.jl	/^const WINDOWS_VISTA_VER = v"6.0"$/;"	v
WORD_SIZE	base/sysinfo.jl	/^const WORD_SIZE = Core.sizeof(Int) * 8$/;"	v
WRAPPER_DATATYPE_TAG	stdlib/Serialization/src/Serialization.jl	/^const WRAPPER_DATATYPE_TAG = Int32(o0+11)$/;"	v
WRITE_FAULT	src/signals-mach.c	/^    WRITE_FAULT = 0x2,$/;"	e	enum:x86_trap_flags	file:
WRInit	src/cgmemmgr.cpp	/^        WRInit = (1 << 2),$/;"	e	enum:__anon06c686bc0111::SplitPtrBlock::State	file:
WRReady	src/cgmemmgr.cpp	/^        WRReady = (1 << 3),$/;"	e	enum:__anon06c686bc0111::SplitPtrBlock::State	file:
WSTOPSIG	src/sys.c	/^#define WSTOPSIG(/;"	d	file:
WTERMSIG	src/sys.c	/^#define WTERMSIG(/;"	d	file:
Warn	base/logging.jl	/^const Warn          = LogLevel(    1000)$/;"	v
WarnType	stdlib/InteractiveUtils/test/runtests.jl	/^module WarnType$/;"	f
WeVirtualProtectThisToRWX	test/misc.jl	/^@noinline function WeVirtualProtectThisToRWX(x, y)$/;"	f
WeakKeyDict	base/weakkeydict.jl	/^    function WeakKeyDict{K,V}() where V where K$/;"	f
WeakKeyDict	base/weakkeydict.jl	/^WeakKeyDict() = WeakKeyDict{Any,Any}()$/;"	f
WeakKeyDict	base/weakkeydict.jl	/^WeakKeyDict(kv::Tuple{}) = WeakKeyDict()$/;"	f
WeakKeyDict	base/weakkeydict.jl	/^WeakKeyDict(ps::(Pair{K,V} where K)...) where {V}   = WeakKeyDict{Any,V}(ps)$/;"	f
WeakKeyDict	base/weakkeydict.jl	/^WeakKeyDict(ps::Pair...)                            = WeakKeyDict{Any,Any}(ps)$/;"	f
WeakKeyDict	base/weakkeydict.jl	/^WeakKeyDict(ps::Pair{K,V}...)           where {K,V} = WeakKeyDict{K,V}(ps)$/;"	f
WeakKeyDict	base/weakkeydict.jl	/^WeakKeyDict(ps::Pair{K}...)             where {K}   = WeakKeyDict{K,Any}(ps)$/;"	f
WeakKeyDict	base/weakkeydict.jl	/^function WeakKeyDict(kv)$/;"	f
WeakKeyDict	base/weakkeydict.jl	/^function WeakKeyDict{K,V}(kv) where V where K$/;"	f
WeakKeyDict	base/weakkeydict.jl	/^function WeakKeyDict{K,V}(ps::Pair...) where V where K$/;"	f
WeakKeyDict	base/weakkeydict.jl	/^mutable struct WeakKeyDict{K,V} <: AbstractDict{K,V}$/;"	f
WeakRef	base/boot.jl	/^    WeakRef() = WeakRef(nothing)$/;"	f
WeakRef	base/boot.jl	/^    WeakRef(@nospecialize(v)) = ccall(:jl_gc_new_weakref_th, Ref{WeakRef},$/;"	f
WeakRef	base/boot.jl	/^mutable struct WeakRef$/;"	f
WellKnownFunctionDescription	src/llvm-pass-helpers.h	/^    typedef jl_intrinsics::IntrinsicDescription WellKnownFunctionDescription;$/;"	t	namespace:jl_well_known	typeref:typename:jl_intrinsics::IntrinsicDescription
What are the differences between zero-dimensional arrays and scalars?	doc/src/manual/faq.md	/^### What are the differences between zero-dimensional arrays and scalars?$/;"	S
What are the possible causes of an `UndefVarError` during remote execution?	doc/src/manual/faq.md	/^### What are the possible causes of an `UndefVarError` during remote execution?$/;"	S
What does the `...` operator do?	doc/src/manual/faq.md	/^### What does the `...` operator do?$/;"	S
What is the difference between "using" and "import"?	doc/src/manual/faq.md	/^### What is the difference between "using" and "import"?$/;"	S
What is the return value of an assignment?	doc/src/manual/faq.md	/^### What is the return value of an assignment?$/;"	S
When is `convert` called?	doc/src/manual/conversion-and-promotion.md	/^### When is `convert` called?$/;"	S
When to use T, Ptr{T} and Ref{T}	doc/src/manual/calling-c-and-fortran-code.md	/^### When to use T, Ptr{T} and Ref{T}$/;"	S
Why are my Julia benchmarks for linear algebra operations different from other languages?	doc/src/manual/faq.md	/^### Why are my Julia benchmarks for linear algebra operations different from other languages?$/;"	S
Why do concurrent writes to the same stream result in inter-mixed output?	doc/src/manual/faq.md	/^### Why do concurrent writes to the same stream result in inter-mixed output?$/;"	S
Why does Julia use `*` for string concatenation? Why not `+` or something else?	doc/src/manual/faq.md	/^### Why does Julia use `*` for string concatenation? Why not `+` or something else?$/;"	S
Why does `x += y` allocate memory when `x` and `y` are arrays?	doc/src/manual/faq.md	/^### Why does `x += y` allocate memory when `x` and `y` are arrays?$/;"	S
Why don't you compile Matlab/Python/R/… code to Julia?	doc/src/manual/faq.md	/^### Why don't you compile Matlab\/Python\/R\/… code to Julia?$/;"	S
Windows	doc/build/distributing.md	/^### Windows$/;"	S
Windows	doc/build/distributing.md	/^Windows$/;"	s
Windows Build Debugging	doc/build/windows.md	/^## Windows Build Debugging$/;"	s
WindowsErrorInfo	base/error.jl	/^struct WindowsErrorInfo$/;"	f
WindowsRawSocket	base/libc.jl	/^    WindowsRawSocket(handle::Ptr{Cvoid}) = bitcast(WindowsRawSocket, handle)$/;"	f
WindowsRawSocket	base/libc.jl	/^    WindowsRawSocket(handle::WindowsRawSocket) = handle$/;"	f
WindowsRawSocket	base/libc.jl	/^    primitive type WindowsRawSocket sizeof(Ptr) * 8 end # On Windows file descriptors are HANDLE/;"	f
Worker	stdlib/Distributed/src/cluster.jl	/^    Worker() = Worker(get_next_pid())$/;"	f
Worker	stdlib/Distributed/src/cluster.jl	/^    Worker(id::Int) = Worker(id, nothing)$/;"	f
Worker	stdlib/Distributed/src/cluster.jl	/^    function Worker(id::Int, conn_func)$/;"	f
Worker	stdlib/Distributed/src/cluster.jl	/^    function Worker(id::Int, r_stream::IO, w_stream::IO, manager::ClusterManager;$/;"	f
Worker	stdlib/Distributed/src/cluster.jl	/^mutable struct Worker$/;"	f
WorkerArgTester	stdlib/Distributed/test/distributed_exec.jl	/^struct WorkerArgTester <: ClusterManager$/;"	f
WorkerConfig	stdlib/Distributed/src/cluster.jl	/^    function WorkerConfig()$/;"	f
WorkerConfig	stdlib/Distributed/src/cluster.jl	/^mutable struct WorkerConfig$/;"	f
WorkerPool	stdlib/Distributed/src/workerpool.jl	/^    WorkerPool(c::Channel, ref::RemoteChannel) = new(c, Set{Int}(), ref)$/;"	f
WorkerPool	stdlib/Distributed/src/workerpool.jl	/^WorkerPool(ref::RemoteChannel) = WorkerPool(Channel{Int}(1), ref)$/;"	f
WorkerPool	stdlib/Distributed/src/workerpool.jl	/^function WorkerPool()$/;"	f
WorkerPool	stdlib/Distributed/src/workerpool.jl	/^function WorkerPool(workers::Vector{Int})$/;"	f
WorkerPool	stdlib/Distributed/src/workerpool.jl	/^mutable struct WorkerPool <: AbstractWorkerPool$/;"	f
Working with Arrays	doc/src/manual/embedding.md	/^## Working with Arrays$/;"	s
Working with Files	doc/src/manual/networking-and-streams.md	/^## Working with Files$/;"	s
Working with LLVM	doc/src/devdocs/llvm.md	/^# Working with LLVM$/;"	c
Working with Test Sets	stdlib/Test/docs/src/index.md	/^## Working with Test Sets$/;"	s
Working with `Broadcasted` objects	doc/src/manual/interfaces.md	/^#### Working with `Broadcasted` objects$/;"	t
Wow____	test/core.jl	/^mutable struct Wow____{K,V} <: Foo____{K} end$/;"	f
WrappedArray	stdlib/LinearAlgebra/test/blas.jl	/^struct WrappedArray{T,N} <: AbstractArray{T,N}$/;"	f
WrappedException	base/boot.jl	/^abstract type WrappedException <: Exception end$/;"	f
Wrapper types	doc/src/manual/conversion-and-promotion.md	/^#### Wrapper types$/;"	t
Write "type-stable" functions	doc/src/manual/performance-tips.md	/^## Write "type-stable" functions$/;"	s
Write functions with argument ordering similar to Julia Base	doc/src/manual/style-guide.md	/^## Write functions with argument ordering similar to Julia Base$/;"	s
Write functions, not just scripts	doc/src/manual/style-guide.md	/^## Write functions, not just scripts$/;"	s
Writing custom array types with non-1 indexing	doc/src/devdocs/offset-arrays.md	/^## Writing custom array types with non-1 indexing$/;"	s
Writing log events to a file	stdlib/Logging/docs/src/index.md	/^## Writing log events to a file$/;"	s
Writing tests	CONTRIBUTING.md	/^### Writing tests$/;"	S
X	src/jitlayers.cpp	/^static RegisterPass<JuliaPipeline<0>> X("juliaO0", "Runs the entire julia pipeline (at -O0)", fa/;"	v	typeref:typename:RegisterPass<JuliaPipeline<0>>	file:
X	src/llvm-alloc-opt.cpp	/^static RegisterPass<AllocOpt> X("AllocOpt", "Promote heap allocation to stack",$/;"	v	namespace:__anon0a1571000111	typeref:typename:RegisterPass<AllocOpt>	file:
X	src/llvm-final-gc-lowering.cpp	/^static RegisterPass<FinalLowerGC> X("FinalLowerGC", "Final GC intrinsic lowering pass", false, f/;"	v	typeref:typename:RegisterPass<FinalLowerGC>	file:
X	src/llvm-gc-invariant-verifier.cpp	/^static RegisterPass<GCInvariantVerifier> X("GCInvariantVerifier", "GC Invariant Verification Pas/;"	v	typeref:typename:RegisterPass<GCInvariantVerifier>	file:
X	src/llvm-late-gc-lowering.cpp	/^static RegisterPass<LateLowerGCFrame> X("LateLowerGCFrame", "Late Lower GCFrame Pass", false, fa/;"	v	typeref:typename:RegisterPass<LateLowerGCFrame>	file:
X	src/llvm-lower-handlers.cpp	/^static RegisterPass<LowerExcHandlers> X("LowerExcHandlers", "Lower Julia Exception Handlers",$/;"	v	typeref:typename:RegisterPass<LowerExcHandlers>	file:
X	src/llvm-muladd.cpp	/^static RegisterPass<CombineMulAdd> X("CombineMulAdd", "Combine mul and add to muladd",$/;"	v	typeref:typename:RegisterPass<CombineMulAdd>	file:
X	src/llvm-multiversioning.cpp	/^static RegisterPass<MultiVersioning> X("JuliaMultiVersioning", "JuliaMultiVersioning Pass",$/;"	v	namespace:__anond5683ea40111	typeref:typename:RegisterPass<MultiVersioning>	file:
X	src/llvm-propagate-addrspaces.cpp	/^static RegisterPass<PropagateJuliaAddrspaces> X("PropagateJuliaAddrspaces", "Propagate (non-)roo/;"	v	typeref:typename:RegisterPass<PropagateJuliaAddrspaces>	file:
X	src/llvm-ptls.cpp	/^static RegisterPass<LowerPTLS> X("LowerPTLS", "LowerPTLS Pass",$/;"	v	namespace:__anonf46923380111	typeref:typename:RegisterPass<LowerPTLS>	file:
X	src/llvm-simdloop.cpp	/^static RegisterPass<LowerSIMDLoop> X("LowerSIMDLoop", "LowerSIMDLoop Pass",$/;"	v	namespace:llvm	typeref:typename:RegisterPass<LowerSIMDLoop>	file:
X	src/timing.c	/^#define X(/;"	d	file:
X	src/timing.h	/^#define X(/;"	d
X	stdlib/Statistics/test/runtests.jl	/^X = [1.0  5.0;$/;"	v
X	test/subarray.jl	/^X = reshape(1:24,2,3,4)$/;"	v
X	test/syntax.jl	/^    struct X$/;"	f
X13647	test/core.jl	/^struct X13647$/;"	f
X1474	test/core.jl	/^mutable struct X1474{a,b} end$/;"	f
X19861	test/syntax.jl	/^           macro X19861()$/;"	f
X28004	test/show.jl	/^struct X28004$/;"	f
X29064	test/syntax.jl	/^struct X29064$/;"	f
X6074	test/core.jl	/^macro X6074()$/;"	f
X8	test/misc.jl	/^X8 = Vector{UInt8}[$/;"	v
X86	src/processor_x86.cpp	/^namespace X86 {$/;"	n	file:
X87	src/abi_x86_64.cpp	/^enum ArgClass { Integer, Sse, SseUp, X87, X87Up, ComplexX87, NoClass, Memory };$/;"	e	enum:ArgClass	file:
X87Up	src/abi_x86_64.cpp	/^enum ArgClass { Integer, Sse, SseUp, X87, X87Up, ComplexX87, NoClass, Memory };$/;"	e	enum:ArgClass	file:
X;	test/syntax.jl	/^    mutable struct X; end$/;"	f
XCARCHIVE	contrib/mac/frameworkapp/Makefile	/^XCARCHIVE := $(BUILDROOT)\/Xcode\/Archives\/JuliaLauncher$(XCARCHIVE_SUFFIX)$/;"	m
XCARCHIVE_SUFFIX	contrib/mac/frameworkapp/Makefile	/^XCARCHIVE_SUFFIX := -$(JULIA_COMMIT)-$(XCCONFIGURATION).xcarchive$/;"	m
XCCONFIGURATION	contrib/mac/frameworkapp/Makefile	/^XCCONFIGURATION ?= Debug$/;"	m
XCDERIVEDDATA	contrib/mac/frameworkapp/Makefile	/^XCDERIVEDDATA := $(BUILDROOT)\/Xcode\/DerivedData\/JuliaLauncher$(XCARCHIVE_SUFFIX)$/;"	m
XCEXPORT	contrib/mac/frameworkapp/Makefile	/^XCEXPORT := $(BUILDROOT)\/Xcode\/Exports\/JuliaLauncher$(XCARCHIVE_SUFFIX)$/;"	m
XCEXPORT_METHOD	contrib/mac/frameworkapp/Makefile	/^XCEXPORT_METHOD ?= developer-id$/;"	m
XCEXPORT_METHOD	contrib/mac/frameworkapp/Makefile	/^XCEXPORT_METHOD ?= development$/;"	m
XPCService	contrib/mac/frameworkapp/ExecSandbox/Info.plist	/^	<key>XPCService<\/key>$/;"	k
XSTR	src/interpreter-stacktrace.c	/^#define XSTR(/;"	d	file:
XSTR	src/signals-mach.c	/^#define XSTR(/;"	d	file:
XSTR	src/support/ENTRY.amd64.h	/^#define XSTR(/;"	d
XSTR	src/support/ENTRY.i387.h	/^#define XSTR(/;"	d
XX	src/uv_constants.h	/^#define XX(/;"	d
Y	src/jitlayers.cpp	/^static RegisterPass<JuliaPipeline<2>> Y("julia", "Runs the entire julia pipeline (at -O2)", fals/;"	v	typeref:typename:RegisterPass<JuliaPipeline<2>>	file:
Y	stdlib/Statistics/test/runtests.jl	/^Y = [6.0  2.0;$/;"	v
Y	test/core.jl	/^    Y(::Type{X1474{A,B}}) where {A,B} = 1$/;"	f
Y	test/core.jl	/^    Y(::Type{X1474{A}}) where {A} = 2$/;"	f
Y	test/core.jl	/^    Y(::Type{X1474}) = 3$/;"	f
Y	test/subarray.jl	/^Y = 4:-1:1$/;"	v
Y	test/syntax.jl	/^    struct Y$/;"	f
YEAR	contrib/windows/build-installer.nsi	/^!define \/date YEAR "%Y"$/;"	d
YY	src/uv_constants.h	/^#define YY(/;"	d
Yc	test/core.jl	/^Yc(f) = (h->f(x->h(h)(x)))(h->f(x->h(h)(x)))$/;"	f
Z	src/jitlayers.cpp	/^static RegisterPass<JuliaPipeline<3>> Z("juliaO3", "Runs the entire julia pipeline (at -O3)", fa/;"	v	typeref:typename:RegisterPass<JuliaPipeline<3>>	file:
Z	test/show.jl	/^Z = Array{Float64}(undef,0,0)$/;"	v
Z14477	test/core.jl	/^    Z14477() = new(new())$/;"	f
Z14477	test/core.jl	/^struct Z14477$/;"	f
Z26163	test/arrayops.jl	/^struct Z26163 <: AbstractArray{Int,0}; end$/;"	f
Z4681	test/core.jl	/^    Z4681() = new(C_NULL)$/;"	f
Z4681	test/core.jl	/^mutable struct Z4681$/;"	f
ZERO	base/gmp.jl	/^const ZERO = BigInt()$/;"	v
ZERO32_TAG	stdlib/Serialization/src/Serialization.jl	/^const ZERO32_TAG = Int32(NTAGS-(2*n_int_literals-1))$/;"	v
ZERO64_TAG	stdlib/Serialization/src/Serialization.jl	/^const ZERO64_TAG = Int64(NTAGS-(n_int_literals-1))$/;"	v
ZOMPLEX	stdlib/SuiteSparse/src/cholmod_h.jl	/^const ZOMPLEX = Int32(3)       # a complex matrix (MATLAB compatible)$/;"	v
ZSBzaG9ydCB2ZWhlbWVuY2Ugb2YgYW55IGNhcm5hbCBwbGVhc3VyZS4	stdlib/Base64/test/runtests.jl	/^ZSBzaG9ydCB2ZWhlbWVuY2Ugb2YgYW55IGNhcm5hbCBwbGVhc3VyZS4="""$/;"	v
Zip	base/iterators.jl	/^struct Zip{Is<:Tuple}$/;"	f
[API reference](@id stdlib-dates-api)	stdlib/Dates/docs/src/index.md	/^# [API reference](@id stdlib-dates-api)$/;"	c
[Abstract Arrays](@id man-interface-array)	doc/src/manual/interfaces.md	/^## [Abstract Arrays](@id man-interface-array)$/;"	s
[Anonymous Functions](@id man-anonymous-functions)	doc/src/manual/functions.md	/^## [Anonymous Functions](@id man-anonymous-functions)$/;"	s
[Arrays with custom indices](@id man-custom-indices)	doc/src/devdocs/offset-arrays.md	/^# [Arrays with custom indices](@id man-custom-indices)$/;"	c
[Arrays](@id lib-arrays)	doc/src/base/arrays.md	/^# [Arrays](@id lib-arrays)$/;"	c
[Asynchronous IO and concurrent synchronous writes](@id faq-async-io)	doc/src/manual/faq.md	/^## [Asynchronous IO and concurrent synchronous writes](@id faq-async-io)$/;"	s
[Automatic Type Conversion](@id automatic-type-conversion)	doc/src/manual/calling-c-and-fortran-code.md	/^### [Automatic Type Conversion](@id automatic-type-conversion)$/;"	S
[BLAS Character Arguments](@id stdlib-blas-chars)	stdlib/LinearAlgebra/docs/src/index.md	/^### [BLAS Character Arguments](@id stdlib-blas-chars)$/;"	S
[Bits Types](@id man-bits-types)	doc/src/manual/calling-c-and-fortran-code.md	/^### [Bits Types](@id man-bits-types)$/;"	S
[Byte Array Literals](@id man-byte-array-literals)	doc/src/manual/strings.md	/^## [Byte Array Literals](@id man-byte-array-literals)$/;"	s
[Characters](@id man-characters)	doc/src/manual/strings.md	/^## [Characters](@id man-characters)$/;"	s
[Cluster Cookie](@id man-cluster-cookie)	doc/src/manual/parallel-computing.md	/^### [Cluster Cookie](@id man-cluster-cookie)$/;"	S
[Code Availability and Loading Packages](@id code-availability)	doc/src/manual/parallel-computing.md	/^## [Code Availability and Loading Packages](@id code-availability)$/;"	s
[Compound Expressions](@id man-compound-expressions)	doc/src/manual/control-flow.md	/^## [Compound Expressions](@id man-compound-expressions)$/;"	s
[Compressed Sparse Column (CSC) Sparse Matrix Storage](@id man-csc)	stdlib/SparseArrays/docs/src/index.md	/^## [Compressed Sparse Column (CSC) Sparse Matrix Storage](@id man-csc)$/;"	s
[Concatenation](@id man-concatenation)	doc/src/manual/strings.md	/^## [Concatenation](@id man-concatenation)$/;"	s
[Conditional Evaluation](@id man-conditional-evaluation)	doc/src/manual/control-flow.md	/^## [Conditional Evaluation](@id man-conditional-evaluation)$/;"	s
[Constants](@id lib-constants)	doc/src/base/constants.md	/^# [Constants](@id lib-constants)$/;"	c
[Constructors](@id man-constructors)	doc/src/manual/constructors.md	/^# [Constructors](@id man-constructors)$/;"	c
[Conversion and Promotion](@id conversion-and-promotion)	doc/src/manual/conversion-and-promotion.md	/^# [Conversion and Promotion](@id conversion-and-promotion)$/;"	c
[Custom pretty-printing](@id man-custom-pretty-printing)	doc/src/manual/types.md	/^## [Custom pretty-printing](@id man-custom-pretty-printing)$/;"	s
[Customizing broadcasting](@id man-interfaces-broadcasting)	doc/src/manual/interfaces.md	/^## [Customizing broadcasting](@id man-interfaces-broadcasting)$/;"	s
[Dot Syntax for Vectorizing Functions](@id man-vectorized)	doc/src/manual/functions.md	/^## [Dot Syntax for Vectorizing Functions](@id man-vectorized)$/;"	s
[Extending broadcast with custom implementations](@id extending-in-place-broadcast)	doc/src/manual/interfaces.md	/^### [Extending broadcast with custom implementations](@id extending-in-place-broadcast)$/;"	S
[Extending in-place broadcasting](@id extending-in-place-broadcast)	doc/src/manual/interfaces.md	/^### [Extending in-place broadcasting](@id extending-in-place-broadcast)$/;"	S
[File Events](@id lib-filewatching)	stdlib/FileWatching/docs/src/index.md	/^# [File Events](@id lib-filewatching)$/;"	c
[Functions](@id man-functions)	doc/src/manual/functions.md	/^# [Functions](@id man-functions)$/;"	c
[Getting Started](@id man-getting-started)	doc/src/manual/getting-started.md	/^# [Getting Started](@id man-getting-started)$/;"	c
[How does "null", "nothingness" or "missingness" work in Julia?](@id faq-nothing)	doc/src/manual/faq.md	/^### [How does "null", "nothingness" or "missingness" work in Julia?](@id faq-nothing)$/;"	S
[Indexing](@id man-array-indexing)	doc/src/manual/arrays.md	/^## [Indexing](@id man-array-indexing)$/;"	s
[Interpolation](@id command-interpolation)	doc/src/manual/running-external-programs.md	/^## [Interpolation](@id command-interpolation)$/;"	s
[Interpolation](@id string-interpolation)	doc/src/manual/strings.md	/^## [Interpolation](@id string-interpolation)$/;"	s
[Introduction](@id man-introduction)	doc/src/index.md	/^### [Introduction](@id man-introduction)$/;"	S
[Iteration](@id lib-collections-iteration)	doc/src/base/collections.md	/^## [Iteration](@id lib-collections-iteration)$/;"	s
[Iteration](@id man-interface-iteration)	doc/src/manual/interfaces.md	/^## [Iteration](@id man-interface-iteration)$/;"	s
[JIT Code Generation](@id dev-codegen)	doc/src/devdocs/eval.md	/^## [JIT Code Generation](@id dev-codegen)$/;"	s
[Macro Expansion](@id dev-macro-expansion)	doc/src/devdocs/eval.md	/^## [Macro Expansion](@id dev-macro-expansion)$/;"	s
[Macro reference](@id dev-cartesian-reference)	doc/src/devdocs/cartesian.md	/^#### [Macro reference](@id dev-cartesian-reference)$/;"	t
[Macros](@id man-macros)	doc/src/manual/metaprogramming.md	/^## [Macros](@id man-macros)$/;"	s
[Mapping C Types to Julia](@id mapping-c-types-to-julia)	doc/src/manual/calling-c-and-fortran-code.md	/^## [Mapping C Types to Julia](@id mapping-c-types-to-julia)$/;"	s
[Mathematical Operators](@id math-ops)	doc/src/base/math.md	/^## [Mathematical Operators](@id math-ops)$/;"	s
[Matrix factorizations](@id man-linalg-factorizations)	stdlib/LinearAlgebra/docs/src/index.md	/^## [Matrix factorizations](@id man-linalg-factorizations)$/;"	s
[Method Ambiguities](@id man-ambiguities)	doc/src/manual/methods.md	/^## [Method Ambiguities](@id man-ambiguities)$/;"	s
[Method design and the avoidance of ambiguities](@id man-method-design-ambiguities)	doc/src/manual/methods.md	/^## [Method design and the avoidance of ambiguities](@id man-method-design-ambiguities)$/;"	s
[Missing Values](@id missing)	doc/src/manual/missing.md	/^# [Missing Values](@id missing)$/;"	c
[Modules](@id modules)	doc/src/manual/modules.md	/^# [Modules](@id modules)$/;"	c
[Multi-Threading (Experimental)](@id man-multithreading)	doc/src/manual/parallel-computing.md	/^# [Multi-Threading (Experimental)](@id man-multithreading)$/;"	c
[Multi-Threading](@id lib-multithreading)	doc/src/base/multi-threading.md	/^# [Multi-Threading](@id lib-multithreading)$/;"	c
[Multi-dimensional Arrays](@id man-multi-dim-arrays)	doc/src/manual/arrays.md	/^# [Multi-dimensional Arrays](@id man-multi-dim-arrays)$/;"	c
[Multplication Order](@id stdlib-blas-side)	stdlib/LinearAlgebra/docs/src/index.md	/^#### [Multplication Order](@id stdlib-blas-side)$/;"	t
[Non-Standard String Literals](@id non-standard-string-literals)	doc/src/manual/strings.md	/^## [Non-Standard String Literals](@id non-standard-string-literals)$/;"	s
[Numbers](@id lib-numbers)	doc/src/base/numbers.md	/^# [Numbers](@id lib-numbers)$/;"	c
[Numeric Literal Coefficients](@id man-numeric-literal-coefficients)	doc/src/manual/integers-and-floating-point-numbers.md	/^## [Numeric Literal Coefficients](@id man-numeric-literal-coefficients)$/;"	s
[Orthogonalize your design](@id man-methods-orthogonalize)	doc/src/manual/methods.md	/^### [Orthogonalize your design](@id man-methods-orthogonalize)$/;"	S
[Parsing](@id dev-parsing)	doc/src/devdocs/eval.md	/^## [Parsing](@id dev-parsing)$/;"	s
[Performance Annotations](@id man-performance-annotations)	doc/src/manual/performance-tips.md	/^## [Performance Annotations](@id man-performance-annotations)$/;"	s
[Performance Tips](@id man-performance-tips)	doc/src/manual/performance-tips.md	/^# [Performance Tips](@id man-performance-tips)$/;"	c
[Performance of captured variable](@id man-performance-captured)	doc/src/manual/performance-tips.md	/^## [Performance of captured variable](@id man-performance-captured)$/;"	s
[Processing events with AbstractLogger](@id AbstractLogger-interface)	stdlib/Logging/docs/src/index.md	/^### [Processing events with AbstractLogger](@id AbstractLogger-interface)$/;"	S
[Profiling](@id lib-profiling)	stdlib/Profile/docs/src/index.md	/^# [Profiling](@id lib-profiling)$/;"	c
[QuoteNode](@id man-quote-node)	doc/src/manual/metaprogramming.md	/^### [QuoteNode](@id man-quote-node)$/;"	S
[Raw String Literals](@id man-raw-string-literals)	doc/src/manual/strings.md	/^## [Raw String Literals](@id man-raw-string-literals)$/;"	s
[Repeated Evaluation: Loops](@id man-loops)	doc/src/manual/control-flow.md	/^## [Repeated Evaluation: Loops](@id man-loops)$/;"	s
[Scope constructs](@id man-scope-table)	doc/src/manual/variables-and-scoping.md	/^### [Scope constructs](@id man-scope-table)$/;"	S
[Scope of Variables](@id scope-of-variables)	doc/src/manual/variables-and-scoping.md	/^# [Scope of Variables](@id scope-of-variables)$/;"	c
[Scripting](@id man-scripting)	doc/src/manual/faq.md	/^## [Scripting](@id man-scripting)$/;"	s
[Separate kernel functions (aka, function barriers)](@id kernel-functions)	doc/src/manual/performance-tips.md	/^## [Separate kernel functions (aka, function barriers)](@id kernel-functions)$/;"	s
[Shared Arrays](@id man-shared-arrays)	doc/src/manual/parallel-computing.md	/^## [Shared Arrays](@id man-shared-arrays)$/;"	s
[Shell mode](@id man-shell-mode)	stdlib/REPL/docs/src/index.md	/^### [Shell mode](@id man-shell-mode)$/;"	S
[Singleton Types](@id man-singleton-types)	doc/src/manual/types.md	/^### [Singleton Types](@id man-singleton-types)$/;"	S
[Sparse Arrays](@id stdlib-sparse-arrays)	stdlib/SparseArrays/docs/src/index.md	/^# [Sparse Arrays](@id stdlib-sparse-arrays)$/;"	c
[Strided Arrays](@id man-interface-strided-arrays)	doc/src/manual/interfaces.md	/^## [Strided Arrays](@id man-interface-strided-arrays)$/;"	s
[Strings](@id lib-strings)	doc/src/base/strings.md	/^# [Strings](@id lib-strings)$/;"	c
[Strings](@id man-strings)	doc/src/manual/strings.md	/^# [Strings](@id man-strings)$/;"	c
[Supported index types](@id man-supported-index-types)	doc/src/manual/arrays.md	/^## [Supported index types](@id man-supported-index-types)$/;"	s
[System Image](@id dev-sysimg)	doc/src/devdocs/eval.md	/^## [System Image](@id dev-sysimg)$/;"	s
[Tasks (aka Coroutines)](@id man-tasks)	doc/src/manual/control-flow.md	/^## [Tasks (aka Coroutines)](@id man-tasks)$/;"	s
[Tools](@id tools)	doc/src/manual/performance-tips.md	/^## [Tools](@id tools)$/;"	s
[Transposition Operation](@id stdlib-blas-trans)	stdlib/LinearAlgebra/docs/src/index.md	/^#### [Transposition Operation](@id stdlib-blas-trans)$/;"	t
[Triangle Referencing](@id stdlib-blas-uplo)	stdlib/LinearAlgebra/docs/src/index.md	/^#### [Triangle Referencing](@id stdlib-blas-uplo)$/;"	t
[Type Inference](@id dev-type-inference)	doc/src/devdocs/eval.md	/^## [Type Inference](@id dev-type-inference)$/;"	s
[Types](@id man-types)	doc/src/manual/types.md	/^# [Types](@id man-types)$/;"	c
[Unit Diagonal](@id stdlib-blas-diag)	stdlib/LinearAlgebra/docs/src/index.md	/^#### [Unit Diagonal](@id stdlib-blas-diag)$/;"	t
[Vectorized "dot" operators](@id man-dot-operators)	doc/src/manual/mathematical-operations.md	/^## [Vectorized "dot" operators](@id man-dot-operators)$/;"	s
[Version Number Literals](@id man-version-number-literals)	doc/src/manual/strings.md	/^## [Version Number Literals](@id man-version-number-literals)$/;"	s
[Version/Environment info](@id dev-version-info)	doc/src/devdocs/backtraces.md	/^## [Version\/Environment info](@id dev-version-info)$/;"	s
[What does "type-stable" mean?](@id man-type-stability)	doc/src/manual/faq.md	/^### [What does "type-stable" mean?](@id man-type-stability)$/;"	S
[Why does Julia give a `DomainError` for certain seemingly-sensible operations?](@id faq-domain-errors)	doc/src/manual/faq.md	/^### [Why does Julia give a `DomainError` for certain seemingly-sensible operations?](@id faq-dom/;"	S
[Why does Julia use native machine integer arithmetic?](@id faq-integer-arithmetic)	doc/src/manual/faq.md	/^### [Why does Julia use native machine integer arithmetic?](@id faq-integer-arithmetic)$/;"	S
[Workflow Tips](@id man-workflow-tips)	doc/src/manual/workflow-tips.md	/^# [Workflow Tips](@id man-workflow-tips)$/;"	c
[Writing binary broadcasting rules](@id writing-binary-broadcasting-rules)	doc/src/manual/interfaces.md	/^### [Writing binary broadcasting rules](@id writing-binary-broadcasting-rules)$/;"	S
[[`@code_warntype`](@ref)](@id man-code-warntype)	doc/src/manual/performance-tips.md	/^## [[`@code_warntype`](@ref)](@id man-code-warntype)$/;"	s
\\	base/operators.jl	/^\\(x,y) = adjoint(adjoint(y)\/adjoint(x))$/;"	f
\\	stdlib/LinearAlgebra/src/adjtrans.jl	/^\\(u::AdjOrTransAbsVec, v::AdjOrTransAbsVec) = pinv(u) * v$/;"	f
\\	stdlib/LinearAlgebra/src/bidiag.jl	/^\\(A::Bidiagonal, B::AbstractVecOrMat) = ldiv!(A, copy(B))$/;"	f
\\	stdlib/LinearAlgebra/src/bidiag.jl	/^\\(adjA::Adjoint{<:Any,<:Bidiagonal}, B::AbstractVecOrMat) = ldiv!(adjoint(adjA.parent), copy(B)/;"	f
\\	stdlib/LinearAlgebra/src/bidiag.jl	/^\\(transA::Transpose{<:Any,<:Bidiagonal}, B::AbstractVecOrMat) = ldiv!(transpose(transA.parent),/;"	f
\\	stdlib/LinearAlgebra/src/bidiag.jl	/^function \\(A::Bidiagonal{<:Number}, B::AbstractVecOrMat{<:Number})$/;"	f
\\	stdlib/LinearAlgebra/src/bidiag.jl	/^function \\(adjA::Adjoint{<:Number,<:Bidiagonal{<:Number}}, B::AbstractVecOrMat{<:Number})$/;"	f
\\	stdlib/LinearAlgebra/src/bidiag.jl	/^function \\(transA::Transpose{<:Number,<:Bidiagonal{<:Number}}, B::AbstractVecOrMat{<:Number})$/;"	f
\\	stdlib/LinearAlgebra/src/diagonal.jl	/^(\\)(A::Union{QR,QRCompactWY,QRPivoted}, B::Diagonal) =$/;"	f
\\	stdlib/LinearAlgebra/src/diagonal.jl	/^(\\)(D::Diagonal, A::AbstractMatrix) =$/;"	f
\\	stdlib/LinearAlgebra/src/diagonal.jl	/^(\\)(D::Diagonal, b::AbstractVector) = D.diag .\\ b$/;"	f
\\	stdlib/LinearAlgebra/src/diagonal.jl	/^(\\)(Da::Diagonal, Db::Diagonal) = Diagonal(Da.diag .\\ Db.diag)$/;"	f
\\	stdlib/LinearAlgebra/src/diagonal.jl	/^(\\)(F::Factorization, D::Diagonal) =$/;"	f
\\	stdlib/LinearAlgebra/src/diagonal.jl	/^\\(adjF::Adjoint{<:Any,<:Factorization}, D::Diagonal) =$/;"	f
\\	stdlib/LinearAlgebra/src/factorization.jl	/^\\(F::Transpose{<:Any,<:Factorization{<:Real}}, B::AbstractVecOrMat) = adjoint(F.parent) \\ B$/;"	f
\\	stdlib/LinearAlgebra/src/factorization.jl	/^\\(F::Transpose{<:Any,<:Factorization}, B::AbstractVecOrMat) = conj.(adjoint(F.parent) \\ conj.(/;"	f
\\	stdlib/LinearAlgebra/src/factorization.jl	/^function \\(F::Factorization, B::AbstractVecOrMat)$/;"	f
\\	stdlib/LinearAlgebra/src/factorization.jl	/^function \\(adjF::Adjoint{<:Any,<:Factorization}, B::AbstractVecOrMat)$/;"	f
\\	stdlib/LinearAlgebra/src/generic.jl	/^(\\)(a::AbstractVector, b::AbstractArray) = pinv(a) * b$/;"	f
\\	stdlib/LinearAlgebra/src/lu.jl	/^\\(A::Adjoint{<:Any,<:LU}, B::Adjoint{<:Any,<:StridedVecOrMat}) = A \\ copy(B)$/;"	f
\\	stdlib/LinearAlgebra/src/lu.jl	/^\\(A::Adjoint{T,<:LU{T,<:StridedMatrix}}, B::Adjoint{T,<:StridedVecOrMat{T}}) where {T<:BlasComp/;"	f
\\	stdlib/LinearAlgebra/src/lu.jl	/^\\(A::Transpose{<:Any,<:LU}, B::Transpose{<:Any,<:StridedVecOrMat}) = A \\ copy(B)$/;"	f
\\	stdlib/LinearAlgebra/src/lu.jl	/^\\(A::Transpose{T,<:LU{T,<:StridedMatrix}}, B::Transpose{T,<:StridedVecOrMat{T}}) where {T<:Blas/;"	f
\\	stdlib/LinearAlgebra/src/symmetric.jl	/^\\(A::HermOrSym{<:Any,<:StridedMatrix}, B::AbstractMatrix) = \\(lu(A), B)$/;"	f
\\	stdlib/LinearAlgebra/src/symmetric.jl	/^\\(A::HermOrSym{<:Any,<:StridedMatrix}, B::AbstractVector) = \\(factorize(A), B)$/;"	f
\\	stdlib/LinearAlgebra/src/triangular.jl	/^        (\\)(x::Number, A::$t) = $t(x\\A.data)$/;"	f
\\	stdlib/LinearAlgebra/src/triangular.jl	/^        function \\(A::Union{UnitUpperTriangular,UnitLowerTriangular}, B::$mat)$/;"	f
\\	stdlib/LinearAlgebra/src/triangular.jl	/^        function \\(A::Union{UpperTriangular,LowerTriangular}, B::$mat)$/;"	f
\\	stdlib/LinearAlgebra/src/triangular.jl	/^        function \\(adjA::Adjoint{<:Any,<:Union{UnitUpperTriangular,UnitLowerTriangular}}, B::$m/;"	f
\\	stdlib/LinearAlgebra/src/triangular.jl	/^        function \\(adjA::Adjoint{<:Any,<:Union{UpperTriangular,LowerTriangular}}, B::$mat)$/;"	f
\\	stdlib/LinearAlgebra/src/triangular.jl	/^        function \\(transA::Transpose{<:Any,<:Union{UnitUpperTriangular,UnitLowerTriangular}}, B/;"	f
\\	stdlib/LinearAlgebra/src/triangular.jl	/^        function \\(transA::Transpose{<:Any,<:Union{UpperTriangular,LowerTriangular}}, B::$mat)$/;"	f
\\	stdlib/LinearAlgebra/src/tridiag.jl	/^(\\)(T::SymTridiagonal, B::StridedVecOrMat) = ldlt(T)\\B$/;"	f
\\	stdlib/LinearAlgebra/src/tridiag.jl	/^\\(A::Adjoint{<:Any,<:Tridiagonal}, B::Adjoint{<:Any,<:StridedVecOrMat}) = copy(A) \\ copy(B)$/;"	f
\\	stdlib/LinearAlgebra/src/uniformscaling.jl	/^\\(A::AbstractMatrix, J::UniformScaling) = rmul!(inv(A), J.λ)$/;"	f
\\	stdlib/LinearAlgebra/src/uniformscaling.jl	/^\\(A::Union{Bidiagonal{T},AbstractTriangular{T}}, J::UniformScaling) where {T<:Number} =$/;"	f
\\	stdlib/LinearAlgebra/src/uniformscaling.jl	/^\\(J1::UniformScaling, J2::UniformScaling) = J1.λ == 0 ? throw(SingularException(1)) : UniformS/;"	f
\\	stdlib/LinearAlgebra/src/uniformscaling.jl	/^\\(J::UniformScaling, A::AbstractVecOrMat) = J.λ == 0 ? throw(SingularException(1)) : J.λ\\A$/;"	f
\\	stdlib/LinearAlgebra/src/uniformscaling.jl	/^\\(x::Number, J::UniformScaling) = UniformScaling(x\\J.λ)$/;"	f
\\	stdlib/SparseArrays/src/linalg.jl	/^        function \\(xformA::($xformtype){<:Any,<:AbstractSparseMatrixCSC}, B::AbstractVecOrMat)$/;"	f
\\	stdlib/SparseArrays/src/linalg.jl	/^(\\)(L::TriangularSparse, B::AbstractSparseMatrixCSC) = ldiv!(L, Array(B))$/;"	f
\\	stdlib/SparseArrays/src/linalg.jl	/^\\(A::Transpose{<:Complex,<:Hermitian{<:Complex,<:AbstractSparseMatrixCSC}}, B::Vector) = copy(A/;"	f
\\	stdlib/SparseArrays/src/linalg.jl	/^\\(A::Transpose{<:Number,<:Symmetric{<:Number,<:AbstractSparseMatrixCSC}}, B::Vector) = A.parent/;"	f
\\	stdlib/SparseArrays/src/linalg.jl	/^\\(A::Transpose{<:Real,<:Hermitian{<:Real,<:AbstractSparseMatrixCSC}}, B::Vector) = A.parent \\ /;"	f
\\	stdlib/SparseArrays/src/linalg.jl	/^function \\(A::AbstractSparseMatrixCSC, B::AbstractVecOrMat)$/;"	f
\\	stdlib/SparseArrays/src/sparsevector.jl	/^        @eval function \\(xformA::$xformtritype, b::SparseVector)$/;"	f
\\	stdlib/SparseArrays/src/sparsevector.jl	/^        @eval function \\(xformA::$xformtritype, b::SparseVector{Tb}) where {TA<:Number,Tb<:Numb/;"	f
\\	stdlib/SuiteSparse/src/cholmod.jl	/^(\\)(L::Factor, B::Sparse) = spsolve(CHOLMOD_A, L, B)$/;"	f
\\	stdlib/SuiteSparse/src/cholmod.jl	/^(\\)(L::Factor, B::SparseVecOrMat) = sparse(spsolve(CHOLMOD_A, L, Sparse(B, 0)))$/;"	f
\\	stdlib/SuiteSparse/src/cholmod.jl	/^(\\)(L::Factor{T}, B::Dense{T}) where {T<:VTypes} = solve(CHOLMOD_A, L, B)$/;"	f
\\	stdlib/SuiteSparse/src/cholmod.jl	/^(\\)(L::Factor{T}, B::Matrix{Complex{T}}) where {T<:Float64} = complex.(L\\real(B), L\\imag(B))$/;"	f
\\	stdlib/SuiteSparse/src/cholmod.jl	/^(\\)(L::Factor{T}, B::StridedMatrix) where {T<:VTypes} = Matrix(L\\Dense{T}(B))$/;"	f
\\	stdlib/SuiteSparse/src/cholmod.jl	/^(\\)(L::Factor{T}, B::Vector{Complex{T}}) where {T<:Float64} = complex.(L\\real(B), L\\imag(B))$/;"	f
\\	stdlib/SuiteSparse/src/cholmod.jl	/^(\\)(L::Factor{T}, b::StridedVector) where {T<:VTypes} = Vector(L\\Dense{T}(b))$/;"	f
\\	stdlib/SuiteSparse/src/cholmod.jl	/^\\(adjL::Adjoint{<:Any,<:FactorComponent}, B::Union{VecOrMat,SparseVecOrMat}) = (L = adjL.parent/;"	f
\\	stdlib/SuiteSparse/src/cholmod.jl	/^\\(adjL::Adjoint{<:Any,<:Factor}, B::Dense) = (L = adjL.parent; solve(CHOLMOD_A, L, B))$/;"	f
\\	stdlib/SuiteSparse/src/cholmod.jl	/^\\(adjL::Adjoint{<:Any,<:Factor}, B::Sparse) = (L = adjL.parent; spsolve(CHOLMOD_A, L, B))$/;"	f
\\	stdlib/SuiteSparse/src/cholmod.jl	/^\\(adjL::Adjoint{<:Any,<:Factor}, B::SparseVecOrMat) = (L = adjL.parent; \\(adjoint(L), Sparse(B/;"	f
\\	stdlib/SuiteSparse/src/cholmod.jl	/^function \\(A::RealHermSymComplexHermF64SSL, B::StridedVecOrMat)$/;"	f
\\	stdlib/SuiteSparse/src/cholmod.jl	/^function \\(adjA::Adjoint{<:Any,<:RealHermSymComplexHermF64SSL}, B::StridedVecOrMat)$/;"	f
\\	stdlib/SuiteSparse/src/cholmod.jl	/^function \\(adjL::Adjoint{<:Any,<:Factor}, B::StridedMatrix)$/;"	f
\\	stdlib/SuiteSparse/src/cholmod.jl	/^function \\(adjL::Adjoint{<:Any,<:Factor}, b::StridedVector)$/;"	f
\\	stdlib/SuiteSparse/src/spqr.jl	/^(\\)(F::QRSparse, B::StridedVecOrMat) = F\\convert(AbstractArray{eltype(F)}, B)$/;"	f
\\	stdlib/SuiteSparse/src/spqr.jl	/^(\\)(F::QRSparse{T}, B::StridedVecOrMat{T}) where {T} = _ldiv_basic(F, B)$/;"	f
\\\\kappa_S	stdlib/LinearAlgebra/src/generic.jl	/^\\\\kappa_S(M, p) = \\\\left\\\\Vert \\\\left\\\\vert M \\\\right\\\\vert \\\\left\\\\vert M^{-1/;"	f
\\\\kappa_S	stdlib/LinearAlgebra/src/generic.jl	/^\\\\kappa_S(M, x, p) = \\\\left\\\\Vert \\\\left\\\\vert M \\\\right\\\\vert \\\\left\\\\vert M^/;"	f
\\\\|A\\\\|_1	stdlib/LinearAlgebra/src/generic.jl	/^\\\\|A\\\\|_1 = \\\\max_{1 ≤ j ≤ n} \\\\sum_{i=1}^m | a_{ij} |$/;"	v
\\\\|A\\\\|_\\\\infty	stdlib/LinearAlgebra/src/generic.jl	/^\\\\|A\\\\|_\\\\infty = \\\\max_{1 ≤ i ≤ m} \\\\sum _{j=1}^n | a_{ij} |$/;"	v
\\\\|A\\\\|_p	stdlib/LinearAlgebra/src/generic.jl	/^\\\\|A\\\\|_p = \\\\left( \\\\sum_{i=1}^n | a_i | ^p \\\\right)^{1\/p}$/;"	v
\x21	base/bool.jl	/^function !(x::Bool)$/;"	f
\x21	base/float.jl	/^!=(x::Float32, y::Float32) = ne_float(x, y)$/;"	v
\x21	base/float.jl	/^!=(x::Float64, y::Float64) = ne_float(x, y)$/;"	v
\x21	base/operators.jl	/^!(f::Function) = (x...)->!f(x...)$/;"	f
\x21	base/operators.jl	/^!=(x) = Fix2(!=, x)$/;"	v
\x21	base/operators.jl	/^!=(x, y) = !(x == y)$/;"	v
\x210	test/llvmpasses/alloc-opt.jl	/^!0 = !{!1, !1, i64 0}$/;"	v
\x211	test/llvmpasses/alloc-opt.jl	/^!1 = !{!"jtbaa_tag", !2, i64 0}$/;"	v
\x212	test/llvmpasses/alloc-opt.jl	/^!2 = !{!"jtbaa_data", !3, i64 0}$/;"	v
\x213	test/llvmpasses/alloc-opt.jl	/^!3 = !{!"jtbaa"}$/;"	v
\x214	test/llvmpasses/alloc-opt.jl	/^!4 = !{!5, !5, i64 0}$/;"	v
\x215	test/llvmpasses/alloc-opt.jl	/^!5 = !{!"jtbaa_mutab", !6, i64 0}$/;"	v
\x216	test/llvmpasses/alloc-opt.jl	/^!6 = !{!"jtbaa_value", !2, i64 0}$/;"	v
\x21=	base/float.jl	/^!=(x::Float32, y::Float32) = ne_float(x, y)$/;"	f
\x21=	base/float.jl	/^!=(x::Float64, y::Float64) = ne_float(x, y)$/;"	f
\x21=	base/operators.jl	/^!=(x) = Fix2(!=, x)$/;"	f
\x21=	base/operators.jl	/^!=(x, y) = !(x == y)$/;"	f
\x21=	base/operators.jl	/^!==(@nospecialize(x), @nospecialize(y)) = !(x === y)$/;"	v
\x21=	base/operators.jl	/^function !=(T::Type, S::Type)$/;"	f
\x21==	base/operators.jl	/^!==(@nospecialize(x), @nospecialize(y)) = !(x === y)$/;"	f
\x21success	test/cmdlineargs.jl	/^    @test !success(`$exename -e "foo (x::Int) = x * x" --depwarn=error`)$/;"	f
^	base/bool.jl	/^^(x::Bool, y::Bool) = x | !y$/;"	f
^	base/bool.jl	/^^(x::Integer, y::Bool) = ifelse(y, x, one(x))$/;"	f
^	base/compiler/ssair/show.jl	/^^(s::String, i::Int) = Base.:^(s, i)$/;"	f
^	base/complex.jl	/^^(z::Complex, n::Bool) = n ? z : one(z)$/;"	f
^	base/complex.jl	/^^(z::Complex, n::Integer) = z^Complex(n)$/;"	f
^	base/complex.jl	/^^(z::Complex{<:AbstractFloat}, n::Bool) = n ? z : one(z)  # to resolve ambiguity$/;"	f
^	base/complex.jl	/^^(z::Complex{<:AbstractFloat}, n::Integer) =$/;"	f
^	base/complex.jl	/^^(z::Complex{<:Integer}, n::Bool) = n ? z : one(z)        # to resolve ambiguity$/;"	f
^	base/complex.jl	/^^(z::Complex{<:Integer}, n::Integer) = power_by_squaring(z,n) # DomainError for n<0$/;"	f
^	base/complex.jl	/^function ^(z::Complex{T}, p::S) where {T<:Real,S<:Real}$/;"	f
^	base/complex.jl	/^function ^(z::T, p::Complex{S}) where {T<:Real,S<:Real}$/;"	f
^	base/gmp.jl	/^^(x::BigInt , y::BigInt ) = bigint_pow(x, y)$/;"	f
^	base/gmp.jl	/^^(x::BigInt , y::Bool   ) = y ? x : one(x)$/;"	f
^	base/gmp.jl	/^^(x::BigInt , y::Integer) = bigint_pow(x, y)$/;"	f
^	base/gmp.jl	/^^(x::BigInt, y::Culong) = MPZ.pow_ui(x, y)$/;"	f
^	base/gmp.jl	/^^(x::Bool   , y::BigInt ) = Base.power_by_squaring(x, y)$/;"	f
^	base/gmp.jl	/^^(x::Integer, y::BigInt ) = bigint_pow(BigInt(x), y)$/;"	f
^	base/intfuncs.jl	/^^(x::Number, p::Integer)  = power_by_squaring(x,p)$/;"	f
^	base/intfuncs.jl	/^^(x::T, p::T) where {T<:Integer} = power_by_squaring(x,p)$/;"	f
^	base/math.jl	/^@inline ^(x::Float16, y::Integer) = Float16(Float32(x) ^ y)$/;"	f
^	base/math.jl	/^@inline ^(x::Float32, y::Integer) = ccall("llvm.pow.f32", llvmcall, Float32, (Float32, Float32),/;"	f
^	base/math.jl	/^@inline ^(x::Float64, y::Integer) = ccall("llvm.pow.f64", llvmcall, Float64, (Float64, Float64),/;"	f
^	base/math.jl	/^@inline function ^(x::Float32, y::Float32)$/;"	f
^	base/math.jl	/^@inline function ^(x::Float64, y::Float64)$/;"	f
^	base/missing.jl	/^(^)(::Missing, ::Integer) = missing$/;"	f
^	base/mpfr.jl	/^^(x::BigFloat, y::Integer)  = typemin(Clong)  <= y <= typemax(Clong)  ? x^Clong(y)  : x^BigInt(y/;"	f
^	base/mpfr.jl	/^^(x::BigFloat, y::Unsigned) = typemin(Culong) <= y <= typemax(Culong) ? x^Culong(y) : x^BigInt(y/;"	f
^	base/mpfr.jl	/^function ^(x::BigFloat, y::BigFloat)$/;"	f
^	base/mpfr.jl	/^function ^(x::BigFloat, y::BigInt)$/;"	f
^	base/mpfr.jl	/^function ^(x::BigFloat, y::ClongMax)$/;"	f
^	base/mpfr.jl	/^function ^(x::BigFloat, y::CulongMax)$/;"	f
^	base/promotion.jl	/^(^)(x::T, y::T) where {T<:Number} = no_op_err("^", T)$/;"	f
^	base/promotion.jl	/^^(x::Number, y::Number) = ^(promote(x,y)...)$/;"	f
^	base/rational.jl	/^^(x::Number, y::Rational) = x^(y.num\/y.den)$/;"	f
^	base/rational.jl	/^^(x::T, y::Rational) where {T<:AbstractFloat} = x^convert(T,y)$/;"	f
^	base/rational.jl	/^^(z::Complex{<:Rational}, n::Bool) = n ? z : one(z) # to resolve ambiguity$/;"	f
^	base/rational.jl	/^^(z::Complex{T}, p::Rational) where {T<:Real} = z^convert(typeof(one(T)^p), p)$/;"	f
^	base/rational.jl	/^function ^(x::Rational, n::Integer)$/;"	f
^	base/rational.jl	/^function ^(z::Complex{<:Rational}, n::Integer)$/;"	f
^	base/regex.jl	/^^(r::Regex, i::Integer) = Regex(string("(?:", r.pattern, "){$i}"), r.compile_options, r.match_op/;"	f
^	base/strings/basic.jl	/^(^)(s::Union{AbstractString,AbstractChar}, r::Integer) = repeat(s, r)$/;"	f
^	stdlib/LinearAlgebra/src/dense.jl	/^(^)(A::AbstractMatrix, p::Integer) = p < 0 ? power_by_squaring(inv(A), -p) : power_by_squaring(A/;"	f
^	stdlib/LinearAlgebra/src/dense.jl	/^(^)(A::AbstractMatrix, p::Number) = exp(p*log(A))$/;"	f
^	stdlib/LinearAlgebra/src/symmetric.jl	/^^(A::Symmetric{<:Complex}, p::Integer) = sympow(A, p)$/;"	f
^	stdlib/LinearAlgebra/src/symmetric.jl	/^^(A::Symmetric{<:Real}, p::Integer) = sympow(A, p)$/;"	f
^	stdlib/LinearAlgebra/src/symmetric.jl	/^function ^(A::Hermitian, p::Integer)$/;"	f
^	stdlib/LinearAlgebra/src/symmetric.jl	/^function ^(A::Hermitian{T}, p::Real) where T$/;"	f
^	stdlib/LinearAlgebra/src/symmetric.jl	/^function ^(A::Symmetric{<:Complex}, p::Real)$/;"	f
^	stdlib/LinearAlgebra/src/symmetric.jl	/^function ^(A::Symmetric{<:Real}, p::Real)$/;"	f
^	test/numbers.jl	/^    ^(t::PR20889, b) = t.x + b$/;"	f
^	test/numbers.jl	/^^(::PR20530, p::Int) = 1$/;"	f
^	test/numbers.jl	/^^(t::PR20889, b) = t.x + b$/;"	f
^	test/numbers.jl	/^^(t::PR20889, b::Integer) = t.x + b$/;"	f
_0_test_ctor_syntax_	test/core.jl	/^    _0_test_ctor_syntax_(files::Vector{T},step) where {T<:AbstractString} = 0$/;"	f
_0_test_ctor_syntax_	test/core.jl	/^mutable struct _0_test_ctor_syntax_$/;"	f
_AA	test/core.jl	/^mutable struct _AA{T}; a::T; end$/;"	f
_ACEOF	deps/srccache/patchelf-0.9/configure	/^	 cat confdefs.h - <<_ACEOF >conftest.$ac_ext$/;"	h
_ACEOF	deps/srccache/patchelf-0.9/configure	/^      cat confdefs.h - <<_ACEOF >conftest.$ac_ext$/;"	h
_ACEOF	deps/srccache/patchelf-0.9/configure	/^   cat confdefs.h - <<_ACEOF >conftest.$ac_ext$/;"	h
_ACEOF	deps/srccache/patchelf-0.9/configure	/^  cat <<_ACEOF$/;"	h
_ACEOF	deps/srccache/patchelf-0.9/configure	/^  cat confdefs.h - <<_ACEOF >conftest.$ac_ext$/;"	h
_ACEOF	deps/srccache/patchelf-0.9/configure	/^cat >&5 <<_ACEOF$/;"	h
_ACEOF	deps/srccache/patchelf-0.9/configure	/^cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1$/;"	h
_ACEOF	deps/srccache/patchelf-0.9/configure	/^cat >>confdefs.h <<_ACEOF$/;"	h
_ACEOF	deps/srccache/patchelf-0.9/configure	/^cat >config.log <<_ACEOF$/;"	h
_ACEOF	deps/srccache/patchelf-0.9/configure	/^cat confdefs.h - <<_ACEOF >conftest.$ac_ext$/;"	h
_AC_AM_CONFIG_HEADER_HOOK	deps/srccache/patchelf-0.9/aclocal.m4	/^AC_DEFUN([_AC_AM_CONFIG_HEADER_HOOK],$/;"	m
_AC_COMPILER_EXEEXT	deps/srccache/patchelf-0.9/aclocal.m4	/^m4_define([_AC_COMPILER_EXEEXT],$/;"	d
_AM_AUTOCONF_VERSION	deps/srccache/patchelf-0.9/aclocal.m4	/^m4_define([_AM_AUTOCONF_VERSION], [])$/;"	d
_AM_DEPENDENCIES	deps/srccache/patchelf-0.9/aclocal.m4	/^AC_DEFUN([_AM_DEPENDENCIES],$/;"	m
_AM_IF_OPTION	deps/srccache/patchelf-0.9/aclocal.m4	/^AC_DEFUN([_AM_IF_OPTION],$/;"	m
_AM_MANGLE_OPTION	deps/srccache/patchelf-0.9/aclocal.m4	/^AC_DEFUN([_AM_MANGLE_OPTION],$/;"	m
_AM_OUTPUT_DEPENDENCY_COMMANDS	deps/srccache/patchelf-0.9/aclocal.m4	/^AC_DEFUN([_AM_OUTPUT_DEPENDENCY_COMMANDS],$/;"	m
_AM_PROG_CC_C_O	deps/srccache/patchelf-0.9/aclocal.m4	/^AC_DEFUN([_AM_PROG_CC_C_O],$/;"	m
_AM_PROG_TAR	deps/srccache/patchelf-0.9/aclocal.m4	/^AC_DEFUN([_AM_PROG_TAR],$/;"	m
_AM_SET_OPTION	deps/srccache/patchelf-0.9/aclocal.m4	/^AC_DEFUN([_AM_SET_OPTION],$/;"	m
_AM_SET_OPTIONS	deps/srccache/patchelf-0.9/aclocal.m4	/^AC_DEFUN([_AM_SET_OPTIONS],$/;"	m
_AM_SUBST_NOTMAKE	deps/srccache/patchelf-0.9/aclocal.m4	/^AC_DEFUN([_AM_SUBST_NOTMAKE])$/;"	m
_ASBOX	deps/srccache/patchelf-0.9/configure	/^  sed 'h;s\/.\/-\/g;s\/^...\/## \/;s\/...$\/ ##\/;p;x;p;x' <<_ASBOX$/;"	h
_ASEOF	deps/srccache/patchelf-0.9/configure	/^cat >$CONFIG_STATUS <<_ASEOF || as_write_fail=1$/;"	h
_ASUNAME	deps/srccache/patchelf-0.9/configure	/^cat <<_ASUNAME$/;"	h
_ATAN_PI_LO	test/math.jl	/^        _ATAN_PI_LO(::Type{Float32}) = -8.7422776573f-08$/;"	f
_ATAN_PI_LO	test/math.jl	/^        _ATAN_PI_LO(::Type{Float64}) = 1.2246467991473531772E-16$/;"	f
_Agen	test/subarray.jl	/^_Agen(A, i1) = [A[j1] for j1 in i1]$/;"	f
_Agen	test/subarray.jl	/^_Agen(A, i1, i2) = [A[j1,j2] for j1 in i1, j2 in i2]$/;"	f
_Agen	test/subarray.jl	/^_Agen(A, i1, i2, i3) = [A[j1,j2,j3] for j1 in i1, j2 in i2, j3 in i3]$/;"	f
_Agen	test/subarray.jl	/^_Agen(A, i1, i2, i3, i4) = [A[j1,j2,j3,j4] for j1 in i1, j2 in i2, j3 in i3, j4 in i4]$/;"	f
_Agen	test/subarray.jl	/^_Agen(A, i1, i2, i3, i4, i5) = [A[j1,j2,j3,j4,j5] for j1 in i1, j2 in i2, j3 in i3, j4 in i4, j5/;"	f
_Agen	test/subarray.jl	/^_Agen(A, i1, i2, i3, i4, i5, i6) = [A[j1,j2,j3,j4,j5,j6] for j1 in i1, j2 in i2, j3 in i3, j4 in/;"	f
_Annotated_DenseArrays	stdlib/SparseArrays/src/sparsevector.jl	/^const _Annotated_DenseArrays = Union{_Triangular_DenseArrays, _Symmetric_DenseArrays, _Hermitian/;"	v
_Annotated_SparseConcatArrays	stdlib/SparseArrays/src/sparsevector.jl	/^const _Annotated_SparseConcatArrays = Union{_Triangular_SparseConcatArrays, _Symmetric_SparseCon/;"	v
_Aq_ldiv_B!	stdlib/SuiteSparse/src/umfpack.jl	/^function _Aq_ldiv_B!(X::StridedVecOrMat, lu::UmfpackLU, B::StridedVecOrMat, transposeoptype)$/;"	f
_AqldivB_kernel!	stdlib/SuiteSparse/src/umfpack.jl	/^function _AqldivB_kernel!(X::StridedMatrix{Tb}, lu::UmfpackLU{Float64},$/;"	f
_AqldivB_kernel!	stdlib/SuiteSparse/src/umfpack.jl	/^function _AqldivB_kernel!(X::StridedMatrix{T}, lu::UmfpackLU{T},$/;"	f
_AqldivB_kernel!	stdlib/SuiteSparse/src/umfpack.jl	/^function _AqldivB_kernel!(x::StridedVector{Tb}, lu::UmfpackLU{Float64},$/;"	f
_AqldivB_kernel!	stdlib/SuiteSparse/src/umfpack.jl	/^function _AqldivB_kernel!(x::StridedVector{T}, lu::UmfpackLU{T},$/;"	f
_At_or_Ac_mul_B	stdlib/SparseArrays/src/sparsevector.jl	/^function _At_or_Ac_mul_B(tfun::Function, A::AbstractSparseMatrixCSC{TvA,TiA}, x::AbstractSparseV/;"	f
_At_or_Ac_mul_B!	stdlib/SparseArrays/src/sparsevector.jl	/^function _At_or_Ac_mul_B!(tfun::Function,$/;"	f
_COMPILER_CLANG_	src/support/platform.h	/^#define _COMPILER_CLANG_$/;"	d
_COMPILER_GCC_	src/support/platform.h	/^#define _COMPILER_GCC_$/;"	d
_COMPILER_INTEL_	src/support/platform.h	/^#define _COMPILER_INTEL_$/;"	d
_COMPILER_MICROSOFT_	src/support/platform.h	/^#define _COMPILER_MICROSOFT_$/;"	d
_COMPILER_MINGW_	src/support/platform.h	/^#define _COMPILER_MINGW_$/;"	d
_CPU_AARCH64_	src/support/platform.h	/^#define _CPU_AARCH64_$/;"	d
_CPU_ARM_	src/support/platform.h	/^#define _CPU_ARM_$/;"	d
_CPU_PPC64_	src/support/platform.h	/^#define _CPU_PPC64_$/;"	d
_CPU_PPC_	src/support/platform.h	/^#define _CPU_PPC_$/;"	d
_CPU_WASM_	src/support/platform.h	/^#define _CPU_WASM_$/;"	d
_CPU_X86_	src/support/platform.h	/^#define _CPU_X86_$/;"	d
_CPU_X86_64_	src/support/platform.h	/^#define _CPU_X86_64_$/;"	d
_CaptureInCtor	test/core.jl	/^    function _CaptureInCtor(list_file::AbstractString="")$/;"	f
_CaptureInCtor	test/core.jl	/^mutable struct _CaptureInCtor$/;"	f
_DT	src/llvm-alloc-opt.cpp	/^    DominatorTree *_DT = nullptr;$/;"	m	struct:__anon0a1571000111::Optimizer	typeref:typename:DominatorTree *	file:
_DUMP_MODES	src/dump.c	/^typedef enum _DUMP_MODES {$/;"	g	file:
_DenseConcatGroup	stdlib/SparseArrays/src/sparsevector.jl	/^const _DenseConcatGroup = Union{Vector, Adjoint{<:Any,<:Vector}, Transpose{<:Any,<:Vector}, Matr/;"	v
_ELF_H	deps/srccache/patchelf-0.9/src/elf.h	/^#define	_ELF_H /;"	d
_FDWatcher	stdlib/FileWatching/src/FileWatching.jl	/^            function _FDWatcher(fd::RawFD, readable::Bool, writable::Bool)$/;"	f
_FDWatcher	stdlib/FileWatching/src/FileWatching.jl	/^        function _FDWatcher(fd::RawFD, readable::Bool, writable::Bool)$/;"	f
_FDWatcher	stdlib/FileWatching/src/FileWatching.jl	/^        function _FDWatcher(fd::WindowsRawSocket, readable::Bool, writable::Bool)$/;"	f
_FDWatcher	stdlib/FileWatching/src/FileWatching.jl	/^mutable struct _FDWatcher$/;"	f
_FPE_DENORMAL	src/signals-win.c	/^#define _FPE_DENORMAL /;"	d	file:
_FPE_EXPLICITGEN	src/signals-win.c	/^#define _FPE_EXPLICITGEN /;"	d	file:
_FPE_INEXACT	src/signals-win.c	/^#define _FPE_INEXACT /;"	d	file:
_FPE_INVALID	src/signals-win.c	/^#define _FPE_INVALID /;"	d	file:
_FPE_OVERFLOW	src/signals-win.c	/^#define _FPE_OVERFLOW /;"	d	file:
_FPE_SQRTNEG	src/signals-win.c	/^#define _FPE_SQRTNEG /;"	d	file:
_FPE_STACKOVERFLOW	src/signals-win.c	/^#define _FPE_STACKOVERFLOW /;"	d	file:
_FPE_STACKUNDERFLOW	src/signals-win.c	/^#define _FPE_STACKUNDERFLOW /;"	d	file:
_FPE_UNDERFLOW	src/signals-win.c	/^#define _FPE_UNDERFLOW /;"	d	file:
_FPE_UNEMULATED	src/signals-win.c	/^#define _FPE_UNEMULATED /;"	d	file:
_FPE_ZERODIVIDE	src/signals-win.c	/^#define _FPE_ZERODIVIDE /;"	d	file:
_GC_MARK_L_MAX	src/gc.h	/^    _GC_MARK_L_MAX$/;"	e	enum:__anoncf30557c0403
_GETOPT_H	src/getopt.h	/^#define _GETOPT_H$/;"	d
_GLOBAL_RNG	stdlib/Random/src/RNGs.jl	/^struct _GLOBAL_RNG <: AbstractRNG$/;"	f
_GNU_SOURCE	src/support/strtod.c	/^#define _GNU_SOURCE$/;"	d	file:
_JL_FORMAT_ATTR	src/julia.h	/^#define _JL_FORMAT_ATTR(/;"	d
_MHASH_SEED_	src/support/hashing.c	/^#define _MHASH_SEED_ /;"	d	file:
_NAMEDTUPLE_NAME	base/compiler/tfuncs.jl	/^const _NAMEDTUPLE_NAME = NamedTuple.body.body.name$/;"	v
_Nonnull	src/support/analyzer_annotations.h	/^#define _Nonnull$/;"	d
_NotifyObjectEmitted	src/debuginfo.cpp	/^    virtual void _NotifyObjectEmitted(const object::ObjectFile &obj,$/;"	f	class:JuliaJITEventListener	typeref:typename:void	file:
_ONE	base/gmp.jl	/^const _ONE = Limb[1]$/;"	v
_OS_DARWIN_	src/support/platform.h	/^#define _OS_DARWIN_$/;"	d
_OS_EMSCRIPTEN_	src/support/platform.h	/^#define _OS_EMSCRIPTEN_$/;"	d
_OS_FREEBSD_	src/support/platform.h	/^#define _OS_FREEBSD_$/;"	d
_OS_LINUX_	src/support/platform.h	/^#define _OS_LINUX_$/;"	d
_OS_WINDOWS_	src/support/platform.h	/^#define _OS_WINDOWS_$/;"	d
_P32	src/support/platform.h	/^#    define _P32$/;"	d
_P32	src/support/platform.h	/^#  define _P32$/;"	d
_P64	src/support/platform.h	/^#    define _P64$/;"	d
_P64	src/support/platform.h	/^#  define _P64$/;"	d
_PURE_BUILTINS	base/compiler/optimize.jl	/^const _PURE_BUILTINS = Any[tuple, svec, ===, typeof, nfields]$/;"	v
_PURE_OR_ERROR_BUILTINS	base/compiler/optimize.jl	/^const _PURE_OR_ERROR_BUILTINS = [$/;"	v
_REF_NAME	base/compiler/abstractinterpretation.jl	/^const _REF_NAME = Ref.body.name$/;"	v
_START_ENTRY	src/support/ENTRY.amd64.h	/^#define _START_ENTRY /;"	d
_START_ENTRY	src/support/ENTRY.i387.h	/^#define _START_ENTRY /;"	d
_Sampler	stdlib/Random/src/generation.jl	/^_Sampler(::Type{<:AbstractRNG}, t::Union{AbstractDict,AbstractSet}, ::Val{1}) =$/;"	f
_Sampler	stdlib/Random/src/generation.jl	/^_Sampler(RNG::Type{<:AbstractRNG}, t::Union{AbstractDict,AbstractSet}, n::Val{Inf}) =$/;"	f
_Set	base/set.jl	/^_Set(itr, ::HasEltype) = Set{eltype(itr)}(itr)$/;"	f
_Set	base/set.jl	/^function _Set(itr, ::EltypeUnknown)$/;"	f
_SparseArrays	stdlib/SparseArrays/src/sparsevector.jl	/^const _SparseArrays = Union{SparseVector, AbstractSparseMatrixCSC, Adjoint{<:Any,<:SparseVector}/;"	v
_SparseConcatArrays	stdlib/SparseArrays/src/sparsevector.jl	/^const _SparseConcatArrays = Union{_SpecialArrays, _SparseArrays}$/;"	v
_SparseConcatGroup	stdlib/SparseArrays/src/sparsevector.jl	/^const _SparseConcatGroup = Union{Vector, Adjoint{<:Any,<:Vector}, Transpose{<:Any,<:Vector}, Mat/;"	v
_SpecialArrays	stdlib/SparseArrays/src/sparsevector.jl	/^const _SpecialArrays = Union{Diagonal, Bidiagonal, Tridiagonal, SymTridiagonal}$/;"	v
_TIME_LOCALE	src/support/strptime.c	/^#define _TIME_LOCALE(/;"	d	file:
_TP	base/twiceprecision.jl	/^_TP(x) = TwicePrecision{Float64}(x)$/;"	f
_TP	base/twiceprecision.jl	/^_TP(x::Tuple{Any, Any}) = TwicePrecision{Float64}(x[1], x[2])$/;"	f
_TYPE_NAME	base/reflection.jl	/^const _TYPE_NAME = Type.body.name$/;"	v
_TZFILE_H_	src/support/tzfile.h	/^#define _TZFILE_H_$/;"	d
_Task	base/boot.jl	/^function _Task(@nospecialize(f), reserved_stack::Int, completion_future)$/;"	f
_TimeLocale	src/support/strptime.c	/^} _TimeLocale;$/;"	t	typeref:struct:__anon732973510108	file:
_UVError	base/libuv.jl	/^function _UVError(pfx::AbstractString, code::Integer)$/;"	f
_UVError	base/libuv.jl	/^function _UVError(pfx::AbstractString, code::Integer, sfxs::AbstractString...)$/;"	f
__BIG_ENDIAN	src/support/dtypes.h	/^#define __BIG_ENDIAN /;"	d
__BYTE_ORDER	src/support/dtypes.h	/^#define __BYTE_ORDER /;"	d
__CALLER_SAVED_REGS	deps/valgrind/valgrind.h	/^#define __CALLER_SAVED_REGS /;"	d
__CALL_NO_REDIR_CODE	deps/valgrind/valgrind.h	/^#define __CALL_NO_REDIR_CODE /;"	d
__CLIENT_REQUEST_CODE	deps/valgrind/valgrind.h	/^#define __CLIENT_REQUEST_CODE /;"	d
__DIR__	base/loading.jl	/^macro __DIR__()$/;"	f
__FIELDS__	test/docs.jl	/^struct __FIELDS__ end$/;"	f
__FILE_SYMBOL__	base/essentials.jl	/^macro __FILE_SYMBOL__()$/;"	f
__FILE__	base/loading.jl	/^macro __FILE__()$/;"	f
__FLOAT_WORD_ORDER	src/support/dtypes.h	/^#define __FLOAT_WORD_ORDER /;"	d
__FRAME_POINTER	deps/valgrind/valgrind.h	/^#  define __FRAME_POINTER /;"	d
__FRAME_POINTER	deps/valgrind/valgrind.h	/^#  define __FRAME_POINTER$/;"	d
__GET_NR_CONTEXT_CODE	deps/valgrind/valgrind.h	/^#define __GET_NR_CONTEXT_CODE /;"	d
__LINE__	base/essentials.jl	/^macro __LINE__()$/;"	f
__LITTLE_ENDIAN	src/support/dtypes.h	/^#define __LITTLE_ENDIAN /;"	d
__MODULE__	base/reflection.jl	/^macro __MODULE__()$/;"	f
__PDP_ENDIAN	src/support/dtypes.h	/^#define __PDP_ENDIAN /;"	d
__SPECIAL_INSTRUCTION_PREAMBLE	deps/valgrind/valgrind.h	/^#define __SPECIAL_INSTRUCTION_PREAMBLE /;"	d
__STDC_CONSTANT_MACROS	src/codegen.cpp	/^#define __STDC_CONSTANT_MACROS$/;"	d	file:
__STDC_LIMIT_MACROS	src/codegen.cpp	/^#define __STDC_LIMIT_MACROS$/;"	d	file:
__USE_GNU	src/flisp/print.c	/^#define __USE_GNU$/;"	d	file:
__VALGRIND_H	deps/valgrind/valgrind.h	/^#define __VALGRIND_H$/;"	d
__VALGRIND_MAJOR__	deps/valgrind/valgrind.h	/^#define __VALGRIND_MAJOR__ /;"	d
__VALGRIND_MINOR__	deps/valgrind/valgrind.h	/^#define __VALGRIND_MINOR__ /;"	d
__VEX_INJECT_IR_CODE	deps/valgrind/valgrind.h	/^#define __VEX_INJECT_IR_CODE /;"	d
__alignof__	src/codegen.cpp	/^#define __alignof__ /;"	d	file:
__anon042f5e38010a	src/support/operators.c	/^    union { double d; int64_t i64; } u, v;$/;"	u	function:cmp_eq	file:
__anon055fe427010a	src/julia.h	/^    union {$/;"	u	struct:_jl_taggedvalue_t
__anon055fe4270208	src/julia.h	/^typedef struct {$/;"	s
__anon055fe4270308	src/julia.h	/^typedef struct {$/;"	s
__anon055fe4270408	src/julia.h	/^JL_EXTENSION typedef struct {$/;"	s
__anon055fe427050a	src/julia.h	/^    union {$/;"	u	struct:__anon055fe4270408
__anon055fe427060a	src/julia.h	/^JL_EXTENSION typedef union {$/;"	u
__anon055fe427070a	src/julia.h	/^    union {$/;"	u	struct:_jl_method_instance_t
__anon055fe4270808	src/julia.h	/^typedef struct {$/;"	s
__anon055fe4270908	src/julia.h	/^typedef struct {$/;"	s
__anon055fe4270a08	src/julia.h	/^typedef struct {$/;"	s
__anon055fe4270b08	src/julia.h	/^typedef struct {$/;"	s
__anon055fe4270c08	src/julia.h	/^typedef struct {$/;"	s
__anon055fe4270d08	src/julia.h	/^typedef struct {$/;"	s
__anon055fe4270e08	src/julia.h	/^typedef struct {$/;"	s
__anon055fe4270f08	src/julia.h	/^typedef struct {$/;"	s
__anon055fe4271008	src/julia.h	/^typedef struct {$/;"	s
__anon055fe4271108	src/julia.h	/^typedef struct {$/;"	s
__anon055fe4271208	src/julia.h	/^typedef struct {$/;"	s
__anon055fe427130a	src/julia.h	/^    union {$/;"	u	struct:_jl_typemap_entry_t
__anon055fe4271408	src/julia.h	/^typedef struct {$/;"	s
__anon055fe4271503	src/julia.h	/^typedef enum {$/;"	g
__anon055fe4271603	src/julia.h	/^typedef enum {$/;"	g
__anon055fe4271708	src/julia.h	/^typedef struct {$/;"	s
__anon055fe4271808	src/julia.h	/^typedef struct {$/;"	s
__anon055fe4271908	src/julia.h	/^typedef struct {$/;"	s
__anon055fe4271a08	src/julia.h	/^typedef struct {$/;"	s
__anon055fe4271b08	src/julia.h	/^typedef struct {$/;"	s
__anon06c686bc0111	src/cgmemmgr.cpp	/^namespace {$/;"	n	file:
__anon085ab8f70103	src/support/dtypes.h	/^typedef enum { T_INT8, T_UINT8, T_INT16, T_UINT16, T_INT32, T_UINT32,$/;"	g
__anon0a1571000111	src/llvm-alloc-opt.cpp	/^namespace {$/;"	n	file:
__anon0a157100020a	src/llvm-alloc-opt.cpp	/^            union {$/;"	u	struct:__anon0a1571000111::Optimizer::ReplaceUses::Frame	file:
__anon0a1571000302	src/llvm-alloc-opt.cpp	/^    auto push_inst = [&] (Instruction *inst) {$/;"	f	function:__anon0a1571000111::Optimizer::checkInst	file:
__anon0a1571000402	src/llvm-alloc-opt.cpp	/^    auto check_inst = [&] (Instruction *inst, Use *use) {$/;"	f	function:__anon0a1571000111::Optimizer::checkInst	file:
__anon0a1571000502	src/llvm-alloc-opt.cpp	/^    auto simple_replace = [&] (Instruction *orig_i, Instruction *new_i) {$/;"	f	function:__anon0a1571000111::Optimizer::moveToStack	file:
__anon0a1571000602	src/llvm-alloc-opt.cpp	/^    auto finish_cur = [&] () {$/;"	f	function:__anon0a1571000111::Optimizer::moveToStack	file:
__anon0a1571000702	src/llvm-alloc-opt.cpp	/^    auto push_frame = [&] (Instruction *orig_i, Instruction *new_i) {$/;"	f	function:__anon0a1571000111::Optimizer::moveToStack	file:
__anon0a1571000802	src/llvm-alloc-opt.cpp	/^    auto replace_inst = [&] (Instruction *user) {$/;"	f	function:__anon0a1571000111::Optimizer::moveToStack	file:
__anon0a1571000902	src/llvm-alloc-opt.cpp	/^    auto simple_remove = [&] (Instruction *orig_i) {$/;"	f	function:__anon0a1571000111::Optimizer::removeAlloc	file:
__anon0a1571000a02	src/llvm-alloc-opt.cpp	/^    auto finish_cur = [&] () {$/;"	f	function:__anon0a1571000111::Optimizer::removeAlloc	file:
__anon0a1571000b02	src/llvm-alloc-opt.cpp	/^    auto push_frame = [&] (Instruction *orig_i) {$/;"	f	function:__anon0a1571000111::Optimizer::removeAlloc	file:
__anon0a1571000c02	src/llvm-alloc-opt.cpp	/^    auto remove_inst = [&] (Instruction *user) {$/;"	f	function:__anon0a1571000111::Optimizer::removeAlloc	file:
__anon0a1571000d02	src/llvm-alloc-opt.cpp	/^    auto find_slot = [&] (uint32_t offset) {$/;"	f	function:__anon0a1571000111::Optimizer::splitOnStack	file:
__anon0a1571000e02	src/llvm-alloc-opt.cpp	/^    auto simple_replace = [&] (Instruction *orig_i) {$/;"	f	function:__anon0a1571000111::Optimizer::splitOnStack	file:
__anon0a1571000f02	src/llvm-alloc-opt.cpp	/^    auto finish_cur = [&] () {$/;"	f	function:__anon0a1571000111::Optimizer::splitOnStack	file:
__anon0a1571001002	src/llvm-alloc-opt.cpp	/^    auto push_frame = [&] (Instruction *orig_i, uint32_t offset) {$/;"	f	function:__anon0a1571000111::Optimizer::splitOnStack	file:
__anon0a1571001102	src/llvm-alloc-opt.cpp	/^    auto slot_gep = [&] (SplitSlot &slot, uint32_t offset, Type *elty, IRBuilder<> &builder) {$/;"	f	function:__anon0a1571000111::Optimizer::splitOnStack	file:
__anon0a1571001202	src/llvm-alloc-opt.cpp	/^    auto replace_inst = [&] (Use *use) {$/;"	f	function:__anon0a1571000111::Optimizer::splitOnStack	file:
__anon0f0258f90108	src/subtype.c	/^typedef struct {$/;"	s	file:
__anon0f0258f90208	src/subtype.c	/^typedef struct {$/;"	s	file:
__anon10a850cc0103	src/flisp/opcodes.h	/^enum {$/;"	g
__anon16412ac90103	src/support/ios.h	/^typedef enum { bm_none=UV_HANDLE_TYPE_MAX+1, bm_line, bm_block, bm_mem } bufmode_t;$/;"	g
__anon16412ac90203	src/support/ios.h	/^typedef enum { bst_none, bst_rd, bst_wr } bufstate_t;$/;"	g
__anon17de91c80102	src/cgutils.cpp	/^            [&](unsigned new_idx_, jl_datatype_t *new_jt) {$/;"	f	function:get_box_tindex	file:
__anon17de91c80202	src/cgutils.cpp	/^                [&](unsigned idx, jl_datatype_t *jt) { },$/;"	f	function:emit_typeof	file:
__anon17de91c80302	src/cgutils.cpp	/^            [&](unsigned idx, jl_datatype_t *jt) {$/;"	f	function:emit_typeof	file:
__anon17de91c80402	src/cgutils.cpp	/^        auto emit_unboxty = [&] () -> Value* {$/;"	f	function:emit_typeof	typeref:typename:Value *	file:
__anon17de91c80502	src/cgutils.cpp	/^            [&](unsigned idx, jl_datatype_t *jt) {$/;"	f	function:compute_box_tindex	file:
__anon17de91c80602	src/cgutils.cpp	/^            [&](unsigned idx, jl_datatype_t *jt) {$/;"	f	function:union_alloca_type	file:
__anon17de91c80702	src/cgutils.cpp	/^            [&](unsigned idx, jl_datatype_t *jt) {$/;"	f	function:box_union	file:
__anon17de91c80802	src/cgutils.cpp	/^                [&](unsigned idx, jl_datatype_t *jt) {$/;"	f	function:emit_unionmove	file:
__anon1f859bb90108	src/support/arraylist.h	/^typedef struct {$/;"	s
__anon258840c60102	src/llvm-late-gc-lowering.cpp	/^            RecursivelyVisit<IntrinsicInst>([&](Use &VU) {$/;"	f	function:LateLowerGCFrame::PlaceRootsAndUpdateCalls	file:
__anon2853c92e0103	src/disasm.cpp	/^    enum {$/;"	g	class:DILineInfoPrinter	file:
__anon2853c92e0211	src/disasm.cpp	/^namespace {$/;"	n	file:
__anon36f9d1040102	src/jitlayers.cpp	/^          [this](const std::string& name) -> llvm::JITSymbol {$/;"	f	typeref:typename:llvm::JITSymbol	file:
__anon36f9d1040202	src/jitlayers.cpp	/^          [](llvm::Error Err) {$/;"	f	file:
__anon36f9d1040302	src/jitlayers.cpp	/^        [this](RTDyldObjHandleT) {$/;"	f	file:
__anon36f9d1040402	src/jitlayers.cpp	/^                        [&](const std::string &Name) {$/;"	f	function:JuliaOJIT::addModule	file:
__anon36f9d1040502	src/jitlayers.cpp	/^                        [](const std::string &S) { return nullptr; }$/;"	f	function:JuliaOJIT::addModule	file:
__anon36f9d1040602	src/jitlayers.cpp	/^    auto add_output = [&] (Module &M, StringRef unopt_bc_Name, StringRef bc_Name, StringRef obj_/;"	f	function:jl_dump_native	file:
__anon428795130108	deps/valgrind/valgrind.h	/^   struct {$/;"	s
__anon428795130208	deps/valgrind/valgrind.h	/^   struct {$/;"	s
__anon428795130308	deps/valgrind/valgrind.h	/^   struct {$/;"	s
__anon428795130408	deps/valgrind/valgrind.h	/^   struct {$/;"	s
__anon428795130508	deps/valgrind/valgrind.h	/^   struct {$/;"	s
__anon428795130608	deps/valgrind/valgrind.h	/^   struct {$/;"	s
__anon428795130708	deps/valgrind/valgrind.h	/^   struct {$/;"	s
__anon428795130808	deps/valgrind/valgrind.h	/^   struct {$/;"	s
__anon428795130908	deps/valgrind/valgrind.h	/^  struct {$/;"	s
__anon428795130a08	deps/valgrind/valgrind.h	/^   struct {$/;"	s
__anon428795130b08	deps/valgrind/valgrind.h	/^   struct {$/;"	s
__anon428795130c03	deps/valgrind/valgrind.h	/^   enum { VG_USERREQ__RUNNING_ON_VALGRIND  = 0x1001,$/;"	g
__anon46b360a30108	src/threading.c	/^typedef struct {$/;"	s	file:
__anon4cf1a00a0108	src/support/win32_ucontext.h	/^typedef struct {$/;"	s
__anon4fd41b520103	src/processor_x86.cpp	/^enum : uint32_t {$/;"	g	namespace:X86::Feature	typeref:typename:uint32_t	file:
__anon4fd41b520202	src/processor_x86.cpp	/^    auto feature_cb = [] (const char *str, size_t len, FeatureList<feature_sz> &list) {$/;"	f	function:X86::get_cmdline_targets	file:
__anon4fd41b520302	src/processor_x86.cpp	/^static uint32_t subnormal_flags = [] {$/;"	f	file:
__anon570497e30108	src/dump.c	/^typedef struct {$/;"	s	file:
__anon570497e3020a	src/dump.c	/^            union {$/;"	u	function:jl_deserialize_datatype	file:
__anon570497e30308	src/dump.c	/^                struct {$/;"	s	union:jl_deserialize_datatype::__anon570497e3020a	file:
__anon732973510108	src/support/strptime.c	/^typedef struct {$/;"	s	file:
__anon73d424b2010a	src/flisp/equal.c	/^    union {$/;"	u	function:bounded_hash	file:
__anon7b4d3ed20103	src/processor.h	/^enum {$/;"	g
__anon7b4d3ed20203	src/processor.h	/^typedef enum {$/;"	g
__anon806c816e0108	src/support/htable.h	/^typedef struct {$/;"	s
__anon839834ed0111	src/processor.cpp	/^namespace {$/;"	n	file:
__anon839834ed0202	src/processor.cpp	/^    auto add_data = [&] (const void *data, size_t sz) {$/;"	f	function:__anon839834ed0111::serialize_target_data	file:
__anon839834ed0308	src/processor.cpp	/^    struct {$/;"	s	struct:__anon839834ed0111::TargetData	file:
__anon839834ed0402	src/processor.cpp	/^    auto load_data = [&] (void *dest, size_t sz) {$/;"	f	function:__anon839834ed0111::deserialize_target_data	file:
__anon839834ed0502	src/processor.cpp	/^    auto load_string = [&] () {$/;"	f	function:__anon839834ed0111::deserialize_target_data	file:
__anon839834ed0602	src/processor.cpp	/^    auto reset_arg = [&] {$/;"	f	function:__anon839834ed0111::parse_cmdline	file:
__anon846b275c0102	src/processor_fallback.cpp	/^    auto feature_cb = [] (const char*, size_t, FeatureList<1>&) {$/;"	f	function:Fallback::get_cmdline_targets	file:
__anon84ad8c4c0108	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c0208	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c0308	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c0408	src/ccalltest.c	/^    struct { int32_t x; } x;$/;"	s	struct:__anon84ad8c4c0308	file:
__anon84ad8c4c0508	src/ccalltest.c	/^    struct { int32_t y; } y;$/;"	s	struct:__anon84ad8c4c0308	file:
__anon84ad8c4c0608	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c0708	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c0808	src/ccalltest.c	/^    struct { int64_t x; } x;$/;"	s	struct:__anon84ad8c4c0708	file:
__anon84ad8c4c0908	src/ccalltest.c	/^    struct { int64_t y; } y;$/;"	s	struct:__anon84ad8c4c0708	file:
__anon84ad8c4c0a08	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c0b08	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c0c08	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c0d08	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c0e08	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c0f08	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c1008	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c1108	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c1208	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c1308	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c1408	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c1508	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c1608	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c1708	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c1808	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c1908	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c1a08	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c1b08	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c1c08	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c1d08	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c1e08	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c1f08	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c2008	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c2108	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c2208	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c2308	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c2408	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c2508	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c2608	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c2708	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c2808	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c2908	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c2a08	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c2b08	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c2c08	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c2d08	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c2e08	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c2f08	src/ccalltest.c	/^    struct {$/;"	s	struct:__anon84ad8c4c2e08	file:
__anon84ad8c4c3008	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c3108	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c3208	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c3308	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c3408	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c3508	src/ccalltest.c	/^    struct {$/;"	s	struct:__anon84ad8c4c3408	file:
__anon84ad8c4c3608	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c3708	src/ccalltest.c	/^    struct {$/;"	s	struct:__anon84ad8c4c3608	file:
__anon84ad8c4c3808	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon84ad8c4c3908	src/ccalltest.c	/^typedef struct {$/;"	s	file:
__anon85ae976c0102	src/llvm-pass-helpers.cpp	/^        [](const JuliaPassContext &context) {$/;"	f	namespace:jl_intrinsics	file:
__anon85ae976c0202	src/llvm-pass-helpers.cpp	/^        [](const JuliaPassContext &context) {$/;"	f	namespace:jl_intrinsics	file:
__anon85ae976c0302	src/llvm-pass-helpers.cpp	/^        [](const JuliaPassContext &context) {$/;"	f	namespace:jl_intrinsics	file:
__anon85ae976c0402	src/llvm-pass-helpers.cpp	/^        [](const JuliaPassContext &context) {$/;"	f	namespace:jl_intrinsics	file:
__anon85ae976c0502	src/llvm-pass-helpers.cpp	/^        [](const JuliaPassContext &context) {$/;"	f	namespace:jl_intrinsics	file:
__anon85ae976c0602	src/llvm-pass-helpers.cpp	/^        [](const JuliaPassContext &context) {$/;"	f	namespace:jl_intrinsics	file:
__anon85ae976c0702	src/llvm-pass-helpers.cpp	/^        [](const JuliaPassContext &context) {$/;"	f	namespace:jl_well_known	file:
__anon85ae976c0802	src/llvm-pass-helpers.cpp	/^        [](const JuliaPassContext &context) {$/;"	f	namespace:jl_well_known	file:
__anon85ae976c0902	src/llvm-pass-helpers.cpp	/^        [](const JuliaPassContext &context) {$/;"	f	namespace:jl_well_known	file:
__anon8a927b6f0102	src/llvm-api.cpp	/^    auto PreserveFobj = [=](const GlobalValue &GV) {$/;"	f	function:llvm::LLVMExtraAddInternalizePassWithExportList	file:
__anon8a94e5d20108	src/stackwalk.c	/^static struct {$/;"	s	file:
__anon94ea2e970103	deps/srccache/patchelf-0.9/src/patchelf.cc	/^    typedef enum { printSoname, replaceSoname } sonameMode;$/;"	g	class:ElfFile	file:
__anon94ea2e970203	deps/srccache/patchelf-0.9/src/patchelf.cc	/^    typedef enum { rpPrint, rpShrink, rpSet, rpRemove } RPathOp;$/;"	g	class:ElfFile	file:
__anon9c5a21540111	src/clangsa/GCChecker.cpp	/^namespace {$/;"	n	file:
__anon9c5a21540202	src/clangsa/GCChecker.cpp	/^            return report_error([](BugReport *){}, C, message);$/;"	f	function:__anon9c5a21540111::GCChecker::report_error	file:
__anon9c5a21540302	src/clangsa/GCChecker.cpp	/^    SymbolRef Parent = walkToRoot([&](SymbolRef Sym, const ValueState *OldVState) {$/;"	f	function:GCChecker::GCValueBugVisitor::ExplainNoPropagationFromExpr	file:
__anon9c5a21540402	src/clangsa/GCChecker.cpp	/^      Parent = walkToRoot([&](SymbolRef Sym, const ValueState *OldVState) {$/;"	f	function:GCChecker::GCValueBugVisitor::ExplainNoPropagationFromExpr	file:
__anon9c5a21540502	src/clangsa/GCChecker.cpp	/^        SymbolRef ArgSym = walkToRoot([](SymbolRef Sym, const ValueState *OldVState) {return !Ol/;"	f	function:GCChecker::propagateArgumentRootedness	file:
__anon9c5a21540602	src/clangsa/GCChecker.cpp	/^            report_error([&](BugReport *Report) {$/;"	f	function:GCChecker::propagateArgumentRootedness	file:
__anon9c5a21540702	src/clangsa/GCChecker.cpp	/^    return isJuliaType([](StringRef Name) {$/;"	f	function:GCChecker::isBundleOfGCValues	file:
__anon9c5a21540802	src/clangsa/GCChecker.cpp	/^    return isValueCollection(QT) || isJuliaType([](StringRef Name) {$/;"	f	function:GCChecker::isGCTrackedType	file:
__anon9c5a21540902	src/clangsa/GCChecker.cpp	/^    return isJuliaType([](StringRef Name) {$/;"	f	function:GCChecker::isGloballyRootedType	file:
__anon9c5a21540a02	src/clangsa/GCChecker.cpp	/^            SpeciallyRootedSymbol = walkToRoot([&](SymbolRef Sym, const ValueState *OldVState) {$/;"	f	function:GCChecker::processPotentialSafepoint	file:
__anon9c5a21540b02	src/clangsa/GCChecker.cpp	/^    SymbolRef Sym = walkToRoot([&](SymbolRef Sym, const ValueState *OldVState) {$/;"	f	function:GCChecker::getValStateForRegion	file:
__anon9c5a21540c02	src/clangsa/GCChecker.cpp	/^        bool ParentIsModule = isJuliaType([](StringRef Name) {$/;"	f	function:GCChecker::checkDerivingExpr	file:
__anon9c5a21540d02	src/clangsa/GCChecker.cpp	/^        bool ResultIsArrayList = isJuliaType([](StringRef Name) {$/;"	f	function:GCChecker::checkDerivingExpr	file:
__anon9dd660c30108	src/julia_internal.h	/^typedef struct {$/;"	s
__anon9dd660c30208	src/julia_internal.h	/^typedef struct {$/;"	s
__anona49ae9290108	src/jitlayers.h	/^typedef struct {Value *gv; int32_t index;} jl_value_llvm; \/\/ uses 1-based indexing$/;"	s
__anonabd05f7f0102	src/llvm-propagate-addrspaces.cpp	/^    auto CollapseCastsAndLift = [&](Value *CurrentV, Instruction *InsertPt) -> Value * {$/;"	f	function:PropagateJuliaAddrspaces::LiftPointer	typeref:typename:Value *	file:
__anonad4676cf0103	src/jloptions.c	/^    enum { opt_machinefile = 300,$/;"	g	function:jl_parse_opts	file:
__anonb455601d0108	src/flisp/flisp.h	/^typedef struct {$/;"	s
__anonb455601d0208	src/flisp/flisp.h	/^typedef struct {$/;"	s
__anonb455601d0308	src/flisp/flisp.h	/^typedef struct {$/;"	s
__anonb455601d0408	src/flisp/flisp.h	/^JL_EXTENSION typedef struct {$/;"	s
__anonb455601d050a	src/flisp/flisp.h	/^    union {$/;"	u	struct:__anonb455601d0408
__anonb455601d0608	src/flisp/flisp.h	/^typedef struct {$/;"	s
__anonb455601d0708	src/flisp/flisp.h	/^typedef struct {$/;"	s
__anonb455601d0808	src/flisp/flisp.h	/^typedef struct {$/;"	s
__anonbc184df60103	src/flisp/read.c	/^enum {$/;"	g	file:
__anonc2cfca210108	src/julia_gcext.h	/^typedef struct {$/;"	s
__anonc3a2e68f0108	src/staticdata.c	/^typedef struct {$/;"	s	file:
__anonc3a2e68f0203	src/staticdata.c	/^typedef enum {$/;"	g	file:
__anonc5a5d9f6010a	src/runtime_intrinsics.c	/^typedef union {$/;"	u	file:
__anonc5a5d9f6020a	src/runtime_intrinsics.c	/^typedef union {$/;"	u	file:
__anonc9e75fcc0102	src/ccall.cpp	/^    auto LM = lazyModule([&] {$/;"	f	function:emit_plt	file:
__anonc9e75fcc0208	src/ccall.cpp	/^typedef struct {$/;"	s	file:
__anonc9e75fcc0302	src/ccall.cpp	/^    auto ccallarg = [=] (size_t i) {$/;"	f	function:emit_ccall	file:
__anonc9e75fcc0402	src/ccall.cpp	/^    auto _is_libjulia_func = [&] (uintptr_t ptr, const char *name) {$/;"	f	function:emit_ccall	file:
__anonc9e75fcc0502	src/ccall.cpp	/^    static jl_ptls_t (*ptls_getter)(void) = [] {$/;"	f	function:emit_ccall	file:
__anoncf30557c0108	src/gc.h	/^typedef struct {$/;"	s
__anoncf30557c0208	src/gc.h	/^typedef struct {$/;"	s
__anoncf30557c0308	src/gc.h	/^typedef struct {$/;"	s
__anoncf30557c0403	src/gc.h	/^enum {$/;"	g
__anoncf30557c0508	src/gc.h	/^typedef struct {$/;"	s
__anoncf30557c0608	src/gc.h	/^typedef struct {$/;"	s
__anoncf30557c0708	src/gc.h	/^typedef struct {$/;"	s
__anoncf30557c0808	src/gc.h	/^typedef struct {$/;"	s
__anoncf30557c0908	src/gc.h	/^typedef struct {$/;"	s
__anoncf30557c0a08	src/gc.h	/^typedef struct {$/;"	s
__anoncf30557c0b08	src/gc.h	/^typedef struct {$/;"	s
__anoncf30557c0c08	src/gc.h	/^typedef struct {$/;"	s
__anoncf30557c0d08	src/gc.h	/^typedef struct {$/;"	s
__anoncf30557c0e0a	src/gc.h	/^    union {$/;"	u	struct:_bigval_t
__anoncf30557c0f0a	src/gc.h	/^    union {$/;"	u	struct:_bigval_t
__anoncf30557c1008	src/gc.h	/^        struct {$/;"	s	union:_bigval_t::__anoncf30557c0f0a
__anoncf30557c1108	src/gc.h	/^typedef struct {$/;"	s
__anoncf30557c1208	src/gc.h	/^typedef struct {$/;"	s
__anoncf30557c1308	src/gc.h	/^typedef struct {$/;"	s
__anoncf30557c1408	src/gc.h	/^typedef struct {$/;"	s
__anond5683ea40111	src/llvm-multiversioning.cpp	/^namespace {$/;"	n	file:
__anond5683ea40202	src/llvm-multiversioning.cpp	/^    auto pop = [&] {$/;"	f	function:__anond5683ea40111::ConstantUses::forward	file:
__anond5683ea40302	src/llvm-multiversioning.cpp	/^    auto push = [&] (Use *use, Constant *c, size_t offset, bool samebits) {$/;"	f	function:__anond5683ea40111::ConstantUses::forward	file:
__anond5683ea40402	src/llvm-multiversioning.cpp	/^    auto handle_constaggr = [&] (Use *use, ConstantAggregate *aggr) {$/;"	f	function:__anond5683ea40111::ConstantUses::forward	file:
__anond5683ea40502	src/llvm-multiversioning.cpp	/^    auto handle_constexpr = [&] (Use *use, ConstantExpr *expr) {$/;"	f	function:__anond5683ea40111::ConstantUses::forward	file:
__anond5683ea40602	src/llvm-multiversioning.cpp	/^    auto single_pass = [&] (Function *orig_f) {$/;"	f	function:__anond5683ea40111::CloneCtx::fix_gv_uses	file:
__anond5683ea40702	src/llvm-multiversioning.cpp	/^        auto push_i32 = [&] (uint32_t v) {$/;"	f	function:__anond5683ea40111::CloneCtx::emit_metadata	file:
__anond5683ea40802	src/llvm-multiversioning.cpp	/^                             const std::pair<Constant*,uint32_t> &rhs) {$/;"	f	function:__anond5683ea40111::CloneCtx::emit_metadata	file:
__anonea1faf400102	src/debuginfo.cpp	/^        auto getLoadAddress = [&] (const StringRef &sName) -> uint64_t {$/;"	f	function:JuliaJITEventListener::_NotifyObjectEmitted	typeref:typename:uint64_t	file:
__anonea1faf400208	src/debuginfo.cpp	/^typedef struct {$/;"	s	file:
__anonea1faf400302	src/debuginfo.cpp	/^  processFDEs((char*)Addr, Size, [](const char *Entry) {$/;"	f	function:register_eh_frames	file:
__anonea1faf400402	src/debuginfo.cpp	/^   processFDEs((char*)Addr, Size, [](const char *Entry) {$/;"	f	function:deregister_eh_frames	file:
__anonea1faf400502	src/debuginfo.cpp	/^    processFDEs((char*)Addr, Size, [&](const char*){ nentries++; });$/;"	f	function:register_eh_frames	file:
__anonea1faf400602	src/debuginfo.cpp	/^    processFDEs((char*)Addr, Size, [&](const char *Entry) {$/;"	f	function:register_eh_frames	file:
__anonef7d25cd010a	src/jl_uv.c	/^typedef union {$/;"	u	file:
__anonf0871e2c0103	src/processor_arm.cpp	/^enum : uint32_t {$/;"	g	namespace:ARM::Feature	typeref:typename:uint32_t	file:
__anonf0871e2c0203	src/processor_arm.cpp	/^enum : uint32_t {$/;"	g	namespace:ARM::Feature	typeref:typename:uint32_t	file:
__anonf0871e2c0302	src/processor_arm.cpp	/^    auto reset = [&] () {$/;"	f	function:ARM::get_cpuinfo_procfs	file:
__anonf0871e2c0402	src/processor_arm.cpp	/^    auto find = [&] (uint32_t name) {$/;"	f	function:ARM::shrink_big_little	file:
__anonf0871e2c0502	src/processor_arm.cpp	/^        list.erase(std::remove_if(list.begin(), list.end(), [&] (std::pair<uint32_t,CPUID> &ele)/;"	f	function:ARM::shrink_big_little	file:
__anonf0871e2c0602	src/processor_arm.cpp	/^    static std::string name = [] {$/;"	f	function:ARM::host_cpu_name	file:
__anonf0871e2c0702	src/processor_arm.cpp	/^    auto feature_cb = [] (const char *str, size_t len, FeatureList<feature_sz> &list) {$/;"	f	function:ARM::get_cmdline_targets	file:
__anonf46923380111	src/llvm-ptls.cpp	/^namespace {$/;"	n	file:
__anonf46923380202	src/llvm-ptls.cpp	/^        static const std::string const_asm_str = [&] () {$/;"	f	function:__anonf46923380111::LowerPTLS::emit_ptls_tp	file:
__anonf89725e10108	src/interpreter.c	/^typedef struct {$/;"	s	file:
__anonf8aecdb10108	src/julia_threads.h	/^typedef struct {$/;"	s
__anonf8aecdb10208	src/julia_threads.h	/^typedef struct {$/;"	s
__anonf8aecdb10308	src/julia_threads.h	/^typedef struct {$/;"	s
__anonf8aecdb10408	src/julia_threads.h	/^typedef struct {$/;"	s
__anonf8aecdb10508	src/julia_threads.h	/^typedef struct {$/;"	s
__anonf8aecdb10608	src/julia_threads.h	/^typedef struct {$/;"	s
__anonf8aecdb10708	src/julia_threads.h	/^typedef struct {$/;"	s
__anonf8aecdb10808	src/julia_threads.h	/^typedef struct {$/;"	s
__anonf90ca10a0108	test/gcext/gcext.c	/^typedef struct {$/;"	s	file:
__anonf97110220102	src/codegen.cpp	/^            [&](unsigned idx, jl_datatype_t *jt) {$/;"	f	function:convert_julia_type_union	file:
__anonf97110220202	src/codegen.cpp	/^            auto maybe_setup_union_isa = [&]() {$/;"	f	function:convert_julia_type_union	file:
__anonf97110220302	src/codegen.cpp	/^                [&](unsigned idx, jl_datatype_t *jt) {$/;"	f	function:convert_julia_type_union	file:
__anonf97110220402	src/codegen.cpp	/^        [&](unsigned idx, jl_datatype_t *jt) {$/;"	f	function:emit_bitsunion_compare	file:
__anonf97110220502	src/codegen.cpp	/^    auto allocate_local = [&](jl_varinfo_t &varinfo, jl_sym_t *s) {$/;"	f	function:emit_function	file:
__anonf97110220602	src/codegen.cpp	/^    auto get_specsig_arg = [&](jl_value_t *argType, Type *llvmArgType, bool isboxed) {$/;"	f	function:emit_function	file:
__anonf97110220702	src/codegen.cpp	/^    auto in_user_mod = [] (jl_module_t *mod) {$/;"	f	function:emit_function	file:
__anonf97110220802	src/codegen.cpp	/^    auto find_next_stmt = [&] (int seq_next) {$/;"	f	function:emit_function	file:
__anonf97110220902	src/codegen.cpp	/^    auto do_coverage = [&] (bool in_user_code) {$/;"	f	function:emit_function	file:
__anonf97110220a02	src/codegen.cpp	/^    auto do_malloc_log = [&] (bool in_user_code) {$/;"	f	function:emit_function	file:
__anonf97110220b02	src/codegen.cpp	/^    auto coverageVisitStmt = [&] (size_t dbg) {$/;"	f	function:emit_function	file:
__anonf97110220c02	src/codegen.cpp	/^    auto mallocVisitStmt = [&] (unsigned dbg) {$/;"	f	function:emit_function	file:
__anonf97110220d02	src/codegen.cpp	/^    auto undef_value_for_type = [&](jl_value_t *phiType, Type *UndefType) {$/;"	f	function:emit_function	file:
__anonff7a58690108	deps/srccache/patchelf-0.9/src/elf.h	/^{$/;"	s
__anonff7a58690208	deps/srccache/patchelf-0.9/src/elf.h	/^{$/;"	s
__anonff7a58690308	deps/srccache/patchelf-0.9/src/elf.h	/^{$/;"	s
__anonff7a58690408	deps/srccache/patchelf-0.9/src/elf.h	/^{$/;"	s
__anonff7a58690508	deps/srccache/patchelf-0.9/src/elf.h	/^{$/;"	s
__anonff7a58690608	deps/srccache/patchelf-0.9/src/elf.h	/^{$/;"	s
__anonff7a58690708	deps/srccache/patchelf-0.9/src/elf.h	/^{$/;"	s
__anonff7a58690808	deps/srccache/patchelf-0.9/src/elf.h	/^{$/;"	s
__anonff7a58690908	deps/srccache/patchelf-0.9/src/elf.h	/^{$/;"	s
__anonff7a58690a08	deps/srccache/patchelf-0.9/src/elf.h	/^{$/;"	s
__anonff7a58690b08	deps/srccache/patchelf-0.9/src/elf.h	/^{$/;"	s
__anonff7a58690c08	deps/srccache/patchelf-0.9/src/elf.h	/^{$/;"	s
__anonff7a58690d08	deps/srccache/patchelf-0.9/src/elf.h	/^{$/;"	s
__anonff7a58690e08	deps/srccache/patchelf-0.9/src/elf.h	/^{$/;"	s
__anonff7a58690f08	deps/srccache/patchelf-0.9/src/elf.h	/^{$/;"	s
__anonff7a5869100a	deps/srccache/patchelf-0.9/src/elf.h	/^    {$/;"	u	struct:__anonff7a58690f08
__anonff7a58691108	deps/srccache/patchelf-0.9/src/elf.h	/^{$/;"	s
__anonff7a5869120a	deps/srccache/patchelf-0.9/src/elf.h	/^    {$/;"	u	struct:__anonff7a58691108
__anonff7a58691308	deps/srccache/patchelf-0.9/src/elf.h	/^{$/;"	s
__anonff7a58691408	deps/srccache/patchelf-0.9/src/elf.h	/^{$/;"	s
__anonff7a58691508	deps/srccache/patchelf-0.9/src/elf.h	/^{$/;"	s
__anonff7a58691608	deps/srccache/patchelf-0.9/src/elf.h	/^{$/;"	s
__anonff7a58691708	deps/srccache/patchelf-0.9/src/elf.h	/^{$/;"	s
__anonff7a58691808	deps/srccache/patchelf-0.9/src/elf.h	/^{$/;"	s
__anonff7a58691908	deps/srccache/patchelf-0.9/src/elf.h	/^{$/;"	s
__anonff7a58691a08	deps/srccache/patchelf-0.9/src/elf.h	/^{$/;"	s
__anonff7a58691b08	deps/srccache/patchelf-0.9/src/elf.h	/^{$/;"	s
__anonff7a58691c0a	deps/srccache/patchelf-0.9/src/elf.h	/^    {$/;"	u	struct:__anonff7a58691b08
__anonff7a58691d08	deps/srccache/patchelf-0.9/src/elf.h	/^{$/;"	s
__anonff7a58691e0a	deps/srccache/patchelf-0.9/src/elf.h	/^    {$/;"	u	struct:__anonff7a58691d08
__anonff7a58691f08	deps/srccache/patchelf-0.9/src/elf.h	/^{$/;"	s
__anonff7a58692008	deps/srccache/patchelf-0.9/src/elf.h	/^{$/;"	s
__anonff7a58692108	deps/srccache/patchelf-0.9/src/elf.h	/^{$/;"	s
__anonff7a58692208	deps/srccache/patchelf-0.9/src/elf.h	/^{$/;"	s
__anonff7a5869230a	deps/srccache/patchelf-0.9/src/elf.h	/^{$/;"	u
__anonff7a58692408	deps/srccache/patchelf-0.9/src/elf.h	/^    {$/;"	s	union:__anonff7a5869230a
__anonff7a58692508	deps/srccache/patchelf-0.9/src/elf.h	/^    {$/;"	s	union:__anonff7a5869230a
__anonff7a58692608	deps/srccache/patchelf-0.9/src/elf.h	/^{$/;"	s
__anonff7a58692708	deps/srccache/patchelf-0.9/src/elf.h	/^{$/;"	s
__anonff7a58692808	deps/srccache/patchelf-0.9/src/elf.h	/^{$/;"	s
__anonff7a58692908	deps/srccache/patchelf-0.9/src/elf.h	/^{$/;"	s
__anonff7a58692a08	deps/srccache/patchelf-0.9/src/elf.h	/^{$/;"	s
__asan_default_options	src/flisp/flmain.c	/^const char* __asan_default_options() {$/;"	f	typeref:typename:const char *
__asan_default_options	src/init.c	/^JL_DLLEXPORT const char* __asan_default_options() {$/;"	f	typeref:typename:JL_DLLEXPORT const char *
__atreplinit	base/client.jl	/^function __atreplinit(repl)$/;"	f
__binrepr	base/multimedia.jl	/^function __binrepr(m::MIME, x, context)$/;"	f
__cat	base/abstractarray.jl	/^function __cat(A, shape::NTuple{N}, catdims, X...) where N$/;"	f
__convertSRL	base/twiceprecision.jl	/^function __convertSRL(::Type{StepRangeLen{T,R,S}}, r::AbstractRange{U}) where {T,R,S,U}$/;"	f
__convertSRL	base/twiceprecision.jl	/^function __convertSRL(::Type{StepRangeLen{T,R,S}}, r::StepRangeLen{U}) where {T,R,S,U}$/;"	f
__dec	base/multidimensional.jl	/^    @inline __dec(::Tuple{}, ::Tuple{}, ::Tuple{}) = false, ()$/;"	f
__dec	base/multidimensional.jl	/^    @inline function __dec(state, start, stop)$/;"	f
__dec	base/multidimensional.jl	/^    @inline function __dec(state::Tuple{Int}, start::Tuple{Int}, stop::Tuple{Int})$/;"	f
__deserialized_types__	stdlib/Serialization/src/Serialization.jl	/^module __deserialized_types__ end$/;"	f
__doc__	base/boot.jl	/^macro __doc__(x)$/;"	f
__doc__!	base/docs/Docs.jl	/^function __doc__!(meta, def, define::Bool)$/;"	f
__dot__	base/broadcast.jl	/^__dot__(x) = x$/;"	f
__dot__	base/broadcast.jl	/^function __dot__(x::Expr)$/;"	f
__dot__	base/broadcast.jl	/^macro __dot__(x)$/;"	f
__extension__	deps/valgrind/valgrind.h	/^#  define __extension__ /;"	d
__f_isa_arg_1	test/core.jl	/^function __f_isa_arg_1()$/;"	f
__g_isa_test_1	test/core.jl	/^@noinline __g_isa_test_1(a) = push!(a,1)$/;"	f
__getopt_long	src/getopt.c	/^static int __getopt_long(int argc, char *const *argv, const char *optstring, const struct option/;"	f	typeref:typename:int	file:
__has_feature	src/support/analyzer_annotations.h	/^#define __has_feature(/;"	d
__inc	base/multidimensional.jl	/^    @inline __inc(::Tuple{}, ::Tuple{}, ::Tuple{}) = false, ()$/;"	f
__inc	base/multidimensional.jl	/^    @inline function __inc(state, start, stop)$/;"	f
__inc	base/multidimensional.jl	/^    @inline function __inc(state::Tuple{Int}, start::Tuple{Int}, stop::Tuple{Int})$/;"	f
__init__	base/Base.jl	/^function __init__()$/;"	f
__init__	base/docs/basedocs.jl	/^function __init__()$/;"	f
__init__	base/gmp.jl	/^function __init__()$/;"	f
__init__	base/grisu/grisu.jl	/^function __init__()$/;"	f
__init__	base/mpfr.jl	/^function __init__()$/;"	f
__init__	base/pcre.jl	/^function __init__()$/;"	f
__init__	base/sysinfo.jl	/^function __init__()$/;"	f
__init__	stdlib/Distributed/src/Distributed.jl	/^function __init__()$/;"	f
__init__	stdlib/FileWatching/src/FileWatching.jl	/^function __init__()$/;"	f
__init__	stdlib/LinearAlgebra/src/LinearAlgebra.jl	/^function __init__()$/;"	f
__init__	stdlib/Logging/src/Logging.jl	/^function __init__()$/;"	f
__init__	stdlib/Profile/src/Profile.jl	/^    __init__() = init(1_000_000, 0.001)$/;"	f
__init__	stdlib/Profile/src/Profile.jl	/^    __init__() = init(1_000_000, 0.01)$/;"	f
__init__	stdlib/REPL/src/REPL.jl	/^function __init__()$/;"	f
__init__	stdlib/REPL/src/TerminalMenus/TerminalMenus.jl	/^function __init__()$/;"	f
__init__	stdlib/Random/src/RNGs.jl	/^function __init__()$/;"	f
__init__	stdlib/Sockets/src/Sockets.jl	/^function __init__()$/;"	f
__init__	stdlib/SuiteSparse/src/cholmod.jl	/^function __init__()$/;"	f
__init__	test/core.jl	/^                __init__() = error()$/;"	f
__init__	test/precompile.jl	/^                __init__() = push!(Base.package_callbacks, sym->nothing)$/;"	f
__init__	test/precompile.jl	/^            function __init__()$/;"	f
__init__	test/staged.jl	/^    function __init__()$/;"	f
__invoke_dynamic_linker__	deps/srccache/patchelf-0.9/tests/foo.c	/^const char __invoke_dynamic_linker__[] __attribute__ ((section (".interp"))) = "\/foo\/bar";$/;"	v	typeref:typename:const char[]
__julia_personality	src/support/win32_ucontext.c	/^JL_DLLEXPORT EXCEPTION_DISPOSITION NTAPI __julia_personality($/;"	f	typeref:typename:JL_DLLEXPORT EXCEPTION_DISPOSITION NTAPI
__likely	src/support/dtypes.h	/^#define __likely(/;"	d
__maybe_reshape	base/multidimensional.jl	/^@inline __maybe_reshape(A::AbstractArray, ::NTuple{N,Any}) where {N} = reshape(A, Val(N))$/;"	f
__maybe_reshape	base/multidimensional.jl	/^@inline __maybe_reshape(A::AbstractArray{T,N}, ::NTuple{N,Any}) where {T,N} = A$/;"	f
__need_ucontext64_t	src/signals-mach.c	/^#define __need_ucontext64_t$/;"	d	file:
__need_ucontext64_t	src/signals-unix.c	/^#define __need_ucontext64_t$/;"	d	file:
__normalize!	stdlib/LinearAlgebra/src/generic.jl	/^@inline function __normalize!(v::AbstractVector, nrm::AbstractFloat)$/;"	f
__optpos	src/getopt.c	/^int optind=1, opterr=1, optopt, __optpos, __optreset=0;$/;"	v	typeref:typename:int
__optreset	src/getopt.c	/^int optind=1, opterr=1, optopt, __optpos, __optreset=0;$/;"	v	typeref:typename:int
__precompile__	base/loading.jl	/^@noinline function __precompile__(isprecompilable::Bool=true)$/;"	f
__preinit_threads__	base/task.jl	/^function __preinit_threads__()$/;"	f
__reshape	base/reshapedarray.jl	/^function __reshape(p::Tuple{AbstractArray,IndexCartesian}, dims::Dims)$/;"	f
__reshape	base/reshapedarray.jl	/^function __reshape(p::Tuple{AbstractArray,IndexLinear}, dims::Dims)$/;"	f
__reshape	base/reshapedarray.jl	/^function __reshape(p::Tuple{AbstractArray{<:Any,0},IndexCartesian}, dims::Dims)$/;"	f
__start_jl_interpreter_frame	src/interpreter-stacktrace.c	/^uintptr_t __start_jl_interpreter_frame = (uintptr_t)&__start_jl_interpreter_frame_val;$/;"	v	typeref:typename:uintptr_t
__stop_jl_interpreter_frame	src/interpreter-stacktrace.c	/^uintptr_t __stop_jl_interpreter_frame = (uintptr_t)&__stop_jl_interpreter_frame_val;$/;"	v	typeref:typename:uintptr_t
__subarray_throw_boundserror	base/subarray.jl	/^@noinline __subarray_throw_boundserror(::Type{T}, parent, indices, offset1, stride1, I) where {T/;"	f
__throw_gcd_overflow	base/intfuncs.jl	/^@noinline __throw_gcd_overflow(a, b) = throw(OverflowError("gcd($a, $b) overflows"))$/;"	f
__throw_invalid_ascii	base/strings/util.jl	/^@noinline __throw_invalid_ascii(s::String, i::Int) = throw(ArgumentError("invalid ASCII at index/;"	f
__throw_rational_argerror	base/rational.jl	/^@noinline __throw_rational_argerror(T) = throw(ArgumentError("invalid rational: zero($T)\/\/zero/;"	f
__tmp_replutil	test/errorshow.jl	/^module __tmp_replutil$/;"	f
__to_subscript_indices	base/abstractarray.jl	/^function __to_subscript_indices(A::AbstractArray,$/;"	f
__unlikely	src/support/dtypes.h	/^#define __unlikely(/;"	d
__unsafe_string!	base/strings/substring.jl	/^@inline function __unsafe_string!(out, c::Char, offs::Integer)$/;"	f
__unsafe_string!	base/strings/substring.jl	/^@inline function __unsafe_string!(out, s::Union{String, SubString{String}}, offs::Integer)$/;"	f
_absspvec_hcat	stdlib/SparseArrays/src/sparsevector.jl	/^function _absspvec_hcat(X::AbstractSparseVector{Tv,Ti}...) where {Tv,Ti}$/;"	f
_absspvec_vcat	stdlib/SparseArrays/src/sparsevector.jl	/^function _absspvec_vcat(X::AbstractSparseVector{Tv,Ti}...) where {Tv,Ti}$/;"	f
_absvecormat_mul_adjrot	stdlib/LinearAlgebra/src/givens.jl	/^function _absvecormat_mul_adjrot(A::AbstractVecOrMat{T}, adjR::Adjoint{<:Any,<:AbstractRotation{/;"	f
_accumulate!	base/accumulate.jl	/^function _accumulate!(op, B, A, dims::Integer, init::Union{Nothing, Some})$/;"	f
_accumulate!	base/accumulate.jl	/^function _accumulate!(op, B, A, dims::Nothing, init::Union{Nothing, Some})$/;"	f
_accumulate!	base/accumulate.jl	/^function _accumulate!(op, B, A::AbstractVector, dims::Nothing, init::Nothing)$/;"	f
_accumulate!	base/accumulate.jl	/^function _accumulate!(op, B, A::AbstractVector, dims::Nothing, init::Some)$/;"	f
_accumulate1!	base/accumulate.jl	/^function _accumulate1!(op, B, v1, A::AbstractVector, dim::Integer)$/;"	f
_accumulate_pairwise!	base/accumulate.jl	/^function _accumulate_pairwise!(op::Op, c::AbstractVector{T}, v::AbstractVector, s, i1, n)::T whe/;"	f
_accumulaten!	base/accumulate.jl	/^@noinline function _accumulaten!(op, B, A, R1, ind, R2, init::Nothing)$/;"	f
_accumulaten!	base/accumulate.jl	/^@noinline function _accumulaten!(op, B, A, R1, ind, R2, init::Some)$/;"	f
_adjoint_hcat	stdlib/LinearAlgebra/src/adjtrans.jl	/^_adjoint_hcat(avs::Union{Number,AdjointAbsVec}...) = adjoint(vcat(map(adjoint, avs)...))$/;"	f
_after_colon	base/reshapedarray.jl	/^@inline _after_colon(dim::Any, tail...) =  _after_colon(tail...)$/;"	f
_after_colon	base/reshapedarray.jl	/^@inline _after_colon(dim::Colon, tail...) = tail$/;"	f
_all	base/compiler/utilities.jl	/^function _all(@nospecialize(f), a)$/;"	f
_all	base/reduce.jl	/^function _all(f, itr, ::Colon)$/;"	f
_all	base/reducedim.jl	/^_all(a, ::Colon)                           = _all(identity, a, :)$/;"	f
_all_match_first	base/abstractarray.jl	/^function _all_match_first(f::F, inds, A, B...) where F<:Function$/;"	f
_allocres	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline function _allocres(shape::NTuple{1}, indextype, entrytype, maxnnz)$/;"	f
_allocres	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline function _allocres(shape::NTuple{2}, indextype, entrytype, maxnnz)$/;"	f
_alloftype	test/compiler/inference.jl	/^_alloftype(ofdesiredtype, accumulated) = ofdesiredtype, Base.front(accumulated)$/;"	f
_alloftype	test/compiler/inference.jl	/^function _alloftype(ofdesiredtype, accumulated, ::Tuple{}, others...)$/;"	f
_alloftype	test/compiler/inference.jl	/^function _alloftype(ofdesiredtype, accumulated, d, others...)$/;"	f
_alloftype	test/compiler/inference.jl	/^function _alloftype(ofdesiredtype::Tuple{Vararg{D}}, accumulated, d::Tuple{D,Vararg}, others...)/;"	f
_allowable_schemes	stdlib/Markdown/src/Common/inline.jl	/^const _allowable_schemes = Set(split("coap doi javascript aaa aaas about acap cap cid crid data /;"	v
_any	base/compiler/utilities.jl	/^function _any(@nospecialize(f), a)$/;"	f
_any	base/reduce.jl	/^function _any(f, itr, ::Colon)$/;"	f
_any	base/reducedim.jl	/^_any(a, ::Colon)                           = _any(identity, a, :)$/;"	f
_any_abs_eq	stdlib/SparseArrays/src/linalg.jl	/^    function _any_abs_eq(v,n::Int)$/;"	f
_any_colon	base/reshapedarray.jl	/^@inline _any_colon() = false$/;"	f
_any_colon	base/reshapedarray.jl	/^@inline _any_colon(dim::Any, tail...) = _any_colon(tail...)$/;"	f
_any_colon	base/reshapedarray.jl	/^@inline _any_colon(dim::Colon, tail...) = true$/;"	f
_append!	base/array.jl	/^function _append!(a, ::IteratorSize, iter)$/;"	f
_append!	base/array.jl	/^function _append!(a, ::Union{HasLength,HasShape}, iter)$/;"	f
_apply_inverse_ipiv_cols!	stdlib/LinearAlgebra/src/lu.jl	/^_apply_inverse_ipiv_cols!(A::LU, B::StridedVecOrMat) = _ipiv_cols!(A, length(A.ipiv) : -1 : 1, B/;"	f
_apply_inverse_ipiv_rows!	stdlib/LinearAlgebra/src/lu.jl	/^_apply_inverse_ipiv_rows!(A::LU, B::StridedVecOrMat) = _ipiv_rows!(A, length(A.ipiv) : -1 : 1, B/;"	f
_apply_ipiv_cols!	stdlib/LinearAlgebra/src/lu.jl	/^_apply_ipiv_cols!(A::LU, B::StridedVecOrMat) = _ipiv_cols!(A, 1 : length(A.ipiv), B)$/;"	f
_apply_ipiv_rows!	stdlib/LinearAlgebra/src/lu.jl	/^_apply_ipiv_rows!(A::LU, B::StridedVecOrMat) = _ipiv_rows!(A, 1 : length(A.ipiv), B)$/;"	f
_applyn	src/flisp/flisp.c	/^static value_t _applyn(fl_context_t *fl_ctx, uint32_t n)$/;"	f	typeref:typename:value_t	file:
_approx_cbrt	base/special/cbrt.jl	/^@inline function _approx_cbrt(x::T) where {T<:Union{Float32,Float64}}$/;"	f
_approx_iter_type	base/iterators.jl	/^    function _approx_iter_type(itrT::Type, vstate::Type)$/;"	f
_aresameshape	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _aresameshape(A) = true$/;"	f
_aresameshape	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _aresameshape(A, B) = size(A) == size(B)$/;"	f
_aresameshape	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _aresameshape(A, B, Cs...) = _aresameshape(A, B) ? _aresameshape(B, Cs...) : false$/;"	f
_args_and_call	stdlib/Test/src/Test.jl	/^_args_and_call(args...; kwargs...) = (args[1:end-1], kwargs, args[end](args[1:end-1]...; kwargs./;"	f
_armv7a	src/processor_arm.cpp	/^constexpr auto _armv7a = get_feature_masks(v7, aclass);$/;"	v	namespace:ARM::Feature	typeref:typename:auto
_armv7m	src/processor_arm.cpp	/^constexpr auto _armv7m = get_feature_masks(v7, mclass, hwdiv);$/;"	v	namespace:ARM::Feature	typeref:typename:auto
_armv7r	src/processor_arm.cpp	/^constexpr auto _armv7r = get_feature_masks(v7, rclass);$/;"	v	namespace:ARM::Feature	typeref:typename:auto
_armv8a	src/processor_arm.cpp	/^constexpr auto _armv8a = get_feature_masks(v7, v8, aclass, neon, vfp3, vfp4, d32,$/;"	v	namespace:ARM::Feature	typeref:typename:auto
_armv8m	src/processor_arm.cpp	/^constexpr auto _armv8m = get_feature_masks(v7, v8, mclass, hwdiv);$/;"	v	namespace:ARM::Feature	typeref:typename:auto
_armv8r	src/processor_arm.cpp	/^constexpr auto _armv8r = get_feature_masks(v7, v8, rclass, neon, vfp3, vfp4, d32,$/;"	v	namespace:ARM::Feature	typeref:typename:auto
_array_equiv	test/arrayops.jl	/^    _array_equiv(a,b) = eltype(a) == eltype(b) && a == b$/;"	f
_array_for	base/array.jl	/^_array_for(::Type{T}, itr, ::HasLength) where {T} = Vector{T}(undef, Int(length(itr)::Integer))$/;"	f
_array_for	base/array.jl	/^_array_for(::Type{T}, itr, ::HasShape{N}) where {T,N} = similar(Array{T,N}, axes(itr))$/;"	f
_atexit	base/initdefs.jl	/^function _atexit()$/;"	f
_atreplinit	base/client.jl	/^_atreplinit(repl) = invokelatest(__atreplinit, repl)$/;"	f
_attach	test/meta.jl	/^_attach(val, ex) = pushmeta!(ex, :test, val)$/;"	f
_atthreads_with_error	test/threads_exec.jl	/^function _atthreads_with_error(a, err)$/;"	f
_axes	base/broadcast.jl	/^@inline _axes(bc::Broadcasted, ::Nothing)  = combine_axes(bc.args...)$/;"	f
_axes	base/broadcast.jl	/^_axes(::Broadcasted, axes::Tuple) = axes$/;"	f
_axes	base/broadcast.jl	/^_axes(bc::Broadcasted{<:AbstractArrayStyle{0}}, ::Nothing) = ()$/;"	f
_backref_id	src/staticdata.c	/^static uintptr_t _backref_id(jl_serializer_state *s, jl_value_t *v) JL_NOTSAFEPOINT$/;"	f	typeref:typename:uintptr_t	file:
_base	base/intfuncs.jl	/^function _base(b::Integer, x::Integer, pad::Integer, neg::Bool)$/;"	f
_bcast_binary_map	stdlib/SparseArrays/src/sparsevector.jl	/^_bcast_binary_map(f, x, y, mode) = length(x) == length(y) ? _binarymap(f, x, y, mode) : HigherOr/;"	f
_bcs	base/broadcast.jl	/^_bcs(::Tuple{}, ::Tuple{}) = ()$/;"	f
_bcs	base/broadcast.jl	/^_bcs(::Tuple{}, newshape::Tuple) = (newshape[1], _bcs((), tail(newshape))...)$/;"	f
_bcs	base/broadcast.jl	/^_bcs(shape::Tuple, ::Tuple{}) = (shape[1], _bcs(tail(shape), ())...)$/;"	f
_bcs	base/broadcast.jl	/^function _bcs(shape::Tuple, newshape::Tuple)$/;"	f
_bcs1	base/broadcast.jl	/^_bcs1(a, b) = _bcsm(b, a) ? axistype(b, a) : (_bcsm(a, b) ? axistype(a, b) : throw(DimensionMism/;"	f
_bcs1	base/broadcast.jl	/^_bcs1(a, b::Integer) = _bcs1(b, a)$/;"	f
_bcs1	base/broadcast.jl	/^_bcs1(a::Integer, b) = a == 1 ? b : (first(b) == 1 && last(b) == a ? b : throw(DimensionMismatch/;"	f
_bcs1	base/broadcast.jl	/^_bcs1(a::Integer, b::Integer) = a == 1 ? b : (b == 1 ? a : (a == b ? a : throw(DimensionMismatch/;"	f
_bcsm	base/broadcast.jl	/^_bcsm(a, b) = a == b || length(b) == 1$/;"	f
_bcsm	base/broadcast.jl	/^_bcsm(a, b::Number) = b == 1$/;"	f
_bcsm	base/broadcast.jl	/^_bcsm(a::Number, b::Number) = a == b || b == 1$/;"	f
_before_colon	base/reshapedarray.jl	/^@inline _before_colon(dim::Any, tail...) = (dim, _before_colon(tail...)...)$/;"	f
_before_colon	base/reshapedarray.jl	/^@inline _before_colon(dim::Colon, tail...) = ()$/;"	f
_bigval_t	src/gc.h	/^JL_EXTENSION typedef struct _bigval_t {$/;"	s
_binarymap	stdlib/SparseArrays/src/sparsevector.jl	/^function _binarymap(f::Function,$/;"	f
_binarymap_mode_0!	stdlib/SparseArrays/src/sparsevector.jl	/^function _binarymap_mode_0!(f::Function, mx::Int, my::Int,$/;"	f
_binarymap_mode_1!	stdlib/SparseArrays/src/sparsevector.jl	/^function _binarymap_mode_1!(f::Function, mx::Int, my::Int,$/;"	f
_binarymap_mode_2!	stdlib/SparseArrays/src/sparsevector.jl	/^function _binarymap_mode_2!(f::Function, mx::Int, my::Int,$/;"	f
_bind	stdlib/Sockets/src/Sockets.jl	/^function _bind(sock::TCPServer, host::Union{IPv4, IPv6}, port::UInt16, flags::UInt32=UInt32(0))$/;"	f
_bind	stdlib/Sockets/src/Sockets.jl	/^function _bind(sock::UDPSocket, host::Union{IPv4, IPv6}, port::UInt16, flags::UInt32=UInt32(0))$/;"	f
_binrepr	base/multimedia.jl	/^_binrepr(m::MIME, x, context) = __binrepr(m, x, context)$/;"	f
_binrepr	base/multimedia.jl	/^_binrepr(m::MIME, x::Vector{UInt8}, context) = x$/;"	f
_binstringmime	stdlib/Base64/src/Base64.jl	/^_binstringmime(m::MIME, x, context) = Base64.base64encode(show, m, x; context=context)$/;"	f
_binstringmime	stdlib/Base64/src/Base64.jl	/^_binstringmime(m::MIME, x::Vector{UInt8}, context) = Base64.base64encode(write, x; context=conte/;"	f
_bitreshape	base/bitarray.jl	/^function _bitreshape(B::BitArray, dims::NTuple{N,Int}) where N$/;"	f
_bits_findnext	base/bitset.jl	/^function _bits_findnext(b::Bits, start::Int)$/;"	f
_bits_findprev	base/bitset.jl	/^function _bits_findprev(b::Bits, start::Int)$/;"	f
_bits_getindex	base/bitset.jl	/^function _bits_getindex(b::Bits, n::Int, offset::Int)$/;"	f
_blsr	base/bitarray.jl	/^@inline _blsr(x)= x & (x-1) #zeros the last set bit. Has native instruction on many archs. neede/;"	f
_bound_vararg_specificity_1	test/specificity.jl	/^_bound_vararg_specificity_1(::Type{Array{T,1}}, d::Int) where {T} = 1$/;"	f
_bound_vararg_specificity_1	test/specificity.jl	/^_bound_vararg_specificity_1(::Type{Array{T,N}}, d::Vararg{Int, N}) where {T,N} = 0$/;"	f
_boxed_special	src/cgutils.cpp	/^static Value *_boxed_special(jl_codectx_t &ctx, const jl_cgval_t &vinfo, Type *t)$/;"	f	typeref:typename:Value *	file:
_broadcast_getindex	base/broadcast.jl	/^Base.@propagate_inbounds _broadcast_getindex(::Ref{Type{T}}, I) where {T} = T$/;"	f
_broadcast_getindex	base/broadcast.jl	/^Base.@propagate_inbounds _broadcast_getindex(A, I) = A[newindex(A, I)]$/;"	f
_broadcast_getindex	base/broadcast.jl	/^Base.@propagate_inbounds _broadcast_getindex(A::Tuple, I) = A[I[1]]$/;"	f
_broadcast_getindex	base/broadcast.jl	/^Base.@propagate_inbounds _broadcast_getindex(A::Tuple{Any}, I) = A[1]$/;"	f
_broadcast_getindex	base/broadcast.jl	/^Base.@propagate_inbounds _broadcast_getindex(A::Union{Ref,AbstractArray{<:Any,0},Number}, I) = A/;"	f
_broadcast_getindex	base/broadcast.jl	/^Base.@propagate_inbounds _broadcast_getindex(b::Extruded, i) = b.x[newindex(i, b.keeps, b.defaul/;"	f
_broadcast_getindex	base/broadcast.jl	/^Base.@propagate_inbounds function _broadcast_getindex(bc::Broadcasted{<:Any,<:Any,<:Any,<:Any}, /;"	f
_broadcast_getindex	base/broadcast.jl	/^Base.@propagate_inbounds function _broadcast_getindex(bc::Broadcasted{<:Any,<:Any,<:Any,<:Tuple{/;"	f
_broadcast_getindex_eltype	base/broadcast.jl	/^_broadcast_getindex_eltype(A) = eltype(A)  # Tuple, Array, etc.$/;"	f
_broadcast_getindex_eltype	base/broadcast.jl	/^_broadcast_getindex_eltype(bc::Broadcasted) = Base._return_type(bc.f, eltypes(bc.args))$/;"	f
_broadcast_getindex_evalf	base/broadcast.jl	/^@inline _broadcast_getindex_evalf(f::Tf, args::Vararg{Any,N}) where {Tf,N} = f(args...)  # not p/;"	f
_broadcast_notzeropres!	stdlib/SparseArrays/src/higherorderfns.jl	/^function _broadcast_notzeropres!(f::Tf, fillvalue, C::SparseVecOrMat, A::SparseVecOrMat) where T/;"	f
_broadcast_notzeropres!	stdlib/SparseArrays/src/higherorderfns.jl	/^function _broadcast_notzeropres!(f::Tf, fillvalue, C::SparseVecOrMat, A::SparseVecOrMat, B::Spar/;"	f
_broadcast_notzeropres!	stdlib/SparseArrays/src/higherorderfns.jl	/^function _broadcast_notzeropres!(f::Tf, fillvalue, C::SparseVecOrMat, As::Vararg{SparseVecOrMat,/;"	f
_broadcast_zeropres!	stdlib/SparseArrays/src/higherorderfns.jl	/^function _broadcast_zeropres!(f::Tf, C::SparseVecOrMat, A::SparseVecOrMat) where Tf$/;"	f
_broadcast_zeropres!	stdlib/SparseArrays/src/higherorderfns.jl	/^function _broadcast_zeropres!(f::Tf, C::SparseVecOrMat, A::SparseVecOrMat, B::SparseVecOrMat) wh/;"	f
_broadcast_zeropres!	stdlib/SparseArrays/src/higherorderfns.jl	/^function _broadcast_zeropres!(f::Tf, C::SparseVecOrMat, As::Vararg{SparseVecOrMat,N}) where {Tf,/;"	f
_buf_init	src/support/ios.c	/^static void _buf_init(ios_t *s, bufmode_t bm)$/;"	f	typeref:typename:void	file:
_buf_realloc	src/support/ios.c	/^static char *_buf_realloc(ios_t *s, size_t sz)$/;"	f	typeref:typename:char *	file:
_bufcmp	base/secretbuffer.jl	/^@noinline function _bufcmp(data1::Vector{UInt8}, data2::Vector{UInt8}, sz::Int)$/;"	f
_builtin_nothrow	base/compiler/tfuncs.jl	/^function _builtin_nothrow(@nospecialize(f), argtypes::Array{Any,1}, @nospecialize(rt))$/;"	f
_c_locale	src/support/strptime.c	/^static const _TimeLocale _c_locale = {$/;"	v	typeref:typename:const _TimeLocale	file:
_calculate_buffer_size!	base/mpfr.jl	/^function _calculate_buffer_size!(buf, fmt, x::BigFloat)$/;"	f
_call_rttf_test	test/compiler/inference.jl	/^_call_rttf_test() = Core.Compiler.return_type(_rttf_test, Tuple{Any})$/;"	f
_capturescalars	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline function _capturescalars()$/;"	f
_capturescalars	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline function _capturescalars(arg) # this definition is just an optimization (to bottom out t/;"	f
_capturescalars	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline function _capturescalars(arg, mixedargs...)$/;"	f
_cat	base/abstractarray.jl	/^_cat(catdim::Integer) = Vector{Any}()$/;"	f
_cat	base/abstractarray.jl	/^_cat(catdims, A::AbstractArray{T}...) where {T} = cat_t(T, A...; dims=catdims)$/;"	f
_cat	base/abstractarray.jl	/^_cat(dims, X...) = cat_t(promote_eltypeof(X...), X...; dims=dims)$/;"	f
_cat	base/array.jl	/^_cat(n::Integer, x::Integer...) = reshape([x...], (ntuple(x->1, n-1)..., length(x)))$/;"	f
_cat	base/bitarray.jl	/^function _cat(dims::Integer, X::Union{BitArray, Bool}...)$/;"	f
_cat_t	base/abstractarray.jl	/^@inline function _cat_t(dims, T::Type, X...)$/;"	f
_check0	base/bitset.jl	/^function _check0(a::Vector{UInt64}, b::Int, e::Int)$/;"	f
_check_bitarray_consistency	stdlib/Test/src/Test.jl	/^function _check_bitarray_consistency(B::BitArray{N}) where N$/;"	f
_check_bitset_bounds	base/bitset.jl	/^@inline _check_bitset_bounds(n) =$/;"	f
_check_bitset_bounds	base/bitset.jl	/^@inline _check_bitset_bounds(n::Int) = n$/;"	f
_check_testset	stdlib/Test/src/Test.jl	/^function _check_testset(testsettype, testsetname)$/;"	f
_checkargs_permutationsvalid_permute!	stdlib/SparseArrays/src/sparsematrix.jl	/^function _checkargs_permutationsvalid_permute!($/;"	f
_checkargs_sourcecompatdest_permute!	stdlib/SparseArrays/src/sparsematrix.jl	/^function _checkargs_sourcecompatdest_permute!(A::AbstractSparseMatrixCSC{Tv,Ti},$/;"	f
_checkargs_sourcecompatperms_permute!	stdlib/SparseArrays/src/sparsematrix.jl	/^function _checkargs_sourcecompatperms_permute!(A::AbstractSparseMatrixCSC,$/;"	f
_checkargs_sourcecompatworkcolptr_permute!	stdlib/SparseArrays/src/sparsematrix.jl	/^function _checkargs_sourcecompatworkcolptr_permute!(A::AbstractSparseMatrixCSC{Tv,Ti},$/;"	f
_checkargs_sourcecompatworkmat_permute!	stdlib/SparseArrays/src/sparsematrix.jl	/^function _checkargs_sourcecompatworkmat_permute!(A::AbstractSparseMatrixCSC{Tv,Ti},$/;"	f
_checked_maxnnzbcres	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _checked_maxnnzbcres(shape::NTuple{1}, As...) = shape[1] != 0 ? _unchecked_maxnnzbcres(s/;"	f
_checked_maxnnzbcres	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _checked_maxnnzbcres(shape::NTuple{2}, As...) = shape[1] != 0 && shape[2] != 0 ? _unchec/;"	f
_checksameshape	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _checksameshape(As...) = _aresameshape(As...) || throw(DimensionMismatch("argument shape/;"	f
_chkstride1	stdlib/LinearAlgebra/src/LinearAlgebra.jl	/^@inline _chkstride1(ok::Bool, A, B...) = _chkstride1(ok & (stride1(A) == 1), B...)$/;"	f
_chkstride1	stdlib/LinearAlgebra/src/LinearAlgebra.jl	/^@noinline _chkstride1(ok::Bool) = ok || error("matrix does not have contiguous columns")$/;"	f
_chol!	stdlib/LinearAlgebra/src/cholesky.jl	/^function _chol!(A::AbstractMatrix, ::Type{LowerTriangular})$/;"	f
_chol!	stdlib/LinearAlgebra/src/cholesky.jl	/^function _chol!(A::AbstractMatrix, ::Type{UpperTriangular})$/;"	f
_chol!	stdlib/LinearAlgebra/src/cholesky.jl	/^function _chol!(A::StridedMatrix)$/;"	f
_chol!	stdlib/LinearAlgebra/src/cholesky.jl	/^function _chol!(A::StridedMatrix{<:BlasFloat}, ::Type{LowerTriangular})$/;"	f
_chol!	stdlib/LinearAlgebra/src/cholesky.jl	/^function _chol!(A::StridedMatrix{<:BlasFloat}, ::Type{UpperTriangular})$/;"	f
_chol!	stdlib/LinearAlgebra/src/cholesky.jl	/^function _chol!(x::Number, uplo)$/;"	f
_chrinstr	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^_chrinstr(sbuff::String, chr::UInt8, startpos::Int, endpos::Int) =$/;"	f
_circcopy!	base/multidimensional.jl	/^@inline function _circcopy!(dest, rdest, indsdest::Tuple{AbstractUnitRange,Vararg{Any}},$/;"	f
_circcopy!	base/multidimensional.jl	/^function _circcopy!(dest, rdest, indsdest, src, rsrc, indssrc)$/;"	f
_circshift!	base/multidimensional.jl	/^@inline function _circshift!(dest, rdest, src, rsrc,$/;"	f
_circshift!	base/multidimensional.jl	/^function _circshift!(dest, rdest, src, rsrc, inds, shiftamt)$/;"	f
_clear_input_area	stdlib/REPL/src/LineEdit.jl	/^function _clear_input_area(terminal, state::InputAreaState)$/;"	f
_cmp_	test/numbers.jl	/^    function _cmp_(x::Union{Int64,UInt64}, y::Float64)$/;"	f
_cnt_units	base/util.jl	/^const _cnt_units = ["", " k", " M", " G", " T", " P"]$/;"	v
_colboundind	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _colboundind(j, A) = colboundind(A, j)$/;"	f
_colboundind_all	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _colboundind_all(j, ::Tuple{}) = ()$/;"	f
_colboundind_all	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _colboundind_all(j, As) = ($/;"	f
_collect	base/array.jl	/^_collect(::Type{T}, itr, isz::HasLength) where {T} = copyto!(Vector{T}(undef, Int(length(itr)::I/;"	f
_collect	base/array.jl	/^_collect(::Type{T}, itr, isz::HasShape) where {T}  = copyto!(similar(Array{T}, axes(itr)), itr)$/;"	f
_collect	base/array.jl	/^_collect(c, itr, ::EltypeUnknown, isz::SizeUnknown) =$/;"	f
_collect	base/array.jl	/^_collect(cont, itr, ::HasEltype, isz::Union{HasLength,HasShape}) =$/;"	f
_collect	base/array.jl	/^function _collect(::Type{T}, itr, isz::SizeUnknown) where T$/;"	f
_collect	base/array.jl	/^function _collect(c, itr, ::EltypeUnknown, isz::Union{HasLength,HasShape})$/;"	f
_collect	base/array.jl	/^function _collect(cont, itr, ::HasEltype, isz::SizeUnknown)$/;"	f
_collect_indices	base/array.jl	/^_collect_indices(::Tuple{}, A) = copyto!(Array{eltype(A),0}(undef), A)$/;"	f
_collect_indices	base/array.jl	/^_collect_indices(indsA::Tuple{Vararg{OneTo}}, A) =$/;"	f
_collect_indices	base/array.jl	/^function _collect_indices(indsA, A)$/;"	f
_colon	base/range.jl	/^_colon(::Any, ::Any, start::T, step, stop::T) where {T} =$/;"	f
_colon	base/range.jl	/^_colon(::Ordered, ::Any, start::T, step, stop::T) where {T} = StepRange(start, step, stop)$/;"	f
_colon	base/range.jl	/^_colon(::Ordered, ::ArithmeticRounds, start::T, step, stop::T) where {T} =$/;"	f
_colon	base/range.jl	/^function _colon(start::T, step, stop::T) where T$/;"	f
_colstartind	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _colstartind(j, A) = colstartind(A, j)$/;"	f
_colstartind_all	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _colstartind_all(j, ::Tuple{}) = ()$/;"	f
_colstartind_all	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _colstartind_all(j, As) = ($/;"	f
_compile_all_deq	src/precompile.c	/^static void _compile_all_deq(jl_array_t *found)$/;"	f	typeref:typename:void	file:
_compile_all_tvar_union	src/precompile.c	/^static void _compile_all_tvar_union(jl_value_t *methsig)$/;"	f	typeref:typename:void	file:
_compile_all_union	src/precompile.c	/^static void _compile_all_union(jl_value_t *sig)$/;"	f	typeref:typename:void	file:
_compute_eltype	base/tuple.jl	/^function _compute_eltype(t::Type{<:Tuple})$/;"	f
_computecolptrs_halfperm!	stdlib/SparseArrays/src/sparsematrix.jl	/^function _computecolptrs_halfperm!(X::AbstractSparseMatrixCSC{Tv,Ti}, A::AbstractSparseMatrixCSC/;"	f
_computecolptrs_permute!	stdlib/SparseArrays/src/sparsematrix.jl	/^function _computecolptrs_permute!(X::AbstractSparseMatrixCSC{Tv,Ti},$/;"	f
_concrete_dependencies	base/loading.jl	/^const _concrete_dependencies = Pair{PkgId,UInt64}[] # these dependency versions are "set in ston/;"	v
_cond1Inf	stdlib/LinearAlgebra/src/dense.jl	/^_cond1Inf(A::AbstractMatrix, p::Real)             = opnorm(A, p)*opnorm(inv(A), p)$/;"	f
_cond1Inf	stdlib/LinearAlgebra/src/dense.jl	/^_cond1Inf(A::StridedMatrix{<:BlasFloat}, p::Real) = _cond1Inf(lu(A), p, opnorm(A, p))$/;"	f
_cond1Inf	stdlib/LinearAlgebra/src/lu.jl	/^function _cond1Inf(A::LU{<:BlasFloat,<:StridedMatrix}, p::Number, normA::Real)$/;"	f
_conj	stdlib/Statistics/src/Statistics.jl	/^_conj(x::AbstractArray) = conj(x)$/;"	f
_conj	stdlib/Statistics/src/Statistics.jl	/^_conj(x::AbstractArray{<:Real}) = x$/;"	f
_const_sizeof	base/compiler/tfuncs.jl	/^function _const_sizeof(@nospecialize(x))$/;"	f
_convertSRL	base/twiceprecision.jl	/^function _convertSRL(::Type{StepRangeLen{T,R,S}}, r::AbstractRange{<:Integer}) where {T,R,S}$/;"	f
_convertSRL	base/twiceprecision.jl	/^function _convertSRL(::Type{StepRangeLen{T,R,S}}, r::AbstractRange{U}) where {T,R,S,U}$/;"	f
_convertSRL	base/twiceprecision.jl	/^function _convertSRL(::Type{StepRangeLen{T,R,S}}, r::StepRangeLen{<:Integer}) where {T,R,S}$/;"	f
_convert_rounding	base/rounding.jl	/^_convert_rounding(::Type{T}, x::Real, r::RoundingMode{:Nearest}) where {T<:AbstractFloat} = conv/;"	f
_convert_rounding	base/rounding.jl	/^function _convert_rounding(::Type{T}, x::Real, r::RoundingMode{:Down}) where T<:AbstractFloat$/;"	f
_convert_rounding	base/rounding.jl	/^function _convert_rounding(::Type{T}, x::Real, r::RoundingMode{:ToZero}) where T<:AbstractFloat$/;"	f
_convert_rounding	base/rounding.jl	/^function _convert_rounding(::Type{T}, x::Real, r::RoundingMode{:Up}) where T<:AbstractFloat$/;"	f
_copy	stdlib/SparseArrays/src/higherorderfns.jl	/^_copy(f) = throw(MethodError(_copy, (f,)))  # avoid method ambiguity$/;"	f
_copy	stdlib/SparseArrays/src/higherorderfns.jl	/^_copy(f, args::AbstractSparseMatrixCSC...) = _shapecheckbc(f, args...)$/;"	f
_copy	stdlib/SparseArrays/src/higherorderfns.jl	/^_copy(f, args::SparseVecOrMat...) = _diffshape_broadcast(f, args...)$/;"	f
_copy	stdlib/SparseArrays/src/higherorderfns.jl	/^_copy(f, args::SparseVector...) = _shapecheckbc(f, args...)$/;"	f
_copy	stdlib/SparseArrays/src/higherorderfns.jl	/^_copy(f::typeof(*), x::SparseVectorUnion, y::AdjOrTransSparseVectorUnion) = _outer(x, y)$/;"	f
_copy	stdlib/SparseArrays/src/higherorderfns.jl	/^function _copy(f, args...)$/;"	f
_copy!	base/permuteddimsarray.jl	/^function _copy!(P::PermutedDimsArray{T,N,perm}, src) where {T,N,perm}$/;"	f
_copy!	stdlib/SuiteSparse/src/cholmod.jl	/^function _copy!(dest::AbstractArray, D::Dense)$/;"	f
_copy_oftype	base/set.jl	/^_copy_oftype(x, ::Type{T}) where {T} = copyto!(similar(x, T), x)$/;"	f
_copy_oftype	base/set.jl	/^_copy_oftype(x::AbstractArray{T}, ::Type{T}) where {T} = copy(x)$/;"	f
_copy_oftype	base/set.jl	/^_copy_oftype(x::AbstractDict, ::Type{T}) where {T} = merge!(empty(x, T), x)$/;"	f
_copy_oftype	base/set.jl	/^_copy_oftype(x::AbstractDict{K,V}, ::Type{Pair{K,V}}) where {K,V} = copy(x)$/;"	f
_copy_oftype	base/set.jl	/^_copy_oftype(x::AbstractSet, ::Type{T}) where {T} = union!(empty(x, T), x)$/;"	f
_copy_oftype	base/set.jl	/^_copy_oftype(x::AbstractSet{T}, ::Type{T}) where {T} = copy(x)$/;"	f
_copyto!	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline function _copyto!(f, dest, As::SparseVecOrMat...)$/;"	f
_copyto!	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline function _copyto!(f, dest, args...)$/;"	f
_cpow	base/complex.jl	/^_cpow(z, p) = _cpow(float(z), float(p))$/;"	f
_cpow	base/complex.jl	/^function _cpow(z::Union{T,Complex{T}}, p::Union{T,Complex{T}}) where {T<:AbstractFloat}$/;"	f
_cpu_summary	base/sysinfo.jl	/^function _cpu_summary(io::IO, cpu::AbstractVector{CPUinfo}, i, j)$/;"	f
_cpynansgn	base/mpfr.jl	/^_cpynansgn(x::AbstractFloat, y::BigFloat) = isnan(x) && signbit(x) != signbit(y) ? -x : x$/;"	f
_crc32c	base/iobuffer.jl	/^_crc32c(io::IOBuffer, crc::UInt32=0x00000000) = _crc32c(io, bytesavailable(io), crc)$/;"	f
_crc32c	base/iobuffer.jl	/^function _crc32c(io::IOBuffer, nb::Integer, crc::UInt32=0x00000000)$/;"	f
_crc32c	base/util.jl	/^_crc32c(a::Union{Array{UInt8},FastContiguousSubArray{UInt8,N,<:Array{UInt8}} where N}, crc::UInt/;"	f
_crc32c	base/util.jl	/^_crc32c(io::IO, crc::UInt32=0x00000000) = _crc32c(io, typemax(Int64), crc)$/;"	f
_crc32c	base/util.jl	/^_crc32c(io::IOStream, crc::UInt32=0x00000000) = _crc32c(io, filesize(io)-position(io), crc)$/;"	f
_crc32c	base/util.jl	/^_crc32c(s::String, crc::UInt32=0x00000000) = unsafe_crc32c(s, sizeof(s) % Csize_t, crc)$/;"	f
_crc32c	base/util.jl	/^_crc32c(uuid::UUID, crc::UInt32=0x00000000) =$/;"	f
_crc32c	base/util.jl	/^function _crc32c(io::IO, nb::Integer, crc::UInt32=0x00000000)$/;"	f
_cs	base/abstractarray.jl	/^_cs(d, a, b) = (a == b ? a : throw(DimensionMismatch($/;"	f
_cshp	base/abstractarray.jl	/^@inline _cshp(ndim::Int, dims, ::Tuple{}, nshape) =$/;"	f
_cshp	base/abstractarray.jl	/^@inline _cshp(ndim::Int, dims, shape, ::Tuple{}) =$/;"	f
_cshp	base/abstractarray.jl	/^@inline function _cshp(ndim::Int, ::Tuple{}, shape, ::Tuple{})$/;"	f
_cshp	base/abstractarray.jl	/^@inline function _cshp(ndim::Int, ::Tuple{}, shape, nshape)$/;"	f
_cshp	base/abstractarray.jl	/^@inline function _cshp(ndim::Int, dims, shape, nshape)$/;"	f
_cshp	base/abstractarray.jl	/^_cshp(ndim::Int, ::Tuple{}, ::Tuple{}, ::Tuple{}) = ()$/;"	f
_cshp	base/abstractarray.jl	/^_cshp(ndim::Int, ::Tuple{}, ::Tuple{}, nshape) = nshape$/;"	f
_cshp	base/abstractarray.jl	/^_cshp(ndim::Int, dims, ::Tuple{}, ::Tuple{}) = ntuple(b -> 1, Val(length(dims)))$/;"	f
_cumsum!	base/accumulate.jl	/^function _cumsum!(out::AbstractArray, v, dim, ::ArithmeticUnknown)$/;"	f
_cumsum!	base/accumulate.jl	/^function _cumsum!(out::AbstractArray{T}, v, dim, ::ArithmeticRounds) where {T}$/;"	f
_cumsum!	base/accumulate.jl	/^function _cumsum!(out::AbstractArray{T}, v, dim, ::ArithmeticStyle) where {T}$/;"	f
_current_locale	src/support/strptime.c	/^#define _current_locale(/;"	d	file:
_cut_B	stdlib/LinearAlgebra/src/qr.jl	/^_cut_B(X::AbstractMatrix, r::UnitRange) = size(X, 1) > length(r) ? X[r,:] : X$/;"	f
_cut_B	stdlib/LinearAlgebra/src/qr.jl	/^_cut_B(x::AbstractVector, r::UnitRange) = length(x)  > length(r) ? x[r]   : x$/;"	f
_d	test/dict.jl	/^_d = Dict("a"=>0)$/;"	v
_dash	stdlib/Markdown/src/GitHub/table.jl	/^_dash(width, align) =$/;"	f
_deepcopy_array_t	base/deepcopy.jl	/^function _deepcopy_array_t(@nospecialize(x), T, stackdict::IdDict)$/;"	f
_defargforcol	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _defargforcol(j, isempty, expandsvert, k, A) =$/;"	f
_defargforcol_all	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _defargforcol_all(j, ::Tuple{}, ::Tuple{}, ::Tuple{}, ::Tuple{}) = ()$/;"	f
_defargforcol_all	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _defargforcol_all(j, isemptys, expandsverts, ks, As) = ($/;"	f
_default_bit_splice	base/bitarray.jl	/^const _default_bit_splice = BitVector()$/;"	v
_default_splice	base/array.jl	/^const _default_splice = []$/;"	v
_default_tol	stdlib/SuiteSparse/src/spqr.jl	/^_default_tol(A::SparseMatrixCSC) =$/;"	f
_default_worker_pool	stdlib/Distributed/src/workerpool.jl	/^const _default_worker_pool = Ref{Union{WorkerPool, Nothing}}(nothing)$/;"	v
_define_range_op	base/range.jl	/^function _define_range_op(@nospecialize f)$/;"	f
_delegate	contrib/mac/frameworkapp/ExecSandbox/ExecSandbox.m	/^  ExecSandbox *__weak _delegate;$/;"	E	interface:JuliaTask
_delete!	base/dict.jl	/^function _delete!(h::Dict{K,V}, index) where {K,V}$/;"	f
_deleteat!	base/array.jl	/^_deleteat!(a::Vector, i::Integer, delta::Integer) =$/;"	f
_deleteat!	base/array.jl	/^function _deleteat!(a::Vector, inds)$/;"	f
_deleteat!	base/bitarray.jl	/^function _deleteat!(B::BitVector, i::Integer)$/;"	f
_deletebeg!	base/array.jl	/^_deletebeg!(a::Vector, delta::Integer) =$/;"	f
_deleteend!	base/array.jl	/^_deleteend!(a::Vector, delta::Integer) =$/;"	f
_dense2indval!	stdlib/SparseArrays/src/sparsevector.jl	/^function _dense2indval!(nzind::Vector{Ti}, nzval::Vector{Tv}, s::AbstractArray{Tv}) where {Tv,Ti/;"	f
_dense2sparsevec	stdlib/SparseArrays/src/sparsevector.jl	/^function _dense2sparsevec(s::AbstractArray{Tv}, initcap::Ti) where {Tv,Ti}$/;"	f
_densecoloffsets	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _densecoloffsets(A::AbstractSparseMatrixCSC) = 0:size(A, 1):(size(A, 1)*(size(A, 2) - 1)/;"	f
_densecoloffsets	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _densecoloffsets(A::SparseVector) = 0$/;"	f
_densennz	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _densennz(shape::NTuple{1}) = shape[1]$/;"	f
_densennz	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _densennz(shape::NTuple{2}) = shape[1] * shape[2]$/;"	f
_densestructure!	stdlib/SparseArrays/src/higherorderfns.jl	/^function _densestructure!(A::AbstractSparseMatrixCSC)$/;"	f
_densestructure!	stdlib/SparseArrays/src/higherorderfns.jl	/^function _densestructure!(A::SparseVector)$/;"	f
_densifyfirstnztoend!	stdlib/SparseArrays/src/sparsevector.jl	/^function _densifyfirstnztoend!(x::SparseVector)$/;"	f
_densifystarttolastnz!	stdlib/SparseArrays/src/sparsevector.jl	/^function _densifystarttolastnz!(x::SparseVector)$/;"	f
_det_tau	stdlib/LinearAlgebra/src/qr.jl	/^_det_tau(τs) = prod(τ -> iszero(τ) ? one(τ) : -sign(τ)^2, τs)$/;"	f
_det_tau	stdlib/LinearAlgebra/src/qr.jl	/^_det_tau(τs::AbstractVector{<:Real}) =$/;"	f
_diag	stdlib/LinearAlgebra/src/bidiag.jl	/^_diag(A::SymTridiagonal, k) = k == 0 ? A.dv : A.ev$/;"	f
_diag	stdlib/LinearAlgebra/src/bidiag.jl	/^_diag(A::Tridiagonal, k) = k == -1 ? A.dl : k == 0 ? A.d : A.du$/;"	f
_diag	stdlib/LinearAlgebra/src/bidiag.jl	/^function _diag(A::Bidiagonal, k)$/;"	f
_diagm	stdlib/LinearAlgebra/src/dense.jl	/^function _diagm(size, kv::Pair{<:Integer,<:AbstractVector}...)$/;"	f
_diagview	stdlib/LinearAlgebra/src/qr.jl	/^_diagview(A) = @view A[diagind(A)]$/;"	f
_diff_length	base/iterators.jl	/^_diff_length(a, b, ::IsInfinite, ::IsInfinite) = 0$/;"	f
_diff_length	base/iterators.jl	/^_diff_length(a, b, ::IsInfinite, B) = length(a) # inherit behaviour, error$/;"	f
_diff_length	base/iterators.jl	/^_diff_length(a, b, A, ::IsInfinite) = 0$/;"	f
_diff_length	base/iterators.jl	/^_diff_length(a, b, A, B) = max(length(a)-length(b), 0)$/;"	f
_diffshape_broadcast	stdlib/SparseArrays/src/higherorderfns.jl	/^function _diffshape_broadcast(f::Tf, A::SparseVecOrMat, Bs::Vararg{SparseVecOrMat,N}) where {Tf,/;"	f
_directives	stdlib/Dates/src/parse.jl	/^_directives(::Type{DateFormat{S,T}}) where {S,T} = T.parameters$/;"	f
_distributevals_halfperm!	stdlib/SparseArrays/src/sparsematrix.jl	/^@noinline function _distributevals_halfperm!(X::AbstractSparseMatrixCSC{Tv,Ti},$/;"	f
_div	base/abstractarray.jl	/^_div(ind, d::Integer) = div(ind, d), 1, d$/;"	f
_div	base/abstractarray.jl	/^_div(ind, r::AbstractUnitRange) = (d = unsafe_length(r); (div(ind, d), first(r), d))$/;"	f
_div64	base/bitarray.jl	/^@inline _div64(l) = l >> 6$/;"	f
_docstr	base/docs/Docs.jl	/^_docstr(doc::DocStr, data) = (doc.data = merge(data, doc.data); doc)$/;"	f
_docstr	base/docs/Docs.jl	/^_docstr(object,                 data) = DocStr(Core.svec(),     object, data)$/;"	f
_docstr	base/docs/Docs.jl	/^_docstr(str::AbstractString,    data) = DocStr(Core.svec(str), nothing, data)$/;"	f
_docstr	base/docs/Docs.jl	/^_docstr(vec::Core.SimpleVector, data) = DocStr(vec,            nothing, data)$/;"	f
_drop	base/compiler/ssair/domtree.jl	/^    _drop(xs::AbstractUnitRange, n::Integer) = (first(xs)+n):last(xs)$/;"	f
_dropdims	base/abstractarraymath.jl	/^_dropdims(A::AbstractArray, dim::Integer) = _dropdims(A, (Int(dim),))$/;"	f
_dropdims	base/abstractarraymath.jl	/^function _dropdims(A::AbstractArray, dims::Dims)$/;"	f
_dump_function	stdlib/InteractiveUtils/src/codeview.jl	/^function _dump_function(@nospecialize(f), @nospecialize(t), native::Bool, wrapper::Bool,$/;"	f
_dump_function_linfo	stdlib/InteractiveUtils/src/codeview.jl	/^function _dump_function_linfo(linfo::Core.MethodInstance, world::UInt, native::Bool, wrapper::Bo/;"	f
_duplicate	base/mpfr.jl	/^function _duplicate(x::BigFloat)$/;"	f
_eachindex	base/broadcast.jl	/^_eachindex(t::Tuple) = CartesianIndices(t)$/;"	f
_eachindex	base/broadcast.jl	/^_eachindex(t::Tuple{Any}) = t[1]$/;"	f
_eachmethod	src/gen_sysimg_symtab.jl	/^function _eachmethod(f, m::Module, visited, vmt)$/;"	f
_ectx_t	src/flisp/flisp.h	/^typedef struct _ectx_t {$/;"	s
_edit_indent	stdlib/REPL/src/LineEdit.jl	/^_edit_indent(buf::IOBuffer, b::Int, num::Int) =$/;"	f
_email_regex	stdlib/Markdown/src/Common/inline.jl	/^const _email_regex = r"^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-/;"	v
_empty_reduce_error	base/reduce.jl	/^_empty_reduce_error() = throw(ArgumentError("reducing over an empty collection is not allowed"))$/;"	f
_enonfatal	src/support/ios.c	/^static int _enonfatal(int err)$/;"	f	typeref:typename:int	file:
_eof_nolock	base/iostream.jl	/^_eof_nolock(s::IOStream) = ccall(:ios_eof_blocking, Cint, (Ptr{Cvoid},), s.ios) != 0$/;"	f
_eq	base/tuple.jl	/^_eq(t1::Tuple{}, t2::Tuple{}) = true$/;"	f
_eq	base/tuple.jl	/^function _eq(t1::Any16, t2::Any16)$/;"	f
_eq	base/tuple.jl	/^function _eq(t1::Tuple, t2::Tuple)$/;"	f
_eq_missing	base/tuple.jl	/^_eq_missing(t1::Tuple{}, t2::Tuple{}) = missing$/;"	f
_eq_missing	base/tuple.jl	/^function _eq_missing(t1::Tuple, t2::Tuple)$/;"	f
_equal_lispvalue_	src/flisp/equalhash.c	/^#define _equal_lispvalue_(/;"	d	file:
_equal_wchar_	src/flisp/julia_extensions.c	/^#define _equal_wchar_(/;"	d	file:
_execSandboxCnx	contrib/mac/frameworkapp/JuliaLauncher/AppDelegate.m	/^  NSXPCConnection *_Nonnull _execSandboxCnx;$/;"	E	interface:ExecSandboxController
_expandshorz	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _expandshorz(C, A) = numcols(A) != numcols(C)$/;"	f
_expandshorz_all	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _expandshorz_all(C, ::Tuple{}) = ()$/;"	f
_expandshorz_all	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _expandshorz_all(C, As) = (_expandshorz(C, first(As)), _expandshorz_all(C, tail(As))...)$/;"	f
_expandsvert	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _expandsvert(C, A) = numrows(A) != numrows(C)$/;"	f
_expandsvert_all	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _expandsvert_all(C, ::Tuple{}) = ()$/;"	f
_expandsvert_all	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _expandsvert_all(C, As) = (_expandsvert(C, first(As)), _expandsvert_all(C, tail(As))...)$/;"	f
_exponent	base/grisu/float.jl	/^function _exponent(d::T) where T<:AbstractFloat$/;"	f
_extrema_dims	base/multidimensional.jl	/^_extrema_dims(f, A::AbstractArray, ::Colon) = _extrema_itr(f, A)$/;"	f
_extrema_dims	base/multidimensional.jl	/^function _extrema_dims(f, A::AbstractArray, dims)$/;"	f
_extrema_itr	base/operators.jl	/^function _extrema_itr(f, itr)$/;"	f
_f25835	stdlib/Test/test/runtests.jl	/^_f25835(::Nothing) = ()$/;"	f
_f25835	stdlib/Test/test/runtests.jl	/^_f25835(x) = (x,)$/;"	f
_f_ifelse_isa_	test/compiler/inference.jl	/^@noinline _f_ifelse_isa_() = rand(Bool) ? 1 : nothing$/;"	f
_fact_table128	base/combinatorics.jl	/^const _fact_table128 = Vector{UInt128}(undef, 34)$/;"	v
_fact_table64	base/combinatorics.jl	/^const _fact_table64 = Vector{Int64}(undef, 20)$/;"	v
_false13183	test/compiler/inference.jl	/^_false13183 = false$/;"	v
_false30098	test/compiler/inference.jl	/^_false30098 = false$/;"	v
_fast	base/reduce.jl	/^_fast(::typeof(max),x,y) = max(x,y)$/;"	f
_fast	base/reduce.jl	/^_fast(::typeof(min),x,y) = min(x,y)$/;"	f
_fast	base/reduce.jl	/^function _fast(::typeof(max), x::AbstractFloat, y::AbstractFloat)$/;"	f
_fast	base/reduce.jl	/^function _fast(::typeof(min),x::AbstractFloat, y::AbstractFloat)$/;"	f
_fd	base/stream.jl	/^_fd(x::IOStream) = RawFD(fd(x))$/;"	f
_fd	base/stream.jl	/^_fd(x::Union{OS_HANDLE, RawFD}) = x$/;"	f
_fd	base/stream.jl	/^function _fd(x::Union{LibuvStream, LibuvServer})$/;"	f
_feature_mask_and	src/processor.cpp	/^_feature_mask_and(seq<I...>, const FeatureList<n> &a, const FeatureList<n> &b)$/;"	f	namespace:__anon839834ed0111	typeref:typename:FeatureList<n>	file:
_feature_mask_not	src/processor.cpp	/^_feature_mask_not(seq<I...>, const FeatureList<n> &a)$/;"	f	namespace:__anon839834ed0111	typeref:typename:FeatureList<n>	file:
_feature_mask_or	src/processor.cpp	/^_feature_mask_or(seq<I...>, const FeatureList<n> &a, const FeatureList<n> &b)$/;"	f	namespace:__anon839834ed0111	typeref:typename:FeatureList<n>	file:
_fieldnames	base/reflection.jl	/^function _fieldnames(@nospecialize t)$/;"	f
_fieldtype_nothrow	base/compiler/tfuncs.jl	/^function _fieldtype_nothrow(@nospecialize(s), exact::Bool, name::Const)$/;"	f
_fieldtype_tfunc	base/compiler/tfuncs.jl	/^function _fieldtype_tfunc(@nospecialize(s), exact::Bool, @nospecialize(name))$/;"	f
_fill_buffer!	base/mpfr.jl	/^function _fill_buffer!(buf, fmt, x::BigFloat)$/;"	f
_fillnonzero!	stdlib/SparseArrays/src/sparsevector.jl	/^function _fillnonzero!(arr::AbstractSparseMatrixCSC{Tv, Ti}, val) where {Tv,Ti}$/;"	f
_fillnonzero!	stdlib/SparseArrays/src/sparsevector.jl	/^function _fillnonzero!(arr::SparseVector{Tv,Ti}, val) where {Tv,Ti}$/;"	f
_findin	base/array.jl	/^function _findin(a::Union{AbstractArray, Tuple}, b)$/;"	f
_findin	base/range.jl	/^function _findin(r::AbstractRange{<:Integer}, span::AbstractUnitRange{<:Integer})$/;"	f
_findmax	base/array.jl	/^function _findmax(a, ::Colon)$/;"	f
_findmax	base/reducedim.jl	/^function _findmax(A, region)$/;"	f
_findmin	base/array.jl	/^function _findmin(a, ::Colon)$/;"	f
_findmin	base/reducedim.jl	/^function _findmin(A, region)$/;"	f
_findnext_re	base/regex.jl	/^function _findnext_re(re::Regex, str::Union{String,SubString}, idx::Integer, match_data::Ptr{Cvo/;"	f
_findr	stdlib/SparseArrays/src/sparsematrix.jl	/^function _findr(op, A, region, Tv)$/;"	f
_findz	stdlib/SparseArrays/src/sparsematrix.jl	/^function _findz(A::AbstractSparseMatrixCSC{Tv,Ti}, rows=1:size(A, 1), cols=1:size(A, 2)) where {/;"	f
_finishempty!	stdlib/SparseArrays/src/higherorderfns.jl	/^_finishempty!(C::AbstractSparseMatrixCSC) = (fill!(getcolptr(C), 1); C)$/;"	f
_finishempty!	stdlib/SparseArrays/src/higherorderfns.jl	/^_finishempty!(C::SparseVector) = C$/;"	f
_firstbyteidx	base/strings/util.jl	/^_firstbyteidx(s::AbstractVector{UInt8}) = first(eachindex(s))$/;"	f
_firstbyteidx	base/strings/util.jl	/^_firstbyteidx(s::String) = 1$/;"	f
_firstreducedslice	base/reducedim.jl	/^@inline _firstreducedslice(::Tuple{}, a::Tuple) = (_firstslice(a[1]), _firstreducedslice((), tai/;"	f
_firstreducedslice	base/reducedim.jl	/^@inline _firstreducedslice(r::Tuple, a::Tuple) = (length(r[1])==1 ? _firstslice(a[1]) : r[1], _f/;"	f
_firstreducedslice	base/reducedim.jl	/^_firstreducedslice(::Tuple, ::Tuple{}) = ()$/;"	f
_firstreducedslice	base/reducedim.jl	/^_firstreducedslice(::Tuple{}, a::Tuple{}) = ()$/;"	f
_firstslice	base/reducedim.jl	/^_firstslice(i) = i[firstindex(i):firstindex(i)]$/;"	f
_firstslice	base/reducedim.jl	/^_firstslice(i::OneTo) = OneTo(1)$/;"	f
_firstslice	base/reducedim.jl	/^_firstslice(i::Slice) = Slice(_firstslice(i.indices))$/;"	f
_fl_context_t	src/flisp/flisp.h	/^struct _fl_context_t {$/;"	s
_fl_readstate_t	src/flisp/flisp.c	/^typedef struct _fl_readstate_t {$/;"	s	file:
_flatten	base/multidimensional.jl	/^    @inline _flatten() = ()$/;"	f
_flatten	base/multidimensional.jl	/^    @inline _flatten(i, I...)                 = (i, _flatten(I...)...)$/;"	f
_flatten	base/multidimensional.jl	/^    @inline _flatten(i::CartesianIndex, I...) = (i.I..., _flatten(I...)...)$/;"	f
_flatten_iteratorsize	base/iterators.jl	/^_flatten_iteratorsize(sz, ::EltypeUnknown, I) = SizeUnknown()$/;"	f
_flatten_iteratorsize	base/iterators.jl	/^_flatten_iteratorsize(sz, ::HasEltype, ::Type{Tuple{}}) = HasLength()$/;"	f
_flatten_iteratorsize	base/iterators.jl	/^_flatten_iteratorsize(sz, ::HasEltype, I) = flatten_iteratorsize(sz, eltype(I))$/;"	f
_flatteneltype	base/iterators.jl	/^_flatteneltype(I, ::HasEltype) = IteratorEltype(eltype(I))$/;"	f
_flatteneltype	base/iterators.jl	/^_flatteneltype(I, et) = EltypeUnknown()$/;"	f
_fltype_t	src/flisp/flisp.h	/^typedef struct _fltype_t {$/;"	s
_format_line	stdlib/SparseArrays/src/sparsematrix.jl	/^    function _format_line(r, col, padr, padc)$/;"	f
_free_pat_replacer	base/regex.jl	/^_free_pat_replacer(r::RegexAndMatchData) = PCRE.free_match_data(r.match_data)$/;"	f
_free_pat_replacer	base/strings/util.jl	/^_free_pat_replacer(x) = nothing$/;"	f
_frexp_exp	base/special/ldexp_exp.jl	/^function _frexp_exp(x::T) where T<:Union{Float32, Float64}$/;"	f
_front	base/tuple.jl	/^_front() = throw(ArgumentError("Cannot call front on an empty tuple."))$/;"	f
_front	base/tuple.jl	/^_front(v) = ()$/;"	f
_front	base/tuple.jl	/^function _front(v, t...)$/;"	f
_fusedupdate	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline function _fusedupdate(rowsentinel, activerow, row, k, stopk, A)$/;"	f
_fusedupdate_all	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _fusedupdate_all(rowsentinel, activerow, ::Tuple{}, ::Tuple{}, ::Tuple{}, ::Tuple{}) = (/;"	f
_fusedupdate_all	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline function _fusedupdate_all(rowsentinel, activerow, rows, ks, stopks, As)$/;"	f
_fusedupdatebc	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline function _fusedupdatebc(rowsentinel, activerow, row, defarg, k, stopk, A)$/;"	f
_fusedupdatebc_all	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _fusedupdatebc_all(rowsent, activerow, ::Tuple{}, ::Tuple{}, ::Tuple{}, ::Tuple{}, ::Tup/;"	f
_fusedupdatebc_all	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline function _fusedupdatebc_all(rowsentinel, activerow, rows, defargs, ks, stopks, As)$/;"	f
_g_f_with_inner	test/staged.jl	/^@generated function _g_f_with_inner(x)$/;"	f
_g_f_with_inner2	test/staged.jl	/^@generated function _g_f_with_inner2(x)$/;"	f
_g_ifelse_isa_	test/compiler/inference.jl	/^function _g_ifelse_isa_()$/;"	f
_gc_preserve_begin	base/essentials.jl	/^macro _gc_preserve_begin(arg1)$/;"	f
_gc_preserve_end	base/essentials.jl	/^macro _gc_preserve_end(token)$/;"	f
_generate_from_hint	src/gf.c	/^static void _generate_from_hint(jl_method_instance_t *mi, size_t world)$/;"	f	typeref:typename:void	file:
_generated_stub	test/compiler/inference.jl	/^function _generated_stub(gen::Symbol, args::Vector{Any}, params::Vector{Any}, line, file, expand/;"	f
_generic_matmatmul!	stdlib/LinearAlgebra/src/matmul.jl	/^function _generic_matmatmul!(C::AbstractVecOrMat{R}, tA, tB, A::AbstractVecOrMat{T}, B::Abstract/;"	f
_get_19433	test/misc.jl	/^    _get_19433(x::NTuple{1}) = (something(x[1]),)$/;"	f
_get_19433	test/misc.jl	/^    _get_19433(xs::Vararg) = (something(xs[1]), _get_19433(xs[2:end])...)$/;"	f
_get_cols	stdlib/SparseArrays/src/sparsematrix.jl	/^    function _get_cols(from, to)$/;"	f
_get_feature_mask	src/processor.cpp	/^_get_feature_mask(seq<I...>, Args... args)$/;"	f	namespace:__anon839834ed0111	typeref:typename:FeatureList<n>	file:
_get_host_cpu	src/processor_arm.cpp	/^static NOINLINE std::pair<uint32_t,FeatureList<feature_sz>> _get_host_cpu()$/;"	f	namespace:ARM	typeref:typename:NOINLINE std::pair<uint32_t,FeatureList<feature_sz>>	file:
_get_host_cpu	src/processor_x86.cpp	/^static NOINLINE std::pair<uint32_t,FeatureList<feature_sz>> _get_host_cpu(void)$/;"	f	namespace:X86	typeref:typename:NOINLINE std::pair<uint32_t,FeatureList<feature_sz>>	file:
_get_osfhandle	base/libc.jl	/^    _get_osfhandle(fd::RawFD) = ccall(:_get_osfhandle, WindowsRawSocket, (RawFD,), fd)$/;"	f
_get_osfhandle	base/libc.jl	/^    _get_osfhandle(fd::RawFD) = fd$/;"	f
_get_osfhandle	base/libc.jl	/^    _get_osfhandle(fd::WindowsRawSocket) = fd$/;"	f
_getenv	base/env.jl	/^    _getenv(var::AbstractString) = ccall(:getenv, Cstring, (Cstring,), var)$/;"	f
_getenvlen	base/env.jl	/^    _getenvlen(var::Vector{UInt16}) = ccall(:GetEnvironmentVariableW,stdcall,UInt32,(Ptr{UInt16}/;"	f
_getfield_with_string_	test/compiler/inference.jl	/^@eval _getfield_with_string_() = getfield($(1=>2), "")$/;"	f
_getindex	base/abstractarray.jl	/^_getindex(::IndexLinear, A::AbstractArray, i::Int) = (@_propagate_inbounds_meta; getindex(A, i))$/;"	f
_getindex	base/abstractarray.jl	/^_getindex(::IndexStyle, A::AbstractArray, I...) =$/;"	f
_getindex	base/abstractarray.jl	/^function _getindex(::IndexCartesian, A::AbstractArray, I::Vararg{Int,M}) where M$/;"	f
_getindex	base/abstractarray.jl	/^function _getindex(::IndexCartesian, A::AbstractArray{T,N}, I::Vararg{Int, N}) where {T,N}$/;"	f
_getindex	base/abstractarray.jl	/^function _getindex(::IndexLinear, A::AbstractArray, I::Vararg{Int,M}) where M$/;"	f
_getindex	base/broadcast.jl	/^Base.@propagate_inbounds _getindex(args::Tuple, I) = (_broadcast_getindex(args[1], I), _getindex/;"	f
_getindex	base/broadcast.jl	/^Base.@propagate_inbounds _getindex(args::Tuple{Any}, I) = (_broadcast_getindex(args[1], I),)$/;"	f
_getindex	base/broadcast.jl	/^Base.@propagate_inbounds _getindex(args::Tuple{}, I) = ()$/;"	f
_getindex	base/multidimensional.jl	/^@inline function _getindex(l::IndexStyle, A::AbstractArray, I::Union{Real, AbstractArray}...)$/;"	f
_getindex_callback	stdlib/LibGit2/src/tree.jl	/^    function _getindex_callback(root::String, entry::GitTreeEntry)::Cint$/;"	f
_getindex_hiprec	base/range.jl	/^function _getindex_hiprec(r::StepRangeLen, i::Integer)  # without rounding by T$/;"	f
_getindex_hiprec	base/twiceprecision.jl	/^function _getindex_hiprec(r::StepRangeLen{<:Any,<:TwicePrecision,<:TwicePrecision}, i::Integer)$/;"	f
_getindex_ra	base/reinterpretarray.jl	/^@inline @propagate_inbounds function _getindex_ra(a::ReinterpretArray{T,N,S}, i1::Int, tailinds:/;"	f
_getmeta	base/expr.jl	/^_getmeta(arg, sym, delete::Bool) = (false, [])$/;"	f
_getmeta	base/expr.jl	/^function _getmeta(body::Array{Any,1}, sym::Symbol, delete::Bool)$/;"	f
_getmeta	base/expr.jl	/^function _getmeta(body::Expr, sym::Symbol, delete::Bool)$/;"	f
_getnobs	stdlib/Statistics/src/Statistics.jl	/^_getnobs(x::AbstractMatrix, vardim::Int) = size(x, vardim)$/;"	f
_getnobs	stdlib/Statistics/src/Statistics.jl	/^_getnobs(x::AbstractVector, vardim::Int) = length(x)$/;"	f
_getnobs	stdlib/Statistics/src/Statistics.jl	/^function _getnobs(x::AbstractVecOrMat, y::AbstractVecOrMat, vardim::Int)$/;"	f
_global_logstate	base/logging.jl	/^_global_logstate = LogState(SimpleLogger(Core.stderr, CoreLogging.Info))$/;"	v
_groupedunique!	base/set.jl	/^function _groupedunique!(A::AbstractVector)$/;"	f
_grow!	base/array.jl	/^function _grow!(pred!, v::AbstractVector, itrs)$/;"	f
_grow_filter!	base/array.jl	/^_grow_filter!(seen) = _unique_filter!(∉, push!, seen)$/;"	f
_growat!	base/array.jl	/^_growat!(a::Vector, i::Integer, delta::Integer) =$/;"	f
_growbeg!	base/array.jl	/^_growbeg!(a::Vector, delta::Integer) =$/;"	f
_growbeg0!	base/bitset.jl	/^@inline function _growbeg0!(b::Bits, nchunks::Int)$/;"	f
_growend!	base/array.jl	/^_growend!(a::Vector, delta::Integer) =$/;"	f
_growend0!	base/bitset.jl	/^@inline function _growend0!(b::Bits, nchunks::Int)$/;"	f
_hasenv	base/env.jl	/^    _hasenv(s::AbstractString) = _getenv(s) != C_NULL$/;"	f
_hasenv	base/env.jl	/^    _hasenv(s::AbstractString) = _hasenv(cwstring(s))$/;"	f
_hasenv	base/env.jl	/^    _hasenv(s::Vector{UInt16}) = _getenvlen(s) != 0 || Libc.GetLastError() != ERROR_ENVVAR_NOT_F/;"	f
_hash_lispvalue_	src/flisp/equalhash.c	/^#define _hash_lispvalue_(/;"	d	file:
_hash_wchar_	src/flisp/julia_extensions.c	/^#define _hash_wchar_(/;"	d	file:
_header_underlines	stdlib/Markdown/src/render/terminal/render.jl	/^const _header_underlines = collect("≡=–-⋅ ")$/;"	v
_helpmode	stdlib/REPL/src/docview.jl	/^_helpmode(line::AbstractString) = _helpmode(stdout, line)$/;"	f
_helpmode	stdlib/REPL/src/docview.jl	/^function _helpmode(io::IO, line::AbstractString)$/;"	f
_hook_call	src/cgutils.cpp	/^static inline void _hook_call(jl_value_t *hook, std::array<jl_value_t*,N> args) {$/;"	f	typeref:typename:void	file:
_htmlescape_chars	stdlib/Markdown/src/render/html.jl	/^const _htmlescape_chars = Dict('<'=>"&lt;",   '>'=>"&gt;",$/;"	v
_improve_cbrt	base/special/cbrt.jl	/^@inline function _improve_cbrt(x::Float32, t::Float32)$/;"	f
_improve_cbrt	base/special/cbrt.jl	/^@inline function _improve_cbrt(x::Float64, t::Float64)$/;"	f
_in	base/abstractset.jl	/^_in(itr) = x -> x in itr$/;"	f
_in	base/multidimensional.jl	/^    @inline _in(b, i, start, stop) = _in(b & (start[1] <= i[1] <= stop[1]), tail(i), tail(start)/;"	f
_in	base/multidimensional.jl	/^    _in(b, ::Tuple{}, ::Tuple{}, ::Tuple{}) = b$/;"	f
_in_range	base/range.jl	/^function _in_range(x, r::AbstractRange)$/;"	f
_in_unit_range	base/range.jl	/^_in_unit_range(v::UnitRange, val, i::Integer) = i > 0 && val <= v.stop && val >= v.start$/;"	f
_include	base/Base.jl	/^    function _include(mod::Module, path)$/;"	f
_include1	base/Base.jl	/^function _include1(mod::Module, path)$/;"	f
_include_dependency	base/loading.jl	/^function _include_dependency(mod::Module, _path::AbstractString)$/;"	f
_include_from_serialized	base/loading.jl	/^function _include_from_serialized(path::String, depmods::Vector{Any})$/;"	f
_included_files	base/Base.jl	/^const _included_files = Array{Tuple{Module,String},1}()$/;"	v
_ind2sub	base/abstractarray.jl	/^_ind2sub(::Tuple{}, ind::Integer) = (@_inline_meta; ind == 1 ? () : throw(BoundsError()))$/;"	f
_ind2sub	base/abstractarray.jl	/^_ind2sub(dims::DimsInteger, ind::Integer) = (@_inline_meta; _ind2sub_recurse(dims, ind-1))$/;"	f
_ind2sub	base/abstractarray.jl	/^_ind2sub(inds::Indices, ind::Integer)     = (@_inline_meta; _ind2sub_recurse(inds, ind-1))$/;"	f
_ind2sub	base/abstractarray.jl	/^_ind2sub(inds::Indices{1}, ind::Integer) =$/;"	f
_ind2sub	base/abstractarray.jl	/^_ind2sub(inds::Tuple{OneTo}, ind::Integer) = (ind,)$/;"	f
_ind2sub	base/abstractarray.jl	/^function _ind2sub(A::AbstractArray, ind)$/;"	f
_ind2sub	base/abstractarray.jl	/^function _ind2sub(inds::Union{DimsInteger{N},Indices{N}}, ind::AbstractVector{<:Integer}) where /;"	f
_ind2sub_recurse	base/abstractarray.jl	/^_ind2sub_recurse(::Tuple{}, ind) = (ind+1,)$/;"	f
_ind2sub_recurse	base/abstractarray.jl	/^function _ind2sub_recurse(inds, ind)$/;"	f
_ind2sub_recurse	base/abstractarray.jl	/^function _ind2sub_recurse(indslast::NTuple{1}, ind)$/;"	f
_ind2sub_rs	base/reshapedarray.jl	/^@inline _ind2sub_rs(ax, ::Tuple{}, ind) = (ind + first(ax[end]),)$/;"	f
_ind2sub_rs	base/reshapedarray.jl	/^@inline function _ind2sub_rs(ax, strds, ind)$/;"	f
_indices	test/testhelpers/OffsetArrays.jl	/^@inline _indices(inds, offsets) = (Base.IdentityUnitRange(inds[1] .+ offsets[1]), _indices(tail(/;"	f
_indices	test/testhelpers/OffsetArrays.jl	/^_indices(::Tuple{}, ::Tuple{}) = ()$/;"	f
_indices_sub	base/subarray.jl	/^_indices_sub() = ()$/;"	f
_indices_sub	base/subarray.jl	/^_indices_sub(::Real, I...) = (@_inline_meta; _indices_sub(I...))$/;"	f
_indices_sub	base/subarray.jl	/^function _indices_sub(i1::AbstractArray, I...)$/;"	f
_indicesmightoverlap	base/multidimensional.jl	/^@inline _indicesmightoverlap(A::Tuple{AbstractArray, Vararg{Any}}, B::Tuple{Real, Vararg{Any}}) /;"	f
_indicesmightoverlap	base/multidimensional.jl	/^@inline _indicesmightoverlap(A::Tuple{Real, Vararg{Any}}, B::Tuple{AbstractArray, Vararg{Any}}) /;"	f
_indicesmightoverlap	base/multidimensional.jl	/^@inline _indicesmightoverlap(A::Tuple{Real, Vararg{Any}}, B::Tuple{Real, Vararg{Any}}) =$/;"	f
_indicesmightoverlap	base/multidimensional.jl	/^@inline function _indicesmightoverlap(A::Tuple{AbstractArray, Vararg{Any}}, B::Tuple{AbstractArr/;"	f
_indicesmightoverlap	base/multidimensional.jl	/^@inline function _indicesmightoverlap(A::Tuple{AbstractRange, Vararg{Any}}, B::Tuple{AbstractRan/;"	f
_indicesmightoverlap	base/multidimensional.jl	/^@inline function _indicesmightoverlap(A::Tuple{AbstractUnitRange, Vararg{Any}}, B::Tuple{Abstrac/;"	f
_indicesmightoverlap	base/multidimensional.jl	/^_indicesmightoverlap(A::Tuple, B::Tuple{}) = error("malformed subarray")$/;"	f
_indicesmightoverlap	base/multidimensional.jl	/^_indicesmightoverlap(A::Tuple{Any, Vararg{Any}}, B::Tuple{Any, Vararg{Any}}) = true$/;"	f
_indicesmightoverlap	base/multidimensional.jl	/^_indicesmightoverlap(A::Tuple{}, B::Tuple) = error("malformed subarray")$/;"	f
_indicesmightoverlap	base/multidimensional.jl	/^_indicesmightoverlap(A::Tuple{}, B::Tuple{}) = true$/;"	f
_indsstring	base/show.jl	/^_indsstring(i) = string(i)$/;"	f
_indsstring	base/show.jl	/^_indsstring(i::Union{IdentityUnitRange, Slice}) = string(i.indices)$/;"	f
_inferred	stdlib/Test/src/Test.jl	/^function _inferred(ex, mod, allow = :(Union{}))$/;"	f
_init_self_mem	src/cgmemmgr.cpp	/^static int _init_self_mem()$/;"	f	namespace:__anon06c686bc0111	typeref:typename:int	file:
_initrowforcol	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _initrowforcol(j, rowsentinel, isempty, expandsvert, k, A) =$/;"	f
_initrowforcol_all	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _initrowforcol_all(j, rowsentinel, ::Tuple{}, ::Tuple{}, ::Tuple{}, ::Tuple{}) = ()$/;"	f
_initrowforcol_all	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _initrowforcol_all(j, rowsentinel, isemptys, expandsverts, ks, As) = ($/;"	f
_inline_meta	base/boot.jl	/^macro _inline_meta()$/;"	f
_inline_meta	base/essentials.jl	/^macro _inline_meta()$/;"	f
_insert!	stdlib/SparseArrays/src/sparsematrix.jl	/^function _insert!(v::Vector, pos::Integer, item, nz::Integer)$/;"	f
_instantiate_type_in_env	base/meta.jl	/^_instantiate_type_in_env(x, spsig, spvals) = ccall(:jl_instantiate_type_in_env, Any, (Any, Any, /;"	f
_inv	stdlib/LinearAlgebra/src/symmetric.jl	/^function _inv(A::HermOrSym)$/;"	f
_ios_init	src/support/ios.c	/^static void _ios_init(ios_t *s)$/;"	f	typeref:typename:void	file:
_ios_read	src/support/ios.c	/^static size_t _ios_read(ios_t *s, char *dest, size_t n, int all)$/;"	f	typeref:typename:size_t	file:
_ipiv2perm_bk	stdlib/LinearAlgebra/src/bunchkaufman.jl	/^function _ipiv2perm_bk(v::AbstractVector{T}, maxi::Integer, uplo::AbstractChar, rook::Bool) wher/;"	f
_ipiv_cols!	stdlib/LinearAlgebra/src/lu.jl	/^function _ipiv_cols!(A::LU, order::OrdinalRange, B::StridedVecOrMat)$/;"	f
_ipiv_rows!	stdlib/LinearAlgebra/src/lu.jl	/^function _ipiv_rows!(A::LU, order::OrdinalRange, B::StridedVecOrMat)$/;"	f
_is_convertible_Int	base/bitset.jl	/^@inline _is_convertible_Int(n) = typemin(Int) <= n <= typemax(Int)$/;"	f
_is_link	stdlib/Markdown/src/Common/inline.jl	/^function _is_link(s::AbstractString)$/;"	f
_is_mailto	stdlib/Markdown/src/Common/inline.jl	/^function _is_mailto(s::AbstractString)$/;"	f
_isdisjoint	base/abstractarray.jl	/^_isdisjoint(as::Tuple, bs::Tuple) = !(as[1] in bs) && _isdisjoint(tail(as), bs)$/;"	f
_isdisjoint	base/abstractarray.jl	/^_isdisjoint(as::Tuple, bs::Tuple{Any}) = !(bs[1] in as)$/;"	f
_isdisjoint	base/abstractarray.jl	/^_isdisjoint(as::Tuple, bs::Tuple{}) = true$/;"	f
_isdisjoint	base/abstractarray.jl	/^_isdisjoint(as::Tuple{Any}, bs::Tuple) = !(as[1] in bs)$/;"	f
_isdisjoint	base/abstractarray.jl	/^_isdisjoint(as::Tuple{Any}, bs::Tuple{Any}) = as[1] != bs[1]$/;"	f
_isdisjoint	base/abstractarray.jl	/^_isdisjoint(as::Tuple{Any}, bs::Tuple{}) = true$/;"	f
_isdisjoint	base/abstractarray.jl	/^_isdisjoint(as::Tuple{}, bs::Tuple) = true$/;"	f
_isdisjoint	base/abstractarray.jl	/^_isdisjoint(as::Tuple{}, bs::Tuple{Any}) = true$/;"	f
_isdisjoint	base/abstractarray.jl	/^_isdisjoint(as::Tuple{}, bs::Tuple{}) = true$/;"	f
_isemptycol	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _isemptycol(k, stopk) = k == stopk$/;"	f
_isemptycol_all	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _isemptycol_all(::Tuple{}, ::Tuple{}) = ()$/;"	f
_isemptycol_all	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _isemptycol_all(ks, stopks) = ($/;"	f
_isequal	base/tuple.jl	/^_isequal(t1::Tuple, t2::Tuple) = isequal(t1[1], t2[1]) && _isequal(tail(t1), tail(t2))$/;"	f
_isequal	base/tuple.jl	/^_isequal(t1::Tuple{Any}, t2::Tuple{Any}) = isequal(t1[1], t2[1])$/;"	f
_isequal	base/tuple.jl	/^_isequal(t1::Tuple{}, t2::Tuple{}) = true$/;"	f
_isequal	base/tuple.jl	/^function _isequal(t1::Any16, t2::Any16)$/;"	f
_isflat	base/broadcast.jl	/^_isflat(args::NestedTuple) = false$/;"	f
_isflat	base/broadcast.jl	/^_isflat(args::Tuple) = _isflat(tail(args))$/;"	f
_isflat	base/broadcast.jl	/^_isflat(args::Tuple{}) = true$/;"	f
_isgreater_fm	stdlib/SparseArrays/src/sparsematrix.jl	/^_isgreater_fm(a, b) =  b == b && ( a != a || isless(b, a) )$/;"	f
_isless	base/multidimensional.jl	/^    @inline function _isless(ret, I1::NTuple{N,Int}, I2::NTuple{N,Int}) where N$/;"	f
_isless	base/multidimensional.jl	/^    _isless(ret, ::Tuple{}, ::Tuple{}) = ifelse(ret==1, true, false)$/;"	f
_isless_fm	stdlib/SparseArrays/src/sparsematrix.jl	/^_isless_fm(a, b)    =  b == b && ( a != a || isless(a, b) )$/;"	f
_isone_cachefriendly	stdlib/LinearAlgebra/src/dense.jl	/^@inline function _isone_cachefriendly(A::StridedMatrix, m::Int)$/;"	f
_isone_triacheck	stdlib/LinearAlgebra/src/dense.jl	/^@inline function _isone_triacheck(A::StridedMatrix, m::Int)$/;"	f
_ispermutationvalid_permute!	stdlib/SparseArrays/src/sparsematrix.jl	/^function _ispermutationvalid_permute!(perm::AbstractVector{<:Integer},$/;"	f
_iszero	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^_iszero(n::Number) = iszero(n)$/;"	f
_iszero	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^_iszero(x) = x == 0$/;"	f
_iszero	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _iszero(x) = x == 0$/;"	f
_iszero	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _iszero(x::AbstractArray) = Base.iszero(x)$/;"	f
_iszero	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _iszero(x::Number) = Base.iszero(x)$/;"	f
_it	base/file.jl	/^    function _it(chnl)$/;"	f
_iterate	base/dict.jl	/^@propagate_inbounds _iterate(t::Dict{K,V}, i) where {K,V} = i == 0 ? nothing : (Pair{K,V}(t.keys/;"	f
_jl_ast_context_list_t	src/ast.c	/^typedef struct _jl_ast_context_list_t {$/;"	s	file:
_jl_ast_context_t	src/ast.c	/^typedef struct _jl_ast_context_t {$/;"	s	file:
_jl_code_info_t	src/julia.h	/^typedef struct _jl_code_info_t {$/;"	s
_jl_code_instance_t	src/julia.h	/^typedef struct _jl_code_instance_t {$/;"	s
_jl_datatype_t	src/julia.h	/^typedef struct _jl_datatype_t {$/;"	s
_jl_excstack_t	src/julia_internal.h	/^typedef struct _jl_excstack_t {$/;"	s
_jl_free_stack	src/gc-stacks.c	/^static void _jl_free_stack(jl_ptls_t ptls, void *stkbuf, size_t bufsz)$/;"	f	typeref:typename:void	file:
_jl_gc_collect	src/gc.c	/^static int _jl_gc_collect(jl_ptls_t ptls, int full)$/;"	f	typeref:typename:int	file:
_jl_gc_mark_data	src/gc.h	/^union _jl_gc_mark_data {$/;"	u
_jl_gcframe_t	src/julia.h	/^typedef struct _jl_gcframe_t {$/;"	s
_jl_get_module_binding	src/module.c	/^static inline jl_binding_t *_jl_get_module_binding(jl_module_t *m JL_PROPAGATES_ROOT, jl_sym_t */;"	f	typeref:typename:jl_binding_t *	file:
_jl_get_module_binding_bp	src/module.c	/^static inline jl_binding_t **_jl_get_module_binding_bp(jl_module_t *m JL_PROPAGATES_ROOT, jl_sym/;"	f	typeref:typename:jl_binding_t **	file:
_jl_handler_t	src/julia.h	/^typedef struct _jl_handler_t {$/;"	s
_jl_has_typevar_from_ua	src/jltypes.c	/^static int _jl_has_typevar_from_ua(jl_value_t *t, jl_unionall_t *ua, jl_typeenv_t *prev)$/;"	f	typeref:typename:int	file:
_jl_instantiate_type_in_env	src/jltypes.c	/^static jl_value_t *_jl_instantiate_type_in_env(jl_value_t *ty, jl_unionall_t *env, jl_value_t **/;"	f	typeref:typename:jl_value_t *	file:
_jl_invoke	src/gf.c	/^STATIC_INLINE jl_value_t *_jl_invoke(jl_value_t *F, jl_value_t **args, uint32_t nargs, jl_method/;"	f	typeref:typename:STATIC_INLINE jl_value_t *
_jl_llvm_functions_t	src/julia.h	/^typedef struct _jl_llvm_functions_t {$/;"	s
_jl_method_instance_t	src/julia.h	/^struct _jl_method_instance_t {$/;"	s
_jl_method_t	src/julia.h	/^typedef struct _jl_method_t {$/;"	s
_jl_methtable_t	src/julia.h	/^typedef struct _jl_methtable_t {$/;"	s
_jl_module_t	src/julia.h	/^typedef struct _jl_module_t {$/;"	s
_jl_restore_incremental	src/dump.c	/^static jl_value_t *_jl_restore_incremental(ios_t *f, jl_array_t *mod_array, const char *libpath)$/;"	f	typeref:typename:jl_value_t *	file:
_jl_ssavalue_t	src/julia.h	/^typedef struct _jl_ssavalue_t {$/;"	s
_jl_sym_t	src/julia.h	/^typedef struct _jl_sym_t {$/;"	s
_jl_symbol	src/symbol.c	/^static jl_sym_t *_jl_symbol(const char *str, size_t len) JL_NOTSAFEPOINT$/;"	f	typeref:typename:jl_sym_t *	file:
_jl_sysimg_fptrs_t	src/processor.h	/^typedef struct _jl_sysimg_fptrs_t {$/;"	s
_jl_taggedvalue_bits	src/julia.h	/^struct _jl_taggedvalue_bits {$/;"	s
_jl_taggedvalue_t	src/julia.h	/^JL_EXTENSION struct _jl_taggedvalue_t {$/;"	s
_jl_task_t	src/julia.h	/^typedef struct _jl_task_t {$/;"	s
_jl_threadarg_t	src/threading.h	/^typedef struct _jl_threadarg_t {$/;"	s
_jl_timing_block_ctor	src/timing.h	/^STATIC_INLINE void _jl_timing_block_ctor(jl_timing_block_t *block, int owner) {$/;"	f	typeref:typename:STATIC_INLINE void
_jl_timing_block_destroy	src/timing.h	/^STATIC_INLINE void _jl_timing_block_destroy(jl_timing_block_t *block) {$/;"	f	typeref:typename:STATIC_INLINE void
_jl_timing_block_init	src/timing.h	/^STATIC_INLINE uint64_t _jl_timing_block_init(jl_timing_block_t *block, int owner) {$/;"	f	typeref:typename:STATIC_INLINE uint64_t
_jl_timing_block_start	src/timing.h	/^STATIC_INLINE void _jl_timing_block_start(jl_timing_block_t *block, uint64_t t) {$/;"	f	typeref:typename:STATIC_INLINE void
_jl_timing_block_stop	src/timing.h	/^STATIC_INLINE void _jl_timing_block_stop(jl_timing_block_t *block, uint64_t t) {$/;"	f	typeref:typename:STATIC_INLINE void
_jl_timing_block_t	src/timing.h	/^struct _jl_timing_block_t { \/\/ typedef in julia.h$/;"	s
_jl_tls_states_t	src/julia_threads.h	/^struct _jl_tls_states_t {$/;"	s
_jl_typemap_entry_t	src/julia.h	/^typedef struct _jl_typemap_entry_t {$/;"	s
_jl_typemap_level_t	src/julia.h	/^typedef struct _jl_typemap_level_t {$/;"	s
_jl_typestack_t	src/jltypes.c	/^JL_EXTENSION struct _jl_typestack_t {$/;"	s	file:
_jl_write_value	src/staticdata.c	/^static void _jl_write_value(jl_serializer_state *s, jl_value_t *v)$/;"	f	typeref:typename:void	file:
_julia_init	src/init.c	/^void _julia_init(JL_IMAGE_SEARCH rel)$/;"	f	typeref:typename:void
_kwdef!	base/util.jl	/^function _kwdef!(blk, params_args, call_args)$/;"	f
_last_atdoc	test/docs.jl	/^_last_atdoc = Core.atdoc$/;"	v
_lastbyteidx	base/strings/util.jl	/^_lastbyteidx(s::AbstractVector{UInt8}) = lastindex(s)$/;"	f
_lastbyteidx	base/strings/util.jl	/^_lastbyteidx(s::String) = sizeof(s)$/;"	f
_lastindex	stdlib/Random/src/generation.jl	/^_lastindex(s::AbstractString) = lastindex(s)$/;"	f
_lastindex	stdlib/Random/src/generation.jl	/^_lastindex(s::String) = sizeof(s)$/;"	f
_latexescape_chars	stdlib/Markdown/src/render/latex.jl	/^const _latexescape_chars = Dict{Char, AbstractString}($/;"	v
_ldexp_exp	base/special/ldexp_exp.jl	/^function _ldexp_exp(x::T, l2) where T <: Union{Float32, Float64}$/;"	f
_ldiv!	stdlib/SparseArrays/src/linalg.jl	/^function _ldiv!(L::LowerTriangularPlain, B::StridedVecOrMat)$/;"	f
_ldiv!	stdlib/SparseArrays/src/linalg.jl	/^function _ldiv!(L::LowerTriangularWrapped, B::StridedVecOrMat)$/;"	f
_ldiv!	stdlib/SparseArrays/src/linalg.jl	/^function _ldiv!(U::UpperTriangularPlain, B::StridedVecOrMat)$/;"	f
_ldiv!	stdlib/SparseArrays/src/linalg.jl	/^function _ldiv!(U::UpperTriangularWrapped, B::StridedVecOrMat)$/;"	f
_ldiv_basic	stdlib/SuiteSparse/src/spqr.jl	/^function _ldiv_basic(F::QRSparse, B::StridedVecOrMat)$/;"	f
_length_or_count_or_five	stdlib/SparseArrays/test/sparse.jl	/^_length_or_count_or_five(::Colon) = 5$/;"	f
_length_or_count_or_five	stdlib/SparseArrays/test/sparse.jl	/^_length_or_count_or_five(x) = length(x)$/;"	f
_length_or_count_or_five	stdlib/SparseArrays/test/sparse.jl	/^_length_or_count_or_five(x::AbstractVector{Bool}) = count(x)$/;"	f
_limit	base/printf.jl	/^function _limit(s, prec)$/;"	f
_limit_type_size	base/compiler/typelimits.jl	/^function _limit_type_size(@nospecialize(t), @nospecialize(c), sources::SimpleVector, depth::Int,/;"	f
_linspace	base/twiceprecision.jl	/^_linspace(::Type{T}, start::Integer, stop::Integer, len::Integer) where {T<:IEEEFloat} = _linspa/;"	f
_linspace	base/twiceprecision.jl	/^function _linspace(::Type{T}, start_n::Integer, stop_n::Integer, len::Integer, den::Integer) whe/;"	f
_linspace	base/twiceprecision.jl	/^function _linspace(start::T, stop::T, len::Integer) where {T<:IEEEFloat}$/;"	f
_linspace1	base/twiceprecision.jl	/^function _linspace1(::Type{T}, start, stop, len::Integer) where T<:IEEEFloat$/;"	f
_list	src/flisp/flisp.c	/^static value_t _list(fl_context_t *fl_ctx, value_t *args, uint32_t nargs, int star)$/;"	f	typeref:typename:value_t	file:
_llvmtypes	test/vecelement.jl	/^const _llvmtypes = Dict{DataType, String}($/;"	v
_lmul!	stdlib/SparseArrays/src/linalg.jl	/^function _lmul!(L::LowerTriangularPlain, B::StridedVecOrMat)$/;"	f
_lmul!	stdlib/SparseArrays/src/linalg.jl	/^function _lmul!(L::LowerTriangularWrapped, B::StridedVecOrMat)$/;"	f
_lmul!	stdlib/SparseArrays/src/linalg.jl	/^function _lmul!(U::UpperTriangularPlain, B::StridedVecOrMat)$/;"	f
_lmul!	stdlib/SparseArrays/src/linalg.jl	/^function _lmul!(U::UpperTriangularWrapped, B::StridedVecOrMat)$/;"	f
_log_record_ids	base/logging.jl	/^_log_record_ids = Set{Symbol}()$/;"	v
_logical_index	stdlib/SparseArrays/src/sparsevector.jl	/^function _logical_index(A::AbstractSparseMatrixCSC{Tv}, I::AbstractArray{Bool}) where Tv$/;"	f
_logmsg_docs	base/logging.jl	/^_logmsg_docs = """$/;"	v
_lookup	base/abstractarray.jl	/^_lookup(ind, d::Integer) = ind+1$/;"	f
_lookup	base/abstractarray.jl	/^_lookup(ind, r::AbstractUnitRange) = ind+first(r)$/;"	f
_macroexpand1	test/errorshow.jl	/^    _macroexpand1(ex) = macroexpand(M, ex, recursive=false)$/;"	f
_mallocarray_t	src/gc.h	/^typedef struct _mallocarray_t {$/;"	s
_map_notzeropres!	stdlib/SparseArrays/src/higherorderfns.jl	/^function _map_notzeropres!(f::Tf, fillvalue, C::SparseVecOrMat, A::SparseVecOrMat) where Tf$/;"	f
_map_notzeropres!	stdlib/SparseArrays/src/higherorderfns.jl	/^function _map_notzeropres!(f::Tf, fillvalue, C::SparseVecOrMat, A::SparseVecOrMat, B::SparseVecO/;"	f
_map_notzeropres!	stdlib/SparseArrays/src/higherorderfns.jl	/^function _map_notzeropres!(f::Tf, fillvalue, C::SparseVecOrMat, As::Vararg{SparseVecOrMat,N}) wh/;"	f
_map_zeropres!	stdlib/SparseArrays/src/higherorderfns.jl	/^function _map_zeropres!(f::Tf, C::SparseVecOrMat, A::SparseVecOrMat) where Tf$/;"	f
_map_zeropres!	stdlib/SparseArrays/src/higherorderfns.jl	/^function _map_zeropres!(f::Tf, C::SparseVecOrMat, A::SparseVecOrMat, B::SparseVecOrMat) where Tf$/;"	f
_map_zeropres!	stdlib/SparseArrays/src/higherorderfns.jl	/^function _map_zeropres!(f::Tf, C::SparseVecOrMat, As::Vararg{SparseVecOrMat,N}) where {Tf,N}$/;"	f
_mapreduce	base/missing.jl	/^_mapreduce(f, op, ::IndexCartesian, itr::SkipMissing) = mapfoldl(f, op, itr)$/;"	f
_mapreduce	base/missing.jl	/^function _mapreduce(f, op, ::IndexLinear, itr::SkipMissing{<:AbstractArray})$/;"	f
_mapreduce	base/reduce.jl	/^_mapreduce(f, op, ::IndexCartesian, A::AbstractArray) = mapfoldl(f, op, A)$/;"	f
_mapreduce	base/reduce.jl	/^_mapreduce(f, op, A::AbstractArray) = _mapreduce(f, op, IndexStyle(A), A)$/;"	f
_mapreduce	base/reduce.jl	/^function _mapreduce(f, op, ::IndexLinear, A::AbstractArray{T}) where T$/;"	f
_mapreduce_dim	base/reducedim.jl	/^_mapreduce_dim(f, op, ::NamedTuple{()}, A::AbstractArray, ::Colon) = _mapreduce(f, op, IndexStyl/;"	f
_mapreduce_dim	base/reducedim.jl	/^_mapreduce_dim(f, op, ::NamedTuple{()}, A::AbstractArray, dims) =$/;"	f
_mapreduce_dim	base/reducedim.jl	/^_mapreduce_dim(f, op, nt::NamedTuple{(:init,)}, A::AbstractArray, ::Colon) = mapfoldl(f, op, A; /;"	f
_mapreduce_dim	base/reducedim.jl	/^_mapreduce_dim(f, op, nt::NamedTuple{(:init,)}, A::AbstractArray, dims) =$/;"	f
_mapreducecols!	stdlib/SparseArrays/src/sparsematrix.jl	/^function _mapreducecols!(f, op, R::AbstractArray, A::AbstractSparseMatrixCSC{Tv,Ti}) where {Tv,T/;"	f
_mapreducecols!	stdlib/SparseArrays/src/sparsematrix.jl	/^function _mapreducecols!(f, op::typeof(+), R::AbstractArray, A::AbstractSparseMatrixCSC{Tv,Ti}) /;"	f
_mapreducedim!	base/reducedim.jl	/^function _mapreducedim!(f, op, R::AbstractArray, A::AbstractArray)$/;"	f
_mapreducerows!	stdlib/SparseArrays/src/sparsematrix.jl	/^function _mapreducerows!(f, op, R::AbstractArray, A::AbstractSparseMatrixCSC{T}) where T$/;"	f
_mapreducezeros	stdlib/SparseArrays/src/sparsematrix.jl	/^_mapreducezeros(f, ::typeof(*), ::Type{T}, nzeros::Integer, v0) where {T} =$/;"	f
_mapreducezeros	stdlib/SparseArrays/src/sparsematrix.jl	/^_mapreducezeros(f, ::typeof(+), ::Type{T}, nzeros::Integer, v0) where {T} =$/;"	f
_mapreducezeros	stdlib/SparseArrays/src/sparsematrix.jl	/^function _mapreducezeros(f, op, ::Type{T}, nzeros::Integer, v0) where T$/;"	f
_matched_map!	base/bitset.jl	/^function _matched_map!(f, a1::Bits, b1::Int, a2::Bits, b2::Int,$/;"	f
_matched_map!	base/bitset.jl	/^function _matched_map!(f, s1::BitSet, s2::BitSet)$/;"	f
_materialize_broadcasted	stdlib/Test/src/Test.jl	/^_materialize_broadcasted(f, args...) = Broadcast.materialize(Broadcast.broadcasted(f, args...))$/;"	f
_maxlength	base/tuple.jl	/^_maxlength(t::Tuple) = length(t)$/;"	f
_maxlength	base/tuple.jl	/^function _maxlength(t::Tuple, t2::Tuple, t3::Tuple...)$/;"	f
_maxnnzfrom	stdlib/SparseArrays/src/higherorderfns.jl	/^_maxnnzfrom(shape::NTuple{1}, A::SparseVector) = nnz(A) * div(shape[1], length(A))$/;"	f
_maxnnzfrom	stdlib/SparseArrays/src/higherorderfns.jl	/^_maxnnzfrom(shape::NTuple{2}, A::AbstractSparseMatrixCSC) = nnz(A) * div(shape[1], size(A, 1)) */;"	f
_maxnnzfrom	stdlib/SparseArrays/src/higherorderfns.jl	/^_maxnnzfrom(shape::NTuple{2}, A::SparseVector) = nnz(A) * div(shape[1], length(A)) * shape[2]$/;"	f
_maxnnzfrom_each	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _maxnnzfrom_each(shape, ::Tuple{}) = ()$/;"	f
_maxnnzfrom_each	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _maxnnzfrom_each(shape, As) = (_maxnnzfrom(shape, first(As)), _maxnnzfrom_each(shape, ta/;"	f
_maybe_linear_logical_index	base/multidimensional.jl	/^_maybe_linear_logical_index(::IndexLinear, A, i) = LogicalIndex{Int}(i)$/;"	f
_maybe_linear_logical_index	base/multidimensional.jl	/^_maybe_linear_logical_index(::IndexStyle, A, i) = to_index(A, i)$/;"	f
_maybe_reindex	base/subarray.jl	/^_maybe_reindex(V, I) = (@_inline_meta; _maybe_reindex(V, I, I))$/;"	f
_maybe_reindex	base/subarray.jl	/^_maybe_reindex(V, I, ::Tuple{AbstractArray{<:AbstractCartesianIndex}, Vararg{Any}}) =$/;"	f
_maybe_reindex	base/subarray.jl	/^_maybe_reindex(V, I, A::Tuple{AbstractArray{<:AbstractCartesianIndex{1}}, Vararg{Any}}) =$/;"	f
_maybe_reindex	base/subarray.jl	/^_maybe_reindex(V, I, A::Tuple{Any, Vararg{Any}}) = (@_inline_meta; _maybe_reindex(V, I, tail(A))/;"	f
_maybe_reindex	base/subarray.jl	/^function _maybe_reindex(V, I, ::Tuple{})$/;"	f
_maybe_reshape	base/multidimensional.jl	/^@inline _maybe_reshape(::IndexCartesian, A::AbstractArray, I...) = __maybe_reshape(A, index_ndim/;"	f
_maybe_reshape	base/multidimensional.jl	/^_maybe_reshape(::IndexCartesian, A::AbstractVector, I...) = A$/;"	f
_maybe_reshape	base/multidimensional.jl	/^_maybe_reshape(::IndexLinear, A::AbstractArray, I...) = A$/;"	f
_maybe_reshape_parent	base/subarray.jl	/^_maybe_reshape_parent(A::AbstractArray, ::NTuple{1, Bool}) = reshape(A, Val(1))$/;"	f
_maybe_reshape_parent	base/subarray.jl	/^_maybe_reshape_parent(A::AbstractArray, ::NTuple{N, Bool}) where {N} = reshape(A, Val(N))$/;"	f
_maybe_reshape_parent	base/subarray.jl	/^_maybe_reshape_parent(A::AbstractArray{<:Any,1}, ::NTuple{1, Bool}) = reshape(A, Val(1))$/;"	f
_maybe_reshape_parent	base/subarray.jl	/^_maybe_reshape_parent(A::AbstractArray{<:Any,N}, ::NTuple{N, Bool}) where {N} = A$/;"	f
_maybetail	base/indices.jl	/^_maybetail(::Tuple{}) = ()$/;"	f
_maybetail	base/indices.jl	/^_maybetail(t::Tuple) = tail(t)$/;"	f
_mean	stdlib/Statistics/src/Statistics.jl	/^_mean(A::AbstractArray, ::Colon) = sum(A) \/ length(A)$/;"	f
_mean	stdlib/Statistics/src/Statistics.jl	/^_mean(A::AbstractArray{T}, region) where {T} = mean!(Base.reducedim_init(t -> t\/2, +, A, region/;"	f
_mean	stdlib/Statistics/src/Statistics.jl	/^_mean(f, A::AbstractArray, ::Colon) = sum(f, A) \/ length(A)$/;"	f
_mean	stdlib/Statistics/src/Statistics.jl	/^_mean(f, A::AbstractArray, dims) = sum(f, A, dims=dims) \/ mapreduce(i -> size(A, i), *, unique(/;"	f
_median	stdlib/Statistics/src/Statistics.jl	/^_median(v::AbstractArray, dims) = mapslices(median!, v, dims = dims)$/;"	f
_median	stdlib/Statistics/src/Statistics.jl	/^_median(v::AbstractArray{T}, ::Colon) where {T} = median!(copyto!(Array{T,1}(undef, length(v)), /;"	f
_mem_units	base/util.jl	/^const _mem_units = ["byte", "KiB", "MiB", "GiB", "TiB", "PiB"]$/;"	v
_memcmp	base/array.jl	/^_memcmp(a, b, len) = ccall(:memcmp, Cint, (Ptr{Cvoid}, Ptr{Cvoid}, Csize_t), a, b, len % Csize_t/;"	f
_memcmp	base/strings/string.jl	/^_memcmp(a::Union{Ptr{UInt8},AbstractString}, b::Union{Ptr{UInt8},AbstractString}, len) =$/;"	f
_memcpy!	base/reinterpretarray.jl	/^@inline _memcpy!(dst, src, n) = ccall(:memcpy, Cvoid, (Ptr{UInt8}, Ptr{UInt8}, Csize_t), dst, sr/;"	f
_merge	test/compiler/inference.jl	/^_merge(f, res, ::Tuple{}) = MixedKeyDict(res)$/;"	f
_merge	test/compiler/inference.jl	/^_merge(f, res, ::Tuple{}, others...) = _merge(f, res, others...)$/;"	f
_merge	test/compiler/inference.jl	/^_merge(f, res, d) = MixedKeyDict((res..., d...))$/;"	f
_merge	test/compiler/inference.jl	/^function _merge(f, res, d, others...)$/;"	f
_methods	base/reflection.jl	/^function _methods(@nospecialize(f), @nospecialize(t), lim::Int, world::UInt)$/;"	f
_methods_by_ftype	base/reflection.jl	/^function _methods_by_ftype(@nospecialize(t), lim::Int, world::UInt)$/;"	f
_methods_by_ftype	base/reflection.jl	/^function _methods_by_ftype(@nospecialize(t), lim::Int, world::UInt, min::Array{UInt,1}, max::Arr/;"	f
_methodsstr	test/show.jl	/^function _methodsstr(f)$/;"	f
_methodswith	stdlib/InteractiveUtils/src/InteractiveUtils.jl	/^function _methodswith(t::Type, m::Module, supertypes::Bool)$/;"	f
_min_enabled_level	base/logging.jl	/^const _min_enabled_level = Ref(Debug)$/;"	v
_min_length	base/iterators.jl	/^_min_length(a, b, ::IsInfinite, ::IsInfinite) = min(length(a),length(b)) # inherit behaviour, er/;"	f
_min_length	base/iterators.jl	/^_min_length(a, b, ::IsInfinite, B) = length(b)$/;"	f
_min_length	base/iterators.jl	/^_min_length(a, b, A, ::IsInfinite) = length(a)$/;"	f
_min_length	base/iterators.jl	/^_min_length(a, b, A, B) = min(length(a),length(b))$/;"	f
_mod64	base/bitarray.jl	/^@inline _mod64(l) = l & 63$/;"	f
_modify!	stdlib/LinearAlgebra/src/generic.jl	/^@inline @propagate_inbounds function _modify!(p::MulAddMul{ais1, bis0},$/;"	f
_modstack_t	src/module.c	/^typedef struct _modstack_t {$/;"	s	file:
_msk64	base/bitarray.jl	/^const _msk64 = ~UInt64(0)$/;"	v
_msk_end	base/bitarray.jl	/^@inline _msk_end(B::BitArray) = _msk_end(length(B))$/;"	f
_msk_end	base/bitarray.jl	/^@inline _msk_end(l::Integer) = _msk64 >>> _mod64(-l)$/;"	f
_mul!	stdlib/LinearAlgebra/src/triangular.jl	/^@inline function _mul!(A::LowerTriangular, B::LowerTriangular, c::Number, _add::MulAddMul)$/;"	f
_mul!	stdlib/LinearAlgebra/src/triangular.jl	/^@inline function _mul!(A::LowerTriangular, B::UnitLowerTriangular, c::Number, _add::MulAddMul)$/;"	f
_mul!	stdlib/LinearAlgebra/src/triangular.jl	/^@inline function _mul!(A::LowerTriangular, c::Number, B::LowerTriangular, _add::MulAddMul)$/;"	f
_mul!	stdlib/LinearAlgebra/src/triangular.jl	/^@inline function _mul!(A::LowerTriangular, c::Number, B::UnitLowerTriangular, _add::MulAddMul)$/;"	f
_mul!	stdlib/LinearAlgebra/src/triangular.jl	/^@inline function _mul!(A::UpperTriangular, B::UnitUpperTriangular, c::Number, _add::MulAddMul)$/;"	f
_mul!	stdlib/LinearAlgebra/src/triangular.jl	/^@inline function _mul!(A::UpperTriangular, B::UpperTriangular, c::Number, _add::MulAddMul)$/;"	f
_mul!	stdlib/LinearAlgebra/src/triangular.jl	/^@inline function _mul!(A::UpperTriangular, c::Number, B::UnitUpperTriangular, _add::MulAddMul)$/;"	f
_mul!	stdlib/LinearAlgebra/src/triangular.jl	/^@inline function _mul!(A::UpperTriangular, c::Number, B::UpperTriangular, _add::MulAddMul)$/;"	f
_mul!	stdlib/LinearAlgebra/src/tridiag.jl	/^@inline function _mul!(C::StridedVecOrMat, S::SymTridiagonal, B::StridedVecOrMat,$/;"	f
_mul!	stdlib/SparseArrays/src/linalg.jl	/^function _mul!(nzrang::Function, C::StridedVecOrMat{T}, sA, B, α, β) where T$/;"	f
_ndims	test/subarray.jl	/^_ndims(::AbstractArray{T,N}) where {T,N} = N$/;"	f
_ndims	test/subarray.jl	/^_ndims(x) = 1$/;"	f
_negdims	base/multidimensional.jl	/^_negdims(n, dims) = filter(i->!(i in dims), 1:n)$/;"	f
_new	base/boot.jl	/^_new(typ::Symbol, argty::Symbol) = eval(Core, :($typ(@nospecialize n::$argty) = $(Expr(:new, typ/;"	f
_new_array	src/array.c	/^static inline jl_array_t *_new_array(jl_value_t *atype, uint32_t ndims, size_t *dims)$/;"	f	typeref:typename:jl_array_t *	file:
_new_array_	src/array.c	/^static jl_array_t *_new_array_(jl_value_t *atype, uint32_t ndims, size_t *dims,$/;"	f	typeref:typename:jl_array_t *	file:
_newindex	base/broadcast.jl	/^@inline _newindex(I, keep, Idefault) =$/;"	f
_newindex	base/broadcast.jl	/^@inline _newindex(I, keep::Tuple{}, Idefault) = ()  # truncate if keep is shorter than I$/;"	f
_newindex	base/broadcast.jl	/^Base.@propagate_inbounds _newindex(ax::Tuple, I::Tuple) = (ifelse(Base.unsafe_length(ax[1])==1, /;"	f
_newindex	base/broadcast.jl	/^Base.@propagate_inbounds _newindex(ax::Tuple, I::Tuple{}) = (ax[1][1], _newindex(tail(ax), ())../;"	f
_newindex	base/broadcast.jl	/^Base.@propagate_inbounds _newindex(ax::Tuple{}, I::Tuple) = ()$/;"	f
_newindex	base/broadcast.jl	/^Base.@propagate_inbounds _newindex(ax::Tuple{}, I::Tuple{}) = ()$/;"	f
_newindexer	base/broadcast.jl	/^@inline _newindexer(indsA::Tuple{}) = (), ()$/;"	f
_newindexer	base/broadcast.jl	/^@inline function _newindexer(indsA::Tuple)$/;"	f
_newline	stdlib/REPL/src/LineEdit.jl	/^const _newline =  UInt8('\\n')$/;"	v
_next	src/llvm-multiversioning.cpp	/^        Use *_next;$/;"	m	struct:__anond5683ea40111::ConstantUses::Frame	typeref:typename:Use *	file:
_nextind_str	base/strings/string.jl	/^@inline function _nextind_str(s, i::Int)$/;"	f
_nextpow2	base/gmp.jl	/^_nextpow2(x::BigInt) = count_ones_abs(x) <= 1 ? x : flipsign!(ONE << ndigits(x, base=2), x)$/;"	f
_nextpow2	base/intfuncs.jl	/^_nextpow2(x::Integer) = reinterpret(typeof(x),x < 0 ? -_nextpow2(unsigned(-x)) : _nextpow2(unsig/;"	f
_nextpow2	base/intfuncs.jl	/^_nextpow2(x::Unsigned) = oneunit(x)<<((sizeof(x)<<3)-leading_zeros(x-oneunit(x)))$/;"	f
_nloops	base/cartesian.jl	/^function _nloops(N::Int, itersym::Symbol, arraysym::Symbol, args::Expr...)$/;"	f
_nloops	base/cartesian.jl	/^function _nloops(N::Int, itersym::Symbol, rangeexpr::Expr, args::Expr...)$/;"	f
_noinline_meta	base/boot.jl	/^macro _noinline_meta()$/;"	f
_noinline_meta	base/essentials.jl	/^macro _noinline_meta()$/;"	f
_noshapecheck_map	stdlib/SparseArrays/src/higherorderfns.jl	/^function _noshapecheck_map(f::Tf, A::SparseVecOrMat, Bs::Vararg{SparseVecOrMat,N}) where {Tf,N}$/;"	f
_noshapecheck_map!	stdlib/SparseArrays/src/higherorderfns.jl	/^function _noshapecheck_map!(f::Tf, C::SparseVecOrMat, A::SparseVecOrMat, Bs::Vararg{SparseVecOrM/;"	f
_nospec_some_args	test/meta.jl	/^function _nospec_some_args(@nospecialize(x), y, @nospecialize z::Int)$/;"	f
_nospec_some_args2	test/meta.jl	/^function _nospec_some_args2(x, y, z)$/;"	f
_nospec_with_default	test/meta.jl	/^function _nospec_with_default(@nospecialize x = 1)$/;"	f
_notspace	stdlib/REPL/src/LineEdit.jl	/^_notspace(c) = c != _space$/;"	f
_nt_names	base/namedtuple.jl	/^_nt_names(::NamedTuple{names}) where {names} = names$/;"	f
_nt_names	base/namedtuple.jl	/^_nt_names(::Type{T}) where {names,T<:NamedTuple{names}} = names$/;"	f
_nth	base/pcre.jl	/^_nth() = Int(unsafe_load(cglobal(:jl_n_threads, Cint)))$/;"	f
_nthbyte	base/strings/search.jl	/^_nthbyte(a::Union{AbstractVector{UInt8},AbstractVector{Int8}}, i) = a[i]$/;"	f
_nthbyte	base/strings/search.jl	/^_nthbyte(s::String, i) = codeunit(s, i)$/;"	f
_ntuple	base/ntuple.jl	/^function _ntuple(f, n)$/;"	f
_offset	test/testhelpers/OffsetArrays.jl	/^@inline _offset(out, offsets, inds) = _offset((out..., inds[1]-offsets[1]), Base.tail(offsets), /;"	f
_offset	test/testhelpers/OffsetArrays.jl	/^_offset(out, ::Tuple{}, ::Tuple{}) = out$/;"	f
_oidd_nextind	base/abstractdict.jl	/^_oidd_nextind(a, i) = reinterpret(Int, ccall(:jl_eqtable_nextind, Csize_t, (Any, Csize_t), a, i)/;"	f
_onCleanup	contrib/mac/frameworkapp/ExecSandbox/ExecSandbox.m	/^  dispatch_block_t _Nullable _onCleanup;$/;"	E	interface:JuliaTask
_one	base/array.jl	/^function _one(unit::T, x::AbstractMatrix) where T$/;"	f
_ord	base/ordering.jl	/^_ord(lt,                 by,                   order::Ordering) = Lt((x,y)->lt(by(x),by(y)))$/;"	f
_ord	base/ordering.jl	/^_ord(lt,                 by::typeof(identity), order::Ordering) = Lt(lt)$/;"	f
_ord	base/ordering.jl	/^_ord(lt::typeof(isless), by,                   order::Ordering) = By(by)$/;"	f
_ord	base/ordering.jl	/^_ord(lt::typeof(isless), by::typeof(identity), order::Ordering) = order$/;"	f
_ordschur	stdlib/LinearAlgebra/src/schur.jl	/^_ordschur(T::StridedMatrix{Ty}, Z::StridedMatrix{Ty}, select::Union{Vector{Bool},BitVector}) whe/;"	f
_ordschur!	stdlib/LinearAlgebra/src/schur.jl	/^_ordschur!(T::StridedMatrix{Ty}, Z::StridedMatrix{Ty}, select::Union{Vector{Bool},BitVector}) wh/;"	f
_os_read	src/support/ios.c	/^static int _os_read(long fd, void *buf, size_t n, size_t *nread)$/;"	f	typeref:typename:int	file:
_os_read_all	src/support/ios.c	/^static int _os_read_all(long fd, void *buf, size_t n, size_t *nread)$/;"	f	typeref:typename:int	file:
_os_write	src/support/ios.c	/^static int _os_write(long fd, const void *buf, size_t n, size_t *nwritten)$/;"	f	typeref:typename:int	file:
_os_write_all	src/support/ios.c	/^int _os_write_all(long fd, const void *buf, size_t n, size_t *nwritten)$/;"	f	typeref:typename:int
_outer	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _outer(x::SparseVectorUnion, y::Adjoint) = return _outer(conj, x, parent(y))$/;"	f
_outer	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _outer(x::SparseVectorUnion, y::Transpose) = return _outer(identity, x, parent(y))$/;"	f
_outer	stdlib/SparseArrays/src/higherorderfns.jl	/^function _outer(trans::Tf, x, y) where Tf$/;"	f
_overflowind	base/bitarray.jl	/^@inline _overflowind(i1, irest::Tuple{}, size) = (i1, irest)$/;"	f
_overflowind	base/bitarray.jl	/^@inline function _overflowind(i1, irest, size)$/;"	f
_padding	src/gc.h	/^    void *_padding[16 - 4];$/;"	m	struct:_bigval_t	typeref:typename:void * []
_padding	src/gc.h	/^    void *_padding[8 - 4];$/;"	m	struct:_bigval_t	typeref:typename:void * []
_parentsmatch	base/multidimensional.jl	/^_parentsmatch(A::AbstractArray, B::AbstractArray) = A === B$/;"	f
_parentsmatch	base/multidimensional.jl	/^_parentsmatch(A::Array, B::Array) = pointer(A) == pointer(B) && size(A) == size(B)$/;"	f
_parse	stdlib/Markdown/src/Julia/interp.jl	/^function _parse(stream::IO; greedy::Bool = true, raise::Bool = true)$/;"	f
_parse_failure	base/parse.jl	/^@noinline _parse_failure(T, s::AbstractString, startpos = firstindex(s), endpos = lastindex(s)) /;"	f
_parse_input_line_core	base/client.jl	/^function _parse_input_line_core(s::String, filename::String)$/;"	f
_partially_inline!	base/meta.jl	/^function _partially_inline!(@nospecialize(x), slot_replacements::Vector{Any},$/;"	f
_pat_replacer	base/regex.jl	/^_pat_replacer(r::Regex) = RegexAndMatchData(r)$/;"	f
_pat_replacer	base/strings/util.jl	/^_pat_replacer(x) = x$/;"	f
_permutedims!	base/permuteddimsarray.jl	/^@noinline function _permutedims!(P::PermutedDimsArray, src, R1, R2, R3, ds, dp)$/;"	f
_permutedims!	base/permuteddimsarray.jl	/^@noinline function _permutedims!(P::PermutedDimsArray, src, R1::CartesianIndices{0}, R2, R3, ds,/;"	f
_pisdone	base/iterators.jl	/^@inline function _pisdone(iters, states)$/;"	f
_piterate	base/iterators.jl	/^@inline _piterate() = ()$/;"	f
_piterate	base/iterators.jl	/^@inline function _piterate(iter1, rest...)$/;"	f
_piterate1	base/iterators.jl	/^@inline _piterate1(::Tuple{}, ::Tuple{}) = nothing$/;"	f
_piterate1	base/iterators.jl	/^@inline function _piterate1(iters, states)$/;"	f
_pointer	base/subarray.jl	/^_pointer(V::SubArray, i::Int) = pointer(V, Base._ind2sub(axes(V), i))$/;"	f
_pointer	base/subarray.jl	/^_pointer(V::SubArray{<:Any,1}, i::Int) = pointer(V, (i,))$/;"	f
_pop!	base/dict.jl	/^function _pop!(h::Dict, index)$/;"	f
_prepend!	base/array.jl	/^function _prepend!(a, ::IteratorSize, iter)$/;"	f
_prepend!	base/array.jl	/^function _prepend!(a, ::Union{HasLength,HasShape}, iter)$/;"	f
_prettify_bigfloat	base/mpfr.jl	/^function _prettify_bigfloat(s::String)::String$/;"	f
_prevpow2	base/gmp.jl	/^_prevpow2(x::BigInt) = -2 <= x <= 2 ? x : flipsign!(ONE << (ndigits(x, base=2) - 1), x)$/;"	f
_prevpow2	base/intfuncs.jl	/^_prevpow2(x::Integer) = reinterpret(typeof(x),x < 0 ? -_prevpow2(unsigned(-x)) : _prevpow2(unsig/;"	f
_prevpow2	base/intfuncs.jl	/^_prevpow2(x::Unsigned) = one(x) << unsigned((sizeof(x)<<3)-leading_zeros(x)-1)$/;"	f
_print_shortest	base/grisu/grisu.jl	/^function _print_shortest(io::IO, x::AbstractFloat, dot::Bool, mode, n::Int)$/;"	f
_printf	base/printf.jl	/^function _printf(macroname, io, fmt, args)$/;"	f
_prod_axes1	base/iterators.jl	/^_prod_axes1(a, ::HasLength) = (OneTo(length(a)),)$/;"	f
_prod_axes1	base/iterators.jl	/^_prod_axes1(a, ::HasShape)  = axes(a)$/;"	f
_prod_axes1	base/iterators.jl	/^_prod_axes1(a, A) =$/;"	f
_prod_eltype	base/iterators.jl	/^_prod_eltype(::Type{I}) where {I<:Tuple} =$/;"	f
_prod_eltype	base/iterators.jl	/^_prod_eltype(::Type{Tuple{}}) = Tuple{}$/;"	f
_prod_indices	base/iterators.jl	/^_prod_indices(::Tuple{}) = ()$/;"	f
_prod_indices	base/iterators.jl	/^_prod_indices(t::Tuple) = (_prod_axes1(t[1], IteratorSize(t[1]))..., _prod_indices(tail(t))...)$/;"	f
_prod_size	base/iterators.jl	/^_prod_size(::Tuple{}) = ()$/;"	f
_prod_size	base/iterators.jl	/^_prod_size(t::Tuple) = (_prod_size1(t[1], IteratorSize(t[1]))..., _prod_size(tail(t))...)$/;"	f
_prod_size1	base/iterators.jl	/^_prod_size1(a, ::HasLength) = (length(a),)$/;"	f
_prod_size1	base/iterators.jl	/^_prod_size1(a, ::HasShape)  = size(a)$/;"	f
_prod_size1	base/iterators.jl	/^_prod_size1(a, A) =$/;"	f
_promote	base/promotion.jl	/^function _promote(x, y, z)$/;"	f
_promote	base/promotion.jl	/^function _promote(x, y, zs...)$/;"	f
_promote	base/promotion.jl	/^function _promote(x::T, y::S) where {T,S}$/;"	f
_promote_indtype	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _promote_indtype(A) = indtype(A)$/;"	f
_promote_indtype	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _promote_indtype(A, Bs...) = promote_type(indtype(A), _promote_indtype(Bs...))$/;"	f
_promote_shape	base/iterators.jl	/^_promote_shape(a) = a$/;"	f
_promote_shape	base/iterators.jl	/^_promote_shape(a, b...) = promote_shape(a, _promote_shape(b...))$/;"	f
_promote_typejoin	base/promotion.jl	/^_promote_typejoin(::Type{Missing}, ::Type{Missing}) = Missing$/;"	f
_promote_typejoin	base/promotion.jl	/^_promote_typejoin(::Type{Missing}, ::Type{Nothing}) = Union{Nothing, Missing}$/;"	f
_promote_typejoin	base/promotion.jl	/^_promote_typejoin(::Type{Missing}, ::Type{T}) where {T} =$/;"	f
_promote_typejoin	base/promotion.jl	/^_promote_typejoin(::Type{Nothing}, ::Type{Missing}) = Union{Nothing, Missing}$/;"	f
_promote_typejoin	base/promotion.jl	/^_promote_typejoin(::Type{Nothing}, ::Type{Nothing}) = Nothing$/;"	f
_promote_typejoin	base/promotion.jl	/^_promote_typejoin(::Type{Nothing}, ::Type{T}) where {T} =$/;"	f
_promote_typejoin	base/promotion.jl	/^_promote_typejoin(::Type{T}, ::Type{Missing}) where {T} =$/;"	f
_promote_typejoin	base/promotion.jl	/^_promote_typejoin(::Type{T}, ::Type{Nothing}) where {T} =$/;"	f
_promote_typejoin	base/promotion.jl	/^_promote_typejoin(@nospecialize(a), @nospecialize(b)) = typejoin(a, b)$/;"	f
_propagate_inbounds_meta	base/essentials.jl	/^macro _propagate_inbounds_meta()$/;"	f
_pure_meta	base/essentials.jl	/^macro _pure_meta()$/;"	f
_qr!	stdlib/SuiteSparse/src/spqr.jl	/^function _qr!(ordering::Integer, tol::Real, econ::Integer, getCTX::Integer,$/;"	f
_quantile	stdlib/Statistics/src/Statistics.jl	/^@inline function _quantile(v::AbstractVector, p::Real)$/;"	f
_quantilesort!	stdlib/Statistics/src/Statistics.jl	/^function _quantilesort!(v::AbstractArray, sorted::Bool, minp::Real, maxp::Real)$/;"	f
_rand	stdlib/LinearAlgebra/test/addmul.jl	/^_rand(::Type{BigInt}) = BigInt(_rand(Int))$/;"	f
_rand	stdlib/LinearAlgebra/test/addmul.jl	/^_rand(::Type{T}) where {F, T <: Complex{F}} = T(_rand(F), _rand(F))$/;"	f
_rand	stdlib/LinearAlgebra/test/addmul.jl	/^_rand(::Type{T}) where {T <: AbstractFloat} = T(randn())$/;"	f
_rand	stdlib/LinearAlgebra/test/addmul.jl	/^_rand(::Type{T}) where {T <: Integer} =$/;"	f
_rand	stdlib/LinearAlgebra/test/addmul.jl	/^_rand(A::Type{<: SymTridiagonal{T}}, shape) where {T} =$/;"	f
_rand	stdlib/LinearAlgebra/test/addmul.jl	/^function _rand(A::Type{<: AbstractArray}, shape)$/;"	f
_rand	stdlib/LinearAlgebra/test/addmul.jl	/^function _rand(A::Type{<:Array}, shape)$/;"	f
_rand	stdlib/Random/src/generation.jl	/^function _rand(rng::AbstractRNG, sp::SamplerBigFloat)$/;"	f
_rand	stdlib/Random/src/generation.jl	/^function _rand(rng::AbstractRNG, sp::SamplerBigFloat, ::CloseOpen01{BigFloat})$/;"	f
_rand	stdlib/Random/src/generation.jl	/^function _rand(rng::AbstractRNG, sp::SamplerBigFloat, ::CloseOpen01{BigFloat}, ::Nothing)$/;"	f
_rand	stdlib/Random/src/generation.jl	/^function _rand(rng::AbstractRNG, sp::SamplerBigFloat, ::CloseOpen12{BigFloat})$/;"	f
_rand	test/bigint.jl	/^    _rand(::Type{BigInt}, n=1000) = let x = big(2)^rand(1:rand(1:n))$/;"	f
_rand	test/bigint.jl	/^    _rand(F::Type{<:AbstractFloat}) = F(_rand(BigInt, round(Int, log2(floatmax(F))))) + rand(F)$/;"	f
_rand	test/bigint.jl	/^    _rand(T) = rand(T)$/;"	f
_rand!	stdlib/Random/src/RNGs.jl	/^function _rand!(r::MersenneTwister, A::Array{T}, n64::Int, I::FloatInterval_64) where T$/;"	f
_rand128	stdlib/Random/src/generation.jl	/^_rand128(r::AbstractRNG, ::Type{UInt64}) =$/;"	f
_rand128	stdlib/Random/src/generation.jl	/^function _rand128(r::AbstractRNG, ::Type{Float64})$/;"	f
_rand52	stdlib/Random/src/generation.jl	/^_rand52(r::AbstractRNG, ::Type{Float64}) = reinterpret(UInt64, rand(r, CloseOpen12()))$/;"	f
_rand52	stdlib/Random/src/generation.jl	/^_rand52(r::AbstractRNG, ::Type{UInt64})  = rand(r, UInt64)$/;"	f
_rand_max383!	stdlib/Random/src/RNGs.jl	/^function _rand_max383!(r::MersenneTwister, A::UnsafeView{Float64}, I::FloatInterval_64)$/;"	f
_randjump	stdlib/Random/src/RNGs.jl	/^_randjump(r::MersenneTwister, jumppoly::DSFMT.GF2X) =$/;"	f
_range	base/range.jl	/^_range(::Nothing, ::Nothing, ::Nothing, ::Integer) = # range(nothing, length=l)$/;"	f
_range	base/range.jl	/^_range(::Nothing, ::Nothing, ::Nothing, ::Nothing) = # range(nothing)$/;"	f
_range	base/range.jl	/^_range(a,                ::Nothing,         ::Nothing, len::Integer) = _range(a, oftype(a-a, 1),/;"	f
_range	base/range.jl	/^_range(a::AbstractFloat, ::Nothing,         ::Nothing, len::Integer) = _range(a, oftype(a, 1),  /;"	f
_range	base/range.jl	/^_range(a::AbstractFloat, st::AbstractFloat, ::Nothing, len::Integer) = _range(promote(a, st)...,/;"	f
_range	base/range.jl	/^_range(a::AbstractFloat, st::Real,          ::Nothing, len::Integer) = _range(a, float(st),     /;"	f
_range	base/range.jl	/^_range(a::Real,          ::Nothing,         ::Nothing, len::Integer) = UnitRange{typeof(a)}(a, o/;"	f
_range	base/range.jl	/^_range(a::Real,          st::AbstractFloat, ::Nothing, len::Integer) = _range(float(a), st,     /;"	f
_range	base/range.jl	/^_range(a::T, step, ::Nothing, len::Integer) where {T} =$/;"	f
_range	base/range.jl	/^_range(a::T, step::T, ::Nothing, len::Integer) where {T <: AbstractFloat} =$/;"	f
_range	base/range.jl	/^_range(start,     ::Nothing, ::Nothing, ::Nothing) = # range(a)$/;"	f
_range	base/range.jl	/^_range(start,     step,      ::Nothing, ::Nothing) = # range(a, step=s)$/;"	f
_range	base/range.jl	/^_range(start, ::Nothing, stop, ::Nothing) = (:)(start, stop)$/;"	f
_range	base/range.jl	/^_range(start, step,      stop, ::Nothing) = (:)(start, step, stop)$/;"	f
_range	base/range.jl	/^_range(start::Real, step::Real, stop::Real, length::Integer) = # range(a, step=s, stop=b, length/;"	f
_range	base/range.jl	/^_range(start::T, ::Nothing, stop::T, len::Integer) where {T<:Integer} =$/;"	f
_range	base/range.jl	/^_range(start::T, ::Nothing, stop::T, len::Integer) where {T<:Real} = LinRange{T}(start, stop, le/;"	f
_range	base/range.jl	/^_range(start::T, ::Nothing, stop::T, len::Integer) where {T} = LinRange{T}(start, stop, len)$/;"	f
_range	base/range.jl	/^function _range(start::T, ::Nothing, stop::S, len::Integer) where {T,S}$/;"	f
_range	base/twiceprecision.jl	/^function _range(a::T, st::T, ::Nothing, len::Integer) where T<:Union{Float16,Float32,Float64}$/;"	f
_range	base/twiceprecision.jl	/^function _range(start::T, ::Nothing, stop::T, len::Integer) where {T<:IEEEFloat}$/;"	f
_range2	base/range.jl	/^_range2(start, ::Nothing, stop, ::Nothing) =$/;"	f
_range2	base/range.jl	/^_range2(start, step, stop, length) = _range(start, step, stop, length)$/;"	f
_rangestyle	base/range.jl	/^_rangestyle(::Any, ::Any, a::T, step::S, len::Integer) where {T,S} =$/;"	f
_rangestyle	base/range.jl	/^_rangestyle(::Ordered, ::ArithmeticWraps, a::T, step::S, len::Integer) where {T,S} =$/;"	f
_readKey	stdlib/REPL/src/TerminalMenus/util.jl	/^function _readKey(stream::IO=stdin)$/;"	f
_read_dependency_src	base/loading.jl	/^function _read_dependency_src(io::IO, filename::AbstractString)$/;"	f
_realtype	base/reducedim.jl	/^_realtype(::Any, T) = T$/;"	f
_realtype	base/reducedim.jl	/^_realtype(::Type{<:Complex}) = Real$/;"	f
_realtype	base/reducedim.jl	/^_realtype(::Union{typeof(abs),typeof(abs2)}, T) = _realtype(T)$/;"	f
_realtype	base/reducedim.jl	/^_realtype(T::Type) = T$/;"	f
_reducedim_init	base/reducedim.jl	/^function _reducedim_init(f, op, fv, fop, A, region)$/;"	f
_reformat_bt	base/error.jl	/^function _reformat_bt(bt, bt2)$/;"	f
_regex_opts_str	base/regex.jl	/^const _regex_opts_str = Ref{ImmutableDict{UInt32,String}}()$/;"	v
_region	stdlib/REPL/src/LineEdit.jl	/^_region(s) = getmark(s) => position(s)$/;"	f
_remaining_size	base/abstractarray.jl	/^_remaining_size(::Tuple{Any}, t::Tuple) = t$/;"	f
_remaining_size	base/abstractarray.jl	/^_remaining_size(h::Tuple, t::Tuple) = (@_inline_meta; _remaining_size(tail(h), tail(t)))$/;"	f
_remset	src/julia_threads.h	/^    arraylist_t _remset[2]; \/\/ contains jl_value_t*$/;"	m	struct:__anonf8aecdb10608	typeref:typename:arraylist_t[2]
_repeat	base/abstractarraymath.jl	/^@noinline function _repeat(A::AbstractArray, inner, outer)$/;"	f
_repeat_inner_outer	base/abstractarraymath.jl	/^_repeat_inner_outer(A, ::Nothing, ::Nothing) = A$/;"	f
_repeat_inner_outer	base/abstractarraymath.jl	/^_repeat_inner_outer(A, ::Nothing, outer) = _repeat(A, ntuple(n->1, Val(ndims(A))), rep_kw2tup(ou/;"	f
_repeat_inner_outer	base/abstractarraymath.jl	/^_repeat_inner_outer(A, inner, ::Nothing) = _repeat(A, rep_kw2tup(inner), ntuple(n->1, Val(ndims(/;"	f
_repeat_inner_outer	base/abstractarraymath.jl	/^_repeat_inner_outer(A, inner, outer)     = _repeat(A, rep_kw2tup(inner), rep_kw2tup(outer))$/;"	f
_repeat_inner_outer	base/abstractarraymath.jl	/^_repeat_inner_outer(A::AbstractVecOrMat, ::Nothing, r::Integer) = repeat(A, r)$/;"	f
_repeat_inner_outer	base/abstractarraymath.jl	/^_repeat_inner_outer(A::AbstractVecOrMat, ::Nothing, r::Union{Tuple{Integer},Tuple{Integer,Intege/;"	f
_reperr	base/abstractarraymath.jl	/^_reperr(s, n, N) = throw(ArgumentError("number of " * s * " repetitions " *$/;"	f
_repl	stdlib/REPL/src/docview.jl	/^function _repl(x)$/;"	f
_replace	base/regex.jl	/^function _replace(io, repl_s::SubstitutionString, str, r, re::RegexAndMatchData)$/;"	f
_replace	base/strings/util.jl	/^_replace(io, repl, str, r, pattern) = print(io, repl)$/;"	f
_replace	base/strings/util.jl	/^_replace(io, repl::Function, str, r, pattern) =$/;"	f
_replace	base/strings/util.jl	/^_replace(io, repl::Function, str, r, pattern::Function) =$/;"	f
_replace!	base/set.jl	/^function _replace!(new::Callable, res::AbstractArray, A::AbstractArray, count::Int)$/;"	f
_replace!	base/set.jl	/^function _replace!(new::Callable, res::T, A::T,$/;"	f
_require	base/loading.jl	/^function _require(pkg::PkgId)$/;"	f
_require_callback	stdlib/Distributed/src/Distributed.jl	/^function _require_callback(mod::Base.PkgId)$/;"	f
_require_dependencies	base/loading.jl	/^const _require_dependencies = Any[] # a list of (mod, path, mtime) tuples that are the file depe/;"	v
_require_from_serialized	base/loading.jl	/^function _require_from_serialized(path::String)$/;"	f
_require_search_from_serialized	base/loading.jl	/^function _require_search_from_serialized(pkg::PkgId, sourcepath::String)$/;"	f
_reshape	base/reshapedarray.jl	/^_reshape(R::ReshapedArray, dims::Dims) = _reshape(R.parent, dims)$/;"	f
_reshape	base/reshapedarray.jl	/^_reshape(parent::Array, dims::Dims) = reshape(parent, dims)$/;"	f
_reshape	base/reshapedarray.jl	/^_reshape(parent::Array, dims::Dims{1}) = reshape(parent, dims)$/;"	f
_reshape	base/reshapedarray.jl	/^_reshape(parent::Vector, dims::Dims{1}) = parent$/;"	f
_reshape	base/reshapedarray.jl	/^_reshape(v::ReshapedArray{<:Any,1}, dims::Dims{1}) = _reshape(v.parent, dims)$/;"	f
_reshape	base/reshapedarray.jl	/^function _reshape(parent::AbstractArray, dims::Dims)$/;"	f
_reshape	base/reshapedarray.jl	/^function _reshape(v::AbstractVector, dims::Dims{1})$/;"	f
_reshape_uncolon	base/reshapedarray.jl	/^@inline function _reshape_uncolon(A, dims)$/;"	f
_ret_size	stdlib/LinearAlgebra/src/qr.jl	/^_ret_size(A::Factorization, B::AbstractMatrix) = (max(size(A, 2), size(B, 1)), size(B, 2))$/;"	f
_ret_size	stdlib/LinearAlgebra/src/qr.jl	/^_ret_size(A::Factorization, b::AbstractVector) = (max(size(A, 2), length(b)),)$/;"	f
_ret_size	stdlib/SuiteSparse/src/spqr.jl	/^_ret_size(F::QRSparse, B::AbstractMatrix) = (size(F, 2), size(B, 2))$/;"	f
_ret_size	stdlib/SuiteSparse/src/spqr.jl	/^_ret_size(F::QRSparse, b::AbstractVector) = (size(F, 2),)$/;"	f
_return_type	base/compiler/typeinfer.jl	/^function _return_type(@nospecialize(f), @nospecialize(t), world)$/;"	f
_return_type	base/promotion.jl	/^    _return_type(@nospecialize(f), @nospecialize(t)) = Any$/;"	f
_rightappdimmismatch	stdlib/LinearAlgebra/src/lq.jl	/^_rightappdimmismatch(rowsorcols) =$/;"	f
_rmprocs	stdlib/Distributed/src/cluster.jl	/^function _rmprocs(pids, waitfor)$/;"	f
_rmul_or_fill!	stdlib/LinearAlgebra/src/generic.jl	/^@inline function _rmul_or_fill!(C::AbstractArray, beta::Number)$/;"	f
_round_digits	base/floatfuncs.jl	/^function _round_digits(x, r::RoundingMode, digits::Integer, base)$/;"	f
_round_invstep	base/floatfuncs.jl	/^function _round_invstep(x, invstep, r::RoundingMode)$/;"	f
_round_rational	base/rational.jl	/^function _round_rational(::Type{T}, x::Rational{Tr}, ::RoundingMode{:NearestTiesAway}) where {T,/;"	f
_round_rational	base/rational.jl	/^function _round_rational(::Type{T}, x::Rational{Tr}, ::RoundingMode{:NearestTiesUp}) where {T,Tr/;"	f
_round_rational	base/rational.jl	/^function _round_rational(::Type{T}, x::Rational{Tr}, ::RoundingMode{:Nearest}) where {T,Tr}$/;"	f
_round_sigdigits	base/floatfuncs.jl	/^function _round_sigdigits(x, r::RoundingMode, sigdigits::Integer, base)$/;"	f
_round_step	base/floatfuncs.jl	/^function _round_step(x, step, r::RoundingMode)$/;"	f
_rowforind	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _rowforind(rowsentinel, k, stopk, A) =$/;"	f
_rowforind_all	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _rowforind_all(rowsentinel, ::Tuple{}, ::Tuple{}, ::Tuple{}) = ()$/;"	f
_rowforind_all	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _rowforind_all(rowsentinel, ks, stopks, As) = ($/;"	f
_rs_iterator	base/reshapedarray.jl	/^function _rs_iterator(P, mi::NTuple{M}) where M$/;"	f
_rs_setindex!_err	base/reshapedarray.jl	/^@noinline _rs_setindex!_err() = error("indexed assignment fails for a reshaped range; consider c/;"	f
_rsearch	base/strings/search.jl	/^function _rsearch(a::ByteArray, b::AbstractChar, i::Integer = length(a))$/;"	f
_rsearch	base/strings/search.jl	/^function _rsearch(a::Union{String,ByteArray}, b::Union{Int8,UInt8}, i::Integer = sizeof(a))$/;"	f
_rsearch	base/strings/search.jl	/^function _rsearch(s::Union{AbstractString,ByteArray},$/;"	f
_rsearchindex	base/strings/search.jl	/^function _rsearchindex(s::AbstractString,$/;"	f
_rsearchindex	base/strings/search.jl	/^function _rsearchindex(s::ByteArray, t::ByteArray, k::Integer)$/;"	f
_rsearchindex	base/strings/search.jl	/^function _rsearchindex(s::String, t::String, i::Integer)$/;"	f
_rshps	base/abstractarraymath.jl	/^@inline _rshps(shp, shp_i, ::Tuple{}, ::Tuple{}, o) =$/;"	f
_rshps	base/abstractarraymath.jl	/^@inline _rshps(shp, shp_i, ::Tuple{}, i, ::Tuple{}) = (n = i[1];$/;"	f
_rshps	base/abstractarraymath.jl	/^@inline _rshps(shp, shp_i, ::Tuple{}, i, o) = (n = i[1];$/;"	f
_rshps	base/abstractarraymath.jl	/^@inline _rshps(shp, shp_i, sz, i, o) = (n = sz[1] * i[1];$/;"	f
_rshps	base/abstractarraymath.jl	/^_rshps(shp, shp_i, ::Tuple{}, ::Tuple{}, ::Tuple{}) = (shp, shp_i)$/;"	f
_rshps	base/abstractarraymath.jl	/^_rshps(shp, shp_i, sz, ::Tuple{}, ::Tuple{}) =$/;"	f
_rshps	base/abstractarraymath.jl	/^_rshps(shp, shp_i, sz, ::Tuple{}, o) =$/;"	f
_rshps	base/abstractarraymath.jl	/^_rshps(shp, shp_i, sz, i, ::Tuple{}) =$/;"	f
_rsplit	base/strings/util.jl	/^function _rsplit(str::AbstractString, splitter, limit::Integer, keepempty::Bool, strs::Array)$/;"	f
_rttf_test	test/compiler/inference.jl	/^_rttf_test(::Int128) = 0$/;"	f
_rttf_test	test/compiler/inference.jl	/^_rttf_test(::Int16) = 0$/;"	f
_rttf_test	test/compiler/inference.jl	/^_rttf_test(::Int32) = 0$/;"	f
_rttf_test	test/compiler/inference.jl	/^_rttf_test(::Int64) = 0$/;"	f
_rttf_test	test/compiler/inference.jl	/^_rttf_test(::Int8) = 0$/;"	f
_sb_hash	base/secretbuffer.jl	/^const _sb_hash = UInt === UInt32 ? 0x111c0925 : 0xb06061e370557428$/;"	v
_search	base/strings/search.jl	/^function _search(a::ByteArray, b::AbstractChar, i::Integer = 1)$/;"	f
_search	base/strings/search.jl	/^function _search(a::Union{String,ByteArray}, b::Union{Int8,UInt8}, i::Integer = 1)$/;"	f
_search	base/strings/search.jl	/^function _search(s::Union{AbstractString,ByteArray},$/;"	f
_search_bloom_mask	base/strings/search.jl	/^function _search_bloom_mask(c)$/;"	f
_searchindex	base/strings/search.jl	/^_searchindex(s::AbstractString, t::AbstractChar, i::Integer) = something(findnext(isequal(t), s,/;"	f
_searchindex	base/strings/search.jl	/^function _searchindex(s::ByteArray, t::ByteArray, i::Integer)$/;"	f
_searchindex	base/strings/search.jl	/^function _searchindex(s::String, t::String, i::Integer)$/;"	f
_searchindex	base/strings/search.jl	/^function _searchindex(s::Union{AbstractString,ByteArray},$/;"	f
_selectdim	base/abstractarraymath.jl	/^@noinline function _selectdim(A, d, i, idxs)$/;"	f
_send_async	stdlib/Sockets/src/Sockets.jl	/^function _send_async(sock::UDPSocket, ipaddr::Union{IPv4, IPv6}, port::UInt16, buf)$/;"	f
_setbit	base/int.jl	/^    function _setbit(x::UInt128, i)$/;"	f
_setenv	base/env.jl	/^    function _setenv(svar::AbstractString, sval::AbstractString, overwrite::Bool=true)$/;"	f
_setenv	base/env.jl	/^    function _setenv(var::AbstractString, val::AbstractString, overwrite::Bool=true)$/;"	f
_setindex	base/tuple.jl	/^_setindex(v, i::Integer) = ()$/;"	f
_setindex	base/tuple.jl	/^function _setindex(v, i::Integer, first, tail...)$/;"	f
_setindex!	base/abstractarray.jl	/^_setindex!(::IndexLinear, A::AbstractArray, v, i::Int) = (@_propagate_inbounds_meta; setindex!(A/;"	f
_setindex!	base/abstractarray.jl	/^_setindex!(::IndexStyle, A::AbstractArray, v, I...) =$/;"	f
_setindex!	base/abstractarray.jl	/^function _setindex!(::IndexCartesian, A::AbstractArray, v, I::Vararg{Int,M}) where M$/;"	f
_setindex!	base/abstractarray.jl	/^function _setindex!(::IndexCartesian, A::AbstractArray{T,N}, v, I::Vararg{Int, N}) where {T,N}$/;"	f
_setindex!	base/abstractarray.jl	/^function _setindex!(::IndexLinear, A::AbstractArray, v, I::Vararg{Int,M}) where M$/;"	f
_setindex!	base/dict.jl	/^@propagate_inbounds function _setindex!(h::Dict, v, key, index)$/;"	f
_setindex!	base/multidimensional.jl	/^function _setindex!(l::IndexStyle, A::AbstractArray, x, I::Union{Real, AbstractArray}...)$/;"	f
_setindex_ra!	base/reinterpretarray.jl	/^@inline @propagate_inbounds function _setindex_ra!(a::ReinterpretArray{T,N,S}, v, i1::Int, taili/;"	f
_setindex_scalar!	stdlib/SparseArrays/src/sparsematrix.jl	/^function _setindex_scalar!(A::AbstractSparseMatrixCSC{Tv,Ti}, _v, _i::Integer, _j::Integer) wher/;"	f
_setint!	base/bitset.jl	/^@inline function _setint!(s::BitSet, idx::Int, b::Bool)$/;"	f
_shapecheckbc	stdlib/SparseArrays/src/higherorderfns.jl	/^function _shapecheckbc(f, args...)$/;"	f
_shm_mmap_array	stdlib/SharedArrays/src/SharedArrays.jl	/^function _shm_mmap_array(T, dims, shm_seg_name, mode)$/;"	f
_show	base/grisu/grisu.jl	/^function _show(io::IO, x::AbstractFloat, mode, n::Int, typed, compact)$/;"	f
_show_content	stdlib/Dates/src/io.jl	/^function _show_content(io::IO, d::DatePart{c}) where c$/;"	f
_show_content	stdlib/Dates/src/io.jl	/^function _show_content(io::IO, d::Delim)$/;"	f
_show_content	stdlib/Dates/src/io.jl	/^function _show_content(io::IO, d::Delim{<:AbstractChar, N}) where N$/;"	f
_show_cpuinfo	base/sysinfo.jl	/^function _show_cpuinfo(io::IO, info::Sys.CPUinfo, header::Bool=true, prefix::AbstractString="   /;"	f
_show_default	base/show.jl	/^function _show_default(io::IO, @nospecialize(x))$/;"	f
_show_empty	base/arrayshow.jl	/^_show_empty(io, X) = nothing # by default, we don't know this constructor$/;"	f
_show_empty	base/arrayshow.jl	/^_show_empty(io::IO, X::Array{T}) where {T} = print(io, "Array{", T, "}(undef,", join(size(X),','/;"	f
_show_nonempty	base/arrayshow.jl	/^_show_nonempty(::IO, ::AbstractVector, ::String) =$/;"	f
_show_nonempty	base/arrayshow.jl	/^_show_nonempty(io::IO, X::AbstractArray, prefix::String) =$/;"	f
_show_nonempty	base/arrayshow.jl	/^_show_nonempty(io::IO, X::AbstractArray{T,0} where T, prefix::String) = print_array(io, X)$/;"	f
_show_nonempty	base/arrayshow.jl	/^function _show_nonempty(io::IO, X::AbstractMatrix, prefix::String)$/;"	f
_shrink	base/array.jl	/^function _shrink(shrinker!, itr, itrs)$/;"	f
_shrink!	base/array.jl	/^function _shrink!(shrinker!, v::AbstractVector, itrs)$/;"	f
_shrink_filter!	base/array.jl	/^_shrink_filter!(keep) = _unique_filter!(∈, pop!, keep)$/;"	f
_significand	base/grisu/float.jl	/^function _significand(d::T) where T<:AbstractFloat$/;"	f
_similar_for	base/array.jl	/^_similar_for(c, ::Type{T}, itr, isz) where {T} = similar(c, T)$/;"	f
_similar_for	base/array.jl	/^_similar_for(c::AbstractArray, ::Type{T}, itr, ::HasLength) where {T} =$/;"	f
_similar_for	base/array.jl	/^_similar_for(c::AbstractArray, ::Type{T}, itr, ::HasShape) where {T} =$/;"	f
_similar_for	base/array.jl	/^_similar_for(c::AbstractArray, ::Type{T}, itr, ::SizeUnknown) where {T} = similar(c, T, 0)$/;"	f
_similar_for	base/dict.jl	/^_similar_for(c::AbstractDict, ::Type{T}, itr, isz) where {T} =$/;"	f
_similar_for	base/dict.jl	/^_similar_for(c::Dict, ::Type{Pair{K,V}}, itr, isz) where {K, V} = empty(c, K, V)$/;"	f
_similar_for	base/set.jl	/^_similar_for(c::AbstractSet, ::Type{T}, itr, isz) where {T} = empty(c, T)$/;"	f
_similar_or_copy	base/set.jl	/^_similar_or_copy(x::Any) = similar(x)$/;"	f
_similar_or_copy	base/set.jl	/^_similar_or_copy(x::Any, ::Type{T}) where {T} = similar(x, T)$/;"	f
_similar_or_copy	base/set.jl	/^_similar_or_copy(x::Union{AbstractDict,AbstractSet}) = copy(x)$/;"	f
_similar_or_copy	base/set.jl	/^_similar_or_copy(x::Union{AbstractDict,AbstractSet}, ::Type{T}) where {T} = _copy_oftype(x, T)$/;"	f
_sincos	base/special/trig.jl	/^_sincos(x) = (sin(x), cos(x))$/;"	f
_sincos	base/special/trig.jl	/^_sincos(x::AbstractFloat) = sincos(x)$/;"	f
_sizeof_uv_interface_address	stdlib/Sockets/src/addrinfo.jl	/^const _sizeof_uv_interface_address = ccall(:jl_uv_sizeof_interface_address,Int32,())$/;"	v
_small_enough	stdlib/LinearAlgebra/src/special.jl	/^_small_enough(A::SymTridiagonal) = size(A, 1) <= 2$/;"	f
_small_enough	stdlib/LinearAlgebra/src/special.jl	/^_small_enough(A::Tridiagonal) = size(A, 1) <= 2$/;"	f
_small_enough	stdlib/LinearAlgebra/src/special.jl	/^_small_enough(A::Union{Diagonal, Bidiagonal}) = size(A, 1) <= 1$/;"	f
_sockname	stdlib/Sockets/src/Sockets.jl	/^function _sockname(sock, self=true)$/;"	f
_sortedfindin	base/array.jl	/^function _sortedfindin(v::Union{AbstractArray, Tuple}, w)$/;"	f
_sortslices	base/multidimensional.jl	/^function _sortslices(A::AbstractArray, d::Val{dims}; kws...) where dims$/;"	f
_sourceinfo	base/logging.jl	/^macro _sourceinfo()$/;"	f
_space	src/flisp/flisp.h	/^        char _space[1];    \/\/ variable size$/;"	m	union:__anonb455601d0408::__anonb455601d050a	typeref:typename:char[1]
_space	src/flisp/flisp.h	/^    char _space[1];$/;"	m	struct:__anonb455601d0608	typeref:typename:char[1]
_space	src/support/arraylist.h	/^    void *_space[AL_N_INLINE];$/;"	m	struct:__anon1f859bb90108	typeref:typename:void * []
_space	src/support/htable.h	/^    void *_space[HT_N_INLINE];$/;"	m	struct:__anon806c816e0108	typeref:typename:void * []
_space	stdlib/REPL/src/LineEdit.jl	/^const _space = UInt8(' ')$/;"	v
_sparse_findnextnz	stdlib/SparseArrays/src/abstractsparse.jl	/^_sparse_findnextnz(v::AbstractSparseArray, i) = (I = findall(!iszero, v); n = searchsortedfirst(/;"	f
_sparse_findnextnz	stdlib/SparseArrays/src/sparsematrix.jl	/^function _sparse_findnextnz(m::AbstractSparseMatrixCSC, ij::CartesianIndex{2})$/;"	f
_sparse_findnextnz	stdlib/SparseArrays/src/sparsevector.jl	/^function _sparse_findnextnz(v::SparseVector, i::Integer)$/;"	f
_sparse_findprevnz	stdlib/SparseArrays/src/abstractsparse.jl	/^_sparse_findprevnz(v::AbstractSparseArray, i) = (I = findall(!iszero, v); n = searchsortedlast(I/;"	f
_sparse_findprevnz	stdlib/SparseArrays/src/sparsematrix.jl	/^function _sparse_findprevnz(m::AbstractSparseMatrixCSC, ij::CartesianIndex{2})$/;"	f
_sparse_findprevnz	stdlib/SparseArrays/src/sparsevector.jl	/^function _sparse_findprevnz(v::SparseVector, i::Integer)$/;"	f
_sparse_gen	stdlib/SparseArrays/src/sparseconvert.jl	/^function _sparse_gen(m, n, newcolptr, newrowval, newnzval)$/;"	f
_sparsem	stdlib/SparseArrays/src/sparseconvert.jl	/^_sparsem(A::AbstractSparseMatrix) = A$/;"	f
_sparsem	stdlib/SparseArrays/src/sparseconvert.jl	/^_sparsem(A::AbstractSparseVector) = A$/;"	f
_sparsem	stdlib/SparseArrays/src/sparseconvert.jl	/^_sparsem(A::SparseMatrixCSCSymmHerm) = _sparsem(A.uplo == 'U' ? nzrangeup : nzrangelo, A)$/;"	f
_sparsem	stdlib/SparseArrays/src/sparseconvert.jl	/^_sparsem(S::SubArray{<:Any,2,<:AbstractSparseMatrixCSC}) = getindex(S.parent,S.indices...)$/;"	f
_sparsem	stdlib/SparseArrays/src/sparseconvert.jl	/^function _sparsem(@nospecialize A::AbstractArray{Tv}) where Tv$/;"	f
_sparsem	stdlib/SparseArrays/src/sparseconvert.jl	/^function _sparsem(A::AbstractTriangularSparse{Tv}) where Tv$/;"	f
_sparsem	stdlib/SparseArrays/src/sparseconvert.jl	/^function _sparsem(A::Union{Transpose{<:Any,<:AbstractSparseMatrixCSC},Adjoint{<:Any,<:AbstractSp/;"	f
_sparsem	stdlib/SparseArrays/src/sparseconvert.jl	/^function _sparsem(A::Union{Transpose{<:Any,<:AbstractSparseVector},Adjoint{<:Any,<:AbstractSpars/;"	f
_sparsem	stdlib/SparseArrays/src/sparseconvert.jl	/^function _sparsem(fnzrange::Function, sA::SparseMatrixCSCSymmHerm{Tv}) where {Tv}$/;"	f
_sparsem	stdlib/SparseArrays/src/sparseconvert.jl	/^function _sparsem(taA::Union{Transpose{Tv,<:AbstractTriangularSparse},$/;"	f
_sparsesimilar	stdlib/SparseArrays/src/sparsematrix.jl	/^_sparsesimilar(S::AbstractSparseMatrixCSC, ::Type{TvNew}, ::Type{TiNew}, dims::Dims{1}) where {T/;"	f
_sparsesimilar	stdlib/SparseArrays/src/sparsematrix.jl	/^_sparsesimilar(S::AbstractSparseMatrixCSC, ::Type{TvNew}, ::Type{TiNew}, dims::Dims{2}) where {T/;"	f
_sparsesimilar	stdlib/SparseArrays/src/sparsematrix.jl	/^function _sparsesimilar(S::AbstractSparseMatrixCSC, ::Type{TvNew}, ::Type{TiNew}) where {TvNew,T/;"	f
_sparsesimilar	stdlib/SparseArrays/src/sparsevector.jl	/^_sparsesimilar(S::SparseVector, ::Type{TvNew}, ::Type{TiNew}) where {TvNew,TiNew} =$/;"	f
_sparsesimilar	stdlib/SparseArrays/src/sparsevector.jl	/^_sparsesimilar(S::SparseVector, ::Type{TvNew}, ::Type{TiNew}, dims::Dims{1}) where {TvNew,TiNew}/;"	f
_sparsesimilar	stdlib/SparseArrays/src/sparsevector.jl	/^_sparsesimilar(S::SparseVector, ::Type{TvNew}, ::Type{TiNew}, dims::Dims{2}) where {TvNew,TiNew}/;"	f
_sparsevector!	stdlib/SparseArrays/src/sparsevector.jl	/^function _sparsevector!(I::Vector{<:Integer}, V::Vector, len::Integer)$/;"	f
_sparsevector!	stdlib/SparseArrays/src/sparsevector.jl	/^function _sparsevector!(I::Vector{<:Integer}, V::Vector, len::Integer, combine::Function)$/;"	f
_sparsewrap	stdlib/SparseArrays/src/sparseconvert.jl	/^    @eval _sparsewrap(A::$ty) = $ty(_sparsem(parent(A)))$/;"	f
_sparsewrap	stdlib/SparseArrays/src/sparseconvert.jl	/^_sparsewrap(A::Hermitian) = Hermitian(_sparsem(parent(A)), A.uplo == 'U' ? :U : :L)$/;"	f
_sparsewrap	stdlib/SparseArrays/src/sparseconvert.jl	/^_sparsewrap(A::SubArray) = SubArray(_sparsem(parent(A)), A.indices)$/;"	f
_sparsewrap	stdlib/SparseArrays/src/sparseconvert.jl	/^_sparsewrap(A::Symmetric) = Symmetric(_sparsem(parent(A)), A.uplo == 'U' ? :U : :L)$/;"	f
_sparsewrap	stdlib/SparseArrays/src/sparseconvert.jl	/^function _sparsewrap(A::Union{Diagonal,Bidiagonal,Tridiagonal,SymTridiagonal})$/;"	f
_sparsifystructured	stdlib/SparseArrays/src/higherorderfns.jl	/^_sparsifystructured(M::AbstractMatrix) = SparseMatrixCSC(M)$/;"	f
_sparsifystructured	stdlib/SparseArrays/src/higherorderfns.jl	/^_sparsifystructured(M::AbstractSparseMatrix) = SparseMatrixCSC(M)$/;"	f
_sparsifystructured	stdlib/SparseArrays/src/higherorderfns.jl	/^_sparsifystructured(S::SparseVecOrMat) = S$/;"	f
_sparsifystructured	stdlib/SparseArrays/src/higherorderfns.jl	/^_sparsifystructured(V::AbstractSparseVector) = SparseVector(V)$/;"	f
_sparsifystructured	stdlib/SparseArrays/src/higherorderfns.jl	/^_sparsifystructured(V::AbstractVector) = SparseVector(V)$/;"	f
_sparsifystructured	stdlib/SparseArrays/src/higherorderfns.jl	/^_sparsifystructured(x) = x$/;"	f
_spawn	base/process.jl	/^_spawn(cmds::AbstractCmd) = _spawn(cmds, Any[])$/;"	f
_spawn	base/process.jl	/^function _spawn(cmd::Cmd, stdios::SpawnIOs)$/;"	f
_spawn	base/process.jl	/^function _spawn(cmd::Cmd, stdios::SpawnIOs, chain::ProcessChain)$/;"	f
_spawn	base/process.jl	/^function _spawn(cmds::AbstractCmd, stdios::SpawnIOs)$/;"	f
_spawn	base/process.jl	/^function _spawn(cmds::AndCmds, stdios::SpawnIOs, chain::ProcessChain)$/;"	f
_spawn	base/process.jl	/^function _spawn(cmds::ErrOrCmds, stdios::SpawnIOs, chain::ProcessChain)$/;"	f
_spawn	base/process.jl	/^function _spawn(cmds::OrCmds, stdios::SpawnIOs, chain::ProcessChain)$/;"	f
_spawn	base/process.jl	/^function _spawn(redirect::CmdRedirect, stdios::SpawnIOs, args...)$/;"	f
_spawn_primitive	base/process.jl	/^@noinline function _spawn_primitive(file, cmd::Cmd, stdio::SpawnIOs)$/;"	f
_spdiagm	stdlib/SparseArrays/src/sparsematrix.jl	/^function _spdiagm(size, kv::Pair{<:Integer,<:AbstractVector}...)$/;"	f
_spdot	stdlib/SparseArrays/src/sparsevector.jl	/^function _spdot(f::Function,$/;"	f
_spgetindex	stdlib/SparseArrays/src/sparsevector.jl	/^function _spgetindex(m::Int, nzind::AbstractVector{Ti}, nzval::AbstractVector{Tv}, i::Integer) w/;"	f
_splatmap	base/subarray.jl	/^_splatmap(f, ::Tuple{}) = ()$/;"	f
_splatmap	base/subarray.jl	/^_splatmap(f, t::Tuple) = (f(t[1])..., _splatmap(f, tail(t))...)$/;"	f
_split	base/strings/util.jl	/^function _split(str::AbstractString, splitter, limit::Integer, keepempty::Bool, strs::Array)$/;"	f
_split1	base/multidimensional.jl	/^    @inline _split1(t, ref) = (t[1], _split1(tail(t), tail(ref))...)$/;"	f
_split1	base/multidimensional.jl	/^    _split1(::Tuple{}, ::Tuple{}) = ()$/;"	f
_split1	base/multidimensional.jl	/^    _split1(::Tuple{}, ref) = ()$/;"	f
_split1	base/multidimensional.jl	/^    _split1(t, ::Tuple{}) = ()$/;"	f
_splitdir_nodrive	base/path.jl	/^_splitdir_nodrive(path::String) = _splitdir_nodrive("", path)$/;"	f
_splitdir_nodrive	base/path.jl	/^function _splitdir_nodrive(a::String, b::String)$/;"	f
_splitrest	base/multidimensional.jl	/^    @inline _splitrest(t, ref) = _splitrest(tail(t), tail(ref))$/;"	f
_splitrest	base/multidimensional.jl	/^    _splitrest(::Tuple{}, ::Tuple{}) = ()$/;"	f
_splitrest	base/multidimensional.jl	/^    _splitrest(::Tuple{}, ref) = ()$/;"	f
_splitrest	base/multidimensional.jl	/^    _splitrest(t, ::Tuple{}) = t$/;"	f
_spsetnz_setindex!	stdlib/SparseArrays/src/sparsematrix.jl	/^function _spsetnz_setindex!(A::AbstractSparseMatrixCSC{Tv}, x::Tv,$/;"	f
_spsetz_setindex!	stdlib/SparseArrays/src/sparsematrix.jl	/^function _spsetz_setindex!(A::AbstractSparseMatrixCSC,$/;"	f
_squares	stdlib/Random/src/DSFMT.jl	/^const _squares = Dict{GF2X, Vector{GF2X}}()$/;"	v
_stacktrace	src/flisp/flisp.c	/^static value_t _stacktrace(fl_context_t *fl_ctx, uint32_t top)$/;"	f	typeref:typename:value_t	file:
_start	base/client.jl	/^function _start()$/;"	f
_startindforbccol	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _startindforbccol(j, expandshorz, A) = expandshorz ? colstartind(A, 1) : colstartind(A, /;"	f
_startindforbccol_all	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _startindforbccol_all(j, ::Tuple{}, ::Tuple{}) = ()$/;"	f
_startindforbccol_all	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _startindforbccol_all(j, expandshorzs, As) = ($/;"	f
_std	stdlib/Statistics/src/Statistics.jl	/^_std(A::AbstractArray, corrected::Bool, mean, ::Colon) =$/;"	f
_std	stdlib/Statistics/src/Statistics.jl	/^_std(A::AbstractArray, corrected::Bool, mean, dims) =$/;"	f
_std	stdlib/Statistics/src/Statistics.jl	/^_std(A::AbstractArray{<:AbstractFloat}, corrected::Bool, mean, ::Colon) =$/;"	f
_std	stdlib/Statistics/src/Statistics.jl	/^_std(A::AbstractArray{<:AbstractFloat}, corrected::Bool, mean, dims) =$/;"	f
_stdio_copy	base/process.jl	/^function _stdio_copy(stdios::SpawnIOs, fd::Int, @nospecialize replace)$/;"	f
_stopindforbccol	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _stopindforbccol(j, expandshorz, A) = expandshorz ? colboundind(A, 1) : colboundind(A, j/;"	f
_stopindforbccol_all	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _stopindforbccol_all(j, ::Tuple{}, ::Tuple{}) = ()$/;"	f
_stopindforbccol_all	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _stopindforbccol_all(j, expandshorzs, As) = ($/;"	f
_string	base/mpfr.jl	/^_string(x::BigFloat) = _string(x, "%.Re")$/;"	f
_string	base/mpfr.jl	/^_string(x::BigFloat, k::Integer) = _string(x, "%.$(k)Re")$/;"	f
_string	base/mpfr.jl	/^function _string(x::BigFloat, fmt::String)::String$/;"	f
_string_n	base/strings/string.jl	/^_string_n(n::Integer) = ccall(:jl_alloc_string, Ref{String}, (Csize_t,), n)$/;"	f
_sub	base/abstractarraymath.jl	/^_sub(::Tuple{}, ::Tuple{}) = ()$/;"	f
_sub	base/abstractarraymath.jl	/^_sub(t::Tuple, ::Tuple{}) = t$/;"	f
_sub	base/abstractarraymath.jl	/^_sub(t::Tuple, s::Tuple) = _sub(tail(t), tail(s))$/;"	f
_sub2ind	base/abstractarray.jl	/^_sub2ind(::DimsInteger) = 1$/;"	f
_sub2ind	base/abstractarray.jl	/^_sub2ind(::Indices) = 1$/;"	f
_sub2ind	base/abstractarray.jl	/^_sub2ind(::Tuple{}) = 1$/;"	f
_sub2ind	base/abstractarray.jl	/^_sub2ind(::Tuple{}, I::Integer...) = (@_inline_meta; _sub2ind_recurse((), 1, 1, I...))$/;"	f
_sub2ind	base/abstractarray.jl	/^_sub2ind(dims::DimsInteger, I::Integer...) = (@_inline_meta; _sub2ind_recurse(dims, 1, 1, I...))$/;"	f
_sub2ind	base/abstractarray.jl	/^_sub2ind(inds::Indices, I::Integer...) = (@_inline_meta; _sub2ind_recurse(inds, 1, 1, I...))$/;"	f
_sub2ind	base/abstractarray.jl	/^_sub2ind(inds::Indices{1}, I::Integer...) =$/;"	f
_sub2ind	base/abstractarray.jl	/^_sub2ind(inds::Tuple{OneTo}, I1::AbstractVector{T}, I::AbstractVector{T}...) where {T<:Integer} /;"	f
_sub2ind	base/abstractarray.jl	/^_sub2ind(inds::Tuple{OneTo}, I::Integer...) = (@_inline_meta; _sub2ind_recurse(inds, 1, 1, I...)/;"	f
_sub2ind	base/abstractarray.jl	/^_sub2ind(inds::Tuple{OneTo}, i::Integer)    = i$/;"	f
_sub2ind	base/abstractarray.jl	/^_sub2ind(inds::Union{DimsInteger,Indices}, I1::AbstractVector{T}, I::AbstractVector{T}...) where/;"	f
_sub2ind	base/abstractarray.jl	/^function _sub2ind(A::AbstractArray, I...)$/;"	f
_sub2ind	base/abstractarray.jl	/^function _sub2ind(inds::Indices{1}, I1::AbstractVector{T}, I::AbstractVector{T}...) where T<:Int/;"	f
_sub2ind!	base/abstractarray.jl	/^function _sub2ind!(Iout, inds, Iinds, I)$/;"	f
_sub2ind_recurse	base/abstractarray.jl	/^_sub2ind_recurse(::Any, L, ind) = ind$/;"	f
_sub2ind_recurse	base/abstractarray.jl	/^function _sub2ind_recurse(::Tuple{}, L, ind, i::Integer, I::Integer...)$/;"	f
_sub2ind_recurse	base/abstractarray.jl	/^function _sub2ind_recurse(inds, L, ind, i::Integer, I::Integer...)$/;"	f
_sub2ind_vec	base/abstractarray.jl	/^_sub2ind_vec(i) = ()$/;"	f
_sub2ind_vec	base/abstractarray.jl	/^_sub2ind_vec(i, I1, I...) = (@_inline_meta; (I1[i], _sub2ind_vec(i, I...)...))$/;"	f
_sub2ind_vecs	base/abstractarray.jl	/^function _sub2ind_vecs(inds, I::AbstractVector...)$/;"	f
_subtypes	stdlib/InteractiveUtils/src/InteractiveUtils.jl	/^function _subtypes(m::Module, x::Type, sts=Base.IdSet{Any}(), visited=Base.IdSet{Module}())$/;"	f
_subtypes_in	stdlib/InteractiveUtils/src/InteractiveUtils.jl	/^function _subtypes_in(mods::Array, x::Type)$/;"	f
_sum	base/bitarray.jl	/^_sum(A::BitArray, dims)    = reduce(+, A, dims=dims)$/;"	f
_sum	base/bitarray.jl	/^_sum(B::BitArray, ::Colon) = count(B)$/;"	f
_summarysize	base/summarysize.jl	/^@noinline function _summarysize(ss::SummarySize, @nospecialize obj)$/;"	f
_sumnnzs	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _sumnnzs(A) = nnz(A)$/;"	f
_sumnnzs	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _sumnnzs(A, Bs...) = nnz(A) + _sumnnzs(Bs...)$/;"	f
_svd!	stdlib/LinearAlgebra/src/svd.jl	/^function _svd!(A::StridedMatrix{T}, full::Bool, alg::QRIteration) where T<:BlasFloat$/;"	f
_swap!	stdlib/SparseArrays/src/sparsevector.jl	/^function _swap!(col::AbstractVector, start::Integer, fin::Integer, split::Integer)$/;"	f
_swap_cols!	stdlib/LinearAlgebra/src/lu.jl	/^function _swap_cols!(B::StridedMatrix, i::Integer, j::Integer)$/;"	f
_swap_cols!	stdlib/LinearAlgebra/src/lu.jl	/^function _swap_cols!(B::StridedVector, i::Integer, j::Integer)$/;"	f
_swap_rows!	stdlib/LinearAlgebra/src/lu.jl	/^function _swap_rows!(B::StridedMatrix, i::Integer, j::Integer)$/;"	f
_swap_rows!	stdlib/LinearAlgebra/src/lu.jl	/^function _swap_rows!(B::StridedVector, i::Integer, j::Integer)$/;"	f
_switchtupleunion	base/compiler/typeutils.jl	/^function _switchtupleunion(t::Vector{Any}, i::Int, tunion::Vector{Any}, @nospecialize(origt))$/;"	f
_symbol_t	src/flisp/flisp.h	/^typedef struct _symbol_t {$/;"	s
_tablesz	base/abstractdict.jl	/^_tablesz(x::Integer) = x < 16 ? 16 : one(x)<<((sizeof(x)<<3)-leading_zeros(x-1))$/;"	f
_tags	src/staticdata.c	/^static void *const _tags[] = {$/;"	v	typeref:typename:void * const[]	file:
_task	contrib/mac/frameworkapp/ExecSandbox/ExecSandbox.m	/^  NSTask *_Nonnull _task;$/;"	E	interface:JuliaTask
_term_header	stdlib/Markdown/src/render/terminal/render.jl	/^function _term_header(io::IO, md, char, columns)$/;"	f
_test_27632	test/subarray.jl	/^function _test_27632(A)$/;"	f
_test_at_locals1	test/reflection.jl	/^function _test_at_locals1(::Any, ::Any)$/;"	f
_test_at_locals2	test/reflection.jl	/^function _test_at_locals2(a::Any, ::Any)$/;"	f
_test_flags	stdlib/Printf/test/runtests.jl	/^function _test_flags(val, vflag::AbstractString, fmt::AbstractString, res::AbstractString, prefi/;"	f
_test_mixed	test/subarray.jl	/^function _test_mixed(@nospecialize(A), @nospecialize(B))$/;"	f
_test_varinfo_	stdlib/InteractiveUtils/test/runtests.jl	/^module _test_varinfo_$/;"	f
_testmat	stdlib/LinearAlgebra/src/blas.jl	/^const _testmat = [1.0 0.0; 0.0 -1.0]$/;"	v
_textrepr	base/multimedia.jl	/^_textrepr(::MIME, x::AbstractString, context) = x$/;"	f
_textrepr	base/multimedia.jl	/^_textrepr(m::MIME"text\/plain", x::AbstractString, context) = String(__binrepr(m, x, context))$/;"	f
_textrepr	base/multimedia.jl	/^_textrepr(m::MIME, x, context) = String(__binrepr(m, x, context))$/;"	f
_thisind_str	base/strings/string.jl	/^@inline function _thisind_str(s, i::Int)$/;"	f
_threadedregion	src/threading.c	/^unsigned volatile _threadedregion; \/\/ HACK: keep track of whether it is safe to do IO$/;"	v	typeref:typename:unsigned volatile
_threadsfor	base/threadingconstructs.jl	/^function _threadsfor(iter,lbody)$/;"	f
_throw_argerror	base/array.jl	/^function _throw_argerror()$/;"	f
_throw_bitset_bounds_err	base/bitset.jl	/^@noinline _throw_bitset_bounds_err() =$/;"	f
_throw_bitset_notempty_error	base/bitset.jl	/^@noinline _throw_bitset_notempty_error() =$/;"	f
_throw_dmrs	base/reshapedarray.jl	/^@noinline function _throw_dmrs(n, str, dims)$/;"	f
_throw_keyerror	base/bitset.jl	/^@noinline _throw_keyerror(n) = throw(KeyError(n))$/;"	f
_throw_not_readable	base/iobuffer.jl	/^@noinline function _throw_not_readable()$/;"	f
_tid	base/pcre.jl	/^_tid() = Int(ccall(:jl_threadid, Int16, ())+1)$/;"	f
_to_linear_index	base/abstractarray.jl	/^_to_linear_index(A::AbstractArray) = 1$/;"	f
_to_linear_index	base/abstractarray.jl	/^_to_linear_index(A::AbstractArray, I::Int...) = (@_inline_meta; _sub2ind(A, I...))$/;"	f
_to_linear_index	base/abstractarray.jl	/^_to_linear_index(A::AbstractArray, i::Int) = i$/;"	f
_to_linear_index	base/abstractarray.jl	/^_to_linear_index(A::AbstractVector, i::Int, I::Int...) = i$/;"	f
_to_same_csc	stdlib/SparseArrays/src/sparsematrix.jl	/^_to_same_csc(::AbstractSparseMatrixCSC{Tv, Ti}, V::AbstractMatrix, I...) where {Tv,Ti} = convert/;"	f
_to_same_csc	stdlib/SparseArrays/src/sparsematrix.jl	/^_to_same_csc(::AbstractSparseMatrixCSC{Tv, Ti}, V::AbstractVector, I...) where {Tv,Ti} = convert/;"	f
_to_subscript_indices	base/abstractarray.jl	/^_to_subscript_indices(A, J::Tuple, Jrem::Tuple) = J # already bounds-checked, safe to drop$/;"	f
_to_subscript_indices	base/abstractarray.jl	/^_to_subscript_indices(A::AbstractArray, J::Tuple, Jrem::Tuple{}) =$/;"	f
_to_subscript_indices	base/abstractarray.jl	/^_to_subscript_indices(A::AbstractArray, i::Int) = (@_inline_meta; _unsafe_ind2sub(A, i))$/;"	f
_to_subscript_indices	base/abstractarray.jl	/^_to_subscript_indices(A::AbstractArray{T,0}) where {T} = ()$/;"	f
_to_subscript_indices	base/abstractarray.jl	/^_to_subscript_indices(A::AbstractArray{T,0}, I::Int...) where {T} = ()$/;"	f
_to_subscript_indices	base/abstractarray.jl	/^_to_subscript_indices(A::AbstractArray{T,0}, i::Int) where {T} = ()$/;"	f
_to_subscript_indices	base/abstractarray.jl	/^_to_subscript_indices(A::AbstractArray{T,N}) where {T,N} = (@_inline_meta; fill_to_length((), 1,/;"	f
_to_subscript_indices	base/abstractarray.jl	/^_to_subscript_indices(A::AbstractArray{T,N}, I::Vararg{Int,N}) where {T,N} = I$/;"	f
_to_subscript_indices	base/abstractarray.jl	/^function _to_subscript_indices(A::AbstractArray{T,N}, I::Int...) where {T,N}$/;"	f
_toind	base/bitarray.jl	/^@inline _toind(i1, irest) = CartesianIndex(i1, irest...)$/;"	f
_toind	base/bitarray.jl	/^@inline _toind(i1, irest::Tuple{}) = i1$/;"	f
_topmod	base/compiler/inferencestate.jl	/^_topmod(sv::InferenceState) = _topmod(sv.mod)$/;"	f
_topmod	base/compiler/optimize.jl	/^_topmod(sv::OptimizationState) = _topmod(sv.mod)$/;"	f
_topmod	base/compiler/utilities.jl	/^_topmod(m::Module) = ccall(:jl_base_relative_to, Any, (Any,), m)::Module$/;"	f
_totuple	base/tuple.jl	/^_totuple(::Type{Tuple{Vararg{E}}}, itr, s...) where {E} = (collect(E, Iterators.rest(itr,s...))./;"	f
_totuple	base/tuple.jl	/^_totuple(::Type{Tuple{}}, itr, s...) = ()$/;"	f
_totuple	base/tuple.jl	/^_totuple(::Type{Tuple}, itr, s...) = (collect(Iterators.rest(itr,s...))...,)$/;"	f
_totuple	base/tuple.jl	/^function _totuple(T, itr, s...)$/;"	f
_totuple	base/tuple.jl	/^function _totuple(T::Type{All16{E,N}}, itr) where {E,N}$/;"	f
_totuple	test/ambiguous.jl	/^_totuple(::Type{Tuple{Vararg{E}}}, itr, s...) where {E} = E$/;"	f
_totuple_err	base/tuple.jl	/^function _totuple_err(@nospecialize T)$/;"	f
_tp_prod	base/twiceprecision.jl	/^_tp_prod(t::TwicePrecision) = t$/;"	f
_tp_prod	base/twiceprecision.jl	/^function _tp_prod(t::TwicePrecision, x, y...)$/;"	f
_track_dependencies	base/loading.jl	/^const _track_dependencies = Ref(false) # set this to true to track the list of file dependencies$/;"	v
_transpose_hcat	stdlib/LinearAlgebra/src/adjtrans.jl	/^_transpose_hcat(tvs::Union{Number,TransposeAbsVec}...) = transpose(vcat(map(transpose, tvs)...))$/;"	f
_trimmedindex	base/subarray.jl	/^_trimmedindex(i::AbstractArray) = oftype(i, reshape(eachindex(IndexLinear(), i), axes(i)))$/;"	f
_trimmedindex	base/subarray.jl	/^_trimmedindex(i::AbstractUnitRange) = oftype(i, OneTo(length(i)))$/;"	f
_trimmedindex	base/subarray.jl	/^_trimmedindex(i::Real) = oftype(i, 1)$/;"	f
_true29152	test/core.jl	/^_true29152 = true;$/;"	v
_truncate_at_width_or_chars	base/dict.jl	/^function _truncate_at_width_or_chars(str, width, chars="", truncmark="…")$/;"	f
_tryrequire_from_serialized	base/loading.jl	/^function _tryrequire_from_serialized(modkey::PkgId, build_id::UInt64, modpath::Union{Nothing, St/;"	f
_trywait	base/asyncevent.jl	/^function _trywait(t::Union{Timer, AsyncCondition})$/;"	f
_tt2	base/abstractdict.jl	/^_tt2(::Type{Pair{A,B}}) where {A,B} = B$/;"	f
_tuple_any	base/tuple.jl	/^_tuple_any(f::Function, t::Tuple) = _tuple_any(f, false, t...)$/;"	f
_tuple_any	base/tuple.jl	/^_tuple_any(f::Function, tf::Bool) = tf$/;"	f
_tuple_any	base/tuple.jl	/^function _tuple_any(f::Function, tf::Bool, a, b...)$/;"	f
_tvarnames	base/compiler/tfuncs.jl	/^const _tvarnames = Symbol[:_A, :_B, :_C, :_D, :_E, :_F, :_G, :_H, :_I, :_J, :_K, :_L, :_M,$/;"	v
_two_finally	test/core.jl	/^function _two_finally(n)$/;"	f
_type_intersect	test/subtype.jl	/^_type_intersect(@nospecialize(x), @nospecialize(y)) = ccall(:jl_intersect_types, Any, (Any, Any)/;"	f
_typed_hcat	base/abstractarray.jl	/^function _typed_hcat(::Type{T}, A::AbstractVecOrTuple{AbstractVecOrMat}) where T$/;"	f
_typed_vcat	base/abstractarray.jl	/^function _typed_vcat(::Type{T}, A::AbstractVecOrTuple{AbstractVecOrMat}) where T$/;"	f
_typed_vcat	base/abstractarray.jl	/^function _typed_vcat(::Type{T}, V::AbstractVecOrTuple{AbstractVector}) where T$/;"	f
_typeddict	base/abstractdict.jl	/^function _typeddict(d::AbstractDict, others::AbstractDict...)$/;"	f
_typename	base/compiler/typeutils.jl	/^_typename(@nospecialize a) = Union{}$/;"	f
_typename	base/compiler/typeutils.jl	/^_typename(a::DataType) = Const(a.name)$/;"	f
_typename	base/compiler/typeutils.jl	/^_typename(a::TypeVar) = Core.TypeName$/;"	f
_typename	base/compiler/typeutils.jl	/^_typename(union::UnionAll) = _typename(union.body)$/;"	f
_typename	base/compiler/typeutils.jl	/^function _typename(a::Union)$/;"	f
_unaliascopy	base/abstractarray.jl	/^_unaliascopy(A, C) = throw(ArgumentError("""$/;"	f
_unaliascopy	base/abstractarray.jl	/^_unaliascopy(A::T, C::T) where {T} = C$/;"	f
_unchecked_maxnnzbcres	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _unchecked_maxnnzbcres(shape, As...) = _unchecked_maxnnzbcres(shape, As)$/;"	f
_unchecked_maxnnzbcres	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _unchecked_maxnnzbcres(shape, As::Tuple) = min(_densennz(shape), sum(_maxnnzfrom_each(sh/;"	f
_uncompressed_ast	base/reflection.jl	/^_uncompressed_ast(ci::Core.CodeInstance, s::Array{UInt8,1}) = ccall(:jl_uncompress_ast, Any, (An/;"	f
_uncompressed_ast	base/reflection.jl	/^_uncompressed_ast(m::Method, s::Array{UInt8,1}) = ccall(:jl_uncompress_ast, Any, (Any, Ptr{Cvoid/;"	f
_uncompressed_ast	base/reflection.jl	/^_uncompressed_ast(m::Method, s::CodeInfo) = copy(s)$/;"	f
_uniontypes	base/reflection.jl	/^_uniontypes(@nospecialize(x), ts) = (push!(ts, x); ts)$/;"	f
_uniontypes	base/reflection.jl	/^_uniontypes(x::Union, ts) = (_uniontypes(x.a,ts); _uniontypes(x.b,ts); ts)$/;"	f
_unique!	base/set.jl	/^_unique!(A::AbstractVector) = unique!(identity, A::AbstractVector)$/;"	f
_unique!	base/set.jl	/^function _unique!(f, A::AbstractVector, seen::Set, current::Integer, i::Integer)$/;"	f
_unique!	base/set.jl	/^function _unique!(f, out::AbstractVector, C, seen::Set, i)$/;"	f
_unique_dims	base/multidimensional.jl	/^@generated function _unique_dims(A::AbstractArray{T,N}, dim::Integer) where {T,N}$/;"	f
_unique_dims	base/multidimensional.jl	/^_unique_dims(A::AbstractArray, dims::Colon) = invoke(unique, Tuple{Any}, A)$/;"	f
_unique_filter!	base/array.jl	/^_unique_filter!(pred, update!, state) = function (x)$/;"	f
_unique_from	base/set.jl	/^_unique_from(itr, out, seen, i) = unique_from(itr, out, seen, i)$/;"	f
_units	stdlib/Dates/src/periods.jl	/^    @eval _units(x::$period) = " " * $accessor_str * (abs(value(x)) == 1 ? "" : "s")$/;"	f
_unsafe_bitsetindex!	base/bitarray.jl	/^@inline function _unsafe_bitsetindex!(Bc::Array{UInt64}, x::Bool, i1::Int, i2::Int)$/;"	f
_unsafe_fill_indices!	base/multidimensional.jl	/^@generated function _unsafe_fill_indices!(B::BitArray, x,$/;"	f
_unsafe_getindex	base/multidimensional.jl	/^function _unsafe_getindex(::IndexStyle, A::AbstractArray, I::Vararg{Union{Real, AbstractArray}, /;"	f
_unsafe_getindex	base/reshapedarray.jl	/^@inline function _unsafe_getindex(A::ReshapedArray{T,N}, indices::Vararg{Int,N}) where {T,N}$/;"	f
_unsafe_getindex!	base/multidimensional.jl	/^@generated function _unsafe_getindex!(X::BitArray, B::BitArray, I::Union{Int,AbstractArray{Int}}/;"	f
_unsafe_getindex!	base/multidimensional.jl	/^@generated function _unsafe_getindex!(X::BitArray, B::BitArray,$/;"	f
_unsafe_getindex!	base/multidimensional.jl	/^@generated function _unsafe_getindex!(dest::AbstractArray, src::AbstractArray, I::Vararg{Union{R/;"	f
_unsafe_getindex!	base/multidimensional.jl	/^@inline function _unsafe_getindex!(X::BitArray, B::BitArray, I0::Union{UnitRange{Int},Slice})$/;"	f
_unsafe_getindex_rs	base/reshapedarray.jl	/^@inline _unsafe_getindex_rs(A, I) = (@inbounds ret = A[I...]; ret)$/;"	f
_unsafe_getindex_rs	base/reshapedarray.jl	/^@inline _unsafe_getindex_rs(A, i::Integer) = (@inbounds ret = A[i]; ret)$/;"	f
_unsafe_ind2sub	base/abstractarray.jl	/^_unsafe_ind2sub(::Tuple{}, i) = () # _ind2sub may throw(BoundsError()) in this case$/;"	f
_unsafe_ind2sub	base/abstractarray.jl	/^_unsafe_ind2sub(sz, i) = (@_inline_meta; _ind2sub(sz, i))$/;"	f
_unsafe_setindex!	base/bitarray.jl	/^function _unsafe_setindex!(B::BitArray, X::AbstractArray, I::BitArray)$/;"	f
_unsafe_setindex!	base/multidimensional.jl	/^@generated function _unsafe_setindex!(::IndexStyle, A::AbstractArray, x, I::Union{Real,AbstractA/;"	f
_unsafe_setindex!	base/multidimensional.jl	/^@generated function _unsafe_setindex!(B::BitArray, X::Union{StridedArray,BitArray},$/;"	f
_unsafe_setindex!	base/reshapedarray.jl	/^@inline function _unsafe_setindex!(A::ReshapedArray{T,N}, val, indices::Vararg{Int,N}) where {T,/;"	f
_unsetenv	base/env.jl	/^    function _unsetenv(svar::AbstractString)$/;"	f
_unsetenv	base/env.jl	/^    function _unsetenv(var::AbstractString)$/;"	f
_unsetindex!	base/array.jl	/^function _unsetindex!(A::Array{T}, i::Int) where {T}$/;"	f
_uv_hook_close	base/asyncevent.jl	/^function _uv_hook_close(t::Union{Timer, AsyncCondition})$/;"	f
_uv_hook_close	base/process.jl	/^function _uv_hook_close(proc::Process)$/;"	f
_uv_hook_close	base/stream.jl	/^function _uv_hook_close(uv::Union{LibuvStream, LibuvServer})$/;"	f
_uv_hook_close	stdlib/FileWatching/src/FileWatching.jl	/^function _uv_hook_close(uv::FileMonitor)$/;"	f
_uv_hook_close	stdlib/FileWatching/src/FileWatching.jl	/^function _uv_hook_close(uv::FolderMonitor)$/;"	f
_uv_hook_close	stdlib/FileWatching/src/FileWatching.jl	/^function _uv_hook_close(uv::PollingFileWatcher)$/;"	f
_uv_hook_close	stdlib/FileWatching/src/FileWatching.jl	/^function _uv_hook_close(uv::_FDWatcher)$/;"	f
_uv_hook_close	stdlib/Sockets/src/Sockets.jl	/^function _uv_hook_close(sock::UDPSocket)$/;"	f
_va_typename	base/essentials.jl	/^const _va_typename = Vararg.body.body.name$/;"	v
_var	stdlib/Statistics/src/Statistics.jl	/^_var(A::AbstractArray, corrected::Bool, mean, ::Colon) =$/;"	f
_var	stdlib/Statistics/src/Statistics.jl	/^_var(A::AbstractArray, corrected::Bool, mean, dims) =$/;"	f
_var	stdlib/Statistics/src/Statistics.jl	/^function _var(iterable, corrected::Bool, mean)$/;"	f
_varbinding	test/clangsa/MissingRoots.c	/^typedef struct _varbinding {$/;"	s	file:
_varidx	src/builtins.c	/^typedef struct _varidx {$/;"	s	file:
_varm	stdlib/Statistics/src/Statistics.jl	/^_varm(A::AbstractArray{T}, m, corrected::Bool, region) where {T} =$/;"	f
_varm	stdlib/Statistics/src/Statistics.jl	/^function _varm(A::AbstractArray{T}, m, corrected::Bool, ::Colon) where T$/;"	f
_vectorpinv	stdlib/LinearAlgebra/src/generic.jl	/^function _vectorpinv(dualfn::Tf, v::AbstractVector{Tv}, tol) where {Tv,Tf}$/;"	f
_vendor	stdlib/LinearAlgebra/src/blas.jl	/^const _vendor = determine_vendor()$/;"	v
_views	base/views.jl	/^_views(x) = x$/;"	f
_views	base/views.jl	/^function _views(ex::Expr)$/;"	f
_vmean	stdlib/Statistics/src/Statistics.jl	/^_vmean(x::AbstractMatrix, vardim::Int) = mean(x, dims=vardim)$/;"	f
_vmean	stdlib/Statistics/src/Statistics.jl	/^_vmean(x::AbstractVector, vardim::Int) = mean(x)$/;"	f
_wait	base/task.jl	/^function _wait(t::Task)$/;"	f
_win_tempname	base/file.jl	/^function _win_tempname(temppath::AbstractString, uunique::UInt32)$/;"	f
_write_capture	base/regex.jl	/^function _write_capture(io, re::RegexAndMatchData, group)$/;"	f
_write_grow	src/support/ios.c	/^static size_t _write_grow(ios_t *s, const char *data, size_t n)$/;"	f	typeref:typename:size_t	file:
_write_update_pos	src/support/ios.c	/^static void _write_update_pos(ios_t *s)$/;"	f	typeref:typename:void	file:
_z_z_z_	test/specificity.jl	/^_z_z_z_(::Int, ::Int, ::Vector) = 2$/;"	f
_z_z_z_	test/specificity.jl	/^_z_z_z_(::Int, c...) = 3$/;"	f
_z_z_z_	test/specificity.jl	/^_z_z_z_(x, y) = 1$/;"	f
_zeros	stdlib/LinearAlgebra/src/qr.jl	/^_zeros(::Type{T}, B::AbstractMatrix, n::Integer) where {T} = zeros(T, max(size(B, 1), n), size(B/;"	f
_zeros	stdlib/LinearAlgebra/src/qr.jl	/^_zeros(::Type{T}, b::AbstractVector, n::Integer) where {T} = zeros(T, max(length(b), n))$/;"	f
_zeros_eltypes	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _zeros_eltypes(A) = (zero(eltype(A)),)$/;"	f
_zeros_eltypes	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline _zeros_eltypes(A, Bs...) = (zero(eltype(A)), _zeros_eltypes(Bs...)...)$/;"	f
_zip_any_isdone	base/iterators.jl	/^@inline _zip_any_isdone(::Tuple{}, ::Tuple{}) = false$/;"	f
_zip_any_isdone	base/iterators.jl	/^@inline function _zip_any_isdone(is, ss)$/;"	f
_zip_eltype	base/iterators.jl	/^_zip_eltype(::Type{Is}) where {Is<:Tuple} =$/;"	f
_zip_eltype	base/iterators.jl	/^_zip_eltype(::Type{Tuple{}}) = Tuple{}$/;"	f
_zip_isdone	base/iterators.jl	/^_zip_isdone(::Tuple{}, ::Tuple{}) = (false, ())$/;"	f
_zip_isdone	base/iterators.jl	/^function _zip_isdone(is, ss)$/;"	f
_zip_iterate_all	base/iterators.jl	/^@propagate_inbounds function _zip_iterate_all(is, ss)$/;"	f
_zip_iterate_interleave	base/iterators.jl	/^_zip_iterate_interleave(::Tuple{}, ::Tuple{}, ::Tuple{}) = ((), ())$/;"	f
_zip_iterate_interleave	base/iterators.jl	/^function _zip_iterate_interleave(xs1, xs2, ds)$/;"	f
_zip_iterate_interleave	base/iterators.jl	/^function _zip_iterate_interleave(xs1, xs2, ds::Tuple{Bool,Vararg{Any}})$/;"	f
_zip_iterate_some	base/iterators.jl	/^@propagate_inbounds _zip_iterate_some(is, ss, ds::Tuple{Any,Vararg{Any}}, f) =$/;"	f
_zip_iterate_some	base/iterators.jl	/^@propagate_inbounds function _zip_iterate_some(is, ss, ds::Tuple{T,Vararg{Any}}, f::T) where T$/;"	f
_zip_iterate_some	base/iterators.jl	/^_zip_iterate_some(::Tuple{}, ::Tuple{}, ::Tuple{}, ::Any) = ()$/;"	f
_zip_iterator_eltype	base/iterators.jl	/^_zip_iterator_eltype(::Type{Is}) where {Is<:Tuple} =$/;"	f
_zip_iterator_eltype	base/iterators.jl	/^_zip_iterator_eltype(::Type{Tuple{}}) = HasEltype()$/;"	f
_zip_iterator_size	base/iterators.jl	/^_zip_iterator_size(::Type{Is}) where {Is<:Tuple} =$/;"	f
_zip_iterator_size	base/iterators.jl	/^_zip_iterator_size(::Type{Tuple{I}}) where {I} = IteratorSize(I)$/;"	f
_zip_iterator_size	base/iterators.jl	/^_zip_iterator_size(::Type{Tuple{}}) = IsInfinite()$/;"	f
_zip_min_length	base/iterators.jl	/^_zip_min_length(is::Tuple{}) = nothing$/;"	f
_zip_min_length	base/iterators.jl	/^function _zip_min_length(is)$/;"	f
`	base/docs/basedocs.jl	/^`=` is the assignment operator.$/;"	v
`	stdlib/LinearAlgebra/src/schur.jl	/^`(A, B) = F.Q*(F.S, F.T)*F.Z'` still holds and the generalized eigenvalues of `A`$/;"	f
`!	base/operators.jl	/^`!=(x,y) = !(x==y)` instead.$/;"	v
`!=	base/operators.jl	/^`!=(x,y) = !(x==y)` instead.$/;"	f
`$` and `\\` characters	doc/src/manual/documentation.md	/^### `$` and `\\` characters$/;"	S
`--depwarn	stdlib/Test/src/logging.jl	/^`--depwarn=error`, check that an ErrorException is thrown.$/;"	v
`...` combines many arguments into one argument in function definitions	doc/src/manual/faq.md	/^### `...` combines many arguments into one argument in function definitions$/;"	S
`...` splits one argument into many different arguments in function calls	doc/src/manual/faq.md	/^### `...` splits one argument into many different arguments in function calls$/;"	S
`==	base/abstractdict.jl	/^`===` as equality with keys of type `K` and values of type `V`.$/;"	v
`A	stdlib/LinearAlgebra/src/schur.jl	/^`A = F.vectors * F.Schur * F.vectors'`. The eigenvalues of `A` can be obtained with `F.values`.$/;"	v
`B	stdlib/LinearAlgebra/src/schur.jl	/^`B=F.left*F.T*F.right'`. The generalized eigenvalues of `A` and `B` can be obtained$/;"	v
`B	stdlib/LinearAlgebra/src/svd.jl	/^`B = F.V*F.D2*F.R0*F.Q'`. This is the return type of [`svd(_, _)`](@ref), the$/;"	v
`Base._start`	doc/src/devdocs/init.md	/^## `Base._start`$/;"	s
`Base.dataids	base/abstractarray.jl	/^`Base.dataids(C::CustomArray) = dataids(C.parent)`.$/;"	f
`Base.eval`	doc/src/devdocs/init.md	/^## `Base.eval`$/;"	s
`CC	stdlib/LinearAlgebra/src/cholesky.jl	/^`CC = cholesky(C.U'C.U + v*v')` but the computation of `CC` only uses `O(n^2)`$/;"	v
`CC	stdlib/LinearAlgebra/src/cholesky.jl	/^`CC = cholesky(C.U'C.U - v*v')` but the computation of `CC` only uses `O(n^2)`$/;"	v
`ENABLE_JITPROFILING`	doc/src/manual/environment-variables.md	/^### `ENABLE_JITPROFILING`$/;"	S
`Expr` types	doc/src/devdocs/ast.md	/^### `Expr` types$/;"	S
`F	stdlib/SuiteSparse/src/cholmod.jl	/^`F = cholesky(A)` is most frequently used to solve systems of equations with `F\\\\b`,$/;"	v
`JL_ALWAYS_LEAFTYPE`	doc/src/devdocs/gc-sa.md	/^### `JL_ALWAYS_LEAFTYPE`$/;"	S
`JL_GC_DISABLED`	doc/src/devdocs/gc-sa.md	/^### `JL_GC_DISABLED`$/;"	S
`JL_GC_PROMISE_ROOTED`	doc/src/devdocs/gc-sa.md	/^### `JL_GC_PROMISE_ROOTED`$/;"	S
`JL_GLOBALLY_ROOTED`	doc/src/devdocs/gc-sa.md	/^### `JL_GLOBALLY_ROOTED`$/;"	S
`JL_MAYBE_UNROOTED`/`JL_ROOTS_TEMPORARILY`	doc/src/devdocs/gc-sa.md	/^### `JL_MAYBE_UNROOTED`\/`JL_ROOTS_TEMPORARILY`$/;"	S
`JL_NOTSAFEPOINT`	doc/src/devdocs/gc-sa.md	/^### `JL_NOTSAFEPOINT`$/;"	S
`JL_PROPAGATES_ROOT`	doc/src/devdocs/gc-sa.md	/^### `JL_PROPAGATES_ROOT`$/;"	S
`JL_REQUIRE_ROOTED_SLOT`	doc/src/devdocs/gc-sa.md	/^### `JL_REQUIRE_ROOTED_SLOT`$/;"	S
`JL_ROOTING_ARGUMENT`/`JL_ROOTED_ARGUMENT`	doc/src/devdocs/gc-sa.md	/^### `JL_ROOTING_ARGUMENT`\/`JL_ROOTED_ARGUMENT`$/;"	S
`JULIA_ANSWER_COLOR`	doc/src/manual/environment-variables.md	/^### `JULIA_ANSWER_COLOR`$/;"	S
`JULIA_BINDIR`	doc/src/manual/environment-variables.md	/^### `JULIA_BINDIR`$/;"	S
`JULIA_CPU_THREADS`	doc/src/manual/environment-variables.md	/^### `JULIA_CPU_THREADS`$/;"	S
`JULIA_DEPOT_PATH`	doc/src/manual/environment-variables.md	/^### `JULIA_DEPOT_PATH`$/;"	S
`JULIA_EDITOR`	doc/src/manual/environment-variables.md	/^### `JULIA_EDITOR`$/;"	S
`JULIA_ERROR_COLOR`	doc/src/manual/environment-variables.md	/^### `JULIA_ERROR_COLOR`$/;"	S
`JULIA_EXCLUSIVE`	doc/src/manual/environment-variables.md	/^### `JULIA_EXCLUSIVE`$/;"	S
`JULIA_GC_ALLOC_POOL`, `JULIA_GC_ALLOC_OTHER`, `JULIA_GC_ALLOC_PRINT`	doc/src/manual/environment-variables.md	/^### `JULIA_GC_ALLOC_POOL`, `JULIA_GC_ALLOC_OTHER`, `JULIA_GC_ALLOC_PRINT`$/;"	S
`JULIA_GC_NO_GENERATIONAL`	doc/src/manual/environment-variables.md	/^### `JULIA_GC_NO_GENERATIONAL`$/;"	S
`JULIA_GC_WAIT_FOR_DEBUGGER`	doc/src/manual/environment-variables.md	/^### `JULIA_GC_WAIT_FOR_DEBUGGER`$/;"	S
`JULIA_HISTORY`	doc/src/manual/environment-variables.md	/^### `JULIA_HISTORY`$/;"	S
`JULIA_INFO_COLOR`	doc/src/manual/environment-variables.md	/^### `JULIA_INFO_COLOR`$/;"	S
`JULIA_INPUT_COLOR`	doc/src/manual/environment-variables.md	/^### `JULIA_INPUT_COLOR`$/;"	S
`JULIA_LLVM_ARGS`	doc/src/manual/environment-variables.md	/^### `JULIA_LLVM_ARGS`$/;"	S
`JULIA_LOAD_PATH`	doc/src/manual/environment-variables.md	/^### `JULIA_LOAD_PATH`$/;"	S
`JULIA_NUM_THREADS`	doc/src/manual/environment-variables.md	/^### `JULIA_NUM_THREADS`$/;"	S
`JULIA_PKGRESOLVE_ACCURACY`	doc/src/manual/environment-variables.md	/^### `JULIA_PKGRESOLVE_ACCURACY`$/;"	S
`JULIA_PROJECT`	doc/src/manual/environment-variables.md	/^### `JULIA_PROJECT`$/;"	S
`JULIA_SHELL`	doc/src/manual/environment-variables.md	/^### `JULIA_SHELL`$/;"	S
`JULIA_STACKFRAME_FUNCTION_COLOR`	doc/src/manual/environment-variables.md	/^### `JULIA_STACKFRAME_FUNCTION_COLOR`$/;"	S
`JULIA_STACKFRAME_LINEINFO_COLOR`	doc/src/manual/environment-variables.md	/^### `JULIA_STACKFRAME_LINEINFO_COLOR`$/;"	S
`JULIA_THREAD_SLEEP_THRESHOLD`	doc/src/manual/environment-variables.md	/^### `JULIA_THREAD_SLEEP_THRESHOLD`$/;"	S
`JULIA_WARN_COLOR`	doc/src/manual/environment-variables.md	/^### `JULIA_WARN_COLOR`$/;"	S
`JULIA_WORKER_TIMEOUT`	doc/src/manual/environment-variables.md	/^### `JULIA_WORKER_TIMEOUT`$/;"	S
`N	stdlib/LinearAlgebra/src/generic.jl	/^`N = M \\\\ I`.$/;"	v
``Ax	stdlib/SuiteSparse/src/spqr.jl	/^``Ax=b`` when `F` is the sparse QR factorization of ``A``. A basic solution is returned$/;"	v
``X^2	stdlib/LinearAlgebra/src/dense.jl	/^``X^2 = A``. Otherwise, a nonprincipal square root is returned.$/;"	v
``\\LaTeX``	stdlib/Markdown/docs/src/index.md	/^### ``\\LaTeX``$/;"	S
``ux+vy	base/intfuncs.jl	/^``ux+vy = d = gcd(x,y)``. ``gcdx(x,y)`` returns ``(d,u,v)``.$/;"	v
``x	base/special/trig.jl	/^``x = 0``. This is the derivative of `sinc(x)`.$/;"	v
`balanc	stdlib/LinearAlgebra/src/lapack.jl	/^`balanc = S`, `A` is scaled but not permuted. If `balanc = B`, `A` is$/;"	v
`cached	stdlib/LibGit2/src/LibGit2.jl	/^`cached=false`) or the index (if `cached=true`).$/;"	v
`ccall` / `@cfunction` argument translation guide	doc/src/manual/calling-c-and-fortran-code.md	/^### `ccall` \/ `@cfunction` argument translation guide$/;"	S
`ccall` / `@cfunction` return type translation guide	doc/src/manual/calling-c-and-fortran-code.md	/^### `ccall` \/ `@cfunction` return type translation guide$/;"	S
`eltype	base/array.jl	/^`eltype(x) = eltype(typeof(x))` is provided for convenience so that instances can be passed$/;"	f
`finally` Clauses	doc/src/manual/control-flow.md	/^### `finally` Clauses$/;"	S
`force	base/file.jl	/^`force=true` will first remove an existing `dst`.$/;"	v
`howmny	stdlib/LinearAlgebra/src/lapack.jl	/^`howmny = A`, all eigenvectors are found. If `howmny = B`, all$/;"	v
`howmny	stdlib/LinearAlgebra/src/lapack.jl	/^`howmny = S`, only the eigenvectors corresponding to the values in$/;"	v
`i	base/iterators.jl	/^`i => x`, where `i` is the index for the element and `x = A[i]`.$/;"	v
`ilo	stdlib/LinearAlgebra/src/lapack.jl	/^`ilo = 1` and `ihi = size(A,2)`. `tau` contains the elementary reflectors of$/;"	v
`jl_atexit_hook()`	doc/src/devdocs/init.md	/^## `jl_atexit_hook()`$/;"	s
`job	stdlib/LinearAlgebra/src/lapack.jl	/^`job = V`, only the condition number for the invariant subspace is found.$/;"	v
`jobv	stdlib/LinearAlgebra/src/lapack.jl	/^`jobv = V` the orthogonal\/unitary matrix `V` is computed. If `jobq = Q`,$/;"	v
`jobvt	stdlib/LinearAlgebra/src/lapack.jl	/^`jobvt = N` no rows of `V'` are computed. If `jobu = O`, `A` is overwritten with$/;"	v
`julia_init()`	doc/src/devdocs/init.md	/^## `julia_init()`$/;"	s
`julia_save()`	doc/src/devdocs/init.md	/^## `julia_save()`$/;"	s
`key	base/dict.jl	/^`key => default`, and return `default`.$/;"	v
`key	base/dict.jl	/^`key => f()`, and return `f()`.$/;"	v
`main()`	doc/src/devdocs/init.md	/^## `main()`$/;"	s
`norm	stdlib/LinearAlgebra/src/lapack.jl	/^`norm = O` or `1`, the condition number is found in the one norm.$/;"	v
`op`.	base/reduce.jl	/^function `op`. If provided, `init` must be a neutral element for `op` that will be returned$/;"	f
`p	stdlib/LinearAlgebra/src/generic.jl	/^`p=2` is currently not implemented.) Use [`norm`](@ref) to compute the Frobenius$/;"	v
`range	stdlib/LinearAlgebra/src/lapack.jl	/^`range = A`, all the eigenvalues are found. If `range = V`, the$/;"	v
`rev	base/sort.jl	/^`rev=true` reverses whatever ordering specified via the `by` and `lt` keywords.$/;"	v
`rtol	stdlib/LinearAlgebra/src/dense.jl	/^`rtol = sqrt(eps(real(float(one(eltype(M))))))` is recommended.$/;"	v
`sortby	stdlib/LinearAlgebra/src/eigen.jl	/^`sortby=nothing` to leave the eigenvalues in an arbitrary order.   Some special matrix types$/;"	v
`true_main()`	doc/src/devdocs/init.md	/^## `true_main()`$/;"	s
`uplo	stdlib/LinearAlgebra/src/lapack.jl	/^`uplo = L`) triangular matrix `A`. If `diag = N`, `A` has non-unit$/;"	v
`uplo	stdlib/LinearAlgebra/src/lapack.jl	/^`uplo = U`, the upper half of `A` is stored. If `uplo = L`, the lower$/;"	v
`x	base/expr.jl	/^`x = gensym("x"); y = gensym("y")`.$/;"	v
`yes=	base/rounding.jl	/^`yes==true` but the hardware does not support zeroing of subnormal numbers.$/;"	v
a	src/ccalltest.c	/^    char a;$/;"	m	struct:__anon84ad8c4c1108	typeref:typename:char	file:
a	src/ccalltest.c	/^    double a,b,c;$/;"	m	struct:__anon84ad8c4c1708	typeref:typename:double	file:
a	src/ccalltest.c	/^    float a;$/;"	m	struct:__anon84ad8c4c2708	typeref:typename:float	file:
a	src/ccalltest.c	/^    int *a;$/;"	m	struct:__anon84ad8c4c2608	typeref:typename:int *	file:
a	src/ccalltest.c	/^    int32_t a;$/;"	m	struct:__anon84ad8c4c0c08	typeref:typename:int32_t	file:
a	src/ccalltest.c	/^    int8_t a;$/;"	m	struct:__anon84ad8c4c1808	typeref:typename:int8_t	file:
a	src/ccalltest.c	/^    int8_t a;$/;"	m	struct:__anon84ad8c4c1908	typeref:typename:int8_t	file:
a	src/flisp/cvalues.c	/^struct prim_int16{ char a; int16_t i; };$/;"	m	struct:prim_int16	typeref:typename:char	file:
a	src/flisp/cvalues.c	/^struct prim_int32{ char a; int32_t i; };$/;"	m	struct:prim_int32	typeref:typename:char	file:
a	src/flisp/cvalues.c	/^struct prim_int64{ char a; int64_t i; };$/;"	m	struct:prim_int64	typeref:typename:char	file:
a	src/flisp/cvalues.c	/^struct prim_ptr{ char a;  void   *i; };$/;"	m	struct:prim_ptr	typeref:typename:char	file:
a	src/gc.h	/^    jl_array_t *a;$/;"	m	struct:_mallocarray_t	typeref:typename:jl_array_t *
a	src/julia.h	/^    jl_value_t *a;$/;"	m	struct:__anon055fe4270b08	typeref:typename:JL_DATA_TYPE jl_value_t *
a	src/support/_setjmp.win32.S	/^a:  ret    \/\/ jmp ecx$/;"	l
a	src/support/_setjmp.win64.S	/^a:  mov    QWORD PTR [rsp],r8$/;"	l
a	stdlib/Dates/test/ranges.jl	/^a = Dates.Date(2013, 1, 1)$/;"	v
a	stdlib/Dates/test/ranges.jl	/^a = Dates.DateTime(2013, 1, 1)$/;"	v
a	stdlib/Dates/test/ranges.jl	/^a = Dates.Time(23, 1, 1)$/;"	v
a	stdlib/Dates/test/types.jl	/^a = Dates.DateTime(2000)$/;"	v
a	stdlib/Distributed/test/distributed_exec.jl	/^a = fill(1, 10^6)$/;"	v
a	stdlib/SharedArrays/test/runtests.jl	/^a = convert(Array, d)$/;"	v
a	stdlib/SharedArrays/test/runtests.jl	/^a = d[1,1,1:3:end]$/;"	v
a	stdlib/SharedArrays/test/runtests.jl	/^a = d[1:5]$/;"	v
a	stdlib/SharedArrays/test/runtests.jl	/^a = rand(Float64, dims)$/;"	v
a	test/asyncmap.jl	/^a=rand(2,2)$/;"	v
a	test/bigint.jl	/^a = parse(BigInt,"123456789012345678901234567890")$/;"	v
a	test/ccall.jl	/^    a(z) = x$/;"	f
a	test/core.jl	/^a = UInt8[]$/;"	v
a	test/logging.jl	/^    function a()$/;"	f
a	test/offsetarray.jl	/^a = OffsetArray([1, -2, 1], (-2,))$/;"	v
a	test/offsetarray.jl	/^a = OffsetArray(a0, (-1,2,3,4,5))$/;"	v
a	test/offsetarray.jl	/^a = OffsetArray{Int}(undef, (-3:-1,))$/;"	v
a	test/offsetarray.jl	/^a = [1]$/;"	v
a	test/read.jl	/^a = UInt8[0,0,0,0]$/;"	v
a	test/read.jl	/^a = UInt8[0,0,0]$/;"	v
a	test/reduce.jl	/^a = randn(32) # need >16 elements to trigger BLAS code path$/;"	v
a	test/reduce.jl	/^a = sum(sin, z)$/;"	v
a	test/some.jl	/^a = [missing, nothing, Some(nothing), Some(missing)]$/;"	v
a	test/syntax.jl	/^const a = A()$/;"	v
a	test/triplequote.jl	/^a = [3,1,2]$/;"	v
a/CMakeLists.txt	deps/patches/llvm-D44892-Perf-integration.patch	/^--- a\/CMakeLists.txt$/;"	m
a/SuiteSparse_config/SuiteSparse_config.mk	deps/patches/SuiteSparse-shlib.patch	/^--- a\/SuiteSparse_config\/SuiteSparse_config.mk	2018-12-22 22:15:58.000000000 -0500$/;"	m
a/cmake/config-ix.cmake	deps/patches/llvm-D57118-powerpc.patch	/^--- a\/cmake\/config-ix.cmake$/;"	m
a/cmake/modules/HandleLLVMOptions.cmake	deps/patches/llvm-6.0-DISABLE_ABI_CHECKS.patch	/^--- a\/cmake\/modules\/HandleLLVMOptions.cmake$/;"	m
a/cmake/modules/TableGen.cmake	deps/patches/llvm-6.0-D64032-cmake-cross.patch	/^--- a\/cmake\/modules\/TableGen.cmake$/;"	m
a/cmake/modules/TableGen.cmake	deps/patches/llvm-6.0-D64225-cmake-cross2.patch	/^--- a\/cmake\/modules\/TableGen.cmake$/;"	m
a/errno.c	deps/patches/gmp-exception.patch	/^--- a\/errno.c	Sun Jan 24 22:06:51 2016 +0100$/;"	m
a/gmp-h.in	deps/patches/gmp_alloc_overflow_func.patch	/^--- a\/gmp-h.in$/;"	m
a/gmp-impl.h	deps/patches/gmp_alloc_overflow_func.patch	/^--- a\/gmp-impl.h$/;"	m
a/include/llvm/Analysis/ScalarEvolution.h	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^--- a\/include\/llvm\/Analysis\/ScalarEvolution.h$/;"	m
a/include/llvm/Analysis/ScalarEvolution.h	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^--- a\/include\/llvm\/Analysis\/ScalarEvolution.h$/;"	m
a/include/llvm/Analysis/ScalarEvolution.h	deps/patches/llvm-D50167-scev-umin.patch	/^--- a\/include\/llvm\/Analysis\/ScalarEvolution.h$/;"	m
a/include/llvm/Analysis/ScalarEvolutionExpander.h	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^--- a\/include\/llvm\/Analysis\/ScalarEvolutionExpander.h$/;"	m
a/include/llvm/Analysis/ScalarEvolutionExpander.h	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^--- a\/include\/llvm\/Analysis\/ScalarEvolutionExpander.h$/;"	m
a/include/llvm/Analysis/ScalarEvolutionExpander.h	deps/patches/llvm-D50167-scev-umin.patch	/^--- a\/include\/llvm\/Analysis\/ScalarEvolutionExpander.h$/;"	m
a/include/llvm/Analysis/ScalarEvolutionExpressions.h	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^--- a\/include\/llvm\/Analysis\/ScalarEvolutionExpressions.h$/;"	m
a/include/llvm/Analysis/ScalarEvolutionExpressions.h	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^--- a\/include\/llvm\/Analysis\/ScalarEvolutionExpressions.h$/;"	m
a/include/llvm/Analysis/ScalarEvolutionExpressions.h	deps/patches/llvm-D50167-scev-umin.patch	/^--- a\/include\/llvm\/Analysis\/ScalarEvolutionExpressions.h$/;"	m
a/include/llvm/CodeGen/SelectionDAGISel.h	deps/patches/llvm-rL327898.patch	/^--- a\/include\/llvm\/CodeGen\/SelectionDAGISel.h$/;"	m
a/include/llvm/CodeGen/SelectionDAGNodes.h	deps/patches/llvm-rL327898.patch	/^--- a\/include\/llvm\/CodeGen\/SelectionDAGNodes.h$/;"	m
a/include/llvm/Config/abi-breaking.h.cmake	deps/patches/llvm-6.0-DISABLE_ABI_CHECKS.patch	/^--- a\/include\/llvm\/Config\/abi-breaking.h.cmake$/;"	m
a/include/llvm/Config/config.h.cmake	deps/patches/llvm-D44892-Perf-integration.patch	/^--- a\/include\/llvm\/Config\/config.h.cmake$/;"	m
a/include/llvm/Config/llvm-config.h.cmake	deps/patches/llvm-D44892-Perf-integration.patch	/^--- a\/include\/llvm\/Config\/llvm-config.h.cmake$/;"	m
a/include/llvm/ExecutionEngine/JITEventListener.h	deps/patches/llvm-D44892-Perf-integration.patch	/^--- a\/include\/llvm\/ExecutionEngine\/JITEventListener.h$/;"	m
a/include/tdep-arm/libunwind_i.h	deps/patches/libunwind-prefer-extbl.patch	/^--- a\/include\/tdep-arm\/libunwind_i.h$/;"	m
a/kernel/x86_64/KERNEL.SKYLAKEX	deps/patches/openblas-skylakexdgemm.patch	/^--- a\/kernel\/x86_64\/KERNEL.SKYLAKEX$/;"	m
a/lib/Analysis/IVDescriptors.cpp	deps/patches/llvm8-D34078-vectorize-fdiv.patch	/^--- a\/lib\/Analysis\/IVDescriptors.cpp$/;"	m
a/lib/Analysis/LoopInfo.cpp	deps/patches/llvm-D46460.patch	/^--- a\/lib\/Analysis\/LoopInfo.cpp$/;"	m
a/lib/Analysis/ScalarEvolution.cpp	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^--- a\/lib\/Analysis\/ScalarEvolution.cpp$/;"	m
a/lib/Analysis/ScalarEvolution.cpp	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^--- a\/lib\/Analysis\/ScalarEvolution.cpp$/;"	m
a/lib/Analysis/ScalarEvolution.cpp	deps/patches/llvm-D50167-scev-umin.patch	/^--- a\/lib\/Analysis\/ScalarEvolution.cpp$/;"	m
a/lib/Analysis/ScalarEvolutionExpander.cpp	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^--- a\/lib\/Analysis\/ScalarEvolutionExpander.cpp$/;"	m
a/lib/Analysis/ScalarEvolutionExpander.cpp	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^--- a\/lib\/Analysis\/ScalarEvolutionExpander.cpp$/;"	m
a/lib/Analysis/ScalarEvolutionExpander.cpp	deps/patches/llvm-D49832-SCEVPred.patch	/^--- a\/lib\/Analysis\/ScalarEvolutionExpander.cpp$/;"	m
a/lib/Analysis/ScalarEvolutionExpander.cpp	deps/patches/llvm-D50167-scev-umin.patch	/^--- a\/lib\/Analysis\/ScalarEvolutionExpander.cpp$/;"	m
a/lib/CodeGen/IfConversion.cpp	deps/patches/llvm-6.0.0-ifconv-D45819.patch	/^--- a\/lib\/CodeGen\/IfConversion.cpp$/;"	m
a/lib/CodeGen/MachineBlockPlacement.cpp	deps/patches/llvm-D45008.patch	/^--- a\/lib\/CodeGen\/MachineBlockPlacement.cpp$/;"	m
a/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp	deps/patches/llvm-rL327898.patch	/^--- a\/lib\/CodeGen\/SelectionDAG\/SelectionDAGISel.cpp$/;"	m
a/lib/ExecutionEngine/CMakeLists.txt	deps/patches/llvm-D44892-Perf-integration.patch	/^--- a\/lib\/ExecutionEngine\/CMakeLists.txt$/;"	m
a/lib/ExecutionEngine/LLVMBuild.txt	deps/patches/llvm-D44892-Perf-integration.patch	/^--- a\/lib\/ExecutionEngine\/LLVMBuild.txt$/;"	m
a/lib/ExecutionEngine/OProfileJIT/LLVMBuild.txt	deps/patches/llvm-OProfile-line-num.patch	/^--- a\/lib\/ExecutionEngine\/OProfileJIT\/LLVMBuild.txt$/;"	m
a/lib/ExecutionEngine/OProfileJIT/OProfileJITEventListener.cpp	deps/patches/llvm-OProfile-line-num.patch	/^--- a\/lib\/ExecutionEngine\/OProfileJIT\/OProfileJITEventListener.cpp$/;"	m
a/lib/ExecutionEngine/Orc/LLVMBuild.txt	deps/patches/llvm-D44892-Perf-integration.patch	/^--- a\/lib\/ExecutionEngine\/Orc\/LLVMBuild.txt$/;"	m
a/lib/MC/MCObjectFileInfo.cpp	deps/patches/llvm-D27629-AArch64-large_model_4.0.patch	/^--- a\/lib\/MC\/MCObjectFileInfo.cpp$/;"	m
a/lib/MC/MCObjectFileInfo.cpp	deps/patches/llvm-D27629-AArch64-large_model_6.0.1.patch	/^--- a\/lib\/MC\/MCObjectFileInfo.cpp$/;"	m
a/lib/Support/Unix/Path.inc	deps/patches/llvm-6.0-D63688-wasm-isLocal.patch	/^--- a\/lib\/Support\/Unix\/Path.inc$/;"	m
a/lib/Target/AMDGPU/AMDGPUISelDAGToDAG.cpp	deps/patches/llvm-rL327898.patch	/^--- a\/lib\/Target\/AMDGPU\/AMDGPUISelDAGToDAG.cpp$/;"	m
a/lib/Target/ARM/ARMISelDAGToDAG.cpp	deps/patches/llvm-rL327898.patch	/^--- a\/lib\/Target\/ARM\/ARMISelDAGToDAG.cpp$/;"	m
a/lib/Target/Hexagon/HexagonISelDAGToDAG.cpp	deps/patches/llvm-rL327898.patch	/^--- a\/lib\/Target\/Hexagon\/HexagonISelDAGToDAG.cpp$/;"	m
a/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp	deps/patches/llvm-rL327898.patch	/^--- a\/lib\/Target\/Hexagon\/HexagonISelDAGToDAGHVX.cpp$/;"	m
a/lib/Target/NVPTX/NVPTXISelLowering.cpp	deps/patches/llvm-6.0-NVPTX-addrspaces.patch	/^--- a\/lib\/Target\/NVPTX\/NVPTXISelLowering.cpp$/;"	m
a/lib/Target/NVPTX/NVPTXISelLowering.h	deps/patches/llvm-6.0-NVPTX-addrspaces.patch	/^--- a\/lib\/Target\/NVPTX\/NVPTXISelLowering.h$/;"	m
a/lib/Target/NVPTX/NVPTXTargetMachine.cpp	deps/patches/llvm-D45070.patch	/^--- a\/lib\/Target\/NVPTX\/NVPTXTargetMachine.cpp$/;"	m
a/lib/Target/PowerPC/PPCISelLowering.h	deps/patches/llvm-PPC-addrspaces.patch	/^--- a\/lib\/Target\/PowerPC\/PPCISelLowering.h$/;"	m
a/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp	deps/patches/llvm-rL327898.patch	/^--- a\/lib\/Target\/SystemZ\/SystemZISelDAGToDAG.cpp$/;"	m
a/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp	deps/patches/llvm6-WASM-addrspaces.patch	/^--- a\/lib\/Target\/WebAssembly\/WebAssemblyISelLowering.cpp$/;"	m
a/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp	deps/patches/llvm7-WASM-addrspaces.patch	/^--- a\/lib\/Target\/WebAssembly\/WebAssemblyISelLowering.cpp$/;"	m
a/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp	deps/patches/llvm8-WASM-addrspaces.patch	/^--- a\/lib\/Target\/WebAssembly\/WebAssemblyISelLowering.cpp$/;"	m
a/lib/Target/WebAssembly/WebAssemblyISelLowering.h	deps/patches/llvm6-WASM-addrspaces.patch	/^--- a\/lib\/Target\/WebAssembly\/WebAssemblyISelLowering.h$/;"	m
a/lib/Target/WebAssembly/WebAssemblyISelLowering.h	deps/patches/llvm7-WASM-addrspaces.patch	/^--- a\/lib\/Target\/WebAssembly\/WebAssemblyISelLowering.h$/;"	m
a/lib/Target/WebAssembly/WebAssemblyISelLowering.h	deps/patches/llvm8-WASM-addrspaces.patch	/^--- a\/lib\/Target\/WebAssembly\/WebAssemblyISelLowering.h$/;"	m
a/lib/Target/X86/X86CallingConv.td	deps/patches/llvm-D51842-win64-byval-cc.patch	/^--- a\/lib\/Target\/X86\/X86CallingConv.td$/;"	m
a/lib/Target/X86/X86CallingConv.td	deps/patches/llvm7-D51842-win64-byval-cc.patch	/^--- a\/lib\/Target\/X86\/X86CallingConv.td$/;"	m
a/lib/Target/X86/X86DomainReassignment.cpp	deps/patches/llvm-rL332680.patch	/^--- a\/lib\/Target\/X86\/X86DomainReassignment.cpp$/;"	m
a/lib/Target/X86/X86DomainReassignment.cpp	deps/patches/llvm-rL332682.patch	/^--- a\/lib\/Target\/X86\/X86DomainReassignment.cpp$/;"	m
a/lib/Target/X86/X86FastISel.cpp	deps/patches/llvm-6.0-r327540.patch	/^--- a\/lib\/Target\/X86\/X86FastISel.cpp$/;"	m
a/lib/Target/X86/X86ISelDAGToDAG.cpp	deps/patches/llvm-rL327898.patch	/^--- a\/lib\/Target\/X86\/X86ISelDAGToDAG.cpp$/;"	m
a/lib/Target/X86/X86ISelLowering.cpp	deps/patches/llvm-6.0.0_D27296-libssp.patch	/^--- a\/lib\/Target\/X86\/X86ISelLowering.cpp$/;"	m
a/lib/Target/X86/X86ISelLowering.cpp	deps/patches/llvm-D51842-win64-byval-cc.patch	/^--- a\/lib\/Target\/X86\/X86ISelLowering.cpp$/;"	m
a/lib/Target/X86/X86ISelLowering.cpp	deps/patches/llvm-r355582-avxminmax.patch	/^--- a\/lib\/Target\/X86\/X86ISelLowering.cpp$/;"	m
a/lib/Target/X86/X86ISelLowering.cpp	deps/patches/llvm-rL327898.patch	/^--- a\/lib\/Target\/X86\/X86ISelLowering.cpp$/;"	m
a/lib/Target/X86/X86ISelLowering.cpp	deps/patches/llvm7-D51842-win64-byval-cc.patch	/^--- a\/lib\/Target\/X86\/X86ISelLowering.cpp$/;"	m
a/lib/Target/X86/X86InstrArithmetic.td	deps/patches/llvm-rL327898.patch	/^--- a\/lib\/Target\/X86\/X86InstrArithmetic.td$/;"	m
a/lib/Target/X86/X86InstrInfo.cpp	deps/patches/llvm-rL327898.patch	/^--- a\/lib\/Target\/X86\/X86InstrInfo.cpp$/;"	m
a/lib/Target/X86/X86InstrVecCompiler.td	deps/patches/llvm-rL326967-aligned-load.patch	/^--- a\/lib\/Target\/X86\/X86InstrVecCompiler.td$/;"	m
a/lib/Target/X86/X86MacroFusion.cpp	deps/patches/llvm-rL327898.patch	/^--- a\/lib\/Target\/X86\/X86MacroFusion.cpp$/;"	m
a/lib/Transforms/InstCombine/InstructionCombining.cpp	deps/patches/llvm-rL326843-missing-header.patch	/^--- a\/lib\/Transforms\/InstCombine\/InstructionCombining.cpp$/;"	m
a/lib/Transforms/InstCombine/InstructionCombining.cpp	deps/patches/llvm-rL332302.patch	/^--- a\/lib\/Transforms\/InstCombine\/InstructionCombining.cpp$/;"	m
a/lib/Transforms/Scalar/JumpThreading.cpp	deps/patches/llvm-D42260.patch	/^--- a\/lib\/Transforms\/Scalar\/JumpThreading.cpp$/;"	m
a/lib/Transforms/Scalar/JumpThreading.cpp	deps/patches/llvm-D42262-jumpthreading-not-i1.patch	/^--- a\/lib\/Transforms\/Scalar\/JumpThreading.cpp$/;"	m
a/lib/Transforms/Scalar/LoopStrengthReduce.cpp	deps/patches/llvm-rL323946-LSRTy.patch	/^--- a\/lib\/Transforms\/Scalar\/LoopStrengthReduce.cpp$/;"	m
a/lib/Transforms/Utils/LoopUtils.cpp	deps/patches/llvm-D34078-vectorize-fdiv.patch	/^--- a\/lib\/Transforms\/Utils\/LoopUtils.cpp$/;"	m
a/lib/Transforms/Utils/VNCoercion.cpp	deps/patches/llvm-D50010-VNCoercion-ni.patch	/^--- a\/lib\/Transforms\/Utils\/VNCoercion.cpp$/;"	m
a/lib/Transforms/Utils/VNCoercion.cpp	deps/patches/llvm7-D50010-VNCoercion-ni.patch	/^--- a\/lib\/Transforms\/Utils\/VNCoercion.cpp$/;"	m
a/memory.c	deps/patches/gmp_alloc_overflow_func.patch	/^--- a\/memory.c$/;"	m
a/mp_get_fns.c	deps/patches/gmp_alloc_overflow_func.patch	/^--- a\/mp_get_fns.c$/;"	m
a/mp_set_fns.c	deps/patches/gmp_alloc_overflow_func.patch	/^--- a\/mp_set_fns.c$/;"	m
a/mpz/init2.c	deps/patches/gmp_alloc_overflow_func.patch	/^--- a\/mpz\/init2.c$/;"	m
a/mpz/realloc.c	deps/patches/gmp_alloc_overflow_func.patch	/^--- a\/mpz\/realloc.c$/;"	m
a/mpz/realloc2.c	deps/patches/gmp_alloc_overflow_func.patch	/^--- a\/mpz\/realloc2.c$/;"	m
a/src/arm/Gex_tables.c	deps/patches/libunwind-prefer-extbl.patch	/^--- a\/src\/arm\/Gex_tables.c$/;"	m
a/src/arm/Gex_tables.c	deps/patches/libunwind-static-arm.patch	/^--- a\/src\/arm\/Gex_tables.c$/;"	m
a/src/arm/Gstep.c	deps/patches/libunwind-prefer-extbl.patch	/^--- a\/src\/arm\/Gstep.c$/;"	m
a/src/transports/ssh.c	deps/patches/libgit2-agent-nonfatal.patch	/^--- a\/src\/transports\/ssh.c$/;"	m
a/test.c	deps/patches/dSFMT.h.patch	/^--- a\/test.c$/;"	m
a/test/Analysis/LoopAccessAnalysis/reverse-memcheck-bounds.ll	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^--- a\/test\/Analysis\/LoopAccessAnalysis\/reverse-memcheck-bounds.ll$/;"	m
a/test/Analysis/LoopAccessAnalysis/reverse-memcheck-bounds.ll	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^--- a\/test\/Analysis\/LoopAccessAnalysis\/reverse-memcheck-bounds.ll$/;"	m
a/test/Analysis/LoopAccessAnalysis/reverse-memcheck-bounds.ll	deps/patches/llvm-D50167-scev-umin.patch	/^--- a\/test\/Analysis\/LoopAccessAnalysis\/reverse-memcheck-bounds.ll$/;"	m
a/test/Analysis/LoopAccessAnalysis/wrapping-pointer-versioning.ll	deps/patches/llvm-D49832-SCEVPred.patch	/^--- a\/test\/Analysis\/LoopAccessAnalysis\/wrapping-pointer-versioning.ll$/;"	m
a/test/Analysis/ScalarEvolution/2008-07-29-SMinExpr.ll	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^--- a\/test\/Analysis\/ScalarEvolution\/2008-07-29-SMinExpr.ll$/;"	m
a/test/Analysis/ScalarEvolution/2008-07-29-SMinExpr.ll	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^--- a\/test\/Analysis\/ScalarEvolution\/2008-07-29-SMinExpr.ll$/;"	m
a/test/Analysis/ScalarEvolution/2008-07-29-SMinExpr.ll	deps/patches/llvm-D50167-scev-umin.patch	/^--- a\/test\/Analysis\/ScalarEvolution\/2008-07-29-SMinExpr.ll$/;"	m
a/test/Analysis/ScalarEvolution/min-max-exprs.ll	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^--- a\/test\/Analysis\/ScalarEvolution\/min-max-exprs.ll$/;"	m
a/test/Analysis/ScalarEvolution/min-max-exprs.ll	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^--- a\/test\/Analysis\/ScalarEvolution\/min-max-exprs.ll$/;"	m
a/test/Analysis/ScalarEvolution/min-max-exprs.ll	deps/patches/llvm-D50167-scev-umin.patch	/^--- a\/test\/Analysis\/ScalarEvolution\/min-max-exprs.ll$/;"	m
a/test/Analysis/ScalarEvolution/pr28705.ll	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^--- a\/test\/Analysis\/ScalarEvolution\/pr28705.ll$/;"	m
a/test/Analysis/ScalarEvolution/pr28705.ll	deps/patches/llvm-D50167-scev-umin.patch	/^--- a\/test\/Analysis\/ScalarEvolution\/pr28705.ll$/;"	m
a/test/Analysis/ScalarEvolution/predicated-trip-count.ll	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^--- a\/test\/Analysis\/ScalarEvolution\/predicated-trip-count.ll$/;"	m
a/test/Analysis/ScalarEvolution/predicated-trip-count.ll	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^--- a\/test\/Analysis\/ScalarEvolution\/predicated-trip-count.ll$/;"	m
a/test/Analysis/ScalarEvolution/predicated-trip-count.ll	deps/patches/llvm-D50167-scev-umin.patch	/^--- a\/test\/Analysis\/ScalarEvolution\/predicated-trip-count.ll$/;"	m
a/test/Analysis/ScalarEvolution/trip-count14.ll	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^--- a\/test\/Analysis\/ScalarEvolution\/trip-count14.ll$/;"	m
a/test/Analysis/ScalarEvolution/trip-count14.ll	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^--- a\/test\/Analysis\/ScalarEvolution\/trip-count14.ll$/;"	m
a/test/Analysis/ScalarEvolution/trip-count3.ll	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^--- a\/test\/Analysis\/ScalarEvolution\/trip-count3.ll$/;"	m
a/test/Analysis/ScalarEvolution/trip-count3.ll	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^--- a\/test\/Analysis\/ScalarEvolution\/trip-count3.ll$/;"	m
a/test/Analysis/ScalarEvolution/trip-count3.ll	deps/patches/llvm-D50167-scev-umin.patch	/^--- a\/test\/Analysis\/ScalarEvolution\/trip-count3.ll$/;"	m
a/test/CodeGen/X86/2012-01-16-mfence-nosse-flags.ll	deps/patches/llvm-rL327898.patch	/^--- a\/test\/CodeGen\/X86\/2012-01-16-mfence-nosse-flags.ll$/;"	d
a/test/CodeGen/X86/avg.ll	deps/patches/llvm-rL327898.patch	/^--- a\/test\/CodeGen\/X86\/avg.ll$/;"	m
a/test/CodeGen/X86/avx-vbroadcastf128.ll	deps/patches/llvm-rL327898.patch	/^--- a\/test\/CodeGen\/X86\/avx-vbroadcastf128.ll$/;"	m
a/test/CodeGen/X86/avx2-vbroadcast.ll	deps/patches/llvm-rL327898.patch	/^--- a\/test\/CodeGen\/X86\/avx2-vbroadcast.ll$/;"	m
a/test/CodeGen/X86/avx2-vbroadcasti128.ll	deps/patches/llvm-rL327898.patch	/^--- a\/test\/CodeGen\/X86\/avx2-vbroadcasti128.ll$/;"	m
a/test/CodeGen/X86/avx512-intrinsics-fast-isel.ll	deps/patches/llvm-rL327898.patch	/^--- a\/test\/CodeGen\/X86\/avx512-intrinsics-fast-isel.ll$/;"	m
a/test/CodeGen/X86/avx512-vbroadcasti128.ll	deps/patches/llvm-rL327898.patch	/^--- a\/test\/CodeGen\/X86\/avx512-vbroadcasti128.ll$/;"	m
a/test/CodeGen/X86/avx512vl-intrinsics-fast-isel.ll	deps/patches/llvm-rL327898.patch	/^--- a\/test\/CodeGen\/X86\/avx512vl-intrinsics-fast-isel.ll$/;"	m
a/test/CodeGen/X86/broadcastm-lowering.ll	deps/patches/llvm-rL327898.patch	/^--- a\/test\/CodeGen\/X86\/broadcastm-lowering.ll$/;"	m
a/test/CodeGen/X86/domain-reassignment-implicit-def.ll	deps/patches/llvm-rL332680.patch	/^--- a\/test\/CodeGen\/X86\/domain-reassignment-implicit-def.ll$/;"	m
a/test/CodeGen/X86/domain-reassignment-test.ll	deps/patches/llvm-rL332682.patch	/^--- a\/test\/CodeGen\/X86\/domain-reassignment-test.ll$/;"	m
a/test/CodeGen/X86/domain-reassignment-test.ll	deps/patches/llvm-rL332694.patch	/^--- a\/test\/CodeGen\/X86\/domain-reassignment-test.ll$/;"	m
a/test/CodeGen/X86/fast-isel-shift.ll	deps/patches/llvm-6.0-r327540.patch	/^--- a\/test\/CodeGen\/X86\/fast-isel-shift.ll$/;"	m
a/test/CodeGen/X86/i256-add.ll	deps/patches/llvm-rL327898.patch	/^--- a\/test\/CodeGen\/X86\/i256-add.ll$/;"	d
a/test/CodeGen/X86/insertelement-shuffle.ll	deps/patches/llvm-rL327898.patch	/^--- a\/test\/CodeGen\/X86\/insertelement-shuffle.ll$/;"	m
a/test/CodeGen/X86/masked_memop.ll	deps/patches/llvm-rL327898.patch	/^--- a\/test\/CodeGen\/X86\/masked_memop.ll$/;"	m
a/test/CodeGen/X86/merge-consecutive-loads-256.ll	deps/patches/llvm-rL326967-aligned-load.patch	/^--- a\/test\/CodeGen\/X86\/merge-consecutive-loads-256.ll$/;"	m
a/test/CodeGen/X86/merge-consecutive-loads-512.ll	deps/patches/llvm-rL326967-aligned-load.patch	/^--- a\/test\/CodeGen\/X86\/merge-consecutive-loads-512.ll$/;"	m
a/test/CodeGen/X86/merge-consecutive-stores.ll	deps/patches/llvm-rL327898.patch	/^--- a\/test\/CodeGen\/X86\/merge-consecutive-stores.ll$/;"	m
a/test/CodeGen/X86/nontemporal.ll	deps/patches/llvm-rL327898.patch	/^--- a\/test\/CodeGen\/X86\/nontemporal.ll$/;"	m
a/test/CodeGen/X86/store_op_load_fold2.ll	deps/patches/llvm-rL327898.patch	/^--- a\/test\/CodeGen\/X86\/store_op_load_fold2.ll$/;"	m
a/test/CodeGen/X86/subvector-broadcast.ll	deps/patches/llvm-rL327898.patch	/^--- a\/test\/CodeGen\/X86\/subvector-broadcast.ll$/;"	d
a/test/CodeGen/X86/test-shrink-bug.ll	deps/patches/llvm-rL327898.patch	/^--- a\/test\/CodeGen\/X86\/test-shrink-bug.ll$/;"	m
a/test/CodeGen/X86/test-shrink.ll	deps/patches/llvm-rL327898.patch	/^--- a\/test\/CodeGen\/X86\/test-shrink.ll$/;"	m
a/test/CodeGen/X86/testb-je-fusion.ll	deps/patches/llvm-rL327898.patch	/^--- a\/test\/CodeGen\/X86\/testb-je-fusion.ll$/;"	m
a/test/CodeGen/X86/var-permute-256.ll	deps/patches/llvm-rL327898.patch	/^--- a\/test\/CodeGen\/X86\/var-permute-256.ll$/;"	d
a/test/CodeGen/X86/vastart-defs-eflags.ll	deps/patches/llvm-rL327898.patch	/^--- a\/test\/CodeGen\/X86\/vastart-defs-eflags.ll$/;"	m
a/test/CodeGen/X86/vector-shuffle-combining-xop.ll	deps/patches/llvm-rL327898.patch	/^--- a\/test\/CodeGen\/X86\/vector-shuffle-combining-xop.ll$/;"	m
a/test/CodeGen/X86/vector-shuffle-variable-256.ll	deps/patches/llvm-rL327898.patch	/^--- a\/test\/CodeGen\/X86\/vector-shuffle-variable-256.ll$/;"	m
a/test/Transforms/GVN/non-integral-pointers.ll	deps/patches/llvm-D50010-VNCoercion-ni.patch	/^--- a\/test\/Transforms\/GVN\/non-integral-pointers.ll$/;"	m
a/test/Transforms/GVN/non-integral-pointers.ll	deps/patches/llvm7-D50010-VNCoercion-ni.patch	/^--- a\/test\/Transforms\/GVN\/non-integral-pointers.ll$/;"	m
a/test/Transforms/IRCE/conjunctive-checks.ll	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^--- a\/test\/Transforms\/IRCE\/conjunctive-checks.ll$/;"	m
a/test/Transforms/IRCE/conjunctive-checks.ll	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^--- a\/test\/Transforms\/IRCE\/conjunctive-checks.ll$/;"	m
a/test/Transforms/IRCE/conjunctive-checks.ll	deps/patches/llvm-D50167-scev-umin.patch	/^--- a\/test\/Transforms\/IRCE\/conjunctive-checks.ll$/;"	m
a/test/Transforms/IRCE/decrementing-loop.ll	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^--- a\/test\/Transforms\/IRCE\/decrementing-loop.ll$/;"	m
a/test/Transforms/IRCE/decrementing-loop.ll	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^--- a\/test\/Transforms\/IRCE\/decrementing-loop.ll$/;"	m
a/test/Transforms/IRCE/decrementing-loop.ll	deps/patches/llvm-D50167-scev-umin.patch	/^--- a\/test\/Transforms\/IRCE\/decrementing-loop.ll$/;"	m
a/test/Transforms/IRCE/multiple-access-no-preloop.ll	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^--- a\/test\/Transforms\/IRCE\/multiple-access-no-preloop.ll$/;"	m
a/test/Transforms/IRCE/multiple-access-no-preloop.ll	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^--- a\/test\/Transforms\/IRCE\/multiple-access-no-preloop.ll$/;"	m
a/test/Transforms/IRCE/multiple-access-no-preloop.ll	deps/patches/llvm-D50167-scev-umin.patch	/^--- a\/test\/Transforms\/IRCE\/multiple-access-no-preloop.ll$/;"	m
a/test/Transforms/IRCE/ranges_of_different_types.ll	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^--- a\/test\/Transforms\/IRCE\/ranges_of_different_types.ll$/;"	m
a/test/Transforms/IRCE/ranges_of_different_types.ll	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^--- a\/test\/Transforms\/IRCE\/ranges_of_different_types.ll$/;"	m
a/test/Transforms/IRCE/ranges_of_different_types.ll	deps/patches/llvm-D50167-scev-umin.patch	/^--- a\/test\/Transforms\/IRCE\/ranges_of_different_types.ll$/;"	m
a/test/Transforms/IRCE/rc-negative-bound.ll	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^--- a\/test\/Transforms\/IRCE\/rc-negative-bound.ll$/;"	m
a/test/Transforms/IRCE/rc-negative-bound.ll	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^--- a\/test\/Transforms\/IRCE\/rc-negative-bound.ll$/;"	m
a/test/Transforms/IRCE/single-access-no-preloop.ll	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^--- a\/test\/Transforms\/IRCE\/single-access-no-preloop.ll$/;"	m
a/test/Transforms/IRCE/single-access-no-preloop.ll	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^--- a\/test\/Transforms\/IRCE\/single-access-no-preloop.ll$/;"	m
a/test/Transforms/IRCE/single-access-no-preloop.ll	deps/patches/llvm-D50167-scev-umin.patch	/^--- a\/test\/Transforms\/IRCE\/single-access-no-preloop.ll$/;"	m
a/test/Transforms/IRCE/single-access-with-preloop.ll	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^--- a\/test\/Transforms\/IRCE\/single-access-with-preloop.ll$/;"	m
a/test/Transforms/IRCE/single-access-with-preloop.ll	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^--- a\/test\/Transforms\/IRCE\/single-access-with-preloop.ll$/;"	m
a/test/Transforms/IRCE/single-access-with-preloop.ll	deps/patches/llvm-D50167-scev-umin.patch	/^--- a\/test\/Transforms\/IRCE\/single-access-with-preloop.ll$/;"	m
a/test/Transforms/IRCE/unsigned_comparisons_ugt.ll	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^--- a\/test\/Transforms\/IRCE\/unsigned_comparisons_ugt.ll$/;"	m
a/test/Transforms/IRCE/unsigned_comparisons_ugt.ll	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^--- a\/test\/Transforms\/IRCE\/unsigned_comparisons_ugt.ll$/;"	m
a/test/Transforms/IRCE/unsigned_comparisons_ult.ll	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^--- a\/test\/Transforms\/IRCE\/unsigned_comparisons_ult.ll$/;"	m
a/test/Transforms/IRCE/unsigned_comparisons_ult.ll	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^--- a\/test\/Transforms\/IRCE\/unsigned_comparisons_ult.ll$/;"	m
a/test/Transforms/IndVarSimplify/eliminate-trunc.ll	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^--- a\/test\/Transforms\/IndVarSimplify\/eliminate-trunc.ll$/;"	m
a/test/Transforms/InstCombine/gep-addrspace.ll	deps/patches/llvm-rL332302.patch	/^--- a\/test\/Transforms\/InstCombine\/gep-addrspace.ll$/;"	m
a/test/Transforms/JumpThreading/basic.ll	deps/patches/llvm-D42262-jumpthreading-not-i1.patch	/^--- a\/test\/Transforms\/JumpThreading\/basic.ll$/;"	m
a/test/Transforms/JumpThreading/header-succ.ll	deps/patches/llvm-D42260.patch	/^--- a\/test\/Transforms\/JumpThreading\/header-succ.ll$/;"	m
a/test/Transforms/LoopStrengthReduce/2013-01-14-ReuseCast.ll	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^--- a\/test\/Transforms\/LoopStrengthReduce\/2013-01-14-ReuseCast.ll$/;"	m
a/test/Transforms/LoopStrengthReduce/2013-01-14-ReuseCast.ll	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^--- a\/test\/Transforms\/LoopStrengthReduce\/2013-01-14-ReuseCast.ll$/;"	m
a/test/Transforms/LoopStrengthReduce/2013-01-14-ReuseCast.ll	deps/patches/llvm-D50167-scev-umin.patch	/^--- a\/test\/Transforms\/LoopStrengthReduce\/2013-01-14-ReuseCast.ll$/;"	m
a/test/Transforms/LoopVectorize/X86/pr35432.ll	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^--- a\/test\/Transforms\/LoopVectorize\/X86\/pr35432.ll$/;"	m
a/test/Transforms/LoopVectorize/X86/pr35432.ll	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^--- a\/test\/Transforms\/LoopVectorize\/X86\/pr35432.ll$/;"	m
a/test/Transforms/LoopVectorize/float-reduction.ll	deps/patches/llvm-D34078-vectorize-fdiv.patch	/^--- a\/test\/Transforms\/LoopVectorize\/float-reduction.ll$/;"	m
a/test/Transforms/LoopVectorize/float-reduction.ll	deps/patches/llvm8-D34078-vectorize-fdiv.patch	/^--- a\/test\/Transforms\/LoopVectorize\/float-reduction.ll$/;"	m
a/tests/mpz/t-pow.c	deps/patches/gmp_alloc_overflow_func.patch	/^--- a\/tests\/mpz\/t-pow.c$/;"	m
a/tools/clang/lib/CodeGen/BackendUtil.cpp	deps/patches/clang-D28477.patch	/^--- a\/tools\/clang\/lib\/CodeGen\/BackendUtil.cpp$/;"	m
a/tools/llvm-cfi-verify/CMakeLists.txt	deps/patches/llvm-6.0-D44650.patch	/^--- a\/tools\/llvm-cfi-verify\/CMakeLists.txt$/;"	m
a/tools/llvm-cfi-verify/CMakeLists.txt	deps/patches/llvm-7.0-D44650.patch	/^--- a\/tools\/llvm-cfi-verify\/CMakeLists.txt$/;"	m
a/tools/llvm-config/CMakeLists.txt	deps/patches/llvm-rL349068-llvm-config.patch	/^--- a\/tools\/llvm-config\/CMakeLists.txt$/;"	m
a/tools/llvm-config/CMakeLists.txt	deps/patches/llvm-windows-race.patch	/^--- a\/tools\/llvm-config\/CMakeLists.txt$/;"	m
a/tools/llvm-config/CMakeLists.txt	deps/patches/llvm7-windows-race.patch	/^--- a\/tools\/llvm-config\/CMakeLists.txt$/;"	m
a/tools/llvm-shlib/simple_version_script.map.in	deps/patches/llvm-symver-jlprefix.patch	/^--- a\/tools\/llvm-shlib\/simple_version_script.map.in$/;"	m
a/tools/llvm-shlib/simple_version_script.map.in	deps/patches/llvm7-symver-jlprefix.patch	/^--- a\/tools\/llvm-shlib\/simple_version_script.map.in$/;"	m
a0	test/offsetarray.jl	/^a0 = rand(1,1,8,8,1)$/;"	v
a18015	test/compiler/inference.jl	/^a18015(tri) = tri.a$/;"	f
a19554	test/boundscheck_exec.jl	/^a19554 = Ref{Array{Float64}}([1 2; 3 4])$/;"	v
a20704	test/compiler/inference.jl	/^Base.@pure function a20704(x)$/;"	f
a21172	test/core.jl	/^a21172 = f21172(x) = 2x$/;"	v
a22307	test/core.jl	/^a22307 = 2$/;"	v
a22307	test/core.jl	/^macro a22307()$/;"	f
a25724	test/core.jl	/^a25724 = Any[]$/;"	v
a27933	stdlib/Distributed/test/distributed_exec.jl	/^a27933 = :_not_defined_27933$/;"	v
a27964	test/syntax.jl	/^a27964(x) = Any[x for x in []]$/;"	f
a28593	test/syntax.jl	/^macro a28593()$/;"	f
a28955	test/compiler/inference.jl	/^a28955(f, args...) = f(args...)$/;"	f
a2img	stdlib/LinearAlgebra/test/bunchkaufman.jl	/^a2img  = randn(n,n)\/2$/;"	v
a2img	stdlib/LinearAlgebra/test/dense.jl	/^a2img  = randn(n,n)\/2$/;"	v
a2img	stdlib/LinearAlgebra/test/lq.jl	/^a2img  = randn(n,n)\/2$/;"	v
a2img	stdlib/LinearAlgebra/test/qr.jl	/^a2img  = randn(n,n)\/2$/;"	v
a2real	stdlib/LinearAlgebra/test/bunchkaufman.jl	/^a2real = randn(n,n)\/2$/;"	v
a2real	stdlib/LinearAlgebra/test/dense.jl	/^a2real = randn(n,n)\/2$/;"	v
a2real	stdlib/LinearAlgebra/test/lq.jl	/^a2real = randn(n,n)\/2$/;"	v
a2real	stdlib/LinearAlgebra/test/qr.jl	/^a2real = randn(n,n)\/2$/;"	v
a31583	test/core.jl	/^a31583 = "a"$/;"	v
a31583	test/core.jl	/^a31583 = "b"$/;"	v
a32121	test/syntax.jl	/^a32121 = 8$/;"	v
a32325	test/syntax.jl	/^    a32325(x) = a32325()$/;"	f
a32325	test/syntax.jl	/^    struct a32325 end$/;"	f
a4208	test/core.jl	/^mutable struct a4208$/;"	f
a4688	test/core.jl	/^    a4688(y::Int) = "an Int"$/;"	f
a4688	test/core.jl	/^a4688(y) = "should be unreachable by calling b"$/;"	f
a7652	test/core.jl	/^a7652 = A7652(0)$/;"	v
a8932	test/core.jl	/^a8932 = Vec3_8932(1,1,1)$/;"	v
a::A_20087	test/docs.jl	/^(a::A_20087)() = a$/;"	f
a_bar	stdlib/REPL/test/lineedit.jl	/^a_bar = 0$/;"	v
a_const	test/reflection.jl	/^const a_const = 1$/;"	v
a_foo	stdlib/REPL/test/lineedit.jl	/^a_foo = 0$/;"	v
a_foo	stdlib/REPL/test/lineedit.jl	/^a_foo = a_bar = 0$/;"	v
a_global_closure_vector	test/core.jl	/^a_global_closure_vector = Vector{Any}(undef, 3)$/;"	v
a_type	deps/srccache/patchelf-0.9/src/elf.h	/^  uint32_t a_type;		\/* Entry type *\/$/;"	m	struct:__anonff7a58691b08	typeref:typename:uint32_t
a_type	deps/srccache/patchelf-0.9/src/elf.h	/^  uint64_t a_type;		\/* Entry type *\/$/;"	m	struct:__anonff7a58691d08	typeref:typename:uint64_t
a_un	deps/srccache/patchelf-0.9/src/elf.h	/^    } a_un;$/;"	m	struct:__anonff7a58691b08	typeref:union:__anonff7a58691b08::__anonff7a58691c0a
a_un	deps/srccache/patchelf-0.9/src/elf.h	/^    } a_un;$/;"	m	struct:__anonff7a58691d08	typeref:union:__anonff7a58691d08::__anonff7a58691e0a
a_val	deps/srccache/patchelf-0.9/src/elf.h	/^      uint32_t a_val;		\/* Integer value *\/$/;"	m	union:__anonff7a58691b08::__anonff7a58691c0a	typeref:typename:uint32_t
a_val	deps/srccache/patchelf-0.9/src/elf.h	/^      uint64_t a_val;		\/* Integer value *\/$/;"	m	union:__anonff7a58691d08::__anonff7a58691e0a	typeref:typename:uint64_t
a_value	test/reflection.jl	/^const a_value = 1$/;"	v
aa20704	test/compiler/inference.jl	/^aa20704(x) = x(nothing)$/;"	f
aa23239	test/core.jl	/^macro aa23239()$/;"	f
aat	stdlib/SuiteSparse/src/cholmod.jl	/^function aat(A::Sparse{Tv}, fset::Vector{SuiteSparse_long}, mode::Integer) where Tv<:VRealTypes$/;"	f
abday	src/support/strptime.c	/^	const char* abday[7];$/;"	m	struct:__anon732973510108	typeref:typename:const char * [7]	file:
abmon	src/support/strptime.c	/^	const char* abmon[12];$/;"	m	struct:__anon732973510108	typeref:typename:const char * [12]	file:
abort	stdlib/LibGit2/src/rebase.jl	/^function abort(rb::GitRebase)$/;"	f
abort_with_error	test/gcext/gcext.c	/^void abort_with_error(int full)$/;"	f	typeref:typename:void
abs	base/bool.jl	/^abs(x::Bool) = x$/;"	f
abs	base/complex.jl	/^abs(z::Complex)  = hypot(real(z), imag(z))$/;"	f
abs	base/float.jl	/^abs(x::Float16) = reinterpret(Float16, reinterpret(UInt16, x) & 0x7fff)$/;"	f
abs	base/float.jl	/^abs(x::Float32) = abs_float(x)$/;"	f
abs	base/float.jl	/^abs(x::Float64) = abs_float(x)$/;"	f
abs	base/int.jl	/^abs(x::Signed) = flipsign(x,x)$/;"	f
abs	base/int.jl	/^abs(x::Unsigned) = x$/;"	f
abs	base/int.jl	/^function abs end$/;"	f
abs	base/number.jl	/^abs(x::Real) = ifelse(signbit(x), -x, x)$/;"	f
abs	base/rational.jl	/^abs(x::Rational) = Rational(abs(x.num), x.den)$/;"	f
abs1	stdlib/LinearAlgebra/src/givens.jl	/^    abs1(ff) = max(abs(real(ff)), abs(imag(ff)))$/;"	f
abs2	base/bool.jl	/^abs2(x::Bool) = x$/;"	f
abs2	base/complex.jl	/^abs2(z::Complex) = real(z)*real(z) + imag(z)*imag(z)$/;"	f
abs2	base/number.jl	/^abs2(x::Real) = x*x$/;"	f
abs2_fast	base/fastmath.jl	/^    abs2_fast(x::ComplexTypes) = real(x)*real(x) + imag(x)*imag(x)$/;"	f
abs_builddir	deps/srccache/patchelf-0.9/Makefile.in	/^abs_builddir = @abs_builddir@$/;"	m
abs_builddir	deps/srccache/patchelf-0.9/src/Makefile.in	/^abs_builddir = @abs_builddir@$/;"	m
abs_builddir	deps/srccache/patchelf-0.9/tests/Makefile.in	/^abs_builddir = @abs_builddir@$/;"	m
abs_fast	base/fastmath.jl	/^    abs_fast(x::ComplexTypes) = hypot(real(x), imag(x))$/;"	f
abs_float	src/runtime_intrinsics.c	/^#define abs_float(/;"	d	file:
abs_srcdir	deps/srccache/patchelf-0.9/Makefile.in	/^abs_srcdir = @abs_srcdir@$/;"	m
abs_srcdir	deps/srccache/patchelf-0.9/src/Makefile.in	/^abs_srcdir = @abs_srcdir@$/;"	m
abs_srcdir	deps/srccache/patchelf-0.9/tests/Makefile.in	/^abs_srcdir = @abs_srcdir@$/;"	m
abs_top_builddir	deps/srccache/patchelf-0.9/Makefile.in	/^abs_top_builddir = @abs_top_builddir@$/;"	m
abs_top_builddir	deps/srccache/patchelf-0.9/src/Makefile.in	/^abs_top_builddir = @abs_top_builddir@$/;"	m
abs_top_builddir	deps/srccache/patchelf-0.9/tests/Makefile.in	/^abs_top_builddir = @abs_top_builddir@$/;"	m
abs_top_srcdir	deps/srccache/patchelf-0.9/Makefile.in	/^abs_top_srcdir = @abs_top_srcdir@$/;"	m
abs_top_srcdir	deps/srccache/patchelf-0.9/src/Makefile.in	/^abs_top_srcdir = @abs_top_srcdir@$/;"	m
abs_top_srcdir	deps/srccache/patchelf-0.9/tests/Makefile.in	/^abs_top_srcdir = @abs_top_srcdir@$/;"	m
absfilepath	test/backtrace.jl	/^const absfilepath = Sys.iswindows() ? "C:\\\\foo\\\\bar\\\\baz.jl" : "\/foo\/bar\/baz.jl"$/;"	v
absformat	src/init.c	/^static const char *absformat(const char *in)$/;"	f	typeref:typename:const char *	file:
abspath	base/path.jl	/^abspath(a::AbstractString, b::AbstractString...) = abspath(joinpath(a,b...))$/;"	f
abspath	base/path.jl	/^abspath(a::String) = normpath(isabspath(a) ? a : joinpath(pwd(),a))$/;"	f
abspath	src/init.c	/^static char *abspath(const char *in, int nprefix)$/;"	f	typeref:typename:char *	file:
abspaths	contrib/add_license_to_files.jl	/^function abspaths(A::Vector)$/;"	f
abstest_14825	test/core.jl	/^abstract type abstest_14825 end$/;"	f
abstr_nt_22194	test/namedtuple.jl	/^function abstr_nt_22194()$/;"	f
abstr_nt_22194_2	test/namedtuple.jl	/^function abstr_nt_22194_2()$/;"	f
abstr_nt_22194_3	test/namedtuple.jl	/^function abstr_nt_22194_3()$/;"	f
abstract	src/julia.h	/^    uint8_t abstract;$/;"	m	struct:_jl_datatype_t	typeref:typename:uint8_t
abstract-type-def-expr	src/julia-syntax.scm	/^(define (abstract-type-def-expr name params super)$/;"	f
abstract_apply	base/compiler/abstractinterpretation.jl	/^function abstract_apply(@nospecialize(aft), aargtypes::Vector{Any}, vtypes::VarTable, sv::Infere/;"	f
abstract_call	base/compiler/abstractinterpretation.jl	/^function abstract_call(@nospecialize(f), fargs::Union{Nothing,Vector{Any}}, argtypes::Vector{Any/;"	f
abstract_call_gf_by_type	base/compiler/abstractinterpretation.jl	/^function abstract_call_gf_by_type(@nospecialize(f), argtypes::Vector{Any}, @nospecialize(atype),/;"	f
abstract_call_method	base/compiler/abstractinterpretation.jl	/^function abstract_call_method(method::Method, @nospecialize(sig), sparams::SimpleVector, hardlim/;"	f
abstract_call_method_with_const_args	base/compiler/abstractinterpretation.jl	/^function abstract_call_method_with_const_args(@nospecialize(rettype), @nospecialize(f), argtypes/;"	f
abstract_eval	base/compiler/abstractinterpretation.jl	/^function abstract_eval(@nospecialize(e), vtypes::VarTable, sv::InferenceState)$/;"	f
abstract_eval_call	base/compiler/abstractinterpretation.jl	/^function abstract_eval_call(fargs::Union{Nothing,Vector{Any}}, argtypes::Vector{Any}, vtypes::Va/;"	f
abstract_eval_cfunction	base/compiler/abstractinterpretation.jl	/^function abstract_eval_cfunction(e::Expr, vtypes::VarTable, sv::InferenceState)$/;"	f
abstract_eval_global	base/compiler/abstractinterpretation.jl	/^function abstract_eval_global(M::Module, s::Symbol)$/;"	f
abstract_eval_ssavalue	base/compiler/abstractinterpretation.jl	/^function abstract_eval_ssavalue(s::SSAValue, src::CodeInfo)$/;"	f
abstract_eval_ssavalue	base/compiler/ssair/queries.jl	/^function abstract_eval_ssavalue(s::SSAValue, src::IRCode)$/;"	f
abstract_eval_ssavalue	base/compiler/ssair/queries.jl	/^function abstract_eval_ssavalue(s::SSAValue, src::IncrementalCompact)$/;"	f
abstract_evals_to_constant	base/compiler/abstractinterpretation.jl	/^function abstract_evals_to_constant(@nospecialize(ex), @nospecialize(c), vtypes::VarTable, sv::I/;"	f
abstract_iteration	base/compiler/abstractinterpretation.jl	/^function abstract_iteration(@nospecialize(itertype), vtypes::VarTable, sv::InferenceState)$/;"	f
abstracttype_sym	src/ast.c	/^jl_sym_t *abstracttype_sym; jl_sym_t *primtype_sym;$/;"	v	typeref:typename:jl_sym_t *
ac15639line	test/errorshow.jl	/^ac15639line = @__LINE__$/;"	v
ac_ct_CC	deps/srccache/patchelf-0.9/Makefile.in	/^ac_ct_CC = @ac_ct_CC@$/;"	m
ac_ct_CC	deps/srccache/patchelf-0.9/src/Makefile.in	/^ac_ct_CC = @ac_ct_CC@$/;"	m
ac_ct_CC	deps/srccache/patchelf-0.9/tests/Makefile.in	/^ac_ct_CC = @ac_ct_CC@$/;"	m
ac_ct_CXX	deps/srccache/patchelf-0.9/Makefile.in	/^ac_ct_CXX = @ac_ct_CXX@$/;"	m
ac_ct_CXX	deps/srccache/patchelf-0.9/src/Makefile.in	/^ac_ct_CXX = @ac_ct_CXX@$/;"	m
ac_ct_CXX	deps/srccache/patchelf-0.9/tests/Makefile.in	/^ac_ct_CXX = @ac_ct_CXX@$/;"	m
ac_fn_c_try_compile	deps/srccache/patchelf-0.9/configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_cxx_try_compile	deps/srccache/patchelf-0.9/configure	/^ac_fn_cxx_try_compile ()$/;"	f
accept	stdlib/Sockets/src/PipeServer.jl	/^accept(server::PipeServer) = accept(server, PipeEndpoint())$/;"	f
accept	stdlib/Sockets/src/Sockets.jl	/^accept(server::TCPServer) = accept(server, TCPSocket())$/;"	f
accept	stdlib/Sockets/src/Sockets.jl	/^function accept(callback, server::LibuvServer)$/;"	f
accept	stdlib/Sockets/src/Sockets.jl	/^function accept(server::LibuvServer, client::LibuvStream)$/;"	f
accept_nonblock	stdlib/Sockets/src/PipeServer.jl	/^function accept_nonblock(server::PipeServer)$/;"	f
accept_nonblock	stdlib/Sockets/src/PipeServer.jl	/^function accept_nonblock(server::PipeServer, client::PipeEndpoint)$/;"	f
accept_nonblock	stdlib/Sockets/src/Sockets.jl	/^function accept_nonblock(server::TCPServer)$/;"	f
accept_nonblock	stdlib/Sockets/src/Sockets.jl	/^function accept_nonblock(server::TCPServer, client::TCPSocket)$/;"	f
accept_result	stdlib/REPL/src/LineEdit.jl	/^function accept_result(s, p) # p must be either a HistoryPrompt or PrefixHistoryPrompt, probably$/;"	f
accept_result_newmode	stdlib/REPL/src/LineEdit.jl	/^accept_result_newmode(hp::HistoryProvider) = nothing$/;"	f
access_env	base/env.jl	/^    function access_env(onError::Function, str::AbstractString)$/;"	f
access_env	base/env.jl	/^    function access_env(onError::Function, var::AbstractString)$/;"	f
accesses	src/llvm-alloc-opt.cpp	/^        SmallVector<MemOp,4> accesses;$/;"	m	struct:__anon0a1571000111::Optimizer::Field	typeref:typename:SmallVector<MemOp,4>	file:
accessible	stdlib/REPL/src/docview.jl	/^accessible(mod::Module) =$/;"	f
accum-digits	src/julia-parser.scm	/^(define (accum-digits c pred port _-digit-sep)$/;"	f
accumchar	src/flisp/read.c	/^static void accumchar(fl_context_t *fl_ctx, char c, int *pi)$/;"	f	typeref:typename:void	file:
accumulate	base/accumulate.jl	/^function accumulate(op, A; dims::Union{Nothing,Integer}=nothing, kw...)$/;"	f
accumulate!	base/accumulate.jl	/^function accumulate!(op, B, A; dims::Union{Integer, Nothing} = nothing, kw...)$/;"	f
accumulate_pairwise	base/accumulate.jl	/^function accumulate_pairwise(op, v::AbstractVector{T}) where T$/;"	f
accumulate_pairwise!	base/accumulate.jl	/^function accumulate_pairwise!(op::Op, result::AbstractVector, v::AbstractVector) where Op$/;"	f
acos	base/complex.jl	/^acos(z::Complex) = acos(float(z))$/;"	f
acos	base/complex.jl	/^function acos(z::Complex{<:AbstractFloat})$/;"	f
acos	base/special/trig.jl	/^acos(x::Real) = acos(float(x))$/;"	f
acos	base/special/trig.jl	/^function acos(x::T) where T <: Union{Float32, Float64}$/;"	f
acos	stdlib/LinearAlgebra/src/dense.jl	/^function acos(A::AbstractMatrix)$/;"	f
acos_domain_error	base/special/trig.jl	/^@noinline acos_domain_error(x) = throw(DomainError(x, "acos(x) not defined for |x| > 1"))$/;"	f
acos_fast	base/fastmath.jl	/^    acos_fast(x::T) where {T<:ComplexTypes} =$/;"	f
acosh	base/complex.jl	/^function acosh(z::Complex)$/;"	f
acosh	base/special/hyperbolic.jl	/^acosh(x::Real) = acosh(float(x))$/;"	f
acosh	base/special/hyperbolic.jl	/^function acosh(x::T) where T <: Union{Float32, Float64}$/;"	f
acosh	stdlib/LinearAlgebra/src/dense.jl	/^function acosh(A::AbstractMatrix)$/;"	f
acosh	stdlib/LinearAlgebra/src/symmetric.jl	/^function acosh(A::HermOrSym{<:Real})$/;"	f
acosh	stdlib/LinearAlgebra/src/symmetric.jl	/^function acosh(A::Hermitian{<:Complex})$/;"	f
acosh_domain_error	base/special/hyperbolic.jl	/^@noinline acosh_domain_error(x) = throw(DomainError(x, "acosh(x) is only defined for x ≥ 1."))$/;"	f
acosh_fast	base/fastmath.jl	/^    acosh_fast(x::ComplexTypes) = log(x + sqrt(x+1) * sqrt(x-1))$/;"	f
acquire	base/lock.jl	/^function acquire(s::Semaphore)$/;"	f
activate	stdlib/REPL/src/LineEdit.jl	/^activate(m::ModalInterface, s::MIState, termbuf, term::TextTerminal) =$/;"	f
activate	stdlib/REPL/src/LineEdit.jl	/^function activate(p::TextInterface, s::MIState, termbuf, term::TextTerminal)$/;"	f
activate	stdlib/REPL/src/LineEdit.jl	/^function activate(p::TextInterface, s::ModeState, termbuf, term::TextTerminal)$/;"	f
activate_region	stdlib/REPL/src/LineEdit.jl	/^activate_region(s::ModeState, state::Symbol) = false$/;"	f
activate_region	stdlib/REPL/src/LineEdit.jl	/^function activate_region(s::PromptState, state::Symbol)$/;"	f
active_project	base/initdefs.jl	/^function active_project(search_load_path::Bool=true)$/;"	f
adce_erase!	base/compiler/ssair/passes.jl	/^function adce_erase!(phi_uses, extra_worklist, compact, idx)$/;"	f
adce_pass!	base/compiler/ssair/passes.jl	/^function adce_pass!(ir::IRCode)$/;"	f
add	base/docs/basedocs.jl	/^add(a, b) = a + b$/;"	f
add	base/docs/basedocs.jl	/^function add(a, b)$/;"	f
add	src/jitlayers.cpp	/^        void add(Pass *P) { TPM->schedulePass(P); }$/;"	f	struct:JuliaPipeline::TPMAdapter	typeref:typename:void	file:
add	src/runtime_intrinsics.c	/^#define add(/;"	d	file:
add!	stdlib/LibGit2/src/index.jl	/^function add!(idx::GitIndex, files::AbstractString...;$/;"	f
add!	stdlib/LibGit2/src/index.jl	/^function add!(repo::GitRepo, files::AbstractString...;$/;"	f
add!	test/compiler/irpasses.jl	/^function add!(p::Foo30594, off::Foo30594)$/;"	f
add-box-inits-to-body	src/julia-syntax.scm	/^(define (add-box-inits-to-body lam body)$/;"	f
add-dots	src/julia-parser.scm	/^(define (add-dots ops) (append! ops (map (lambda (op) (symbol (string "." op))) ops)))$/;"	f
add-init	src/julia-syntax.scm	/^(define (add-init arg arg2 expr)$/;"	f
add-line-number	src/julia-parser.scm	/^(define (add-line-number blk linenode)$/;"	f
add12	base/twiceprecision.jl	/^add12(x, y) = add12(promote(x, y)...)$/;"	f
add12	base/twiceprecision.jl	/^function add12(x::T, y::T) where {T}$/;"	f
add1234	test/llvmcall.jl	/^function add1234(x::Tuple{Int32,Int32,Int32,Int32})$/;"	f
add22condh	base/math.jl	/^function add22condh(xh::Float64, xl::Float64, yh::Float64, yl::Float64)$/;"	f
addComdat	src/jitlayers.cpp	/^static T *addComdat(T *G)$/;"	f	typeref:typename:T *	file:
addConstraint_15639	test/errorshow.jl	/^addConstraint_15639(c::Int32) = c$/;"	f
addConstraint_15639	test/errorshow.jl	/^addConstraint_15639(c::Int64; uncset=nothing) = addConstraint_15639(Int32(c), uncset=uncset)$/;"	f
addDebugLoc	src/disasm.cpp	/^    void addDebugLoc(const Instruction *I, DILocation *Loc)$/;"	f	class:LineNumberAnnotatedWriter	typeref:typename:void	file:
addField	src/abi_x86_64.cpp	/^    void addField(unsigned offset, ArgClass cl)$/;"	f	struct:ABI_x86_64Layout::Classification	typeref:typename:void	file:
addGCAllocAttributes	src/llvm-pass-helpers.cpp	/^    static Function *addGCAllocAttributes(Function *target, LLVMContext &context)$/;"	f	namespace:jl_intrinsics	typeref:typename:Function *	file:
addGlobalMapping	src/jitlayers.cpp	/^void JuliaOJIT::addGlobalMapping(StringRef Name, uint64_t Addr)$/;"	f	class:JuliaOJIT	typeref:typename:void
addGlobalMapping	src/jitlayers.cpp	/^void JuliaOJIT::addGlobalMapping(const GlobalValue *GV, void *Addr)$/;"	f	class:JuliaOJIT	typeref:typename:void
addJuliaVariant:	contrib/mac/frameworkapp/JuliaLauncher/AppDelegate.m	/^- (void)addJuliaVariant:(JuliaVariant *)jv {$/;"	m	implementation:AppDelegate
addMemOp	src/llvm-alloc-opt.cpp	/^bool Optimizer::AllocUseInfo::addMemOp(Instruction *inst, unsigned opno, uint32_t offset,$/;"	f	class:__anon0a1571000111::Optimizer::AllocUseInfo	typeref:typename:bool
addModule	src/jitlayers.cpp	/^void JuliaOJIT::addModule(std::unique_ptr<Module> M)$/;"	f	class:JuliaOJIT	typeref:typename:void
addNeeded	deps/srccache/patchelf-0.9/src/patchelf.cc	/^void ElfFile<ElfFileParamNames>::addNeeded(set<string> libs)$/;"	f	class:ElfFile	typeref:typename:void
addOptimizationPasses	src/jitlayers.cpp	/^void addOptimizationPasses(legacy::PassManagerBase *PM, int opt_level,$/;"	f	typeref:typename:void
addSubprogram	src/disasm.cpp	/^    void addSubprogram(const Function *F, DISubprogram *SP)$/;"	f	class:LineNumberAnnotatedWriter	typeref:typename:void	file:
addTargetPasses	src/jitlayers.cpp	/^void addTargetPasses(legacy::PassManagerBase *PM, TargetMachine *TM)$/;"	f	typeref:typename:void
add_and_commit_file	stdlib/LibGit2/test/libgit2.jl	/^    function add_and_commit_file(repo, filenm, filecontent)$/;"	f
add_backedge!	base/compiler/inferencestate.jl	/^function add_backedge!(li::MethodInstance, caller::InferenceState)$/;"	f
add_backedge!	base/compiler/optimize.jl	/^function add_backedge!(li::CodeInstance, caller::OptimizationState)$/;"	f
add_backedge!	base/compiler/optimize.jl	/^function add_backedge!(li::MethodInstance, caller::OptimizationState)$/;"	f
add_client	stdlib/Distributed/src/remotecall.jl	/^function add_client(id, client)$/;"	f
add_clients	stdlib/Distributed/src/remotecall.jl	/^function add_clients(pairs::Vector)$/;"	f
add_comdat	src/llvm-multiversioning.cpp	/^inline T *CloneCtx::add_comdat(T *G) const$/;"	f	class:__anond5683ea40111::CloneCtx	typeref:typename:T *
add_comdat	src/llvm-ptls.cpp	/^inline T *LowerPTLS::add_comdat(T *G) const$/;"	f	class:__anonf46923380111::LowerPTLS	typeref:typename:T *
add_cycle_backedge!	base/compiler/inferencestate.jl	/^function add_cycle_backedge!(frame::InferenceState, caller::InferenceState, currpc::Int)$/;"	f
add_fast	base/fastmath.jl	/^    add_fast(a::T, y::Complex{T}) where {T<:FloatTypes} =$/;"	f
add_fast	base/fastmath.jl	/^    add_fast(x::Complex{T}, b::T) where {T<:FloatTypes} =$/;"	f
add_fast	base/fastmath.jl	/^    add_fast(x::T, y::T) where {T<:ComplexTypes} =$/;"	f
add_fast	base/fastmath.jl	/^add_fast(x::T, y::T) where {T<:FloatTypes} = add_float_fast(x, y)$/;"	f
add_fast	base/fastmath.jl	/^add_fast(x::T, y::T, zs::T...) where {T<:FloatTypes} =$/;"	f
add_feature_mask_u32	src/processor.cpp	/^static inline constexpr uint32_t add_feature_mask_u32(uint32_t mask, uint32_t u32idx)$/;"	f	namespace:__anon839834ed0111	typeref:typename:uint32_t	file:
add_feature_mask_u32	src/processor.cpp	/^static inline constexpr uint32_t add_feature_mask_u32(uint32_t mask, uint32_t u32idx,$/;"	f	namespace:__anon839834ed0111	typeref:typename:uint32_t	file:
add_features	src/llvm-multiversioning.cpp	/^void CloneCtx::add_features(Function *F, StringRef name, StringRef features, uint32_t flags) con/;"	f	class:__anond5683ea40111::CloneCtx	typeref:typename:void
add_fetch!	stdlib/LibGit2/src/remote.jl	/^function add_fetch!(repo::GitRepo, rmt::GitRemote, fetch_spec::String)$/;"	f
add_finalizer	src/flisp/cvalues.c	/^void add_finalizer(fl_context_t *fl_ctx, cvalue_t *cv)$/;"	f	typeref:typename:void
add_history	stdlib/REPL/src/LineEdit.jl	/^add_history(::EmptyHistoryProvider, s) = nothing$/;"	f
add_history	stdlib/REPL/src/LineEdit.jl	/^add_history(s::PromptState) = add_history(mode(s).hist, s)$/;"	f
add_history	stdlib/REPL/src/REPL.jl	/^function add_history(hist::REPLHistoryProvider, s)$/;"	f
add_license	contrib/add_license_to_files.jl	/^function add_license(rootdirs::Vector, new_license::AbstractString, old_license::AbstractString,$/;"	f
add_license_line!	contrib/add_license_to_files.jl	/^function add_license_line!(unprocessed::Vector, src::AbstractString, new_license::AbstractString/;"	f
add_lostval_parent	src/gc-debug.c	/^void add_lostval_parent(jl_value_t *parent)$/;"	f	typeref:typename:void
add_method_to_glob_fn!	test/syntax.jl	/^function add_method_to_glob_fn!()$/;"	f
add_mt_backedge!	base/compiler/inferencestate.jl	/^function add_mt_backedge!(mt::Core.MethodTable, @nospecialize(typ), caller::InferenceState)$/;"	f
add_named_global	src/jitlayers.cpp	/^void add_named_global(GlobalObject *gv, void *addr, bool dllimport)$/;"	f	typeref:typename:void
add_named_global	src/jitlayers.h	/^static inline void add_named_global(GlobalObject *gv, T *addr, bool dllimport = true)$/;"	f	typeref:typename:void
add_nested_key!	stdlib/REPL/src/LineEdit.jl	/^function add_nested_key!(keymap::Dict, key, value; override = false)$/;"	f
add_node	test/core.jl	/^    add_node(y) = y+1$/;"	f
add_page	src/gc.c	/^static NOINLINE jl_taggedvalue_t *add_page(jl_gc_pool_t *p) JL_NOTSAFEPOINT$/;"	f	typeref:typename:NOINLINE jl_taggedvalue_t *	file:
add_push!	stdlib/LibGit2/src/remote.jl	/^function add_push!(repo::GitRepo, rmt::GitRemote, push_spec::String)$/;"	f
add_return_attr	src/codegen.cpp	/^static void add_return_attr(T *f, Attribute::AttrKind Kind)$/;"	f	typeref:typename:void	file:
add_specialisations	stdlib/REPL/src/LineEdit.jl	/^function add_specialisations(dict, subdict, level)$/;"	f
add_sum	base/reduce.jl	/^add_sum(x, y) = x + y$/;"	f
add_sum	base/reduce.jl	/^add_sum(x::SmallSigned, y::SmallSigned) = Int(x) + Int(y)$/;"	f
add_sum	base/reduce.jl	/^add_sum(x::SmallUnsigned, y::SmallUnsigned) = UInt(x) + UInt(y)$/;"	f
add_tfunc	base/compiler/tfuncs.jl	/^function add_tfunc(f::Function, minarg::Int, maxarg::Int, @nospecialize(tfunc), cost::Int)$/;"	f
add_tfunc	base/compiler/tfuncs.jl	/^function add_tfunc(f::IntrinsicFunction, minarg::Int, maxarg::Int, @nospecialize(tfunc), cost::I/;"	f
add_with_overflow	base/checked.jl	/^add_with_overflow(x::Bool, y::Bool) = (x+y, false)$/;"	f
add_with_overflow	base/checked.jl	/^add_with_overflow(x::T, y::T) where {T<:SignedInt}   = checked_sadd_int(x, y)$/;"	f
add_with_overflow	base/checked.jl	/^add_with_overflow(x::T, y::T) where {T<:UnsignedInt} = checked_uadd_int(x, y)$/;"	f
add_with_overflow	base/checked.jl	/^function add_with_overflow end$/;"	f
add_with_overflow	base/checked.jl	/^function add_with_overflow(x::T, y::T) where T<:BrokenSignedInt$/;"	f
add_with_overflow	base/checked.jl	/^function add_with_overflow(x::T, y::T) where T<:BrokenUnsignedInt$/;"	f
add_with_overflow	base/compiler/compiler.jl	/^add_with_overflow(x::Bool, y::Bool) = (x+y, false)$/;"	f
add_with_overflow	base/compiler/compiler.jl	/^add_with_overflow(x::T, y::T) where {T<:SignedInt}   = checked_sadd_int(x, y)$/;"	f
add_with_overflow	base/compiler/compiler.jl	/^add_with_overflow(x::T, y::T) where {T<:UnsignedInt} = checked_uadd_int(x, y)$/;"	f
addbignum!	base/grisu/bignums.jl	/^function addbignum!(x::Bignum,other::Bignum)$/;"	f
addblob!	stdlib/LibGit2/src/blob.jl	/^function addblob!(repo::GitRepo, path::AbstractString)$/;"	f
addfile	stdlib/LibGit2/src/config.jl	/^function addfile(cfg::GitConfig, path::AbstractString,$/;"	f
additional_io_objs	stdlib/Distributed/src/cluster.jl	/^additional_io_objs=Dict()$/;"	v
addprocs	stdlib/Distributed/src/cluster.jl	/^function addprocs(manager::ClusterManager; kwargs...)$/;"	f
addprocs	stdlib/Distributed/src/managers.jl	/^addprocs(; kwargs...) = addprocs(Sys.CPU_THREADS; kwargs...)$/;"	f
addprocs	stdlib/Distributed/src/managers.jl	/^function addprocs(machines::AbstractVector; tunnel=false, sshflags=``, max_parallel=10, kwargs../;"	f
addprocs	stdlib/Distributed/src/managers.jl	/^function addprocs(np::Integer; restrict=true, kwargs...)$/;"	f
addprocs_locked	stdlib/Distributed/src/cluster.jl	/^function addprocs_locked(manager::ClusterManager; kwargs...)$/;"	f
addprocs_with_testenv	test/testenv.jl	/^    addprocs_with_testenv(X; kwargs...) = addprocs(X; exename=test_exename, exeflags=test_exefla/;"	f
addr	src/cgmemmgr.cpp	/^        uint8_t *addr;$/;"	m	struct:__anon06c686bc0111::RTDyldMemoryManagerJL::EHFrame	typeref:typename:uint8_t *	file:
addr	test/core.jl	/^    addr(@nospecialize x) = ccall(:jl_value_ptr, Ptr{Cvoid}, (Any,), x)$/;"	f
addr	test/gcext/gcext.c	/^    void *addr;$/;"	m	struct:treap_t	typeref:typename:void *	file:
addrescaped	src/llvm-alloc-opt.cpp	/^        bool addrescaped:1;$/;"	m	struct:__anon0a1571000111::Optimizer::AllocUseInfo	typeref:typename:bool:1	file:
addtolib	src/jitlayers.cpp	/^size_t addtolib = 0;$/;"	v	typeref:typename:size_t
adduint64!	base/grisu/bignums.jl	/^function adduint64!(x::Bignum,operand::UInt64)$/;"	f
adjoint	base/number.jl	/^adjoint(x::Number) = conj(x)$/;"	f
adjoint	stdlib/LinearAlgebra/src/adjtrans.jl	/^adjoint(A::AbstractVecOrMat) = Adjoint(A)$/;"	f
adjoint	stdlib/LinearAlgebra/src/adjtrans.jl	/^adjoint(A::Adjoint) = A.parent$/;"	f
adjoint	stdlib/LinearAlgebra/src/adjtrans.jl	/^adjoint(A::Transpose{<:Real}) = A.parent$/;"	f
adjoint	stdlib/LinearAlgebra/src/bidiag.jl	/^adjoint(B::Bidiagonal) = Adjoint(B)$/;"	f
adjoint	stdlib/LinearAlgebra/src/bidiag.jl	/^adjoint(B::Bidiagonal{<:Real}) = Bidiagonal(B.dv, B.ev, B.uplo == 'U' ? :L : :U)$/;"	f
adjoint	stdlib/LinearAlgebra/src/bitarray.jl	/^adjoint(B::Union{BitVector,BitMatrix}) = Adjoint(B)$/;"	f
adjoint	stdlib/LinearAlgebra/src/diagonal.jl	/^adjoint(D::Diagonal) = Diagonal(adjoint.(D.diag))$/;"	f
adjoint	stdlib/LinearAlgebra/src/diagonal.jl	/^adjoint(D::Diagonal{<:Number}) = conj(D)$/;"	f
adjoint	stdlib/LinearAlgebra/src/givens.jl	/^adjoint(G::Givens) = Givens(G.i1, G.i2, G.c', -G.s)$/;"	f
adjoint	stdlib/LinearAlgebra/src/givens.jl	/^adjoint(R::Rotation) = Adjoint(R)$/;"	f
adjoint	stdlib/LinearAlgebra/src/hessenberg.jl	/^adjoint(F::Hessenberg) = Adjoint(F)$/;"	f
adjoint	stdlib/LinearAlgebra/src/lq.jl	/^adjoint(A::LQ) = Adjoint(A)$/;"	f
adjoint	stdlib/LinearAlgebra/src/lu.jl	/^adjoint(F::LU) = Adjoint(F)$/;"	f
adjoint	stdlib/LinearAlgebra/src/symmetric.jl	/^adjoint(A::Hermitian) = A$/;"	f
adjoint	stdlib/LinearAlgebra/src/symmetric.jl	/^adjoint(A::Symmetric) = Adjoint(A)$/;"	f
adjoint	stdlib/LinearAlgebra/src/symmetric.jl	/^adjoint(A::Symmetric{<:Real}) = A$/;"	f
adjoint	stdlib/LinearAlgebra/src/transpose.jl	/^adjoint(a::AbstractArray) = error("adjoint not defined for $(typeof(a)). Consider using `permute/;"	f
adjoint	stdlib/LinearAlgebra/src/triangular.jl	/^adjoint(A::LowerTriangular) = Adjoint(A)$/;"	f
adjoint	stdlib/LinearAlgebra/src/triangular.jl	/^adjoint(A::UnitLowerTriangular) = Adjoint(A)$/;"	f
adjoint	stdlib/LinearAlgebra/src/triangular.jl	/^adjoint(A::UnitUpperTriangular) = Adjoint(A)$/;"	f
adjoint	stdlib/LinearAlgebra/src/triangular.jl	/^adjoint(A::UpperTriangular) = Adjoint(A)$/;"	f
adjoint	stdlib/LinearAlgebra/src/tridiag.jl	/^adjoint(S::SymTridiagonal) = Adjoint(S)$/;"	f
adjoint	stdlib/LinearAlgebra/src/tridiag.jl	/^adjoint(S::SymTridiagonal{<:Real}) = S$/;"	f
adjoint	stdlib/LinearAlgebra/src/tridiag.jl	/^adjoint(S::Tridiagonal) = Adjoint(S)$/;"	f
adjoint	stdlib/LinearAlgebra/src/tridiag.jl	/^adjoint(S::Tridiagonal{<:Real}) = Tridiagonal(S.du, S.d, S.dl)$/;"	f
adjoint	stdlib/LinearAlgebra/src/uniformscaling.jl	/^adjoint(J::UniformScaling) = UniformScaling(conj(J.λ))$/;"	f
adjoint	stdlib/LinearAlgebra/test/matmul.jl	/^adjoint(x::RootInt) = x$/;"	f
adjoint	stdlib/SparseArrays/src/sparsematrix.jl	/^adjoint(A::AbstractSparseMatrixCSC) = Adjoint(A)$/;"	f
adjoint	stdlib/SparseArrays/src/sparsevector.jl	/^adjoint(sv::SparseVector) = Adjoint(sv)$/;"	f
adjoint	stdlib/SuiteSparse/src/cholmod.jl	/^adjoint(FC::FactorComponent{Tv,:DUP}) where {Tv} = FactorComponent{Tv,:PtLD}(FC.F)$/;"	f
adjoint	stdlib/SuiteSparse/src/cholmod.jl	/^adjoint(FC::FactorComponent{Tv,:DU}) where {Tv} = FactorComponent{Tv,:LD}(FC.F)$/;"	f
adjoint	stdlib/SuiteSparse/src/cholmod.jl	/^adjoint(FC::FactorComponent{Tv,:D}) where {Tv} = FC$/;"	f
adjoint	stdlib/SuiteSparse/src/cholmod.jl	/^adjoint(FC::FactorComponent{Tv,:LD}) where {Tv} = FactorComponent{Tv,:DU}(FC.F)$/;"	f
adjoint	stdlib/SuiteSparse/src/cholmod.jl	/^adjoint(FC::FactorComponent{Tv,:L}) where {Tv} = FactorComponent{Tv,:U}(FC.F)$/;"	f
adjoint	stdlib/SuiteSparse/src/cholmod.jl	/^adjoint(FC::FactorComponent{Tv,:PtLD}) where {Tv} = FactorComponent{Tv,:DUP}(FC.F)$/;"	f
adjoint	stdlib/SuiteSparse/src/cholmod.jl	/^adjoint(FC::FactorComponent{Tv,:PtL}) where {Tv} = FactorComponent{Tv,:UP}(FC.F)$/;"	f
adjoint	stdlib/SuiteSparse/src/cholmod.jl	/^adjoint(FC::FactorComponent{Tv,:UP}) where {Tv} = FactorComponent{Tv,:PtL}(FC.F)$/;"	f
adjoint	stdlib/SuiteSparse/src/cholmod.jl	/^adjoint(FC::FactorComponent{Tv,:U}) where {Tv} = FactorComponent{Tv,:L}(FC.F)$/;"	f
adjoint!	stdlib/LinearAlgebra/src/transpose.jl	/^adjoint!(B::AbstractMatrix, A::AbstractMatrix) = transpose_f!(adjoint, B, A)$/;"	f
adjoint!	stdlib/LinearAlgebra/src/transpose.jl	/^function adjoint!(B::AbstractMatrix, A::AbstractVector)$/;"	f
adjoint!	stdlib/LinearAlgebra/src/transpose.jl	/^function adjoint!(B::AbstractVector, A::AbstractMatrix)$/;"	f
adjoint!	stdlib/LinearAlgebra/src/triangular.jl	/^adjoint!(A::LowerTriangular) = UpperTriangular(copytri!(A.data, 'L' , true, true))$/;"	f
adjoint!	stdlib/LinearAlgebra/src/triangular.jl	/^adjoint!(A::UnitLowerTriangular) = UnitUpperTriangular(copytri!(A.data, 'L' , true, true))$/;"	f
adjoint!	stdlib/LinearAlgebra/src/triangular.jl	/^adjoint!(A::UnitUpperTriangular) = UnitLowerTriangular(copytri!(A.data, 'U' , true, true))$/;"	f
adjoint!	stdlib/LinearAlgebra/src/triangular.jl	/^adjoint!(A::UpperTriangular) = LowerTriangular(copytri!(A.data, 'U' , true, true))$/;"	f
adjoint!	stdlib/SparseArrays/src/sparsematrix.jl	/^adjoint!(X::AbstractSparseMatrixCSC{Tv,Ti}, A::AbstractSparseMatrixCSC{Tv,Ti}) where {Tv,Ti} = f/;"	f
adjust	stdlib/Dates/src/adjusters.jl	/^function adjust(df::DateFunction, start, step, limit)$/;"	f
adjust	stdlib/Dates/src/adjusters.jl	/^function adjust(func::Function, start; step::Period=Day(1), limit::Int=10000)$/;"	f
adjusthour	stdlib/Dates/src/types.jl	/^function adjusthour(h::Int64, ampm::AMPM)$/;"	f
admonition	stdlib/Markdown/src/Common/block.jl	/^function admonition(stream::IO, block::MD)$/;"	f
afoldl	base/operators.jl	/^afoldl(op,a) = a$/;"	f
afoldl	base/operators.jl	/^afoldl(op,a,b) = op(a,b)$/;"	f
afoldl	base/operators.jl	/^afoldl(op,a,b,c...) = afoldl(op, op(a,b), c...)$/;"	f
afoldl	base/operators.jl	/^function afoldl(op,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,qs...)$/;"	f
after	src/gf.c	/^    int after;$/;"	m	struct:ambiguous_matches_env	typeref:typename:int	file:
afterusing	stdlib/REPL/src/REPLCompletions.jl	/^function afterusing(string::String, startpos::Int)$/;"	f
age	src/gc.h	/^        uintptr_t age : 2;$/;"	m	union:_bigval_t::__anoncf30557c0e0a	typeref:typename:uintptr_t:2
ages	src/gc.h	/^    uint8_t *ages;$/;"	m	struct:__anoncf30557c1108	typeref:typename:uint8_t *
aimg	stdlib/LinearAlgebra/test/bunchkaufman.jl	/^aimg  = randn(n,n)\/2$/;"	v
aimg	stdlib/LinearAlgebra/test/dense.jl	/^aimg  = randn(n,n)\/2$/;"	v
aimg	stdlib/LinearAlgebra/test/eigen.jl	/^aimg  = randn(n,n)\/2$/;"	v
aimg	stdlib/LinearAlgebra/test/lq.jl	/^aimg  = randn(n,n)\/2$/;"	v
aimg	stdlib/LinearAlgebra/test/lu.jl	/^aimg  = randn(n,n)\/2$/;"	v
aimg	stdlib/LinearAlgebra/test/qr.jl	/^aimg  = randn(n,n)\/2$/;"	v
aimg	stdlib/LinearAlgebra/test/schur.jl	/^aimg  = randn(n,n)\/2$/;"	v
aimg	stdlib/LinearAlgebra/test/svd.jl	/^aimg  = randn(n,n)\/2$/;"	v
aix_post_process_depfile	deps/srccache/patchelf-0.9/build-aux/depcomp	/^aix_post_process_depfile ()$/;"	f
alarmsym	src/flisp/flisp.h	/^    value_t nulsym, alarmsym, backspacesym, tabsym, linefeedsym, newlinesym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
aliasof	base/docs/bindings.jl	/^aliasof(b::Binding)     = defined(b) ? (a = aliasof(resolve(b), b); defined(a) ? a : b) : b$/;"	f
aliasof	base/docs/bindings.jl	/^aliasof(d::DataType, b) = Binding(d.name.module, d.name.name)$/;"	f
aliasof	base/docs/bindings.jl	/^aliasof(m::Module,   b) = Binding(m, nameof(m))$/;"	f
aliasof	base/docs/bindings.jl	/^aliasof(other,       b) = b$/;"	f
aliasof	base/docs/bindings.jl	/^aliasof(λ::Function, b) = (m = typeof(λ).name.mt; Binding(m.module, m.name))$/;"	f
aliasscope	base/experimental.jl	/^macro aliasscope(body)$/;"	f
aliasscope	src/codegen.cpp	/^    MDNode *aliasscope = NULL;$/;"	m	class:jl_codectx_t	typeref:typename:MDNode *	file:
aliasscope	test/compiler/codegen.jl	/^macro aliasscope(body)$/;"	f
aliasscope_sym	src/ast.c	/^jl_sym_t *aliasscope_sym; jl_sym_t *popaliasscope_sym;$/;"	v	typeref:typename:jl_sym_t *
align!	base/grisu/bignums.jl	/^function align!(x::Bignum,other::Bignum)$/;"	f
align_ptr	test/gcext/gcext.c	/^static inline void *align_ptr(void *p)$/;"	f	typeref:typename:void *	file:
alignment	base/arrayshow.jl	/^function alignment(io::IO, X::AbstractVecOrMat,$/;"	f
alignment	base/irrationals.jl	/^function alignment(io::IO, x::AbstractIrrational)$/;"	f
alignment	base/show.jl	/^alignment(io::IO, x::Any) = (0, length(sprint(show, x, context=io, sizehint=0)))$/;"	f
alignment	base/show.jl	/^alignment(io::IO, x::Integer) = (length(sprint(show, x, context=io, sizehint=0)), 0)$/;"	f
alignment	base/show.jl	/^alignment(io::IO, x::Number) = (length(sprint(show, x, context=io, sizehint=0)), 0)$/;"	f
alignment	base/show.jl	/^function alignment(io::IO, x::Complex)$/;"	f
alignment	base/show.jl	/^function alignment(io::IO, x::Pair)$/;"	f
alignment	base/show.jl	/^function alignment(io::IO, x::Rational)$/;"	f
alignment	base/show.jl	/^function alignment(io::IO, x::Real)$/;"	f
alignment	src/dump.c	/^                    uint32_t alignment;$/;"	m	struct:jl_deserialize_datatype::__anon570497e3020a::__anon570497e30308	typeref:typename:uint32_t	file:
alignment	src/julia.h	/^    uint32_t alignment : 9; \/\/ strictest alignment over all fields$/;"	m	struct:__anon055fe4270f08	typeref:typename:uint32_t:9
alignof	src/julia_internal.h	/^#      define alignof /;"	d
alignof	src/julia_internal.h	/^#      define alignof(/;"	d
all	Makefile	/^all: debug release$/;"	t
all	base/Makefile	/^all: $(addprefix $(BUILDDIR)\/,pcre_h.jl errno_h.jl build_h.jl.phony file_constants.jl uv_consta/;"	t
all	base/Makefile	/^all: symlink_system_libraries$/;"	t
all	base/bitarray.jl	/^function all(B::BitArray)$/;"	f
all	base/reduce.jl	/^all(f, itr) = _all(f, itr, :)$/;"	f
all	base/reduce.jl	/^all(itr) = all(identity, itr)$/;"	f
all	base/reducedim.jl	/^all(a::AbstractArray; dims=:)              = _all(a, dims)$/;"	f
all	base/reducedim.jl	/^all(f::Function, a::AbstractArray; dims=:) = _all(f, a, dims)$/;"	f
all	base/tuple.jl	/^all(x::Tuple{Bool, Bool, Bool}) = x[1]&x[2]&x[3]$/;"	f
all	base/tuple.jl	/^all(x::Tuple{Bool, Bool}) = x[1]&x[2]$/;"	f
all	base/tuple.jl	/^all(x::Tuple{Bool}) = x[1]$/;"	f
all	base/tuple.jl	/^all(x::Tuple{}) = true$/;"	f
all	contrib/mac/app/Makefile	/^all: clean $(DMG_NAME)$/;"	t
all	deps/srccache/patchelf-0.9/Makefile.in	/^all: all-recursive$/;"	t
all	deps/srccache/patchelf-0.9/src/Makefile.in	/^all: all-am$/;"	t
all	deps/srccache/patchelf-0.9/tests/Makefile.in	/^all: all-am$/;"	t
all	src/Makefile	/^all: debug release$/;"	t
all	sysimage.mk	/^all: sysimg-release sysimg-debug$/;"	t
all	ui/Makefile	/^all: release debug$/;"	t
all-am	deps/srccache/patchelf-0.9/Makefile.in	/^all-am: Makefile $(MANS) $(DATA)$/;"	t
all-am	deps/srccache/patchelf-0.9/src/Makefile.in	/^all-am: Makefile $(PROGRAMS)$/;"	t
all-am	deps/srccache/patchelf-0.9/tests/Makefile.in	/^all-am: Makefile$/;"	t
all-decl-vars	src/julia-syntax.scm	/^(define (all-decl-vars e)  ;; map decl-var over every level of an assignment LHS$/;"	f
all-local-names	src/julia-syntax.scm	/^(define (all-local-names scope)$/;"	f
all-methods-for	src/julia-syntax.scm	/^(define (all-methods-for ex body)$/;"	f
allPltMap	src/ccall.cpp	/^                                    CallingConv::ID>,GlobalVariable*>> allPltMap;$/;"	v	typeref:typename:DenseMap<AttributeList,std::map<std::tuple<GlobalVariable *,FunctionType *,CallingConv::ID>,GlobalVariable * >>	file:
alleltypes	stdlib/LinearAlgebra/test/addmul.jl	/^alleltypes = [floattypes; inttypes]$/;"	v
allflags	contrib/julia-config.jl	/^function allflags(doframework)$/;"	f
allindices!	base/bitarray.jl	/^function allindices!(I, B::BitArray)$/;"	f
allindices!	base/bitarray.jl	/^function allindices!(I, B::BitMatrix)$/;"	f
allindices!	base/bitarray.jl	/^function allindices!(I, B::BitVector)$/;"	f
alloc	src/cgmemmgr.cpp	/^    void *alloc(size_t size, size_t align)$/;"	f	class:__anon06c686bc0111::ROAllocator	typeref:typename:void *	file:
alloc	src/cgmemmgr.cpp	/^    void *alloc(size_t size, size_t align)$/;"	f	class:__anon06c686bc0111::RWAllocator	typeref:typename:void *	file:
alloc	src/cgmemmgr.cpp	/^    void *alloc(size_t size, size_t align)$/;"	f	struct:__anon06c686bc0111::Block	typeref:typename:void *	file:
alloc_bigval	test/gcext/gcext.c	/^void alloc_bigval(void *addr, size_t size)$/;"	f	typeref:typename:void
alloc_block	src/cgmemmgr.cpp	/^    SplitPtrBlock alloc_block(size_t size) override$/;"	f	class:__anon06c686bc0111::DualMapAllocator	typeref:typename:SplitPtrBlock	file:
alloc_block	src/cgmemmgr.cpp	/^    SplitPtrBlock alloc_block(size_t size) override$/;"	f	class:__anon06c686bc0111::SelfMemAllocator	typeref:typename:SplitPtrBlock	file:
alloc_buf_hook	base/stream.jl	/^function alloc_buf_hook(stream::LibuvStream, size::UInt)$/;"	f
alloc_buf_hook	stdlib/Sockets/src/Sockets.jl	/^alloc_buf_hook(sock::UDPSocket, size::UInt) = (Libc.malloc(size), size) # size is always 64k fro/;"	f
alloc_def_flag	src/codegen.cpp	/^static void alloc_def_flag(jl_codectx_t &ctx, jl_varinfo_t& vi)$/;"	f	typeref:typename:void	file:
alloc_obj	src/llvm-alloc-opt.cpp	/^    Function *alloc_obj;$/;"	m	struct:__anon0a1571000111::AllocOpt	typeref:typename:Function *	file:
alloc_obj_func	src/llvm-pass-helpers.h	/^    llvm::Function *alloc_obj_func;$/;"	m	struct:JuliaPassContext	typeref:typename:llvm::Function *
alloc_request	base/stream.jl	/^function alloc_request(buffer::IOBuffer, recommended_size::UInt)$/;"	f
alloc_shared_page	src/cgmemmgr.cpp	/^static void *alloc_shared_page(size_t size, size_t *id, bool exec)$/;"	f	namespace:__anon06c686bc0111	typeref:typename:void *	file:
alloc_sigstack	src/signals-unix.c	/^static void *alloc_sigstack(size_t size)$/;"	f	typeref:typename:void *	file:
alloc_treap	test/gcext/gcext.c	/^treap_t *alloc_treap(void)$/;"	f	typeref:typename:treap_t *
alloc_vector	src/flisp/flisp.c	/^value_t alloc_vector(fl_context_t *fl_ctx, size_t n, int init)$/;"	f	typeref:typename:value_t
alloc_words	src/flisp/flisp.c	/^static value_t *alloc_words(fl_context_t *fl_ctx, int n)$/;"	f	typeref:typename:value_t *	file:
allocateCodeSection	src/cgmemmgr.cpp	/^uint8_t *RTDyldMemoryManagerJL::allocateCodeSection(uintptr_t Size,$/;"	f	class:__anon06c686bc0111::RTDyldMemoryManagerJL	typeref:typename:uint8_t *
allocateDataSection	src/cgmemmgr.cpp	/^uint8_t *RTDyldMemoryManagerJL::allocateDataSection(uintptr_t Size,$/;"	f	class:__anon06c686bc0111::RTDyldMemoryManagerJL	typeref:typename:uint8_t *
allocate_dense	stdlib/SuiteSparse/src/cholmod.jl	/^function allocate_dense(m::Integer, n::Integer, d::Integer, ::Type{Tv}) where {Tv<:VTypes}$/;"	f
allocate_gc_frame	src/codegen.cpp	/^static void allocate_gc_frame(jl_codectx_t &ctx, BasicBlock *b0)$/;"	f	typeref:typename:JL_GCC_IGNORE_STOP void	file:
allocate_segv_handler	src/signals-mach.c	/^static void allocate_segv_handler()$/;"	f	typeref:typename:void	file:
allocate_segv_handler	src/signals-unix.c	/^static void allocate_segv_handler(void)$/;"	f	typeref:typename:void	file:
allocate_sparse	stdlib/SuiteSparse/src/cholmod.jl	/^function allocate_sparse(nrow::Integer, ncol::Integer, nzmax::Integer,$/;"	f
allocate_stack_mem	test/gcext/gcext.c	/^dynstack_t *allocate_stack_mem(size_t capacity)$/;"	f	typeref:typename:dynstack_t *
allocated	base/util.jl	/^macro allocated(ex)$/;"	f
allocatedinline	base/array.jl	/^allocatedinline(::Type{T}) where {T} = (@_pure_meta; ccall(:jl_array_store_unboxed, Cint, (Any,)/;"	f
allocations	src/cgmemmgr.cpp	/^    SmallVector<Allocation, 16> allocations;$/;"	m	class:__anon06c686bc0111::ROAllocator	typeref:typename:SmallVector<Allocation,16>	file:
allocd	src/gc.h	/^    int64_t     allocd;$/;"	m	struct:__anoncf30557c0308	typeref:typename:int64_t
allocd	src/julia_threads.h	/^    int64_t     allocd;$/;"	m	struct:__anonf8aecdb10508	typeref:typename:int64_t
allocmap	src/gc.h	/^    uint32_t allocmap[REGION0_PG_COUNT \/ 32];$/;"	m	struct:__anoncf30557c1208	typeref:typename:uint32_t[]
allocmap0	src/gc.h	/^    uint32_t allocmap0[REGION1_PG_COUNT \/ 32];$/;"	m	struct:__anoncf30557c1308	typeref:typename:uint32_t[]
allocmap1	src/gc.h	/^    uint32_t allocmap1[(REGION2_PG_COUNT + 31) \/ 32];$/;"	m	struct:__anoncf30557c1408	typeref:typename:uint32_t[]
allow_macroname	base/show.jl	/^allow_macroname(ex) = ex isa Symbol && first(string(ex)) == '@' ?$/;"	f
allowed	test/loading.jl	/^allowed(i::Int, j::Int) = KIND[i] ≤ KIND[j] && !(KIND[i] == KIND[j] == 1)$/;"	f
allsizes	test/bitarray.jl	/^allsizes = [((), BitArray{0}), ((v1,), BitVector),$/;"	v
allsmallp	src/flisp/print.c	/^static int allsmallp(fl_context_t *fl_ctx, value_t v)$/;"	f	typeref:typename:int	file:
allsubtypes!	test/numbers.jl	/^function allsubtypes!(m::Module, x::DataType, sts::Set)$/;"	f
allunique	base/set.jl	/^allunique(::Set) = true$/;"	f
allunique	base/set.jl	/^allunique(r::AbstractRange{T}) where {T} = (step(r) != zero(T)) || (length(r) <= 1)$/;"	f
allunique	base/set.jl	/^allunique(r::StepRange{T,S}) where {T,S} = (step(r) != zero(S)) || (length(r) <= 1)$/;"	f
allunique	base/set.jl	/^function allunique(C)$/;"	f
already_freed	test/clangsa/MissingRoots.c	/^jl_value_t *already_freed() {$/;"	f	typeref:typename:jl_value_t *
already_inserted	base/compiler/ssair/passes.jl	/^function already_inserted(compact::IncrementalCompact, old::OldSSAValue)$/;"	f
altkeys	stdlib/REPL/test/repl.jl	/^const altkeys = [Dict{Any,Any}("\\e[A" => (s,o...)->(LineEdit.edit_move_up(s) || LineEdit.histor/;"	v
always_copy_stacks	src/task.c	/^static int always_copy_stacks = 0;$/;"	v	typeref:typename:int	file:
always_copy_stacks	src/task.c	/^static int always_copy_stacks = 1;$/;"	v	typeref:typename:int	file:
always_full	src/gc.h	/^    int always_full;$/;"	m	struct:__anoncf30557c0208	typeref:typename:int
am	test/offsetarray.jl	/^am = OffsetArray{Int}(undef, (1:1, 7:9))  # for testing linear indexing$/;"	v
am	test/offsetarray.jl	/^am = map(identity, a)$/;"	v
am--fnord	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am--fnord $(TEST_LOGS) $(TEST_LOGS:.log=.trs): $(am__force_recheck)$/;"	t
am--force-recheck	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am--force-recheck:$/;"	t
am--refresh	deps/srccache/patchelf-0.9/Makefile.in	/^am--refresh: Makefile$/;"	t
am__CONFIG_DISTCLEAN_FILES	deps/srccache/patchelf-0.9/Makefile.in	/^am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\$/;"	m
am__DIST_COMMON	deps/srccache/patchelf-0.9/Makefile.in	/^am__DIST_COMMON = $(srcdir)\/Makefile.in $(srcdir)\/patchelf.spec.in \\$/;"	m
am__DIST_COMMON	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__DIST_COMMON = $(srcdir)\/Makefile.in \\$/;"	m
am__DIST_COMMON	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__DIST_COMMON = $(srcdir)\/Makefile.in \\$/;"	m
am__aclocal_m4_deps	deps/srccache/patchelf-0.9/Makefile.in	/^am__aclocal_m4_deps = $(top_srcdir)\/configure.ac$/;"	m
am__aclocal_m4_deps	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__aclocal_m4_deps = $(top_srcdir)\/configure.ac$/;"	m
am__aclocal_m4_deps	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__aclocal_m4_deps = $(top_srcdir)\/configure.ac$/;"	m
am__base_list	deps/srccache/patchelf-0.9/Makefile.in	/^am__base_list = \\$/;"	m
am__base_list	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__base_list = \\$/;"	m
am__can_run_installinfo	deps/srccache/patchelf-0.9/Makefile.in	/^am__can_run_installinfo = \\$/;"	m
am__can_run_installinfo	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__can_run_installinfo = \\$/;"	m
am__can_run_installinfo	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__can_run_installinfo = \\$/;"	m
am__cd	deps/srccache/patchelf-0.9/Makefile.in	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__check_pre	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__check_pre = \\$/;"	m
am__common_driver_flags	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__common_driver_flags = \\$/;"	m
am__configure_deps	deps/srccache/patchelf-0.9/Makefile.in	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__copy_in_global_log_rx	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__copy_in_global_log_rx = ^[ 	]*:copy-in-global-log:[ 	]*$/;"	m
am__create_global_log	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__create_global_log = $(AWK) ' \\$/;"	m
am__define_uniq_tagged_files	deps/srccache/patchelf-0.9/Makefile.in	/^am__define_uniq_tagged_files = \\$/;"	m
am__define_uniq_tagged_files	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__define_uniq_tagged_files = \\$/;"	m
am__define_uniq_tagged_files	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__define_uniq_tagged_files = \\$/;"	m
am__depfiles_maybe	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__depfiles_maybe = depfiles$/;"	m
am__depfiles_maybe	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__depfiles_maybe = depfiles$/;"	m
am__distuninstallcheck_listfiles	deps/srccache/patchelf-0.9/Makefile.in	/^am__distuninstallcheck_listfiles = $(distuninstallcheck_listfiles) \\$/;"	m
am__global_test_result_rx	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__global_test_result_rx = ^[ 	]*:global-test-result:[ 	]*$/;"	m
am__include	deps/srccache/patchelf-0.9/Makefile.in	/^am__include = @am__include@$/;"	m
am__include	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__include = @am__include@$/;"	m
am__include	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__include = @am__include@$/;"	m
am__install_max	deps/srccache/patchelf-0.9/Makefile.in	/^am__install_max = 40$/;"	m
am__install_max	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__install_max = 40$/;"	m
am__installdirs	deps/srccache/patchelf-0.9/Makefile.in	/^am__installdirs = "$(DESTDIR)$(man1dir)" "$(DESTDIR)$(docdir)"$/;"	m
am__installdirs	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__installdirs = "$(DESTDIR)$(bindir)"$/;"	m
am__is_gnu_make	deps/srccache/patchelf-0.9/Makefile.in	/^am__is_gnu_make = { \\$/;"	m
am__is_gnu_make	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__is_gnu_make = { \\$/;"	m
am__is_gnu_make	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__is_gnu_make = { \\$/;"	m
am__leading_dot	deps/srccache/patchelf-0.9/Makefile.in	/^am__leading_dot = @am__leading_dot@$/;"	m
am__leading_dot	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__leading_dot = @am__leading_dot@$/;"	m
am__leading_dot	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__leading_dot = @am__leading_dot@$/;"	m
am__list_recheck_tests	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__list_recheck_tests = $(AWK) '{ \\$/;"	m
am__make_dryrun	deps/srccache/patchelf-0.9/Makefile.in	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_dryrun	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_dryrun	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	deps/srccache/patchelf-0.9/Makefile.in	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_running_with_option	deps/srccache/patchelf-0.9/Makefile.in	/^am__make_running_with_option = \\$/;"	m
am__make_running_with_option	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__make_running_with_option = \\$/;"	m
am__make_running_with_option	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__make_running_with_option = \\$/;"	m
am__mv	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__mv = mv -f$/;"	m
am__mv	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__mv = mv -f$/;"	m
am__nobase_list	deps/srccache/patchelf-0.9/Makefile.in	/^am__nobase_list = $(am__nobase_strip_setup); \\$/;"	m
am__nobase_list	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__nobase_list = $(am__nobase_strip_setup); \\$/;"	m
am__nobase_strip	deps/srccache/patchelf-0.9/Makefile.in	/^am__nobase_strip = \\$/;"	m
am__nobase_strip	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__nobase_strip = \\$/;"	m
am__nobase_strip_setup	deps/srccache/patchelf-0.9/Makefile.in	/^am__nobase_strip_setup = \\$/;"	m
am__nobase_strip_setup	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__nobase_strip_setup = \\$/;"	m
am__post_remove_distdir	deps/srccache/patchelf-0.9/Makefile.in	/^am__post_remove_distdir = $(am__remove_distdir)$/;"	m
am__quote	deps/srccache/patchelf-0.9/Makefile.in	/^am__quote = @am__quote@$/;"	m
am__quote	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__quote = @am__quote@$/;"	m
am__quote	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__quote = @am__quote@$/;"	m
am__recheck_rx	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__recheck_rx = ^[ 	]*:recheck:[ 	]*$/;"	m
am__recursive_targets	deps/srccache/patchelf-0.9/Makefile.in	/^am__recursive_targets = \\$/;"	m
am__relativize	deps/srccache/patchelf-0.9/Makefile.in	/^am__relativize = \\$/;"	m
am__remove_distdir	deps/srccache/patchelf-0.9/Makefile.in	/^am__remove_distdir = \\$/;"	m
am__rst_title	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__rst_title = { sed 's\/.*\/   &   \/;h;s\/.\/=\/g;p;x;s\/ *$$\/\/;p;g' && echo; }$/;"	m
am__set_TESTS_bases	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__set_TESTS_bases = \\$/;"	m
am__set_b	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__set_b = \\$/;"	m
am__sh_e_setup	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__sh_e_setup = case $$- in *e*) set +e;; esac$/;"	m
am__strip_dir	deps/srccache/patchelf-0.9/Makefile.in	/^am__strip_dir = f=`echo $$p | sed -e 's|^.*\/||'`;$/;"	m
am__strip_dir	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__strip_dir = f=`echo $$p | sed -e 's|^.*\/||'`;$/;"	m
am__tagged_files	deps/srccache/patchelf-0.9/Makefile.in	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)$/;"	m
am__tagged_files	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)$/;"	m
am__tagged_files	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)$/;"	m
am__tar	deps/srccache/patchelf-0.9/Makefile.in	/^am__tar = @am__tar@$/;"	m
am__tar	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__tar = @am__tar@$/;"	m
am__tar	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__tar = @am__tar@$/;"	m
am__test_logs1	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__test_logs1 = $(TESTS:=.log)$/;"	m
am__test_logs2	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__test_logs2 = $(am__test_logs1:@EXEEXT@.log=.log)$/;"	m
am__tty_colors	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__tty_colors = { \\$/;"	m
am__tty_colors_dummy	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__tty_colors_dummy = \\$/;"	m
am__uninstall_files_from_dir	deps/srccache/patchelf-0.9/Makefile.in	/^am__uninstall_files_from_dir = { \\$/;"	m
am__uninstall_files_from_dir	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__uninstall_files_from_dir = { \\$/;"	m
am__uniquify_input	deps/srccache/patchelf-0.9/Makefile.in	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__uniquify_input	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__uniquify_input	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__untar	deps/srccache/patchelf-0.9/Makefile.in	/^am__untar = @am__untar@$/;"	m
am__untar	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__untar = @am__untar@$/;"	m
am__untar	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__untar = @am__untar@$/;"	m
am__v_CCLD_	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__v_CCLD_ = $(am__v_CCLD_@AM_DEFAULT_V@)$/;"	m
am__v_CCLD_	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__v_CCLD_ = $(am__v_CCLD_@AM_DEFAULT_V@)$/;"	m
am__v_CCLD_0	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__v_CCLD_0 = @echo "  CCLD    " $@;$/;"	m
am__v_CCLD_0	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__v_CCLD_0 = @echo "  CCLD    " $@;$/;"	m
am__v_CCLD_1	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__v_CCLD_1 = $/;"	m
am__v_CCLD_1	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__v_CCLD_1 = $/;"	m
am__v_CC_	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__v_CC_ = $(am__v_CC_@AM_DEFAULT_V@)$/;"	m
am__v_CC_	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__v_CC_ = $(am__v_CC_@AM_DEFAULT_V@)$/;"	m
am__v_CC_0	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__v_CC_0 = @echo "  CC      " $@;$/;"	m
am__v_CC_0	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__v_CC_0 = @echo "  CC      " $@;$/;"	m
am__v_CC_1	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__v_CC_1 = $/;"	m
am__v_CC_1	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__v_CC_1 = $/;"	m
am__v_CXXLD_	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__v_CXXLD_ = $(am__v_CXXLD_@AM_DEFAULT_V@)$/;"	m
am__v_CXXLD_0	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__v_CXXLD_0 = @echo "  CXXLD   " $@;$/;"	m
am__v_CXXLD_1	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__v_CXXLD_1 = $/;"	m
am__v_CXX_	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__v_CXX_ = $(am__v_CXX_@AM_DEFAULT_V@)$/;"	m
am__v_CXX_0	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__v_CXX_0 = @echo "  CXX     " $@;$/;"	m
am__v_CXX_1	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__v_CXX_1 = $/;"	m
am__v_GEN_	deps/srccache/patchelf-0.9/Makefile.in	/^am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)$/;"	m
am__v_GEN_	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)$/;"	m
am__v_GEN_	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)$/;"	m
am__v_GEN_0	deps/srccache/patchelf-0.9/Makefile.in	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_0	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_0	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_1	deps/srccache/patchelf-0.9/Makefile.in	/^am__v_GEN_1 = $/;"	m
am__v_GEN_1	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__v_GEN_1 = $/;"	m
am__v_GEN_1	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__v_GEN_1 = $/;"	m
am__v_P_	deps/srccache/patchelf-0.9/Makefile.in	/^am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)$/;"	m
am__v_P_	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)$/;"	m
am__v_P_	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)$/;"	m
am__v_P_0	deps/srccache/patchelf-0.9/Makefile.in	/^am__v_P_0 = false$/;"	m
am__v_P_0	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__v_P_0 = false$/;"	m
am__v_P_0	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__v_P_0 = false$/;"	m
am__v_P_1	deps/srccache/patchelf-0.9/Makefile.in	/^am__v_P_1 = :$/;"	m
am__v_P_1	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__v_P_1 = :$/;"	m
am__v_P_1	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__v_P_1 = :$/;"	m
am__v_at_	deps/srccache/patchelf-0.9/Makefile.in	/^am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)$/;"	m
am__v_at_	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)$/;"	m
am__v_at_	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)$/;"	m
am__v_at_0	deps/srccache/patchelf-0.9/Makefile.in	/^am__v_at_0 = @$/;"	m
am__v_at_0	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__v_at_0 = @$/;"	m
am__v_at_0	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__v_at_0 = @$/;"	m
am__v_at_1	deps/srccache/patchelf-0.9/Makefile.in	/^am__v_at_1 = $/;"	m
am__v_at_1	deps/srccache/patchelf-0.9/src/Makefile.in	/^am__v_at_1 = $/;"	m
am__v_at_1	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__v_at_1 = $/;"	m
am__v_lt_	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)$/;"	m
am__v_lt_0	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__v_lt_0 = --silent$/;"	m
am__v_lt_1	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__v_lt_1 = $/;"	m
am__vpath_adj	deps/srccache/patchelf-0.9/Makefile.in	/^am__vpath_adj = case $$p in \\$/;"	m
am__vpath_adj	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__vpath_adj = case $$p in \\$/;"	m
am__vpath_adj_setup	deps/srccache/patchelf-0.9/Makefile.in	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
am__vpath_adj_setup	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
am_libbar_scoped_so_OBJECTS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am_libbar_scoped_so_OBJECTS = bar.$(OBJEXT)$/;"	m
am_libbar_so_OBJECTS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am_libbar_so_OBJECTS = bar.$(OBJEXT)$/;"	m
am_libfoo_scoped_so_OBJECTS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am_libfoo_scoped_so_OBJECTS = foo.$(OBJEXT)$/;"	m
am_libfoo_so_OBJECTS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am_libfoo_so_OBJECTS = foo.$(OBJEXT)$/;"	m
am_libsimple_so_OBJECTS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am_libsimple_so_OBJECTS = simple.$(OBJEXT)$/;"	m
am_main_OBJECTS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am_main_OBJECTS = main.$(OBJEXT)$/;"	m
am_main_scoped_OBJECTS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am_main_scoped_OBJECTS = main.$(OBJEXT)$/;"	m
am_no_rpath_OBJECTS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am_no_rpath_OBJECTS = no_rpath-no-rpath.$(OBJEXT)$/;"	m
am_patchelf_OBJECTS	deps/srccache/patchelf-0.9/src/Makefile.in	/^am_patchelf_OBJECTS = patchelf.$(OBJEXT)$/;"	m
am_pm	src/support/strptime.c	/^	const char* am_pm[2];$/;"	m	struct:__anon732973510108	typeref:typename:const char * [2]	file:
am_simple_OBJECTS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^am_simple_OBJECTS = simple-simple.$(OBJEXT)$/;"	m
amb_1	test/ambiguous.jl	/^amb_1(::Int8, ::Int) = 1$/;"	f
amb_1	test/ambiguous.jl	/^amb_1(::Integer, x) = 2$/;"	f
amb_1	test/ambiguous.jl	/^amb_1(x, ::Int) = 3$/;"	f
amb_2	test/ambiguous.jl	/^amb_2(::Int, y) = 1$/;"	f
amb_2	test/ambiguous.jl	/^amb_2(::Int8, y) = 3$/;"	f
amb_2	test/ambiguous.jl	/^amb_2(x, ::Int) = 2$/;"	f
amb_3	test/ambiguous.jl	/^amb_3(::Int16, ::Int16) = 2$/;"	f
amb_3	test/ambiguous.jl	/^amb_3(::Int8, ::Int8) = 1$/;"	f
amb_3	test/ambiguous.jl	/^amb_3(::Integer, ::Integer) = 3$/;"	f
amb_3	test/ambiguous.jl	/^amb_3(::Integer, x) = 4$/;"	f
amb_3	test/ambiguous.jl	/^amb_3(x, ::Integer) = 5$/;"	f
amb_4	test/ambiguous.jl	/^amb_4(::Int16, ::Int16) = 2$/;"	f
amb_4	test/ambiguous.jl	/^amb_4(::Int8, ::Int8) = 1$/;"	f
amb_4	test/ambiguous.jl	/^amb_4(::Integer, x) = 4$/;"	f
amb_4	test/ambiguous.jl	/^amb_4(x, ::Integer) = 5$/;"	f
ambig	src/julia.h	/^    jl_value_t *ambig;$/;"	m	struct:_jl_method_t	typeref:typename:jl_value_t *
ambig	test/ambiguous.jl	/^ambig(x, y) = 1$/;"	f
ambig	test/ambiguous.jl	/^ambig(x, y::Int) = 3$/;"	f
ambig	test/ambiguous.jl	/^ambig(x, y::Integer) = 3$/;"	f
ambig	test/ambiguous.jl	/^ambig(x::Int, y) = 2$/;"	f
ambig	test/ambiguous.jl	/^ambig(x::Int, y::Int) = 4$/;"	f
ambig	test/ambiguous.jl	/^ambig(x::Int8, y) = 1$/;"	f
ambig	test/ambiguous.jl	/^ambig(x::Integer, y) = 2$/;"	f
ambig	test/ambiguous.jl	/^ambig(x::Number, y) = 4$/;"	f
ambig	test/ambiguous.jl	/^ambig(x::Number, y) = 5$/;"	f
ambig	test/ambiguous.jl	/^ambig(x::Union{Char, Int16}) = 's'$/;"	f
ambig	test/ambiguous.jl	/^ambig(x::Union{Char, Int8}) = 'r'$/;"	f
ambig_checkline	test/ambiguous.jl	/^    ambig_checkline(str) = startswith(str, "  ambig(x, y::Integer) in $curmod_str at") ||$/;"	f
ambig_with_bounds	test/ambiguous.jl	/^ambig_with_bounds(::Int, x, ::T) where {T<:Integer,S} = 1$/;"	f
ambig_with_bounds	test/ambiguous.jl	/^ambig_with_bounds(x, ::Int, ::T) where {T<:Integer,S} = 0$/;"	f
ambigconvert;	test/misc.jl	/^struct ambigconvert; end # inject a problematic `convert` method to ensure it still works$/;"	f
ambigs	test/ambiguous.jl	/^ambigs = Any[[], [3], [2, 5], [], [3]]$/;"	v
ambiguous_matches_env	src/gf.c	/^struct ambiguous_matches_env {$/;"	s	file:
ambs	test/ambiguous.jl	/^ambs = detect_ambiguities(Ambig1)$/;"	v
ambs	test/ambiguous.jl	/^ambs = detect_ambiguities(Ambig2)$/;"	v
ambs	test/ambiguous.jl	/^ambs = detect_ambiguities(Ambig3)$/;"	v
ambs	test/ambiguous.jl	/^ambs = detect_ambiguities(Ambig4)$/;"	v
ambs	test/ambiguous.jl	/^ambs = detect_ambiguities(Ambig5)$/;"	v
amd_athlon_64	src/processor_x86.cpp	/^    amd_athlon_64,$/;"	e	enum:X86::CPU	file:
amd_athlon_64_sse3	src/processor_x86.cpp	/^    amd_athlon_64_sse3,$/;"	e	enum:X86::CPU	file:
amd_athlon_fx	src/processor_x86.cpp	/^    amd_athlon_fx,$/;"	e	enum:X86::CPU	file:
amd_barcelona	src/processor_x86.cpp	/^    amd_barcelona,$/;"	e	enum:X86::CPU	file:
amd_bdver1	src/processor_x86.cpp	/^    amd_bdver1,$/;"	e	enum:X86::CPU	file:
amd_bdver2	src/processor_x86.cpp	/^    amd_bdver2,$/;"	e	enum:X86::CPU	file:
amd_bdver3	src/processor_x86.cpp	/^    amd_bdver3,$/;"	e	enum:X86::CPU	file:
amd_bdver4	src/processor_x86.cpp	/^    amd_bdver4,$/;"	e	enum:X86::CPU	file:
amd_btver1	src/processor_x86.cpp	/^    amd_btver1,$/;"	e	enum:X86::CPU	file:
amd_btver2	src/processor_x86.cpp	/^    amd_btver2,$/;"	e	enum:X86::CPU	file:
amd_fam10h	src/processor_x86.cpp	/^    amd_fam10h,$/;"	e	enum:X86::CPU	file:
amd_k8	src/processor_x86.cpp	/^    amd_k8,$/;"	e	enum:X86::CPU	file:
amd_k8_sse3	src/processor_x86.cpp	/^    amd_k8_sse3,$/;"	e	enum:X86::CPU	file:
amd_opteron	src/processor_x86.cpp	/^    amd_opteron,$/;"	e	enum:X86::CPU	file:
amd_opteron_sse3	src/processor_x86.cpp	/^    amd_opteron_sse3,$/;"	e	enum:X86::CPU	file:
amd_znver1	src/processor_x86.cpp	/^    amd_znver1,$/;"	e	enum:X86::CPU	file:
amdfam10	src/processor_x86.cpp	/^constexpr auto amdfam10 = k8_sse3 | get_feature_masks(sse4a, lzcnt, popcnt, sahf);$/;"	v	namespace:X86::Feature	typeref:typename:auto
analyze	stdlib/SuiteSparse/src/cholmod.jl	/^function analyze(A::Sparse{Tv}, cmmn::Vector{UInt8}) where Tv<:VTypes$/;"	f
analyze-type-sig	src/julia-syntax.scm	/^(define (analyze-type-sig ex)$/;"	f
analyze-typevar	src/julia-syntax.scm	/^(define (analyze-typevar e)$/;"	f
analyze-variables!	src/julia-syntax.scm	/^(define (analyze-variables! e) (analyze-vars e '() '() '()) e)$/;"	f
analyze-vars	src/julia-syntax.scm	/^(define (analyze-vars e env captvars sp)$/;"	f
analyze-vars-lambda	src/julia-syntax.scm	/^(define (analyze-vars-lambda e env captvars sp new-sp (methsig #f))$/;"	f
analyze_method!	base/compiler/ssair/inlining.jl	/^function analyze_method!(idx::Int, sig::Signature, @nospecialize(metharg), methsp::SimpleVector,$/;"	f
analyze_p	stdlib/SuiteSparse/src/cholmod.jl	/^function analyze_p(A::Sparse{Tv}, perm::Vector{SuiteSparse_long},$/;"	f
analyzegc-deps-check	src/Makefile	/^analyzegc-deps-check: $(BUILDDIR)\/julia_version.h $(BUILDDIR)\/julia_flisp.boot.inc$/;"	t
and	stdlib/InteractiveUtils/src/codeview.jl	/^function and type signature to `io`.$/;"	f
and_iteratoreltype	base/iterators.jl	/^and_iteratoreltype(a, b) = EltypeUnknown()$/;"	f
and_iteratoreltype	base/iterators.jl	/^and_iteratoreltype(iel::T, ::T) where {T} = iel$/;"	f
and_iteratorsize	base/iterators.jl	/^and_iteratorsize(::HasLength, ::HasShape) = HasLength()$/;"	f
and_iteratorsize	base/iterators.jl	/^and_iteratorsize(::HasShape, ::HasLength) = HasLength()$/;"	f
and_iteratorsize	base/iterators.jl	/^and_iteratorsize(a, b) = SizeUnknown()$/;"	f
and_iteratorsize	base/iterators.jl	/^and_iteratorsize(isz::T, ::T) where {T} = isz$/;"	f
and_op	src/runtime_intrinsics.c	/^#define and_op(/;"	d	file:
angle	base/complex.jl	/^angle(z::Complex) = atan(imag(z), real(z))$/;"	f
angle	base/number.jl	/^angle(z::Real) = atan(zero(z), z)$/;"	f
angle_fast	base/fastmath.jl	/^    angle_fast(x::ComplexTypes) = atan(imag(x), real(x))$/;"	f
annotate_slot_load!	base/compiler/typeinfer.jl	/^function annotate_slot_load!(e::Expr, vtypes::VarTable, sv::InferenceState, undefs::Array{Bool,1/;"	f
anon_hdl	src/cgmemmgr.cpp	/^static intptr_t anon_hdl = -1;$/;"	v	namespace:__anon06c686bc0111	typeref:typename:intptr_t	file:
anopc	test/precompile.jl	/^          anopc(::Any, ::Any) = 2$/;"	f
anopc	test/precompile.jl	/^          anopc(::Int, ::Int) = 1$/;"	f
ansi_length	stdlib/Markdown/src/render/terminal/formatting.jl	/^function ansi_length(s)$/;"	f
answer_color	base/client.jl	/^answer_color() = text_colors[repl_color("JULIA_ANSWER_COLOR", default_color_answer)]$/;"	f
answer_color	stdlib/REPL/src/REPL.jl	/^answer_color(::AbstractREPL) = ""$/;"	f
answer_color	stdlib/REPL/src/REPL.jl	/^answer_color(r::LineEditREPL) = r.envcolors ? Base.answer_color() : r.answer_color$/;"	f
answer_color	stdlib/REPL/src/REPL.jl	/^answer_color(r::StreamREPL) = r.answer_color$/;"	f
answers	stdlib/SHA/test/runtests.jl	/^answers = Dict($/;"	v
any	base/bitarray.jl	/^function any(B::BitArray)$/;"	f
any	base/reduce.jl	/^any(f, itr) = _any(f, itr, :)$/;"	f
any	base/reduce.jl	/^any(itr) = any(identity, itr)$/;"	f
any	base/reducedim.jl	/^any(a::AbstractArray; dims=:)              = _any(a, dims)$/;"	f
any	base/reducedim.jl	/^any(f::Function, a::AbstractArray; dims=:) = _any(f, a, dims)$/;"	f
any	base/tuple.jl	/^any(x::Tuple{Bool, Bool, Bool}) = x[1]|x[2]|x[3]$/;"	f
any	base/tuple.jl	/^any(x::Tuple{Bool, Bool}) = x[1]|x[2]$/;"	f
any	base/tuple.jl	/^any(x::Tuple{Bool}) = x[1]$/;"	f
any	base/tuple.jl	/^any(x::Tuple{}) = false$/;"	f
any	src/julia.h	/^    jl_typemap_t *any; \/\/ type at offs is Any$/;"	m	struct:_jl_typemap_level_t	typeref:typename:jl_typemap_t *
any_gc_flag	stdlib/Distributed/src/remotecall.jl	/^const any_gc_flag = Condition()$/;"	v
anymap	base/compiler/utilities.jl	/^anymap(f::Function, a::Array{Any,1}) = Any[ f(a[i]) for i in 1:length(a) ]$/;"	f
apc	test/precompile.jl	/^          apc(::Any, ::Any) = 2$/;"	f
apc	test/precompile.jl	/^          apc(::Int, ::Int) = 1$/;"	f
apm_xgene1	src/processor_arm.cpp	/^    apm_xgene1,$/;"	e	enum:ARM::CPU	file:
apm_xgene1	src/processor_arm.cpp	/^constexpr auto apm_xgene1 = armv8a;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
apm_xgene1	src/processor_arm.cpp	/^constexpr auto apm_xgene1 = generic;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
apm_xgene2	src/processor_arm.cpp	/^    apm_xgene2,$/;"	e	enum:ARM::CPU	file:
apm_xgene2	src/processor_arm.cpp	/^constexpr auto apm_xgene2 = armv8a; \/\/ TODO?$/;"	v	namespace:ARM::Feature	typeref:typename:auto
apm_xgene2	src/processor_arm.cpp	/^constexpr auto apm_xgene2 = generic; \/\/ TODO?$/;"	v	namespace:ARM::Feature	typeref:typename:auto
apm_xgene3	src/processor_arm.cpp	/^    apm_xgene3,$/;"	e	enum:ARM::CPU	file:
apm_xgene3	src/processor_arm.cpp	/^constexpr auto apm_xgene3 = armv8a; \/\/ TODO?$/;"	v	namespace:ARM::Feature	typeref:typename:auto
apm_xgene3	src/processor_arm.cpp	/^constexpr auto apm_xgene3 = generic; \/\/ TODO?$/;"	v	namespace:ARM::Feature	typeref:typename:auto
app	Makefile	/^app:$/;"	t
append!	base/array.jl	/^append!(a::AbstractVector, iter) = _append!(a, IteratorSize(iter), iter)$/;"	f
append!	base/array.jl	/^function append!(a::Vector, items::AbstractVector)$/;"	f
append!	base/bitarray.jl	/^append!(A::Vector{Bool}, items::BitVector) = append!(A, Array(items))$/;"	f
append!	base/bitarray.jl	/^append!(B::BitVector, items) = append!(B, BitArray(items))$/;"	f
append!	base/bitarray.jl	/^function append!(B::BitVector, items::BitVector)$/;"	f
append_arg	base/shell.jl	/^    function append_arg()$/;"	f
append_c_digits	base/ryu/utils.jl	/^@inline function append_c_digits(count, digits, buf, pos)$/;"	f
append_d_digits	base/ryu/utils.jl	/^@inline function append_d_digits(olength, digits, buf, pos, decchar)$/;"	f
append_default_depot_path!	base/initdefs.jl	/^function append_default_depot_path!(DEPOT_PATH)$/;"	f
append_ext_features	src/processor.cpp	/^static inline void append_ext_features(std::string &features, const std::string &ext_features)$/;"	f	namespace:__anon839834ed0111	typeref:typename:void	file:
append_ext_features	src/processor.cpp	/^static inline void append_ext_features(std::vector<std::string> &features,$/;"	f	namespace:__anon839834ed0111	typeref:typename:void	file:
append_n_digits	base/ryu/utils.jl	/^@inline function append_n_digits(olength, digits, buf, pos)$/;"	f
append_nine_digits	base/ryu/utils.jl	/^@inline function append_nine_digits(digits, buf, pos)$/;"	f
append_node!	base/compiler/ssair/ir.jl	/^function append_node!(ir, @nospecialize(typ), @nospecialize(node), line)$/;"	f
append_to_file	test/iostream.jl	/^        function append_to_file(str)$/;"	f
appendmacro!	stdlib/REPL/src/REPLCompletions.jl	/^function appendmacro!(syms, macros, needle, endchar)$/;"	f
appexport	contrib/mac/frameworkapp/Makefile	/^appexport: $(XCEXPORT)\/Julia.app\/Contents\/MacOS\/Julia$/;"	t
apple::Fruit	base/Enums.jl	/^apple::Fruit = 1$/;"	v
apple_cyclone	src/processor_arm.cpp	/^    apple_cyclone,$/;"	e	enum:ARM::CPU	file:
apple_cyclone	src/processor_arm.cpp	/^constexpr auto apple_cyclone = armv8a_crc_crypto;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
apple_hurricane	src/processor_arm.cpp	/^    apple_hurricane,$/;"	e	enum:ARM::CPU	file:
apple_hurricane	src/processor_arm.cpp	/^constexpr auto apple_hurricane = armv8a_crc_crypto;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
apple_swift	src/processor_arm.cpp	/^    apple_swift,$/;"	e	enum:ARM::CPU	file:
apple_swift	src/processor_arm.cpp	/^constexpr auto apple_swift = armv7a | get_feature_masks(d32, vfp3, vfp4, neon, hwdiv, hwdiv_arm)/;"	v	namespace:ARM::Feature	typeref:typename:auto
apple_twister	src/processor_arm.cpp	/^    apple_twister,$/;"	e	enum:ARM::CPU	file:
apple_twister	src/processor_arm.cpp	/^constexpr auto apple_twister = armv8a_crc_crypto;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
apple_typhoon	src/processor_arm.cpp	/^    apple_typhoon,$/;"	e	enum:ARM::CPU	file:
apple_typhoon	src/processor_arm.cpp	/^constexpr auto apple_typhoon = armv8a_crc_crypto;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
applicationDidFinishLaunching:	contrib/mac/frameworkapp/JuliaLauncher/AppDelegate.m	/^- (void)applicationDidFinishLaunching:(NSNotification *)aNotification {$/;"	m	implementation:AppDelegate
applicationShouldHandleReopen:hasVisibleWindows:	contrib/mac/frameworkapp/JuliaLauncher/AppDelegate.m	/^                    hasVisibleWindows:(BOOL)flag {$/;"	m	implementation:AppDelegate
apply-patterns	src/match.scm	/^(define (apply-patterns plist expr)$/;"	f
apply26826	test/compiler/inference.jl	/^apply26826(f, args...) = f(args...)$/;"	f
apply_accum	src/flisp/flisp.h	/^    int64_t apply_accum;$/;"	m	struct:_fl_context_t	typeref:typename:int64_t
apply_c	src/flisp/flisp.h	/^    cons_t *apply_c;$/;"	m	struct:_fl_context_t	typeref:typename:cons_t *
apply_e	src/flisp/flisp.h	/^    value_t apply_func, apply_v, apply_e;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
apply_func	src/flisp/flisp.h	/^    value_t apply_func, apply_v, apply_e;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
apply_pv	src/flisp/flisp.h	/^    value_t *apply_pv;$/;"	m	struct:_fl_context_t	typeref:typename:value_t *
apply_type_nothrow	base/compiler/tfuncs.jl	/^function apply_type_nothrow(argtypes::Array{Any, 1}, @nospecialize(rt))$/;"	f
apply_type_tfunc	base/compiler/tfuncs.jl	/^function apply_type_tfunc(@nospecialize(headtypetype), @nospecialize args...)$/;"	f
apply_v	src/flisp/flisp.h	/^    value_t apply_func, apply_v, apply_e;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
approve	stdlib/LibGit2/src/gitcredential.jl	/^approve(cfg::GitConfig, cred::AbstractCredential, url::AbstractString) = nothing$/;"	f
approve	stdlib/LibGit2/src/gitcredential.jl	/^approve(helper::GitCredentialHelper, cred::GitCredential) = run(helper, "store", cred)$/;"	f
approve	stdlib/LibGit2/src/gitcredential.jl	/^function approve(cfg::GitConfig, cred::UserPasswordCredential, url::AbstractString)$/;"	f
approve	stdlib/LibGit2/src/types.jl	/^function approve(cache::CachedCredentials, cred::AbstractCredential, url::AbstractString)$/;"	f
approve	stdlib/LibGit2/src/types.jl	/^function approve(p::CredentialPayload; shred::Bool=true)$/;"	f
approx_full	stdlib/Test/src/Test.jl	/^    approx_full(x) = full(x)$/;"	f
approx_full	stdlib/Test/src/Test.jl	/^    approx_full(x::AbstractArray) = x$/;"	f
approx_full	stdlib/Test/src/Test.jl	/^    approx_full(x::Number) = x$/;"	f
approx_iter_type	base/iterators.jl	/^    approx_iter_type(a::Type) = Any$/;"	f
approx_iter_type	base/iterators.jl	/^    approx_iter_type(itrT::Type) = _approx_iter_type(itrT, Base._return_type(iterate, Tuple{itrT/;"	f
apropos	base/docs/Docs.jl	/^function apropos end$/;"	f
apropos	stdlib/REPL/src/docview.jl	/^apropos(io::IO, string) = apropos(io, Regex("\\\\Q$string", "i"))$/;"	f
apropos	stdlib/REPL/src/docview.jl	/^apropos(string) = apropos(stdout, string)$/;"	f
apropos	stdlib/REPL/src/docview.jl	/^function apropos(io::IO, needle::Regex)$/;"	f
apsym	src/flisp/flisp.h	/^    value_t iostreamsym, rdsym, wrsym, apsym, crsym, truncsym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
arc_p	base/special/trig.jl	/^arc_p(t::Float32) =$/;"	f
arc_p	base/special/trig.jl	/^arc_p(t::Float64) =$/;"	f
arc_q	base/special/trig.jl	/^arc_q(t::Float32) = @horner(t, 1.0f0, -7.0662963390f-01)$/;"	f
arc_q	base/special/trig.jl	/^arc_q(z::Float64) =$/;"	f
arc_tRt	base/special/trig.jl	/^@inline arc_tRt(t) = arc_p(t)\/arc_q(t)$/;"	f
arch	contrib/normalize_triplet.py	/^arch = get_field(m, arch_mapping)$/;"	v
arch_mapping	contrib/normalize_triplet.py	/^arch_mapping = {$/;"	v
areal	stdlib/LinearAlgebra/test/bunchkaufman.jl	/^areal = randn(n,n)\/2$/;"	v
areal	stdlib/LinearAlgebra/test/dense.jl	/^areal = randn(n,n)\/2$/;"	v
areal	stdlib/LinearAlgebra/test/eigen.jl	/^areal = randn(n,n)\/2$/;"	v
areal	stdlib/LinearAlgebra/test/lq.jl	/^areal = randn(n,n)\/2$/;"	v
areal	stdlib/LinearAlgebra/test/lu.jl	/^areal = randn(n,n)\/2$/;"	v
areal	stdlib/LinearAlgebra/test/qr.jl	/^areal = randn(n,n)\/2$/;"	v
areal	stdlib/LinearAlgebra/test/schur.jl	/^areal = randn(n,n)\/2$/;"	v
areal	stdlib/LinearAlgebra/test/svd.jl	/^areal = randn(n,n)\/2$/;"	v
areequal	stdlib/SparseArrays/test/sparsevector.jl	/^    areequal(a, b, c) = isequal(a, b) && isequal(b, c)$/;"	f
arg	src/threading.h	/^    void *arg;$/;"	m	struct:_jl_threadarg_t	typeref:typename:void *
arg-counts	src/flisp/compiler.lsp	/^(define arg-counts$/;"	f
arg-name	src/ast.scm	/^(define (arg-name v)$/;"	f
arg-type	src/ast.scm	/^(define (arg-type v)$/;"	f
arg1	src/julia.h	/^    struct jl_ordereddict_t arg1;$/;"	m	struct:_jl_typemap_level_t	typeref:struct:jl_ordereddict_t
argArray	src/codegen.cpp	/^    Value *argArray = NULL;$/;"	m	class:jl_codectx_t	typeref:typename:Value *	file:
argCount	src/codegen.cpp	/^    Value *argCount = NULL;$/;"	m	class:jl_codectx_t	typeref:typename:Value *	file:
arg_array	test/clangsa/MissingRoots.c	/^void arg_array(jl_value_t **args) {$/;"	f	typeref:typename:void
arg_decl_parts	base/methodshow.jl	/^function arg_decl_parts(m::Method)$/;"	f
arg_gen	base/cmd.jl	/^arg_gen() = String[]$/;"	f
arg_gen	base/cmd.jl	/^arg_gen(x::AbstractString) = String[cstr(x)]$/;"	f
arg_gen	base/cmd.jl	/^function arg_gen(cmd::Cmd)$/;"	f
arg_gen	base/cmd.jl	/^function arg_gen(head)$/;"	f
arg_gen	base/cmd.jl	/^function arg_gen(head, tail...)$/;"	f
arg_target_data	src/processor_arm.cpp	/^static TargetData<feature_sz> arg_target_data(const TargetData<feature_sz> &arg, bool require_ho/;"	f	namespace:ARM	typeref:typename:TargetData<feature_sz>	file:
arg_target_data	src/processor_fallback.cpp	/^static TargetData<1> arg_target_data(const TargetData<1> &arg, bool require_host)$/;"	f	namespace:Fallback	typeref:typename:TargetData<1>	file:
arg_target_data	src/processor_x86.cpp	/^static TargetData<feature_sz> arg_target_data(const TargetData<feature_sz> &arg, bool require_ho/;"	f	namespace:X86	typeref:typename:TargetData<feature_sz>	file:
arg_type_tuple	src/gf.c	/^jl_tupletype_t *arg_type_tuple(jl_value_t *arg1, jl_value_t **args, size_t nargs)$/;"	f	typeref:typename:jl_tupletype_t *
argcount	src/flisp/flisp.h	/^static inline void argcount(fl_context_t *fl_ctx, const char *fname, uint32_t nargs, uint32_t c)$/;"	f	typeref:typename:void
argerror	stdlib/Dates/src/types.jl	/^argerror() = nothing$/;"	f
argerror	stdlib/Dates/src/types.jl	/^argerror(msg::String) = ArgumentError(msg)$/;"	f
argextype	base/compiler/utilities.jl	/^argextype(@nospecialize(x), state) = argextype(x, state.src, state.sptypes, state.slottypes)$/;"	f
argextype	base/compiler/utilities.jl	/^function argextype(@nospecialize(x), src, sptypes::Vector{Any}, slottypes::Vector{Any} = empty_s/;"	f
arglist-to-tuple	src/julia-parser.scm	/^(define (arglist-to-tuple leading-semi? comma? args . first)$/;"	f
arglist-unshift	src/julia-syntax.scm	/^(define (arglist-unshift sig item)$/;"	f
argmax	base/array.jl	/^argmax(a) = findmax(a)[2]$/;"	f
argmax	base/reducedim.jl	/^argmax(A::AbstractArray; dims=:) = findmax(A; dims=dims)[2]$/;"	f
argmax	stdlib/SparseArrays/src/sparsematrix.jl	/^argmax(A::AbstractSparseMatrixCSC) = findmax(A)[2]$/;"	f
argmin	base/array.jl	/^argmin(a) = findmin(a)[2]$/;"	f
argmin	base/reducedim.jl	/^argmin(A::AbstractArray; dims=:) = findmin(A; dims=dims)[2]$/;"	f
argmin	stdlib/SparseArrays/src/sparsematrix.jl	/^argmin(A::AbstractSparseMatrixCSC) = findmin(A)[2]$/;"	f
args	src/gf.c	/^            jl_value_t *args;$/;"	m	struct:jl_method_error_bare::jl_method_error	typeref:typename:jl_value_t *	file:
args	src/interpreter.c	/^    jl_value_t **args;$/;"	m	struct:jl_interpret_call_args	typeref:typename:jl_value_t **	file:
args	src/julia.h	/^    jl_array_t *args;$/;"	m	struct:__anon055fe4271408	typeref:typename:jl_array_t *
args	src/simplevector.c	/^    va_list args;$/;"	v	typeref:typename:va_list
args8d003	test/core.jl	/^args8d003 = (:x, :y)$/;"	v
args_morespecific	test/specificity.jl	/^function args_morespecific(a, b)$/;"	f
args_morespecific_fix1	src/subtype.c	/^static int args_morespecific_fix1(jl_value_t *a, jl_value_t *b, int swap, jl_typeenv_t *env)$/;"	f	typeref:typename:int	file:
argtail	base/essentials.jl	/^argtail(x, rest...) = rest$/;"	f
argtype	base/broadcast.jl	/^argtype(::Type{Broadcasted{Style,Axes,F,Args}}) where {Style,Axes,F,Args} = Args$/;"	f
argtype	base/broadcast.jl	/^argtype(bc::Broadcasted) = argtype(typeof(bc))$/;"	f
argtype	base/docs/Docs.jl	/^argtype(@nospecialize other) = :Any$/;"	f
argtype	base/docs/Docs.jl	/^function argtype(expr::Expr)$/;"	f
argtype_decl	base/methodshow.jl	/^function argtype_decl(env, n, sig::DataType, i::Int, nargs, isva::Bool) # -> (argname, argtype)$/;"	f
argtypes_to_type	base/compiler/typeutils.jl	/^argtypes_to_type(argtypes::Array{Any,1}) = Tuple{anymap(widenconst, argtypes)...}$/;"	f
argument_datatype	base/reflection.jl	/^argument_datatype(@nospecialize t) = ccall(:jl_argument_datatype, Any, (Any,), t)$/;"	f
argument_propagation	test/clangsa/MissingRoots.c	/^void argument_propagation(jl_value_t *a) {$/;"	f	typeref:typename:void
argv_list	src/flisp/flmain.c	/^static value_t argv_list(fl_context_t *fl_ctx, int argc, char *argv[])$/;"	f	typeref:typename:value_t	file:
arithmetictypes	base/atomics.jl	/^const arithmetictypes = (inttypes..., floattypes...)$/;"	v
arithtype9232	test/compiler/inference.jl	/^arithtype9232(::Type{T},::Type{T}) where {T<:Real} = arithtype9232(T)$/;"	f
arm_1136jf_s	src/processor_arm.cpp	/^    arm_1136jf_s,$/;"	e	enum:ARM::CPU	file:
arm_1156t2f_s	src/processor_arm.cpp	/^    arm_1156t2f_s,$/;"	e	enum:ARM::CPU	file:
arm_1176jzf_s	src/processor_arm.cpp	/^    arm_1176jzf_s,$/;"	e	enum:ARM::CPU	file:
arm_cortex_a12	src/processor_arm.cpp	/^    arm_cortex_a12,$/;"	e	enum:ARM::CPU	file:
arm_cortex_a12	src/processor_arm.cpp	/^constexpr auto arm_cortex_a12 = armv7a | get_feature_masks(d32, vfp3, vfp4, neon);$/;"	v	namespace:ARM::Feature	typeref:typename:auto
arm_cortex_a15	src/processor_arm.cpp	/^    arm_cortex_a15,$/;"	e	enum:ARM::CPU	file:
arm_cortex_a15	src/processor_arm.cpp	/^constexpr auto arm_cortex_a15 = armv7a | get_feature_masks(d32, vfp3, vfp4, neon);$/;"	v	namespace:ARM::Feature	typeref:typename:auto
arm_cortex_a17	src/processor_arm.cpp	/^    arm_cortex_a17,$/;"	e	enum:ARM::CPU	file:
arm_cortex_a17	src/processor_arm.cpp	/^constexpr auto arm_cortex_a17 = armv7a | get_feature_masks(d32, vfp3, vfp4, neon);$/;"	v	namespace:ARM::Feature	typeref:typename:auto
arm_cortex_a32	src/processor_arm.cpp	/^    arm_cortex_a32,$/;"	e	enum:ARM::CPU	file:
arm_cortex_a32	src/processor_arm.cpp	/^constexpr auto arm_cortex_a32 = armv8a; \/\/ TODO? (crc, crypto)$/;"	v	namespace:ARM::Feature	typeref:typename:auto
arm_cortex_a32	src/processor_arm.cpp	/^constexpr auto arm_cortex_a32 = generic; \/\/ TODO? (crc, crypto)$/;"	v	namespace:ARM::Feature	typeref:typename:auto
arm_cortex_a35	src/processor_arm.cpp	/^    arm_cortex_a35,$/;"	e	enum:ARM::CPU	file:
arm_cortex_a35	src/processor_arm.cpp	/^constexpr auto arm_cortex_a35 = armv8a; \/\/ TODO? (crc, crypto)$/;"	v	namespace:ARM::Feature	typeref:typename:auto
arm_cortex_a35	src/processor_arm.cpp	/^constexpr auto arm_cortex_a35 = generic; \/\/ TODO? (crc, crypto)$/;"	v	namespace:ARM::Feature	typeref:typename:auto
arm_cortex_a5	src/processor_arm.cpp	/^    arm_cortex_a5,$/;"	e	enum:ARM::CPU	file:
arm_cortex_a5	src/processor_arm.cpp	/^constexpr auto arm_cortex_a5 = armv7a;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
arm_cortex_a53	src/processor_arm.cpp	/^    arm_cortex_a53,$/;"	e	enum:ARM::CPU	file:
arm_cortex_a53	src/processor_arm.cpp	/^constexpr auto arm_cortex_a53 = armv8a_crc;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
arm_cortex_a55	src/processor_arm.cpp	/^    arm_cortex_a55,$/;"	e	enum:ARM::CPU	file:
arm_cortex_a55	src/processor_arm.cpp	/^constexpr auto arm_cortex_a55 = armv8_2a_crypto | get_feature_masks(rcpc); \/\/ dotprod;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
arm_cortex_a55	src/processor_arm.cpp	/^constexpr auto arm_cortex_a55 = armv8_2a_crypto;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
arm_cortex_a57	src/processor_arm.cpp	/^    arm_cortex_a57,$/;"	e	enum:ARM::CPU	file:
arm_cortex_a57	src/processor_arm.cpp	/^constexpr auto arm_cortex_a57 = armv8a_crc;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
arm_cortex_a7	src/processor_arm.cpp	/^    arm_cortex_a7,$/;"	e	enum:ARM::CPU	file:
arm_cortex_a7	src/processor_arm.cpp	/^constexpr auto arm_cortex_a7 = armv7a | get_feature_masks(vfp3, vfp4, neon);$/;"	v	namespace:ARM::Feature	typeref:typename:auto
arm_cortex_a72	src/processor_arm.cpp	/^    arm_cortex_a72,$/;"	e	enum:ARM::CPU	file:
arm_cortex_a72	src/processor_arm.cpp	/^constexpr auto arm_cortex_a72 = armv8a_crc;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
arm_cortex_a73	src/processor_arm.cpp	/^    arm_cortex_a73,$/;"	e	enum:ARM::CPU	file:
arm_cortex_a73	src/processor_arm.cpp	/^constexpr auto arm_cortex_a73 = armv8a_crc;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
arm_cortex_a75	src/processor_arm.cpp	/^    arm_cortex_a75,$/;"	e	enum:ARM::CPU	file:
arm_cortex_a75	src/processor_arm.cpp	/^constexpr auto arm_cortex_a75 = armv8_2a_crypto | get_feature_masks(rcpc); \/\/ dotprod;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
arm_cortex_a75	src/processor_arm.cpp	/^constexpr auto arm_cortex_a75 = armv8_2a_crypto;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
arm_cortex_a8	src/processor_arm.cpp	/^    arm_cortex_a8,$/;"	e	enum:ARM::CPU	file:
arm_cortex_a8	src/processor_arm.cpp	/^constexpr auto arm_cortex_a8 = armv7a | get_feature_masks(d32, vfp3, neon);$/;"	v	namespace:ARM::Feature	typeref:typename:auto
arm_cortex_a9	src/processor_arm.cpp	/^    arm_cortex_a9,$/;"	e	enum:ARM::CPU	file:
arm_cortex_a9	src/processor_arm.cpp	/^constexpr auto arm_cortex_a9 = armv7a;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
arm_cortex_m0	src/processor_arm.cpp	/^    arm_cortex_m0,$/;"	e	enum:ARM::CPU	file:
arm_cortex_m1	src/processor_arm.cpp	/^    arm_cortex_m1,$/;"	e	enum:ARM::CPU	file:
arm_cortex_m23	src/processor_arm.cpp	/^    arm_cortex_m23,$/;"	e	enum:ARM::CPU	file:
arm_cortex_m23	src/processor_arm.cpp	/^constexpr auto arm_cortex_m23 = armv8m; \/\/ unsupported$/;"	v	namespace:ARM::Feature	typeref:typename:auto
arm_cortex_m3	src/processor_arm.cpp	/^    arm_cortex_m3,$/;"	e	enum:ARM::CPU	file:
arm_cortex_m33	src/processor_arm.cpp	/^    arm_cortex_m33,$/;"	e	enum:ARM::CPU	file:
arm_cortex_m33	src/processor_arm.cpp	/^constexpr auto arm_cortex_m33 = armv8m | get_feature_masks(v8_m_main); \/\/ unsupported$/;"	v	namespace:ARM::Feature	typeref:typename:auto
arm_cortex_m4	src/processor_arm.cpp	/^    arm_cortex_m4,$/;"	e	enum:ARM::CPU	file:
arm_cortex_m7	src/processor_arm.cpp	/^    arm_cortex_m7,$/;"	e	enum:ARM::CPU	file:
arm_cortex_r4	src/processor_arm.cpp	/^    arm_cortex_r4,$/;"	e	enum:ARM::CPU	file:
arm_cortex_r4	src/processor_arm.cpp	/^constexpr auto arm_cortex_r4 = armv7r | get_feature_masks(vfp3, hwdiv);$/;"	v	namespace:ARM::Feature	typeref:typename:auto
arm_cortex_r5	src/processor_arm.cpp	/^    arm_cortex_r5,$/;"	e	enum:ARM::CPU	file:
arm_cortex_r5	src/processor_arm.cpp	/^constexpr auto arm_cortex_r5 = armv7r | get_feature_masks(vfp3, hwdiv, hwdiv_arm);$/;"	v	namespace:ARM::Feature	typeref:typename:auto
arm_cortex_r52	src/processor_arm.cpp	/^    arm_cortex_r52,$/;"	e	enum:ARM::CPU	file:
arm_cortex_r52	src/processor_arm.cpp	/^constexpr auto arm_cortex_r52 = armv8r; \/\/ TODO? (crc, crypto)$/;"	v	namespace:ARM::Feature	typeref:typename:auto
arm_cortex_r7	src/processor_arm.cpp	/^    arm_cortex_r7,$/;"	e	enum:ARM::CPU	file:
arm_cortex_r7	src/processor_arm.cpp	/^constexpr auto arm_cortex_r7 = armv7r | get_feature_masks(vfp3, hwdiv, hwdiv_arm);$/;"	v	namespace:ARM::Feature	typeref:typename:auto
arm_cortex_r8	src/processor_arm.cpp	/^    arm_cortex_r8,$/;"	e	enum:ARM::CPU	file:
arm_cortex_r8	src/processor_arm.cpp	/^constexpr auto arm_cortex_r8 = armv7r | get_feature_masks(vfp3, hwdiv, hwdiv_arm);$/;"	v	namespace:ARM::Feature	typeref:typename:auto
arm_mpcore	src/processor_arm.cpp	/^    arm_mpcore,$/;"	e	enum:ARM::CPU	file:
armv7_a	src/processor_arm.cpp	/^    armv7_a,$/;"	e	enum:ARM::CPU	file:
armv7_m	src/processor_arm.cpp	/^    armv7_m,$/;"	e	enum:ARM::CPU	file:
armv7_r	src/processor_arm.cpp	/^    armv7_r,$/;"	e	enum:ARM::CPU	file:
armv7a	src/processor_arm.cpp	/^constexpr auto armv7a = generic | _armv7a;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
armv7e_m	src/processor_arm.cpp	/^    armv7e_m,$/;"	e	enum:ARM::CPU	file:
armv7m	src/processor_arm.cpp	/^constexpr auto armv7m = generic | _armv7m;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
armv7r	src/processor_arm.cpp	/^constexpr auto armv7r = generic | _armv7r;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
armv8_1_a	src/processor_arm.cpp	/^    armv8_1_a,$/;"	e	enum:ARM::CPU	file:
armv8_1a	src/processor_arm.cpp	/^constexpr auto armv8_1a = armv8a_crc | get_feature_masks(v8_1a);$/;"	v	namespace:ARM::Feature	typeref:typename:auto
armv8_1a	src/processor_arm.cpp	/^constexpr auto armv8_1a = armv8a_crc | get_feature_masks(v8_1a, lse, rdm); \/\/ lor, hpd$/;"	v	namespace:ARM::Feature	typeref:typename:auto
armv8_2_a	src/processor_arm.cpp	/^    armv8_2_a,$/;"	e	enum:ARM::CPU	file:
armv8_2a	src/processor_arm.cpp	/^constexpr auto armv8_2a = armv8_1a | get_feature_masks(v8_2a); \/\/ ras$/;"	v	namespace:ARM::Feature	typeref:typename:auto
armv8_2a	src/processor_arm.cpp	/^constexpr auto armv8_2a = armv8_1a | get_feature_masks(v8_2a);$/;"	v	namespace:ARM::Feature	typeref:typename:auto
armv8_2a_crypto	src/processor_arm.cpp	/^constexpr auto armv8_2a_crypto = armv8_2a | get_feature_masks(crypto);$/;"	v	namespace:ARM::Feature	typeref:typename:auto
armv8_3_a	src/processor_arm.cpp	/^    armv8_3_a,$/;"	e	enum:ARM::CPU	file:
armv8_3a	src/processor_arm.cpp	/^constexpr auto armv8_3a = armv8_2a | get_feature_masks(v8_3a);$/;"	v	namespace:ARM::Feature	typeref:typename:auto
armv8_3a	src/processor_arm.cpp	/^constexpr auto armv8_3a = armv8_2a | get_feature_masks(v8_3a, rcpc);$/;"	v	namespace:ARM::Feature	typeref:typename:auto
armv8_3a_crypto	src/processor_arm.cpp	/^constexpr auto armv8_3a_crypto = armv8_3a | get_feature_masks(crypto);$/;"	v	namespace:ARM::Feature	typeref:typename:auto
armv8_a	src/processor_arm.cpp	/^    armv8_a,$/;"	e	enum:ARM::CPU	file:
armv8_m_base	src/processor_arm.cpp	/^    armv8_m_base,$/;"	e	enum:ARM::CPU	file:
armv8_m_main	src/processor_arm.cpp	/^    armv8_m_main,$/;"	e	enum:ARM::CPU	file:
armv8_r	src/processor_arm.cpp	/^    armv8_r,$/;"	e	enum:ARM::CPU	file:
armv8a	src/processor_arm.cpp	/^constexpr auto armv8a = generic | _armv8a;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
armv8a_crc	src/processor_arm.cpp	/^constexpr auto armv8a_crc = armv8a | get_feature_masks(crc);$/;"	v	namespace:ARM::Feature	typeref:typename:auto
armv8a_crc	src/processor_arm.cpp	/^constexpr auto armv8a_crc = get_feature_masks(crc);$/;"	v	namespace:ARM::Feature	typeref:typename:auto
armv8a_crc_crypto	src/processor_arm.cpp	/^constexpr auto armv8a_crc_crypto = armv8a_crc | get_feature_masks(crypto);$/;"	v	namespace:ARM::Feature	typeref:typename:auto
armv8m	src/processor_arm.cpp	/^constexpr auto armv8m = generic | _armv8m;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
armv8r	src/processor_arm.cpp	/^constexpr auto armv8r = generic | _armv8r;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
arr	test/strings/io.jl	/^arr = ["a","b","c"]$/;"	v
array_builtin_common_nothrow	base/compiler/tfuncs.jl	/^function array_builtin_common_nothrow(argtypes::Array{Any,1}, first_idx_idx::Int)$/;"	f
array_eps	stdlib/Test/src/Test.jl	/^    array_eps(a) = eps(float(maximum(x->(isfinite(x) ? abs(x) : oftype(x,NaN)), a)))$/;"	f
array_eps	stdlib/Test/src/Test.jl	/^    array_eps(a::AbstractArray{Complex{T}}) where {T} = eps(float(maximum(x->(isfinite(x) ? abs(/;"	f
array_nbytes	src/gc.c	/^static size_t array_nbytes(jl_array_t *a) JL_NOTSAFEPOINT$/;"	f	typeref:typename:size_t	file:
array_resize_buffer	src/array.c	/^static int NOINLINE array_resize_buffer(jl_array_t *a, size_t newlen)$/;"	f	typeref:typename:int NOINLINE	file:
array_subpadding	base/reinterpretarray.jl	/^@pure function array_subpadding(S, T)$/;"	f
array_summary	base/show.jl	/^function array_summary(io::IO, a, inds)$/;"	f
array_summary	base/show.jl	/^function array_summary(io::IO, a, inds::Tuple{Vararg{OneTo}})$/;"	f
array_to_list	src/ast.c	/^static void array_to_list(fl_context_t *fl_ctx, jl_array_t *a, value_t *pv)$/;"	f	typeref:typename:void	file:
array_try_unshare	src/array.c	/^static void NOINLINE array_try_unshare(jl_array_t *a)$/;"	f	typeref:typename:void NOINLINE	file:
array_type_undefable	base/compiler/tfuncs.jl	/^function array_type_undefable(@nospecialize(a))$/;"	f
arraylist_free	src/support/arraylist.c	/^void arraylist_free(arraylist_t *a)$/;"	f	typeref:typename:void
arraylist_grow	src/support/arraylist.c	/^void arraylist_grow(arraylist_t *a, size_t n)$/;"	f	typeref:typename:void
arraylist_new	src/support/arraylist.c	/^arraylist_t *arraylist_new(arraylist_t *a, size_t size)$/;"	f	typeref:typename:arraylist_t *
arraylist_pop	src/support/arraylist.c	/^void *arraylist_pop(arraylist_t *a)$/;"	f	typeref:typename:void *
arraylist_push	src/support/arraylist.c	/^void arraylist_push(arraylist_t *a, void *elt)$/;"	f	typeref:typename:void
arraylist_t	src/support/arraylist.h	/^} arraylist_t;$/;"	t	typeref:struct:__anon1f859bb90108
arrayset_unknown_dim	test/core.jl	/^    function arrayset_unknown_dim(::Type{T}, n) where T$/;"	f
arraysym	src/flisp/flisp.h	/^    value_t arraysym, cfunctionsym, voidsym, pointersym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
arraytype_constshape	src/cgutils.cpp	/^static bool arraytype_constshape(jl_value_t *ty)$/;"	f	typeref:typename:bool	file:
artype	src/flisp/flisp.h	/^    struct _fltype_t *artype;  \/\/ (array this)$/;"	m	struct:_fltype_t	typeref:struct:_fltype_t *
as	src/flisp/unittest.lsp	/^(define as (apply list* (map-int (lambda (x) (gensym)) (+ MAX_ARGS 1))))$/;"	f
as	src/flisp/unittest.lsp	/^(define as (apply list* (map-int (lambda (x) (gensym)) (+ MAX_ARGS 100))))$/;"	f
as	src/flisp/unittest.lsp	/^(define as (apply list* (map-int (lambda (x) (gensym)) 995)))$/;"	f
as	src/flisp/unittest.lsp	/^(define as (map-int (lambda (x) (gensym)) 1000))$/;"	f
as	stdlib/Distributed/test/distributed_exec.jl	/^as = [rand(4,4) for i in 1:n]$/;"	v
asF64	base/twiceprecision.jl	/^asF64(x::AbstractFloat) = Float64(x)$/;"	f
asF64	base/twiceprecision.jl	/^asF64(x::Tuple{AbstractFloat,AbstractFloat}) = Float64(x[1]) + Float64(x[2])$/;"	f
as_fn_append	deps/srccache/patchelf-0.9/configure	/^  as_fn_append ()$/;"	f
as_fn_arith	deps/srccache/patchelf-0.9/configure	/^  as_fn_arith ()$/;"	f
as_fn_error	deps/srccache/patchelf-0.9/configure	/^as_fn_error ()$/;"	f
as_fn_executable_p	deps/srccache/patchelf-0.9/configure	/^as_fn_executable_p ()$/;"	f
as_fn_exit	deps/srccache/patchelf-0.9/configure	/^as_fn_exit ()$/;"	f
as_fn_failure	deps/srccache/patchelf-0.9/configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_mkdir_p	deps/srccache/patchelf-0.9/configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_ret_failure	deps/srccache/patchelf-0.9/configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_success	deps/srccache/patchelf-0.9/configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_set_status	deps/srccache/patchelf-0.9/configure	/^as_fn_set_status ()$/;"	f
as_fn_success	deps/srccache/patchelf-0.9/configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_unset	deps/srccache/patchelf-0.9/configure	/^as_fn_unset ()$/;"	f
as_sub	test/broadcast.jl	/^function as_sub(x::AbstractArray{T,3}) where T$/;"	f
as_sub	test/broadcast.jl	/^function as_sub(x::AbstractMatrix)$/;"	f
as_sub	test/broadcast.jl	/^function as_sub(x::AbstractVector)$/;"	f
as_value	src/cgutils.cpp	/^static Value *as_value(jl_codectx_t &ctx, Type *to, const jl_cgval_t &v)$/;"	f	typeref:typename:Value *	file:
asbits	test/ranges.jl	/^asbits(x) = reinterpret(Base.uinttype(typeof(x)), x)$/;"	f
asbitset	test/sets.jl	/^    asbitset(x) = x isa BitSet ? x : BitSet(x)$/;"	f
ascii	base/strings/util.jl	/^ascii(x::AbstractString) = ascii(String(x))$/;"	f
ascii	base/strings/util.jl	/^function ascii(s::String)$/;"	f
ashr_op	src/runtime_intrinsics.c	/^#define ashr_op(/;"	d	file:
asin	base/complex.jl	/^function asin(z::Complex)$/;"	f
asin	base/special/trig.jl	/^asin(x::Real) = asin(float(x))$/;"	f
asin	base/special/trig.jl	/^function asin(x::T) where T<:Union{Float32, Float64}$/;"	f
asin	stdlib/LinearAlgebra/src/dense.jl	/^function asin(A::AbstractMatrix)$/;"	f
asin_domain_error	base/special/trig.jl	/^@noinline asin_domain_error(x) = throw(DomainError(x, "asin(x) is not defined for |x|>1."))$/;"	f
asin_fast	base/fastmath.jl	/^    asin_fast(x::ComplexTypes) = -im*asinh(im*x)$/;"	f
asin_kernel	base/special/trig.jl	/^@inline function asin_kernel(t::Float32, x::Float32)$/;"	f
asin_kernel	base/special/trig.jl	/^@inline function asin_kernel(t::Float64, x::Float64)$/;"	f
asinh	base/complex.jl	/^function asinh(z::Complex)$/;"	f
asinh	base/special/hyperbolic.jl	/^asinh(x::Real) = asinh(float(x))$/;"	f
asinh	base/special/hyperbolic.jl	/^function asinh(x::T) where T <: Union{Float32, Float64}$/;"	f
asinh	stdlib/LinearAlgebra/src/dense.jl	/^function asinh(A::AbstractMatrix)$/;"	f
asinh_fast	base/fastmath.jl	/^    asinh_fast(x::ComplexTypes) = log(x + sqrt(1+x*x))$/;"	f
asize_from	base/array.jl	/^asize_from(a::Array, n) = n > ndims(a) ? () : (arraysize(a,n), asize_from(a, n+1)...)$/;"	f
askey	base/set.jl	/^askey(k, ::AbstractDict) = k.first$/;"	f
askey	base/set.jl	/^askey(k, ::AbstractSet) = k$/;"	f
asprintf	src/support/asprintf.c	/^int asprintf(char **str, const char *fmt, ...)$/;"	f	typeref:typename:int
assemble_inline_todo!	base/compiler/ssair/inlining.jl	/^function assemble_inline_todo!(ir::IRCode, sv::OptimizationState)$/;"	f
assert	base/error.jl	/^macro assert(ex, msgs...)$/;"	f
assert_havelock	base/condition.jl	/^assert_havelock(c::GenericCondition) = assert_havelock(c.lock)$/;"	f
assert_havelock	base/condition.jl	/^assert_havelock(l::AbstractLock) = assert_havelock(l, Threads.threadid())$/;"	f
assert_havelock	base/condition.jl	/^assert_havelock(l::AbstractLock, tid::Integer) =$/;"	f
assert_havelock	base/condition.jl	/^assert_havelock(l::AbstractLock, tid::Nothing) = concurrency_violation()$/;"	f
assert_havelock	base/condition.jl	/^assert_havelock(l::AbstractLock, tid::Task) =$/;"	f
assert_havelock	base/condition.jl	/^assert_havelock(l::AlwaysLockedST) = assert_havelock(l, l.ownertid)$/;"	f
assert_not_gced	test/compiler/codegen.jl	/^    @noinline assert_not_gced() = @test !was_gced$/;"	f
assertion_counter	base/compiler/ssair/passes.jl	/^assertion_counter = 0$/;"	v
asset	test/sets.jl	/^    asset(x) = x isa Set ? x : Set(x)$/;"	f
assign23239d	test/core.jl	/^macro assign23239d(x, v)$/;"	f
assign23239e	test/core.jl	/^macro assign23239e(x, v)$/;"	f
assign_global_builtins	src/flisp/flisp.c	/^void assign_global_builtins(fl_context_t *fl_ctx, const builtinspec_t *b)$/;"	f	typeref:typename:void
assign_sym	src/ast.c	/^jl_sym_t *lambda_sym;  jl_sym_t *assign_sym;$/;"	v	typeref:typename:jl_sym_t *
assignbignum!	base/grisu/bignums.jl	/^function assignbignum!(x::Bignum,other::Bignum)$/;"	f
assigned-name	src/julia-syntax.scm	/^(define (assigned-name e)$/;"	f
assigned_in_try	src/codegen.cpp	/^static std::set<int> assigned_in_try(jl_array_t *stmts, int s, long l)$/;"	f	typeref:typename:std::set<int>	file:
assignment-like?	src/ast.scm	/^(define (assignment-like? e)$/;"	f
assignment?	src/ast.scm	/^(define (assignment? e) (and (pair? e) (eq? (car e) '=)))$/;"	f
assignpoweruint16!	base/grisu/bignums.jl	/^function assignpoweruint16!(x::Bignum,base::UInt16,power_exponent::Int)$/;"	f
assignuint16!	base/grisu/bignums.jl	/^function assignuint16!(x::Bignum,value::UInt16)$/;"	f
assignuint64!	base/grisu/bignums.jl	/^function assignuint64!(x::Bignum,value::UInt64)$/;"	f
assoc_exact_ok	test/clangsa/MissingRoots.c	/^void assoc_exact_ok(jl_value_t **args, size_t n, int8_t offs, size_t world) {$/;"	f	typeref:typename:void
associate_julia_struct	base/libuv.jl	/^associate_julia_struct(handle::Ptr{Cvoid}, @nospecialize(jlobj)) =$/;"	f
ast	test/meta.jl	/^ast = asts[1]$/;"	v
ast_slotflag	base/reflection.jl	/^ast_slotflag(@nospecialize(code), i) = ccall(:jl_ast_slotflag, UInt8, (Any, Csize_t), code, i - /;"	f
asterisk_bold	stdlib/Markdown/src/Common/inline.jl	/^function asterisk_bold(stream::IO, md::MD)$/;"	f
asterisk_italic	stdlib/Markdown/src/Common/inline.jl	/^function asterisk_italic(stream::IO, md::MD)$/;"	f
astname	base/docs/Docs.jl	/^astname(@nospecialize(other), ismacro::Bool) = other$/;"	f
astname	base/docs/Docs.jl	/^astname(q::QuoteNode, ismacro::Bool) = astname(q.value, ismacro)$/;"	f
astname	base/docs/Docs.jl	/^astname(s::Symbol, ismacro::Bool)    = ismacro ? macroname(s) : s$/;"	f
astname	base/docs/Docs.jl	/^function astname(x::Expr, ismacro::Bool)$/;"	f
astr	test/strings/search.jl	/^astr = "Hello, world.\\n"$/;"	v
asts	test/meta.jl	/^asts = code_lowered(dummy, Tuple{})$/;"	v
asts	test/meta.jl	/^asts = code_lowered(dummy_multi, Tuple{})$/;"	v
astuple	test/ranges.jl	/^astuple(x) = (x.hi, x.lo)$/;"	f
asum	stdlib/LinearAlgebra/src/blas.jl	/^        function asum(n::Integer, X::Union{Ptr{$elty},AbstractArray{$elty}}, incx::Integer)$/;"	f
asum	stdlib/LinearAlgebra/src/blas.jl	/^asum(x::Union{AbstractVector,DenseArray}) = GC.@preserve x asum(length(x), pointer(x), stride1(x/;"	f
asum	stdlib/LinearAlgebra/src/blas.jl	/^function asum end$/;"	f
asww	test/ranges.jl	/^asww(x) = widen(widen(x.hi)) + widen(widen(x.lo))$/;"	f
async	base/task.jl	/^macro async(expr)$/;"	f
async_usemap	base/asyncmap.jl	/^function async_usemap(f, c...; ntasks=0, batch_size=nothing)$/;"	f
asyncmap	base/asyncmap.jl	/^function asyncmap(f, b::BitArray; kwargs...)$/;"	f
asyncmap	base/asyncmap.jl	/^function asyncmap(f, c...; ntasks=0, batch_size=nothing)$/;"	f
asyncmap	base/asyncmap.jl	/^function asyncmap(f, s::AbstractString; kwargs...)$/;"	f
asyncmap!	base/asyncmap.jl	/^function asyncmap!(f, r, c1, c...; ntasks=0, batch_size=nothing)$/;"	f
asyncmap_batch	stdlib/Distributed/src/pmap.jl	/^asyncmap_batch(f) = batch -> asyncmap(x->f(x...), batch)$/;"	f
at	src/ccall.cpp	/^    jl_svec_t *at; \/\/ svec of julia argument types$/;"	m	class:function_sig_t	typeref:typename:jl_svec_t *	file:
at_disable_library_threading	base/initdefs.jl	/^function at_disable_library_threading(f)$/;"	f
atan	base/complex.jl	/^function atan(z::Complex)$/;"	f
atan	base/math.jl	/^atan(y::Real, x::Real) = atan(promote(float(y),float(x))...)$/;"	f
atan	base/math.jl	/^atan(y::T, x::T) where {T<:AbstractFloat} = Base.no_op_err("atan", T)$/;"	f
atan	base/mpfr.jl	/^function atan(y::BigFloat, x::BigFloat)$/;"	f
atan	base/special/trig.jl	/^atan(x::Real) = atan(float(x))$/;"	f
atan	base/special/trig.jl	/^function atan(x::T) where T<:Union{Float32, Float64}$/;"	f
atan	base/special/trig.jl	/^function atan(y::T, x::T) where T<:Union{Float32, Float64}$/;"	f
atan	stdlib/LinearAlgebra/src/dense.jl	/^function atan(A::AbstractMatrix)$/;"	f
atan_fast	base/fastmath.jl	/^    atan_fast(x::ComplexTypes) = -im*atanh(im*x)$/;"	f
atan_p	base/special/trig.jl	/^atan_p(z::Float32, w::Float32) = z*@horner(w, 3.3333328366f-01,  1.4253635705f-01, 6.1687607318f/;"	f
atan_p	base/special/trig.jl	/^atan_p(z::Float64, w::Float64) = z*@horner(w,$/;"	f
atan_pq	base/special/trig.jl	/^@inline function atan_pq(x)$/;"	f
atan_q	base/special/trig.jl	/^atan_q(w::Float32) = w*@horner(w, -1.9999158382f-01, -1.0648017377f-01)$/;"	f
atan_q	base/special/trig.jl	/^atan_q(w::Float64) = w*@horner(w,$/;"	f
atand	base/special/trig.jl	/^atand(y)    = rad2deg(atan(y))$/;"	f
atand	base/special/trig.jl	/^atand(y, x) = rad2deg(atan(y,x))$/;"	f
atanh	base/complex.jl	/^atanh(z::Complex) = atanh(float(z))$/;"	f
atanh	base/complex.jl	/^function atanh(z::Complex{T}) where T<:AbstractFloat$/;"	f
atanh	base/special/hyperbolic.jl	/^atanh(x::Real) = atanh(float(x))$/;"	f
atanh	base/special/hyperbolic.jl	/^function atanh(x::T) where T <: Union{Float32, Float64}$/;"	f
atanh	stdlib/LinearAlgebra/src/dense.jl	/^function atanh(A::AbstractMatrix)$/;"	f
atanh_domain_error	base/special/hyperbolic.jl	/^@noinline atanh_domain_error(x) = throw(DomainError(x, "atanh(x) is only defined for |x| ≤ 1."/;"	f
atanh_fast	base/fastmath.jl	/^    atanh_fast(x::T) where {T<:ComplexTypes} = convert(T,1)\/2*(log(1+x) - log(1-x))$/;"	f
atdoc	base/boot.jl	/^atdoc     = (source, mod, str, expr) -> Expr(:escape, expr)$/;"	v
atdoc!	base/boot.jl	/^atdoc!(λ) = global atdoc = λ$/;"	f
atexit	base/initdefs.jl	/^atexit(f::Function) = (pushfirst!(atexit_hooks, f); nothing)$/;"	f
atexit_hooks	base/initdefs.jl	/^const atexit_hooks = Callable[Filesystem.temp_cleanup_purge]$/;"	v
atomic_add!	base/atomics.jl	/^function atomic_add! end$/;"	f
atomic_and!	base/atomics.jl	/^function atomic_and! end$/;"	f
atomic_cas!	base/atomics.jl	/^        @eval atomic_cas!(x::Atomic{$typ}, cmp::$typ, new::$typ) =$/;"	f
atomic_cas!	base/atomics.jl	/^function atomic_cas! end$/;"	f
atomic_fence	base/atomics.jl	/^atomic_fence() = llvmcall("""$/;"	f
atomic_max!	base/atomics.jl	/^function atomic_max! end$/;"	f
atomic_min!	base/atomics.jl	/^function atomic_min! end$/;"	f
atomic_nand!	base/atomics.jl	/^function atomic_nand! end$/;"	f
atomic_or!	base/atomics.jl	/^function atomic_or! end$/;"	f
atomic_sub!	base/atomics.jl	/^function atomic_sub! end$/;"	f
atomic_xchg!	base/atomics.jl	/^function atomic_xchg! end$/;"	f
atomic_xor!	base/atomics.jl	/^function atomic_xor! end$/;"	f
atomictypes	base/atomics.jl	/^const atomictypes = (arithmetictypes..., Bool)$/;"	v
atreplinit	base/client.jl	/^atreplinit(f::Function) = (pushfirst!(repl_hooks, f); nothing)$/;"	f
attach	test/meta.jl	/^macro attach(val, ex)$/;"	f
attach_after_stmt_after	base/compiler/ssair/ir.jl	/^function attach_after_stmt_after(compact::IncrementalCompact, idx::Int)$/;"	f
attach_exception_port	src/signals-mach.c	/^static void attach_exception_port(thread_port_t thread, int segv_only)$/;"	f	typeref:typename:void	file:
attributes	src/ccall.cpp	/^    AttributeList attributes; \/\/ vector of function call site attributes$/;"	m	class:function_sig_t	typeref:typename:AttributeList	file:
authenticate_ssh	stdlib/LibGit2/src/callbacks.jl	/^function authenticate_ssh(libgit2credptr::Ptr{Ptr{Cvoid}}, p::CredentialPayload, username_ptr)$/;"	f
authenticate_userpass	stdlib/LibGit2/src/callbacks.jl	/^function authenticate_userpass(libgit2credptr::Ptr{Ptr{Cvoid}}, p::CredentialPayload)$/;"	f
author	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^    "author" : "xcode"$/;"	s	object:info
author	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/Contents.json	/^    "author" : "xcode"$/;"	s	object:info
author	stdlib/LibGit2/src/commit.jl	/^function author(c::GitCommit)$/;"	f
authors	stdlib/LibGit2/src/LibGit2.jl	/^function authors(repo::GitRepo)$/;"	f
auths	stdlib/LibGit2/src/LibGit2.jl	/^auths = LibGit2.authors(repo)$/;"	v
autolink	stdlib/Markdown/src/Common/inline.jl	/^function autolink(stream::IO, md::MD)$/;"	f
autorelease	src/flisp/cvalues.c	/^static void autorelease(fl_context_t *fl_ctx, cvalue_t *cv)$/;"	f	typeref:typename:void	file:
aux_roots	test/gcext/gcext.c	/^static jl_value_t *aux_roots[NAUXROOTS];$/;"	v	typeref:typename:jl_value_t * []	file:
avail	src/cgmemmgr.cpp	/^    size_t avail{0};$/;"	m	struct:__anon06c686bc0111::Block	typeref:typename:size_t	file:
available_text_colors	base/util.jl	/^available_text_colors = cat($/;"	v
available_text_colors	base/util.jl	/^available_text_colors = collect(Iterators.filter(x -> !isa(x, Integer), keys(text_colors)))$/;"	v
available_text_colors_docstring	base/util.jl	/^const available_text_colors_docstring =$/;"	v
avgdistance	stdlib/REPL/src/docview.jl	/^avgdistance(xs) =$/;"	f
axes	base/abstractarray.jl	/^function axes(A)$/;"	f
axes	base/abstractarray.jl	/^function axes(A::AbstractArray{T,N}, d) where {T,N}$/;"	f
axes	base/broadcast.jl	/^@inline axes(b::Extruded) = axes(b.x)$/;"	f
axes	base/essentials.jl	/^axes(v::SimpleVector) = (OneTo(length(v)),)$/;"	f
axes	base/essentials.jl	/^axes(v::SimpleVector, d::Integer) = d <= 1 ? axes(v)[d] : OneTo(1)$/;"	f
axes	base/generator.jl	/^axes(g::Generator) = axes(g.iter)$/;"	f
axes	base/indices.jl	/^axes(S::IdentityUnitRange) = (S,)$/;"	f
axes	base/indices.jl	/^axes(S::IdentityUnitRange{<:OneTo}) = (S.indices,)$/;"	f
axes	base/indices.jl	/^axes(S::Slice) = (IdentityUnitRange(S.indices),)$/;"	f
axes	base/indices.jl	/^axes(S::Slice{<:OneTo}) = (S.indices,)$/;"	f
axes	base/indices.jl	/^axes(iter::LinearIndices) = map(axes1, iter.indices)$/;"	f
axes	base/iterators.jl	/^axes(P::ProductIterator) = _prod_indices(P.iterators)$/;"	f
axes	base/iterators.jl	/^axes(v::Pairs) = axes(v.itr)$/;"	f
axes	base/iterators.jl	/^axes(z::Zip) = _promote_shape(map(axes, z.is)...)$/;"	f
axes	base/number.jl	/^axes(x::Number) = ()$/;"	f
axes	base/number.jl	/^axes(x::Number, d::Integer) = d < 1 ? throw(BoundsError()) : OneTo(1)$/;"	f
axes	base/refpointer.jl	/^axes(x::Ref) = ()$/;"	f
axes	base/reinterpretarray.jl	/^axes(a::ReinterpretArray{T,0}) where {T} = ()$/;"	f
axes	base/reinterpretarray.jl	/^function axes(a::ReinterpretArray{T,N,S} where {N}) where {T,S}$/;"	f
axes	base/subarray.jl	/^axes(S::SubArray) = (@_inline_meta; _indices_sub(S.indices...))$/;"	f
axes	base/tuple.jl	/^axes(@nospecialize t::Tuple) = (OneTo(length(t)),)$/;"	f
axes	stdlib/LinearAlgebra/src/adjtrans.jl	/^axes(A::AdjOrTransAbsMat) = reverse(axes(A.parent))$/;"	f
axes	stdlib/LinearAlgebra/src/adjtrans.jl	/^axes(v::AdjOrTransAbsVec) = (Base.OneTo(1), axes(v.parent)...)$/;"	f
axes	stdlib/REPL/src/LineEdit.jl	/^axes(reg::Region) = first(reg)+1:last(reg)$/;"	f
axes	stdlib/SuiteSparse/src/cholmod.jl	/^axes(A::Union{Dense,Sparse,Factor}) = map(Base.OneTo, size(A))$/;"	f
axes1	base/abstractarray.jl	/^axes1(A::AbstractArray) = (@_inline_meta; axes(A)[1])$/;"	f
axes1	base/abstractarray.jl	/^axes1(A::AbstractArray{<:Any,0}) = OneTo(1)$/;"	f
axes1	base/abstractarray.jl	/^axes1(iter) = OneTo(length(iter))$/;"	f
axes1	base/indices.jl	/^axes1(S::IdentityUnitRange) = S$/;"	f
axes1	base/indices.jl	/^axes1(S::IdentityUnitRange{<:OneTo}) = S.indices$/;"	f
axes1	base/indices.jl	/^axes1(S::Slice) = IdentityUnitRange(S.indices)$/;"	f
axes1	base/indices.jl	/^axes1(S::Slice{<:OneTo}) = S.indices$/;"	f
axistype	base/broadcast.jl	/^axistype(a, b) = UnitRange{Int}(a)$/;"	f
axpby!	stdlib/LinearAlgebra/src/blas.jl	/^        function axpby!(n::Integer, alpha::($elty), dx::Union{Ptr{$elty},$/;"	f
axpby!	stdlib/LinearAlgebra/src/blas.jl	/^function axpby! end$/;"	f
axpby!	stdlib/LinearAlgebra/src/blas.jl	/^function axpby!(alpha::Number, x::Union{DenseArray{T},AbstractVector{T}}, beta::Number, y::Union/;"	f
axpby!	stdlib/LinearAlgebra/src/generic.jl	/^function axpby!(α, x::AbstractArray, β, y::AbstractArray)$/;"	f
axpy!	stdlib/LinearAlgebra/src/blas.jl	/^        function axpy!(n::Integer, alpha::($elty), dx::Union{Ptr{$elty}, AbstractArray{$elty}}, /;"	f
axpy!	stdlib/LinearAlgebra/src/blas.jl	/^function axpy! end$/;"	f
axpy!	stdlib/LinearAlgebra/src/blas.jl	/^function axpy!(alpha::Number, x::Array{T}, rx::Union{UnitRange{Ti},AbstractRange{Ti}},$/;"	f
axpy!	stdlib/LinearAlgebra/src/blas.jl	/^function axpy!(alpha::Number, x::Union{DenseArray{T},StridedVector{T}}, y::Union{DenseArray{T},S/;"	f
axpy!	stdlib/LinearAlgebra/src/generic.jl	/^function axpy!(α, x::AbstractArray, rx::AbstractArray{<:Integer}, y::AbstractArray, ry::Abstrac/;"	f
axpy!	stdlib/LinearAlgebra/src/generic.jl	/^function axpy!(α, x::AbstractArray, y::AbstractArray)$/;"	f
aₜ	test/core.jl	/^aₜ = "a variable using Unicode 6"$/;"	v
b	src/ccalltest.c	/^    double a,b,c;$/;"	m	struct:__anon84ad8c4c1708	typeref:typename:double	file:
b	src/ccalltest.c	/^    float b;$/;"	m	struct:__anon84ad8c4c2708	typeref:typename:float	file:
b	src/ccalltest.c	/^    int *b;$/;"	m	struct:__anon84ad8c4c2608	typeref:typename:int *	file:
b	src/ccalltest.c	/^    int16_t b;$/;"	m	struct:__anon84ad8c4c1808	typeref:typename:int16_t	file:
b	src/ccalltest.c	/^    int8_t b;$/;"	m	struct:__anon84ad8c4c1908	typeref:typename:int8_t	file:
b	src/julia.h	/^    jl_value_t *b;$/;"	m	struct:__anon055fe4270b08	typeref:typename:jl_value_t *
b	src/staticdata.c	/^                jl_binding_t b;$/;"	m	struct:jl_reinit_item::binding	typeref:typename:jl_binding_t	file:
b	stdlib/Dates/test/ranges.jl	/^b = Dates.Date(2013, 2, 1)$/;"	v
b	stdlib/Dates/test/ranges.jl	/^b = Dates.DateTime(2013, 2, 1)$/;"	v
b	stdlib/Dates/test/types.jl	/^b = Dates.Date(2000)$/;"	v
b	stdlib/Mmap/test/runtests.jl	/^b = @inferred Mmap.mmap(s, BitArray, (17,13))$/;"	v
b	stdlib/Mmap/test/runtests.jl	/^b = Mmap.mmap(s, BitArray, (17,19))$/;"	v
b	stdlib/Mmap/test/runtests.jl	/^b = nothing; b0 = nothing$/;"	v
b	test/asyncmap.jl	/^b=asyncmap(identity, a)$/;"	v
b	test/asyncmap.jl	/^b=asyncmap(identity, c)$/;"	v
b	test/bigint.jl	/^b = parse(BigInt,"123456789012345678901234567891")$/;"	v
b	test/ccall.jl	/^    b(z) = y$/;"	f
b	test/core.jl	/^b = "aaa"$/;"	v
b	test/logging.jl	/^        function b()$/;"	f
b	test/offsetarray.jl	/^b = 1:2    # copy between AbstractArrays$/;"	v
b	test/offsetarray.jl	/^b = A0[1,i1]$/;"	v
b	test/offsetarray.jl	/^b = A0[i1, 1]$/;"	v
b	test/offsetarray.jl	/^b = OffsetArray(a, (0,))$/;"	v
b	test/reduce.jl	/^b = complex.(randn(32), randn(32))$/;"	v
b	test/some.jl	/^b = [ "replacement", "replacement", nothing, missing ]$/;"	v
b/lib/ExecutionEngine/PerfJITEvents/CMakeLists.txt	deps/patches/llvm-D44892-Perf-integration.patch	/^+++ b\/lib\/ExecutionEngine\/PerfJITEvents\/CMakeLists.txt$/;"	n
b/lib/ExecutionEngine/PerfJITEvents/LLVMBuild.txt	deps/patches/llvm-D44892-Perf-integration.patch	/^+++ b\/lib\/ExecutionEngine\/PerfJITEvents\/LLVMBuild.txt$/;"	n
b/lib/ExecutionEngine/PerfJITEvents/PerfJITEventListener.cpp	deps/patches/llvm-D44892-Perf-integration.patch	/^+++ b\/lib\/ExecutionEngine\/PerfJITEvents\/PerfJITEventListener.cpp$/;"	n
b/test/Analysis/LoopAccessAnalysis/memcheck-ni.ll	deps/patches/llvm-7.0-D50167-scev-umin.patch	/^+++ b\/test\/Analysis\/LoopAccessAnalysis\/memcheck-ni.ll$/;"	n
b/test/Analysis/LoopAccessAnalysis/memcheck-ni.ll	deps/patches/llvm-8.0-D50167-scev-umin.patch	/^+++ b\/test\/Analysis\/LoopAccessAnalysis\/memcheck-ni.ll$/;"	n
b/test/Analysis/LoopAccessAnalysis/memcheck-ni.ll	deps/patches/llvm-D50167-scev-umin.patch	/^+++ b\/test\/Analysis\/LoopAccessAnalysis\/memcheck-ni.ll$/;"	n
b/test/Analysis/LoopAccessAnalysis/wrapping-pointer-ni.ll	deps/patches/llvm-D49832-SCEVPred.patch	/^+++ b\/test\/Analysis\/LoopAccessAnalysis\/wrapping-pointer-ni.ll$/;"	n
b/test/CodeGen/SystemZ/pr36164.ll	deps/patches/llvm-rL327898.patch	/^+++ b\/test\/CodeGen\/SystemZ\/pr36164.ll$/;"	n
b/test/CodeGen/X86/pr36274.ll	deps/patches/llvm-rL327898.patch	/^+++ b\/test\/CodeGen\/X86\/pr36274.ll$/;"	n
b/test/CodeGen/X86/pr36312.ll	deps/patches/llvm-rL327898.patch	/^+++ b\/test\/CodeGen\/X86\/pr36312.ll$/;"	n
b/test/CodeGen/X86/win64-byval.ll	deps/patches/llvm-D51842-win64-byval-cc.patch	/^+++ b\/test\/CodeGen\/X86\/win64-byval.ll$/;"	n
b/test/CodeGen/X86/win64-byval.ll	deps/patches/llvm7-D51842-win64-byval-cc.patch	/^+++ b\/test\/CodeGen\/X86\/win64-byval.ll$/;"	n
b/test/ExecutionEngine/RuntimeDyld/AArch64/ELF_ARM64_BE-large-relocations.s	deps/patches/llvm-D27629-AArch64-large_model_4.0.patch	/^+++ b\/test\/ExecutionEngine\/RuntimeDyld\/AArch64\/ELF_ARM64_BE-large-relocations.s$/;"	n
b/test/ExecutionEngine/RuntimeDyld/AArch64/ELF_ARM64_large-relocations.s	deps/patches/llvm-D27629-AArch64-large_model_4.0.patch	/^+++ b\/test\/ExecutionEngine\/RuntimeDyld\/AArch64\/ELF_ARM64_large-relocations.s$/;"	n
b/test/ExecutionEngine/RuntimeDyld/AArch64/ELF_ARM64_large-relocations.s	deps/patches/llvm-D27629-AArch64-large_model_6.0.1.patch	/^+++ b\/test\/ExecutionEngine\/RuntimeDyld\/AArch64\/ELF_ARM64_large-relocations.s$/;"	n
b0	stdlib/Mmap/test/runtests.jl	/^b0 = copy(b)$/;"	v
b18015	test/compiler/inference.jl	/^b18015(tri) = tri.b$/;"	f
b20704	test/compiler/inference.jl	/^Base.@pure b20704(@nospecialize(x)) = f20704(x)$/;"	f
b21178	test/core.jl	/^b21178(::F1,::F2) where {B1,B2,F1<:F21178{B1,<:Any},F2<:F21178{B2}} = F1,F2,B1,B2$/;"	f
b22307	test/core.jl	/^macro b22307()$/;"	f
b27964	test/syntax.jl	/^function b27964(x)$/;"	f
b28593	test/syntax.jl	/^macro b28593()$/;"	f
b28955	test/compiler/inference.jl	/^b28955(args::Tuple) = a28955(args...)$/;"	f
b30118	test/compiler/inline.jl	/^b30118(x...) = c30118(x)$/;"	f
b32121	test/syntax.jl	/^b32121 = 9$/;"	v
b4208	test/core.jl	/^    b4208() = (local b4208=1;new())$/;"	f
b4208	test/core.jl	/^mutable struct b4208$/;"	f
b4688	test/core.jl	/^b4688(y) = "not an Int"$/;"	f
b5165	test/core.jl	/^b5165 = IOBuffer()$/;"	v
b8932	test/core.jl	/^b8932 = Vec3_8932(2,2,2)$/;"	v
b_bar	stdlib/REPL/test/lineedit.jl	/^b_bar = 0$/;"	v
b_foo	stdlib/REPL/test/lineedit.jl	/^b_foo = 0$/;"	v
b_str	base/strings/io.jl	/^macro b_str(s)$/;"	f
baar	test/core.jl	/^    baar(x::DataType) = 0$/;"	f
baar	test/core.jl	/^    baar(x::Union) = 1$/;"	f
baar	test/core.jl	/^    baar(x::UnionAll) = 2$/;"	f
backedges	src/julia.h	/^    jl_array_t *backedges; \/\/ list of method-instances which contain a call into this method-i/;"	m	struct:_jl_method_instance_t	typeref:typename:jl_array_t *
backedges	src/julia.h	/^    jl_array_t *backedges;$/;"	m	struct:_jl_methtable_t	typeref:typename:jl_array_t *
backend	stdlib/REPL/src/REPL.jl	/^backend(r::AbstractREPL) = r.backendref$/;"	f
backref_id	src/staticdata.c	/^#define backref_id(/;"	d	file:
backref_list	src/dump.c	/^static arraylist_t backref_list;$/;"	v	typeref:typename:arraylist_t	file:
backref_table	src/dump.c	/^static htable_t backref_table;$/;"	v	typeref:typename:htable_t	file:
backref_table	src/staticdata.c	/^static htable_t backref_table;$/;"	v	typeref:typename:htable_t	file:
backref_table_numel	src/dump.c	/^static int backref_table_numel;$/;"	v	typeref:typename:int	file:
backref_table_numel	src/staticdata.c	/^static int backref_table_numel;$/;"	v	typeref:typename:int	file:
backrefs	src/flisp/flisp.c	/^    htable_t backrefs;$/;"	m	struct:_fl_readstate_t	typeref:typename:htable_t	file:
backspacesym	src/flisp/flisp.h	/^    value_t nulsym, alarmsym, backspacesym, tabsym, linefeedsym, newlinesym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
backtrace	base/error.jl	/^function backtrace end$/;"	f
backtrace	src/julia.h	/^    jl_value_t *backtrace;$/;"	m	struct:_jl_task_t	typeref:typename:jl_value_t *
bad	test/core.jl	/^macro bad(Y)$/;"	f
bad-formal-argument	src/ast.scm	/^(define (bad-formal-argument v)$/;"	f
bad2619	test/core.jl	/^bad2619 = false$/;"	v
bad_function	test/stacktraces.jl	/^    @noinline bad_function() = throw(UndefVarError(:nonexistent))$/;"	f
bad_tvars	test/core.jl	/^bad_tvars() where {T} = 1$/;"	f
bad_tvars2	test/core.jl	/^bad_tvars2() where {T} = T$/;"	f
bam28102	test/core.jl	/^@noinline function bam28102()$/;"	f
banner	base/version.jl	/^function banner(io::IO = stdout)$/;"	f
banner	src/julia.h	/^    int8_t banner;$/;"	m	struct:__anon055fe4271808	typeref:typename:int8_t
bar	base/docs/basedocs.jl	/^bar(x) = 2x$/;"	f
bar	deps/srccache/patchelf-0.9/tests/bar.c	/^int bar()$/;"	f	typeref:typename:int
bar	stdlib/Distributed/test/distributed_exec.jl	/^    bar() = @everywhere new_bar()=myid()$/;"	f
bar	test/compiler/contextual.jl	/^@generated bar(::Val{align}) where {align} = :(42)$/;"	f
bar	test/core.jl	/^        function bar()$/;"	f
bar	test/core.jl	/^    bar() = x+1$/;"	f
bar	test/core.jl	/^    bar(::AbstractFloat) = push!(rets, 2)$/;"	f
bar	test/core.jl	/^    bar(::Bool) = foobar()$/;"	f
bar	test/core.jl	/^    bar(::Int) = push!(rets, 1)$/;"	f
bar	test/core.jl	/^    bar(x) = length(x)==1 ? x : string(x, bar(x[1:end-1]))$/;"	f
bar	test/core.jl	/^    bar(x::Tuple{Any,Any,Any,Any})=2$/;"	f
bar	test/core.jl	/^    bar(x::Tuple{T,T,T,T}) where {T} = 1$/;"	f
bar	test/core.jl	/^function bar(x::T) where T$/;"	f
bar	test/core.jl	/^macro bar()$/;"	f
bar	test/deprecation_exec.jl	/^                          bar(x::Number) = x + 3; end)$/;"	f
bar	test/dict.jl	/^    bar(x) = bestkey(x, :y)$/;"	f
bar	test/staged.jl	/^    @generated function bar(x)$/;"	f
bar	test/staged.jl	/^    bar() = return 1$/;"	f
bar1	test/reflection.jl	/^bar1(x) = 1$/;"	f
bar1	test/reflection.jl	/^bar1(x::Int) = 2$/;"	f
bar11874	test/core.jl	/^function bar11874(x)$/;"	f
bar12620	test/compiler/inline.jl	/^function bar12620()$/;"	f
bar16239	test/syntax.jl	/^function bar16239()$/;"	f
bar2	test/reflection.jl	/^bar2(x) = 1$/;"	f
bar2	test/reflection.jl	/^bar2(x::Int) = 2$/;"	f
bar20518	test/compiler/inference.jl	/^bar20518(xs) = sum(foo20518(xs...))$/;"	f
bar21397	test/core.jl	/^bar21397(x::T) where {T} = T$/;"	f
bar21900	test/core.jl	/^bar21900 = 0$/;"	v
bar27240	test/core.jl	/^bar27240() = foo27240()$/;"	f
bar27456	test/core.jl	/^bar27456() = foo27456()$/;"	f
bar27770	test/core.jl	/^bar27770() = Nullable27770().value$/;"	f
bar28444	test/compiler/inference.jl	/^function bar28444()$/;"	f
bar3	test/reflection.jl	/^bar3(x) = 1$/;"	f
bar3	test/reflection.jl	/^bar3(x::Int) = 2$/;"	f
bar4	test/reflection.jl	/^bar4(x) = 1$/;"	f
bar4	test/reflection.jl	/^bar4(x::Int) = 2$/;"	f
bar7810	test/compiler/inference.jl	/^bar7810() = [Foo7810([(a,b) for a in 1:2]) for b in 3:4]$/;"	f
barTuple1	test/compiler/inference.jl	/^barTuple1() = fooTuple{(:y,)}()$/;"	f
barTuple2	test/compiler/inference.jl	/^barTuple2() = fooTuple{tuple(:y)}()$/;"	f
bar_22708	test/compiler/inference.jl	/^bar_22708(x) = f_22708(x)$/;"	f
bar_inlining_apply	test/compiler/inference.jl	/^bar_inlining_apply() = Core._apply(Core._apply, (foo_inlining_apply,), ((1,),))$/;"	f
bar_keymap	stdlib/REPL/test/lineedit.jl	/^const bar_keymap = Dict($/;"	v
bare_repo_tests	stdlib/LibGit2/test/libgit2.jl	/^        function bare_repo_tests(repo, repo_path)$/;"	f
barrier	src/threading.h	/^    uv_barrier_t *barrier;$/;"	m	struct:_jl_threadarg_t	typeref:typename:uv_barrier_t *
base	src/processor.cpp	/^    int base;$/;"	m	struct:__anon839834ed0111::TargetData	typeref:typename:int	file:
base	src/processor.h	/^    const char *base;$/;"	m	struct:_jl_sysimg_fptrs_t	typeref:typename:const char *
base	src/processor.h	/^    int base;$/;"	m	struct:jl_target_spec_t	typeref:typename:int
base36digits	base/intfuncs.jl	/^const base36digits = ['0':'9';'a':'z']$/;"	v
base62digits	base/intfuncs.jl	/^const base62digits = ['0':'9';'A':'Z';'a':'z']$/;"	v
base64decode	stdlib/Base64/src/decode.jl	/^function base64decode(s)$/;"	f
base64encode	stdlib/Base64/src/encode.jl	/^base64encode(args...; context=nothing) = base64encode(write, args...; context=context)$/;"	f
base64encode	stdlib/Base64/src/encode.jl	/^function base64encode(f::Function, args...; context=nothing)$/;"	f
base_ctx	src/julia_threads.h	/^    jl_ucontext_t base_ctx; \/\/ base context of stack$/;"	m	struct:_jl_tls_states_t	typeref:typename:jl_ucontext_t
base_func	src/llvm-multiversioning.cpp	/^        Function *base_func(Function *orig_f) const$/;"	f	struct:__anond5683ea40111::CloneCtx::Group	typeref:typename:Function *	file:
basename	base/path.jl	/^basename(path::AbstractString) = splitdir(path)[2]$/;"	f
basetype	base/Enums.jl	/^basetype(::Type{<:Enum{T}}) where {T<:Integer} = T$/;"	f
basic_blocks_starts	base/compiler/ssair/ir.jl	/^function basic_blocks_starts(stmts::Vector{Any})$/;"	f
batch_inline!	base/compiler/ssair/inlining.jl	/^function batch_inline!(todo::Vector{Any}, ir::IRCode, linetable::Vector{LineInfoNode}, propagate/;"	f
batch_size_err_str	base/asyncmap.jl	/^batch_size_err_str(batch_size) = string("batch_size must be specified as a positive integer. bat/;"	f
batchsplit	stdlib/Distributed/src/pmap.jl	/^function batchsplit(c; min_batch_count=1, max_batch_size=100)$/;"	f
baz	test/core.jl	/^    baz(::Type{Rational{T}}) where {T} = 2$/;"	f
baz	test/core.jl	/^    baz(::Type{Rational}) = 1$/;"	f
baz	test/precompile.jl	/^          baz() = 1$/;"	f
baz27365	test/core.jl	/^function baz27365()$/;"	f
baz4115	test/core.jl	/^baz4115(x::Foo4115s) = x$/;"	f
bb	src/llvm-alloc-opt.cpp	/^            BasicBlock *bb;$/;"	m	struct:__anon0a1571000111::Optimizer::Lifetime::Frame	typeref:typename:BasicBlock *	file:
bb-install	deps/tools/bb-install.mk	/^define bb-install$/;"	m
bb20704	test/compiler/inference.jl	/^bb20704() = b20704(Any[1.0][1])$/;"	f
bb_unreachable	base/compiler/ssair/domtree.jl	/^bb_unreachable(domtree::DomTree, bb::Int) = bb != 1 && domtree.nodes[bb].level == 1$/;"	f
bbidxiter	base/compiler/ssair/ir.jl	/^bbidxiter(ir::IRCode) = BBIdxIter(ir)$/;"	f
bc_opt	test/boundscheck_exec.jl	/^bc_opt = BCOption(Base.JLOptions().check_bounds)$/;"	v
bcast_eltype_20033	test/compiler/inference.jl	/^bcast_eltype_20033(f, A) = Core.Compiler.return_type(f, Tuple{eltype(A)})$/;"	f
bcast_setindex!	stdlib/SharedArrays/test/runtests.jl	/^@everywhere bcast_setindex!(S, v, I) = (for i in I; S[i] = v; end; S)$/;"	f
bcast_setindex!	test/bitarray.jl	/^bcast_setindex!(b, x, I...) = (b[I...] .= x; b)$/;"	f
bcode	src/flisp/flisp.h	/^    value_t bcode;$/;"	m	struct:__anonb455601d0708	typeref:typename:value_t
bdsdc!	stdlib/LinearAlgebra/src/lapack.jl	/^        function bdsdc!(uplo::AbstractChar, compq::AbstractChar, d::AbstractVector{$elty}, e_::A/;"	f
bdsqr!	stdlib/LinearAlgebra/src/lapack.jl	/^        function bdsqr!(uplo::AbstractChar, d::AbstractVector{$relty}, e_::AbstractVector{$relty/;"	f
bdver1	src/processor_x86.cpp	/^constexpr auto bdver1 = amdfam10 | get_feature_masks(xop, fma4, avx, ssse3, sse41, sse42, aes,$/;"	v	namespace:X86::Feature	typeref:typename:auto
bdver2	src/processor_x86.cpp	/^constexpr auto bdver2 = bdver1 | get_feature_masks(f16c, bmi, tbm, fma);$/;"	v	namespace:X86::Feature	typeref:typename:auto
bdver3	src/processor_x86.cpp	/^constexpr auto bdver3 = bdver2 | get_feature_masks(xsaveopt, fsgsbase);$/;"	v	namespace:X86::Feature	typeref:typename:auto
bdver4	src/processor_x86.cpp	/^constexpr auto bdver4 = bdver3 | get_feature_masks(avx2, bmi2, mwaitx);$/;"	v	namespace:X86::Feature	typeref:typename:auto
beep	stdlib/REPL/src/LineEdit.jl	/^beep(::ModeState) = nothing$/;"	f
beep	stdlib/REPL/src/LineEdit.jl	/^function beep(s::PromptState, duration::Real=options(s).beep_duration,$/;"	f
beep	stdlib/REPL/src/Terminals.jl	/^beep(t::TextTerminal) = nothing$/;"	f
beep	stdlib/REPL/src/Terminals.jl	/^beep(t::UnixTerminal) = write(t.err_stream,"\\x7")$/;"	f
beforecursor	stdlib/REPL/src/REPL.jl	/^beforecursor(buf::IOBuffer) = String(buf.data[1:buf.ptr-1])$/;"	f
begin	src/gc.h	/^    jl_binding_t **begin; \/\/ The first slot to be scanned.$/;"	m	struct:__anoncf30557c0c08	typeref:typename:jl_binding_t **
begin	src/gc.h	/^    jl_fielddesc16_t *begin; \/\/ Current field descriptor.$/;"	m	struct:__anoncf30557c0808	typeref:typename:jl_fielddesc16_t *
begin	src/gc.h	/^    jl_fielddesc32_t *begin; \/\/ Current field descriptor.$/;"	m	struct:__anoncf30557c0908	typeref:typename:jl_fielddesc32_t *
begin	src/gc.h	/^    jl_fielddesc8_t *begin; \/\/ Current field descriptor.$/;"	m	struct:__anoncf30557c0708	typeref:typename:jl_fielddesc8_t *
begin	src/gc.h	/^    jl_value_t **begin; \/\/ The first slot to be scanned.$/;"	m	struct:__anoncf30557c0608	typeref:typename:jl_value_t **
begin	src/gc.h	/^    jl_value_t **begin;$/;"	m	struct:__anoncf30557c0d08	typeref:typename:jl_value_t **
begin0	src/flisp/aliases.scm	/^(define-macro (begin0 first . rest)$/;"	f
beginofline	stdlib/REPL/src/LineEdit.jl	/^beginofline(buf, pos=position(buf)) = something(findprev(isequal(_newline), buf.data, pos), 0)$/;"	f
best_idx	src/processor.cpp	/^    uint32_t best_idx{(uint32_t)-1};$/;"	m	struct:__anon839834ed0111::SysimgMatch	typeref:typename:uint32_t	file:
best_tbaa	src/codegen.cpp	/^static MDNode *best_tbaa(jl_value_t *jt) {$/;"	f	typeref:typename:MDNode *	file:
bestkey	test/dict.jl	/^    bestkey(d, key) = key$/;"	f
bestkey	test/dict.jl	/^    bestkey(d::AbstractDict{K,V}, key) where {K<:AbstractString,V} = string(key)$/;"	f
bestmatch	stdlib/REPL/src/docview.jl	/^bestmatch(needle, haystack) =$/;"	f
bestmime	stdlib/Markdown/src/render/rich.jl	/^function bestmime(val)$/;"	f
between	base/strings/string.jl	/^@inline between(b::T, lo::T, hi::T) where {T<:Integer} = (lo ≤ b) & (b ≤ hi)$/;"	f
bi_fintrinsic	src/runtime_intrinsics.c	/^#define bi_fintrinsic(/;"	d	file:
bi_iintrinsic	src/runtime_intrinsics.c	/^#define bi_iintrinsic(/;"	d	file:
bi_iintrinsic_cnvtb_fast	src/runtime_intrinsics.c	/^#define bi_iintrinsic_cnvtb_fast(/;"	d	file:
bi_iintrinsic_fast	src/runtime_intrinsics.c	/^#define bi_iintrinsic_fast(/;"	d	file:
bi_intrinsic_ctype	src/runtime_intrinsics.c	/^#define bi_intrinsic_ctype(/;"	d	file:
bias	base/ryu/utils.jl	/^bias(::Type{Float16}) = 15$/;"	f
bias	base/ryu/utils.jl	/^bias(::Type{Float32}) = 127$/;"	f
bias	base/ryu/utils.jl	/^bias(::Type{Float64}) = 1023$/;"	f
bidiagcopy	stdlib/LinearAlgebra/test/bidiag.jl	/^            bidiagcopy(dv, ev, uplo) = Bidiagonal(copy(dv), copy(ev), uplo)$/;"	f
big	base/complex.jl	/^big(::Type{Complex{T}}) where {T<:Real} = Complex{big(T)}$/;"	f
big	base/complex.jl	/^big(z::Complex{T}) where {T<:Real} = Complex{big(T)}(z)$/;"	f
big	base/gmp.jl	/^big(::Type{<:Integer})  = BigInt$/;"	f
big	base/gmp.jl	/^big(::Type{<:Rational}) = Rational{BigInt}$/;"	f
big	base/gmp.jl	/^big(n::Integer) = convert(BigInt, n)$/;"	f
big	base/gmp.jl	/^function big end$/;"	f
big	base/irrationals.jl	/^big(::Type{<:AbstractIrrational}) = BigFloat$/;"	f
big	base/irrationals.jl	/^big(x::AbstractIrrational) = BigFloat(x)$/;"	f
big	base/mpfr.jl	/^big(::Type{<:AbstractFloat}) = BigFloat$/;"	f
big	base/mpfr.jl	/^big(x::AbstractFloat) = convert(BigFloat, x)$/;"	f
big	base/number.jl	/^big(::Type{T}) where {T<:Number} = typeof(big(zero(T)))$/;"	f
big	base/rational.jl	/^big(q::Rational) = big(numerator(q))\/\/big(denominator(q))$/;"	f
big	base/rational.jl	/^big(z::Complex{<:Rational{<:Integer}}) = Complex{Rational{BigInt}}(z)$/;"	f
big	base/twiceprecision.jl	/^big(x::TwicePrecision) = big(x.hi) + big(x.lo)$/;"	f
big-dynstr$(EXEEXT)	deps/srccache/patchelf-0.9/tests/Makefile.in	/^big-dynstr$(EXEEXT): $(big_dynstr_OBJECTS) $(big_dynstr_DEPENDENCIES) $(EXTRA_big_dynstr_DEPENDE/;"	t
big-dynstr.c	deps/srccache/patchelf-0.9/tests/Makefile.am	/^big-dynstr.c: main.c$/;"	t
big-dynstr.c	deps/srccache/patchelf-0.9/tests/Makefile.in	/^big-dynstr.c: main.c$/;"	t
big-dynstr.sh.log	deps/srccache/patchelf-0.9/tests/Makefile.in	/^big-dynstr.sh.log: big-dynstr.sh$/;"	t
bigAllocFunc	src/llvm-final-gc-lowering.cpp	/^    Function *bigAllocFunc;$/;"	m	struct:FinalLowerGC	typeref:typename:Function *	file:
big_dynstr_DEPENDENCIES	deps/srccache/patchelf-0.9/tests/Makefile.am	/^big_dynstr_DEPENDENCIES = libfoo.so$/;"	m
big_dynstr_DEPENDENCIES	deps/srccache/patchelf-0.9/tests/Makefile.in	/^big_dynstr_DEPENDENCIES = libfoo.so$/;"	m
big_dynstr_LDADD	deps/srccache/patchelf-0.9/tests/Makefile.am	/^big_dynstr_LDADD = -lfoo $(AM_LDADD)$/;"	m
big_dynstr_LDADD	deps/srccache/patchelf-0.9/tests/Makefile.in	/^big_dynstr_LDADD = -lfoo $(AM_LDADD)$/;"	m
big_dynstr_LDFLAGS	deps/srccache/patchelf-0.9/tests/Makefile.am	/^big_dynstr_LDFLAGS = $(LDFLAGS_local)$/;"	m
big_dynstr_LDFLAGS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^big_dynstr_LDFLAGS = $(LDFLAGS_local)$/;"	m
big_dynstr_LINK	deps/srccache/patchelf-0.9/tests/Makefile.in	/^big_dynstr_LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(big_dynstr_LDFLAGS) \\$/;"	m
big_dynstr_OBJECTS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^big_dynstr_OBJECTS = $(nodist_big_dynstr_OBJECTS)$/;"	m
big_freed	src/gc-debug.c	/^static int64_t big_freed;$/;"	v	typeref:typename:int64_t	file:
big_ln2	base/mpfr.jl	/^function big_ln2()$/;"	f
big_obj	src/julia_threads.h	/^    void *big_obj[1024];$/;"	m	struct:__anonf8aecdb10808	typeref:typename:void * [1024]
big_objects	src/julia_threads.h	/^    struct _bigval_t *big_objects;$/;"	m	struct:__anonf8aecdb10608	typeref:struct:_bigval_t *
big_objects_marked	src/gc.c	/^bigval_t *big_objects_marked = NULL;$/;"	v	typeref:typename:bigval_t *
big_reset	src/gc-debug.c	/^static int64_t big_reset;$/;"	v	typeref:typename:int64_t	file:
big_str	base/boot.jl	/^macro big_str end$/;"	f
big_str	base/int.jl	/^macro big_str(s)$/;"	f
big_sweep_start	src/gc-debug.c	/^static int64_t big_sweep_start;$/;"	v	typeref:typename:int64_t	file:
big_total	src/gc-debug.c	/^static int64_t big_total;$/;"	v	typeref:typename:int64_t	file:
bigalloc	src/gc.h	/^    uint64_t    bigalloc;$/;"	m	struct:__anoncf30557c0308	typeref:typename:uint64_t
bigalloc	src/julia_threads.h	/^    uint64_t    bigalloc;$/;"	m	struct:__anonf8aecdb10508	typeref:typename:uint64_t
bigfib	test/bigint.jl	/^function bigfib(n)$/;"	f
bigfloat_printf	base/printf.jl	/^function bigfloat_printf(out, d::BigFloat, flags::String, width::Int, precision::Int, c::Char, d/;"	f
bigfunction	base/expr.jl	/^@inline function bigfunction(x)$/;"	f
bigint_pow	base/gmp.jl	/^function bigint_pow(x::BigInt, y::Integer)$/;"	f
bigitat	base/grisu/bignums.jl	/^function bigitat(x::Bignum,index)$/;"	f
bigitlength	base/grisu/bignums.jl	/^bigitlength(x::Bignum) = x.used_digits + x.exponent$/;"	f
bigitshiftleft!	base/grisu/bignums.jl	/^function bigitshiftleft!(x::Bignum,shift_amount)$/;"	f
bignumdtoa	base/grisu/bignum.jl	/^function bignumdtoa(v,mode,requested_digits::Int,buffer,bignums)$/;"	f
bignums	test/grisu.jl	/^bignums = [Grisu.Bignums.Bignum(),Grisu.Bignums.Bignum(),Grisu.Bignums.Bignum(),Grisu.Bignums.Bi/;"	v
bignumtofixed!	base/grisu/bignum.jl	/^function bignumtofixed!(requested_digits,num,den,buffer,decimal_point)$/;"	f
bigpowten	base/grisu/fastshortest.jl	/^function bigpowten(n,n_bits)$/;"	f
bigval_header	src/gc.h	/^STATIC_INLINE bigval_t *bigval_header(jl_taggedvalue_t *o) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE bigval_t *
bigval_startoffset	test/gcext/gcext.c	/^static size_t bigval_startoffset;$/;"	v	typeref:typename:size_t	file:
bigval_t	src/gc.h	/^} bigval_t;$/;"	t	typeref:struct:_bigval_t
bigvals	test/gcext/gcext.c	/^static treap_t *bigvals;$/;"	v	typeref:typename:treap_t *	file:
bimg	stdlib/LinearAlgebra/test/bunchkaufman.jl	/^bimg  = randn(n,2)\/2$/;"	v
bimg	stdlib/LinearAlgebra/test/dense.jl	/^bimg  = randn(n,2)\/2$/;"	v
bimg	stdlib/LinearAlgebra/test/lq.jl	/^bimg  = randn(n,2)\/2$/;"	v
bimg	stdlib/LinearAlgebra/test/lu.jl	/^bimg  = randn(n,2)\/2$/;"	v
bimg	stdlib/LinearAlgebra/test/qr.jl	/^bimg  = randn(n,2)\/2$/;"	v
bin	base/intfuncs.jl	/^function bin(x::Unsigned, pad::Integer, neg::Bool)$/;"	f
bin_PROGRAMS	deps/srccache/patchelf-0.9/src/Makefile.am	/^bin_PROGRAMS = patchelf$/;"	m
bin_PROGRAMS	deps/srccache/patchelf-0.9/src/Makefile.in	/^bin_PROGRAMS = patchelf$(EXEEXT)$/;"	m
binary-dist	Makefile	/^binary-dist: distclean$/;"	t
bind	base/channels.jl	/^function bind(c::Channel, task::Task)$/;"	f
bind	stdlib/Sockets/src/PipeServer.jl	/^function bind(server::PipeServer, name::AbstractString)$/;"	f
bind	stdlib/Sockets/src/Sockets.jl	/^bind(sock::TCPServer, addr::InetAddr) = bind(sock, addr.host, addr.port)$/;"	f
bind	stdlib/Sockets/src/Sockets.jl	/^function bind(sock::Union{TCPServer, UDPSocket}, host::IPAddr, port::Integer; ipv6only = false, /;"	f
bind_client_port	stdlib/Distributed/src/managers.jl	/^function bind_client_port(s::TCPSocket)$/;"	f
binding	src/flisp/flisp.h	/^    value_t binding;   \/\/ global value binding$/;"	m	struct:__anonb455601d0208	typeref:typename:value_t
binding	src/flisp/flisp.h	/^    value_t binding;   \/\/ global value binding$/;"	m	struct:_symbol_t	typeref:typename:value_t
binding	src/gc.h	/^    gc_mark_binding_t binding;$/;"	m	union:_jl_gc_mark_data	typeref:typename:gc_mark_binding_t
binding	src/staticdata.c	/^            struct binding {$/;"	s	function:jl_reinit_item	file:
binding_module	base/reflection.jl	/^function binding_module(m::Module, s::Symbol)$/;"	f
bindingexpr	base/docs/bindings.jl	/^bindingexpr(x) = Expr(:call, Binding, splitexpr(x)...)$/;"	f
bindings	src/julia.h	/^    htable_t bindings;$/;"	m	struct:_jl_module_t	typeref:typename:htable_t
bindir	deps/srccache/patchelf-0.9/Makefile.in	/^bindir = @bindir@$/;"	m
bindir	deps/srccache/patchelf-0.9/src/Makefile.in	/^bindir = @bindir@$/;"	m
bindir	deps/srccache/patchelf-0.9/tests/Makefile.in	/^bindir = @bindir@$/;"	m
bindto	src/julia.h	/^    const char *bindto;$/;"	m	struct:__anon055fe4271808	typeref:typename:const char *
binexp_cache	base/grisu/float.jl	/^function binexp_cache(min_exponent,max_exponent)$/;"	f
binomial	base/gmp.jl	/^binomial(n::BigInt, k::Integer) = k < 0 ? BigInt(0) : binomial(n, UInt(k))$/;"	f
binomial	base/gmp.jl	/^binomial(n::BigInt, k::UInt) = MPZ.bin_ui(n, k)$/;"	f
binomial	base/intfuncs.jl	/^function binomial(n::T, k::T) where T<:Integer$/;"	f
binpack	base/loading.jl	/^function binpack(pkg::PkgId)$/;"	f
binunpack	base/loading.jl	/^function binunpack(s::String)$/;"	f
bit	src/processor.cpp	/^    uint32_t bit; \/\/ bit index into a `uint32_t` array;$/;"	m	struct:__anon839834ed0111::FeatureName	typeref:typename:uint32_t	file:
bit_map!	base/bitarray.jl	/^function bit_map!(f::F, dest::BitArray, A::BitArray) where F$/;"	f
bit_map!	base/bitarray.jl	/^function bit_map!(f::F, dest::BitArray, A::BitArray, B::BitArray) where F$/;"	f
bit_ndigits0z	base/intfuncs.jl	/^function bit_ndigits0z(x::Base.BitUnsigned64)$/;"	f
bit_ndigits0z	base/intfuncs.jl	/^function bit_ndigits0z(x::UInt128)$/;"	f
bitat	base/grisu/fastfixed.jl	/^bitat(x::UInt128,y) = y >= 64 ? (Int32(high(x) >> (y-64)) & 1) : (Int32(low(x) >> y) & 1)$/;"	f
bitcache_chunks	base/bitarray.jl	/^const bitcache_chunks = 64 # this can be changed$/;"	v
bitcache_size	base/bitarray.jl	/^const bitcache_size = 64 * bitcache_chunks # do not change this$/;"	v
bitcast_tfunc	base/compiler/tfuncs.jl	/^bitcast_tfunc(@nospecialize(t), @nospecialize(x)) = instanceof_tfunc(t)[1]$/;"	f
bitcheck	test/bitarray.jl	/^bitcheck(b::BitArray) = Test._check_bitarray_consistency(b)$/;"	f
bitcheck	test/bitarray.jl	/^bitcheck(x) = true$/;"	f
bitcnt_t	base/gmp.jl	/^const bitcnt_t = Culong$/;"	v
bitcount	base/bitarray.jl	/^function bitcount(Bc::Vector{UInt64})$/;"	f
bitlength	base/ryu/utils.jl	/^bitlength(this) = Base.GMP.MPZ.sizeinbase(this, 2)$/;"	f
bitmix	src/support/hashing.h	/^#define bitmix(/;"	d
bitmix	src/support/hashing.h	/^STATIC_INLINE uint32_t bitmix(uint32_t a, uint32_t b) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE uint32_t
bitmix	src/support/hashing.h	/^STATIC_INLINE uint64_t bitmix(uint64_t a, uint64_t b) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE uint64_t
bitrand	stdlib/Random/src/misc.jl	/^bitrand(dims::Dims)   = rand!(BitArray(undef, dims))$/;"	f
bitrand	stdlib/Random/src/misc.jl	/^bitrand(dims::Integer...) = rand!(BitArray(undef, convert(Dims, dims)))$/;"	f
bitrand	stdlib/Random/src/misc.jl	/^bitrand(r::AbstractRNG, dims::Dims)   = rand!(r, BitArray(undef, dims))$/;"	f
bitrand	stdlib/Random/src/misc.jl	/^bitrand(r::AbstractRNG, dims::Integer...) = rand!(r, BitArray(undef, convert(Dims, dims)))$/;"	f
bitres	test/copy.jl	/^bitres = ([true, true, false],$/;"	v
bits	src/gc.h	/^        } bits;$/;"	m	union:_bigval_t::__anoncf30557c0f0a	typeref:struct:_bigval_t::__anoncf30557c0f0a::__anoncf30557c1008
bits	src/gc.h	/^    uint8_t bits; \/\/ GC bits of the module (the bits to mark the binding buffer with)$/;"	m	struct:__anoncf30557c0c08	typeref:typename:uint8_t
bits	src/gc.h	/^    uint8_t bits; \/\/ The GC bits after tagging (`bits & 1 == 1`)$/;"	m	struct:__anoncf30557c0508	typeref:typename:uint8_t
bits	src/julia.h	/^        struct _jl_taggedvalue_bits bits;$/;"	m	union:_jl_taggedvalue_t::__anon055fe427010a	typeref:struct:_jl_taggedvalue_bits
bits32	src/runtime_intrinsics.c	/^} bits32;$/;"	t	typeref:union:__anonc5a5d9f6010a	file:
bits64	src/runtime_intrinsics.c	/^} bits64;$/;"	t	typeref:union:__anonc5a5d9f6020a	file:
bits_equal	src/builtins.c	/^static int bits_equal(void *a, void *b, int sz) JL_NOTSAFEPOINT$/;"	f	typeref:typename:int	file:
bits_hash	src/builtins.c	/^static uintptr_t bits_hash(const void *b, size_t sz) JL_NOTSAFEPOINT$/;"	f	typeref:typename:uintptr_t	file:
bits_in_Limb	stdlib/Random/src/generation.jl	/^const bits_in_Limb = sizeof(Limb) << 3$/;"	v
bits_per_limb	base/gmp.jl	/^bits_per_limb() = Int(unsafe_load(cglobal((:__gmp_bits_per_limb, :libgmp), Cint)))$/;"	f
bits_save	src/gc-debug.c	/^static arraylist_t bits_save[4];$/;"	v	typeref:typename:arraylist_t[4]	file:
bitshow	base/show.jl	/^bitshow(B::BitArray) = bitshow(stdout, B)$/;"	f
bitshow	base/show.jl	/^function bitshow(io::IO, B::BitArray)$/;"	f
bitsize	base/grisu/bignums.jl	/^bitsize(value) = 8 * sizeof(value)$/;"	f
bitstring	base/intfuncs.jl	/^bitstring(x::Union{Bool,Int8,UInt8})           = string(reinterpret(UInt8,x), pad = 8, base = 2)$/;"	f
bitstring	base/intfuncs.jl	/^bitstring(x::Union{Char,Int32,UInt32,Float32}) = string(reinterpret(UInt32,x), pad = 32, base = /;"	f
bitstring	base/intfuncs.jl	/^bitstring(x::Union{Int128,UInt128})            = string(reinterpret(UInt128,x), pad = 128, base /;"	f
bitstring	base/intfuncs.jl	/^bitstring(x::Union{Int16,UInt16,Float16})      = string(reinterpret(UInt16,x), pad = 16, base = /;"	f
bitstring	base/intfuncs.jl	/^bitstring(x::Union{Int64,UInt64,Float64})      = string(reinterpret(UInt64,x), pad = 64, base = /;"	f
bitstring	base/intfuncs.jl	/^function bitstring end$/;"	f
bitstring	base/show.jl	/^bitstring(B::BitArray) = sprint(bitshow, B)$/;"	f
bitstype_to_llvm	src/cgutils.cpp	/^static Type *bitstype_to_llvm(jl_value_t *bt)$/;"	f	typeref:typename:Type *	file:
bitsunionsize	base/array.jl	/^function bitsunionsize(u::Union)$/;"	f
bittest	test/broadcast.jl	/^bittest(f::Function, a...) = (@test f.(a...) == BitArray(broadcast(f, a...)))$/;"	f
bitvector_get	src/support/bitvector.c	/^uint32_t bitvector_get(uint32_t *b, uint64_t n)$/;"	f	typeref:typename:uint32_t
bitvector_new	src/support/bitvector.c	/^uint32_t *bitvector_new(uint64_t n, int initzero)$/;"	f	typeref:typename:uint32_t *
bitvector_nwords	src/support/bitvector.c	/^size_t bitvector_nwords(uint64_t nbits)$/;"	f	typeref:typename:size_t
bitvector_resize	src/support/bitvector.c	/^uint32_t *bitvector_resize(uint32_t *b, uint64_t oldsz, uint64_t newsz,$/;"	f	typeref:typename:uint32_t *
bitvector_set	src/support/bitvector.c	/^void bitvector_set(uint32_t *b, uint64_t n, uint32_t c)$/;"	f	typeref:typename:void
blackboard	stdlib/REPL/src/latex_symbols.jl	/^const blackboard = "\\\\bb"$/;"	v
blah31139	test/compiler/irpasses.jl	/^    blah31139(x) = getfield(x)$/;"	f
blankline	stdlib/Markdown/src/parse/util.jl	/^blankline(io::IO; eat = true) =$/;"	f
blascopy!	stdlib/LinearAlgebra/src/blas.jl	/^        function blascopy!(n::Integer, DX::Union{Ptr{$elty},AbstractArray{$elty}}, incx::Integer/;"	f
blascopy!	stdlib/LinearAlgebra/src/blas.jl	/^function blascopy! end$/;"	f
blasfunc	stdlib/LinearAlgebra/src/blas.jl	/^    macro blasfunc(x)$/;"	f
blob	stdlib/LibGit2/src/tree.jl	/^blob = LibGit2.GitBlob(tree_entry)$/;"	v
blob	test/gcext/LocalTest.jl	/^function blob(stack :: Stack)$/;"	f
blob_file	stdlib/LibGit2/src/blob.jl	/^blob_file = joinpath(repo_path, ".git", "objects", hash_str[1:2], hash_str[3:end])$/;"	v
block	src/timing.h	/^    jl_timing_block_t block;$/;"	m	struct:jl_timing_block_cpp_t	typeref:typename:jl_timing_block_t
block-form?	src/julia-parser.scm	/^(define block-form? (Set '(block quote if for while let function macro abstract primitive struct$/;"	f
block_for_inst	base/compiler/ssair/ir.jl	/^block_for_inst(cfg::CFG, inst::Int) = block_for_inst(cfg.index, inst)$/;"	f
block_for_inst	base/compiler/ssair/ir.jl	/^function block_for_inst(index::Vector{Int}, inst::Int)$/;"	f
block_pg_cnt	src/gc-pages.c	/^static int block_pg_cnt = DEFAULT_BLOCK_PG_ALLOC;$/;"	v	typeref:typename:int	file:
blockdiag	stdlib/SparseArrays/src/sparsematrix.jl	/^function blockdiag(X::AbstractSparseMatrixCSC...)$/;"	f
blockify	src/ast.scm	/^(define (blockify e)$/;"	f
blockindent	src/flisp/print.c	/^static int blockindent(fl_context_t *fl_ctx, value_t v)$/;"	f	typeref:typename:int	file:
blockinterp	stdlib/Markdown/src/Julia/interp.jl	/^function blockinterp(stream::IO, md::MD)$/;"	f
blocklen	stdlib/SHA/src/types.jl	/^blocklen(::Type{SHA1_CTX}) = UInt64(64)$/;"	f
blocklen	stdlib/SHA/src/types.jl	/^blocklen(::Type{SHA2_224_CTX}) = UInt64(64)$/;"	f
blocklen	stdlib/SHA/src/types.jl	/^blocklen(::Type{SHA2_256_CTX}) = UInt64(64)$/;"	f
blocklen	stdlib/SHA/src/types.jl	/^blocklen(::Type{SHA2_384_CTX}) = UInt64(128)$/;"	f
blocklen	stdlib/SHA/src/types.jl	/^blocklen(::Type{SHA2_512_CTX}) = UInt64(128)$/;"	f
blocklen	stdlib/SHA/src/types.jl	/^blocklen(::Type{SHA3_224_CTX}) = UInt64(25*8 - 2*digestlen(SHA3_224_CTX))$/;"	f
blocklen	stdlib/SHA/src/types.jl	/^blocklen(::Type{SHA3_256_CTX}) = UInt64(25*8 - 2*digestlen(SHA3_256_CTX))$/;"	f
blocklen	stdlib/SHA/src/types.jl	/^blocklen(::Type{SHA3_384_CTX}) = UInt64(25*8 - 2*digestlen(SHA3_384_CTX))$/;"	f
blocklen	stdlib/SHA/src/types.jl	/^blocklen(::Type{SHA3_512_CTX}) = UInt64(25*8 - 2*digestlen(SHA3_512_CTX))$/;"	f
blockpower!	stdlib/LinearAlgebra/src/triangular.jl	/^function blockpower!(A::UpperTriangular, A0::UpperTriangular, p)$/;"	f
blockquote	stdlib/Markdown/src/Common/block.jl	/^function blockquote(stream::IO, block::MD)$/;"	f
blocks	src/cgmemmgr.cpp	/^    Block blocks[nblocks]{};$/;"	m	class:__anon06c686bc0111::RWAllocator	typeref:typename:Block[]	file:
blocks	src/cgmemmgr.cpp	/^    SplitPtrBlock blocks[nblocks];$/;"	m	class:__anon06c686bc0111::ROAllocator	typeref:typename:SplitPtrBlock[]	file:
blocktex	stdlib/Markdown/src/IPython/IPython.jl	/^function blocktex(stream::IO, md::MD)$/;"	f
bm_block	src/support/ios.h	/^typedef enum { bm_none=UV_HANDLE_TYPE_MAX+1, bm_line, bm_block, bm_mem } bufmode_t;$/;"	e	enum:__anon16412ac90103
bm_line	src/support/ios.h	/^typedef enum { bm_none=UV_HANDLE_TYPE_MAX+1, bm_line, bm_block, bm_mem } bufmode_t;$/;"	e	enum:__anon16412ac90103
bm_mem	src/support/ios.h	/^typedef enum { bm_none=UV_HANDLE_TYPE_MAX+1, bm_line, bm_block, bm_mem } bufmode_t;$/;"	e	enum:__anon16412ac90103
bm_none	src/support/ios.h	/^typedef enum { bm_none=UV_HANDLE_TYPE_MAX+1, bm_line, bm_block, bm_mem } bufmode_t;$/;"	e	enum:__anon16412ac90103
bnopc	test/precompile.jl	/^          bnopc(x) = anopc(x, x)$/;"	f
bo	test/offsetarray.jl	/^bo = OffsetArray(1:2, (-3,))$/;"	v
body	src/julia.h	/^    jl_value_t *body;$/;"	m	struct:__anon055fe4270908	typeref:typename:jl_value_t *
body	test/meta.jl	/^body = Expr(:block)$/;"	v
body.args	test/meta.jl	/^body.args = ast.code$/;"	v
body_attributes	src/toplevel.c	/^static void body_attributes(jl_array_t *body, int *has_intrinsics, int *has_defs, int *has_loops/;"	f	typeref:typename:void	file:
bold	stdlib/REPL/src/latex_symbols.jl	/^const bold = "\\\\bf"$/;"	v
boldfrak	stdlib/REPL/src/latex_symbols.jl	/^const boldfrak = "\\\\bfrak"$/;"	v
bolditalic	stdlib/REPL/src/latex_symbols.jl	/^const bolditalic = "\\\\bi"$/;"	v
bolditalicsans	stdlib/REPL/src/latex_symbols.jl	/^const bolditalicsans = "\\\\bisans"$/;"	v
boldsans	stdlib/REPL/src/latex_symbols.jl	/^const boldsans = "\\\\bsans"$/;"	v
boldscript	stdlib/REPL/src/latex_symbols.jl	/^const boldscript = "\\\\bscr"$/;"	v
bonnell	src/processor_x86.cpp	/^constexpr auto bonnell = get_feature_masks(sse3, ssse3, cx16, movbe, sahf);$/;"	v	namespace:X86::Feature	typeref:typename:auto
boo32_64	test/arrayops.jl	/^    boo32_64() = [ foo32_64(i) for i=1:2 ]$/;"	f
book	stdlib/Markdown/test/runtests.jl	/^book = md"""$/;"	v
bool_fintrinsic	src/runtime_intrinsics.c	/^#define bool_fintrinsic(/;"	d	file:
bool_fintrinsic	src/runtime_intrinsics.c	/^bool_fintrinsic(eq,eq_float)$/;"	f
bool_iintrinsic_fast	src/runtime_intrinsics.c	/^#define bool_iintrinsic_fast(/;"	d	file:
bool_intrinsic_ctype	src/runtime_intrinsics.c	/^#define bool_intrinsic_ctype(/;"	d	file:
bool_t	src/support/dtypes.h	/^typedef int bool_t;$/;"	t	typeref:typename:int
booleansym	src/flisp/flisp.h	/^    value_t tsym, Tsym, fsym, Fsym, booleansym, nullsym, evalsym, fnsym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
boor	test/core.jl	/^    boor(x) = 0$/;"	f
boor	test/core.jl	/^    boor(x::Union) = 1$/;"	f
bothfixnums	src/flisp/flisp.h	/^#define bothfixnums(/;"	d
bounded_compare	src/flisp/equal.c	/^static value_t bounded_compare(fl_context_t *fl_ctx, value_t a, value_t b, int bound, int eq)$/;"	f	typeref:typename:value_t	file:
bounded_hash	src/flisp/equal.c	/^static uintptr_t bounded_hash(fl_context_t *fl_ctx, value_t a, int bound, int *oob)$/;"	f	typeref:typename:uintptr_t	file:
bounded_vector_compare	src/flisp/equal.c	/^static value_t bounded_vector_compare(fl_context_t *fl_ctx, value_t a, value_t b, int bound, int/;"	f	typeref:typename:value_t	file:
bounds-to-TypeVar	src/julia-syntax.scm	/^(define (bounds-to-TypeVar v (unmangle #f))$/;"	f
bounds_check_enabled	src/cgutils.cpp	/^static bool bounds_check_enabled(jl_codectx_t &ctx, jl_value_t *inbounds) {$/;"	f	typeref:typename:bool	file:
bounds_error	src/flisp/flisp.c	/^void bounds_error(fl_context_t *fl_ctx, const char *fname, value_t arr, value_t ind)$/;"	f	typeref:typename:void
boundscheck	base/essentials.jl	/^macro boundscheck(blk)$/;"	f
boundscheck_sym	src/ast.c	/^jl_sym_t *boundscheck_sym; jl_sym_t *inbounds_sym;$/;"	v	typeref:typename:jl_sym_t *
box_ccall_result	src/ccall.cpp	/^static Value *box_ccall_result(jl_codectx_t &ctx, Value *result, Value *runtime_dt, jl_value_t */;"	f	typeref:typename:Value *	file:
box_char_func	src/codegen.cpp	/^static Function *box_char_func;$/;"	v	typeref:typename:Function *	file:
box_float32_func	src/codegen.cpp	/^static Function *box_float32_func;$/;"	v	typeref:typename:Function *	file:
box_float64_func	src/codegen.cpp	/^static Function *box_float64_func;$/;"	v	typeref:typename:Function *	file:
box_int16_func	src/codegen.cpp	/^static Function *box_int16_func;$/;"	v	typeref:typename:Function *	file:
box_int32_func	src/codegen.cpp	/^static Function *box_int32_func;$/;"	v	typeref:typename:Function *	file:
box_int64_func	src/codegen.cpp	/^static Function *box_int64_func;$/;"	v	typeref:typename:Function *	file:
box_int8_func	src/codegen.cpp	/^static Function *box_int8_func;$/;"	v	typeref:typename:Function *	file:
box_special_cases1	test/clangsa/MissingRoots.c	/^void box_special_cases1(int i) {$/;"	f	typeref:typename:void
box_special_cases2	test/clangsa/MissingRoots.c	/^void box_special_cases2() {$/;"	f	typeref:typename:void
box_ssavalue_func	src/codegen.cpp	/^static Function *box_ssavalue_func;$/;"	v	typeref:typename:Function *	file:
box_uint16_func	src/codegen.cpp	/^static Function *box_uint16_func;$/;"	v	typeref:typename:Function *	file:
box_uint32_func	src/codegen.cpp	/^static Function *box_uint32_func;$/;"	v	typeref:typename:Function *	file:
box_uint64_func	src/codegen.cpp	/^static Function *box_uint64_func;$/;"	v	typeref:typename:Function *	file:
box_uint8_func	src/codegen.cpp	/^static Function *box_uint8_func;$/;"	v	typeref:typename:Function *	file:
box_union	src/cgutils.cpp	/^static Value *box_union(jl_codectx_t &ctx, const jl_cgval_t &vinfo, const SmallBitVector &skip)$/;"	f	typeref:typename:Value *	file:
boxed	src/cgutils.cpp	/^static Value *boxed(jl_codectx_t &ctx, const jl_cgval_t &vinfo)$/;"	f	typeref:typename:Value *	file:
boxed_int8_cache	src/datatype.c	/^static jl_value_t *boxed_int8_cache[256];$/;"	v	typeref:typename:jl_value_t * [256]	file:
boxed_something	test/clangsa/MissingRoots.c	/^jl_value_t *boxed_something() {$/;"	f	typeref:typename:jl_value_t *
boxed_struct	test/llvmcall.jl	/^    mutable struct boxed_struct$/;"	f
boxed_uint8_cache	src/datatype.c	/^static jl_value_t *boxed_uint8_cache[256];$/;"	v	typeref:typename:jl_value_t * [256]	file:
boxedunions	test/core.jl	/^const boxedunions = [Union{}, Union{String, Nothing}]$/;"	v
boxfunc_llvm	src/intrinsics.cpp	/^static Function *boxfunc_llvm(FunctionType *ft, const std::string &cname,$/;"	f	typeref:typename:Function *	file:
boxroot	src/codegen.cpp	/^    Instruction *boxroot; \/\/ an address, if the var might be in a jl_value_t** stack slot (mar/;"	m	struct:jl_varinfo_t	typeref:typename:Instruction *	file:
bp	src/flisp/flisp.c	/^    uint32_t bp;$/;"	v	typeref:typename:uint32_t
bpc	test/precompile.jl	/^          bpc(x) = apc(x, x)$/;"	f
bq-expand-arglist	src/macroexpand.scm	/^(define (bq-expand-arglist lst d)$/;"	f
bracket_outer	src/disasm.cpp	/^    bool bracket_outer = false;$/;"	m	class:DILineInfoPrinter	typeref:typename:bool	file:
bracketed_paste	stdlib/REPL/src/LineEdit.jl	/^function bracketed_paste(s; tabwidth=options(s).tabwidth)$/;"	f
branch	stdlib/LibGit2/src/LibGit2.jl	/^function branch(repo::GitRepo)$/;"	f
branch	stdlib/LibGit2/src/reference.jl	/^function branch(ref::GitReference)$/;"	f
branch!	stdlib/LibGit2/src/LibGit2.jl	/^function branch!(repo::GitRepo, branch_name::AbstractString,$/;"	f
break_21369	test/compiler/inference.jl	/^function break_21369()$/;"	f
break_me_docs	test/docs.jl	/^function break_me_docs end$/;"	f
breaking	stdlib/Markdown/src/parse/config.jl	/^breaking(f) = get(meta(f), :breaking, false)$/;"	f
breaking	stdlib/Markdown/src/parse/config.jl	/^macro breaking(ex)$/;"	f
breaking!	stdlib/Markdown/src/parse/config.jl	/^breaking!(f) = meta(f)[:breaking] = true$/;"	f
breakpoint_badref	test/compiler/codegen.jl	/^breakpoint_badref(a::MutableStruct) = ccall(:jl_breakpoint, Cvoid, (Ptr{BadRef},), a)$/;"	f
breakpoint_mutable	test/compiler/codegen.jl	/^breakpoint_mutable(a::MutableStruct) = ccall(:jl_breakpoint, Cvoid, (Ref{MutableStruct},), a)$/;"	f
breakpoint_ptrstruct	test/compiler/codegen.jl	/^breakpoint_ptrstruct(a::RealStruct) =$/;"	f
breal	stdlib/LinearAlgebra/test/bunchkaufman.jl	/^breal = randn(n,2)\/2$/;"	v
breal	stdlib/LinearAlgebra/test/dense.jl	/^breal = randn(n,2)\/2$/;"	v
breal	stdlib/LinearAlgebra/test/lq.jl	/^breal = randn(n,2)\/2$/;"	v
breal	stdlib/LinearAlgebra/test/lu.jl	/^breal = randn(n,2)\/2$/;"	v
breal	stdlib/LinearAlgebra/test/qr.jl	/^breal = randn(n,2)\/2$/;"	v
broadcast	base/broadcast.jl	/^@inline broadcast(f, t::NTuple{N,Any}, ts::Vararg{NTuple{N,Any}}) where {N} = map(f, t, ts...)$/;"	f
broadcast	base/broadcast.jl	/^@inline broadcast(f, x::Number...) = f(x...)$/;"	f
broadcast	base/broadcast.jl	/^broadcast(f::Tf, As...) where {Tf} = materialize(broadcasted(f, As...))$/;"	f
broadcast	stdlib/LinearAlgebra/src/adjtrans.jl	/^broadcast(f, avs::Union{Number,AdjointAbsVec}...) = adjoint(broadcast((xs...) -> adjoint(f(adjoi/;"	f
broadcast	stdlib/LinearAlgebra/src/adjtrans.jl	/^broadcast(f, tvs::Union{Number,TransposeAbsVec}...) = transpose(broadcast((xs...) -> transpose(f/;"	f
broadcast	stdlib/SparseArrays/src/higherorderfns.jl	/^broadcast(f::Tf, ::Type{T}, A::AbstractSparseMatrixCSC) where {Tf,T} = broadcast(y -> f(T, y), A/;"	f
broadcast	stdlib/SparseArrays/src/higherorderfns.jl	/^broadcast(f::Tf, A::AbstractSparseMatrixCSC, ::Type{T}) where {Tf,T} = broadcast(x -> f(x, T), A/;"	f
broadcast	stdlib/SparseArrays/src/sparsevector.jl	/^        broadcast(::typeof($fun), x::AbstractSparseVector, y::AbstractSparseVector) = _bcast_bin/;"	f
broadcast	stdlib/SparseArrays/src/sparsevector.jl	/^        broadcast(::typeof($fun), x::SparseVector, y::SparseVector) = _bcast_binary_map($fun, x,/;"	f
broadcast	test/arrayops.jl	/^    broadcast(::typeof(*), x::MeterUnits{T,1}, y::MeterUnits{T,1}) where {T} = MeterUnits{T,2}(x/;"	f
broadcast!	base/broadcast.jl	/^broadcast!(f::Tf, dest, As::Vararg{Any,N}) where {Tf,N} = (materialize!(dest, broadcasted(f, As./;"	f
broadcast_axes	base/broadcast.jl	/^const broadcast_axes = axes$/;"	v
broadcast_preserving_zero_d	base/broadcast.jl	/^@inline broadcast_preserving_zero_d(f) = fill(f())$/;"	f
broadcast_preserving_zero_d	base/broadcast.jl	/^@inline broadcast_preserving_zero_d(f, as::Number...) = fill(f(as...))$/;"	f
broadcast_preserving_zero_d	base/broadcast.jl	/^@inline function broadcast_preserving_zero_d(f, As...)$/;"	f
broadcast_shape	base/broadcast.jl	/^broadcast_shape(shape::Tuple) = shape$/;"	f
broadcast_shape	base/broadcast.jl	/^broadcast_shape(shape::Tuple, shape1::Tuple, shapes::Tuple...) = broadcast_shape(_bcs(shape, sha/;"	f
broadcast_unalias	base/broadcast.jl	/^broadcast_unalias(::Nothing, src) = src$/;"	f
broadcast_unalias	base/broadcast.jl	/^broadcast_unalias(dest, src) = dest === src ? src : unalias(dest, src)$/;"	f
broadcastable	base/broadcast.jl	/^broadcastable(::Type{T}) where {T} = Ref{Type{T}}(T)$/;"	f
broadcastable	base/broadcast.jl	/^broadcastable(::Union{AbstractDict, NamedTuple}) = throw(ArgumentError("broadcasting over dictio/;"	f
broadcastable	base/broadcast.jl	/^broadcastable(x) = collect(x)$/;"	f
broadcastable	base/broadcast.jl	/^broadcastable(x::Union{AbstractArray,Number,Ref,Tuple,Broadcasted}) = x$/;"	f
broadcastable	base/broadcast.jl	/^broadcastable(x::Union{Symbol,AbstractString,Function,UndefInitializer,Nothing,RoundingMode,Miss/;"	f
broadcasted	base/broadcast.jl	/^@inline function broadcasted(f, arg1, arg2, args...)$/;"	f
broadcasted	base/broadcast.jl	/^@inline function broadcasted(f, arg1, args...)$/;"	f
broadcasted	base/broadcast.jl	/^@inline function broadcasted(f, args...)$/;"	f
broadcasted	base/broadcast.jl	/^broadcasted(::DefaultArrayStyle{1}, ::typeof(*), r::AbstractRange, x::Number) = range(first(r)*x/;"	f
broadcasted	base/broadcast.jl	/^broadcasted(::DefaultArrayStyle{1}, ::typeof(*), r::LinRange, x::Number) = LinRange(r.start * x,/;"	f
broadcasted	base/broadcast.jl	/^broadcasted(::DefaultArrayStyle{1}, ::typeof(*), r::StepRangeLen{T}, x::Number) where {T} =$/;"	f
broadcasted	base/broadcast.jl	/^broadcasted(::DefaultArrayStyle{1}, ::typeof(*), x::Number, r::AbstractRange) = range(x*first(r)/;"	f
broadcasted	base/broadcast.jl	/^broadcasted(::DefaultArrayStyle{1}, ::typeof(*), x::Number, r::LinRange) = LinRange(x * r.start,/;"	f
broadcasted	base/broadcast.jl	/^broadcasted(::DefaultArrayStyle{1}, ::typeof(*), x::Number, r::StepRangeLen{T}) where {T} =$/;"	f
broadcasted	base/broadcast.jl	/^broadcasted(::DefaultArrayStyle{1}, ::typeof(+), r1::AbstractRange, r2::AbstractRange) = r1 + r2$/;"	f
broadcasted	base/broadcast.jl	/^broadcasted(::DefaultArrayStyle{1}, ::typeof(+), r::AbstractRange, x::Number) = range(first(r) +/;"	f
broadcasted	base/broadcast.jl	/^broadcasted(::DefaultArrayStyle{1}, ::typeof(+), r::AbstractUnitRange, x::Real) = range(first(r)/;"	f
broadcasted	base/broadcast.jl	/^broadcasted(::DefaultArrayStyle{1}, ::typeof(+), r::LinRange) = r$/;"	f
broadcasted	base/broadcast.jl	/^broadcasted(::DefaultArrayStyle{1}, ::typeof(+), r::LinRange, x::Number) = LinRange(r.start + x,/;"	f
broadcasted	base/broadcast.jl	/^broadcasted(::DefaultArrayStyle{1}, ::typeof(+), r::OrdinalRange) = r$/;"	f
broadcasted	base/broadcast.jl	/^broadcasted(::DefaultArrayStyle{1}, ::typeof(+), r::StepRangeLen) = r$/;"	f
broadcasted	base/broadcast.jl	/^broadcasted(::DefaultArrayStyle{1}, ::typeof(+), x::Number, r::AbstractRange) = range(x + first(/;"	f
broadcasted	base/broadcast.jl	/^broadcasted(::DefaultArrayStyle{1}, ::typeof(+), x::Number, r::LinRange) = LinRange(x + r.start,/;"	f
broadcasted	base/broadcast.jl	/^broadcasted(::DefaultArrayStyle{1}, ::typeof(+), x::Real, r::AbstractUnitRange) = range(x + firs/;"	f
broadcasted	base/broadcast.jl	/^broadcasted(::DefaultArrayStyle{1}, ::typeof(-), r1::AbstractRange, r2::AbstractRange) = r1 - r2$/;"	f
broadcasted	base/broadcast.jl	/^broadcasted(::DefaultArrayStyle{1}, ::typeof(-), r::AbstractRange, x::Number) = range(first(r)-x/;"	f
broadcasted	base/broadcast.jl	/^broadcasted(::DefaultArrayStyle{1}, ::typeof(-), r::AbstractUnitRange, x::Number) = range(first(/;"	f
broadcasted	base/broadcast.jl	/^broadcasted(::DefaultArrayStyle{1}, ::typeof(-), r::LinRange) = LinRange(-r.start, -r.stop, leng/;"	f
broadcasted	base/broadcast.jl	/^broadcasted(::DefaultArrayStyle{1}, ::typeof(-), r::LinRange, x::Number) = LinRange(r.start - x,/;"	f
broadcasted	base/broadcast.jl	/^broadcasted(::DefaultArrayStyle{1}, ::typeof(-), r::OrdinalRange) = range(-first(r), step=-step(/;"	f
broadcasted	base/broadcast.jl	/^broadcasted(::DefaultArrayStyle{1}, ::typeof(-), r::StepRangeLen) = StepRangeLen(-r.ref, -r.step/;"	f
broadcasted	base/broadcast.jl	/^broadcasted(::DefaultArrayStyle{1}, ::typeof(-), x::Number, r::AbstractRange) = range(x-first(r)/;"	f
broadcasted	base/broadcast.jl	/^broadcasted(::DefaultArrayStyle{1}, ::typeof(-), x::Number, r::LinRange) = LinRange(x - r.start,/;"	f
broadcasted	base/broadcast.jl	/^broadcasted(::DefaultArrayStyle{1}, ::typeof(\/), r::AbstractRange, x::Number) = range(first(r)\//;"	f
broadcasted	base/broadcast.jl	/^broadcasted(::DefaultArrayStyle{1}, ::typeof(\/), r::LinRange, x::Number) = LinRange(r.start \/ /;"	f
broadcasted	base/broadcast.jl	/^broadcasted(::DefaultArrayStyle{1}, ::typeof(\/), r::StepRangeLen{T}, x::Number) where {T} =$/;"	f
broadcasted	base/broadcast.jl	/^broadcasted(::DefaultArrayStyle{1}, ::typeof(\\), x::Number, r::AbstractRange) = range(x\\first(/;"	f
broadcasted	base/broadcast.jl	/^broadcasted(::DefaultArrayStyle{1}, ::typeof(\\), x::Number, r::LinRange) = LinRange(x \\ r.star/;"	f
broadcasted	base/broadcast.jl	/^broadcasted(::DefaultArrayStyle{1}, ::typeof(\\), x::Number, r::StepRangeLen) = StepRangeLen(x\\/;"	f
broadcasted	base/broadcast.jl	/^broadcasted(::DefaultArrayStyle{1}, ::typeof(big), r::LinRange) = LinRange(big(r.start), big(r.s/;"	f
broadcasted	base/broadcast.jl	/^broadcasted(::DefaultArrayStyle{1}, ::typeof(big), r::StepRange) = big(r.start):big(r.step):big(/;"	f
broadcasted	base/broadcast.jl	/^broadcasted(::DefaultArrayStyle{1}, ::typeof(big), r::StepRangeLen) = StepRangeLen(big(r.ref), b/;"	f
broadcasted	base/broadcast.jl	/^broadcasted(::DefaultArrayStyle{1}, ::typeof(big), r::UnitRange) = big(r.start):big(last(r))$/;"	f
broadcasted	base/broadcast.jl	/^function broadcasted(::typeof(-), j::CartesianIndex{N}, I::CartesianIndices{N}) where N$/;"	f
broadcasted_kwsyntax	base/broadcast.jl	/^@inline broadcasted_kwsyntax(f, args...; kwargs...) = broadcasted((args...)->f(args...; kwargs../;"	f
broadwell	src/processor_x86.cpp	/^constexpr auto broadwell = haswell | get_feature_masks(adx, rdseed, prfchw);$/;"	v	namespace:X86::Feature	typeref:typename:auto
broken	test/syntax.jl	/^        function broken()$/;"	f
brokenSignedInt	base/checked.jl	/^brokenSignedInt = Union{}$/;"	v
brokenSignedIntMul	base/checked.jl	/^brokenSignedIntMul = Int128$/;"	v
brokenUnsignedInt	base/checked.jl	/^brokenUnsignedInt = Union{}$/;"	v
brokenUnsignedIntMul	base/checked.jl	/^brokenUnsignedIntMul = UInt128$/;"	v
bs	stdlib/Distributed/test/distributed_exec.jl	/^bs = deepcopy(as)$/;"	v
bslash_completions	stdlib/REPL/src/REPLCompletions.jl	/^function bslash_completions(string, pos)::Tuple{Bool, Completions}$/;"	f
bslash_separators	stdlib/REPL/src/REPLCompletions.jl	/^const bslash_separators = [whitespace_chars..., "\\"'`"...]$/;"	v
bst_none	src/support/ios.h	/^typedef enum { bst_none, bst_rd, bst_wr } bufstate_t;$/;"	e	enum:__anon16412ac90203
bst_rd	src/support/ios.h	/^typedef enum { bst_none, bst_rd, bst_wr } bufstate_t;$/;"	e	enum:__anon16412ac90203
bst_wr	src/support/ios.h	/^typedef enum { bst_none, bst_rd, bst_wr } bufstate_t;$/;"	e	enum:__anon16412ac90203
bswap	base/complex.jl	/^bswap(z::Complex) = Complex(bswap(real(z)), bswap(imag(z)))$/;"	f
bswap	base/float.jl	/^bswap(x::IEEEFloat) = bswap_int(x)$/;"	f
bswap	base/int.jl	/^bswap(x::Union{Int16, UInt16, Int32, UInt32, Int64, UInt64, Int128, UInt128}) =$/;"	f
bswap	base/int.jl	/^bswap(x::Union{Int8, UInt8}) = x$/;"	f
bswap!	stdlib/SHA/src/base_functions.jl	/^bswap!(x::Vector{<:Integer}) = map!(bswap, x, x)$/;"	f
bswap_16	src/support/utils.h	/^#define bswap_16(/;"	d
bswap_32	src/support/utils.h	/^#define bswap_32(/;"	d
bswap_64	src/support/utils.h	/^#define bswap_64(/;"	d
bt	test/backtrace.jl	/^bt = eval(quote$/;"	v
bt	test/backtrace.jl	/^bt() = bt1()$/;"	f
bt1	test/backtrace.jl	/^@inline bt1() = bt2()$/;"	f
bt2	test/backtrace.jl	/^@inline bt2() = backtrace()$/;"	f
bt_context_t	src/julia_internal.h	/^typedef CONTEXT bt_context_t;$/;"	t	typeref:typename:CONTEXT
bt_context_t	src/julia_internal.h	/^typedef int bt_context_t;$/;"	t	typeref:typename:int
bt_context_t	src/julia_internal.h	/^typedef unw_context_t bt_context_t;$/;"	t	typeref:typename:unw_context_t
bt_cursor_t	src/julia_internal.h	/^typedef CONTEXT bt_cursor_t;$/;"	t	typeref:typename:CONTEXT
bt_cursor_t	src/julia_internal.h	/^typedef int bt_cursor_t;$/;"	t	typeref:typename:int
bt_cursor_t	src/julia_internal.h	/^typedef unw_cursor_t bt_cursor_t;$/;"	t	typeref:typename:unw_cursor_t
bt_cursor_t	src/julia_internal.h	/^} bt_cursor_t;$/;"	t	typeref:struct:__anon9dd660c30208
bt_data	src/julia_threads.h	/^    uintptr_t *bt_data; \/\/ JL_MAX_BT_SIZE + 1 elements long$/;"	m	struct:_jl_tls_states_t	typeref:typename:uintptr_t *
bt_data_prof	src/signal-handling.c	/^static volatile intptr_t *bt_data_prof = NULL;$/;"	v	typeref:typename:volatile intptr_t *	file:
bt_size	src/julia_threads.h	/^    size_t bt_size;    \/\/ Size for backtrace in transit in bt_data$/;"	m	struct:_jl_tls_states_t	typeref:typename:size_t
bt_size_cur	src/signal-handling.c	/^static volatile size_t bt_size_cur = 0;$/;"	v	typeref:typename:volatile size_t	file:
bt_size_max	src/signal-handling.c	/^static volatile size_t bt_size_max = 0;$/;"	v	typeref:typename:volatile size_t	file:
btmacro	test/backtrace.jl	/^function btmacro()$/;"	f
btver1	src/processor_x86.cpp	/^constexpr auto btver1 = amdfam10 | get_feature_masks(ssse3, prfchw);$/;"	v	namespace:X86::Feature	typeref:typename:auto
btver2	src/processor_x86.cpp	/^constexpr auto btver2 = btver1 | get_feature_masks(sse41, sse42, avx, aes, pclmul, bmi, f16c,$/;"	v	namespace:X86::Feature	typeref:typename:auto
buf	deps/srccache/patchelf-0.9/tests/main.c	/^char buf[16 * 1024 * 1024];$/;"	v	typeref:typename:char[]
buf	deps/srccache/patchelf-0.9/tests/simple.c	/^char buf[16 * 1024 * 1024];$/;"	v	typeref:typename:char[]
buf	src/flisp/flisp.h	/^    fl_jmp_buf buf;$/;"	m	struct:_ectx_t	typeref:typename:fl_jmp_buf
buf	src/subtype.c	/^    int8_t *buf;$/;"	m	struct:__anon0f0258f90208	typeref:typename:int8_t *	file:
buf	stdlib/REPL/test/TerminalMenus/multiselect_menu.jl	/^buf = IOBuffer()$/;"	v
buf	stdlib/REPL/test/TerminalMenus/radio_menu.jl	/^buf = IOBuffer()$/;"	v
buf	stdlib/REPL/test/lineedit.jl	/^buf = IOBuffer("4 +aaa+ x")$/;"	v
buf	stdlib/REPL/test/lineedit.jl	/^buf = IOBuffer("a\\na\\na\\n")$/;"	v
buf	stdlib/REPL/test/lineedit.jl	/^buf = IOBuffer("type X\\n    a::Int\\nend")$/;"	v
buf	stdlib/REPL/test/lineedit.jl	/^buf = IOBuffer("type X\\n ")$/;"	v
buf	stdlib/REPL/test/lineedit.jl	/^buf = IOBuffer("type X\\n\\n")$/;"	v
buf	stdlib/REPL/test/lineedit.jl	/^buf = IOBuffer("x = func(arg1,arg2 , arg3)")$/;"	v
buf	stdlib/REPL/test/lineedit.jl	/^buf = IOBuffer("ŷ")$/;"	v
buf	test/errorshow.jl	/^buf = IOBuffer()$/;"	v
buf_put2c	src/support/utf8.c	/^static inline int buf_put2c(char *buf, const char *src)$/;"	f	typeref:typename:int	file:
buf_ref	stdlib/LibGit2/src/types.jl	/^buf_ref = Ref(Buffer())$/;"	v
bufcontents	test/iobuffer.jl	/^bufcontents(io::Base.GenericIOBuffer) = unsafe_string(pointer(io.data), io.size)$/;"	f
bufend	stdlib/REPL/src/LineEdit.jl	/^bufend(s) = buffer(s).size$/;"	f
buffer	src/dump.c	/^                } buffer;$/;"	m	union:jl_deserialize_datatype::__anon570497e3020a	typeref:struct:jl_deserialize_datatype::__anon570497e3020a::__anon570497e30308	file:
buffer	stdlib/REPL/src/LineEdit.jl	/^buffer(s::IOBuffer) = s$/;"	f
buffer	stdlib/REPL/src/LineEdit.jl	/^buffer(s::PrefixSearchState) = s.response_buffer$/;"	f
buffer	stdlib/REPL/src/LineEdit.jl	/^buffer(s::PromptState) = s.input_buffer$/;"	f
buffer	stdlib/REPL/src/LineEdit.jl	/^buffer(s::SearchState) = s.query_buffer$/;"	f
buffer	test/grisu.jl	/^buffer = Vector{UInt8}(undef, bufsize)$/;"	v
buffer_pointer	stdlib/SHA/src/types.jl	/^buffer_pointer(ctx::T) where {T<:SHA_CTX} = Ptr{state_type(T)}(pointer(ctx.buffer))$/;"	f
buffer_writes	base/io.jl	/^buffer_writes(io::AbstractPipe, args...) = buffer_writes(pipe_writer(io), args...)$/;"	f
buffer_writes	base/io.jl	/^buffer_writes(x::IO, bufsize=SZ_UNBUFFERED_IO) = x$/;"	f
buffer_writes	base/stream.jl	/^buffer_writes(s::BufferStream, bufsize=0) = (s.buffer_writes = true; s)$/;"	f
buffer_writes	base/stream.jl	/^function buffer_writes(s::LibuvStream, bufsize)$/;"	f
buffercontents	stdlib/REPL/test/repl.jl	/^function buffercontents(buf::IOBuffer)$/;"	f
bufmode_t	src/support/ios.h	/^typedef enum { bm_none=UV_HANDLE_TYPE_MAX+1, bm_line, bm_block, bm_mem } bufmode_t;$/;"	t	typeref:enum:__anon16412ac90103
bufsize	test/grisu.jl	/^const bufsize = 500$/;"	v
bufstate_t	src/support/ios.h	/^typedef enum { bst_none, bst_rd, bst_wr } bufstate_t;$/;"	t	typeref:enum:__anon16412ac90203
bufsz	src/julia.h	/^    size_t bufsz; \/\/ actual sizeof stkbuf$/;"	m	struct:_jl_task_t	typeref:typename:size_t
bug_15703	test/tuple.jl	/^    function bug_15703(xs...)$/;"	f
build-stats	Makefile	/^build-stats:$/;"	t
build_TESTS	deps/srccache/patchelf-0.9/tests/Makefile.am	/^build_TESTS = \\$/;"	m
build_TESTS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^build_TESTS = \\$/;"	m
build_alias	deps/srccache/patchelf-0.9/Makefile.in	/^build_alias = @build_alias@$/;"	m
build_alias	deps/srccache/patchelf-0.9/src/Makefile.in	/^build_alias = @build_alias@$/;"	m
build_alias	deps/srccache/patchelf-0.9/tests/Makefile.in	/^build_alias = @build_alias@$/;"	m
build_id	src/julia.h	/^    uint64_t build_id;$/;"	m	struct:_jl_module_t	typeref:typename:uint64_t
build_version	stdlib/SuiteSparse/src/cholmod.jl	/^const build_version = VersionNumber(build_version_array...)$/;"	v
build_version_array	stdlib/SuiteSparse/src/cholmod.jl	/^const build_version_array = Vector{Cint}(undef, 3)$/;"	v
builddir	deps/srccache/patchelf-0.9/Makefile.in	/^builddir = @builddir@$/;"	m
builddir	deps/srccache/patchelf-0.9/src/Makefile.in	/^builddir = @builddir@$/;"	m
builddir	deps/srccache/patchelf-0.9/tests/Makefile.in	/^builddir = @builddir@$/;"	m
builder	src/codegen.cpp	/^    IRBuilder<> builder;$/;"	m	class:jl_codectx_t	typeref:typename:IRBuilder<>	file:
builtin	src/flisp/flisp.h	/^#define builtin(/;"	d
builtin->instruction	src/flisp/compiler.lsp	/^(define builtin->instruction$/;"	f
builtin_arg_counts	src/flisp/flisp.c	/^static const short builtin_arg_counts[] =$/;"	v	typeref:typename:const short[]	file:
builtin_func_map	src/codegen.cpp	/^static std::map<jl_fptr_args_t, Function*> builtin_func_map;$/;"	v	typeref:typename:std::map<jl_fptr_args_t,Function * >	file:
builtin_info	src/flisp/builtins.c	/^static const builtinspec_t builtin_info[] = {$/;"	v	typeref:typename:const builtinspec_t[]	file:
builtin_names	src/flisp/flisp.c	/^static const char *const builtin_names[] =$/;"	v	typeref:typename:const char * const[]	file:
builtin_nothrow	base/compiler/tfuncs.jl	/^function builtin_nothrow(@nospecialize(f), argtypes::Array{Any, 1}, @nospecialize(rt))$/;"	f
builtin_t	src/flisp/flisp.h	/^typedef value_t (*builtin_t)(fl_context_t*, value_t*, uint32_t);$/;"	t	typeref:typename:value_t (*)(fl_context_t *,value_t *,uint32_t)
builtin_tfunction	base/compiler/tfuncs.jl	/^function builtin_tfunction(@nospecialize(f), argtypes::Array{Any,1},$/;"	f
builtin_typenames	src/dump.c	/^static arraylist_t builtin_typenames;$/;"	v	typeref:typename:arraylist_t	file:
builtin_typenames	src/staticdata.c	/^static arraylist_t builtin_typenames;$/;"	v	typeref:typename:arraylist_t	file:
builtins	stdlib/REPL/src/docview.jl	/^const builtins = ["abstract type", "baremodule", "begin", "break",$/;"	v
builtins_init	src/flisp/builtins.c	/^void builtins_init(fl_context_t *fl_ctx)$/;"	f	typeref:typename:void
builtins_table_sym	src/flisp/flisp.h	/^    value_t printlevelsym, builtins_table_sym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
builtinspec_t	src/flisp/flisp.h	/^} builtinspec_t;$/;"	t	typeref:struct:__anonb455601d0808
builtinsym	src/flisp/flisp.h	/^    value_t pairsym, symbolsym, fixnumsym, vectorsym, builtinsym, vu8sym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
builtintype	src/flisp/flisp.h	/^    fltype_t *builtintype;$/;"	m	struct:_fl_context_t	typeref:typename:fltype_t *
bunchkaufman	stdlib/LinearAlgebra/src/bunchkaufman.jl	/^bunchkaufman(A::AbstractMatrix{T}, rook::Bool=false; check::Bool = true) where {T} =$/;"	f
bunchkaufman!	stdlib/LinearAlgebra/src/bunchkaufman.jl	/^function bunchkaufman!(A::Hermitian{T,S} where {T<:BlasComplex,S<:StridedMatrix{T}},$/;"	f
bunchkaufman!	stdlib/LinearAlgebra/src/bunchkaufman.jl	/^function bunchkaufman!(A::RealHermSymComplexSym{T,S} where {T<:BlasReal,S<:StridedMatrix},$/;"	f
bunchkaufman!	stdlib/LinearAlgebra/src/bunchkaufman.jl	/^function bunchkaufman!(A::StridedMatrix{<:BlasFloat}, rook::Bool = false; check::Bool = true)$/;"	f
bundle	contrib/mac/frameworkapp/JuliaLauncher/AppDelegate.m	/^@property(readonly, nullable) NSBundle *bundle;$/;"	p	interface:JuliaVariant
busywait	stdlib/Profile/test/runtests.jl	/^@noinline function busywait(t, n_tries)$/;"	f
butlast	src/utils.scm	/^(define (butlast lst)$/;"	f
byRefList	src/ccall.cpp	/^    std::vector<bool> byRefList; \/\/ vector of "byref" parameters$/;"	m	class:function_sig_t	typeref:typename:std::vector<bool>	file:
byte_string_classify	base/strings/string.jl	/^byte_string_classify(s::Union{String,Vector{UInt8}}) =$/;"	f
byte_string_classify	base/strings/substring.jl	/^byte_string_classify(s::SubString{String}) =$/;"	f
byte_t	src/support/dtypes.h	/^typedef unsigned char  byte_t;   \/* 1 byte *\/$/;"	t	typeref:typename:unsigned char
byteenv	base/cmd.jl	/^byteenv(env::AbstractArray{<:AbstractString}) =$/;"	f
byteenv	base/cmd.jl	/^byteenv(env::AbstractDict) =$/;"	f
byteenv	base/cmd.jl	/^byteenv(env::Nothing) = nothing$/;"	f
byteenv	base/cmd.jl	/^byteenv(env::Union{AbstractVector{Pair{T}}, Tuple{Vararg{Pair{T}}}}) where {T<:AbstractString} =$/;"	f
bytes2hex	base/strings/util.jl	/^bytes2hex(io::IO, a::AbstractArray{UInt8}) =$/;"	f
bytes2hex	base/strings/util.jl	/^function bytes2hex end$/;"	f
bytes2hex	base/strings/util.jl	/^function bytes2hex(a::AbstractArray{UInt8})$/;"	f
bytesavailable	base/filesystem.jl	/^bytesavailable(f::File) = max(0, filesize(f) - position(f)) # position can be > filesize$/;"	f
bytesavailable	base/io.jl	/^bytesavailable(io::AbstractPipe) = bytesavailable(pipe_reader(io))$/;"	f
bytesavailable	base/io.jl	/^function bytesavailable end$/;"	f
bytesavailable	base/iobuffer.jl	/^bytesavailable(io::GenericIOBuffer) = io.size - io.ptr + 1$/;"	f
bytesavailable	base/iostream.jl	/^bytesavailable(s::IOStream) = @lock_nofail s.lock ccall(:jl_nb_available, Int32, (Ptr{Cvoid},), /;"	f
bytesavailable	base/secretbuffer.jl	/^bytesavailable(io::SecretBuffer) = io.size - io.ptr + 1$/;"	f
bytesavailable	base/stream.jl	/^bytesavailable(s::BufferStream) = bytesavailable(s.buffer)$/;"	f
bytesavailable	base/stream.jl	/^bytesavailable(s::LibuvStream) = bytesavailable(s.buffer)$/;"	f
bytesym	src/flisp/flisp.h	/^    value_t ptrdiffsym, sizesym, bytesym, wcharsym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
bytetype	src/flisp/flisp.h	/^    fltype_t *bytetype, *wchartype;$/;"	m	struct:_fl_context_t	typeref:typename:fltype_t *
c	contrib/normalize_triplet.py	/^c = lambda mapping: "("+"|".join(["(?P<%s>%s)"%(k,v) for (k, v) in mapping.items()]) + ")"$/;"	f
c	src/ccalltest.c	/^    double a,b,c;$/;"	m	struct:__anon84ad8c4c1708	typeref:typename:double	file:
c	src/ccalltest.c	/^    int8_t c;$/;"	m	struct:__anon84ad8c4c1908	typeref:typename:int8_t	file:
c	src/disasm.cpp	/^        const char *c;$/;"	m	struct:DILineInfoPrinter::repeat	typeref:typename:const char *	file:
c	stdlib/Dates/test/ranges.jl	/^c = Dates.Date(2013, 6, 1)$/;"	v
c	stdlib/Dates/test/types.jl	/^c = Dates.Time(0)$/;"	v
c	stdlib/Distributed/test/distributed_exec.jl	/^c=Channel{Int}(1)$/;"	v
c	stdlib/Mmap/test/runtests.jl	/^c = Mmap.mmap(file)$/;"	v
c	stdlib/Mmap/test/runtests.jl	/^c = Mmap.mmap(file, Vector{UInt8}, 3)$/;"	v
c	stdlib/Mmap/test/runtests.jl	/^c = Mmap.mmap(file, Vector{UInt8}, 5, 6)$/;"	v
c	stdlib/Mmap/test/runtests.jl	/^c = Mmap.mmap(s)$/;"	v
c	stdlib/Mmap/test/runtests.jl	/^c = Mmap.mmap(s, Vector{UInt8}, (11,))$/;"	v
c	stdlib/Mmap/test/runtests.jl	/^c = Mmap.mmap(s, Vector{UInt8}, (UInt16(11),))$/;"	v
c	stdlib/Mmap/test/runtests.jl	/^c = Mmap.mmap(s, Vector{UInt8}, 6)$/;"	v
c	test/asyncmap.jl	/^c=Channel(32); foreach(i->put!(c,i), 1:10); close(c)$/;"	v
c	test/bigint.jl	/^c = parse(BigInt,"246913578024691357802469135780")$/;"	v
c	test/ccall.jl	/^    c(z) = (y = z)$/;"	f
c	test/core.jl	/^c = [0x2, 0x1, 0x3]$/;"	v
c0	test/compiler/validation.jl	/^c0 = Core.Compiler.retrieve_code_info(mi)$/;"	v
c1	stdlib/Distributed/test/distributed_exec.jl	/^const c1 = fill(1., 10)$/;"	v
c18015	test/compiler/inference.jl	/^c18015(tri) = tri.c$/;"	f
c1line	test/errorshow.jl	/^c1line = @__LINE__() + 1$/;"	v
c20704	test/compiler/inference.jl	/^Base.@pure c20704() = (f20704(1.0); 1)$/;"	f
c22307	test/core.jl	/^function c22307()$/;"	f
c23558	test/core.jl	/^c23558(n,k) =$/;"	f
c27964	test/syntax.jl	/^function c27964(x)$/;"	f
c28399	test/core.jl	/^c28399 = 42$/;"	v
c28593	test/syntax.jl	/^macro c28593()$/;"	f
c28955	test/compiler/inference.jl	/^c28955(args...) = b28955(args)$/;"	f
c2line	test/errorshow.jl	/^c2line = @__LINE__$/;"	v
c30118	test/compiler/inline.jl	/^c30118(::Tuple{Ref, Ref}) = nothing$/;"	f
c30118	test/compiler/inline.jl	/^c30118(::Tuple{Ref{<:Type}, Vararg}) = nothing$/;"	f
c32703	test/subtype.jl	/^c32703(::Type{<:Str{C}}, str::Str{C}) where {C<:CSE} = str$/;"	f
c32703	test/subtype.jl	/^c32703(::Type{<:Str{UTF16CSE}}, str::AbstractString) = 42$/;"	f
c3line	test/errorshow.jl	/^c3line = @__LINE__() + 1$/;"	v
c4line	test/errorshow.jl	/^c4line = @__LINE__$/;"	v
c5line	test/errorshow.jl	/^c5line = @__LINE__() + 1$/;"	v
c6line	test/errorshow.jl	/^c6line = @__LINE__$/;"	v
c6mline	test/errorshow.jl	/^c6mline = @__LINE__$/;"	v
c7648	test/reflection.jl	/^const c7648 = 8$/;"	v
c7line	test/errorshow.jl	/^c7line = @__LINE__() + 1$/;"	v
c8line	test/errorshow.jl	/^c8line = @__LINE__() + 1$/;"	v
c99991	test/specificity.jl	/^c99991(::Type{T},x::T) where {T} = 0$/;"	f
c99991	test/specificity.jl	/^c99991(::Type{UnitRange{T}},x::AbstractRange{T}) where {T} = 2$/;"	f
c99991	test/specificity.jl	/^c99991(::Type{UnitRange{T}},x::StepRangeLen{T}) where {T} = 1$/;"	f
c_exit_finalizer	src/ccalltest.c	/^JL_DLLEXPORT void c_exit_finalizer(void* v) {$/;"	f	typeref:typename:JL_DLLEXPORT void
c_file	test/file.jl	/^c_file = joinpath(c_tmpdir, "cfile.txt")$/;"	v
c_int	src/ccalltest.c	/^int c_int = 0;$/;"	v	typeref:typename:int
c_locale	src/support/strtod.c	/^static locale_t c_locale;$/;"	v	typeref:typename:locale_t	file:
c_locale_initialized	src/support/strtod.c	/^static int c_locale_initialized = 0;$/;"	v	typeref:typename:int	file:
c_subdir	test/file.jl	/^c_subdir = joinpath(c_tmpdir, "c_subdir")$/;"	v
c_tmpdir	test/file.jl	/^c_tmpdir = mktempdir()$/;"	v
cache	src/julia.h	/^    jl_svec_t *cache;        \/\/ sorted array$/;"	m	struct:__anon055fe4270a08	typeref:typename:jl_svec_t *
cache	src/julia.h	/^    jl_typemap_t *cache;$/;"	m	struct:_jl_methtable_t	typeref:typename:jl_typemap_t *
cache	src/julia.h	/^    struct _jl_code_instance_t *cache;$/;"	m	struct:_jl_method_instance_t	typeref:struct:_jl_code_instance_t *
cache_dependencies	base/loading.jl	/^function cache_dependencies(cachefile::String)$/;"	f
cache_dependencies	base/loading.jl	/^function cache_dependencies(f::IO)$/;"	f
cache_file_entry	base/loading.jl	/^cache_file_entry(pkg::PkgId) = joinpath($/;"	f
cache_insert_type	src/jltypes.c	/^static void cache_insert_type(jl_value_t *type, ssize_t insert_at, int ordered)$/;"	f	typeref:typename:void	file:
cache_lookup	base/compiler/inferenceresult.jl	/^function cache_lookup(linfo::MethodInstance, given_argtypes::Vector{Any}, cache::Vector{Inferenc/;"	f
cache_method	src/gf.c	/^static jl_method_instance_t *cache_method($/;"	f	typeref:typename:jl_method_instance_t *	file:
cache_result	base/compiler/typeinfer.jl	/^function cache_result(result::InferenceResult, min_valid::UInt, max_valid::UInt)$/;"	f
cached	src/julia.h	/^    int cached;             \/\/ can the compiler use\/populate the compilation cache?$/;"	m	struct:__anon055fe4271b08	typeref:typename:int
cachedAllocationGranularity	src/sys.c	/^static long cachedAllocationGranularity = 0;$/;"	v	typeref:typename:long	file:
cachedPagesize	src/sys.c	/^static long cachedPagesize = 0;$/;"	v	typeref:typename:long	file:
cachefile	etc/write_base_cache.jl	/^cachefile = ARGS[1]$/;"	v
caddddr	src/utils.scm	/^(define (caddddr x) (car (cdr (cdr (cdr (cdr x))))))$/;"	f
calc_gnu_debuglink_crc32	src/debuginfo.cpp	/^calc_gnu_debuglink_crc32(const void *buf, size_t size)$/;"	f	typeref:typename:uint32_t	file:
calc_jump	stdlib/Random/src/DSFMT.jl	/^function calc_jump(steps::Integer,$/;"	f
calendar	stdlib/Dates/src/types.jl	/^calendar(dt::Date) = ISOCalendar$/;"	f
calendar	stdlib/Dates/src/types.jl	/^calendar(dt::DateTime) = ISOCalendar$/;"	f
call	test/syntax.jl	/^call(::A) = 1$/;"	f
call0	test/syntax.jl	/^call0(f) = f()$/;"	f
call1	test/syntax.jl	/^call1(f,x) = f(x)$/;"	f
call13007	test/core.jl	/^call13007(::Type{Array{T,N}}) where {T,N} = 0$/;"	f
call13007	test/core.jl	/^call13007(::Type{Array}) = 1$/;"	f
call2	test/syntax.jl	/^call2(f,x,y) = f(x,y)$/;"	f
call_abi	contrib/normalize_triplet.py	/^call_abi = get_field(m, call_abi_mapping)$/;"	v
call_abi_mapping	contrib/normalize_triplet.py	/^call_abi_mapping = {$/;"	v
call_cache	src/gf.c	/^jl_typemap_entry_t *call_cache[N_CALL_CACHE] JL_GLOBALLY_ROOTED;$/;"	v	typeref:typename:jl_typemap_entry_t * [N_CALL_CACHE]JL_GLOBALLY_ROOTED
call_cache	test/clangsa/MissingRoots.c	/^static jl_typemap_entry_t *call_cache[10] JL_GLOBALLY_ROOTED;$/;"	v	typeref:typename:jl_typemap_entry_t * [10]JL_GLOBALLY_ROOTED	file:
call_cache_stats	src/gf.c	/^void call_cache_stats()$/;"	f	typeref:typename:void
call_iota	test/vecelement.jl	/^function call_iota(n::Integer,t::DataType)$/;"	f
call_jl_errno	test/llvmcall.jl	/^function call_jl_errno()$/;"	f
call_lambda1	test/core.jl	/^call_lambda1() = (()->x)(1)$/;"	f
call_lambda2	test/core.jl	/^call_lambda2() = ((x)->x)()$/;"	f
call_lambda3	test/core.jl	/^call_lambda3() = ((x)->x)(1,2)$/;"	f
call_lambda4	test/core.jl	/^call_lambda4() = ((x,y...)->x)()$/;"	f
call_lambda5	test/core.jl	/^call_lambda5() = ((x...)->x)()$/;"	f
call_lambda6	test/core.jl	/^call_lambda6() = ((x...)->x)(1)$/;"	f
call_lambda7	test/core.jl	/^call_lambda7() = ((x...)->x)(1,2)$/;"	f
call_ntuple	test/compiler/inference.jl	/^call_ntuple(a, b) = my_ntuple(i->(a+b; i), Val(4))$/;"	f
call_on_owner	stdlib/Distributed/src/remotecall.jl	/^function call_on_owner(f, rr::AbstractRemoteRef, args...)$/;"	f
call_require	src/toplevel.c	/^static jl_module_t *call_require(jl_module_t *mod, jl_sym_t *var) JL_GLOBALLY_ROOTED$/;"	f	typeref:typename:jl_module_t *	file:
call_result_unused	base/compiler/abstractinterpretation.jl	/^call_result_unused(frame::InferenceState, pc::LineNum=frame.currpc) =$/;"	f
call_sig	base/compiler/ssair/inlining.jl	/^function call_sig(ir::IRCode, stmt::Expr)$/;"	f
call_sym	src/ast.c	/^jl_sym_t *call_sym;    jl_sym_t *invoke_sym;$/;"	v	typeref:typename:jl_sym_t *
call_with_attrs	src/cgutils.cpp	/^static Value *call_with_attrs(jl_codectx_t &ctx, Function *func, Value *v)$/;"	f	typeref:typename:Value *	file:
callambig	test/ambiguous.jl	/^callambig(x, y) = ambig(x, y)$/;"	f
callback	test/channels.jl	/^        callback() = all(map(isready, [rr1, rr2, rr3]))$/;"	f
calldoc	base/docs/Docs.jl	/^function calldoc(__source__, __module__, str, def::Expr)$/;"	f
called	src/julia.h	/^    int32_t called;        \/\/ bit flags: whether each of the first 8 arguments is called$/;"	m	struct:_jl_method_t	typeref:typename:int32_t
called-macro-name	src/julia-parser.scm	/^(define (called-macro-name e)$/;"	f
caller22734	test/ccall.jl	/^function caller22734(ptr)$/;"	f
callers	stdlib/Profile/src/Profile.jl	/^callers(func::Function, bt::Vector, lidict::LineInfoFlatDict; kwargs...) =$/;"	f
callers	stdlib/Profile/src/Profile.jl	/^callers(func::Function; kwargs...) = callers(string(func), retrieve()...; kwargs...)$/;"	f
callers	stdlib/Profile/src/Profile.jl	/^callers(funcname::String, bt::Vector, lidict::LineInfoDict; kwargs...) =$/;"	f
callers	stdlib/Profile/src/Profile.jl	/^callers(funcname::String; kwargs...) = callers(funcname, retrieve()...; kwargs...)$/;"	f
callers	stdlib/Profile/src/Profile.jl	/^function callers end$/;"	f
callers	stdlib/Profile/src/Profile.jl	/^function callers(funcname::String, bt::Vector, lidict::LineInfoFlatDict; filename = nothing, lin/;"	f
callersf	stdlib/Profile/src/Profile.jl	/^function callersf(matchfunc::Function, bt::Vector, lidict::LineInfoFlatDict)$/;"	f
callf	test/core.jl	/^function callf(f)$/;"	f
callinfos_19805	test/ccall.jl	/^mutable struct callinfos_19805{FUNC_FT<:Function}$/;"	f
calloc	base/libc.jl	/^calloc(num::Integer, size::Integer) = ccall(:calloc, Ptr{Cvoid}, (Csize_t, Csize_t), num, size)$/;"	f
calls	base/show.jl	/^function calls on objects. `toplevel` is `true` if this is$/;"	f
callthis_26607	test/ccall.jl	/^function callthis_26607(args)$/;"	f
can_finalize_function	src/jitlayers.cpp	/^static bool can_finalize_function(StringRef F, SmallSet<Module*, 16> &known)$/;"	f	typeref:typename:bool	file:
can_inline	src/julia.h	/^    int8_t can_inline;$/;"	m	struct:__anon055fe4271808	typeref:typename:int8_t
can_inline	test/abstractarray.jl	/^const can_inline = Base.JLOptions().can_inline != 0$/;"	v
can_inline	test/stacktraces.jl	/^can_inline = Bool(Base.JLOptions().can_inline)$/;"	v
can_skip_sparsification	stdlib/SparseArrays/src/higherorderfns.jl	/^can_skip_sparsification(::typeof(*), ::SparseVectorUnion, ::AdjOrTransSparseVectorUnion) = true$/;"	f
can_skip_sparsification	stdlib/SparseArrays/src/higherorderfns.jl	/^can_skip_sparsification(f, rest...) = false$/;"	f
cancel	stdlib/REPL/src/TerminalMenus/AbstractMenu.jl	/^cancel(m::AbstractMenu) = error("unimplemented")$/;"	f
cancel	stdlib/REPL/src/TerminalMenus/MultiSelectMenu.jl	/^cancel(m::MultiSelectMenu) = m.selected = Set{Int}()$/;"	f
cancel	stdlib/REPL/src/TerminalMenus/RadioMenu.jl	/^cancel(m::RadioMenu) = m.selected = -1$/;"	f
cancel_beep	stdlib/REPL/src/LineEdit.jl	/^cancel_beep(::ModeState) = nothing$/;"	f
cancel_beep	stdlib/REPL/src/LineEdit.jl	/^function cancel_beep(s::PromptState)$/;"	f
cannonlake	src/processor_x86.cpp	/^constexpr auto cannonlake = skx | get_feature_masks(avx512vbmi, avx512ifma, sha);$/;"	v	namespace:X86::Feature	typeref:typename:auto
canonical_p	test/testhelpers/Furlongs.jl	/^canonical_p(p) = isinteger(p) ? Int(p) : Rational{Int}(p)$/;"	f
canonicalize	stdlib/Dates/src/periods.jl	/^function canonicalize(x::CompoundPeriod)$/;"	f
canonicalize2	base/twiceprecision.jl	/^function canonicalize2(big, little)$/;"	f
capacity	stdlib/Base64/src/buffer.jl	/^capacity(buffer::Buffer) = Int(pointer(buffer.data, lastindex(buffer.data) + 1) - buffer.ptr)$/;"	f
capacity	test/gcext/gcext.c	/^    size_t capacity;$/;"	m	struct:__anonf90ca10a0108	typeref:typename:size_t	file:
capt_before_def	test/core.jl	/^function capt_before_def()$/;"	f
captsp	test/core.jl	/^function captsp(x::T, y::S) where {T, S}$/;"	f
capture_names	base/pcre.jl	/^function capture_names(re)$/;"	f
capture_with_conditional_label	test/syntax.jl	/^function capture_with_conditional_label()$/;"	f
captured_and_shadowed_sp	test/syntax.jl	/^function captured_and_shadowed_sp(x::T) where T$/;"	f
capturescalars	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline capturescalars(f, mixedargs::Tuple{Ref{Type{T}}, Ref{Type{S}}, Vararg{Any}}) where {T, S/;"	f
capturescalars	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline capturescalars(f, mixedargs::Tuple{Ref{Type{T}}, Vararg{Any}}) where {T} =$/;"	f
capturescalars	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline capturescalars(f, mixedargs::Tuple{SparseVecOrMat, Ref{Type{T}}, Vararg{Any}}) where {T}/;"	f
capturescalars	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline capturescalars(f, mixedargs::Tuple{Union{Ref,AbstractArray{<:Any,0}}, Ref{Type{T}}, Vara/;"	f
capturescalars	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline function capturescalars(f, mixedargs)$/;"	f
car	src/flisp/flisp.h	/^    value_t car;$/;"	m	struct:__anonb455601d0108	typeref:typename:value_t
car	src/flisp/flisp.h	/^#define car(/;"	d
car_	src/flisp/flisp.h	/^#define car_(/;"	d
cartesian_foo	test/arrayops.jl	/^function cartesian_foo()$/;"	f
cat	base/abstractarray.jl	/^@inline cat(A...; dims) = _cat(dims, A...)$/;"	f
cat10880	test/compiler/inference.jl	/^function cat10880(a, b)$/;"	f
cat_indices	base/abstractarray.jl	/^cat_indices(A, d) = OneTo(1)$/;"	f
cat_indices	base/abstractarray.jl	/^cat_indices(A::AbstractArray, d) = axes(A, d)$/;"	f
cat_nested	base/broadcast.jl	/^cat_nested() = ()$/;"	f
cat_nested	base/broadcast.jl	/^cat_nested(t::Any, rest...) = (t, cat_nested(rest...)...)$/;"	f
cat_nested	base/broadcast.jl	/^cat_nested(t::Broadcasted, rest...) = (cat_nested(t.args...)..., cat_nested(rest...)...)$/;"	f
cat_shape	base/abstractarray.jl	/^@inline cat_shape(dims, shape::Tuple, nshape::Tuple, shapes::Tuple...) =$/;"	f
cat_shape	base/abstractarray.jl	/^cat_shape(dims, shape::Tuple) = shape$/;"	f
cat_similar	base/abstractarray.jl	/^cat_similar(A, T, shape) = Array{T}(undef, shape)$/;"	f
cat_similar	base/abstractarray.jl	/^cat_similar(A::AbstractArray, T, shape) = similar(A, T, shape)$/;"	f
cat_size	base/abstractarray.jl	/^cat_size(A) = (1,)$/;"	f
cat_size	base/abstractarray.jl	/^cat_size(A, d) = 1$/;"	f
cat_size	base/abstractarray.jl	/^cat_size(A::AbstractArray) = size(A)$/;"	f
cat_size	base/abstractarray.jl	/^cat_size(A::AbstractArray, d) = size(A, d)$/;"	f
cat_t	base/abstractarray.jl	/^@inline cat_t(::Type{T}, X...; dims) where {T} = _cat_t(dims, T, X...)$/;"	f
cat_t18399	test/compiler/inference.jl	/^function cat_t18399(X...)$/;"	f
catalan	base/mathconstants.jl	/^catalan = 0.9159655941772...$/;"	v
catch_backtrace	base/error.jl	/^function catch_backtrace()$/;"	f
catch_err	stdlib/Test/test/runtests.jl	/^catch_err = IOStream("")$/;"	v
catch_exception_raise	src/signals-mach.c	/^kern_return_t catch_exception_raise(mach_port_t            exception_port,$/;"	f	typeref:typename:JL_DLLEXPORT kern_return_t
catch_exceptions	base/logging.jl	/^catch_exceptions(logger) = true$/;"	f
catch_exceptions	base/logging.jl	/^catch_exceptions(logger::SimpleLogger) = false$/;"	f
catch_exceptions	stdlib/Test/src/logging.jl	/^catch_exceptions(logger::TestLogger) = logger.catch_exceptions$/;"	f
catch_out	stdlib/Test/test/runtests.jl	/^catch_out = IOStream("")$/;"	v
catch_stack	base/error.jl	/^function catch_stack(task=current_task(); include_bt=true)$/;"	f
catcmd	test/spawn.jl	/^catcmd = `cat`$/;"	v
catdoc	base/docs/Docs.jl	/^catdoc() = nothing$/;"	f
catdoc	base/docs/Docs.jl	/^catdoc(xs...) = vcat(xs...)$/;"	f
catdoc	base/docs/utils.jl	/^function catdoc(xs::HTML...)$/;"	f
catdoc	base/docs/utils.jl	/^function catdoc(xs::Text...)$/;"	f
catdoc	stdlib/Markdown/src/Markdown.jl	/^catdoc(md::MD...) = MD(md...)$/;"	f
category_abbrev	base/strings/unicode.jl	/^function category_abbrev(c::AbstractChar)$/;"	f
category_code	base/strings/unicode.jl	/^function category_code(c::AbstractChar)$/;"	f
category_code	base/strings/unicode.jl	/^function category_code(x::Integer)$/;"	f
category_string	base/strings/unicode.jl	/^category_string(c) = category_strings[category_code(c)+1]$/;"	f
category_strings	base/strings/unicode.jl	/^const category_strings = [$/;"	v
cavium_thunderx	src/processor_arm.cpp	/^    cavium_thunderx,$/;"	e	enum:ARM::CPU	file:
cavium_thunderx	src/processor_arm.cpp	/^constexpr auto cavium_thunderx = armv8a_crc_crypto;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
cavium_thunderx2t99	src/processor_arm.cpp	/^    cavium_thunderx2t99,$/;"	e	enum:ARM::CPU	file:
cavium_thunderx2t99	src/processor_arm.cpp	/^constexpr auto cavium_thunderx2t99 = armv8a_crc_crypto | get_feature_masks(v8_1a);$/;"	v	namespace:ARM::Feature	typeref:typename:auto
cavium_thunderx2t99p1	src/processor_arm.cpp	/^    cavium_thunderx2t99p1,$/;"	e	enum:ARM::CPU	file:
cavium_thunderx2t99p1	src/processor_arm.cpp	/^constexpr auto cavium_thunderx2t99p1 = armv8a_crc_crypto | get_feature_masks(v8_1a);$/;"	v	namespace:ARM::Feature	typeref:typename:auto
cavium_thunderx81	src/processor_arm.cpp	/^    cavium_thunderx81,$/;"	e	enum:ARM::CPU	file:
cavium_thunderx81	src/processor_arm.cpp	/^constexpr auto cavium_thunderx81 = armv8a_crc_crypto;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
cavium_thunderx83	src/processor_arm.cpp	/^    cavium_thunderx83,$/;"	e	enum:ARM::CPU	file:
cavium_thunderx83	src/processor_arm.cpp	/^constexpr auto cavium_thunderx83 = armv8a_crc_crypto;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
cavium_thunderx88	src/processor_arm.cpp	/^    cavium_thunderx88,$/;"	e	enum:ARM::CPU	file:
cavium_thunderx88	src/processor_arm.cpp	/^constexpr auto cavium_thunderx88 = armv8a_crc_crypto;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
cavium_thunderx88p1	src/processor_arm.cpp	/^    cavium_thunderx88p1,$/;"	e	enum:ARM::CPU	file:
cavium_thunderx88p1	src/processor_arm.cpp	/^constexpr auto cavium_thunderx88p1 = armv8a_crc_crypto;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
cb	base/asyncevent.jl	/^           cb(timer) = (global i += 1; println(i))$/;"	f
cb	test/boundscheck_exec.jl	/^cb(x) = x > 0 || throw(BoundsError())$/;"	f
cb22734	test/ccall.jl	/^function cb22734(ptr::Ptr{Cvoid})$/;"	f
cbrt	base/math.jl	/^cbrt(a::Float16) = Float16(cbrt(Float32(a)))$/;"	f
cbrt	base/special/cbrt.jl	/^cbrt(x::AbstractFloat) = x < 0 ? -(-x)^(1\/\/3) : x^(1\/\/3)$/;"	f
cbrt	base/special/cbrt.jl	/^cbrt(x::Real) = cbrt(float(x))$/;"	f
cbrt	base/special/cbrt.jl	/^function cbrt(x::Union{Float32,Float64})$/;"	f
cbuiltin	src/flisp/cvalues.c	/^value_t cbuiltin(fl_context_t *fl_ctx, const char *name, builtin_t f)$/;"	f	typeref:typename:value_t
cc	src/ccall.cpp	/^    CallingConv::ID cc; \/\/ calling convention ABI$/;"	m	class:function_sig_t	typeref:typename:CallingConv::ID	file:
cc	src/codegen.cpp	/^    } cc;$/;"	m	struct:jl_returninfo_t	typeref:enum:jl_returninfo_t::CallingConv	file:
ccall using a threadpool (Experimental)	doc/src/base/multi-threading.md	/^## ccall using a threadpool (Experimental)$/;"	s
ccall27478	test/ccall.jl	/^function ccall27478()$/;"	f
ccall_echo_func	test/ccall.jl	/^macro ccall_echo_func(x, T, U)$/;"	f
ccall_echo_load	test/ccall.jl	/^macro ccall_echo_load(x, T, U)$/;"	f
ccall_echo_objref	test/ccall.jl	/^macro ccall_echo_objref(x, T, U)$/;"	f
ccall_reassigned_ptr	test/ccall.jl	/^function ccall_reassigned_ptr(ptr::Ptr{Cvoid})$/;"	f
ccall_test_func	test/ccall.jl	/^ccall_test_func(x) = ccall((:testUcharX, libccalltest), Int32, (UInt8,), x % UInt8)$/;"	f
ccallable	base/c.jl	/^function ccallable(f::Function, rt::Type, argt::Type, name::Union{AbstractString,Symbol}=string(/;"	f
ccallable	base/c.jl	/^macro ccallable(def)$/;"	f
ccallable	base/c.jl	/^macro ccallable(rt, def)$/;"	f
cconvert	base/boot.jl	/^cconvert(::Type{T}, x) where {T} = convert(T, x)$/;"	f
cconvert	base/c.jl	/^cconvert(::Type{Cstring}, s::AbstractString) =$/;"	f
cconvert	base/c.jl	/^cconvert(::Type{Cstring}, s::String) = s$/;"	f
cconvert	base/c.jl	/^cconvert(::Type{Cstring}, s::Symbol) = s$/;"	f
cconvert	base/c.jl	/^function cconvert(::Type{Cwstring}, s::AbstractString)$/;"	f
cconvert	base/essentials.jl	/^cconvert(::Type{<:Ptr}, x) = x # but defer the conversion to Ptr to unsafe_convert$/;"	f
cconvert	base/essentials.jl	/^cconvert(T::Type, x) = convert(T, x) # do the conversion eagerly in most cases$/;"	f
cconvert	base/essentials.jl	/^function cconvert end$/;"	f
cconvert	base/pointer.jl	/^cconvert(::Type{Ptr{Int8}}, s::AbstractString) = String(s)$/;"	f
cconvert	base/pointer.jl	/^cconvert(::Type{Ptr{UInt8}}, s::AbstractString) = String(s)$/;"	f
cconvert	base/refpointer.jl	/^cconvert(::Type{Ptr{P}}, a::Array) where {P<:Union{Ptr,Cwstring,Cstring}} = Ref{P}(a)$/;"	f
cconvert	base/refpointer.jl	/^cconvert(::Type{Ptr{P}}, a::Array{<:Ptr}) where {P<:Ptr} = a$/;"	f
cconvert	base/refpointer.jl	/^cconvert(::Type{Ref{P}}, a::Array) where {P<:Union{Ptr,Cwstring,Cstring}} = Ref{P}(a)$/;"	f
cconvert	base/refpointer.jl	/^cconvert(::Type{Ref{P}}, a::Array{<:Ptr}) where {P<:Ptr} = a$/;"	f
cconvert	base/secretbuffer.jl	/^cconvert(::Type{Cstring}, s::SecretBuffer) = unsafe_convert(Cstring, s)$/;"	f
cconvert	base/strings/substring.jl	/^cconvert(::Type{Ptr{Int8}}, s::SubString{String}) = s$/;"	f
cconvert	base/strings/substring.jl	/^cconvert(::Type{Ptr{UInt8}}, s::SubString{String}) = s$/;"	f
ccopy!	stdlib/LinearAlgebra/src/transpose.jl	/^function ccopy!(B, A)$/;"	f
cd	base/file.jl	/^    function cd(f::Function, dir::AbstractString)$/;"	f
cd	base/file.jl	/^cd() = cd(homedir())$/;"	f
cd	base/file.jl	/^cd(f::Function) = cd(f, homedir())$/;"	f
cd	base/file.jl	/^function cd(dir::AbstractString)$/;"	f
cdiv	base/complex.jl	/^@inline function cdiv(a::Float64, b::Float64, c::Float64, d::Float64)$/;"	f
cdiv_test	test/complex.jl	/^function cdiv_test(a,b)$/;"	f
cdotc_	deps/gfortblas.c	/^complex float cdotc_(int *N, void *CX, int *INCX, void *CY, int *INCY) {$/;"	f	typeref:typename:complex float
cdotu_	deps/gfortblas.c	/^complex float cdotu_(int *N, void *CX, int *INCX, void *CY, int *INCY) {$/;"	f	typeref:typename:complex float
cdr	src/flisp/flisp.h	/^    value_t cdr;$/;"	m	struct:__anonb455601d0108	typeref:typename:value_t
cdr	src/flisp/flisp.h	/^#define cdr(/;"	d
cdr_	src/flisp/flisp.h	/^#define cdr_(/;"	d
ceil	base/float.jl	/^ceil(::Type{T}, x::AbstractFloat) where {T<:Integer} = trunc(T,round(x, RoundUp))$/;"	f
ceil	base/float.jl	/^ceil(::Type{T}, x::Float16) where {T<:Integer} = ceil(T, Float32(x))$/;"	f
ceil	base/floatfuncs.jl	/^ceil(x::Real; kwargs...)  = round(x, RoundUp; kwargs...)$/;"	f
ceil	base/int.jl	/^ ceil(::Type{T}, x::Integer) where {T<:Integer} = convert(T, x)$/;"	f
ceil	base/int.jl	/^function ceil end$/;"	f
ceil	base/mpfr.jl	/^ceil(::Type{BigInt}, x::BigFloat) = unsafe_cast(BigInt, x, RoundUp)$/;"	f
ceil	base/mpfr.jl	/^ceil(::Type{Integer}, x::BigFloat) = ceil(BigInt, x)$/;"	f
ceil	base/mpfr.jl	/^function ceil(::Type{T}, x::BigFloat) where T<:Union{Signed,Unsigned}$/;"	f
ceil	base/rational.jl	/^ceil(::Type{T}, x::Rational) where {T} = convert(T,cld(x.num,x.den))$/;"	f
ceil	base/rational.jl	/^ceil(x::Rational{T}) where {T} = Rational(ceil(T,x))$/;"	f
ceil_float	src/runtime_intrinsics.c	/^#define ceil_float(/;"	d	file:
ceilfloor	test/llvmcall.jl	/^function ceilfloor(x::Float64)$/;"	f
ceilfloor	test/llvmcall2.jl	/^function ceilfloor(x::Float64)$/;"	f
celtypes	stdlib/LinearAlgebra/test/addmul.jl	/^celtypes = [Float64, ComplexF64, BigFloat, Int]$/;"	v
central_difference_discretization	stdlib/LinearAlgebra/test/tridiag.jl	/^    function central_difference_discretization(N; dfunc = x -> 12x^2 - 2N^2,$/;"	f
centralize_sumabs2	stdlib/Statistics/src/Statistics.jl	/^centralize_sumabs2(A::AbstractArray, m) =$/;"	f
centralize_sumabs2	stdlib/Statistics/src/Statistics.jl	/^centralize_sumabs2(A::AbstractArray, m, ifirst::Int, ilast::Int) =$/;"	f
centralize_sumabs2!	stdlib/Statistics/src/Statistics.jl	/^function centralize_sumabs2!(R::AbstractArray{S}, A::AbstractArray, means::AbstractArray) where /;"	f
centralize_sumabs2!	stdlib/Statistics/src/Statistics.jl	/^function centralize_sumabs2!(R::AbstractArray{S}, A::SparseMatrixCSC{Tv,Ti}, means::AbstractArra/;"	f
centralizedabs2fun	stdlib/Statistics/src/Statistics.jl	/^centralizedabs2fun(m) = x -> abs2.(x - m)$/;"	f
cf	test/threads_exec.jl	/^    @noinline cf(f) = @cfunction $f Float64 ()$/;"	f
cf32	test/ccall.jl	/^cf32 = 3.34f0+53.2f0im$/;"	v
cf64	test/ccall.jl	/^cf64 = 2.84+5.2im$/;"	v
cfg_inline_item!	base/compiler/ssair/inlining.jl	/^function cfg_inline_item!(item::InliningTodo, state::CFGInliningState, from_unionsplit::Bool=fal/;"	f
cfg_inline_unionsplit!	base/compiler/ssair/inlining.jl	/^function cfg_inline_unionsplit!(item::UnionSplit, state::CFGInliningState)$/;"	f
cfg_simplify!	base/compiler/ssair/passes.jl	/^function cfg_simplify!(ir::IRCode)$/;"	f
cfile	test/errorshow.jl	/^cfile = " at $(@__FILE__):"$/;"	v
cflags	contrib/julia-config.jl	/^function cflags(doframework)$/;"	f
cfptest	src/ccalltest.c	/^JL_DLLEXPORT complex float *cfptest(complex float *a) {$/;"	f	typeref:typename:JL_DLLEXPORT complex float *
cftest	src/ccalltest.c	/^JL_DLLEXPORT complex float cftest(complex float a) {$/;"	f	typeref:typename:JL_DLLEXPORT complex float
cfunction	base/c.jl	/^macro cfunction(f, at, rt)$/;"	f
cfunction_cache	src/codegen.cpp	/^const struct jl_typemap_info cfunction_cache = {$/;"	v	typeref:typename:const struct jl_typemap_info
cfunction_sym	src/ast.c	/^jl_sym_t *copyast_sym; jl_sym_t *cfunction_sym;$/;"	v	typeref:typename:jl_sym_t *
cfunctionsym	src/flisp/flisp.h	/^    value_t arraysym, cfunctionsym, voidsym, pointersym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
cg_bdw	src/codegen.cpp	/^static void cg_bdw(jl_codectx_t &ctx, jl_binding_t *b)$/;"	f	typeref:typename:void	file:
cglobal26297	test/ccall.jl	/^cglobal26297() = @cglobal26297(:global_var)$/;"	f
cglobal26297	test/ccall.jl	/^macro cglobal26297(sym)$/;"	f
cglobal_tfunc	base/compiler/tfuncs.jl	/^cglobal_tfunc(@nospecialize(fptr)) = Ptr{Cvoid}$/;"	f
cglobal_tfunc	base/compiler/tfuncs.jl	/^cglobal_tfunc(@nospecialize(fptr), @nospecialize(t)) = (isType(t) ? Ptr{t.parameters[1]} : Ptr)$/;"	f
cglobal_tfunc	base/compiler/tfuncs.jl	/^cglobal_tfunc(@nospecialize(fptr), t::Const) = (isa(t.val, Type) ? Ptr{t.val} : Ptr)$/;"	f
cgptest	src/ccalltest.c	/^JL_DLLEXPORT complex double *cgptest(complex double *a) {$/;"	f	typeref:typename:JL_DLLEXPORT complex double *
cgtest	src/ccalltest.c	/^JL_DLLEXPORT complex double cgtest(complex double a) {$/;"	f	typeref:typename:JL_DLLEXPORT complex double
chainVector	src/llvm-simdloop.cpp	/^    typedef SmallVector<Instruction*, 8> chainVector;$/;"	t	function:llvm::LowerSIMDLoop::enableUnsafeAlgebraIfReduction	typeref:typename:SmallVector<Instruction *,8>	file:
challenge_prompt	stdlib/LibGit2/test/libgit2.jl	/^function challenge_prompt(cmd::Cmd, challenges; timeout::Integer=60, debug::Bool=true)$/;"	f
challenge_prompt	stdlib/LibGit2/test/libgit2.jl	/^function challenge_prompt(code::Expr, challenges; timeout::Integer=60, debug::Bool=true)$/;"	f
change_factor!	stdlib/SuiteSparse/src/cholmod.jl	/^function change_factor!(F::Factor{Tv}, to_ll::Bool, to_super::Bool, to_packed::Bool,$/;"	f
change_linkage	contrib/fixup-libgfortran.sh	/^change_linkage()$/;"	f
change_stype!	stdlib/SuiteSparse/src/cholmod.jl	/^    function change_stype!(A::Sparse, i::Integer)$/;"	f
changed	deps/srccache/patchelf-0.9/src/patchelf.cc	/^    bool changed;$/;"	m	class:ElfFile	typeref:typename:bool	file:
channel_from_id	stdlib/Distributed/src/remotecall.jl	/^function channel_from_id(id)$/;"	f
channel_type	stdlib/Distributed/src/remotecall.jl	/^channel_type(rr::RemoteChannel{T}) where {T} = T$/;"	f
channeled_tasks	base/channels.jl	/^function channeled_tasks(n::Int, funcs...; ctypes=fill(Any,n), csizes=fill(0,n))$/;"	f
char-bin?	src/julia-parser.scm	/^(define (char-bin? c)$/;"	f
char-hex?	src/julia-parser.scm	/^(define (char-hex? c)$/;"	f
char-numeric?	src/flisp/aliases.scm	/^(define (char-numeric? c) (not (not (string.find "0123456789" c))))$/;"	f
char-oct?	src/julia-parser.scm	/^(define (char-oct? c)$/;"	f
char<=?	src/flisp/aliases.scm	/^(define char<=? <=)$/;"	f
char<?	src/flisp/aliases.scm	/^(define char<? <)$/;"	f
char=?	src/flisp/aliases.scm	/^(define char=? eqv?)$/;"	f
char>=?	src/flisp/aliases.scm	/^(define char>=? >=)$/;"	f
char>?	src/flisp/aliases.scm	/^(define char>? >)$/;"	f
char_move_left	stdlib/REPL/src/LineEdit.jl	/^char_move_left(s::PromptState) = char_move_left(s.input_buffer)$/;"	f
char_move_left	stdlib/REPL/src/LineEdit.jl	/^function char_move_left(buf::IOBuffer)$/;"	f
char_move_right	stdlib/REPL/src/LineEdit.jl	/^char_move_right(s) = char_move_right(buffer(s))$/;"	f
char_move_right	stdlib/REPL/src/LineEdit.jl	/^function char_move_right(buf::IOBuffer)$/;"	f
char_move_word_left	stdlib/REPL/src/LineEdit.jl	/^char_move_word_left(s) = char_move_word_left(buffer(s))$/;"	f
char_move_word_left	stdlib/REPL/src/LineEdit.jl	/^function char_move_word_left(buf::IOBuffer, is_delimiter=is_non_word_char)$/;"	f
char_move_word_right	stdlib/REPL/src/LineEdit.jl	/^char_move_word_right(s) = char_move_word_right(buffer(s))$/;"	f
char_move_word_right	stdlib/REPL/src/LineEdit.jl	/^function char_move_word_right(buf::IOBuffer, is_delimiter=is_non_word_char)$/;"	f
char_t	src/flisp/flisp.h	/^typedef char     char_t;$/;"	t	typeref:typename:char
char_uplo	stdlib/LinearAlgebra/src/LinearAlgebra.jl	/^function char_uplo(uplo::Symbol)$/;"	f
character_codes	stdlib/Dates/src/parse.jl	/^character_codes(df::Type{DateFormat{S,T}}) where {S,T} = character_codes(_directives(df))$/;"	f
character_codes	stdlib/Dates/src/parse.jl	/^function character_codes(directives::Core.SimpleVector)$/;"	f
charmap	src/flisp/julia_charmap.h	/^static const uint32_t charmap[][2] = {$/;"	v	typeref:typename:const uint32_t[][2]
charpos	stdlib/REPL/test/lineedit.jl	/^charpos(buf, pos=position(buf)) = length(content(buf), 1, pos)$/;"	f
charseek	stdlib/REPL/test/lineedit.jl	/^charseek(buf, i) = seek(buf, nextind(content(buf), 0, i+1)-1)$/;"	f
check	deps/Makefile	/^check: $(addprefix check-, $(DEP_LIBS))$/;"	t
check	deps/srccache/patchelf-0.9/Makefile.in	/^check: check-recursive$/;"	t
check	deps/srccache/patchelf-0.9/src/Makefile.in	/^check: check-am$/;"	t
check	deps/srccache/patchelf-0.9/tests/Makefile.in	/^check: check-am$/;"	t
check	stdlib/LibGit2/src/error.jl	/^macro check(git_func)$/;"	f
check	stdlib/LinearAlgebra/src/blas.jl	/^function check()$/;"	f
check	test/embedding/Makefile	/^check: $(BIN)\/embedding$(EXE) $(BIN)\/LocalModule.jl$/;"	t
check	test/gcext/Makefile	/^check: $(BIN)\/gcext$(EXE) $(BIN)\/LocalTest.jl$/;"	t
check	test/sets.jl	/^    function check(desc, val)$/;"	f
check	test/vecelement.jl	/^function check(x::Herd{N,T}) where {N,T}$/;"	f
check-TESTS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^check-TESTS:$/;"	t
check-am	deps/srccache/patchelf-0.9/Makefile.in	/^check-am: all-am$/;"	t
check-am	deps/srccache/patchelf-0.9/src/Makefile.in	/^check-am: all-am$/;"	t
check-am	deps/srccache/patchelf-0.9/tests/Makefile.in	/^check-am: all-am$/;"	t
check-curl	deps/curl.mk	/^check-curl: $(BUILDDIR)\/curl-$(CURL_VER)\/build-checked$/;"	t
check-dotop	src/ast.scm	/^(define (check-dotop e)$/;"	f
check-dsfmt	deps/dsfmt.mk	/^check-dsfmt: $(BUILDDIR)\/dsfmt-$(DSFMT_VER)\/build-checked$/;"	t
check-gmp	deps/gmp.mk	/^check-gmp: $(BUILDDIR)\/gmp-$(GMP_VER)\/build-checked$/;"	t
check-identifier	src/julia-parser.scm	/^(define-macro (check-identifier ex)$/;"	f
check-kw-args	src/julia-syntax.scm	/^(define (check-kw-args kw)$/;"	f
check-lapack	deps/blas.mk	/^check-lapack: $(BUILDDIR)\/lapack-$(LAPACK_VER)\/build-checked$/;"	t
check-lapack	deps/blas.mk	/^check-lapack: check-openblas$/;"	t
check-libgit2	deps/libgit2.mk	/^check-libgit2: $(BUILDDIR)\/$(LIBGIT2_SRC_DIR)\/build-checked$/;"	t
check-libssh2	deps/libssh2.mk	/^check-libssh2: $(BUILDDIR)\/$(LIBSSH2_SRC_DIR)\/build-checked$/;"	t
check-libuv	deps/libuv.mk	/^check-libuv: $(LIBUV_BUILDDIR)\/build-checked$/;"	t
check-libwhich	deps/libwhich.mk	/^check-libwhich: $(BUILDDIR)\/$(LIBWHICH_SRC_DIR)\/build-checked$/;"	t
check-llvm	deps/llvm.mk	/^check-llvm: $(LLVM_BUILDDIR_withtype)\/build-checked$/;"	t
check-mbedtls	deps/mbedtls.mk	/^check-mbedtls: $(BUILDDIR)\/$(MBEDTLS_SRC)\/build-checked$/;"	t
check-mpfr	deps/mpfr.mk	/^check-mpfr: $(BUILDDIR)\/mpfr-$(MPFR_VER)\/build-checked$/;"	t
check-no-return	src/julia-syntax.scm	/^(define (check-no-return e)$/;"	f
check-objconv	deps/objconv.mk	/^check-objconv: compile-objconv$/;"	t
check-openblas	deps/blas.mk	/^check-openblas: compile-openblas$/;"	t
check-openlibm	deps/openlibm.mk	/^check-openlibm: compile-openlibm$/;"	t
check-osxunwind	deps/unwind.mk	/^check-osxunwind: compile-osxunwind$/;"	t
check-patchelf	deps/patchelf.mk	/^check-patchelf: $(BUILDDIR)\/patchelf-$(PATCHELF_VER)\/build-checked$/;"	t
check-pcre	deps/pcre.mk	/^check-pcre: $(BUILDDIR)\/pcre2-$(PCRE_VER)\/build-checked$/;"	t
check-suitesparse	deps/suitesparse.mk	/^check-suitesparse: $(BUILDDIR)\/SuiteSparse-$(SUITESPARSE_VER)\/build-checked$/;"	t
check-suitesparse-wrapper	deps/suitesparse.mk	/^check-suitesparse-wrapper: check-suitesparse$/;"	t
check-suitesparse-wrapper	deps/suitesparse.mk	/^check-suitesparse-wrapper:$/;"	t
check-unwind	deps/unwind.mk	/^check-unwind: $(BUILDDIR)\/libunwind-$(UNWIND_VER)\/build-checked$/;"	t
check-utf8proc	deps/utf8proc.mk	/^check-utf8proc: $(UTF8PROC_BUILDDIR)\/build-checked$/;"	t
check-valid-name	src/julia-syntax.scm	/^(define (check-valid-name e)$/;"	f
check-whitespace	Makefile	/^check-whitespace:$/;"	t
checkBeginFunction	src/clangsa/GCChecker.cpp	/^void GCChecker::checkBeginFunction(CheckerContext &C) const {$/;"	f	class:GCChecker	typeref:typename:void
checkBind	src/clangsa/GCChecker.cpp	/^void GCChecker::checkBind(SVal LVal, SVal RVal, const clang::Stmt *S, CheckerContext &C) const {$/;"	f	class:GCChecker	typeref:typename:void
checkCombine	src/llvm-muladd.cpp	/^static bool checkCombine(Module *m, Instruction *addOp, Value *maybeMul, Value *addend,$/;"	f	typeref:typename:bool	file:
checkDerivingExpr	src/clangsa/GCChecker.cpp	/^void GCChecker::checkDerivingExpr(const Expr *Result, const Expr *Parent, bool ParentIsLoc, Chec/;"	f	class:GCChecker	typeref:typename:void
checkEndFunction	src/clangsa/GCChecker.cpp	/^void GCChecker::checkEndFunction(const clang::ReturnStmt* RS, CheckerContext &C) const {$/;"	f	class:GCChecker	typeref:typename:void
checkInst	src/llvm-alloc-opt.cpp	/^void Optimizer::checkInst(Instruction *I)$/;"	f	class:__anon0a1571000111::Optimizer	typeref:typename:void
checkLocation	src/clangsa/GCChecker.cpp	/^void GCChecker::checkLocation(SVal SLoc, bool IsLoad, const Stmt *S, CheckerContext &C) const {$/;"	f	class:GCChecker	typeref:typename:void
checkPointer	deps/srccache/patchelf-0.9/src/patchelf.cc	/^static void checkPointer(void * p, unsigned int size)$/;"	f	typeref:typename:void	file:
checkPostCall	src/clangsa/GCChecker.cpp	/^void GCChecker::checkPostCall(const CallEvent &Call, CheckerContext &C) const {$/;"	f	class:GCChecker	typeref:typename:void
checkPostStmt	src/clangsa/GCChecker.cpp	/^void GCChecker::checkPostStmt(const ArraySubscriptExpr *ASE, CheckerContext &C) const$/;"	f	class:GCChecker	typeref:typename:void
checkPostStmt	src/clangsa/GCChecker.cpp	/^void GCChecker::checkPostStmt(const CStyleCastExpr *CE, CheckerContext &C) const {$/;"	f	class:GCChecker	typeref:typename:void
checkPostStmt	src/clangsa/GCChecker.cpp	/^void GCChecker::checkPostStmt(const MemberExpr *ME, CheckerContext &C) const$/;"	f	class:GCChecker	typeref:typename:void
checkPostStmt	src/clangsa/GCChecker.cpp	/^void GCChecker::checkPostStmt(const UnaryOperator *UO, CheckerContext &C) const$/;"	f	class:GCChecker	typeref:typename:void
checkPreCall	src/clangsa/GCChecker.cpp	/^void GCChecker::checkPreCall(const CallEvent &Call, CheckerContext &C) const {$/;"	f	class:GCChecker	typeref:typename:void
check_A_mul_B!_sizes	stdlib/LinearAlgebra/src/bidiag.jl	/^function check_A_mul_B!_sizes(C, A, B)$/;"	f
check_PROGRAMS	deps/srccache/patchelf-0.9/tests/Makefile.am	/^check_PROGRAMS = simple main main-scoped big-dynstr no-rpath$/;"	m
check_PROGRAMS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^check_PROGRAMS = simple$(EXEEXT) main$(EXEEXT) main-scoped$(EXEEXT) \\$/;"	m
check_addprocs_args	stdlib/Distributed/src/managers.jl	/^function check_addprocs_args(kwargs)$/;"	f
check_addr_args	src/flisp/cvalues.c	/^static void check_addr_args(fl_context_t *fl_ctx, const char *fname, value_t arr,$/;"	f	typeref:typename:void	file:
check_ambiguous_matches	src/gf.c	/^static jl_value_t *check_ambiguous_matches(jl_typemap_t *defs, jl_typemap_entry_t *newentry, jl_/;"	f	typeref:typename:jl_value_t *	file:
check_ambiguous_visitor	src/gf.c	/^static int check_ambiguous_visitor(jl_typemap_entry_t *oldentry, struct typemap_intersection_env/;"	f	typeref:typename:int	file:
check_args	contrib/julia-config.jl	/^function check_args(args)$/;"	f
check_bit_operation	test/bitarray.jl	/^macro check_bit_operation(ex)$/;"	f
check_bit_operation	test/bitarray.jl	/^macro check_bit_operation(ex, ret_type)$/;"	f
check_bitop_call	test/bitarray.jl	/^function check_bitop_call(ret_type, func, args...; kwargs...)$/;"	f
check_body!	base/simdloop.jl	/^check_body!(x) = true$/;"	f
check_body!	base/simdloop.jl	/^check_body!(x::QuoteNode) = check_body!(x.value)$/;"	f
check_body!	base/simdloop.jl	/^function check_body!(x::Expr)$/;"	f
check_bounds	src/julia.h	/^    int8_t check_bounds;$/;"	m	struct:__anon055fe4271808	typeref:typename:int8_t
check_broadcast_axes	base/broadcast.jl	/^@inline check_broadcast_axes(shp, A) = check_broadcast_shape(shp, axes(A))$/;"	f
check_broadcast_axes	base/broadcast.jl	/^@inline function check_broadcast_axes(shp, A, As...)$/;"	f
check_broadcast_shape	base/broadcast.jl	/^check_broadcast_shape(::Tuple{}, ::Tuple{}) = nothing$/;"	f
check_broadcast_shape	base/broadcast.jl	/^check_broadcast_shape(::Tuple{}, Ashp::Tuple) = throw(DimensionMismatch("cannot broadcast array /;"	f
check_broadcast_shape	base/broadcast.jl	/^check_broadcast_shape(shp) = nothing$/;"	f
check_broadcast_shape	base/broadcast.jl	/^check_broadcast_shape(shp, ::Tuple{}) = nothing$/;"	f
check_broadcast_shape	base/broadcast.jl	/^function check_broadcast_shape(shp, Ashp::Tuple)$/;"	f
check_can_assign_type	src/interpreter.c	/^SECT_INTERP static void check_can_assign_type(jl_binding_t *b, jl_value_t *rhs)$/;"	f	typeref:typename:SECT_INTERP void	file:
check_channel_state	base/channels.jl	/^function check_channel_state(c::Channel)$/;"	f
check_cmdline	src/processor.cpp	/^static inline void check_cmdline(T &&cmdline, bool imaging)$/;"	f	namespace:__anon839834ed0111	typeref:typename:void	file:
check_code_trampoline	test/ccall.jl	/^function check_code_trampoline(f, t, n::Int)$/;"	f
check_count	base/set.jl	/^function check_count(count::Integer)$/;"	f
check_cp	test/file.jl	/^function check_cp(orig_path::AbstractString, copied_path::AbstractString, follow_symlinks::Bool)$/;"	f
check_cp_main	test/file.jl	/^function check_cp_main(orig::AbstractString, copied::AbstractString, follow_symlinks::Bool)$/;"	f
check_cpu_arch_ver	src/processor_arm.cpp	/^static bool check_cpu_arch_ver(uint32_t cpu, std::pair<int,bool> arch)$/;"	f	namespace:ARM	typeref:typename:bool	file:
check_datatype_parameters	src/jltypes.c	/^static void check_datatype_parameters(jl_typename_t *tn, jl_value_t **params, size_t np)$/;"	f	typeref:typename:void	file:
check_dense	stdlib/SuiteSparse/src/cholmod.jl	/^function check_dense(A::Dense{Tv}) where Tv<:VTypes$/;"	f
check_dir	test/file.jl	/^function check_dir(orig_path::AbstractString, copied_path::AbstractString, follow_symlinks::Bool/;"	f
check_disabled_ambiguous_visitor	src/gf.c	/^static int check_disabled_ambiguous_visitor(jl_typemap_entry_t *oldentry, struct typemap_interse/;"	f	typeref:typename:int	file:
check_exponent_err	base/mpfr.jl	/^check_exponent_err(ret) = ret == 0 || throw(ArgumentError("Invalid MPFR exponent range"))$/;"	f
check_factor	stdlib/SuiteSparse/src/cholmod.jl	/^function check_factor(F::Factor{Tv}) where Tv<:VTypes$/;"	f
check_fd_or_close	src/cgmemmgr.cpp	/^static bool check_fd_or_close(int fd)$/;"	f	namespace:__anon06c686bc0111	typeref:typename:bool	file:
check_framework_flag	contrib/julia-config.jl	/^function check_framework_flag(args)$/;"	f
check_lines!	contrib/add_license_to_files.jl	/^function check_lines!($/;"	f
check_master_connect	stdlib/Distributed/src/cluster.jl	/^function check_master_connect()$/;"	f
check_merge	test/dict.jl	/^    function check_merge(i::Vector{<:Dict}, o)$/;"	f
check_minmax_consistency	test/threads_exec.jl	/^function check_minmax_consistency(old::Array{T,1}, m::T, start::T, o::Base.Ordering) where T$/;"	f
check_nul	test/core.jl	/^function check_nul(a::Vector{UInt8})$/;"	f
check_op	base/compiler/ssair/verify.jl	/^function check_op(ir::IRCode, domtree::DomTree, @nospecialize(op), use_bb::Int, use_idx::Int)$/;"	f
check_open	base/filesystem.jl	/^function check_open(f::File)$/;"	f
check_open	base/stream.jl	/^function check_open(x::Union{LibuvStream, LibuvServer})$/;"	f
check_parent_index_match	base/subarray.jl	/^check_parent_index_match(parent, ::NTuple{N, Bool}) where {N} =$/;"	f
check_parent_index_match	base/subarray.jl	/^check_parent_index_match(parent, indices) = check_parent_index_match(parent, index_ndims(indices/;"	f
check_parent_index_match	base/subarray.jl	/^check_parent_index_match(parent::AbstractArray{T,N}, ::NTuple{N, Bool}) where {T,N} = nothing$/;"	f
check_partial	src/llvm-multiversioning.cpp	/^void CloneCtx::check_partial(Group &grp, Target &tgt)$/;"	f	class:__anond5683ea40111::CloneCtx	typeref:typename:void
check_pids_all	stdlib/SharedArrays/test/runtests.jl	/^function check_pids_all(S::SharedArray)$/;"	f
check_readable	base/reinterpretarray.jl	/^function check_readable(a::ReinterpretArray{T, N, S} where N) where {T,S}$/;"	f
check_reducedims	base/reducedim.jl	/^function check_reducedims(R, A)$/;"	f
check_sadd_int	src/runtime_intrinsics.c	/^#define check_sadd_int(/;"	d	file:
check_same_host	stdlib/Distributed/src/cluster.jl	/^function check_same_host(pids)$/;"	f
check_sparse	stdlib/SuiteSparse/src/cholmod.jl	/^function check_sparse(A::Sparse{Tv}) where Tv<:VTypes$/;"	f
check_ssub_int	src/runtime_intrinsics.c	/^#define check_ssub_int(/;"	d	file:
check_stack	src/llvm-alloc-opt.cpp	/^    CheckInst::Stack check_stack;$/;"	m	struct:__anon0a1571000111::Optimizer	typeref:typename:CheckInst::Stack	file:
check_stack	test/gcext/gcext.c	/^void check_stack(const char *name, jl_value_t *p)$/;"	f	typeref:typename:void
check_stack_notempty	test/gcext/gcext.c	/^void check_stack_notempty(const char *name, jl_value_t *p)$/;"	f	typeref:typename:void
check_tls_cb	src/threading.c	/^static int check_tls_cb(struct dl_phdr_info *info, size_t size, void *_data)$/;"	f	typeref:typename:int	file:
check_tls_cb_t	src/threading.c	/^} check_tls_cb_t;$/;"	t	typeref:struct:__anon46b360a30108	file:
check_top_bit	base/boot.jl	/^function check_top_bit(x)$/;"	f
check_uadd_int	src/runtime_intrinsics.c	/^#define check_uadd_int(/;"	d	file:
check_undef_and_fill	test/core.jl	/^    check_undef_and_fill(ary, rng) = for i in rng$/;"	f
check_usub_int	src/runtime_intrinsics.c	/^#define check_usub_int(/;"	d	file:
check_valid_base	base/parse.jl	/^@inline function check_valid_base(base)$/;"	f
check_vararg_length	src/subtype.c	/^static int check_vararg_length(jl_value_t *v, ssize_t n, jl_stenv_t *e)$/;"	f	typeref:typename:int	file:
check_worker_state	stdlib/Distributed/src/cluster.jl	/^function check_worker_state(w::Worker)$/;"	f
check_writable	base/reinterpretarray.jl	/^function check_writable(a::ReinterpretArray{T, N, S} where N) where {T,S}$/;"	f
checkbounds	base/abstractarray.jl	/^function checkbounds(::Type{Bool}, A::AbstractArray, I...)$/;"	f
checkbounds	base/abstractarray.jl	/^function checkbounds(::Type{Bool}, A::AbstractArray, i)$/;"	f
checkbounds	base/abstractarray.jl	/^function checkbounds(::Type{Bool}, A::AbstractArray{<:Any,N}, I::AbstractArray{Bool,N}) where N$/;"	f
checkbounds	base/abstractarray.jl	/^function checkbounds(A::AbstractArray, I...)$/;"	f
checkbounds	base/multidimensional.jl	/^@inline checkbounds(::Type{Bool}, A::AbstractArray, I::LogicalIndex) = axes(A) == axes(I.mask)$/;"	f
checkbounds	base/multidimensional.jl	/^@inline checkbounds(::Type{Bool}, A::AbstractArray, I::LogicalIndex{<:Any,<:AbstractArray{Bool,1/;"	f
checkbounds	base/multidimensional.jl	/^function checkbounds(::Type{Bool}, A::AbstractArray, i::Union{CartesianIndex, AbstractArray{<:Ca/;"	f
checkbounds	base/strings/basic.jl	/^checkbounds(::Type{Bool}, s::AbstractString, I::AbstractArray{<:Integer}) =$/;"	f
checkbounds	base/strings/basic.jl	/^checkbounds(::Type{Bool}, s::AbstractString, I::AbstractArray{<:Real}) =$/;"	f
checkbounds	base/strings/basic.jl	/^checkbounds(::Type{Bool}, s::AbstractString, i::Integer) =$/;"	f
checkbounds	base/strings/basic.jl	/^checkbounds(::Type{Bool}, s::AbstractString, r::AbstractRange{<:Integer}) =$/;"	f
checkbounds	base/strings/basic.jl	/^checkbounds(s::AbstractString, I::Union{Integer,AbstractArray}) =$/;"	f
checkbounds_indices	base/abstractarray.jl	/^    checkbounds_indices(Bool, (IA1, IA...), (I1, I...)) = checkindex(Bool, IA1, I1) &$/;"	f
checkbounds_indices	base/abstractarray.jl	/^checkbounds_indices(::Type{Bool}, ::Tuple{}, ::Tuple{}) = true$/;"	f
checkbounds_indices	base/abstractarray.jl	/^checkbounds_indices(::Type{Bool}, IA::Tuple, ::Tuple{}) = (@_inline_meta; all(x->unsafe_length(x/;"	f
checkbounds_indices	base/abstractarray.jl	/^function checkbounds_indices(::Type{Bool}, ::Tuple{}, I::Tuple)$/;"	f
checkbounds_indices	base/abstractarray.jl	/^function checkbounds_indices(::Type{Bool}, IA::Tuple, I::Tuple)$/;"	f
checkbounds_indices	base/multidimensional.jl	/^@inline checkbounds_indices(::Type{Bool}, ::Tuple{}, I::Tuple{CartesianIndex,Vararg{Any}}) =$/;"	f
checkbounds_indices	base/multidimensional.jl	/^@inline checkbounds_indices(::Type{Bool}, IA::Tuple, I::Tuple{CartesianIndex,Vararg{Any}}) =$/;"	f
checkbounds_indices	base/multidimensional.jl	/^@inline checkbounds_indices(::Type{Bool}, IA::Tuple{Any}, I::Tuple{CartesianIndex,Vararg{Any}}) /;"	f
checkbounds_indices	base/multidimensional.jl	/^@inline function checkbounds_indices(::Type{Bool}, ::Tuple{},$/;"	f
checkbounds_indices	base/multidimensional.jl	/^@inline function checkbounds_indices(::Type{Bool}, IA::Tuple,$/;"	f
checkbounds_indices	base/multidimensional.jl	/^@inline function checkbounds_indices(::Type{Bool}, IA::Tuple{Any},$/;"	f
checkdims_perm	base/multidimensional.jl	/^function checkdims_perm(P::AbstractArray{TP,N}, B::AbstractArray{TB,N}, perm) where {TP,TB,N}$/;"	f
checked_abs	base/checked.jl	/^checked_abs(x::Bool) = x$/;"	f
checked_abs	base/checked.jl	/^checked_abs(x::T) where {T<:Integer} = no_op_err("checked_abs", T)$/;"	f
checked_abs	base/checked.jl	/^checked_abs(x::UnsignedInt) = x$/;"	f
checked_abs	base/checked.jl	/^function checked_abs end$/;"	f
checked_abs	base/checked.jl	/^function checked_abs(x::SignedInt)$/;"	f
checked_add	base/checked.jl	/^checked_add(x) = x$/;"	f
checked_add	base/checked.jl	/^checked_add(x1::T, x2::T, x3::T) where {T} =$/;"	f
checked_add	base/checked.jl	/^checked_add(x1::T, x2::T, x3::T, x4::T) where {T} =$/;"	f
checked_add	base/checked.jl	/^checked_add(x1::T, x2::T, x3::T, x4::T, x5::T) where {T} =$/;"	f
checked_add	base/checked.jl	/^checked_add(x1::T, x2::T, x3::T, x4::T, x5::T, x6::T) where {T} =$/;"	f
checked_add	base/checked.jl	/^checked_add(x1::T, x2::T, x3::T, x4::T, x5::T, x6::T, x7::T) where {T} =$/;"	f
checked_add	base/checked.jl	/^checked_add(x1::T, x2::T, x3::T, x4::T, x5::T, x6::T, x7::T, x8::T) where {T} =$/;"	f
checked_add	base/checked.jl	/^checked_add(x::Bool) = +x$/;"	f
checked_add	base/checked.jl	/^checked_add(x::Integer, y::Integer) = checked_add(promote(x,y)...)$/;"	f
checked_add	base/checked.jl	/^function checked_add(x::T, y::T) where T<:Integer$/;"	f
checked_add	base/compiler/compiler.jl	/^const checked_add = +$/;"	v
checked_cld	base/checked.jl	/^checked_cld(x::Integer, y::Integer) = checked_cld(promote(x,y)...)$/;"	f
checked_cld	base/checked.jl	/^checked_cld(x::T, y::T) where {T<:Integer} = cld(x, y) # Base.cld already checks$/;"	f
checked_div	base/checked.jl	/^checked_div(x::Integer, y::Integer) = checked_div(promote(x,y)...)$/;"	f
checked_div	base/checked.jl	/^checked_div(x::T, y::T) where {T<:Integer} = div(x, y) # Base.div already checks$/;"	f
checked_eval_string	test/embedding/embedding.c	/^jl_value_t *checked_eval_string(const char* code)$/;"	f	typeref:typename:jl_value_t *
checked_eval_string	test/gcext/gcext.c	/^jl_value_t *checked_eval_string(const char *code)$/;"	f	typeref:typename:jl_value_t *
checked_fld	base/checked.jl	/^checked_fld(x::Integer, y::Integer) = checked_fld(promote(x,y)...)$/;"	f
checked_fld	base/checked.jl	/^checked_fld(x::T, y::T) where {T<:Integer} = fld(x, y) # Base.fld already checks$/;"	f
checked_iintrinsic	src/runtime_intrinsics.c	/^#define checked_iintrinsic(/;"	d	file:
checked_iintrinsic_div	src/runtime_intrinsics.c	/^#define checked_iintrinsic_div(/;"	d	file:
checked_iintrinsic_fast	src/runtime_intrinsics.c	/^#define checked_iintrinsic_fast(/;"	d	file:
checked_iintrinsic_slow	src/runtime_intrinsics.c	/^#define checked_iintrinsic_slow(/;"	d	file:
checked_intrinsic_ctype	src/runtime_intrinsics.c	/^#define checked_intrinsic_ctype(/;"	d	file:
checked_mod	base/checked.jl	/^checked_mod(x::Integer, y::Integer) = checked_mod(promote(x,y)...)$/;"	f
checked_mod	base/checked.jl	/^checked_mod(x::T, y::T) where {T<:Integer} = mod(x, y) # Base.mod already checks$/;"	f
checked_mul	base/checked.jl	/^checked_mul(x) = x$/;"	f
checked_mul	base/checked.jl	/^checked_mul(x1::T, x2::T, x3::T) where {T} =$/;"	f
checked_mul	base/checked.jl	/^checked_mul(x1::T, x2::T, x3::T, x4::T) where {T} =$/;"	f
checked_mul	base/checked.jl	/^checked_mul(x1::T, x2::T, x3::T, x4::T, x5::T) where {T} =$/;"	f
checked_mul	base/checked.jl	/^checked_mul(x1::T, x2::T, x3::T, x4::T, x5::T, x6::T) where {T} =$/;"	f
checked_mul	base/checked.jl	/^checked_mul(x1::T, x2::T, x3::T, x4::T, x5::T, x6::T, x7::T) where {T} =$/;"	f
checked_mul	base/checked.jl	/^checked_mul(x1::T, x2::T, x3::T, x4::T, x5::T, x6::T, x7::T, x8::T) where {T} =$/;"	f
checked_mul	base/checked.jl	/^checked_mul(x::Integer, y::Integer) = checked_mul(promote(x,y)...)$/;"	f
checked_mul	base/checked.jl	/^function checked_mul(x::T, y::T) where T<:Integer$/;"	f
checked_neg	base/checked.jl	/^function checked_neg(x::BrokenSignedInt)$/;"	f
checked_neg	base/checked.jl	/^function checked_neg(x::T) where T<:BrokenUnsignedInt$/;"	f
checked_neg	base/checked.jl	/^function checked_neg(x::T) where T<:Integer$/;"	f
checked_rem	base/checked.jl	/^checked_rem(x::Integer, y::Integer) = checked_rem(promote(x,y)...)$/;"	f
checked_rem	base/checked.jl	/^checked_rem(x::T, y::T) where {T<:Integer} = rem(x, y) # Base.rem already checks$/;"	f
checked_sub	base/checked.jl	/^checked_sub(x::Integer, y::Integer) = checked_sub(promote(x,y)...)$/;"	f
checked_sub	base/checked.jl	/^function checked_sub(x::T, y::T) where T<:Integer$/;"	f
checked_sub	base/compiler/compiler.jl	/^const checked_sub = -$/;"	v
checked_trunc_sint	base/boot.jl	/^function checked_trunc_sint(::Type{To}, x::From) where {To,From}$/;"	f
checked_trunc_uint	base/boot.jl	/^function checked_trunc_uint(::Type{To}, x::From) where {To,From}$/;"	f
checkeltype_adjoint	stdlib/LinearAlgebra/src/adjtrans.jl	/^function checkeltype_adjoint(::Type{ResultEltype}, ::Type{ParentEltype}) where {ResultEltype,Par/;"	f
checkeltype_transpose	stdlib/LinearAlgebra/src/adjtrans.jl	/^function checkeltype_transpose(::Type{ResultEltype}, ::Type{ParentEltype}) where {ResultEltype, /;"	f
checkfor_mv_cp_cptree	base/file.jl	/^function checkfor_mv_cp_cptree(src::AbstractString, dst::AbstractString, txt::AbstractString;$/;"	f
checkindex	base/abstractarray.jl	/^checkindex(::Type{Bool}, inds::AbstractUnitRange, ::Colon) = true$/;"	f
checkindex	base/abstractarray.jl	/^checkindex(::Type{Bool}, inds::AbstractUnitRange, ::Slice) = true$/;"	f
checkindex	base/abstractarray.jl	/^checkindex(::Type{Bool}, inds::AbstractUnitRange, i) =$/;"	f
checkindex	base/abstractarray.jl	/^checkindex(::Type{Bool}, inds::AbstractUnitRange, i::Real) = (first(inds) <= i) & (i <= last(ind/;"	f
checkindex	base/abstractarray.jl	/^checkindex(::Type{Bool}, indx::AbstractUnitRange, I::AbstractArray{Bool}) = false$/;"	f
checkindex	base/abstractarray.jl	/^checkindex(::Type{Bool}, indx::AbstractUnitRange, I::AbstractVector{Bool}) = indx == axes1(I)$/;"	f
checkindex	base/abstractarray.jl	/^function checkindex(::Type{Bool}, inds::AbstractUnitRange, I::AbstractArray)$/;"	f
checkindex	base/abstractarray.jl	/^function checkindex(::Type{Bool}, inds::AbstractUnitRange, r::AbstractRange)$/;"	f
checkindex	base/multidimensional.jl	/^@inline checkindex(::Type{Bool}, indx::AbstractUnitRange, I::LogicalIndex) = (indx,) == axes(I.m/;"	f
checkindex	base/multidimensional.jl	/^checkindex(::Type{Bool}, inds::Tuple, I::LogicalIndex) = false$/;"	f
checkindex	base/multidimensional.jl	/^function checkindex(::Type{Bool}, inds::Tuple, I::AbstractArray{<:CartesianIndex})$/;"	f
checkmode	base/file.jl	/^function checkmode(mode::Integer)$/;"	f
checknonsingular	stdlib/LinearAlgebra/src/factorization.jl	/^checknonsingular(info) = info == 0 || throw(SingularException(info))$/;"	f
checknum	test/gcext/gcext-test.jl	/^function checknum(s, rx, cond)$/;"	f
checkout!	stdlib/LibGit2/src/LibGit2.jl	/^function checkout!(repo::GitRepo, commit::AbstractString = "";$/;"	f
checkout_head	stdlib/LibGit2/src/repository.jl	/^function checkout_head(repo::GitRepo; options::CheckoutOptions = CheckoutOptions())$/;"	f
checkout_index	stdlib/LibGit2/src/repository.jl	/^function checkout_index(repo::GitRepo, idx::Union{GitIndex, Nothing} = nothing;$/;"	f
checkout_tree	stdlib/LibGit2/src/repository.jl	/^function checkout_tree(repo::GitRepo, obj::GitObject;$/;"	f
checkpositivedefinite	stdlib/LinearAlgebra/src/factorization.jl	/^checkpositivedefinite(info) = info == 0 || throw(PosDefException(info))$/;"	f
checksquare	stdlib/LinearAlgebra/src/LinearAlgebra.jl	/^function checksquare(A)$/;"	f
checksquare	stdlib/LinearAlgebra/src/LinearAlgebra.jl	/^function checksquare(A...)$/;"	f
checksum_error	deps/tools/jlchecksum	/^checksum_error()$/;"	f
cherrypick	stdlib/LibGit2/src/repository.jl	/^function cherrypick(repo::GitRepo, commit::GitCommit; options::CherrypickOptions = CherrypickOpt/;"	f
child	test/stacktraces.jl	/^    @noinline child() = stacktrace()$/;"	f
child_eval	test/file.jl	/^child_eval(code::String) = eval(Meta.parse(readchomp(`$(Base.julia_cmd()) -E $code`)))$/;"	f
chk_tfunc	base/compiler/tfuncs.jl	/^chk_tfunc(@nospecialize(x), @nospecialize(y)) = Tuple{widenconst(x), Bool}$/;"	f
chkargsok	stdlib/LinearAlgebra/src/lapack.jl	/^function chkargsok(ret::BlasInt)$/;"	f
chkdiag	stdlib/LinearAlgebra/src/lapack.jl	/^function chkdiag(diag::AbstractChar)$/;"	f
chkfinite	stdlib/LinearAlgebra/src/lapack.jl	/^function chkfinite(A::AbstractMatrix)$/;"	f
chkfullrank	stdlib/LinearAlgebra/src/cholesky.jl	/^function chkfullrank(C::CholeskyPivoted)$/;"	f
chklapackerror	stdlib/LinearAlgebra/src/lapack.jl	/^function chklapackerror(ret::BlasInt)$/;"	f
chknonsingular	stdlib/LinearAlgebra/src/lapack.jl	/^function chknonsingular(ret::BlasInt)$/;"	f
chkposdef	stdlib/LinearAlgebra/src/lapack.jl	/^function chkposdef(ret::BlasInt)$/;"	f
chkside	stdlib/LinearAlgebra/src/lapack.jl	/^function chkside(side::AbstractChar)$/;"	f
chkstride1	stdlib/LinearAlgebra/src/LinearAlgebra.jl	/^@inline chkstride1(A...) = _chkstride1(true, A...)$/;"	f
chktrans	stdlib/LinearAlgebra/src/lapack.jl	/^function chktrans(trans::AbstractChar)$/;"	f
chkuplo	stdlib/LinearAlgebra/src/lapack.jl	/^function chkuplo(uplo::AbstractChar)$/;"	f
chmod	base/file.jl	/^function chmod(path::AbstractString, mode::Integer; recursive::Bool=false)$/;"	f
chnlprod	test/copy.jl	/^chnlprod(x) = Channel(c->for i in x; put!(c,i); end)$/;"	f
cholcopy	stdlib/LinearAlgebra/src/cholesky.jl	/^@inline cholcopy(A) = copy_oftype(A, choltype(A))$/;"	f
cholesky	stdlib/LinearAlgebra/src/cholesky.jl	/^function cholesky(x::Number, uplo::Symbol=:U)$/;"	f
cholesky	stdlib/LinearAlgebra/src/diagonal.jl	/^cholesky(A::Diagonal, ::Val{false} = Val(false); check::Bool = true) =$/;"	f
cholesky	stdlib/SuiteSparse/src/cholmod.jl	/^function cholesky(A::Sparse; shift::Real=0.0, check::Bool = true,$/;"	f
cholesky!	stdlib/LinearAlgebra/src/cholesky.jl	/^cholesky!(A::RealHermSymComplexHerm{<:Real}, ::Val{true}; tol = 0.0, check::Bool = true) =$/;"	f
cholesky!	stdlib/LinearAlgebra/src/cholesky.jl	/^function cholesky!(A::RealHermSymComplexHerm, ::Val{false}=Val(false); check::Bool = true)$/;"	f
cholesky!	stdlib/LinearAlgebra/src/cholesky.jl	/^function cholesky!(A::RealHermSymComplexHerm{<:BlasReal,<:StridedMatrix},$/;"	f
cholesky!	stdlib/LinearAlgebra/src/cholesky.jl	/^function cholesky!(A::StridedMatrix, ::Val{false}=Val(false); check::Bool = true)$/;"	f
cholesky!	stdlib/LinearAlgebra/src/cholesky.jl	/^function cholesky!(A::StridedMatrix, ::Val{true}; tol = 0.0, check::Bool = true)$/;"	f
cholesky!	stdlib/LinearAlgebra/src/diagonal.jl	/^function cholesky!(A::Diagonal, ::Val{false} = Val(false); check::Bool = true)$/;"	f
cholesky!	stdlib/SuiteSparse/src/cholmod.jl	/^function cholesky!(F::Factor{Tv}, A::Sparse{Tv};$/;"	f
cholmod_com_offsets	stdlib/SuiteSparse/src/cholmod.jl	/^const cholmod_com_offsets = Vector{Csize_t}(undef, 19)$/;"	v
cholmod_name	stdlib/SuiteSparse/src/cholmod.jl	/^macro cholmod_name(nm)$/;"	f
choltype	stdlib/LinearAlgebra/src/cholesky.jl	/^@inline choltype(A) = promote_type(typeof(sqrt(oneunit(eltype(A)))), Float32)$/;"	f
chomp	base/strings/util.jl	/^function chomp(s::AbstractString)$/;"	f
chomp	base/strings/util.jl	/^function chomp(s::String)$/;"	f
choosetests	test/choosetests.jl	/^function choosetests(choices = [])$/;"	f
chop	base/strings/util.jl	/^function chop(s::AbstractString; head::Integer = 0, tail::Integer = 1)$/;"	f
chown	base/file.jl	/^function chown(path::AbstractString, owner::Integer, group::Integer=-1)$/;"	f
chown	contrib/mac/framework/Makefile	/^	chown -R $$(id -un):$$(id -gn) $(DESTDIR)$(prefix)\/$(framework_directory)$/;"	t
christmas	stdlib/Dates/test/adjusters.jl	/^        christmas(y) = (y, 12, 25)$/;"	f
chunkedcopyto!	base/broadcast.jl	/^@inline function chunkedcopyto!(dest::BitArray, bc::Broadcasted)$/;"	f
ci	test/broadcast.jl	/^ci(x) = CartesianIndex(x)$/;"	f
ci32	test/ccall.jl	/^ci32 = Complex{Int32}(Int32(10), Int32(31))$/;"	v
ci64	test/ccall.jl	/^ci64 = Complex{Int64}(Int64(20), Int64(51))$/;"	v
cimg	stdlib/LinearAlgebra/test/lu.jl	/^cimg  = randn(n)\/2$/;"	v
cinfo_optimized	test/compiler/inference.jl	/^cinfo_optimized = code_typed(test28079, (Ptr{Float32}, Int, Int); optimize=true)[].first$/;"	v
cinfo_unoptimized	test/compiler/inference.jl	/^cinfo_unoptimized = code_typed(test28079, (Ptr{Float32}, Int, Int); optimize=false)[].first$/;"	v
circcopy!	base/multidimensional.jl	/^function circcopy!(dest, src)$/;"	f
circshift	base/abstractarraymath.jl	/^circshift(a::AbstractArray, shiftamt::DimsInteger) = circshift!(similar(a), a, shiftamt)$/;"	f
circshift	base/abstractarraymath.jl	/^function circshift(a::AbstractArray, shiftamt)$/;"	f
circshift	base/abstractarraymath.jl	/^function circshift(a::AbstractArray, shiftamt::Real)$/;"	f
circshift!	base/bitarray.jl	/^circshift!(B::BitVector, i::Integer) = circshift!(B, B, i)$/;"	f
circshift!	base/bitarray.jl	/^function circshift!(dest::BitVector, src::BitVector, i::Integer)$/;"	f
circshift!	base/multidimensional.jl	/^@noinline function circshift!(dest::AbstractArray{T,N}, src, shiftamt::DimsInteger) where {T,N}$/;"	f
circshift!	base/multidimensional.jl	/^circshift!(dest::AbstractArray, src, ::Tuple{}) = copyto!(dest, src)$/;"	f
circshift!	base/multidimensional.jl	/^circshift!(dest::AbstractArray, src, shiftamt) = circshift!(dest, src, (shiftamt...,))$/;"	f
circshift!	stdlib/SparseArrays/src/sparsematrix.jl	/^circshift!(O::AbstractSparseMatrixCSC, X::AbstractSparseMatrixCSC, (r,)::Base.DimsInteger{1}) = /;"	f
circshift!	stdlib/SparseArrays/src/sparsematrix.jl	/^circshift!(O::AbstractSparseMatrixCSC, X::AbstractSparseMatrixCSC, r::Real) = circshift!(O, X, (/;"	f
circshift!	stdlib/SparseArrays/src/sparsematrix.jl	/^function circshift!(O::AbstractSparseMatrixCSC, X::AbstractSparseMatrixCSC, (r,c)::Base.DimsInte/;"	f
circshift!	stdlib/SparseArrays/src/sparsevector.jl	/^circshift!(O::SparseVector, X::SparseVector, r::Real,) = circshift!(O, X, (Integer(r),))$/;"	f
circshift!	stdlib/SparseArrays/src/sparsevector.jl	/^function circshift!(O::SparseVector, X::SparseVector, (r,)::Base.DimsInteger{1})$/;"	f
cis	base/complex.jl	/^function cis(theta::Real)$/;"	f
cis	base/complex.jl	/^function cis(z::Complex)$/;"	f
cis_fast	base/fastmath.jl	/^    cis_fast(x::ComplexTypes) = exp(-imag(x)) * cis(real(x))$/;"	f
cis_fast	base/fastmath.jl	/^    function cis_fast(x::T) where {T<:FloatTypes}$/;"	f
cl-convert	src/julia-syntax.scm	/^(define (cl-convert e fname lam namemap defined toplevel interp)$/;"	f
clamp	base/math.jl	/^clamp(::Missing, lo, hi) = missing$/;"	f
clamp	base/math.jl	/^clamp(x::X, lo::L, hi::H) where {X,L,H} =$/;"	f
clamp!	base/grisu/bignums.jl	/^function clamp!(x::Bignum)$/;"	f
clamp!	base/math.jl	/^function clamp!(x::AbstractArray, lo, hi)$/;"	f
clampcor	stdlib/Statistics/src/Statistics.jl	/^clampcor(x) = x$/;"	f
clampcor	stdlib/Statistics/src/Statistics.jl	/^clampcor(x::Real) = clamp(x, -1, 1)$/;"	f
clang	src/clangsa/GCChecker.cpp	/^namespace clang {$/;"	n	file:
clang_registerCheckers	src/clangsa/GCChecker.cpp	/^void clang_registerCheckers (CheckerRegistry &registry) {$/;"	f	typeref:typename:void
classes	src/abi_x86_64.cpp	/^    ArgClass classes[2];$/;"	m	struct:ABI_x86_64Layout::Classification	typeref:typename:ArgClass[2]	file:
classify	src/abi_x86_64.cpp	/^Classification classify(jl_datatype_t *dt) const$/;"	f	struct:ABI_x86_64Layout	typeref:typename:Classification	file:
classifyType	src/abi_x86_64.cpp	/^void classifyType(Classification& accum, jl_datatype_t *dt, uint64_t offset) const$/;"	f	struct:ABI_x86_64Layout	typeref:typename:void	file:
classify_arg	src/abi_aarch64.cpp	/^Type *classify_arg(jl_datatype_t *dt, bool *fpreg, bool *onstack,$/;"	f	struct:ABI_AArch64Layout	typeref:typename:Type *	file:
classify_arg	src/abi_arm.cpp	/^void classify_arg(jl_datatype_t *dt, bool *reg,$/;"	f	struct:ABI_ARMLayout	typeref:typename:void	file:
classify_cprc	src/abi_arm.cpp	/^void classify_cprc(jl_datatype_t *dt, bool *vfp) const$/;"	f	struct:ABI_ARMLayout	typeref:typename:void	file:
classify_return_arg	src/abi_arm.cpp	/^void classify_return_arg(jl_datatype_t *dt, bool *reg,$/;"	f	struct:ABI_ARMLayout	typeref:typename:void	file:
cld	base/bool.jl	/^cld(x::Bool, y::Bool) = div(x,y)$/;"	f
cld	base/float.jl	/^cld(x::T, y::T) where {T<:AbstractFloat} = -fld(-x,y)$/;"	f
cld	base/int.jl	/^cld(x::Signed, y::Unsigned) = div(x, y) + (!signbit(x) & (rem(x, y) != 0))$/;"	f
cld	base/int.jl	/^cld(x::Unsigned, y::Signed) = div(x, y) + (!signbit(y) & (rem(x, y) != 0))$/;"	f
cld	base/int.jl	/^function cld(x::T, y::T) where T<:Integer$/;"	f
cld	base/int.jl	/^function cld(x::T, y::T) where T<:Unsigned$/;"	f
cld	base/operators.jl	/^cld(x::T, y::T) where {T<:Real} = convert(T,round((x-modCeil(x,y))\/y))$/;"	f
cld	base/promotion.jl	/^cld(x::Real, y::Real) = cld(promote(x,y)...)$/;"	f
clean	Makefile	/^clean: | $(CLEAN_TARGETS)$/;"	t
clean	base/Makefile	/^clean:$/;"	t
clean	contrib/mac/app/Makefile	/^clean:$/;"	t
clean	contrib/mac/frameworkapp/Makefile	/^clean:$/;"	t
clean	deps/srccache/patchelf-0.9/Makefile.in	/^clean: clean-recursive$/;"	t
clean	deps/srccache/patchelf-0.9/src/Makefile.in	/^clean: clean-am$/;"	t
clean	deps/srccache/patchelf-0.9/tests/Makefile.in	/^clean: clean-am$/;"	t
clean	doc/Makefile	/^clean:$/;"	t
clean	src/Makefile	/^clean:$/;"	t
clean	src/flisp/Makefile	/^clean:$/;"	t
clean	src/support/Makefile	/^clean:$/;"	t
clean	stdlib/Makefile	/^clean: $(addprefix clean-, $(STDLIBS_EXT)) $(CLEAN_TARGETS)$/;"	t
clean	test/Makefile	/^clean:$/;"	t
clean	test/embedding/Makefile	/^clean:$/;"	t
clean	test/gcext/Makefile	/^clean:$/;"	t
clean	ui/Makefile	/^clean: | $(CLEAN_TARGETS)$/;"	t
clean-am	deps/srccache/patchelf-0.9/Makefile.in	/^clean-am: clean-generic mostlyclean-am$/;"	t
clean-am	deps/srccache/patchelf-0.9/src/Makefile.in	/^clean-am: clean-binPROGRAMS clean-generic mostlyclean-am$/;"	t
clean-am	deps/srccache/patchelf-0.9/tests/Makefile.in	/^clean-am: clean-checkPROGRAMS clean-generic clean-local mostlyclean-am$/;"	t
clean-analyzegc	src/Makefile	/^clean-analyzegc:$/;"	t
clean-binPROGRAMS	deps/srccache/patchelf-0.9/src/Makefile.in	/^clean-binPROGRAMS:$/;"	t
clean-checkPROGRAMS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^clean-checkPROGRAMS:$/;"	t
clean-cscope	deps/srccache/patchelf-0.9/Makefile.in	/^clean-cscope:$/;"	t
clean-curl	deps/curl.mk	/^clean-curl:$/;"	t
clean-dsfmt	deps/dsfmt.mk	/^clean-dsfmt:$/;"	t
clean-flisp	src/Makefile	/^clean-flisp:$/;"	t
clean-generic	deps/srccache/patchelf-0.9/Makefile.in	/^clean-generic:$/;"	t
clean-generic	deps/srccache/patchelf-0.9/src/Makefile.in	/^clean-generic:$/;"	t
clean-generic	deps/srccache/patchelf-0.9/tests/Makefile.in	/^clean-generic:$/;"	t
clean-gmp	deps/gmp.mk	/^clean-gmp:$/;"	t
clean-lapack	deps/blas.mk	/^clean-lapack: clean-openblas$/;"	t
clean-lapack	deps/blas.mk	/^clean-lapack:$/;"	t
clean-libcxx	deps/llvm.mk	/^clean-libcxx:$/;"	t
clean-libcxxabi	deps/llvm.mk	/^clean-libcxxabi:$/;"	t
clean-libgit2	deps/libgit2.mk	/^clean-libgit2:$/;"	t
clean-libssh2	deps/libssh2.mk	/^clean-libssh2:$/;"	t
clean-libuv	deps/libuv.mk	/^clean-libuv:$/;"	t
clean-libwhich	deps/libwhich.mk	/^clean-libwhich:$/;"	t
clean-llvm	deps/llvm.mk	/^clean-llvm: clean-libcxx clean-libcxxabi$/;"	t
clean-local	deps/srccache/patchelf-0.9/tests/Makefile.am	/^clean-local:$/;"	t
clean-local	deps/srccache/patchelf-0.9/tests/Makefile.in	/^clean-local:$/;"	t
clean-mbedtls	deps/mbedtls.mk	/^clean-mbedtls:$/;"	t
clean-mpfr	deps/mpfr.mk	/^clean-mpfr:$/;"	t
clean-objconv	deps/objconv.mk	/^clean-objconv:$/;"	t
clean-openblas	deps/blas.mk	/^clean-openblas:$/;"	t
clean-openlibm	deps/openlibm.mk	/^clean-openlibm:$/;"	t
clean-osxunwind	deps/unwind.mk	/^clean-osxunwind:$/;"	t
clean-patchelf	deps/patchelf.mk	/^clean-patchelf:$/;"	t
clean-pcre	deps/pcre.mk	/^clean-pcre:$/;"	t
clean-suitesparse	deps/suitesparse.mk	/^clean-suitesparse: clean-suitesparse-wrapper uninstall-suitesparse$/;"	t
clean-suitesparse-wrapper	deps/suitesparse.mk	/^clean-suitesparse-wrapper: clean-suitesparse$/;"	t
clean-suitesparse-wrapper	deps/suitesparse.mk	/^clean-suitesparse-wrapper:$/;"	t
clean-support	src/Makefile	/^clean-support:$/;"	t
clean-unwind	deps/unwind.mk	/^clean-unwind:$/;"	t
clean-utf8proc	deps/utf8proc.mk	/^clean-utf8proc:$/;"	t
cleanall	Makefile	/^cleanall: clean$/;"	t
cleanall	deps/Makefile	/^cleanall: $(addprefix clean-, $(DEP_LIBS))$/;"	t
cleanall	doc/Makefile	/^cleanall: clean$/;"	t
cleanall	src/Makefile	/^cleanall: clean clean-flisp clean-support clean-analyzegc$/;"	t
cleanup	stdlib/LibGit2/src/repository.jl	/^function cleanup(r::GitRepo)$/;"	f
cleanup	test/read.jl	/^function cleanup()$/;"	f
cleanup!	stdlib/Profile/src/Profile.jl	/^    function cleanup!(node::StackFrameTree)$/;"	f
cleanup_tname_glbs	stdlib/Distributed/src/clusterserialize.jl	/^function cleanup_tname_glbs(s::ClusterSerializer, identifier)$/;"	f
clear	stdlib/Profile/src/Profile.jl	/^clear() = ccall(:jl_profile_clear_data, Cvoid, ())$/;"	f
clear	stdlib/REPL/src/Terminals.jl	/^@eval clear(t::UnixTerminal) = write(t.out_stream, $"$(CSI)H$(CSI)2J")$/;"	f
clear	stdlib/REPL/src/Terminals.jl	/^clear(t::TextTerminal) = error("Unimplemented")$/;"	f
clear!	stdlib/Distributed/src/clusterserialize.jl	/^clear!(sym::Symbol, pid::Int; mod=Main) = clear!([sym], [pid]; mod=mod)$/;"	f
clear!	stdlib/Distributed/src/clusterserialize.jl	/^clear!(sym::Symbol, pids=workers(); mod=Main) = clear!([sym], pids; mod=mod)$/;"	f
clear!	stdlib/Distributed/src/clusterserialize.jl	/^clear!(syms, pid::Int; mod=Main) = clear!(syms, [pid]; mod=mod)$/;"	f
clear!	stdlib/Distributed/src/clusterserialize.jl	/^function clear!(syms, pids=workers(); mod=Main)$/;"	f
clear!	stdlib/Distributed/src/workerpool.jl	/^function clear!(pool::CachingPool)$/;"	f
clear-capture-bits	src/julia-syntax.scm	/^(define (clear-capture-bits vinfos)$/;"	f
clear_impl!	stdlib/Distributed/src/clusterserialize.jl	/^clear_impl!(sym::Symbol, mod::Module) = isdefined(mod, sym) && @eval(mod, global $sym = nothing)$/;"	f
clear_impl!	stdlib/Distributed/src/clusterserialize.jl	/^clear_impl!(syms, mod::Module) = foreach(x->clear_impl!(x,mod), syms)$/;"	f
clear_input_area	stdlib/REPL/src/LineEdit.jl	/^clear_input_area(s) = clear_input_area(s.terminal, s)$/;"	f
clear_input_area	stdlib/REPL/src/LineEdit.jl	/^clear_input_area(terminal, s) = (_clear_input_area(terminal, s.ias); s.ias = InputAreaState(0, 0/;"	f
clear_line	stdlib/REPL/src/Terminals.jl	/^@eval clear_line(t::UnixTerminal) = write(t.out_stream, $"\\r$(CSI)0K")$/;"	f
clear_line	stdlib/REPL/src/Terminals.jl	/^clear_line(t::TextTerminal) = error("Unimplemented")$/;"	f
clear_line	stdlib/REPL/src/Terminals.jl	/^clear_line(t::TextTerminal, row) = error("Unimplemented")$/;"	f
clear_malloc_data	stdlib/Profile/src/Profile.jl	/^clear_malloc_data() = ccall(:jl_clear_malloc_data, Cvoid, ())$/;"	f
clear_mark	src/gc-debug.c	/^static void clear_mark(int bits)$/;"	f	typeref:typename:void	file:
client_port	stdlib/Distributed/src/managers.jl	/^const client_port = Ref{Cushort}(0)$/;"	v
client_refs	stdlib/Distributed/src/remotecall.jl	/^const client_refs = WeakKeyDict{Any, Nothing}() # used as a WeakKeySet$/;"	v
clipboard	stdlib/InteractiveUtils/src/clipboard.jl	/^    clipboard(x) = clipboard(sprint(print, x)::String)$/;"	f
clipboard	stdlib/InteractiveUtils/src/clipboard.jl	/^    clipboard(x="") = error("`clipboard` function not implemented for $(Sys.KERNEL)")$/;"	f
clipboard	stdlib/InteractiveUtils/src/clipboard.jl	/^    function clipboard()$/;"	f
clipboard	stdlib/InteractiveUtils/src/clipboard.jl	/^    function clipboard(x)$/;"	f
clipboard	stdlib/InteractiveUtils/src/clipboard.jl	/^    function clipboard(x::AbstractString)$/;"	f
clipboardcmd	stdlib/InteractiveUtils/src/clipboard.jl	/^    function clipboardcmd()$/;"	f
clk	src/signals-mach.c	/^clock_serv_t clk;$/;"	v	typeref:typename:clock_serv_t
clone	stdlib/LibGit2/src/LibGit2.jl	/^function clone(repo_url::AbstractString, repo_path::AbstractString;$/;"	f
clone	stdlib/LibGit2/src/repository.jl	/^function clone(repo_url::AbstractString, repo_path::AbstractString,$/;"	f
clone_all_partials	src/llvm-multiversioning.cpp	/^void CloneCtx::clone_all_partials()$/;"	f	class:__anond5683ea40111::CloneCtx	typeref:typename:void
clone_bases	src/llvm-multiversioning.cpp	/^void CloneCtx::clone_bases()$/;"	f	class:__anond5683ea40111::CloneCtx	typeref:typename:void
clone_fs	src/llvm-multiversioning.cpp	/^        std::set<uint32_t> clone_fs;$/;"	m	struct:__anond5683ea40111::CloneCtx::Group	typeref:typename:std::set<uint32_t>	file:
clone_function	src/llvm-multiversioning.cpp	/^void CloneCtx::clone_function(Function *F, Function *new_f, ValueToValueMapTy &vmap)$/;"	f	class:__anond5683ea40111::CloneCtx	typeref:typename:void
clone_idxs	src/processor.h	/^    const uint32_t *clone_idxs;$/;"	m	struct:_jl_sysimg_fptrs_t	typeref:typename:const uint32_t *
clone_mask	src/llvm-multiversioning.cpp	/^constexpr uint32_t clone_mask =$/;"	v	namespace:__anond5683ea40111	typeref:typename:uint32_t
clone_offsets	src/processor.h	/^    const int32_t *clone_offsets;$/;"	m	struct:_jl_sysimg_fptrs_t	typeref:typename:const int32_t *
clone_partial	src/llvm-multiversioning.cpp	/^void CloneCtx::clone_partial(Group &grp, Target &tgt)$/;"	f	class:__anond5683ea40111::CloneCtx	typeref:typename:void
cloned	src/llvm-multiversioning.cpp	/^    std::set<Function*> cloned{};$/;"	m	struct:__anond5683ea40111::CloneCtx	typeref:typename:std::set<Function * >	file:
clones	src/llvm-multiversioning.cpp	/^        std::vector<Target> clones;$/;"	m	struct:__anond5683ea40111::CloneCtx::Group	typeref:typename:std::vector<Target>	file:
close	base/asyncevent.jl	/^function close(t::Union{Timer, AsyncCondition})$/;"	f
close	base/channels.jl	/^function close(c::Channel, excp::Exception=closed_exception())$/;"	f
close	base/coreio.jl	/^close(::DevNull) = nothing$/;"	f
close	base/filesystem.jl	/^function close(f::File)$/;"	f
close	base/io.jl	/^close(io::AbstractPipe) = (close(pipe_writer(io)); close(pipe_reader(io)))$/;"	f
close	base/io.jl	/^function close end$/;"	f
close	base/iobuffer.jl	/^@noinline function close(io::GenericIOBuffer{T}) where T$/;"	f
close	base/iostream.jl	/^close(s::IOStream) = @lock_nofail s.lock ccall(:ios_close, Cvoid, (Ptr{Cvoid},), s.ios)$/;"	f
close	base/multimedia.jl	/^close(d::TextDisplay) = close(d.io)$/;"	f
close	base/stream.jl	/^function close(s::BufferStream)$/;"	f
close	base/stream.jl	/^function close(stream::Union{LibuvStream, LibuvServer})$/;"	f
close	stdlib/Distributed/src/remotecall.jl	/^close(rr::RemoteChannel) = call_on_owner(close_ref, rr)$/;"	f
close	stdlib/FileWatching/src/FileWatching.jl	/^function close(t::FDWatcher)$/;"	f
close	stdlib/FileWatching/src/FileWatching.jl	/^function close(t::Union{FileMonitor, FolderMonitor, PollingFileWatcher})$/;"	f
close	stdlib/FileWatching/src/FileWatching.jl	/^function close(t::_FDWatcher, readable::Bool, writable::Bool)$/;"	f
close_chnl_on_taskdone	base/channels.jl	/^function close_chnl_on_taskdone(t::Task, c::Channel)$/;"	f
close_pipe_sync	base/stream.jl	/^    function close_pipe_sync(handle::RawFD)$/;"	f
close_pipe_sync	base/stream.jl	/^    function close_pipe_sync(handle::WindowsRawSocket)$/;"	f
close_ref	stdlib/Distributed/src/remotecall.jl	/^close_ref(rid) = (close(lookup_ref(rid).c); nothing)$/;"	f
close_stdio	base/process.jl	/^close_stdio(stdio) = close(stdio)$/;"	f
close_stdio	base/process.jl	/^close_stdio(stdio::OS_HANDLE) = close_pipe_sync(stdio)$/;"	f
closed_exception	base/channels.jl	/^closed_exception() = InvalidStateException("Channel is closed.", :closed)$/;"	f
closing-token?	src/julia-parser.scm	/^(define closing-token?$/;"	f
closure-convert	src/julia-syntax.scm	/^(define (closure-convert e) (cl-convert e #f #f #f #f #f #f))$/;"	f
clotest	test/core.jl	/^function clotest()$/;"	f
clust_ser	stdlib/Distributed/test/distributed_exec.jl	/^clust_ser = (Distributed.worker_from_id(id_other)).w_serializer$/;"	v
cluster_cookie	stdlib/Distributed/src/cluster.jl	/^cluster_cookie() = (init_multi(); LPROC.cookie)$/;"	f
cluster_cookie	stdlib/Distributed/src/cluster.jl	/^function cluster_cookie(cookie)$/;"	f
cluster_mgmt_from_master_check	stdlib/Distributed/src/cluster.jl	/^function cluster_mgmt_from_master_check()$/;"	f
cmd	base/boot.jl	/^macro cmd end$/;"	f
cmd	base/cmd.jl	/^macro cmd(str)$/;"	f
cmd	stdlib/Distributed/test/runtests.jl	/^cmd = `$test_exename $test_exeflags $disttestfile`$/;"	v
cmd	stdlib/Test/test/runtests.jl	/^cmd = `$(Base.julia_cmd()) --startup-file=no --depwarn=error test_exec.jl`$/;"	v
cmd	test/boundscheck.jl	/^cmd = `$(Base.julia_cmd()) --check-bounds=no --startup-file=no --depwarn=error boundscheck_exec./;"	v
cmd	test/boundscheck.jl	/^cmd = `$(Base.julia_cmd()) --check-bounds=yes --startup-file=no --depwarn=error boundscheck_exec/;"	v
cmd	test/boundscheck.jl	/^cmd = `$(Base.julia_cmd()) --depwarn=error --startup-file=no boundscheck_exec.jl`$/;"	v
cmd_gen	base/cmd.jl	/^function cmd_gen(parsed)$/;"	f
cmd_interpolate	base/cmd.jl	/^cmd_interpolate(xs...) = cstr(string(map(cmd_interpolate1, xs)...))$/;"	f
cmd_interpolate1	base/cmd.jl	/^cmd_interpolate1(::Nothing) = throw(ArgumentError("`nothing` can not be interpolated into comman/;"	f
cmd_interpolate1	base/cmd.jl	/^cmd_interpolate1(x) = x$/;"	f
cmds	src/julia.h	/^    const char **cmds;$/;"	m	struct:__anon055fe4271808	typeref:typename:const char **
cmove	stdlib/REPL/src/Terminals.jl	/^cmove(t::TextTerminal, x, y) = error("Unimplemented")$/;"	f
cmove_col	stdlib/REPL/src/Terminals.jl	/^cmove_col(t::TextTerminal, c) = cmove(c, getY(t))$/;"	f
cmove_col	stdlib/REPL/src/Terminals.jl	/^cmove_col(t::UnixTerminal, n) = (write(t.out_stream, '\\r'); n > 1 && cmove_right(t, n-1))$/;"	f
cmove_down	stdlib/REPL/src/Terminals.jl	/^cmove_down(t) = cmove_down(t, 1)$/;"	f
cmove_down	stdlib/REPL/src/Terminals.jl	/^cmove_down(t::TextTerminal, n) = cmove(getX(t), max(height(t), getY(t)+n))$/;"	f
cmove_down	stdlib/REPL/src/Terminals.jl	/^cmove_down(t::UnixTerminal, n) = write(t.out_stream, "$(CSI)$(n)B")$/;"	f
cmove_left	stdlib/REPL/src/Terminals.jl	/^cmove_left(t) = cmove_left(t, 1)$/;"	f
cmove_left	stdlib/REPL/src/Terminals.jl	/^cmove_left(t::TextTerminal, n) = cmove(max(1, getX(t)-n), getY(t))$/;"	f
cmove_left	stdlib/REPL/src/Terminals.jl	/^cmove_left(t::UnixTerminal, n) = write(t.out_stream, "$(CSI)$(n)D")$/;"	f
cmove_line_down	stdlib/REPL/src/Terminals.jl	/^cmove_line_down(t) = cmove_line_down(t, 1)$/;"	f
cmove_line_down	stdlib/REPL/src/Terminals.jl	/^cmove_line_down(t::TextTerminal, n) = cmove(1, max(height(t), getY(t)+n))$/;"	f
cmove_line_down	stdlib/REPL/src/Terminals.jl	/^cmove_line_down(t::UnixTerminal, n) = (cmove_down(t, n); cmove_col(t, 1))$/;"	f
cmove_line_up	stdlib/REPL/src/Terminals.jl	/^cmove_line_up(t) = cmove_line_up(t, 1)$/;"	f
cmove_line_up	stdlib/REPL/src/Terminals.jl	/^cmove_line_up(t::TextTerminal, n) = cmove(1, max(1, getY(t)-n))$/;"	f
cmove_line_up	stdlib/REPL/src/Terminals.jl	/^cmove_line_up(t::UnixTerminal, n) = (cmove_up(t, n); cmove_col(t, 1))$/;"	f
cmove_right	stdlib/REPL/src/Terminals.jl	/^cmove_right(t) = cmove_right(t, 1)$/;"	f
cmove_right	stdlib/REPL/src/Terminals.jl	/^cmove_right(t::TextTerminal, n) = cmove(max(width(t), getX(t)+n), getY(t))$/;"	f
cmove_right	stdlib/REPL/src/Terminals.jl	/^cmove_right(t::UnixTerminal, n) = write(t.out_stream, "$(CSI)$(n)C")$/;"	f
cmove_up	stdlib/REPL/src/Terminals.jl	/^cmove_up(t) = cmove_up(t, 1)$/;"	f
cmove_up	stdlib/REPL/src/Terminals.jl	/^cmove_up(t::TextTerminal, n) = cmove(getX(t), max(1, getY(t)-n))$/;"	f
cmove_up	stdlib/REPL/src/Terminals.jl	/^cmove_up(t::UnixTerminal, n) = write(t.out_stream, "$(CSI)$(n)A")$/;"	f
cmp	base/abstractarray.jl	/^function cmp(A::AbstractVector, B::AbstractVector)$/;"	f
cmp	base/array.jl	/^function cmp(a::Array{UInt8,1}, b::Array{UInt8,1})$/;"	f
cmp	base/gmp.jl	/^cmp(a::BigInt, b::BigInt) = Int(ccall((:__gmpz_cmp, :libgmp), Cint, (mpz_t, mpz_t), a, b))$/;"	f
cmp	base/gmp.jl	/^cmp(x::BigInt, y::BigInt) = sign(MPZ.cmp(x, y))$/;"	f
cmp	base/gmp.jl	/^cmp(x::BigInt, y::CdoubleMax) = isnan(y) ? -1 : sign(MPZ.cmp_d(x, y))$/;"	f
cmp	base/gmp.jl	/^cmp(x::BigInt, y::ClongMax) = sign(MPZ.cmp_si(x, y))$/;"	f
cmp	base/gmp.jl	/^cmp(x::BigInt, y::CulongMax) = sign(MPZ.cmp_ui(x, y))$/;"	f
cmp	base/gmp.jl	/^cmp(x::BigInt, y::Integer) = cmp(x, big(y))$/;"	f
cmp	base/gmp.jl	/^cmp(x::CdoubleMax, y::BigInt) = -cmp(y, x)$/;"	f
cmp	base/gmp.jl	/^cmp(x::Integer, y::BigInt) = -cmp(y, x)$/;"	f
cmp	base/mpfr.jl	/^cmp(x::BigFloat, y::Integer) = cmp(x,big(y))$/;"	f
cmp	base/mpfr.jl	/^cmp(x::CdoubleMax, y::BigFloat) = -cmp(y,x)$/;"	f
cmp	base/mpfr.jl	/^cmp(x::Integer, y::BigFloat) = -cmp(y,x)$/;"	f
cmp	base/mpfr.jl	/^function cmp(x::BigFloat, y::BigInt)$/;"	f
cmp	base/mpfr.jl	/^function cmp(x::BigFloat, y::CdoubleMax)$/;"	f
cmp	base/mpfr.jl	/^function cmp(x::BigFloat, y::ClongMax)$/;"	f
cmp	base/mpfr.jl	/^function cmp(x::BigFloat, y::CulongMax)$/;"	f
cmp	base/operators.jl	/^cmp(<, x, y) = (x < y) ? -1 : ifelse(y < x, 1, 0)$/;"	f
cmp	base/operators.jl	/^cmp(x, y) = isless(x, y) ? -1 : ifelse(isless(y, x), 1, 0)$/;"	f
cmp	base/operators.jl	/^cmp(x::Integer, y::Integer) = ifelse(isless(x, y), -1, ifelse(isless(y, x), 1, 0))$/;"	f
cmp	base/strings/basic.jl	/^cmp(a::Symbol, b::Symbol) = Int(sign(ccall(:strcmp, Int32, (Cstring, Cstring), a, b)))$/;"	f
cmp	base/strings/basic.jl	/^function cmp(a::AbstractString, b::AbstractString)$/;"	f
cmp	base/strings/string.jl	/^function cmp(a::String, b::String)$/;"	f
cmp	base/strings/substring.jl	/^function cmp(a::SubString{String}, b::SubString{String})$/;"	f
cmp_	src/jltypes.c	/^STATIC_INLINE int cmp_(int a, int b) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE int
cmp_d	base/gmp.jl	/^cmp_d(a::BigInt, b) = Int(ccall((:__gmpz_cmp_d, :libgmp), Cint, (mpz_t, Cdouble), a, b))$/;"	f
cmp_eq	src/support/operators.c	/^int cmp_eq(void *a, numerictype_t atag, void *b, numerictype_t btag,$/;"	f	typeref:typename:int
cmp_fast	base/fastmath.jl	/^    cmp_fast(x::T, y::T) where {T<:FloatTypes} = ifelse(x==y, 0, ifelse(x<y, -1, +1))$/;"	f
cmp_iintrinsic	src/runtime_intrinsics.c	/^#define cmp_iintrinsic(/;"	d	file:
cmp_lt	src/support/operators.c	/^int cmp_lt(void *a, numerictype_t atag, void *b, numerictype_t btag)$/;"	f	typeref:typename:int
cmp_ptr	test/gcext/gcext.c	/^static inline int cmp_ptr(void *p, void *q)$/;"	f	typeref:typename:int	file:
cmp_same_eq	src/support/operators.c	/^int cmp_same_eq(void *a, void *b, numerictype_t tag)$/;"	f	typeref:typename:int
cmp_same_lt	src/support/operators.c	/^int cmp_same_lt(void *a, void *b, numerictype_t tag)$/;"	f	typeref:typename:int
cmp_showf	test/offsetarray.jl	/^function cmp_showf(printfunc, io, A; options = ())$/;"	f
cmp_si	base/gmp.jl	/^cmp_si(a::BigInt, b) = Int(ccall((:__gmpz_cmp_si, :libgmp), Cint, (mpz_t, Clong), a, b))$/;"	f
cmp_sn	test/ranges.jl	/^function cmp_sn(w, hi, lo, slopbits=0)$/;"	f
cmp_sn2	test/ranges.jl	/^function cmp_sn2(w, hi, lo, slopbits=0)$/;"	f
cmp_tfunc	base/compiler/tfuncs.jl	/^cmp_tfunc(@nospecialize(x), @nospecialize(y)) = Bool$/;"	f
cmp_ui	base/gmp.jl	/^cmp_ui(a::BigInt, b) = Int(ccall((:__gmpz_cmp_ui, :libgmp), Cint, (mpz_t, Culong), a, b))$/;"	f
cmptag	src/flisp/equal.c	/^#define cmptag(/;"	d	file:
cnt	stdlib/LibGit2/src/walker.jl	/^cnt = LibGit2.with(LibGit2.GitRevWalker(repo)) do walker$/;"	v
cnvt	test/core.jl	/^cnvt(::Type{Array{S, N}}, x::Array{T, N}) where {S, T, N} = convert(Array{S}, x)$/;"	f
cnvt	test/core.jl	/^cnvt(T, x) = convert_default(T, x, cnvt)$/;"	f
coalesce	base/missing.jl	/^coalesce() = missing$/;"	f
coalesce	base/missing.jl	/^coalesce(x::Any, y...) = x$/;"	f
coalesce	base/missing.jl	/^coalesce(x::Missing, y...) = coalesce(y...)$/;"	f
coalesce	base/missing.jl	/^function coalesce end$/;"	f
coarserperiod	stdlib/Dates/src/periods.jl	/^coarserperiod(::Type{Day}) = (Week, 7)$/;"	f
coarserperiod	stdlib/Dates/src/periods.jl	/^coarserperiod(::Type{Hour}) = (Day, 24)$/;"	f
coarserperiod	stdlib/Dates/src/periods.jl	/^coarserperiod(::Type{Microsecond}) = (Millisecond, 1000)$/;"	f
coarserperiod	stdlib/Dates/src/periods.jl	/^coarserperiod(::Type{Millisecond}) = (Second, 1000)$/;"	f
coarserperiod	stdlib/Dates/src/periods.jl	/^coarserperiod(::Type{Minute}) = (Hour, 60)$/;"	f
coarserperiod	stdlib/Dates/src/periods.jl	/^coarserperiod(::Type{Month}) = (Year, 12)$/;"	f
coarserperiod	stdlib/Dates/src/periods.jl	/^coarserperiod(::Type{Nanosecond})  = (Microsecond, 1000)$/;"	f
coarserperiod	stdlib/Dates/src/periods.jl	/^coarserperiod(::Type{P}) where {P<:Period} = (P, 1)$/;"	f
coarserperiod	stdlib/Dates/src/periods.jl	/^coarserperiod(::Type{Second}) = (Minute, 60)$/;"	f
code	src/codegen.cpp	/^    jl_array_t *code = NULL;$/;"	m	class:jl_codectx_t	typeref:typename:jl_array_t *	file:
code	src/julia.h	/^    jl_array_t *code;  \/\/ Any array of statements$/;"	m	struct:_jl_code_info_t	typeref:typename:jl_array_t *
code28044	test/syntax.jl	/^code28044(x) = 10x$/;"	f
code28279	test/compiler/inference.jl	/^code28279 = code_lowered(f28279, (Bool,))[1].code$/;"	v
code_allocated	src/cgmemmgr.cpp	/^    bool code_allocated;$/;"	m	class:__anon06c686bc0111::RTDyldMemoryManagerJL	typeref:typename:bool	file:
code_coverage	src/julia.h	/^    int code_coverage;      \/\/ can we measure coverage?$/;"	m	struct:__anon055fe4271b08	typeref:typename:int
code_coverage	src/julia.h	/^    int8_t code_coverage;$/;"	m	struct:__anon055fe4271808	typeref:typename:int8_t
code_coverage_test	test/testhelpers/coverage_file.jl	/^function code_coverage_test()$/;"	f
code_in_code	stdlib/Markdown/test/runtests.jl	/^code_in_code = md"""$/;"	v
code_llvm	stdlib/InteractiveUtils/src/codeview.jl	/^code_llvm(@nospecialize(f), @nospecialize(types=Tuple); raw=false, dump_module=false, optimize=t/;"	f
code_llvm	stdlib/InteractiveUtils/src/codeview.jl	/^code_llvm(io::IO, @nospecialize(f), @nospecialize(types), raw::Bool, dump_module::Bool=false, op/;"	f
code_llvm	stdlib/InteractiveUtils/src/codeview.jl	/^code_llvm(io::IO, @nospecialize(f), @nospecialize(types=Tuple); raw::Bool=false, dump_module::Bo/;"	f
code_lowered	base/reflection.jl	/^function code_lowered(@nospecialize(f), @nospecialize(t=Tuple); generated::Bool=true, debuginfo:/;"	f
code_lowered	stdlib/InteractiveUtils/src/macros.jl	/^macro code_lowered(ex0...)$/;"	f
code_native	stdlib/InteractiveUtils/src/codeview.jl	/^code_native(::IO, ::Any, ::Symbol) = error("illegal code_native call") # resolve ambiguous call$/;"	f
code_native	stdlib/InteractiveUtils/src/codeview.jl	/^code_native(@nospecialize(f), @nospecialize(types=Tuple); syntax::Symbol=:att, debuginfo::Symbol/;"	f
code_native	stdlib/InteractiveUtils/src/codeview.jl	/^code_native(io::IO, @nospecialize(f), @nospecialize(types=Tuple); syntax::Symbol=:att, debuginfo/;"	f
code_point_err	base/char.jl	/^@noinline code_point_err(u::Integer) = throw(CodePointError(u))$/;"	f
code_typed	base/reflection.jl	/^function code_typed(@nospecialize(f), @nospecialize(types=Tuple);$/;"	f
code_typed	stdlib/InteractiveUtils/src/macros.jl	/^macro code_typed(ex0...)$/;"	f
code_warntype	stdlib/InteractiveUtils/src/codeview.jl	/^code_warntype(@nospecialize(f), @nospecialize(t); kwargs...) =$/;"	f
code_warntype	stdlib/InteractiveUtils/src/codeview.jl	/^function code_warntype(io::IO, @nospecialize(f), @nospecialize(t); debuginfo::Symbol=:default, o/;"	f
codegen_egal_of_strings	test/strings/basic.jl	/^    codegen_egal_of_strings(x, y) = (x===y, x!==y)$/;"	f
codegen_lock	src/threading.c	/^jl_mutex_t codegen_lock;$/;"	v	typeref:typename:jl_mutex_t
codelocs	src/julia.h	/^    jl_value_t *codelocs; \/\/ Int32 array of indicies into the line table$/;"	m	struct:_jl_code_info_t	typeref:typename:jl_value_t *
codepoint	base/char.jl	/^codepoint(c::Char) = UInt32(c)$/;"	f
codepoint	base/char.jl	/^function codepoint end$/;"	f
codeunit	base/regex.jl	/^codeunit(s::SubstitutionString) = codeunit(s.string)$/;"	f
codeunit	base/regex.jl	/^codeunit(s::SubstitutionString, i::Integer) = codeunit(s.string, i)$/;"	f
codeunit	base/strings/basic.jl	/^@propagate_inbounds codeunit(s::AbstractString, i::Integer) = typeof(i) === Int ?$/;"	f
codeunit	base/strings/string.jl	/^@inline function codeunit(s::String, i::Integer)$/;"	f
codeunit	base/strings/string.jl	/^codeunit(s::String) = UInt8$/;"	f
codeunit	base/strings/substring.jl	/^codeunit(s::SubString) = codeunit(s.string)$/;"	f
codeunit	base/strings/substring.jl	/^function codeunit(s::SubString, i::Integer)$/;"	f
codeunits	base/strings/basic.jl	/^codeunits(s::AbstractString) = CodeUnits(s)$/;"	f
cody_waite_2c_pio2	base/special/rem_pio2.jl	/^@inline function cody_waite_2c_pio2(x::Float64, fn, n)$/;"	f
cody_waite_ext_pio2	base/special/rem_pio2.jl	/^@inline function cody_waite_ext_pio2(x::Float64, xhp)$/;"	f
coeff	stdlib/Random/src/DSFMT.jl	/^coeff(f::GF2X, i) = MPZ.tstbit(f.z, i)$/;"	f
coerce	test/hashing.jl	/^function coerce(T::Type, x)$/;"	f
colboundind	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline colboundind(A::AbstractSparseMatrixCSC, j) = getcolptr(A)[j + 1]$/;"	f
colboundind	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline colboundind(A::SparseVector, j) = convert(indtype(A), length(nonzeroinds(A)) + 1)$/;"	f
collapse_recursive	src/disasm.cpp	/^    bool collapse_recursive = true;$/;"	m	class:DILineInfoPrinter	typeref:typename:bool	file:
collect	base/array.jl	/^collect(::Type{T}, itr) where {T} = _collect(T, itr, IteratorSize(itr))$/;"	f
collect	base/array.jl	/^collect(A::AbstractArray) = _collect_indices(axes(A), A)$/;"	f
collect	base/array.jl	/^collect(itr) = _collect(1:1 #= Array =#, itr, IteratorEltype(itr), IteratorSize(itr))$/;"	f
collect	base/array.jl	/^function collect(itr::Generator)$/;"	f
collect	base/multidimensional.jl	/^collect(L::LogicalIndex) = [i for i in L]$/;"	f
collect	base/range.jl	/^collect(r::AbstractRange) = vcat(r)$/;"	f
collect_backedges	src/dump.c	/^static void collect_backedges(jl_method_instance_t *callee) JL_GC_DISABLED$/;"	f	typeref:typename:void	file:
collect_backtrace_fiber	src/signals-win.c	/^static jl_ucontext_t collect_backtrace_fiber;$/;"	v	typeref:typename:jl_ucontext_t	file:
collect_eachmatch	test/regex.jl	/^    function collect_eachmatch(re, str; overlap=false)$/;"	f
collect_func_info	src/llvm-multiversioning.cpp	/^uint32_t CloneCtx::collect_func_info(Function &F)$/;"	f	class:__anond5683ea40111::CloneCtx	typeref:typename:uint32_t
collect_func_infos	src/llvm-multiversioning.cpp	/^void CloneCtx::collect_func_infos()$/;"	f	class:__anond5683ea40111::CloneCtx	typeref:typename:void
collect_similar	base/array.jl	/^collect_similar(cont, itr) = _collect(cont, itr, IteratorEltype(itr), IteratorSize(itr))$/;"	f
collect_test_logs	stdlib/Test/src/logging.jl	/^function collect_test_logs(f; kwargs...)$/;"	f
collect_to!	base/array.jl	/^function collect_to!(dest::AbstractArray{T}, itr, offs, st) where T$/;"	f
collect_to_with_first!	base/array.jl	/^function collect_to_with_first!(dest, v1, itr, st)$/;"	f
collect_to_with_first!	base/array.jl	/^function collect_to_with_first!(dest::AbstractArray, v1, itr, st)$/;"	f
colon_sym	src/ast.c	/^jl_sym_t *colon_sym; jl_sym_t *hygienicscope_sym;$/;"	v	typeref:typename:jl_sym_t *
color	src/julia.h	/^    int8_t color;$/;"	m	struct:__anon055fe4271808	typeref:typename:int8_t
color_normal	base/client.jl	/^color_normal = text_colors[:normal]$/;"	v
colrange	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline colrange(A::AbstractSparseMatrixCSC, j) = nzrange(A, j)$/;"	f
colrange	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline colrange(A::SparseVector, j) = 1:length(nonzeroinds(A))$/;"	f
cols	stdlib/Markdown/src/render/terminal/render.jl	/^cols(io) = displaysize(io)[2]$/;"	f
colstartind	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline colstartind(A::AbstractSparseMatrixCSC, j) = getcolptr(A)[j]$/;"	f
colstartind	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline colstartind(A::SparseVector, j) = one(indtype(A))$/;"	f
columns	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline columns(A::AbstractSparseMatrixCSC) = 1:size(A, 2)$/;"	f
columns	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline columns(A::SparseVector) = 1$/;"	f
colval	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^colval(sbuff::String, startpos::Int, endpos::Int, cells::Array, row::Int, col::Int) = true$/;"	f
colval	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^function colval(sbuff::String, startpos::Int, endpos::Int, cells::Array{<:AbstractChar,2}, row::/;"	f
colval	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^function colval(sbuff::String, startpos::Int, endpos::Int, cells::Array{<:AbstractString,2}, row/;"	f
colval	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^function colval(sbuff::String, startpos::Int, endpos::Int, cells::Array{Any,2}, row::Int, col::I/;"	f
colval	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^function colval(sbuff::String, startpos::Int, endpos::Int, cells::Array{Bool,2}, row::Int, col::/;"	f
colval	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^function colval(sbuff::String, startpos::Int, endpos::Int, cells::Array{T,2}, row::Int, col::Int/;"	f
colwidths	stdlib/Markdown/src/GitHub/table.jl	/^colwidths(rows; len = length, min = 0) =$/;"	f
combinations	stdlib/Distributed/test/topology.jl	/^combinations = []$/;"	v
combine_axes	base/broadcast.jl	/^@inline combine_axes(A, B...) = broadcast_shape(axes(A), combine_axes(B...))$/;"	f
combine_axes	base/broadcast.jl	/^combine_axes(A) = axes(A)$/;"	f
combine_eltypes	base/broadcast.jl	/^combine_eltypes(f, args::Tuple) = Base._return_type(f, eltypes(args))$/;"	f
combine_styles	base/broadcast.jl	/^@inline combine_styles(c1, c2, cs...) = result_style(combine_styles(c1), combine_styles(c2, cs../;"	f
combine_styles	base/broadcast.jl	/^combine_styles() = DefaultArrayStyle{0}()$/;"	f
combine_styles	base/broadcast.jl	/^combine_styles(c) = result_style(BroadcastStyle(typeof(c)))$/;"	f
combine_styles	base/broadcast.jl	/^combine_styles(c1, c2) = result_style(combine_styles(c1), combine_styles(c2))$/;"	f
combine_styles	base/broadcast.jl	/^function combine_styles end$/;"	f
combine_thread_gc_counts	src/gc.c	/^static void combine_thread_gc_counts(jl_gc_num_t *dest) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void	file:
command_group	stdlib/REPL/src/LineEdit.jl	/^command_group(command::Function) = command_group(nameof(command))$/;"	f
command_group	stdlib/REPL/src/LineEdit.jl	/^command_group(command::Symbol) = get(COMMAND_GROUP, command, :nogroup)$/;"	f
commit	stdlib/LibGit2/src/commit.jl	/^function commit(repo::GitRepo, msg::AbstractString;$/;"	f
commit	stdlib/LibGit2/src/commit.jl	/^function commit(repo::GitRepo,$/;"	f
commit	stdlib/LibGit2/src/rebase.jl	/^function commit(rb::GitRebase, sig::GitSignature)$/;"	f
commit_changes	stdlib/REPL/src/LineEdit.jl	/^commit_changes(t::UnixTerminal, termbuf) = (write(t, take!(termbuf.out_stream)); nothing)$/;"	f
commit_line	stdlib/REPL/src/LineEdit.jl	/^function commit_line(s)$/;"	f
commit_oid	stdlib/LibGit2/src/LibGit2.jl	/^commit_oid = LibGit2.commit(repo, "add file1")$/;"	v
commit_oid1	stdlib/LibGit2/src/LibGit2.jl	/^commit_oid1 = LibGit2.commit(repo, "commit 1")$/;"	v
commit_oid1	stdlib/LibGit2/src/LibGit2.jl	/^commit_oid1 = LibGit2.commit(repo, "commit1"; author=sig, committer=sig)$/;"	v
commit_oid2	stdlib/LibGit2/src/LibGit2.jl	/^commit_oid2 = LibGit2.commit(repo, "commit 2")$/;"	v
commit_oid2	stdlib/LibGit2/src/LibGit2.jl	/^commit_oid2 = LibGit2.commit(repo, "commit2"; author=sig, committer=sig)$/;"	v
committer	stdlib/LibGit2/src/commit.jl	/^function committer(c::GitCommit)$/;"	f
common_dtype	stdlib/SuiteSparse/src/cholmod.jl	/^const common_dtype = Ref{Ptr{Cint}}()$/;"	v
common_final_ll	stdlib/SuiteSparse/src/cholmod.jl	/^const common_final_ll = Ref{Ptr{Cint}}()$/;"	v
common_itype	stdlib/SuiteSparse/src/cholmod.jl	/^const common_itype = Ref{Ptr{Cint}}()$/;"	v
common_nmethods	stdlib/SuiteSparse/src/cholmod.jl	/^const common_nmethods = Ref{Ptr{Cint}}()$/;"	v
common_postorder	stdlib/SuiteSparse/src/cholmod.jl	/^const common_postorder = Ref{Ptr{Cint}}()$/;"	v
common_prefix	stdlib/REPL/src/LineEdit.jl	/^function common_prefix(completions)$/;"	f
common_print	stdlib/SuiteSparse/src/cholmod.jl	/^const common_print = Ref{Ptr{Cint}}()$/;"	v
common_size	stdlib/SuiteSparse/src/cholmod.jl	/^const common_size = ccall((:jl_cholmod_common_size,:libsuitesparse_wrapper),Int,())$/;"	v
common_struct	stdlib/SuiteSparse/src/cholmod.jl	/^const common_struct = Vector{UInt8}()$/;"	v
common_supernodal	stdlib/SuiteSparse/src/cholmod.jl	/^const common_supernodal = Ref{Ptr{Cint}}()$/;"	v
common_symbol_tag	src/dump.c	/^static htable_t common_symbol_tag;$/;"	v	typeref:typename:htable_t	file:
commutative	stdlib/LinearAlgebra/src/special.jl	/^macro commutative(myexpr)$/;"	f
comp-accum	src/julia-syntax.scm	/^(define (comp-accum e make-and done? take)$/;"	f
compact	base/iobuffer.jl	/^function compact(io::GenericIOBuffer)$/;"	f
compact!	base/compiler/ssair/ir.jl	/^function compact!(code::IRCode, allow_cfg_transforms=false)$/;"	f
compact-and-renumber	src/julia-syntax.scm	/^(define (compact-and-renumber ex file line)$/;"	f
compact-ir	src/julia-syntax.scm	/^(define (compact-ir body file line)$/;"	f
compact_exprtype	base/compiler/ssair/queries.jl	/^function compact_exprtype(compact::IncrementalCompact, @nospecialize(value))$/;"	f
compare	base/docs/basedocs.jl	/^function compare(a, b)$/;"	f
compare	base/grisu/bignums.jl	/^function compare(a::Bignum,b::Bignum)$/;"	f
compare	test/core.jl	/^@noinline compare(a, b) = (a === b) # make sure we are testing code-generation of `is`$/;"	f
compare-num-strings	src/julia-parser.scm	/^(define (compare-num-strings s1 s2)$/;"	f
compare-one	src/julia-syntax.scm	/^(define (compare-one e)$/;"	f
compare_	src/flisp/equal.c	/^static value_t compare_(fl_context_t *fl_ctx, value_t a, value_t b, int eq)$/;"	f	typeref:typename:value_t	file:
compare_cgparams	src/cgutils.cpp	/^static int compare_cgparams(const jl_cgparams_t *a, const jl_cgparams_t *b)$/;"	f	typeref:typename:int	file:
compare_fields	src/builtins.c	/^static int NOINLINE compare_fields(jl_value_t *a, jl_value_t *b, jl_datatype_t *dt) JL_NOTSAFEPO/;"	f	typeref:typename:int NOINLINE	file:
compare_large_struct	test/compiler/codegen.jl	/^function compare_large_struct(a)$/;"	f
compare_svec	src/builtins.c	/^static int NOINLINE compare_svec(jl_svec_t *a, jl_svec_t *b) JL_NOTSAFEPOINT$/;"	f	typeref:typename:int NOINLINE	file:
comparehash_init	src/flisp/equal.c	/^void comparehash_init(fl_context_t *fl_ctx)$/;"	f	typeref:typename:void
comparison_prec	stdlib/Test/src/Test.jl	/^const comparison_prec = Base.operator_precedence(:(==))$/;"	v
compile	base/pcre.jl	/^function compile(pattern::AbstractString, options::Integer)$/;"	f
compile	base/regex.jl	/^compile(itr::RegexMatchIterator) = (compile(itr.regex); itr)$/;"	f
compile	base/regex.jl	/^function compile(regex::Regex)$/;"	f
compile	base/simdloop.jl	/^function compile(x, ivdep)$/;"	f
compile	deps/Makefile	/^compile: $(addprefix compile-, $(DEP_LIBS))$/;"	t
compile-body	src/julia-syntax.scm	/^(define (compile-body e vi lam)$/;"	f
compile-curl	deps/curl.mk	/^compile-curl: $(BUILDDIR)\/curl-$(CURL_VER)\/build-compiled$/;"	t
compile-dsfmt	deps/dsfmt.mk	/^compile-dsfmt: $(BUILDDIR)\/dsfmt-$(DSFMT_VER)\/build-compiled$/;"	t
compile-gmp	deps/gmp.mk	/^compile-gmp: $(BUILDDIR)\/gmp-$(GMP_VER)\/build-compiled$/;"	t
compile-lapack	deps/blas.mk	/^compile-lapack: $(BUILDDIR)\/lapack-$(LAPACK_VER)\/build-compiled$/;"	t
compile-lapack	deps/blas.mk	/^compile-lapack: compile-openblas$/;"	t
compile-libgit2	deps/libgit2.mk	/^compile-libgit2: $(BUILDDIR)\/$(LIBGIT2_SRC_DIR)\/build-compiled$/;"	t
compile-libssh2	deps/libssh2.mk	/^compile-libssh2: $(BUILDDIR)\/$(LIBSSH2_SRC_DIR)\/build-compiled$/;"	t
compile-libuv	deps/libuv.mk	/^compile-libuv: $(LIBUV_BUILDDIR)\/build-compiled$/;"	t
compile-libwhich	deps/libwhich.mk	/^compile-libwhich: $(BUILDDIR)\/$(LIBWHICH_SRC_DIR)\/build-compiled$/;"	t
compile-llvm	deps/llvm.mk	/^compile-llvm: $(LLVM_BUILDDIR_withtype)\/build-compiled$/;"	t
compile-mbedtls	deps/mbedtls.mk	/^compile-mbedtls: $(BUILDDIR)\/$(MBEDTLS_SRC)\/build-compiled$/;"	t
compile-mpfr	deps/mpfr.mk	/^compile-mpfr: $(BUILDDIR)\/mpfr-$(MPFR_VER)\/build-compiled$/;"	t
compile-objconv	deps/objconv.mk	/^compile-objconv: $(BUILDDIR)\/objconv\/build-compiled$/;"	t
compile-openblas	deps/blas.mk	/^compile-openblas: $(BUILDDIR)\/$(OPENBLAS_SRC_DIR)\/build-compiled$/;"	t
compile-openlibm	deps/openlibm.mk	/^compile-openlibm: $(BUILDDIR)\/$(OPENLIBM_SRC_DIR)\/build-compiled$/;"	t
compile-osxunwind	deps/unwind.mk	/^compile-osxunwind: $(BUILDDIR)\/libosxunwind-$(OSXUNWIND_VER)\/build-compiled$/;"	t
compile-patchelf	deps/patchelf.mk	/^compile-patchelf: $(BUILDDIR)\/patchelf-$(PATCHELF_VER)\/build-compiled$/;"	t
compile-pcre	deps/pcre.mk	/^compile-pcre: $(BUILDDIR)\/pcre2-$(PCRE_VER)\/build-compiled$/;"	t
compile-suitesparse	deps/suitesparse.mk	/^compile-suitesparse: $(BUILDDIR)\/SuiteSparse-$(SUITESPARSE_VER)\/build-compiled$/;"	t
compile-suitesparse	deps/suitesparse.mk	/^compile-suitesparse: | $(build_prefix)\/manifest\/openblas$/;"	t
compile-suitesparse-wrapper	deps/suitesparse.mk	/^compile-suitesparse-wrapper: compile-suitesparse$/;"	t
compile-suitesparse-wrapper	deps/suitesparse.mk	/^compile-suitesparse-wrapper:$/;"	t
compile-unwind	deps/unwind.mk	/^compile-unwind: $(BUILDDIR)\/libunwind-$(UNWIND_VER)\/build-compiled$/;"	t
compile-utf8proc	deps/utf8proc.mk	/^compile-utf8proc: $(UTF8PROC_BUILDDIR)\/build-compiled$/;"	t
compile_all_enq_	src/precompile.c	/^static void compile_all_enq_(jl_methtable_t *mt, void *env)$/;"	f	typeref:typename:void	file:
compile_all_enq__	src/precompile.c	/^static int compile_all_enq__(jl_typemap_entry_t *ml, void *env)$/;"	f	typeref:typename:int	file:
compile_enabled	src/julia.h	/^    int8_t compile_enabled;$/;"	m	struct:__anon055fe4271808	typeref:typename:int8_t
compilecache	base/loading.jl	/^function compilecache(pkg::PkgId)$/;"	f
compilecache	base/loading.jl	/^function compilecache(pkg::PkgId, path::String)$/;"	f
compiled_addf	test/intrinsics.jl	/^compiled_addf(x, y) = Core.Intrinsics.add_float(x, y)$/;"	f
compiled_addi	test/intrinsics.jl	/^compiled_addi(x, y) = Core.Intrinsics.add_int(x, y)$/;"	f
compiled_conv	test/intrinsics.jl	/^function compiled_conv(::Type{T}, x) where T$/;"	f
complete	base/compiler/ssair/ir.jl	/^function complete(compact::IncrementalCompact)$/;"	f
complete_expanduser	stdlib/REPL/src/REPLCompletions.jl	/^function complete_expanduser(path::AbstractString, r)::Completions$/;"	f
complete_keyword	stdlib/REPL/src/REPLCompletions.jl	/^function complete_keyword(s::Union{String,SubString{String}})::Vector{Completion}$/;"	f
complete_line	stdlib/REPL/src/LineEdit.jl	/^complete_line(c::EmptyCompletionProvider, s) = [], true, true$/;"	f
complete_line	stdlib/REPL/src/LineEdit.jl	/^function complete_line(s::MIState)$/;"	f
complete_line	stdlib/REPL/src/LineEdit.jl	/^function complete_line(s::PromptState, repeats)$/;"	f
complete_line	stdlib/REPL/src/LineEdit.jl	/^function complete_line(s::SearchState, repeats)$/;"	f
complete_line	stdlib/REPL/src/REPL.jl	/^function complete_line(c::LatexCompletions, s)$/;"	f
complete_line	stdlib/REPL/src/REPL.jl	/^function complete_line(c::REPLCompletionProvider, s)$/;"	f
complete_line	stdlib/REPL/src/REPL.jl	/^function complete_line(c::ShellCompletionProvider, s)$/;"	f
complete_methods	stdlib/REPL/src/REPLCompletions.jl	/^function complete_methods(ex_org::Expr, context_module=Main)::Vector{Completion}$/;"	f
complete_path	stdlib/REPL/src/REPLCompletions.jl	/^function complete_path(path::AbstractString, pos; use_envpath=false)::Completions$/;"	f
complete_symbol	stdlib/REPL/src/REPLCompletions.jl	/^function complete_symbol(sym, ffunc, context_module=Main)::Vector{Completion}$/;"	f
completed	src/cgmemmgr.cpp	/^    SmallVector<SplitPtrBlock, 16> completed;$/;"	m	class:__anon06c686bc0111::ROAllocator	typeref:typename:SmallVector<SplitPtrBlock,16>	file:
completes_global	stdlib/REPL/src/REPLCompletions.jl	/^function completes_global(x, name)$/;"	f
completion_text	stdlib/REPL/src/REPLCompletions.jl	/^completion_text(c::BslashCompletion) = c.bslash$/;"	f
completion_text	stdlib/REPL/src/REPLCompletions.jl	/^completion_text(c::DictCompletion) = c.key$/;"	f
completion_text	stdlib/REPL/src/REPLCompletions.jl	/^completion_text(c::FieldCompletion) = string(c.field)$/;"	f
completion_text	stdlib/REPL/src/REPLCompletions.jl	/^completion_text(c::KeywordCompletion) = c.keyword$/;"	f
completion_text	stdlib/REPL/src/REPLCompletions.jl	/^completion_text(c::MethodCompletion) = sprint(io -> show(io, c.method, kwtype=c.kwtype))$/;"	f
completion_text	stdlib/REPL/src/REPLCompletions.jl	/^completion_text(c::ModuleCompletion) = c.mod$/;"	f
completion_text	stdlib/REPL/src/REPLCompletions.jl	/^completion_text(c::PackageCompletion) = c.package$/;"	f
completion_text	stdlib/REPL/src/REPLCompletions.jl	/^completion_text(c::PathCompletion) = c.path$/;"	f
completion_text	stdlib/REPL/src/REPLCompletions.jl	/^completion_text(c::PropertyCompletion) = string(c.property)$/;"	f
completion_text	stdlib/REPL/src/REPLCompletions.jl	/^completion_text(c::ShellCompletion) = c.text$/;"	f
completions	stdlib/REPL/src/REPLCompletions.jl	/^function completions(string, pos, context_module=Main)::Completions$/;"	f
complex	base/complex.jl	/^complex(::Type{Complex{T}}) where {T<:Real} = Complex{T}$/;"	f
complex	base/complex.jl	/^complex(::Type{T}) where {T<:Real} = Complex{T}$/;"	f
complex	base/complex.jl	/^complex(A::AbstractArray{<:Complex}) = A$/;"	f
complex	base/complex.jl	/^complex(x::Real) = Complex(x)$/;"	f
complex	base/complex.jl	/^complex(x::Real, y::Real) = Complex(x, y)$/;"	f
complex	base/complex.jl	/^complex(z::Complex) = z$/;"	f
complex	base/complex.jl	/^function complex(A::AbstractArray{T}) where T$/;"	f
complex	stdlib/SparseArrays/src/sparsematrix.jl	/^complex(S::SparseMatrixCSC) = SparseMatrixCSC(size(S, 1), size(S, 2), copy(getcolptr(S)), copy(r/;"	f
complex	stdlib/SparseArrays/src/sparsevector.jl	/^complex(x::AbstractSparseVector) =$/;"	f
complex	stdlib/SparseArrays/src/sparsevector.jl	/^complex(x::AbstractSparseVector{<:Complex}) = x$/;"	f
complex-return?	src/ast.scm	/^(define (complex-return? e) (and (return? e)$/;"	f
complex_cfunction	test/threads_exec.jl	/^    function complex_cfunction(a)$/;"	f
complex_t	src/ccalltest.c	/^} complex_t;$/;"	t	typeref:struct:__anon84ad8c4c0108	file:
compute_annotations	test/show.jl	/^function compute_annotations(f, types)$/;"	f
compute_basic_blocks	base/compiler/ssair/ir.jl	/^function compute_basic_blocks(stmts::Vector{Any})$/;"	f
compute_box_tindex	src/cgutils.cpp	/^static Value *compute_box_tindex(jl_codectx_t &ctx, Value *datatype, jl_value_t *supertype, jl_v/;"	f	typeref:typename:Value *	file:
compute_inlining_depth	base/compiler/ssair/show.jl	/^function compute_inlining_depth(linetable::Vector, iline::Int32)$/;"	f
compute_invoke_data	base/compiler/ssair/inlining.jl	/^function compute_invoke_data(@nospecialize(atypes), params::Params)$/;"	f
compute_ir_line_annotations	base/compiler/ssair/show.jl	/^function compute_ir_line_annotations(code::Union{IRCode, CodeInfo})$/;"	f
compute_itspace	base/multidimensional.jl	/^function compute_itspace(A, ::Val{dims}) where {dims}$/;"	f
compute_linindex	base/subarray.jl	/^compute_linindex(f, s, IP::Tuple, I::Tuple{}) = f$/;"	f
compute_linindex	base/subarray.jl	/^function compute_linindex(f, s, IP::Tuple, I::Tuple{Any, Vararg{Any}})$/;"	f
compute_linindex	base/subarray.jl	/^function compute_linindex(f, s, IP::Tuple, I::Tuple{ScalarIndex, Vararg{Any}})$/;"	f
compute_linindex	base/subarray.jl	/^function compute_linindex(parent, I::NTuple{N,Any}) where N$/;"	f
compute_live_ins	base/compiler/ssair/slot2ssa.jl	/^function compute_live_ins(cfg::CFG, defuse)$/;"	f
compute_loc_stack	base/compiler/ssair/show.jl	/^function compute_loc_stack(linetable::Vector, line::Int32)$/;"	f
compute_maxstack	src/flisp/flisp.c	/^static uint32_t compute_maxstack(uint8_t *code, size_t len, int bswap)$/;"	f	typeref:typename:uint32_t	file:
compute_obj_symsize	src/disasm.cpp	/^static uint64_t compute_obj_symsize(const object::ObjectFile *obj, uint64_t offset)$/;"	f	typeref:typename:uint64_t	file:
compute_offset1	base/subarray.jl	/^compute_offset1(parent, stride1::Integer, I::Tuple) =$/;"	f
compute_offset1	base/subarray.jl	/^compute_offset1(parent, stride1::Integer, dims, inds, I::Tuple) =$/;"	f
compute_offset1	base/subarray.jl	/^compute_offset1(parent, stride1::Integer, dims::Tuple{Int}, inds::Tuple{Union{Slice, IdentityUni/;"	f
compute_offset1	base/subarray.jl	/^compute_offset1(parent::AbstractVector, stride1::Integer, I::Tuple{AbstractRange}) =$/;"	f
compute_preds	base/compiler/ssair/passes.jl	/^    function compute_preds(i)$/;"	f
compute_stride1	base/subarray.jl	/^compute_stride1(parent::AbstractArray, I::NTuple{N,Any}) where {N} =$/;"	f
compute_stride1	base/subarray.jl	/^compute_stride1(s, inds, I::Tuple{AbstractRange, Vararg{Any}}) = s*step(I[1])$/;"	f
compute_stride1	base/subarray.jl	/^compute_stride1(s, inds, I::Tuple{Any, Vararg{Any}}) = throw(ArgumentError("invalid strided inde/;"	f
compute_stride1	base/subarray.jl	/^compute_stride1(s, inds, I::Tuple{ScalarIndex, Vararg{Any}}) =$/;"	f
compute_stride1	base/subarray.jl	/^compute_stride1(s, inds, I::Tuple{Slice, Vararg{Any}}) = s$/;"	f
compute_stride1	base/subarray.jl	/^compute_stride1(s, inds, I::Tuple{Vararg{ScalarIndex}}) = s$/;"	f
compute_stride1	base/subarray.jl	/^compute_stride1(s, inds, I::Tuple{}) = s$/;"	f
compute_succs	base/compiler/ssair/passes.jl	/^    function compute_succs(i)$/;"	f
compute_tindex_unboxed	src/cgutils.cpp	/^static Value *compute_tindex_unboxed(jl_codectx_t &ctx, const jl_cgval_t &val, jl_value_t *typ)$/;"	f	typeref:typename:Value *	file:
compute_va_type	src/codegen.cpp	/^static jl_datatype_t *compute_va_type(jl_method_instance_t *lam, size_t nreq)$/;"	f	typeref:typename:jl_datatype_t *	file:
compute_value_for_block	base/compiler/ssair/passes.jl	/^function compute_value_for_block(ir::IRCode, domtree::DomTree, allblocks::Vector{Int}, du::SSADe/;"	f
compute_value_for_use	base/compiler/ssair/passes.jl	/^function compute_value_for_use(ir::IRCode, domtree::DomTree, allblocks::Vector{Int}, du::SSADefU/;"	f
concatToRPath	deps/srccache/patchelf-0.9/src/patchelf.cc	/^static void concatToRPath(string & rpath, const string & path)$/;"	f	typeref:typename:void	file:
concatenate_setindex!	base/abstractarray.jl	/^concatenate_setindex!(R, X::AbstractArray, I...) = (R[I...] = X)$/;"	f
concatenate_setindex!	base/abstractarray.jl	/^concatenate_setindex!(R, v, I...) = (R[I...] .= (v,); R)$/;"	f
concrete	src/subtype.c	/^    int8_t concrete;    \/\/ 1 if another variable has a constraint forcing this one to be concr/;"	m	struct:jl_varbinding_t	typeref:typename:int8_t	file:
concrete_min	src/subtype.c	/^static int concrete_min(jl_value_t *t)$/;"	f	typeref:typename:int	file:
concretevar	src/subtype.c	/^    jl_tvar_t *concretevar;$/;"	m	struct:jl_varbinding_t	typeref:typename:jl_tvar_t *	file:
concurrency_violation	base/condition.jl	/^@noinline function concurrency_violation()$/;"	f
cond	stdlib/LinearAlgebra/src/dense.jl	/^function cond(A::AbstractMatrix, p::Real=2)$/;"	f
cond	stdlib/LinearAlgebra/src/generic.jl	/^cond(x::Number) = x == 0 ? Inf : 1.0$/;"	f
cond	stdlib/LinearAlgebra/src/generic.jl	/^cond(x::Number, p) = cond(x)$/;"	f
cond	stdlib/LinearAlgebra/src/triangular.jl	/^        function cond(A::$t{<:BlasFloat}, p::Real=2)$/;"	f
cond	stdlib/LinearAlgebra/src/uniformscaling.jl	/^function cond(J::UniformScaling{T}) where T$/;"	f
cond	stdlib/SparseArrays/src/linalg.jl	/^function cond(A::AbstractSparseMatrixCSC, p::Real=2)$/;"	f
cond	test/boundscheck_exec.jl	/^cond(x) = x > 0 ? x : -x$/;"	f
condskeel	stdlib/LinearAlgebra/src/generic.jl	/^condskeel(A::AbstractMatrix, p::Real=Inf) = opnorm(abs.(inv(A))*abs.(A), p)$/;"	f
condskeel	stdlib/LinearAlgebra/src/generic.jl	/^condskeel(A::AbstractMatrix, x::AbstractVector, p::Real=Inf) = norm(abs.(inv(A))*(abs.(A)*abs.(x/;"	f
config	stdlib/Markdown/src/parse/config.jl	/^function config(parsers::Function...)$/;"	f
config	stdlib/Markdown/src/parse/parse.jl	/^config(md::MD) = md.meta[:config]::Config$/;"	f
config	stdlib/REPL/src/TerminalMenus/config.jl	/^function config(;charset::Symbol = :na,$/;"	f
configure	Makefile	/^configure:$/;"	t
configure	deps/Makefile	/^configure: $(addprefix configure-, $(DEP_LIBS))$/;"	t
configure-curl	deps/curl.mk	/^configure-curl: $(BUILDDIR)\/curl-$(CURL_VER)\/build-configured$/;"	t
configure-dsfmt	deps/dsfmt.mk	/^configure-dsfmt: extract-dsfmt$/;"	t
configure-gmp	deps/gmp.mk	/^configure-gmp: $(BUILDDIR)\/gmp-$(GMP_VER)\/build-configured$/;"	t
configure-lapack	deps/blas.mk	/^configure-lapack: configure-openblas$/;"	t
configure-lapack	deps/blas.mk	/^configure-lapack: extract-lapack$/;"	t
configure-libgit2	deps/libgit2.mk	/^configure-libgit2: $(BUILDDIR)\/$(LIBGIT2_SRC_DIR)\/build-configured$/;"	t
configure-libssh2	deps/libssh2.mk	/^configure-libssh2: $(BUILDDIR)\/$(LIBSSH2_SRC_DIR)\/build-configured$/;"	t
configure-libuv	deps/libuv.mk	/^configure-libuv: $(LIBUV_BUILDDIR)\/build-configured$/;"	t
configure-libwhich	deps/libwhich.mk	/^configure-libwhich: extract-libwhich$/;"	t
configure-llvm	deps/llvm.mk	/^configure-llvm: $(LLVM_BUILDDIR_withtype)\/build-configured$/;"	t
configure-mbedtls	deps/mbedtls.mk	/^configure-mbedtls: $(BUILDDIR)\/$(MBEDTLS_SRC)\/build-configured$/;"	t
configure-mpfr	deps/mpfr.mk	/^configure-mpfr: $(BUILDDIR)\/mpfr-$(MPFR_VER)\/build-configured$/;"	t
configure-objconv	deps/objconv.mk	/^configure-objconv: extract-objconv$/;"	t
configure-openblas	deps/blas.mk	/^configure-openblas: $(BUILDDIR)\/$(OPENBLAS_SRC_DIR)\/build-configured$/;"	t
configure-openlibm	deps/openlibm.mk	/^configure-openlibm: extract-openlibm$/;"	t
configure-osxunwind	deps/unwind.mk	/^configure-osxunwind: extract-osxunwind$/;"	t
configure-patchelf	deps/patchelf.mk	/^configure-patchelf: $(BUILDDIR)\/patchelf-$(PATCHELF_VER)\/build-configured$/;"	t
configure-pcre	deps/pcre.mk	/^configure-pcre: $(BUILDDIR)\/pcre2-$(PCRE_VER)\/build-configured$/;"	t
configure-suitesparse	deps/suitesparse.mk	/^configure-suitesparse: extract-suitesparse$/;"	t
configure-suitesparse-wrapper	deps/suitesparse.mk	/^configure-suitesparse-wrapper: configure-suitesparse$/;"	t
configure-suitesparse-wrapper	deps/suitesparse.mk	/^configure-suitesparse-wrapper:$/;"	t
configure-unwind	deps/unwind.mk	/^configure-unwind: $(BUILDDIR)\/libunwind-$(UNWIND_VER)\/build-configured$/;"	t
configure-utf8proc	deps/utf8proc.mk	/^configure-utf8proc: extract-utf8proc$/;"	t
configure-y	Makefile	/^configure-y: | $(BUILDDIRMAKE)$/;"	t
conflicting_assignment_conditional	test/compiler/inference.jl	/^function conflicting_assignment_conditional()$/;"	f
confuse_declname_parsing	test/llvmcall.jl	/^function confuse_declname_parsing()$/;"	f
cong	src/julia_internal.h	/^STATIC_INLINE uint64_t cong(uint64_t max, uint64_t unbias, uint64_t *seed)$/;"	f	typeref:typename:STATIC_INLINE uint64_t
cong_unbias	src/partr.c	/^static uint64_t cong_unbias;$/;"	v	typeref:typename:uint64_t	file:
conj	base/abstractarraymath.jl	/^conj(x::AbstractArray{<:Real}) = x$/;"	f
conj	base/complex.jl	/^conj(z::Complex) = Complex(real(z),-imag(z))$/;"	f
conj	base/number.jl	/^conj(x::Real) = x$/;"	f
conj	stdlib/LinearAlgebra/src/diagonal.jl	/^conj(D::Diagonal) = Diagonal(conj(D.diag))$/;"	f
conj	stdlib/LinearAlgebra/src/uniformscaling.jl	/^conj(J::UniformScaling) = UniformScaling(conj(J.λ))$/;"	f
conj	stdlib/SparseArrays/src/sparsematrix.jl	/^function conj(A::AbstractSparseMatrixCSC{<:Complex})$/;"	f
conj	stdlib/SparseArrays/src/sparsevector.jl	/^conj(x::SparseVector{<:Complex}) = SparseVector(length(x), copy(nonzeroinds(x)), conj(nonzeros(x/;"	f
conj!	base/abstractarraymath.jl	/^conj!(x::AbstractArray{<:Real}) = x$/;"	f
conj!	base/arraymath.jl	/^conj!(A::AbstractArray{<:Number}) = (@inbounds broadcast!(conj, A, A); A)$/;"	f
conj!	stdlib/SparseArrays/src/sparsematrix.jl	/^function conj!(A::AbstractSparseMatrixCSC)$/;"	f
conj_fast	base/fastmath.jl	/^    conj_fast(x::T) where {T<:ComplexTypes} = T(real(x), -imag(x))$/;"	f
connect	stdlib/Distributed/src/managers.jl	/^function connect(manager::ClusterManager, pid::Int, config::WorkerConfig)$/;"	f
connect	stdlib/Sockets/src/PipeServer.jl	/^connect(path::AbstractString) = connect(PipeEndpoint(), path)$/;"	f
connect	stdlib/Sockets/src/Sockets.jl	/^connect(addr::IPAddr, port::Integer) = connect(TCPSocket(), addr, port)$/;"	f
connect	stdlib/Sockets/src/Sockets.jl	/^connect(addr::InetAddr) = connect(TCPSocket(), addr)$/;"	f
connect	stdlib/Sockets/src/Sockets.jl	/^connect(host::AbstractString, port::Integer) = connect(TCPSocket(), host, port)$/;"	f
connect	stdlib/Sockets/src/Sockets.jl	/^connect(port::Integer) = connect(localhost, port)$/;"	f
connect	stdlib/Sockets/src/Sockets.jl	/^connect(sock::TCPSocket, port::Integer) = connect(sock, localhost, port)$/;"	f
connect	stdlib/Sockets/src/Sockets.jl	/^function connect(sock::LibuvStream, args...)$/;"	f
connect!	stdlib/Sockets/src/PipeServer.jl	/^function connect!(sock::PipeEndpoint, path::AbstractString)$/;"	f
connect!	stdlib/Sockets/src/Sockets.jl	/^connect!(sock::TCPSocket, addr::InetAddr) = connect!(sock, addr.host, addr.port)$/;"	f
connect!	stdlib/Sockets/src/Sockets.jl	/^function connect!(sock::TCPSocket, host::AbstractString, port::Integer)$/;"	f
connect!	stdlib/Sockets/src/Sockets.jl	/^function connect!(sock::TCPSocket, host::Union{IPv4, IPv6}, port::Integer)$/;"	f
connect_to_peer	stdlib/Distributed/src/process_messages.jl	/^function connect_to_peer(manager::ClusterManager, rpid::Int, wconfig::WorkerConfig)$/;"	f
connect_to_worker	stdlib/Distributed/src/managers.jl	/^function connect_to_worker(host::AbstractString, bind_addr::AbstractString, port::Integer, tunne/;"	f
connect_to_worker	stdlib/Distributed/src/managers.jl	/^function connect_to_worker(host::AbstractString, port::Integer)$/;"	f
connect_w2w	stdlib/Distributed/src/managers.jl	/^function connect_w2w(pid::Int, config::WorkerConfig)$/;"	f
cons_index	src/flisp/flisp.c	/^#define cons_index(/;"	d	file:
cons_reserve	src/flisp/flisp.c	/^#define cons_reserve(/;"	d	file:
cons_t	src/flisp/flisp.h	/^} cons_t;$/;"	t	typeref:struct:__anonb455601d0108
consflags	src/flisp/flisp.h	/^    uint32_t *consflags;$/;"	m	struct:_fl_context_t	typeref:typename:uint32_t *
const	base/Base.jl	/^const (√)=sqrt$/;"	f
const	base/Base.jl	/^const (∛)=cbrt$/;"	f
const	base/essentials.jl	/^const (:) = Colon()$/;"	f
const	base/operators.jl	/^const (>:)(@nospecialize(a), @nospecialize(b)) = (b <: a)$/;"	f
const	test/core.jl	/^const (¬) = !$/;"	f
const_array_int1	test/core.jl	/^const const_array_int1 = Array{Int}$/;"	v
const_array_int2	test/core.jl	/^const const_array_int2 = Array{Int}$/;"	v
const_data	src/staticdata.c	/^    ios_t *const_data;$/;"	m	struct:__anonc3a2e68f0108	typeref:typename:ios_t *	file:
const_datatype_getfield_tfunc	base/compiler/tfuncs.jl	/^function const_datatype_getfield_tfunc(@nospecialize(sv), fld::Int)$/;"	f
const_implies_local	test/core.jl	/^function const_implies_local()$/;"	f
const_prop_profitable	base/compiler/abstractinterpretation.jl	/^function const_prop_profitable(@nospecialize(arg))$/;"	f
const_relocs	src/llvm-multiversioning.cpp	/^    std::map<uint32_t,GlobalVariable*> const_relocs;$/;"	m	struct:__anond5683ea40111::CloneCtx	typeref:typename:std::map<uint32_t,GlobalVariable * >	file:
const_sym	src/ast.c	/^jl_sym_t *const_sym;   jl_sym_t *thunk_sym;$/;"	v	typeref:typename:jl_sym_t *
constant	src/codegen.cpp	/^    jl_value_t *constant; \/\/ constant value (rooted in linfo.def.roots)$/;"	m	struct:jl_cgval_t	typeref:typename:jl_value_t *	file:
constant23367	test/core.jl	/^    @eval @noinline constant23367(a, b) = (a ? b : $b)$/;"	f
constant23367	test/core.jl	/^function constant23367 end$/;"	f
constargs	test/llvmpasses/aliasscopes.jl	/^function constargs(A, B::Const)$/;"	f
constp	src/julia.h	/^    uint8_t constp;$/;"	m	struct:__anon055fe4271108	typeref:typename:uint8_t
constrains_param	stdlib/Test/src/Test.jl	/^function constrains_param(var::TypeVar, @nospecialize(typ), covariant::Bool)$/;"	f
constraintkind	src/subtype.c	/^    int8_t constraintkind;$/;"	m	struct:jl_varbinding_t	typeref:typename:int8_t	file:
construct_domtree	base/compiler/ssair/domtree.jl	/^function construct_domtree(cfg::CFG)$/;"	f
construct_ssa!	base/compiler/ssair/slot2ssa.jl	/^function construct_ssa!(ci::CodeInfo, code::Vector{Any}, ir::IRCode, domtree::DomTree, defuse, n/;"	f
constvec	test/compiler/inference.jl	/^const constvec = [1, 2, 3]$/;"	v
consume_gv	src/llvm-multiversioning.cpp	/^static inline std::vector<T*> consume_gv(Module &M, const char *name)$/;"	f	namespace:__anond5683ea40111	typeref:typename:std::vector<T * >	file:
consume_leb128	src/debuginfo.cpp	/^static const uint8_t *consume_leb128(const uint8_t *Addr, const uint8_t *End)$/;"	f	typeref:typename:const uint8_t *	file:
consume_upto	base/shell.jl	/^    function consume_upto(j)$/;"	f
consumed!	stdlib/Base64/src/buffer.jl	/^function consumed!(buffer::Buffer, n::Integer)$/;"	f
container_of	src/julia.h	/^#define container_of(/;"	d
contains	src/utils.scm	/^(define (contains p expr)$/;"	f
contains-macrocall	src/macroexpand.scm	/^(define (contains-macrocall e)$/;"	f
contains_Box	test/core.jl	/^contains_Box(@nospecialize(e)) = false$/;"	f
contains_Box	test/core.jl	/^contains_Box(e::Expr) = any(contains_Box, e.args)$/;"	f
contains_Box	test/core.jl	/^contains_Box(e::GlobalRef) = (e.name === :Box)$/;"	f
contains_is	base/compiler/utilities.jl	/^function contains_is(itr, @nospecialize(x))$/;"	f
contains_unions	src/jltypes.c	/^static int contains_unions(jl_value_t *type)$/;"	f	typeref:typename:int	file:
contains_warn	stdlib/Test/src/Test.jl	/^contains_warn(output, S::Union{AbstractArray,Tuple}) = all(s -> contains_warn(output, s), S)$/;"	f
contains_warn	stdlib/Test/src/Test.jl	/^contains_warn(output, s::AbstractString) = occursin(s, output)$/;"	f
contains_warn	stdlib/Test/src/Test.jl	/^contains_warn(output, s::Function) = s(output)$/;"	f
contains_warn	stdlib/Test/src/Test.jl	/^contains_warn(output, s::Regex) = occursin(s, output)$/;"	f
containsnul	base/c.jl	/^containsnul(p::Ptr, len) =$/;"	f
containsnul	base/c.jl	/^containsnul(s::AbstractString) = '\\0' in s$/;"	f
containsnul	base/c.jl	/^containsnul(s::String) = containsnul(unsafe_convert(Ptr{Cchar}, s), sizeof(s))$/;"	f
content	stdlib/LibGit2/src/blob.jl	/^function content(blob::GitBlob)$/;"	f
content	stdlib/REPL/src/LineEdit.jl	/^content(s, reg::Region = 0=>bufend(s)) = String(buffer(s).data[axes(reg)])$/;"	f
contents	deps/srccache/patchelf-0.9/src/patchelf.cc	/^unsigned char * contents = 0;$/;"	v	typeref:typename:unsigned char *
context	src/debuginfo.cpp	/^    DIContext *context;$/;"	m	struct:ObjectInfo	typeref:typename:DIContext *	file:
context	src/disasm.cpp	/^    std::vector<DILineInfo> context;$/;"	m	class:DILineInfoPrinter	typeref:typename:std::vector<DILineInfo>	file:
context	src/julia_internal.h	/^    CONTEXT context;$/;"	m	struct:__anon9dd660c30208	typeref:typename:CONTEXT
continue_at	src/interpreter.c	/^    int continue_at; \/\/ statement index to jump to after leaving exception handler (0 if none)$/;"	m	struct:__anonf89725e10108	typeref:typename:int	file:
contractuser	base/path.jl	/^contractuser(path::AbstractString) = path$/;"	f
contractuser	base/path.jl	/^function contractuser(path::AbstractString)$/;"	f
conv_num	src/support/strptime.c	/^conv_num(const unsigned char *buf, int *dest, uint llim, uint ulim)$/;"	f	typeref:typename:const u_char *	file:
conv_to_double	src/support/operators.c	/^double conv_to_double(void *data, numerictype_t tag)$/;"	f	typeref:typename:double
conv_to_ptrdiff	src/support/utils.h	/^#define conv_to_ptrdiff /;"	d
conv_to_size	src/support/utils.h	/^#define conv_to_size /;"	d
convert	base/abstractarray.jl	/^convert(::Type{AbstractArray{T,N}}, a::AbstractArray{<:Any,N}) where {T,N} = AbstractArray{T,N}(/;"	f
convert	base/abstractarray.jl	/^convert(::Type{AbstractArray{T}}, a::AbstractArray) where {T} = AbstractArray{T}(a)$/;"	f
convert	base/abstractarray.jl	/^convert(::Type{T}, a::T) where {T<:AbstractArray} = a$/;"	f
convert	base/abstractdict.jl	/^convert(::Type{T}, x::T) where {T<:AbstractDict} = x$/;"	f
convert	base/abstractdict.jl	/^function convert(::Type{T}, x::AbstractDict) where T<:AbstractDict$/;"	f
convert	base/array.jl	/^convert(::Type{T}, a::AbstractArray) where {T<:Array} = a isa T ? a : T(a)$/;"	f
convert	base/baseext.jl	/^convert(::Type{T}, arg)  where {T<:VecElement} = T(arg)$/;"	f
convert	base/baseext.jl	/^convert(::Type{T}, arg::T) where {T<:VecElement} = arg$/;"	f
convert	base/bitarray.jl	/^convert(T::Type{<:BitArray}, a::AbstractArray) = a isa T ? a : T(a)$/;"	f
convert	base/boot.jl	/^convert(::Type{Any}, @nospecialize(x)) = x$/;"	f
convert	base/boot.jl	/^convert(::Type{T}, x::T) where {T} = x$/;"	f
convert	base/c.jl	/^convert(::Type{Cstring}, p::Union{Ptr{Int8},Ptr{UInt8},Ptr{Cvoid}}) = Cstring(p)$/;"	f
convert	base/c.jl	/^convert(::Type{Cwstring}, p::Union{Ptr{Cwchar_t},Ptr{Cvoid}}) = Cwstring(p)$/;"	f
convert	base/c.jl	/^convert(::Type{Ptr{T}}, p::Cstring) where {T<:Union{Int8,UInt8,Cvoid}} = Ptr{T}(p)$/;"	f
convert	base/c.jl	/^convert(::Type{Ptr{T}}, p::Cwstring) where {T<:Union{Cwchar_t,Cvoid}} = Ptr{T}(p)$/;"	f
convert	base/char.jl	/^convert(::Type{AbstractChar}, x::Number) = Char(x) # default to Char$/;"	f
convert	base/char.jl	/^convert(::Type{T}, c::AbstractChar) where {T<:AbstractChar} = T(c)$/;"	f
convert	base/char.jl	/^convert(::Type{T}, c::T) where {T<:AbstractChar} = c$/;"	f
convert	base/char.jl	/^convert(::Type{T}, x::AbstractChar) where {T<:Number} = T(x)$/;"	f
convert	base/char.jl	/^convert(::Type{T}, x::Number) where {T<:AbstractChar} = T(x)$/;"	f
convert	base/essentials.jl	/^convert(::Type{Any}, @nospecialize(x)) = x$/;"	f
convert	base/essentials.jl	/^convert(::Type{Tuple{Vararg{V}}}, x::Tuple{Vararg{V}}) where {V} = x$/;"	f
convert	base/essentials.jl	/^convert(::Type{Tuple{}}, ::Tuple{}) = ()$/;"	f
convert	base/essentials.jl	/^convert(::Type{Tuple{}}, x::AtLeast1) = throw(MethodError(convert, (Tuple{}, x)))$/;"	f
convert	base/essentials.jl	/^convert(::Type{Type}, x::Type) = x # the ssair optimizer is strongly dependent on this method ex/;"	f
convert	base/essentials.jl	/^convert(::Type{T}, x::AtLeast1) where {T<:AtLeast1} =$/;"	f
convert	base/essentials.jl	/^convert(::Type{T}, x::T) where {T<:AtLeast1} = x$/;"	f
convert	base/essentials.jl	/^convert(::Type{T}, x::T) where {T} = x$/;"	f
convert	base/essentials.jl	/^convert(::Type{Union{}}, x) = throw(MethodError(convert, (Union{}, x)))$/;"	f
convert	base/essentials.jl	/^convert(T::Type{Tuple{Vararg{V}}}, x::Tuple) where {V} =$/;"	f
convert	base/essentials.jl	/^function convert end$/;"	f
convert	base/indices.jl	/^convert(::Type{LinearIndices{N,R}}, inds::LinearIndices{N}) where {N,R} =$/;"	f
convert	base/iterators.jl	/^convert(::Type{Stateful}, itr) = Stateful(itr)$/;"	f
convert	base/logging.jl	/^convert(::Type{LogLevel}, level::Integer) = LogLevel(level)$/;"	f
convert	base/missing.jl	/^convert(::Type{T}, x) where {T>:Missing} = convert(nonmissingtype_checked(T), x)$/;"	f
convert	base/missing.jl	/^convert(::Type{T}, x) where {T>:Union{Missing, Nothing}} = convert(nonmissingtype_checked(nonnot/;"	f
convert	base/missing.jl	/^convert(::Type{T}, x::T) where {T>:Missing} = x$/;"	f
convert	base/missing.jl	/^convert(::Type{T}, x::T) where {T>:Union{Missing, Nothing}} = x$/;"	f
convert	base/mpfr.jl	/^convert(::Type{MPFRRoundingMode}, ::RoundingMode{:Down})     = MPFRRoundDown$/;"	f
convert	base/mpfr.jl	/^convert(::Type{MPFRRoundingMode}, ::RoundingMode{:FromZero}) = MPFRRoundFromZero$/;"	f
convert	base/mpfr.jl	/^convert(::Type{MPFRRoundingMode}, ::RoundingMode{:Nearest})  = MPFRRoundNearest$/;"	f
convert	base/mpfr.jl	/^convert(::Type{MPFRRoundingMode}, ::RoundingMode{:ToZero})   = MPFRRoundToZero$/;"	f
convert	base/mpfr.jl	/^convert(::Type{MPFRRoundingMode}, ::RoundingMode{:Up})       = MPFRRoundUp$/;"	f
convert	base/mpfr.jl	/^function convert(::Type{RoundingMode}, r::MPFRRoundingMode)$/;"	f
convert	base/multidimensional.jl	/^    convert(::Type{CartesianIndices{N,R}}, inds::CartesianIndices{N}) where {N,R} =$/;"	f
convert	base/multidimensional.jl	/^    convert(::Type{NTuple{N,AbstractUnitRange{Int}}}, R::CartesianIndices{N}) where {N} =$/;"	f
convert	base/multidimensional.jl	/^    convert(::Type{NTuple{N,AbstractUnitRange}}, R::CartesianIndices{N}) where {N} =$/;"	f
convert	base/multidimensional.jl	/^    convert(::Type{NTuple{N,UnitRange{Int}}}, R::CartesianIndices{N}) where {N} =$/;"	f
convert	base/multidimensional.jl	/^    convert(::Type{NTuple{N,UnitRange}}, R::CartesianIndices{N}) where {N} =$/;"	f
convert	base/multidimensional.jl	/^    convert(::Type{Tuple{Vararg{AbstractUnitRange{Int}}}}, R::CartesianIndices{N}) where {N} =$/;"	f
convert	base/multidimensional.jl	/^    convert(::Type{Tuple{Vararg{AbstractUnitRange}}}, R::CartesianIndices) =$/;"	f
convert	base/multidimensional.jl	/^    convert(::Type{Tuple{Vararg{UnitRange{Int}}}}, R::CartesianIndices{N}) where {N} =$/;"	f
convert	base/multidimensional.jl	/^    convert(::Type{Tuple{Vararg{UnitRange}}}, R::CartesianIndices) =$/;"	f
convert	base/multidimensional.jl	/^    convert(::Type{Tuple{}}, R::CartesianIndices{0}) = ()$/;"	f
convert	base/multidimensional.jl	/^    convert(::Type{T}, index::CartesianIndex) where {T<:Tuple} = convert(T, index.I)$/;"	f
convert	base/multidimensional.jl	/^    convert(::Type{T}, index::CartesianIndex{1}) where {T<:Number} = convert(T, index[1])$/;"	f
convert	base/namedtuple.jl	/^convert(::Type{NamedTuple{names,T}}, nt::NamedTuple{names,T}) where {names,T<:Tuple} = nt$/;"	f
convert	base/namedtuple.jl	/^convert(::Type{NamedTuple{names}}, nt::NamedTuple{names}) where {names} = nt$/;"	f
convert	base/namedtuple.jl	/^function convert(::Type{NamedTuple{names,T}}, nt::NamedTuple{names}) where {names,T<:Tuple}$/;"	f
convert	base/number.jl	/^convert(::Type{T}, x::Number) where {T<:Number} = T(x)$/;"	f
convert	base/number.jl	/^convert(::Type{T}, x::T)      where {T<:Number} = x$/;"	f
convert	base/pair.jl	/^convert(::Type{Pair{A,B}}, x::Pair{A,B}) where {A,B} = x$/;"	f
convert	base/pair.jl	/^function convert(::Type{Pair{A,B}}, x::Pair) where {A,B}$/;"	f
convert	base/pointer.jl	/^convert(::Type{Ptr{T}}, p::Ptr) where {T} = bitcast(Ptr{T}, p)$/;"	f
convert	base/pointer.jl	/^convert(::Type{Ptr{T}}, p::Ptr{T}) where {T} = p$/;"	f
convert	base/pointer.jl	/^convert(::Type{Ptr{T}}, x::Union{Int,UInt}) where {T} = Ptr{T}(x)$/;"	f
convert	base/pointer.jl	/^convert(::Type{T}, x::Ptr) where {T<:Integer} = T(UInt(x))$/;"	f
convert	base/range.jl	/^convert(::Type{T}, r::AbstractRange) where {T<:AbstractRange} = r isa T ? r : T(r)$/;"	f
convert	base/refpointer.jl	/^convert(::Type{Ref{T}}, x) where {T} = RefValue{T}(x)$/;"	f
convert	base/refpointer.jl	/^convert(::Type{Ref{T}}, x::AbstractArray{T}) where {T} = RefArray(x, 1)$/;"	f
convert	base/refpointer.jl	/^convert(::Type{Ref{T}}, x::Ref{T}) where {T} = x$/;"	f
convert	base/secretbuffer.jl	/^convert(::Type{SecretBuffer}, s::AbstractString) = SecretBuffer(String(s))$/;"	f
convert	base/set.jl	/^convert(::Type{T}, s::AbstractSet) where {T<:AbstractSet} = T(s)$/;"	f
convert	base/set.jl	/^convert(::Type{T}, s::T) where {T<:AbstractSet} = s$/;"	f
convert	base/show.jl	/^convert(::Type{IOContext}, io::IO) = IOContext(unwrapcontext(io)...)$/;"	f
convert	base/some.jl	/^convert(::Type{Some{T}}, x::Some) where {T} = Some{T}(convert(T, x.value))$/;"	f
convert	base/some.jl	/^convert(::Type{Some{T}}, x::Some{T}) where {T} = x$/;"	f
convert	base/some.jl	/^convert(::Type{T}, x) where {T>:Nothing} = convert(nonnothingtype_checked(T), x)$/;"	f
convert	base/some.jl	/^convert(::Type{T}, x::T) where {T>:Nothing} = x$/;"	f
convert	base/strings/basic.jl	/^convert(::Type{T}, s::AbstractString) where {T<:AbstractString} = T(s)$/;"	f
convert	base/strings/basic.jl	/^convert(::Type{T}, s::T) where {T<:AbstractString} = s$/;"	f
convert	base/strings/substring.jl	/^convert(::Type{SubString{S}}, s::AbstractString) where {S<:AbstractString} =$/;"	f
convert	base/strings/substring.jl	/^convert(::Type{T}, s::T) where {T<:SubString} = s$/;"	f
convert	base/twiceprecision.jl	/^convert(::Type{TwicePrecision{T}}, x::Number) where {T} = TwicePrecision{T}(x)$/;"	f
convert	base/twiceprecision.jl	/^convert(::Type{TwicePrecision{T}}, x::TwicePrecision) where {T} =$/;"	f
convert	base/twiceprecision.jl	/^convert(::Type{TwicePrecision{T}}, x::TwicePrecision{T}) where {T} = x$/;"	f
convert	base/twiceprecision.jl	/^convert(::Type{T}, x::TwicePrecision) where {T<:Number} = T(x)$/;"	f
convert	base/uuid.jl	/^function convert(::Type{NTuple{2, UInt64}}, uuid::UUID)$/;"	f
convert	base/uuid.jl	/^function convert(::Type{NTuple{4, UInt32}}, uuid::UUID)$/;"	f
convert	stdlib/LinearAlgebra/src/adjtrans.jl	/^convert(::Type{Adjoint{T,S}}, A::Adjoint) where {T,S} = Adjoint{T,S}(convert(S, A.parent))$/;"	f
convert	stdlib/LinearAlgebra/src/adjtrans.jl	/^convert(::Type{Transpose{T,S}}, A::Transpose) where {T,S} = Transpose{T,S}(convert(S, A.parent))$/;"	f
convert	stdlib/LinearAlgebra/src/bidiag.jl	/^convert(T::Type{<:Bidiagonal}, m::AbstractMatrix) = m isa T ? m : T(m)$/;"	f
convert	stdlib/LinearAlgebra/src/bunchkaufman.jl	/^convert(::Type{BunchKaufman{T}}, B::BunchKaufman) where {T} =$/;"	f
convert	stdlib/LinearAlgebra/src/bunchkaufman.jl	/^convert(::Type{BunchKaufman{T}}, B::BunchKaufman{T}) where {T} = B$/;"	f
convert	stdlib/LinearAlgebra/src/bunchkaufman.jl	/^convert(::Type{Factorization{T}}, B::BunchKaufman) where {T} = convert(BunchKaufman{T}, B)$/;"	f
convert	stdlib/LinearAlgebra/src/bunchkaufman.jl	/^convert(::Type{Factorization{T}}, B::BunchKaufman{T}) where {T} = B$/;"	f
convert	stdlib/LinearAlgebra/src/factorization.jl	/^convert(::Type{T}, f::Factorization) where {T<:AbstractArray} = T(f)$/;"	f
convert	stdlib/LinearAlgebra/src/factorization.jl	/^convert(::Type{T}, f::Factorization) where {T<:Factorization} = T(f)$/;"	f
convert	stdlib/LinearAlgebra/src/factorization.jl	/^convert(::Type{T}, f::T) where {T<:Factorization} = f$/;"	f
convert	stdlib/LinearAlgebra/src/givens.jl	/^convert(::Type{T}, r::AbstractRotation) where {T<:AbstractRotation} = T(r)$/;"	f
convert	stdlib/LinearAlgebra/src/givens.jl	/^convert(::Type{T}, r::T) where {T<:AbstractRotation} = r$/;"	f
convert	stdlib/LinearAlgebra/src/special.jl	/^convert(T::Type{<:Diagonal},       m::ConvertibleSpecialMatrix) = m isa T ? m : T(m)$/;"	f
convert	stdlib/LinearAlgebra/src/special.jl	/^convert(T::Type{<:LowerTriangular}, m::PossibleTriangularMatrix) = m isa T ? m : T(m)$/;"	f
convert	stdlib/LinearAlgebra/src/special.jl	/^convert(T::Type{<:LowerTriangular}, m::Union{LowerTriangular,UnitLowerTriangular}) = m isa T ? m/;"	f
convert	stdlib/LinearAlgebra/src/special.jl	/^convert(T::Type{<:SymTridiagonal}, m::ConvertibleSpecialMatrix) = m isa T ? m : T(m)$/;"	f
convert	stdlib/LinearAlgebra/src/special.jl	/^convert(T::Type{<:Tridiagonal},    m::ConvertibleSpecialMatrix) = m isa T ? m : T(m)$/;"	f
convert	stdlib/LinearAlgebra/src/special.jl	/^convert(T::Type{<:UpperTriangular}, m::PossibleTriangularMatrix) = m isa T ? m : T(m)$/;"	f
convert	stdlib/LinearAlgebra/src/special.jl	/^convert(T::Type{<:UpperTriangular}, m::Union{UpperTriangular,UnitUpperTriangular}) = m isa T ? m/;"	f
convert	stdlib/LinearAlgebra/src/symmetric.jl	/^convert(T::Type{<:Hermitian}, m::Union{Symmetric,Hermitian}) = m isa T ? m : T(m)$/;"	f
convert	stdlib/LinearAlgebra/src/symmetric.jl	/^convert(T::Type{<:Symmetric}, m::Union{Symmetric,Hermitian}) = m isa T ? m : T(m)$/;"	f
convert	stdlib/SharedArrays/src/SharedArrays.jl	/^convert(T::Type{<:SharedArray}, a::Array) = T(a)$/;"	f
convert	stdlib/SparseArrays/src/sparsematrix.jl	/^convert(T::Type{<:AbstractSparseMatrixCSC}, m::AbstractMatrix) = m isa T ? m : T(m)$/;"	f
convert	stdlib/SparseArrays/src/sparsevector.jl	/^convert(T::Type{<:AbstractSparseMatrixCSC}, v::SparseVector) = T(v)$/;"	f
convert	stdlib/SparseArrays/src/sparsevector.jl	/^convert(T::Type{<:SparseVector}, m::AbstractSparseMatrixCSC) = T(m)$/;"	f
convert	stdlib/SparseArrays/src/sparsevector.jl	/^convert(T::Type{<:SparseVector}, m::AbstractVector) = m isa T ? m : T(m)$/;"	f
convert	stdlib/SuiteSparse/src/cholmod.jl	/^convert(T::Type{Hermitian{Tv,SparseMatrixCSC{Tv,SuiteSparse_long}}}, A::Sparse{Tv}) where {Tv<:V/;"	f
convert	stdlib/SuiteSparse/src/cholmod.jl	/^convert(T::Type{Symmetric{Float64,SparseMatrixCSC{Float64,SuiteSparse_long}}}, A::Sparse{Float64/;"	f
convert	test/arrayops.jl	/^    convert(::Type{MeterUnits{T,pow}}, y::Real) where {T,pow} = MeterUnits{T,pow}(convert(T,y))$/;"	f
convert	test/math.jl	/^convert(::Type{FloatWrapper}, x::Int) = FloatWrapper(float(x))$/;"	f
convert-assignment	src/julia-syntax.scm	/^(define (convert-assignment var rhs0 fname lam interp)$/;"	f
convert-for-type-decl	src/julia-syntax.scm	/^(define (convert-for-type-decl rhs t)$/;"	f
convert-lambda	src/julia-syntax.scm	/^(define (convert-lambda lam fname interp capt-sp)$/;"	f
convert_cconv	src/ccall.cpp	/^static std::pair<CallingConv::ID, bool> convert_cconv(jl_sym_t *lhd)$/;"	f	typeref:typename:std::pair<CallingConv::ID,bool>	file:
convert_default_should_fail_here	test/core.jl	/^convert_default_should_fail_here() = similar([1],typeof(zero(typeof(rand(2,2)))))$/;"	f
convert_julia_type	src/codegen.cpp	/^static jl_cgval_t convert_julia_type(jl_codectx_t &ctx, const jl_cgval_t &v, jl_value_t *typ)$/;"	f	typeref:typename:jl_cgval_t	file:
convert_julia_type_union	src/codegen.cpp	/^static jl_cgval_t convert_julia_type_union(jl_codectx_t &ctx, const jl_cgval_t &v, jl_value_t *t/;"	f	typeref:typename:jl_cgval_t	file:
convert_struct_offset	src/cgutils.cpp	/^static unsigned convert_struct_offset(Type *lty, unsigned byte_offset)$/;"	f	typeref:typename:unsigned	file:
convert_struct_offset	src/cgutils.cpp	/^static unsigned convert_struct_offset(jl_codectx_t &ctx, Type *lty, unsigned byte_offset)$/;"	f	typeref:typename:unsigned	file:
cookie	src/julia.h	/^    const char *cookie;$/;"	m	struct:__anon055fe4271808	typeref:typename:const char *
copy	base/abstractarray.jl	/^function copy(a::AbstractArray)$/;"	f
copy	base/abstractdict.jl	/^copy(a::AbstractDict) = merge!(empty(a), a)$/;"	f
copy	base/abstractdict.jl	/^copy(d::IdDict) = typeof(d)(d)$/;"	f
copy	base/abstractdict.jl	/^copy(s::IdSet) = typeof(s)(s)$/;"	f
copy	base/array.jl	/^copy(a::T) where {T<:Array} = ccall(:jl_array_copy, Ref{T}, (Any,), a)$/;"	f
copy	base/bitset.jl	/^copy(s1::BitSet) = copy!(BitSet(), s1)$/;"	f
copy	base/broadcast.jl	/^@inline copy(bc::Broadcasted{<:AbstractArrayStyle{0}}) = bc[CartesianIndex()]$/;"	f
copy	base/broadcast.jl	/^@inline function copy(bc::Broadcasted{Style{Tuple}})$/;"	f
copy	base/broadcast.jl	/^@inline function copy(bc::Broadcasted{Style}) where {Style}$/;"	f
copy	base/broadcast.jl	/^copy(bc::Broadcasted{<:Union{Nothing,Unknown}}) =$/;"	f
copy	base/compiler/ssair/ir.jl	/^copy(bb::BasicBlock) = BasicBlock(bb.stmts, copy(bb.preds), copy(bb.succs))$/;"	f
copy	base/compiler/ssair/ir.jl	/^copy(c::CFG) = CFG(BasicBlock[copy(b) for b in c.blocks], copy(c.index))$/;"	f
copy	base/compiler/ssair/ir.jl	/^copy(code::IRCode) = IRCode(code, copy_exprargs(code.stmts), copy(code.types),$/;"	f
copy	base/dict.jl	/^copy(d::Dict) = Dict(d)$/;"	f
copy	base/expr.jl	/^function copy(c::CodeInfo)$/;"	f
copy	base/expr.jl	/^function copy(e::Expr)$/;"	f
copy	base/io.jl	/^function copy end$/;"	f
copy	base/iobuffer.jl	/^function copy(b::GenericIOBuffer)$/;"	f
copy	base/number.jl	/^copy(x::Number) = x # some code treats numbers as collection-like$/;"	f
copy	base/range.jl	/^copy(r::AbstractRange) = r$/;"	f
copy	base/set.jl	/^copy(s::Set) = copymutable(s)$/;"	f
copy	base/subarray.jl	/^copy(V::SubArray) = V.parent[V.indices...]$/;"	f
copy	base/weakkeydict.jl	/^copy(d::WeakKeyDict) = WeakKeyDict(d)$/;"	f
copy	stdlib/LinearAlgebra/src/cholesky.jl	/^copy(C::Cholesky) = Cholesky(copy(C.factors), C.uplo, C.info)$/;"	f
copy	stdlib/LinearAlgebra/src/cholesky.jl	/^copy(C::CholeskyPivoted) = CholeskyPivoted(copy(C.factors), C.uplo, C.piv, C.rank, C.tol, C.info/;"	f
copy	stdlib/LinearAlgebra/src/hessenberg.jl	/^copy(F::Hessenberg{<:Any,<:SymTridiagonal}) = Hessenberg(copy(F.factors), copy(F.τ), copy(F.H),/;"	f
copy	stdlib/LinearAlgebra/src/hessenberg.jl	/^copy(F::Hessenberg{<:Any,<:UpperHessenberg}) = Hessenberg(copy(F.factors), copy(F.τ); μ=F.μ)$/;"	f
copy	stdlib/LinearAlgebra/src/hessenberg.jl	/^copy(H::UpperHessenberg) = UpperHessenberg(copy(H.data))$/;"	f
copy	stdlib/LinearAlgebra/src/lq.jl	/^copy(A::LQ) = LQ(copy(A.factors), copy(A.τ))$/;"	f
copy	stdlib/LinearAlgebra/src/lu.jl	/^copy(A::LU{T,S}) where {T,S} = LU{T,S}(copy(A.factors), copy(A.ipiv), A.info)$/;"	f
copy	stdlib/LinearAlgebra/src/schur.jl	/^copy(F::GeneralizedSchur) = GeneralizedSchur(copy(F.S), copy(F.T), copy(F.α), copy(F.β), copy(/;"	f
copy	stdlib/LinearAlgebra/src/schur.jl	/^copy(F::Schur) = Schur(copy(F.T), copy(F.Z), copy(F.values))$/;"	f
copy	stdlib/LinearAlgebra/src/symmetric.jl	/^copy(A::Hermitian{T,S}) where {T,S} = (B = copy(A.data); Hermitian{T,typeof(B)}(B,A.uplo))$/;"	f
copy	stdlib/LinearAlgebra/src/symmetric.jl	/^copy(A::Symmetric{T,S}) where {T,S} = (B = copy(A.data); Symmetric{T,typeof(B)}(B,A.uplo))$/;"	f
copy	stdlib/LinearAlgebra/src/triangular.jl	/^        copy(A::$t) = $t(copy(A.data))$/;"	f
copy	stdlib/LinearAlgebra/src/uniformscaling.jl	/^copy(J::UniformScaling) = UniformScaling(J.λ)$/;"	f
copy	stdlib/Random/src/DSFMT.jl	/^copy(src::DSFMT_state) = DSFMT_state(copy(src.val))$/;"	f
copy	stdlib/Random/src/RNGs.jl	/^copy(::_GLOBAL_RNG) = copy(default_rng())$/;"	f
copy	stdlib/Random/src/RNGs.jl	/^copy(src::MersenneTwister) =$/;"	f
copy	stdlib/SHA/src/types.jl	/^copy(ctx::T) where {T<:SHA1_CTX} = T(copy(ctx.state), ctx.bytecount, copy(ctx.buffer), copy(ctx./;"	f
copy	stdlib/SHA/src/types.jl	/^copy(ctx::T) where {T<:SHA2_CTX} = T(copy(ctx.state), ctx.bytecount, copy(ctx.buffer))$/;"	f
copy	stdlib/SHA/src/types.jl	/^copy(ctx::T) where {T<:SHA3_CTX} = T(copy(ctx.state), ctx.bytecount, copy(ctx.buffer), Vector{UI/;"	f
copy	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline function copy(bc::Broadcasted{<:SPVM})$/;"	f
copy	stdlib/SparseArrays/src/higherorderfns.jl	/^copy(bc::SpBroadcasted1) = _noshapecheck_map(bc.f, bc.args[1])$/;"	f
copy	stdlib/SparseArrays/src/higherorderfns.jl	/^function copy(bc::Broadcasted{PromoteToSparse})$/;"	f
copy	stdlib/SparseArrays/src/sparsematrix.jl	/^copy(S::AbstractSparseMatrixCSC) =$/;"	f
copy	stdlib/SparseArrays/src/sparsematrix.jl	/^function copy(ra::ReshapedArray{<:Any,2,<:AbstractSparseMatrixCSC})$/;"	f
copy	stdlib/SparseArrays/src/sparsevector.jl	/^copy(x::AbstractSparseVector) =$/;"	f
copy	stdlib/SuiteSparse/src/cholmod.jl	/^function copy(A::Dense{Tv}) where Tv<:VTypes$/;"	f
copy	stdlib/SuiteSparse/src/cholmod.jl	/^function copy(A::Sparse{Tv}) where Tv<:VTypes$/;"	f
copy	stdlib/SuiteSparse/src/cholmod.jl	/^function copy(A::Sparse{Tv}, stype::Integer, mode::Integer) where Tv<:VRealTypes$/;"	f
copy	stdlib/SuiteSparse/src/cholmod.jl	/^function copy(F::Factor{Tv}) where Tv<:VTypes$/;"	f
copy	test/ccall.jl	/^copy(a::Struct1) = Struct1(a.x, a.y)$/;"	f
copy	test/ccall.jl	/^copy(a::Struct1I) = a$/;"	f
copy	test/ccall.jl	/^copy(a::Struct_Big) = Struct_Big(a.x, a.y, a.z)$/;"	f
copy	test/ccall.jl	/^copy(a::Struct_BigI) = a$/;"	f
copy!	base/abstractarray.jl	/^copy!(dst::AbstractVector, src::AbstractVector) = append!(empty!(dst), src)$/;"	f
copy!	base/abstractarray.jl	/^function copy!(dst::AbstractArray, src::AbstractArray)$/;"	f
copy!	base/abstractdict.jl	/^copy!(dst::AbstractDict, src::AbstractDict) = merge!(empty!(dst), src)$/;"	f
copy!	base/abstractset.jl	/^copy!(dst::AbstractSet, src::AbstractSet) = union!(empty!(dst), src)$/;"	f
copy!	base/bitset.jl	/^function copy!(dest::BitSet, src::BitSet)$/;"	f
copy!	stdlib/Future/src/Future.jl	/^copy!(dst::AbstractArray, src::AbstractArray) = Base.copy!(dst, src)$/;"	f
copy!	stdlib/Future/src/Future.jl	/^copy!(dst::AbstractDict, src::AbstractDict) = Base.copy!(dst, src)$/;"	f
copy!	stdlib/Future/src/Future.jl	/^copy!(dst::AbstractSet, src::AbstractSet) = Base.copy!(dst, src)$/;"	f
copy!	stdlib/Random/src/DSFMT.jl	/^copy!(dst::DSFMT_state, src::DSFMT_state) = (copyto!(dst.val, src.val); dst)$/;"	f
copy!	stdlib/Random/src/RNGs.jl	/^copy!(::_GLOBAL_RNG, src::MersenneTwister) = copy!(default_rng(), src)$/;"	f
copy!	stdlib/Random/src/RNGs.jl	/^copy!(dst::MersenneTwister, ::_GLOBAL_RNG) = copy!(dst, default_rng())$/;"	f
copy!	stdlib/Random/src/RNGs.jl	/^function copy!(dst::MersenneTwister, src::MersenneTwister)$/;"	f
copy!	stdlib/SparseArrays/src/sparsevector.jl	/^function copy!(dst::SparseVector, src::AbstractVector)$/;"	f
copy!	stdlib/SparseArrays/src/sparsevector.jl	/^function copy!(dst::SparseVector, src::SparseVector)$/;"	f
copyMetadata	src/llvm-alloc-opt.cpp	/^static void copyMetadata(Instruction *dest, const Instruction *src)$/;"	f	namespace:__anon0a1571000111	typeref:typename:void	file:
copy_chunks!	base/bitarray.jl	/^function copy_chunks!(dest::Vector{UInt64}, pos_d::Integer, src::Vector{UInt64}, pos_s::Integer,/;"	f
copy_chunks_rtol!	base/bitarray.jl	/^function copy_chunks_rtol!(chunks::Vector{UInt64}, pos_d::Integer, pos_s::Integer, numbits::Inte/;"	f
copy_dims_out	test/compiler/inference.jl	/^copy_dims_out(out) = ()$/;"	f
copy_dims_out	test/compiler/inference.jl	/^copy_dims_out(out, dim::Colon, tail...) = copy_dims_out((out..., dim), tail...)$/;"	f
copy_dims_out	test/compiler/inference.jl	/^copy_dims_out(out, dim::Int, tail...) =  copy_dims_out((out..., dim), tail...)$/;"	f
copy_dims_pair	test/compiler/inference.jl	/^copy_dims_pair(out) = ()$/;"	f
copy_dims_pair	test/compiler/inference.jl	/^copy_dims_pair(out, dim::Colon, tail...) = copy_dims_pair(out => dim, tail...)$/;"	f
copy_dims_pair	test/compiler/inference.jl	/^copy_dims_pair(out, dim::Int, tail...) =  copy_dims_pair(out => dim, tail...)$/;"	f
copy_exprargs	base/expr.jl	/^copy_exprargs(x::Array{Any,1}) = Any[copy_exprs(x[i]) for i in 1:length(x)]$/;"	f
copy_exprs	base/expr.jl	/^copy_exprs(@nospecialize(x)) = x$/;"	f
copy_exprs	base/expr.jl	/^copy_exprs(x::Expr) = copy(x)$/;"	f
copy_exprs	base/expr.jl	/^function copy_exprs(x::PhiCNode)$/;"	f
copy_exprs	base/expr.jl	/^function copy_exprs(x::PhiNode)$/;"	f
copy_list	src/flisp/flisp.c	/^static value_t copy_list(fl_context_t *fl_ctx, value_t L)$/;"	f	typeref:typename:value_t	file:
copy_oftype	stdlib/LinearAlgebra/src/LinearAlgebra.jl	/^copy_oftype(A::AbstractArray{T,N}, ::Type{S}) where {T,N,S} = convert(AbstractArray{S,N}, A)$/;"	f
copy_oftype	stdlib/LinearAlgebra/src/LinearAlgebra.jl	/^copy_oftype(A::AbstractArray{T}, ::Type{T}) where {T} = copy(A)$/;"	f
copy_stack	src/julia.h	/^    unsigned int copy_stack:31; \/\/ sizeof stack for copybuf$/;"	m	struct:_jl_task_t	typeref:typename:unsigned int:31
copy_to_array	test/subarray.jl	/^function copy_to_array(A::AbstractArray)$/;"	f
copy_to_bitarray_chunks!	base/bitarray.jl	/^copy_to_bitarray_chunks!(dest::Vector{UInt64}, pos_d::Int, src::BitArray, pos_s::Int, numbits::I/;"	f
copy_to_bitarray_chunks!	base/bitarray.jl	/^function copy_to_bitarray_chunks!(Bc::Vector{UInt64}, pos_d::Int, C::Array{Bool}, pos_s::Int, nu/;"	f
copy_to_bitarray_chunks!	base/multidimensional.jl	/^function copy_to_bitarray_chunks!(Bc::Vector{UInt64}, pos_d::Int, C::StridedArray, pos_s::Int, n/;"	f
copy_to_bitarray_chunks!	base/multidimensional.jl	/^function copy_to_bitarray_chunks!(Bc::Vector{UInt64}, pos_d::Int, C::StridedArray{<:Real}, pos_s/;"	f
copy_transpose!	stdlib/LinearAlgebra/src/matmul.jl	/^function copy_transpose!(B::AbstractMatrix, ir_dest::UnitRange{Int}, jr_dest::UnitRange{Int}, tM/;"	f
copy_transpose!	stdlib/LinearAlgebra/src/transpose.jl	/^function copy_transpose!(B::AbstractVecOrMat, ir_dest::AbstractRange{Int}, jr_dest::AbstractRang/;"	f
copyast_sym	src/ast.c	/^jl_sym_t *copyast_sym; jl_sym_t *cfunction_sym;$/;"	v	typeref:typename:jl_sym_t *
copybuf!	stdlib/REPL/src/LineEdit.jl	/^function copybuf!(dst::IOBuffer, src::IOBuffer)$/;"	f
copyfirst!	base/reducedim.jl	/^copyfirst!(R::AbstractArray, A::AbstractArray) = mapfirst!(identity, R, A)$/;"	f
copyinds!	stdlib/SparseArrays/src/linalg.jl	/^function copyinds!(C::AbstractSparseMatrixCSC, A::AbstractSparseMatrixCSC)$/;"	f
copymutable	base/abstractarray.jl	/^copymutable(itr) = collect(itr)$/;"	f
copymutable	base/abstractarray.jl	/^function copymutable(a::AbstractArray)$/;"	f
copymutable	base/abstractdict.jl	/^copymutable(s::IdSet) = typeof(s)(s)$/;"	f
copymutable	base/bitset.jl	/^copymutable(s::BitSet) = copy(s)$/;"	f
copymutable	base/set.jl	/^copymutable(s::AbstractSet{T}) where {T} = Set{T}(s)$/;"	f
copysign	base/floatfuncs.jl	/^copysign(x::Float32, y::Float32) = copysign_float(x, y)$/;"	f
copysign	base/floatfuncs.jl	/^copysign(x::Float32, y::Real) = copysign(x, Float32(y))$/;"	f
copysign	base/floatfuncs.jl	/^copysign(x::Float64, y::Float64) = copysign_float(x, y)$/;"	f
copysign	base/floatfuncs.jl	/^copysign(x::Float64, y::Real) = copysign(x, Float64(y))$/;"	f
copysign	base/int.jl	/^copysign(x::Signed, y::Float16) = copysign(x, bitcast(Int16, y))$/;"	f
copysign	base/int.jl	/^copysign(x::Signed, y::Float32) = copysign(x, bitcast(Int32, y))$/;"	f
copysign	base/int.jl	/^copysign(x::Signed, y::Float64) = copysign(x, bitcast(Int64, y))$/;"	f
copysign	base/int.jl	/^copysign(x::Signed, y::Real)    = copysign(x, -oftype(x, signbit(y)))$/;"	f
copysign	base/int.jl	/^copysign(x::Signed, y::Signed)  = flipsign(x, x ⊻ y)$/;"	f
copysign	base/mpfr.jl	/^function copysign(x::BigFloat, y::BigFloat)$/;"	f
copysign	base/number.jl	/^copysign(x::Real, y::Real) = ifelse(signbit(x)!=signbit(y), -x, +x)$/;"	f
copysign	base/rational.jl	/^copysign(x::Rational, y::Rational) = copysign(x.num,y.num) \/\/ x.den$/;"	f
copysign	base/rational.jl	/^copysign(x::Rational, y::Real) = copysign(x.num,y) \/\/ x.den$/;"	f
copysign_float	src/runtime_intrinsics.c	/^#define copysign_float(/;"	d	file:
copyto!	base/abstractarray.jl	/^copyto!(dest::AbstractArray, src::AbstractArray) =$/;"	f
copyto!	base/abstractarray.jl	/^function copyto!(::IndexStyle, dest::AbstractArray, ::IndexCartesian, src::AbstractArray)$/;"	f
copyto!	base/abstractarray.jl	/^function copyto!(::IndexStyle, dest::AbstractArray, ::IndexStyle, src::AbstractArray)$/;"	f
copyto!	base/abstractarray.jl	/^function copyto!(B::AbstractVecOrMat{R}, ir_dest::AbstractRange{Int}, jr_dest::AbstractRange{Int/;"	f
copyto!	base/abstractarray.jl	/^function copyto!(dest::AbstractArray, dstart::Integer, src)$/;"	f
copyto!	base/abstractarray.jl	/^function copyto!(dest::AbstractArray, dstart::Integer, src, sstart::Integer)$/;"	f
copyto!	base/abstractarray.jl	/^function copyto!(dest::AbstractArray, dstart::Integer, src, sstart::Integer, n::Integer)$/;"	f
copyto!	base/abstractarray.jl	/^function copyto!(dest::AbstractArray, dstart::Integer, src::AbstractArray)$/;"	f
copyto!	base/abstractarray.jl	/^function copyto!(dest::AbstractArray, dstart::Integer, src::AbstractArray, sstart::Integer)$/;"	f
copyto!	base/abstractarray.jl	/^function copyto!(dest::AbstractArray, dstart::Integer,$/;"	f
copyto!	base/abstractarray.jl	/^function copyto!(dest::AbstractArray, src)$/;"	f
copyto!	base/array.jl	/^copyto!(dest::Array{T}, src::Array{T}) where {T} = copyto!(dest, 1, src, 1, length(src))$/;"	f
copyto!	base/array.jl	/^function copyto!(dest::Array{T}, doffs::Integer, src::Array{T}, soffs::Integer, n::Integer) wher/;"	f
copyto!	base/bitarray.jl	/^function copyto!(dest::BitArray, doffs::Integer, src::Array, soffs::Integer, n::Integer)$/;"	f
copyto!	base/bitarray.jl	/^function copyto!(dest::BitArray, src::Array)$/;"	f
copyto!	base/bitarray.jl	/^function copyto!(dest::BitArray, src::BitArray)$/;"	f
copyto!	base/broadcast.jl	/^@inline copyto!(dest::AbstractArray, bc::Broadcasted) = copyto!(dest, convert(Broadcasted{Nothin/;"	f
copyto!	base/broadcast.jl	/^@inline function copyto!(dest::AbstractArray, bc::Broadcasted{<:AbstractArrayStyle{0}})$/;"	f
copyto!	base/broadcast.jl	/^@inline function copyto!(dest::AbstractArray, bc::Broadcasted{Nothing})$/;"	f
copyto!	base/broadcast.jl	/^@inline function copyto!(dest::BitArray, bc::Broadcasted{Nothing})$/;"	f
copyto!	base/multidimensional.jl	/^function copyto!(dest::AbstractArray{T1,N}, Rdest::CartesianIndices{N},$/;"	f
copyto!	base/multidimensional.jl	/^function copyto!(dest::AbstractArray{T1,N}, src::AbstractArray{T2,N}) where {T1,T2,N}$/;"	f
copyto!	stdlib/LinearAlgebra/src/blas.jl	/^function copyto!(dest::Array{T}, rdest::Union{UnitRange{Ti},AbstractRange{Ti}},$/;"	f
copyto!	stdlib/LinearAlgebra/src/diagonal.jl	/^copyto!(D1::Diagonal, D2::Diagonal) = (copyto!(D1.diag, D2.diag); D1)$/;"	f
copyto!	stdlib/LinearAlgebra/src/matmul.jl	/^function copyto!(B::AbstractVecOrMat, ir_dest::UnitRange{Int}, jr_dest::UnitRange{Int}, tM::Abst/;"	f
copyto!	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^function copyto!(dest::Bidiagonal, bc::Broadcasted{<:StructuredMatrixStyle})$/;"	f
copyto!	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^function copyto!(dest::Diagonal, bc::Broadcasted{<:StructuredMatrixStyle})$/;"	f
copyto!	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^function copyto!(dest::LowerTriangular, bc::Broadcasted{<:StructuredMatrixStyle})$/;"	f
copyto!	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^function copyto!(dest::SymTridiagonal, bc::Broadcasted{<:StructuredMatrixStyle})$/;"	f
copyto!	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^function copyto!(dest::Tridiagonal, bc::Broadcasted{<:StructuredMatrixStyle})$/;"	f
copyto!	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^function copyto!(dest::UpperTriangular, bc::Broadcasted{<:StructuredMatrixStyle})$/;"	f
copyto!	stdlib/LinearAlgebra/src/symmetric.jl	/^function copyto!(dest::Hermitian, src::Hermitian)$/;"	f
copyto!	stdlib/LinearAlgebra/src/symmetric.jl	/^function copyto!(dest::Symmetric, src::Symmetric)$/;"	f
copyto!	stdlib/LinearAlgebra/src/triangular.jl	/^function copyto!(A::T, B::T) where T<:Union{LowerTriangular,UnitLowerTriangular}$/;"	f
copyto!	stdlib/LinearAlgebra/src/triangular.jl	/^function copyto!(A::T, B::T) where T<:Union{UpperTriangular,UnitUpperTriangular}$/;"	f
copyto!	stdlib/LinearAlgebra/src/tridiag.jl	/^copyto!(dest::Tridiagonal, src::Tridiagonal) = (copyto!(dest.dl, src.dl); copyto!(dest.d, src.d)/;"	f
copyto!	stdlib/LinearAlgebra/src/uniformscaling.jl	/^function copyto!(A::AbstractMatrix, J::UniformScaling)$/;"	f
copyto!	stdlib/SharedArrays/src/SharedArrays.jl	/^copyto!(S::SharedArray, A::Array) = (copyto!(S.s, A); S)$/;"	f
copyto!	stdlib/SharedArrays/src/SharedArrays.jl	/^function copyto!(S::SharedArray, R::SharedArray)$/;"	f
copyto!	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline function copyto!(C::SparseVecOrMat, bc::Broadcasted0{Nothing})$/;"	f
copyto!	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline function copyto!(dest::SparseVecOrMat, bc::Broadcasted{<:SPVM})$/;"	f
copyto!	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline function copyto!(dest::SparseVecOrMat, bc::Broadcasted{PromoteToSparse})$/;"	f
copyto!	stdlib/SparseArrays/src/sparsematrix.jl	/^function copyto!(A::AbstractSparseMatrixCSC, B::AbstractSparseMatrixCSC)$/;"	f
copyto!	stdlib/SparseArrays/src/sparsevector.jl	/^copyto!(A::AbstractSparseMatrixCSC, B::SparseVector{TvB,TiB}) where {TvB,TiB} =$/;"	f
copyto!	stdlib/SparseArrays/src/sparsevector.jl	/^copyto!(A::SparseVector, B::AbstractVector) = copyto!(A, sparsevec(B))$/;"	f
copyto!	stdlib/SparseArrays/src/sparsevector.jl	/^function copyto!(A::SparseVector, B::AbstractSparseMatrixCSC)$/;"	f
copyto!	stdlib/SparseArrays/src/sparsevector.jl	/^function copyto!(A::SparseVector, B::SparseVector)$/;"	f
copyto_nonleaf!	base/broadcast.jl	/^function copyto_nonleaf!(dest, bc::Broadcasted, iter, state, count)$/;"	f
copytri!	stdlib/LinearAlgebra/src/matmul.jl	/^@inline function copytri!(A::AbstractMatrix, uplo::AbstractChar, conjugate::Bool=false, diag::Bo/;"	f
cor	stdlib/Statistics/src/Statistics.jl	/^cor(X::AbstractMatrix; dims::Int=1) = corm(X, _vmean(X, dims), dims)$/;"	f
cor	stdlib/Statistics/src/Statistics.jl	/^cor(x::AbstractVecOrMat, y::AbstractVecOrMat; dims::Int=1) =$/;"	f
cor	stdlib/Statistics/src/Statistics.jl	/^cor(x::AbstractVector) = one(real(eltype(x)))$/;"	f
cor	stdlib/Statistics/src/Statistics.jl	/^cor(x::AbstractVector, y::AbstractVector) = corm(x, mean(x), y, mean(y))$/;"	f
core	src/init.c	/^static jl_value_t *core(const char *name)$/;"	f	typeref:typename:jl_value_t *	file:
core2	src/processor_x86.cpp	/^constexpr auto core2 = get_feature_masks(sse3, ssse3, cx16, sahf);$/;"	v	namespace:X86::Feature	typeref:typename:auto
core_builtin_info	src/flisp/flisp.c	/^static const builtinspec_t core_builtin_info[] = {$/;"	v	typeref:typename:const builtinspec_t[]	file:
core_sizeof	test/compiler/codegen.jl	/^core_sizeof(o) = Core.sizeof(o)$/;"	f
core_sym	src/ast.c	/^jl_sym_t *method_sym;  jl_sym_t *core_sym;$/;"	v	typeref:typename:jl_sym_t *
corm	stdlib/Statistics/src/Statistics.jl	/^corm(x::AbstractMatrix, xmean, vardim::Int=1) = corzm(x .- xmean, vardim)$/;"	f
corm	stdlib/Statistics/src/Statistics.jl	/^corm(x::AbstractVecOrMat, xmean, y::AbstractVecOrMat, ymean, vardim::Int=1) =$/;"	f
corm	stdlib/Statistics/src/Statistics.jl	/^corm(x::AbstractVector{T}, xmean) where {T} = one(real(T))$/;"	f
corm	stdlib/Statistics/src/Statistics.jl	/^function corm(x::AbstractVector, mx, y::AbstractVector, my)$/;"	f
corzm	stdlib/Statistics/src/Statistics.jl	/^corzm(x::AbstractMatrix, y::AbstractMatrix, vardim::Int=1) =$/;"	f
corzm	stdlib/Statistics/src/Statistics.jl	/^corzm(x::AbstractMatrix, y::AbstractVector, vardim::Int=1) =$/;"	f
corzm	stdlib/Statistics/src/Statistics.jl	/^corzm(x::AbstractVector, y::AbstractMatrix, vardim::Int=1) =$/;"	f
corzm	stdlib/Statistics/src/Statistics.jl	/^corzm(x::AbstractVector{T}) where {T} = one(real(T))$/;"	f
corzm	stdlib/Statistics/src/Statistics.jl	/^function corzm(x::AbstractMatrix, vardim::Int=1)$/;"	f
cos	base/complex.jl	/^function cos(z::Complex{T}) where T$/;"	f
cos	base/special/trig.jl	/^cos(x::Real) = cos(float(x))$/;"	f
cos	base/special/trig.jl	/^function cos(x::T) where T<:Union{Float32, Float64}$/;"	f
cos	stdlib/LinearAlgebra/src/dense.jl	/^function cos(A::AbstractMatrix{<:Complex})$/;"	f
cos	stdlib/LinearAlgebra/src/dense.jl	/^function cos(A::AbstractMatrix{<:Real})$/;"	f
cos_domain_error	base/special/trig.jl	/^@noinline cos_domain_error(x) = throw(DomainError(x, "cos(x) is only defined for finite x."))$/;"	f
cos_fast	base/fastmath.jl	/^    cos_fast(x::ComplexTypes) = cosh(im*x)$/;"	f
cos_kernel	base/special/trig.jl	/^@inline function cos_kernel(y::DoubleFloat32)$/;"	f
cos_kernel	base/special/trig.jl	/^@inline function cos_kernel(y::DoubleFloat64)$/;"	f
cos_kernel	base/special/trig.jl	/^@inline function cos_kernel(y::Float64)$/;"	f
cos_kernel	base/special/trig.jl	/^cos_kernel(x::Float32) = cos_kernel(DoubleFloat32(x))$/;"	f
cos_kernel	base/special/trig.jl	/^cos_kernel(x::Real) = cos(x)$/;"	f
cosc	base/special/trig.jl	/^cosc(x::Complex) = cosc(float(x))$/;"	f
cosc	base/special/trig.jl	/^cosc(x::Complex{<:AbstractFloat}) = x==0 ? zero(x) : oftype(x,(cospi(x)-sinpi(x)\/(pi*x))\/x)$/;"	f
cosc	base/special/trig.jl	/^cosc(x::Integer) = cosc(float(x))$/;"	f
cosc	base/special/trig.jl	/^cosc(x::Number) = x==0 ? zero(x) : oftype(x,(cospi(x)-sinpi(x)\/(pi*x))\/x)$/;"	f
cosc	base/special/trig.jl	/^cosc(x::Real) = x==0 || isinf(x) ? zero(x) : (cospi(x)-sinpi(x)\/(pi*x))\/x$/;"	f
cosd	base/special/trig.jl	/^function cosd(x::Real)$/;"	f
cosh	base/complex.jl	/^function cosh(z::Complex)$/;"	f
cosh	base/special/hyperbolic.jl	/^cosh(x::Real) = cosh(float(x))$/;"	f
cosh	base/special/hyperbolic.jl	/^function cosh(x::T) where T <: Union{Float32, Float64}$/;"	f
cosh	stdlib/LinearAlgebra/src/dense.jl	/^function cosh(A::AbstractMatrix)$/;"	f
cosh_fast	base/fastmath.jl	/^    cosh_fast(x::T) where {T<:ComplexTypes} = convert(T,1)\/2*(exp(x) + exp(-x))$/;"	f
cospi	base/special/trig.jl	/^cospi(x::Integer) = isodd(x) ? -one(float(x)) : one(float(x))$/;"	f
cospi	base/special/trig.jl	/^cospi(x::Real) = cospi(float(x))$/;"	f
cospi	base/special/trig.jl	/^function cospi(x::T) where T<:AbstractFloat$/;"	f
cospi	base/special/trig.jl	/^function cospi(x::T) where T<:Union{Integer,Rational}$/;"	f
cospi	base/special/trig.jl	/^function cospi(z::Complex{T}) where T$/;"	f
count	base/bitarray.jl	/^count(B::BitArray) = bitcount(B.chunks)$/;"	f
count	base/reduce.jl	/^count(itr) = count(identity, itr)$/;"	f
count	base/reduce.jl	/^function count(pred, a::AbstractArray)$/;"	f
count	base/reduce.jl	/^function count(pred, itr)$/;"	f
count	base/regex.jl	/^function count(t::Union{AbstractString,Regex}, s::AbstractString; overlap::Bool=false)$/;"	f
count	src/julia_threads.h	/^    uint32_t count;$/;"	m	struct:__anonf8aecdb10308	typeref:typename:uint32_t
count	stdlib/LibGit2/src/diff.jl	/^function count(diff::GitDiff)$/;"	f
count	stdlib/LibGit2/src/index.jl	/^function count(idx::GitIndex)$/;"	f
count	stdlib/LibGit2/src/rebase.jl	/^function count(rb::GitRebase)$/;"	f
count	stdlib/LibGit2/src/tree.jl	/^function count(tree::GitTree)$/;"	f
count	stdlib/LibGit2/src/walker.jl	/^function count(f::Function, walker::GitRevWalker;$/;"	f
count	stdlib/SparseArrays/src/sparsematrix.jl	/^count(pred, S::AbstractSparseMatrixCSC) = count(pred, nzvalview(S)) + pred(zero(eltype(S)))*(pro/;"	f
count	stdlib/SparseArrays/src/sparsevector.jl	/^count(f, x::SparseVector) = count(f, nonzeros(x)) + f(zero(eltype(x)))*(length(x) - nnz(x))$/;"	f
count::Integer=typemax	base/strings/util.jl	/^        count::Integer=typemax(Int)) =$/;"	f
countTrailingZeros_16	src/APInt-C.cpp	/^unsigned countTrailingZeros_16(uint16_t Val) {$/;"	f	typeref:typename:JL_DLLEXPORT unsigned
countTrailingZeros_32	src/APInt-C.cpp	/^unsigned countTrailingZeros_32(uint32_t Val) {$/;"	f	typeref:typename:JL_DLLEXPORT unsigned
countTrailingZeros_64	src/APInt-C.cpp	/^unsigned countTrailingZeros_64(uint64_t Val) {$/;"	f	typeref:typename:JL_DLLEXPORT unsigned
countTrailingZeros_8	src/APInt-C.cpp	/^unsigned countTrailingZeros_8(uint8_t Val) {$/;"	f	typeref:typename:JL_DLLEXPORT unsigned
count_added_node!	base/compiler/ssair/ir.jl	/^function count_added_node!(compact::IncrementalCompact, @nospecialize(v))$/;"	f
count_connected_workers	stdlib/Distributed/test/topology.jl	/^    @everywhere function count_connected_workers()$/;"	f
count_expr_push	test/core.jl	/^function count_expr_push(ex::Expr, head::Symbol, counter)$/;"	f
count_flat	stdlib/Profile/src/Profile.jl	/^function count_flat(data::Vector{UInt64})$/;"	f
count_int	base/compiler/ssair/verify.jl	/^function count_int(val::Int, arr::Vector{Int})$/;"	f
count_meta_loc	test/syntax.jl	/^function count_meta_loc(exprs)$/;"	f
count_occurs	src/subtype.c	/^static int count_occurs(jl_value_t *t, jl_tvar_t *v)$/;"	f	typeref:typename:int	file:
count_ones	base/gmp.jl	/^count_ones(x::BigInt) = MPZ.popcount(x)$/;"	f
count_ones	base/int.jl	/^count_ones(x::BitInteger) = Int(ctpop_int(x))$/;"	f
count_ones_abs	base/gmp.jl	/^count_ones_abs(x::BigInt) = iszero(x) ? 0 : MPZ.mpn_popcount(x)$/;"	f
count_specializations	test/compiler/inference.jl	/^function count_specializations(method::Method)$/;"	f
count_union_components	src/jltypes.c	/^static int count_union_components(jl_value_t **types, size_t n)$/;"	f	typeref:typename:int	file:
count_uses	base/compiler/ssair/passes.jl	/^function count_uses(@nospecialize(stmt), uses::Vector{Int})$/;"	f
count_zeros	base/int.jl	/^count_zeros(x::Integer) = count_ones(~x)$/;"	f
counter	src/julia.h	/^    uint32_t counter;$/;"	m	struct:_jl_module_t	typeref:typename:uint32_t
counter	test/testhelpers/llvmpasses.jl	/^counter = 0$/;"	v
counter21311	test/compiler/inline.jl	/^counter21311 = Ref(0)$/;"	v
counter9535	test/core.jl	/^counter9535 = 0$/;"	v
counter_17462_post	stdlib/Test/test/runtests.jl	/^counter_17462_post = 0$/;"	v
counter_17462_pre	stdlib/Test/test/runtests.jl	/^counter_17462_pre = 0$/;"	v
countfrom	base/iterators.jl	/^countfrom()                            = Count(1, 1)$/;"	f
countfrom	base/iterators.jl	/^countfrom(start::Number)               = Count(start, oneunit(start))$/;"	f
countfrom	base/iterators.jl	/^countfrom(start::Number, step::Number) = Count(promote(start, step)...)$/;"	f
counthunks	stdlib/LibGit2/src/blame.jl	/^function counthunks(blame::GitBlame)$/;"	f
countlines	base/io.jl	/^countlines(f::AbstractString; eol::AbstractChar = '\\n') = open(io->countlines(io, eol = eol), f/;"	f
countlines	base/io.jl	/^function countlines(io::IO; eol::AbstractChar='\\n')$/;"	f
countunionsplit	base/compiler/typeutils.jl	/^function countunionsplit(atypes::Union{SimpleVector,Vector{Any}})$/;"	f
cov	stdlib/Statistics/src/Statistics.jl	/^cov(X::AbstractMatrix; dims::Int=1, corrected::Bool=true) =$/;"	f
cov	stdlib/Statistics/src/Statistics.jl	/^cov(X::AbstractVecOrMat, Y::AbstractVecOrMat; dims::Int=1, corrected::Bool=true) =$/;"	f
cov	stdlib/Statistics/src/Statistics.jl	/^cov(x::AbstractVector, y::AbstractVector; corrected::Bool=true) =$/;"	f
cov	stdlib/Statistics/src/Statistics.jl	/^cov(x::AbstractVector; corrected::Bool=true) = covm(x, mean(x); corrected=corrected)$/;"	f
cov	stdlib/Statistics/src/Statistics.jl	/^function cov(X::SparseMatrixCSC; dims::Int=1, corrected::Bool=true)$/;"	f
cov2cor!	stdlib/Statistics/src/Statistics.jl	/^function cov2cor!(C::AbstractMatrix, xsd, ysd::AbstractArray)$/;"	f
cov2cor!	stdlib/Statistics/src/Statistics.jl	/^function cov2cor!(C::AbstractMatrix, xsd::AbstractArray, ysd)$/;"	f
cov2cor!	stdlib/Statistics/src/Statistics.jl	/^function cov2cor!(C::AbstractMatrix, xsd::AbstractArray, ysd::AbstractArray)$/;"	f
cov2cor!	stdlib/Statistics/src/Statistics.jl	/^function cov2cor!(C::AbstractMatrix{T}, xsd::AbstractArray) where T$/;"	f
coverage	test/compiler/codegen.jl	/^const coverage = (Base.JLOptions().code_coverage > 0) || (Base.JLOptions().malloc_log > 0)$/;"	v
coverageData	src/codegen.cpp	/^static logdata_t coverageData;$/;"	v	typeref:typename:logdata_t	file:
coverageVisitLine	src/codegen.cpp	/^static void coverageVisitLine(jl_codectx_t &ctx, StringRef filename, int line)$/;"	f	typeref:typename:void	file:
coverage_enabled	base/compiler/utilities.jl	/^coverage_enabled() = (JLOptions().code_coverage != 0)$/;"	f
covm	stdlib/Statistics/src/Statistics.jl	/^covm(x::AbstractMatrix, xmean, vardim::Int=1; corrected::Bool=true) =$/;"	f
covm	stdlib/Statistics/src/Statistics.jl	/^covm(x::AbstractVecOrMat, xmean, y::AbstractVecOrMat, ymean, vardim::Int=1; corrected::Bool=true/;"	f
covm	stdlib/Statistics/src/Statistics.jl	/^covm(x::AbstractVector, xmean, y::AbstractVector, ymean; corrected::Bool=true) =$/;"	f
covm	stdlib/Statistics/src/Statistics.jl	/^covm(x::AbstractVector, xmean; corrected::Bool=true) =$/;"	f
covzm	stdlib/Statistics/src/Statistics.jl	/^covzm(x::AbstractVector, y::AbstractVector; corrected::Bool=true) =$/;"	f
covzm	stdlib/Statistics/src/Statistics.jl	/^covzm(x::AbstractVector; corrected::Bool=true) = unscaled_covzm(x) \/ (length(x) - Int(corrected/;"	f
covzm	stdlib/Statistics/src/Statistics.jl	/^function covzm(x::AbstractMatrix, vardim::Int=1; corrected::Bool=true)$/;"	f
covzm	stdlib/Statistics/src/Statistics.jl	/^function covzm(x::AbstractVecOrMat, y::AbstractVecOrMat, vardim::Int=1; corrected::Bool=true)$/;"	f
cp	base/file.jl	/^function cp(src::AbstractString, dst::AbstractString; force::Bool=false,$/;"	f
cp_and_test	test/file.jl	/^function cp_and_test(src::AbstractString, dst::AbstractString, follow_symlinks::Bool)$/;"	f
cp_class	src/flisp/flisp.h	/^#define cp_class(/;"	d
cp_data	src/flisp/flisp.h	/^#define cp_data(/;"	d
cp_follow_symlinks_false_check	test/file.jl	/^    function cp_follow_symlinks_false_check(s, d, file_txt; force=false)$/;"	f
cp_follow_symlinks_false_check	test/file.jl	/^    function cp_follow_symlinks_false_check(s, d; force=false)$/;"	f
cp_numtype	src/flisp/flisp.h	/^#define cp_numtype(/;"	d
cp_q	doc/make.jl	/^cp_q(src, dest) = isfile(dest) || cp(src, dest)$/;"	f
cp_type	src/flisp/flisp.h	/^#define cp_type(/;"	d
cprim	src/flisp/cvalues.c	/^static value_t cprim(fl_context_t *fl_ctx, fltype_t *type, size_t sz)$/;"	f	typeref:typename:value_t	file:
cprim_t	src/flisp/flisp.h	/^} cprim_t;$/;"	t	typeref:struct:__anonb455601d0608
cprop_inline_bar	test/compiler/inline.jl	/^function cprop_inline_bar(x...)$/;"	f
cprop_inline_baz1	test/compiler/inline.jl	/^function cprop_inline_baz1()$/;"	f
cprop_inline_baz2	test/compiler/inline.jl	/^function cprop_inline_baz2()$/;"	f
cprop_inline_foo1	test/compiler/inline.jl	/^@noinline cprop_inline_foo1() = (1, 1)$/;"	f
cprop_inline_foo2	test/compiler/inline.jl	/^@noinline cprop_inline_foo2() = (2, 2)$/;"	f
cptest	src/ccalltest.c	/^JL_DLLEXPORT complex_t *cptest(complex_t *a) {$/;"	f	typeref:typename:JL_DLLEXPORT complex_t *
cptest_static	src/ccalltest.c	/^JL_DLLEXPORT complex_t *cptest_static(complex_t *a) {$/;"	f	typeref:typename:JL_DLLEXPORT complex_t *
cptr	src/flisp/flisp.h	/^#define cptr(/;"	d
cptree	base/file.jl	/^function cptree(src::AbstractString, dst::AbstractString; force::Bool=false,$/;"	f
cpu	src/processor.cpp	/^    CPU cpu;$/;"	m	struct:__anon839834ed0111::CPUSpec	typeref:typename:CPU	file:
cpu_features	src/processor.h	/^    std::string cpu_features;$/;"	m	struct:jl_target_spec_t	typeref:typename:std::string
cpu_info	base/sysinfo.jl	/^function cpu_info()$/;"	f
cpu_name	src/processor.h	/^    std::string cpu_name;$/;"	m	struct:jl_target_spec_t	typeref:typename:std::string
cpu_summary	base/sysinfo.jl	/^function cpu_summary(io::IO=stdout, cpu::AbstractVector{CPUinfo} = cpu_info())$/;"	f
cpu_target	src/julia.h	/^    const char *cpu_target;$/;"	m	struct:__anon055fe4271808	typeref:typename:const char *
cpus	src/processor_arm.cpp	/^static constexpr CPUSpec<CPU, feature_sz> cpus[] = {$/;"	v	namespace:ARM	typeref:typename:CPUSpec<CPU,feature_sz>[]	file:
cpus	src/processor_x86.cpp	/^static constexpr CPUSpec<CPU, feature_sz> cpus[] = {$/;"	v	namespace:X86	typeref:typename:CPUSpec<CPU,feature_sz>[]	file:
crc32	src/debuginfo.cpp	/^    uint32_t crc32;$/;"	m	struct:debug_link_info	typeref:typename:uint32_t	file:
crc32c	stdlib/CRC32c/src/CRC32c.jl	/^crc32c(a::Union{Array{UInt8},FastContiguousSubArray{UInt8,N,<:Array{UInt8}} where N}, crc::UInt3/;"	f
crc32c	stdlib/CRC32c/src/CRC32c.jl	/^crc32c(io::IO, crc::UInt32=0x00000000) = Base._crc32c(io, crc)$/;"	f
crc32c	stdlib/CRC32c/src/CRC32c.jl	/^crc32c(io::IO, nb::Integer, crc::UInt32=0x00000000) = Base._crc32c(io, nb, crc)$/;"	f
crc32c	stdlib/CRC32c/src/CRC32c.jl	/^crc32c(io::IOStream, crc::UInt32=0x00000000) = Base._crc32c(io, crc)$/;"	f
crc32c	stdlib/CRC32c/src/CRC32c.jl	/^crc32c(s::String, crc::UInt32=0x00000000) = Base._crc32c(s, crc)$/;"	f
crc32c	stdlib/CRC32c/src/CRC32c.jl	/^function crc32c end$/;"	f
crc32c_armv8	src/crc32c.c	/^CRC_TARGET static uint32_t crc32c_armv8(uint32_t crc, const char *buf, size_t len)$/;"	f	typeref:typename:CRC_TARGET uint32_t	file:
crc32c_dispatch	src/crc32c.c	/^#    define crc32c_dispatch /;"	d	file:
crc32c_dispatch	src/crc32c.c	/^#    define crc32c_dispatch(/;"	d	file:
crc32c_dispatch	src/crc32c.c	/^static crc32c_func_t crc32c_dispatch(unsigned long hwcap)$/;"	f	typeref:typename:crc32c_func_t	file:
crc32c_dispatch	src/crc32c.c	/^static crc32c_func_t crc32c_dispatch(void)$/;"	f	typeref:typename:crc32c_func_t	file:
crc32c_dispatch_ifunc	src/crc32c.c	/^#    define crc32c_dispatch_ifunc /;"	d	file:
crc32c_func	src/crc32c.c	/^static crc32c_func_t crc32c_func = crc32c_lazy;$/;"	v	typeref:typename:crc32c_func_t	file:
crc32c_func_t	src/crc32c.c	/^typedef uint32_t (*crc32c_func_t)(uint32_t crc, const char *buf, size_t len);$/;"	t	typeref:typename:uint32_t (*)(uint32_t crc,const char * buf,size_t len)	file:
crc32c_init_hw	src/crc32c.c	/^static void crc32c_init_hw(void)$/;"	f	typeref:typename:void	file:
crc32c_init_sw	src/crc32c.c	/^static void crc32c_init_sw(void)$/;"	f	typeref:typename:void	file:
crc32c_lazy	src/crc32c.c	/^static uint32_t crc32c_lazy(uint32_t crc, const char *buf, size_t len)$/;"	f	typeref:typename:uint32_t	file:
crc32c_long	src/crc32c-tables.c	/^JL_UNUSED static const uint32_t crc32c_long[4][256] = {$/;"	v	typeref:typename:JL_UNUSED const uint32_t[4][256]	file:
crc32c_long	src/crc32c.c	/^static uint32_t crc32c_long[4][256];$/;"	v	typeref:typename:uint32_t[4][256]	file:
crc32c_shift	src/crc32c.c	/^JL_UNUSED static inline uint32_t crc32c_shift(const uint32_t zeros[][256], uint32_t crc)$/;"	f	typeref:typename:JL_UNUSED uint32_t	file:
crc32c_short	src/crc32c-tables.c	/^JL_UNUSED static const uint32_t crc32c_short[4][256] = {$/;"	v	typeref:typename:JL_UNUSED const uint32_t[4][256]	file:
crc32c_short	src/crc32c.c	/^static uint32_t crc32c_short[4][256];$/;"	v	typeref:typename:uint32_t[4][256]	file:
crc32c_sse42	src/crc32c.c	/^static uint32_t crc32c_sse42(uint32_t crc, const char *buf, size_t len)$/;"	f	typeref:typename:uint32_t	file:
crc32c_sw	stdlib/CRC32c/test/runtests.jl	/^crc32c_sw(io::IO, crc::UInt32=0x00000000) = crc32c_sw(io, typemax(Int64), crc)$/;"	f
crc32c_sw	stdlib/CRC32c/test/runtests.jl	/^crc32c_sw(s::String, crc::UInt32=0x00000000) = unsafe_crc32c_sw(s, sizeof(s), crc)$/;"	f
crc32c_sw	stdlib/CRC32c/test/runtests.jl	/^function crc32c_sw(io::IO, nb::Integer, crc::UInt32=0x00000000)$/;"	f
crc32c_table	src/crc32c-tables.c	/^JL_UNUSED static const uint32_t crc32c_table[8][256] = {$/;"	v	typeref:typename:JL_UNUSED const uint32_t[8][256]	file:
crc32c_table	src/crc32c.c	/^static uint32_t crc32c_table[8][256];$/;"	v	typeref:typename:uint32_t[8][256]	file:
crc32c_zeros	src/crc32c.c	/^static void crc32c_zeros(uint32_t zeros[][256], size_t len)$/;"	f	typeref:typename:void	file:
crc32c_zeros_op	src/crc32c.c	/^static void crc32c_zeros_op(uint32_t *even, size_t len)$/;"	f	typeref:typename:void	file:
crc32cb	src/crc32c.c	/^CRC_TARGET static inline uint32_t crc32cb(uint32_t crc, uint32_t val)$/;"	f	typeref:typename:CRC_TARGET uint32_t	file:
crc32ch	src/crc32c.c	/^CRC_TARGET static inline uint32_t crc32ch(uint32_t crc, uint32_t val)$/;"	f	typeref:typename:CRC_TARGET uint32_t	file:
crc32cw	src/crc32c.c	/^CRC_TARGET static inline uint32_t crc32cw(uint32_t crc, uint32_t val)$/;"	f	typeref:typename:CRC_TARGET uint32_t	file:
crc32cx	src/crc32c.c	/^CRC_TARGET static inline uint32_t crc32cx(uint32_t crc, uint64_t val)$/;"	f	typeref:typename:CRC_TARGET uint32_t	file:
crc6611	test/core.jl	/^function crc6611(spec)$/;"	f
crc6634	test/core.jl	/^function crc6634(spec)$/;"	f
creal	stdlib/LinearAlgebra/test/lu.jl	/^creal = randn(n)\/2$/;"	v
createAllocOptPass	src/llvm-alloc-opt.cpp	/^Pass *createAllocOptPass()$/;"	f	typeref:typename:Pass *
createCombineMulAddPass	src/llvm-muladd.cpp	/^Pass *createCombineMulAddPass()$/;"	f	typeref:typename:Pass *
createDesktopLink	contrib/windows/build-installer.nsi	/^Function createDesktopLink$/;"	f
createFinalLowerGCPass	src/llvm-final-gc-lowering.cpp	/^Pass *createFinalLowerGCPass()$/;"	f	typeref:typename:Pass *
createGCInvariantVerifierPass	src/llvm-gc-invariant-verifier.cpp	/^Pass *createGCInvariantVerifierPass(bool Strong) {$/;"	f	typeref:typename:Pass *
createLateLowerGCFramePass	src/llvm-late-gc-lowering.cpp	/^Pass *createLateLowerGCFramePass() {$/;"	f	typeref:typename:Pass *
createLowerExcHandlersPass	src/llvm-lower-handlers.cpp	/^Pass *createLowerExcHandlersPass()$/;"	f	typeref:typename:Pass *
createLowerPTLSPass	src/llvm-ptls.cpp	/^Pass *createLowerPTLSPass(bool imaging_mode)$/;"	f	typeref:typename:Pass *
createLowerSimdLoopPass	src/llvm-simdloop.cpp	/^JL_DLLEXPORT Pass *createLowerSimdLoopPass()$/;"	f	namespace:llvm	typeref:typename:JL_DLLEXPORT Pass *
createMultiVersioningPass	src/llvm-multiversioning.cpp	/^Pass *createMultiVersioningPass()$/;"	f	typeref:typename:Pass *
createMutableTBAAAccessTag	src/llvm-late-gc-lowering.cpp	/^MDNode *createMutableTBAAAccessTag(MDNode *Tag) {$/;"	f	typeref:typename:MDNode *
createPrinterPass	src/jitlayers.cpp	/^    Pass *createPrinterPass(raw_ostream &O, const std::string &Banner) const override {$/;"	f	class:JuliaPipeline	typeref:typename:Pass *	file:
createPropagateJuliaAddrspaces	src/llvm-propagate-addrspaces.cpp	/^Pass *createPropagateJuliaAddrspaces() {$/;"	f	typeref:typename:Pass *
createRTDyldMemoryManager	src/cgmemmgr.cpp	/^RTDyldMemoryManager* createRTDyldMemoryManager()$/;"	f	typeref:typename:RTDyldMemoryManager *
createSymbols	src/disasm.cpp	/^void SymbolTable::createSymbols()$/;"	f	class:__anon2853c92e0211::SymbolTable	typeref:typename:void
create_PRUNTIME_FUNCTION	src/debuginfo.cpp	/^static void create_PRUNTIME_FUNCTION(uint8_t *Code, size_t Size, StringRef fnname,$/;"	f	typeref:typename:void	file:
create_aliased_global	src/llvm-ptls.cpp	/^GlobalVariable *LowerPTLS::create_aliased_global(Type *T, StringRef name) const$/;"	f	class:__anonf46923380111::LowerPTLS	typeref:typename:GlobalVariable *
create_branch	stdlib/LibGit2/src/reference.jl	/^function create_branch(repo::GitRepo,$/;"	f
create_dead_object13995	test/core.jl	/^@noinline function create_dead_object13995(finalized)$/;"	f
create_expr_cache	base/loading.jl	/^function create_expr_cache(input::String, output::String, concrete_deps::typeof(_concrete_depend/;"	f
create_match_context	base/pcre.jl	/^function create_match_context()$/;"	f
create_match_data	base/pcre.jl	/^function create_match_data(re)$/;"	f
create_ref1	test/compiler/codegen.jl	/^@noinline create_ref1() = Ref(1)$/;"	f
create_ref_struct	test/compiler/codegen.jl	/^@noinline create_ref_struct() = Ref(large_struct)$/;"	f
create_serialization_stream	stdlib/Serialization/test/runtests.jl	/^function create_serialization_stream(f::Function)$/;"	f
create_shared_map	src/cgmemmgr.cpp	/^static void *create_shared_map(size_t size, size_t id)$/;"	f	namespace:__anon06c686bc0111	typeref:typename:void *	file:
create_socket	stdlib/Sockets/test/runtests.jl	/^        function create_socket()$/;"	f
create_worker	stdlib/Distributed/src/cluster.jl	/^function create_worker(manager, wconfig)$/;"	f
credential_helpers	stdlib/LibGit2/src/gitcredential.jl	/^function credential_helpers(cfg::GitConfig, cred::GitCredential)$/;"	f
credential_identifier	stdlib/LibGit2/src/utils.jl	/^function credential_identifier(scheme::AbstractString, host::AbstractString)$/;"	f
credential_identifier	stdlib/LibGit2/src/utils.jl	/^function credential_identifier(url::AbstractString)$/;"	f
credential_loop	stdlib/LibGit2/test/libgit2-helpers.jl	/^function credential_loop($/;"	f
credentials_callback	stdlib/LibGit2/src/callbacks.jl	/^function credentials_callback(libgit2credptr::Ptr{Ptr{Cvoid}}, url_ptr::Cstring,$/;"	f
credentials_cb	stdlib/LibGit2/src/callbacks.jl	/^credentials_cb() = @cfunction(credentials_callback, Cint, (Ptr{Ptr{Cvoid}}, Cstring, Cstring, Cu/;"	f
crng	test/simdloop.jl	/^crng = CartesianIndices(())$/;"	v
crng	test/simdloop.jl	/^crng = CartesianIndices(map(Base.Slice, (-1:-1, 1:3)))$/;"	v
crng	test/simdloop.jl	/^crng = CartesianIndices(map(Base.Slice, (-1:1, 1:3)))$/;"	v
crng	test/simdloop.jl	/^crng = CartesianIndices(map(Base.Slice, (2:4, 0:1, 1:1, 3:5)))$/;"	v
crng	test/simdloop.jl	/^crng = CartesianIndices(map(Base.Slice, (2:4,)))$/;"	v
cross	stdlib/LinearAlgebra/src/generic.jl	/^function cross(a::AbstractVector, b::AbstractVector)$/;"	f
crsym	src/flisp/flisp.h	/^    value_t iostreamsym, rdsym, wrsym, apsym, crsym, truncsym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
crt_sig_handler	src/signals-win.c	/^void __cdecl crt_sig_handler(int sig, int num)$/;"	f	typeref:typename:void __cdecl
cs	stdlib/Distributed/test/distributed_exec.jl	/^cs = collect(Distributed.pgenerate(x->(sleep(rand()*0.1); svd(x)), bs))$/;"	v
cscope	deps/srccache/patchelf-0.9/Makefile.in	/^cscope: cscope.files$/;"	t
cscope.files	deps/srccache/patchelf-0.9/Makefile.in	/^cscope.files: clean-cscope cscopelist$/;"	t
cscopelist	deps/srccache/patchelf-0.9/Makefile.in	/^cscopelist: cscopelist-recursive$/;"	t
cscopelist	deps/srccache/patchelf-0.9/src/Makefile.in	/^cscopelist: cscopelist-am$/;"	t
cscopelist	deps/srccache/patchelf-0.9/tests/Makefile.in	/^cscopelist: cscopelist-am$/;"	t
cscopelist-am	deps/srccache/patchelf-0.9/Makefile.in	/^cscopelist-am: $(am__tagged_files)$/;"	t
cscopelist-am	deps/srccache/patchelf-0.9/src/Makefile.in	/^cscopelist-am: $(am__tagged_files)$/;"	t
cscopelist-am	deps/srccache/patchelf-0.9/tests/Makefile.in	/^cscopelist-am: $(am__tagged_files)$/;"	t
cstr	base/cmd.jl	/^function cstr(s)$/;"	f
cstrdup	test/strings/basic.jl	/^    cstrdup(s) = @static Sys.iswindows() ? ccall(:_strdup, Cstring, (Cstring,), s) : ccall(:strd/;"	f
ctags	deps/srccache/patchelf-0.9/Makefile.in	/^ctags: ctags-recursive$/;"	t
ctags	deps/srccache/patchelf-0.9/src/Makefile.in	/^ctags: ctags-am$/;"	t
ctags	deps/srccache/patchelf-0.9/tests/Makefile.in	/^ctags: ctags-am$/;"	t
ctags-am	deps/srccache/patchelf-0.9/Makefile.in	/^ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)$/;"	t
ctags-am	deps/srccache/patchelf-0.9/src/Makefile.in	/^ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)$/;"	t
ctags-am	deps/srccache/patchelf-0.9/tests/Makefile.in	/^ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)$/;"	t
ctest	src/ccalltest.c	/^JL_DLLEXPORT complex_t ctest(complex_t a) {$/;"	f	typeref:typename:JL_DLLEXPORT complex_t
ctime	base/stat.jl	/^ctime(st::StatStruct) = st.ctime$/;"	f
ctor-def	src/julia-syntax.scm	/^(define (ctor-def name Tname ctor-body sig body wheres)$/;"	f
ctor_cv_intern	src/flisp/cvalues.c	/^#define ctor_cv_intern(/;"	d	file:
ctors-min-initialized	src/julia-syntax.scm	/^(define (ctors-min-initialized expr)$/;"	f
ctrans-op	src/julia-parser.scm	/^(define ctrans-op (string->symbol "'"))$/;"	f
ctx	src/debuginfo.cpp	/^    DIContext *ctx;$/;"	m	struct:__anonea1faf400208	typeref:typename:DIContext *	file:
ctx	src/julia.h	/^    jl_ucontext_t ctx; \/\/ saved thread state$/;"	m	struct:_jl_task_t	typeref:typename:jl_ucontext_t
ctx	src/llvm-alloc-opt.cpp	/^    LLVMContext *ctx;$/;"	m	struct:__anon0a1571000111::AllocOpt	typeref:typename:LLVMContext *	file:
ctx	src/llvm-multiversioning.cpp	/^    LLVMContext &ctx;$/;"	m	struct:__anond5683ea40111::CloneCtx	typeref:typename:LLVMContext &	file:
ctx	src/llvm-ptls.cpp	/^    LLVMContext *ctx;$/;"	m	struct:__anonf46923380111::LowerPTLS	typeref:typename:LLVMContext *	file:
ctx_save	src/jsvm-emscripten/asyncify_setup.js	/^function ctx_save(ctx) {$/;"	f
ctx_switch	src/jsvm-emscripten/asyncify_setup.js	/^function ctx_switch(lastt_ctx) {$/;"	f
ctx_switch	src/task.c	/^static void ctx_switch(jl_ptls_t ptls, jl_task_t **pt)$/;"	f	typeref:typename:void	file:
ctxbuilder	src/intrinsics.cpp	/^    IRBuilder<> &ctxbuilder;$/;"	m	struct:math_builder	typeref:typename:IRBuilder<> &	file:
ctxs	stdlib/SHA/test/runtests.jl	/^ctxs = [SHA1_CTX,$/;"	v
ctype_sizeof	src/flisp/cvalues.c	/^size_t ctype_sizeof(fl_context_t *fl_ctx, value_t type, int *palign)$/;"	f	typeref:typename:size_t
cumprod	base/accumulate.jl	/^cumprod(x::AbstractVector) = cumprod(x, dims=1)$/;"	f
cumprod	base/accumulate.jl	/^function cumprod(A::AbstractArray; dims::Integer)$/;"	f
cumprod!	base/accumulate.jl	/^cumprod!(B::AbstractArray{T}, A; dims::Integer) where {T} =$/;"	f
cumprod!	base/accumulate.jl	/^cumprod!(y::AbstractVector, x::AbstractVector) = cumprod!(y, x, dims=1)$/;"	f
cumsum	base/accumulate.jl	/^cumsum(x::AbstractVector) = cumsum(x, dims=1)$/;"	f
cumsum	base/accumulate.jl	/^function cumsum(A::AbstractArray{T}; dims::Integer) where T$/;"	f
cumsum!	base/accumulate.jl	/^cumsum!(B::AbstractArray{T}, A; dims::Integer) where {T} =$/;"	f
cumsum!	base/accumulate.jl	/^function cumsum!(out::AbstractArray, v::AbstractVector; dims::Integer=1)$/;"	f
cur	src/llvm-multiversioning.cpp	/^        Use *cur;$/;"	m	struct:__anond5683ea40111::ConstantUses::Frame	typeref:typename:Use *	file:
curheap	src/flisp/flisp.h	/^    unsigned char *curheap;$/;"	m	struct:_fl_context_t	typeref:typename:unsigned char *
curmod	stdlib/InteractiveUtils/test/runtests.jl	/^const curmod = @__MODULE__$/;"	v
curmod_name	stdlib/InteractiveUtils/test/runtests.jl	/^const curmod_name = fullname(curmod)$/;"	v
curmod_str	stdlib/InteractiveUtils/test/runtests.jl	/^const curmod_str = curmod === Main ? "Main" : join(curmod_name, ".")$/;"	v
curr_frame	src/flisp/flisp.h	/^    uint32_t curr_frame;$/;"	m	struct:_fl_context_t	typeref:typename:uint32_t
current	stdlib/LibGit2/src/rebase.jl	/^function current(rb::GitRebase)$/;"	f
current-filename	src/julia-parser.scm	/^(define current-filename 'none)$/;"	f
current-input-port	src/flisp/aliases.scm	/^(define (current-input-port (p *input-stream*))$/;"	f
current-output-port	src/flisp/aliases.scm	/^(define (current-output-port (p *output-stream*))$/;"	f
current_logger	base/logging.jl	/^current_logger() = current_logstate().logger$/;"	f
current_logger_for_env	base/logging.jl	/^@noinline function current_logger_for_env(std_level::LogLevel, group, _module)$/;"	f
current_logstate	base/logging.jl	/^function current_logstate()$/;"	f
current_pg_count	src/gc-pages.c	/^static size_t current_pg_count = 0;$/;"	v	typeref:typename:size_t	file:
current_project	base/initdefs.jl	/^function current_project()$/;"	f
current_project	base/initdefs.jl	/^function current_project(dir::AbstractString)$/;"	f
current_task	base/task.jl	/^current_task() = ccall(:jl_get_current_task, Ref{Task}, ())$/;"	f
current_task	src/julia_threads.h	/^    struct _jl_task_t *current_task;$/;"	m	struct:_jl_tls_states_t	typeref:struct:_jl_task_t *
cv	test/offsetarray.jl	/^cv = copy(v)$/;"	v
cv_autorelease	src/flisp/cvalues.c	/^void cv_autorelease(fl_context_t *fl_ctx, cvalue_t *cv)$/;"	f	typeref:typename:void
cv_class	src/flisp/flisp.h	/^#define cv_class(/;"	d
cv_data	src/flisp/flisp.h	/^#define cv_data(/;"	d
cv_intern	src/flisp/cvalues.c	/^#define cv_intern(/;"	d	file:
cv_isPOD	src/flisp/flisp.h	/^#define cv_isPOD(/;"	d
cv_isstr	src/flisp/flisp.h	/^#define cv_isstr(/;"	d
cv_len	src/flisp/flisp.h	/^#define cv_len(/;"	d
cv_nwords	src/flisp/cvalues.c	/^static size_t cv_nwords(fl_context_t *fl_ctx, cvalue_t *cv)$/;"	f	typeref:typename:size_t	file:
cv_pin	src/flisp/cvalues.c	/^void cv_pin(fl_context_t *fl_ctx, cvalue_t *cv)$/;"	f	typeref:typename:void
cv_type	src/flisp/flisp.h	/^#define cv_type(/;"	d
cvalue	src/flisp/cvalues.c	/^value_t cvalue(fl_context_t *fl_ctx, fltype_t *type, size_t sz)$/;"	f	typeref:typename:value_t
cvalue_array	src/flisp/cvalues.c	/^value_t cvalue_array(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
cvalue_array_aref	src/flisp/cvalues.c	/^static value_t cvalue_array_aref(fl_context_t *fl_ctx, value_t *args)$/;"	f	typeref:typename:value_t	file:
cvalue_array_aset	src/flisp/cvalues.c	/^static value_t cvalue_array_aset(fl_context_t *fl_ctx, value_t *args)$/;"	f	typeref:typename:value_t	file:
cvalue_array_init	src/flisp/cvalues.c	/^static int cvalue_array_init(fl_context_t *fl_ctx, fltype_t *ft, value_t arg, void *dest)$/;"	f	typeref:typename:int	file:
cvalue_arraylen	src/flisp/cvalues.c	/^size_t cvalue_arraylen(value_t v)$/;"	f	typeref:typename:size_t
cvalue_compare	src/flisp/cvalues.c	/^value_t cvalue_compare(value_t a, value_t b)$/;"	f	typeref:typename:value_t
cvalue_copy	src/flisp/cvalues.c	/^value_t cvalue_copy(fl_context_t *fl_ctx, value_t v)$/;"	f	typeref:typename:value_t
cvalue_data	src/flisp/flisp.h	/^#define cvalue_data(/;"	d
cvalue_from_data	src/flisp/cvalues.c	/^value_t cvalue_from_data(fl_context_t *fl_ctx, fltype_t *type, void *data, size_t sz)$/;"	f	typeref:typename:value_t
cvalue_from_ref	src/flisp/cvalues.c	/^value_t cvalue_from_ref(fl_context_t *fl_ctx, fltype_t *type, void *ptr, size_t sz, value_t pare/;"	f	typeref:typename:value_t
cvalue_init	src/flisp/cvalues.c	/^static void cvalue_init(fl_context_t *fl_ctx, fltype_t *type, value_t v, void *dest)$/;"	f	typeref:typename:void	file:
cvalue_len	src/flisp/flisp.h	/^#define cvalue_len(/;"	d
cvalue_new	src/flisp/cvalues.c	/^value_t cvalue_new(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
cvalue_print	src/flisp/print.c	/^static void cvalue_print(fl_context_t *fl_ctx, ios_t *f, value_t v)$/;"	f	typeref:typename:void	file:
cvalue_printdata	src/flisp/print.c	/^static void cvalue_printdata(fl_context_t *fl_ctx, ios_t *f, void *data,$/;"	f	typeref:typename:void	file:
cvalue_relocate	src/flisp/cvalues.c	/^static value_t cvalue_relocate(fl_context_t *fl_ctx, value_t v)$/;"	f	typeref:typename:value_t	file:
cvalue_sizeof	src/flisp/cvalues.c	/^value_t cvalue_sizeof(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
cvalue_static_cstring	src/flisp/cvalues.c	/^value_t cvalue_static_cstring(fl_context_t *fl_ctx, const char *str)$/;"	f	typeref:typename:value_t
cvalue_static_cstrn	src/flisp/cvalues.c	/^value_t cvalue_static_cstrn(fl_context_t *fl_ctx, const char *str, size_t n)$/;"	f	typeref:typename:value_t
cvalue_string	src/flisp/cvalues.c	/^value_t cvalue_string(fl_context_t *fl_ctx, size_t sz)$/;"	f	typeref:typename:value_t
cvalue_t	src/flisp/flisp.h	/^} cvalue_t;$/;"	t	typeref:struct:__anonb455601d0408
cvalue_typeof	src/flisp/cvalues.c	/^value_t cvalue_typeof(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
cvalues_builtin_info	src/flisp/cvalues.c	/^static const builtinspec_t cvalues_builtin_info[] = {$/;"	v	typeref:typename:const builtinspec_t[]	file:
cvalues_init	src/flisp/cvalues.c	/^static void cvalues_init(fl_context_t *fl_ctx)$/;"	f	typeref:typename:void	file:
cvarargs	test/ccall.jl	/^@eval function cvarargs()$/;"	f
cvinitfunc_t	src/flisp/flisp.h	/^typedef int (*cvinitfunc_t)(fl_context_t *fl_ctx, struct _fltype_t*, value_t, void*);$/;"	t	typeref:typename:int (*)(fl_context_t * fl_ctx,struct _fltype_t *,value_t,void *)
cvt_iintrinsic	src/runtime_intrinsics.c	/^#define cvt_iintrinsic(/;"	d	file:
cvtable_t	src/flisp/flisp.h	/^} cvtable_t;$/;"	t	typeref:struct:__anonb455601d0308
cwstring	base/c.jl	/^function cwstring(s::AbstractString)$/;"	f
cxx_abi	contrib/normalize_triplet.py	/^        cxx_abi = {$/;"	v
cxx_abi	contrib/normalize_triplet.py	/^cxx_abi = get_field(m, cxx_abi_mapping)$/;"	v
cxx_abi_mapping	contrib/normalize_triplet.py	/^cxx_abi_mapping = {$/;"	v
cyc_compare	src/flisp/equal.c	/^static value_t cyc_compare(fl_context_t *fl_ctx, value_t a, value_t b, htable_t *table, int eq)$/;"	f	typeref:typename:value_t	file:
cyc_vector_compare	src/flisp/equal.c	/^static value_t cyc_vector_compare(fl_context_t *fl_ctx, value_t a,$/;"	f	typeref:typename:value_t	file:
cycle	base/iterators.jl	/^cycle(xs) = Cycle(xs)$/;"	f
cycle_in_solve_tvar_constraints	test/core.jl	/^cycle_in_solve_tvar_constraints(::Type{Some{S}}, x::S) where {S} = 0$/;"	f
cycle_in_solve_tvar_constraints	test/core.jl	/^cycle_in_solve_tvar_constraints(::Type{T}, x::Val{T}) where {T} = 1$/;"	f
d	base/sysinfo.jl	/^    d(i, unit=unit) = lpad(string(round(Int64,i)), 9) * unit$/;"	f
d	src/flisp/equal.c	/^        double d;$/;"	m	union:bounded_hash::__anon73d424b2010a	typeref:typename:double	file:
d	src/runtime_intrinsics.c	/^    int32_t d;$/;"	m	union:__anonc5a5d9f6010a	typeref:typename:int32_t	file:
d	src/runtime_intrinsics.c	/^    int64_t d;$/;"	m	union:__anonc5a5d9f6020a	typeref:typename:int64_t	file:
d	src/support/operators.c	/^    union { double d; int64_t i64; } u, v;$/;"	m	union:cmp_eq::__anon042f5e38010a	typeref:typename:double	file:
d	stdlib/Dates/test/periods.jl	/^d = Dates.Day(1)$/;"	v
d	stdlib/Dates/test/ranges.jl	/^d = Dates.Date(2020, 1, 1)$/;"	v
d	stdlib/Dates/test/types.jl	/^d = Dates.Day(1)$/;"	v
d	stdlib/Mmap/test/runtests.jl	/^d = Mmap.mmap(s)$/;"	v
d	stdlib/SharedArrays/test/runtests.jl	/^d = @inferred(SharedArray{Float64,2}((2,3)))$/;"	v
d	stdlib/SharedArrays/test/runtests.jl	/^d = SharedArrays.shmem_fill(1.0, (10,10,10))$/;"	v
d	stdlib/SharedArrays/test/runtests.jl	/^d = SharedArrays.shmem_fill(1.0, dims)$/;"	v
d	stdlib/SharedArrays/test/runtests.jl	/^d = SharedArrays.shmem_rand(1:100, dims)$/;"	v
d	stdlib/SharedArrays/test/runtests.jl	/^d = SharedArrays.shmem_rand(dims)$/;"	v
d	stdlib/SharedArrays/test/runtests.jl	/^d = SharedArray{Int}(10)$/;"	v
d	stdlib/SharedArrays/test/runtests.jl	/^d = SharedArray{Int}(dims, init = D->fill!(D.loc_subarr_1d, myid()))$/;"	v
d	stdlib/SharedArrays/test/runtests.jl	/^d=SharedArray{Int64,2}((10,10); init = D->fill!(D.loc_subarr_1d, myid()), pids=[id_me, id_other]/;"	v
d	test/bigint.jl	/^d = parse(BigInt,"-246913578024691357802469135780")$/;"	v
d	test/core.jl	/^d = [0x2, 0x1, 0x3]$/;"	v
d	test/enums.jl	/^d = Dict(apple=>"apple",orange=>"orange",kiwi=>"kiwi")$/;"	v
d2	stdlib/SharedArrays/test/runtests.jl	/^d2 = map(x->1, d)$/;"	v
d20704	test/compiler/inference.jl	/^d20704() = c20704()$/;"	f
d28955	test/compiler/inference.jl	/^d28955(f, x, y) = c28955(f, Bool, x, y)$/;"	f
d7648	test/reflection.jl	/^d7648 = 9$/;"	v
dA	stdlib/SparseArrays/test/sparse.jl	/^dA = Array(sA)$/;"	v
d_fmt	src/support/strptime.c	/^	const char* d_fmt;$/;"	m	struct:__anon732973510108	typeref:typename:const char *	file:
d_ptr	deps/srccache/patchelf-0.9/src/elf.h	/^      Elf32_Addr d_ptr;			\/* Address value *\/$/;"	m	union:__anonff7a58690f08::__anonff7a5869100a	typeref:typename:Elf32_Addr
d_ptr	deps/srccache/patchelf-0.9/src/elf.h	/^      Elf64_Addr d_ptr;			\/* Address value *\/$/;"	m	union:__anonff7a58691108::__anonff7a5869120a	typeref:typename:Elf64_Addr
d_t_fmt	src/support/strptime.c	/^	const char* d_t_fmt;$/;"	m	struct:__anon732973510108	typeref:typename:const char *	file:
d_tag	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Sword	d_tag;			\/* Dynamic entry type *\/$/;"	m	struct:__anonff7a58690f08	typeref:typename:Elf32_Sword
d_tag	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Sxword	d_tag;			\/* Dynamic entry type *\/$/;"	m	struct:__anonff7a58691108	typeref:typename:Elf64_Sxword
d_tmpdir	test/file.jl	/^d_tmpdir = mktempdir(c_tmpdir)$/;"	v
d_tmpfile,f	test/file.jl	/^d_tmpfile,f = mktemp(c_tmpdir)$/;"	v
d_un	deps/srccache/patchelf-0.9/src/elf.h	/^    } d_un;$/;"	m	struct:__anonff7a58690f08	typeref:union:__anonff7a58690f08::__anonff7a5869100a
d_un	deps/srccache/patchelf-0.9/src/elf.h	/^    } d_un;$/;"	m	struct:__anonff7a58691108	typeref:union:__anonff7a58691108::__anonff7a5869120a
d_val	deps/srccache/patchelf-0.9/src/elf.h	/^      Elf32_Word d_val;			\/* Integer value *\/$/;"	m	union:__anonff7a58690f08::__anonff7a5869100a	typeref:typename:Elf32_Word
d_val	deps/srccache/patchelf-0.9/src/elf.h	/^      Elf64_Xword d_val;		\/* Integer value *\/$/;"	m	union:__anonff7a58691108::__anonff7a5869120a	typeref:typename:Elf64_Xword
darwin_codesign_julia_options	contrib/mac/framework/Makefile	/^darwin_codesign_julia_options=-o runtime --entitlements $(JULIAHOME)\/contrib\/mac\/framework\/j/;"	m
darwin_codesign_options	contrib/mac/framework/Makefile	/^darwin_codesign_options=--timestamp$/;"	m
darwinframework	Makefile	/^darwinframework:$/;"	t
data	src/flisp/flisp.h	/^    void *data;$/;"	m	struct:__anonb455601d0408	typeref:typename:void *
data	src/gc.h	/^    char *data;$/;"	m	struct:__anoncf30557c1108	typeref:typename:char *
data	src/julia.h	/^    void *data;$/;"	m	struct:__anon055fe4270408	typeref:typename:JL_DATA_TYPE void *
data	src/julia.h	/^    void *data;$/;"	m	struct:__anon055fe4271708	typeref:typename:void *
data	src/julia_threads.h	/^    jl_gc_mark_data_t *data; \/\/ Current stack address for the data (up growing)$/;"	m	struct:__anonf8aecdb10708	typeref:typename:jl_gc_mark_data_t *
data	src/processor.h	/^    std::vector<uint8_t> data;$/;"	m	struct:jl_target_spec_t	typeref:typename:std::vector<uint8_t>
data	stdlib/SHA/test/runtests.jl	/^data = Any["", "test", lorem, file, so_many_as_array, so_many_as_tuple]$/;"	v
data	test/gcext/gcext.c	/^    jl_value_t *data[1];$/;"	m	struct:__anonf90ca10a0108	typeref:typename:jl_value_t * [1]	file:
data_desc	stdlib/SHA/test/runtests.jl	/^data_desc = ["the empty string", "the string \\"test\\"", "lorem ipsum",$/;"	v
data_pointer	src/cgutils.cpp	/^static Value *data_pointer(jl_codectx_t &ctx, const jl_cgval_t &x)$/;"	f	typeref:typename:Value *	file:
data_stack	src/julia_threads.h	/^    jl_gc_mark_data_t *data_stack;$/;"	m	struct:__anonf8aecdb10808	typeref:typename:jl_gc_mark_data_t *
datadir	deps/srccache/patchelf-0.9/Makefile.in	/^datadir = @datadir@$/;"	m
datadir	deps/srccache/patchelf-0.9/src/Makefile.in	/^datadir = @datadir@$/;"	m
datadir	deps/srccache/patchelf-0.9/tests/Makefile.in	/^datadir = @datadir@$/;"	m
dataids	base/abstractarray.jl	/^dataids(::AbstractRange) = ()$/;"	f
dataids	base/abstractarray.jl	/^dataids(A::AbstractArray) = (UInt(objectid(A)),)$/;"	f
dataids	base/abstractarray.jl	/^dataids(A::Array) = (UInt(pointer(A)),)$/;"	f
dataids	base/abstractarray.jl	/^dataids(x) = ()$/;"	f
dataids	base/reinterpretarray.jl	/^dataids(a::ReinterpretArray) = dataids(a.parent)$/;"	f
dataids	base/reshapedarray.jl	/^dataids(A::ReshapedArray) = dataids(A.parent)$/;"	f
dataids	base/subarray.jl	/^dataids(A::SubArray) = (dataids(A.parent)..., _splatmap(dataids, A.indices)...)$/;"	f
datarootdir	deps/srccache/patchelf-0.9/Makefile.in	/^datarootdir = @datarootdir@$/;"	m
datarootdir	deps/srccache/patchelf-0.9/src/Makefile.in	/^datarootdir = @datarootdir@$/;"	m
datarootdir	deps/srccache/patchelf-0.9/tests/Makefile.in	/^datarootdir = @datarootdir@$/;"	m
datatype_alignment	base/reflection.jl	/^function datatype_alignment(dt::DataType)$/;"	f
datatype_fielddesc_type	base/reflection.jl	/^function datatype_fielddesc_type(dt::DataType)$/;"	f
datatype_fieldtypes	base/reflection.jl	/^datatype_fieldtypes(x::DataType) = ccall(:jl_get_fieldtypes, Any, (Any,), x)$/;"	f
datatype_haspadding	base/reflection.jl	/^function datatype_haspadding(dt::DataType)$/;"	f
datatype_module_name	src/jltypes.c	/^STATIC_INLINE const char *datatype_module_name(jl_value_t *t) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE const char *
datatype_name_cmp	src/jltypes.c	/^int datatype_name_cmp(jl_value_t *a, jl_value_t *b) JL_NOTSAFEPOINT$/;"	f	typeref:typename:int
datatype_pointerfree	base/reflection.jl	/^function datatype_pointerfree(dt::DataType)$/;"	f
datatype_stack	test/gcext/gcext.c	/^static jl_datatype_t *datatype_stack;$/;"	v	typeref:typename:jl_datatype_t *	file:
datatype_stack_external	test/gcext/gcext.c	/^static jl_datatype_t *datatype_stack_external;$/;"	v	typeref:typename:jl_datatype_t *	file:
datatype_stack_internal	test/gcext/gcext.c	/^static jl_datatype_t *datatype_stack_internal;$/;"	v	typeref:typename:jl_datatype_t *	file:
date2epochdays	stdlib/Dates/src/rounding.jl	/^date2epochdays(dt::Date) = value(dt) - DATEEPOCH$/;"	f
dateformat_str	stdlib/Dates/src/io.jl	/^macro dateformat_str(str)$/;"	f
datetime2epochms	stdlib/Dates/src/rounding.jl	/^datetime2epochms(dt::DateTime) = value(dt) - DATETIMEEPOCH$/;"	f
datetime2julian	stdlib/Dates/src/conversions.jl	/^datetime2julian(dt::DateTime) = (value(dt) - JULIANEPOCH) \/ 86400000.0$/;"	f
datetime2rata	stdlib/Dates/src/conversions.jl	/^datetime2rata(dt::TimeType) = days(dt)$/;"	f
datetime2unix	stdlib/Dates/src/conversions.jl	/^datetime2unix(dt::DateTime) = (value(dt) - UNIXEPOCH) \/ 1000.0$/;"	f
day	src/support/strptime.c	/^	const char* day[7];$/;"	m	struct:__anon732973510108	typeref:typename:const char * [7]	file:
day	stdlib/Dates/src/accessors.jl	/^day(dt::TimeType) = day(days(dt))$/;"	f
day	stdlib/Dates/src/accessors.jl	/^function day(days)$/;"	f
day_in	test/core.jl	/^function day_in(obj::ObjMember)$/;"	f
dayabbr	stdlib/Dates/src/query.jl	/^dayabbr(day::Integer, locale::DateLocale) = locale.days_of_week_abbr[day]$/;"	f
dayabbr	stdlib/Dates/src/query.jl	/^dayabbr(day::Integer; locale::AbstractString="english") = dayabbr(day, LOCALES[locale])$/;"	f
dayabbr	stdlib/Dates/src/query.jl	/^function dayabbr(dt::TimeType;locale::AbstractString="english")$/;"	f
dayname	stdlib/Dates/src/query.jl	/^dayname(day::Integer, locale::DateLocale) = locale.days_of_week[day]$/;"	f
dayname	stdlib/Dates/src/query.jl	/^dayname(day::Integer; locale::AbstractString="english") = dayname(day, LOCALES[locale])$/;"	f
dayname	stdlib/Dates/src/query.jl	/^function dayname(dt::TimeType;locale::AbstractString="english")$/;"	f
dayofmonth	stdlib/Dates/src/accessors.jl	/^dayofmonth(dt::TimeType) = day(dt)$/;"	f
dayofquarter	stdlib/Dates/src/query.jl	/^dayofquarter(dt::TimeType) = dayofyear(dt) - QUARTERDAYS[quarterofyear(dt)]$/;"	f
dayofweek	stdlib/Dates/src/query.jl	/^dayofweek(days) = mod1(days, 7)$/;"	f
dayofweek	stdlib/Dates/src/query.jl	/^dayofweek(dt::TimeType) = dayofweek(days(dt))$/;"	f
dayofweekofmonth	stdlib/Dates/src/query.jl	/^function dayofweekofmonth(dt::TimeType)$/;"	f
dayofyear	stdlib/Dates/src/query.jl	/^dayofyear(dt::TimeType) = ((y, m, d) = yearmonthday(dt); return dayofyear(y, m, d))$/;"	f
dayofyear	stdlib/Dates/src/query.jl	/^dayofyear(y, m, d) = MONTHDAYS[m] + d + (m > 2 && isleapyear(y))$/;"	f
days	stdlib/Dates/src/accessors.jl	/^days(dt::Date) = value(dt)$/;"	f
days	stdlib/Dates/src/accessors.jl	/^days(dt::DateTime) = fld(value(dt), 86400000)$/;"	f
days	stdlib/Dates/src/periods.jl	/^days(c::CompoundPeriod) = isempty(c.periods) ? 0.0 : Float64(sum(days, c.periods))$/;"	f
days	stdlib/Dates/src/periods.jl	/^days(c::Day)         = value(c)$/;"	f
days	stdlib/Dates/src/periods.jl	/^days(c::Hour)        = div(value(c), 24)$/;"	f
days	stdlib/Dates/src/periods.jl	/^days(c::Millisecond) = div(value(c), 86400000)$/;"	f
days	stdlib/Dates/src/periods.jl	/^days(c::Minute)      = div(value(c), 1440)$/;"	f
days	stdlib/Dates/src/periods.jl	/^days(c::Month)       = 30.436875 * value(c)$/;"	f
days	stdlib/Dates/src/periods.jl	/^days(c::Second)      = div(value(c), 86400)$/;"	f
days	stdlib/Dates/src/periods.jl	/^days(c::Week)        = 7 * value(c)$/;"	f
days	stdlib/Dates/src/periods.jl	/^days(c::Year)        = 365.2425 * value(c)$/;"	f
daysinmonth	stdlib/Dates/src/query.jl	/^daysinmonth(dt::TimeType) = ((y, m) = yearmonth(dt); return daysinmonth(y, m))$/;"	f
daysinmonth	stdlib/Dates/src/types.jl	/^daysinmonth(y,m) = DAYSINMONTH[m] + (m == 2 && isleapyear(y))$/;"	f
daysinmonth	stdlib/Dates/test/query.jl	/^daysinmonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]$/;"	v
daysinyear	stdlib/Dates/src/query.jl	/^daysinyear(dt::TimeType) = 365 + isleapyear(dt)$/;"	f
daysinyear	stdlib/Dates/src/query.jl	/^daysinyear(y) = 365 + isleapyear(y)$/;"	f
daysofweek	stdlib/Dates/test/query.jl	/^daysofweek = [Dates.Tue, Dates.Sat, Dates.Sun, Dates.Thu, Dates.Sun, Dates.Fri,$/;"	v
daysofweekinmonth	stdlib/Dates/src/query.jl	/^function daysofweekinmonth(dt::TimeType)$/;"	f
deactivate	stdlib/REPL/src/LineEdit.jl	/^function deactivate(p::TextInterface, s::ModeState, termbuf, term::TextTerminal)$/;"	f
deactivate_region	stdlib/REPL/src/LineEdit.jl	/^deactivate_region(s::ModeState) = activate_region(s, :off)$/;"	f
dealloc	contrib/mac/frameworkapp/JuliaLauncher/AppDelegate.m	/^- (void)dealloc {$/;"	m	implementation:AppDelegate
debug	Makefile	/^debug release : % : julia-%$/;"	t
debug	base/logging.jl	/^macro debug(exs...) logmsg_code((@_sourceinfo)..., :Debug, exs...) end$/;"	f
debug	contrib/fixup-libgfortran.sh	/^debug() { :; }$/;"	f
debug	contrib/fixup-libgfortran.sh	/^debug() { echo "$*"; }$/;"	f
debug	deps/srccache/patchelf-0.9/src/patchelf.cc	/^static void debug(const char * format, ...)$/;"	f	typeref:typename:void	file:
debug	src/Makefile	/^release debug: %: libjulia-%$/;"	t
debug	src/flisp/Makefile	/^debug: $(BUILDDIR)\/$(EXENAME)-debug$(EXE)$/;"	t
debug	src/support/Makefile	/^debug: $(BUILDDIR)\/libsupport-debug.a$/;"	t
debug	stdlib/LinearAlgebra/test/triangular.jl	/^debug = false$/;"	v
debug	test/embedding/Makefile	/^debug:   $(BIN)\/embedding-debug$(EXE)$/;"	t
debug	test/gcext/Makefile	/^debug:   $(BIN)\/gcext-debug$(EXE)$/;"	t
debug	ui/Makefile	/^release debug :  % : julia-%$/;"	t
debugMode	deps/srccache/patchelf-0.9/src/patchelf.cc	/^static bool debugMode = false;$/;"	v	typeref:typename:bool	file:
debug_color	base/client.jl	/^debug_color()  = repl_color("JULIA_DEBUG_COLOR" , default_color_debug)$/;"	f
debug_enabled	src/codegen.cpp	/^    bool debug_enabled = false;$/;"	m	class:jl_codectx_t	typeref:typename:bool	file:
debug_info_kind	src/julia.h	/^    int debug_info_kind; \/\/ Enum for line-table-only, line-directives-only,$/;"	m	struct:__anon055fe4271b08	typeref:typename:int
debug_level	src/julia.h	/^    int8_t debug_level;$/;"	m	struct:__anon055fe4271808	typeref:typename:int8_t
debug_link_info	src/debuginfo.cpp	/^struct debug_link_info {$/;"	s	file:
debuginfo	base/show.jl	/^    debuginfo(sym) = sym == :default ? default_debuginfo[] : sym$/;"	f
dec	base/intfuncs.jl	/^function dec(x::Unsigned, pad::Integer, neg::Bool)$/;"	f
dec	base/multidimensional.jl	/^    @inline function dec(state, start, stop)$/;"	f
dec	test/channels.jl	/^        dec() = size -= 1$/;"	f
dec	test/core.jl	/^    function dec()$/;"	f
decay_derived	src/cgutils.cpp	/^#define decay_derived(/;"	d	file:
decay_derived	src/cgutils.cpp	/^static Value *decay_derived(IRBuilder<> &irbuilder, Value *V)$/;"	f	typeref:typename:Value *	file:
decimallength	base/ryu/utils.jl	/^@inline function decimallength(v)$/;"	f
decimallength	base/ryu/utils.jl	/^@inline function decimallength(v::UInt16)$/;"	f
decimallength	base/ryu/utils.jl	/^@inline function decimallength(v::UInt32)$/;"	f
decl	src/codegen.cpp	/^    Function *decl;$/;"	m	struct:jl_returninfo_t	typeref:typename:Function *	file:
decl-type	src/ast.scm	/^(define (decl-type v)$/;"	f
decl-var	src/ast.scm	/^(define (decl-var v)$/;"	f
decl-var*	src/macroexpand.scm	/^(define (decl-var* e)$/;"	f
decl-vars*	src/macroexpand.scm	/^(define (decl-vars* e)$/;"	f
decl?	src/ast.scm	/^(define (decl? e)$/;"	f
declHasAnnotation	src/clangsa/GCChecker.cpp	/^bool GCChecker::declHasAnnotation(const clang::Decl *D, const char *which) {$/;"	f	class:GCChecker	typeref:typename:bool
declarations:	base/docs/basedocs.jl	/^primitive type declarations:$/;"	f
declare	src/llvm-pass-helpers.h	/^        DeclarationFunction declare;$/;"	m	struct:jl_intrinsics::IntrinsicDescription	typeref:typename:DeclarationFunction
declared_ceil	test/llvmcall.jl	/^function declared_ceil(x::Float64)$/;"	f
declared_ceil	test/llvmcall2.jl	/^function declared_ceil(x::Float64)$/;"	f
declared_floor	test/llvmcall.jl	/^function declared_floor(x::Float64)$/;"	f
declared_floor	test/llvmcall2.jl	/^function declared_floor(x::Float64)$/;"	f
decode	base/printf.jl	/^function decode(b::Int, x::BigInt, digits)$/;"	f
decode	stdlib/Base64/src/decode.jl	/^decode(x::UInt8) = @inbounds return BASE64_DECODE[x + 1]$/;"	f
decode_0ct	base/printf.jl	/^decode_0ct(d::Real, digits) = decode_0ct(Integer(d), digits)$/;"	f
decode_0ct	base/printf.jl	/^decode_0ct(out, d, flags::String, width::Int, precision::Int, c::Char, digits) = (true, decode_0/;"	f
decode_0ct	base/printf.jl	/^function decode_0ct(d::Integer, digits)$/;"	f
decode_0ct	base/printf.jl	/^function decode_0ct(x::BigInt, digits)$/;"	f
decode_HEX	base/printf.jl	/^decode_HEX(d::Real, digits) = decode_HEX(Integer(d), digits)$/;"	f
decode_HEX	base/printf.jl	/^decode_HEX(out, d, flags::String, width::Int, precision::Int, c::Char, digits) = (true, decode_H/;"	f
decode_HEX	base/printf.jl	/^decode_HEX(x::BigInt, digits) = decode(-16, x, digits)$/;"	f
decode_HEX	base/printf.jl	/^decode_HEX(x::Integer, digits) = decode_hex(x,HEX_symbols,digits)$/;"	f
decode_backtrace	src/stackwalk.c	/^void decode_backtrace(uintptr_t *bt_data, size_t bt_size,$/;"	f	typeref:typename:void
decode_dec	base/printf.jl	/^decode_dec(d::Real, digits) = decode_dec(Integer(d), digits)$/;"	f
decode_dec	base/printf.jl	/^decode_dec(out, d, flags::String, width::Int, precision::Int, c::Char, digits) = (true, decode_d/;"	f
decode_dec	base/printf.jl	/^decode_dec(x::BigInt, digits) = decode(10, x, digits)$/;"	f
decode_dec	base/printf.jl	/^function decode_dec(d::Integer, digits)$/;"	f
decode_dec	base/printf.jl	/^function decode_dec(x::SmallFloatingPoint, digits)$/;"	f
decode_hex	base/printf.jl	/^decode_hex(d::Real, digits) = decode_hex(Integer(d), digits)$/;"	f
decode_hex	base/printf.jl	/^decode_hex(out, d, flags::String, width::Int, precision::Int, c::Char, digits) = (true, decode_h/;"	f
decode_hex	base/printf.jl	/^decode_hex(x::BigInt, digits) = decode(16, x, digits)$/;"	f
decode_hex	base/printf.jl	/^decode_hex(x::Integer, digits) = decode_hex(x,hex_symbols,digits)$/;"	f
decode_hex	base/printf.jl	/^function decode_hex(d::Integer, symbols::AbstractArray{UInt8,1}, digits)$/;"	f
decode_oct	base/printf.jl	/^decode_oct(d::Real, digits) = decode_oct(Integer(d), digits)$/;"	f
decode_oct	base/printf.jl	/^decode_oct(out, d, flags::String, width::Int, precision::Int, c::Char, digits) = (true, decode_o/;"	f
decode_oct	base/printf.jl	/^decode_oct(x::BigInt, digits) = decode(8, x, digits)$/;"	f
decode_oct	base/printf.jl	/^function decode_oct(d::Integer, digits)$/;"	f
decode_overlong	base/char.jl	/^function decode_overlong end$/;"	f
decode_overlong	base/char.jl	/^function decode_overlong(c::Char)$/;"	f
decode_slow	stdlib/Base64/src/decode.jl	/^function decode_slow(b1, b2, b3, b4, buffer, i, input, ptr, n, rest)$/;"	f
decompose	base/hashing2.jl	/^decompose(x::Integer) = x, 0, 1$/;"	f
decompose	base/hashing2.jl	/^decompose(x::Rational) = numerator(x), 0, denominator(x)$/;"	f
decompose	base/hashing2.jl	/^function decompose(x::BigFloat)::Tuple{BigInt, Int, Int}$/;"	f
decompose	base/hashing2.jl	/^function decompose(x::Float16)::NTuple{3,Int}$/;"	f
decompose	base/hashing2.jl	/^function decompose(x::Float32)::NTuple{3,Int}$/;"	f
decompose	base/hashing2.jl	/^function decompose(x::Float64)::Tuple{Int64, Int, Int}$/;"	f
decorate	test/staged.jl	/^    @generated function decorate(t)$/;"	f
decorated	test/staged.jl	/^decorated = Set{DataType}()$/;"	v
decrement	stdlib/SuiteSparse/src/SuiteSparse.jl	/^decrement(A::AbstractArray{<:Integer}) = decrement!(copy(A))$/;"	f
decrement!	stdlib/SuiteSparse/src/SuiteSparse.jl	/^function decrement!(A::AbstractArray{T}) where T<:Integer$/;"	f
dedent-triplequoted-string	src/julia-parser.scm	/^(define (dedent-triplequoted-string lst)$/;"	f
deepcopy	base/deepcopy.jl	/^function deepcopy(x)$/;"	f
deepcopy_internal	base/Base.jl	/^function deepcopy_internal end$/;"	f
deepcopy_internal	base/deepcopy.jl	/^deepcopy_internal(x::Module, stackdict::IdDict) = error("deepcopy of Modules not supported")$/;"	f
deepcopy_internal	base/deepcopy.jl	/^deepcopy_internal(x::Tuple, stackdict::IdDict) =$/;"	f
deepcopy_internal	base/deepcopy.jl	/^function deepcopy_internal(@nospecialize(x), stackdict::IdDict)$/;"	f
deepcopy_internal	base/deepcopy.jl	/^function deepcopy_internal(x::Array, stackdict::IdDict)$/;"	f
deepcopy_internal	base/deepcopy.jl	/^function deepcopy_internal(x::SimpleVector, stackdict::IdDict)$/;"	f
deepcopy_internal	base/deepcopy.jl	/^function deepcopy_internal(x::String, stackdict::IdDict)$/;"	f
deepcopy_internal	base/deepcopy.jl	/^function deepcopy_internal(x::Union{Dict,IdDict}, stackdict::IdDict)$/;"	f
deepcopy_internal	stdlib/SharedArrays/src/SharedArrays.jl	/^function deepcopy_internal(S::SharedArray, stackdict::IdDict)$/;"	f
def	src/julia.h	/^    jl_method_instance_t *def; \/\/ method this is specialized from$/;"	m	struct:_jl_code_instance_t	typeref:typename:JL_DATA_TYPE jl_method_instance_t *
def	src/julia.h	/^    } def; \/\/ pointer back to the context for this code$/;"	m	struct:_jl_method_instance_t	typeref:union:_jl_method_instance_t::__anon055fe427070a
defFlag	src/codegen.cpp	/^    Value *defFlag;$/;"	m	struct:jl_varinfo_t	typeref:typename:Value *	file:
def_count_conn	stdlib/Distributed/test/topology.jl	/^function def_count_conn()$/;"	f
def_rv_channel	stdlib/Distributed/src/process_messages.jl	/^def_rv_channel() = Channel(1)$/;"	f
defalg	base/sort.jl	/^defalg(v::AbstractArray) = DEFAULT_STABLE$/;"	f
defalg	base/sort.jl	/^defalg(v::AbstractArray{<:Union{Number, Missing}}) = DEFAULT_UNSTABLE$/;"	f
default	Makefile	/^default: $(JULIA_BUILD_MODE) # contains either "debug" or "release"$/;"	t
default	contrib/mac/framework/Makefile	/^default: framework$/;"	t
default	contrib/mac/frameworkapp/Makefile	/^default: productarchive$/;"	t
default	deps/Makefile	/^default: install$/;"	t
default	deps/Makefile	/^default: | $(build_prefix)$/;"	t
default	doc/Makefile	/^default: html$/;"	t
default	src/Makefile	/^default: $(JULIA_BUILD_MODE) # contains either "debug" or "release"$/;"	t
default	src/flisp/Makefile	/^default: release$/;"	t
default	src/support/Makefile	/^default: release$/;"	t
default	stdlib/Dates/src/periods.jl	/^default(p::Union{T,Type{T}}) where {T<:DatePeriod} = T(1)$/;"	f
default	stdlib/Dates/src/periods.jl	/^default(p::Union{T,Type{T}}) where {T<:TimePeriod} = T(0)$/;"	f
default	stdlib/Dates/src/periods.jl	/^function default end$/;"	f
default	stdlib/Makefile	/^default: install$/;"	t
default	sysimage.mk	/^default: sysimg-$(JULIA_BUILD_MODE) # contains either "debug" or "release"$/;"	t
default	test/Makefile	/^default: all$/;"	t
default	ui/Makefile	/^default: release$/;"	t
default-ignorable-char?	src/julia-parser.scm	/^(define (default-ignorable-char? c)$/;"	f
default-inner-ctors	src/julia-syntax.scm	/^(define (default-inner-ctors name field-names field-types params bounds locs)$/;"	f
default-outer-ctor	src/julia-syntax.scm	/^(define (default-outer-ctor name field-names field-types params bounds locs)$/;"	f
default_addprocs_params	stdlib/Distributed/src/cluster.jl	/^default_addprocs_params() = AnyDict($/;"	f
default_align	stdlib/Markdown/src/GitHub/table.jl	/^const default_align = :r$/;"	v
default_collect_interval	src/gc.c	/^#define default_collect_interval /;"	d	file:
default_color_answer	base/client.jl	/^default_color_answer = :normal$/;"	v
default_color_debug	base/client.jl	/^default_color_debug = :blue$/;"	v
default_color_error	base/client.jl	/^default_color_error = :light_red$/;"	v
default_color_info	base/client.jl	/^default_color_info = :cyan$/;"	v
default_color_input	base/client.jl	/^default_color_input = :normal$/;"	v
default_color_warn	base/client.jl	/^default_color_warn = :yellow$/;"	v
default_completion_cb	stdlib/REPL/src/LineEdit.jl	/^default_completion_cb(::IOBuffer) = []$/;"	f
default_debug_info_kind	base/reflection.jl	/^default_debug_info_kind() = unsafe_load(cglobal(:jl_default_debug_info_kind, Cint))$/;"	f
default_eltype	base/array.jl	/^    macro default_eltype(itr)$/;"	f
default_enter_cb	stdlib/REPL/src/LineEdit.jl	/^default_enter_cb(_) = true$/;"	f
default_expr_type_printer	base/compiler/ssair/show.jl	/^function default_expr_type_printer(io::IO, @nospecialize(typ), used::Bool)$/;"	f
default_format	stdlib/Dates/src/io.jl	/^default_format(::Type{DateTime}) = ISODateTimeFormat$/;"	f
default_format	stdlib/Dates/src/io.jl	/^default_format(::Type{Date}) = ISODateFormat$/;"	f
default_format	stdlib/Dates/src/io.jl	/^default_format(::Type{Time}) = ISOTimeFormat$/;"	f
default_keymap	stdlib/REPL/src/LineEdit.jl	/^const default_keymap =$/;"	v
default_keymap_dict	stdlib/REPL/src/LineEdit.jl	/^const default_keymap_dict = keymap([default_keymap, escape_defaults])$/;"	v
default_logcolor	stdlib/Logging/src/ConsoleLogger.jl	/^function default_logcolor(level)$/;"	f
default_metafmt	stdlib/Logging/src/ConsoleLogger.jl	/^function default_metafmt(level, _module, group, id, file, line)$/;"	f
default_methodloc	base/methodshow.jl	/^default_methodloc(method::Method) = method.file, method.line$/;"	f
default_rng	stdlib/Random/src/RNGs.jl	/^@inline default_rng() = default_rng(Threads.threadid())$/;"	f
default_rng	stdlib/Random/src/RNGs.jl	/^@noinline function default_rng(tid::Int)$/;"	f
default_signature	stdlib/LibGit2/src/signature.jl	/^function default_signature(repo::GitRepo)$/;"	f
default_svd_alg	stdlib/LinearAlgebra/src/svd.jl	/^default_svd_alg(A) = DivideAndConquer()$/;"	f
default_username	stdlib/LibGit2/src/gitcredential.jl	/^function default_username(cfg::GitConfig, cred::GitCredential)$/;"	f
default_worker_pool	stdlib/Distributed/src/workerpool.jl	/^function default_worker_pool()$/;"	f
defaultport	stdlib/Sockets/test/runtests.jl	/^defaultport = rand(2000:4000)$/;"	v
defaults	stdlib/SuiteSparse/src/cholmod.jl	/^function defaults(a::Vector{UInt8})$/;"	f
defer_signal	src/julia.h	/^    sig_atomic_t defer_signal;$/;"	m	struct:_jl_handler_t	typeref:typename:sig_atomic_t
defer_signal	src/julia_threads.h	/^    volatile sig_atomic_t defer_signal;$/;"	m	struct:_jl_tls_states_t	typeref:typename:volatile sig_atomic_t
deferred_alloc	src/gc.h	/^    int64_t     deferred_alloc;$/;"	m	struct:__anoncf30557c0308	typeref:typename:int64_t
define_opaque_type	src/flisp/types.c	/^fltype_t *define_opaque_type(value_t sym, size_t sz, const cvtable_t *vtab,$/;"	f	typeref:typename:fltype_t *
defined	base/docs/bindings.jl	/^defined(b::Binding) = isdefined(b.mod, b.var)$/;"	f
definesym	src/flisp/flisp.h	/^    value_t definesym, defmacrosym, forsym, setqsym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
definitely-initialized-vars	src/julia-syntax.scm	/^(define (definitely-initialized-vars stmts vi)$/;"	f
definitely_not_in_sysimg	test/reflection.jl	/^definitely_not_in_sysimg() = nothing$/;"	f
defmacrosym	src/flisp/flisp.h	/^    value_t definesym, defmacrosym, forsym, setqsym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
defs	src/gf.c	/^    jl_typemap_t *defs;$/;"	m	struct:ambiguous_matches_env	typeref:typename:jl_typemap_t *	file:
defs	src/julia.h	/^    jl_typemap_t *defs;$/;"	m	struct:_jl_methtable_t	typeref:typename:jl_typemap_t *
deg2rad	base/math.jl	/^deg2rad(z::AbstractFloat) = z * (oftype(z, pi) \/ 180)$/;"	f
deg2rad	base/math.jl	/^deg2rad(z::Number) = (z*pi)\/180$/;"	f
deg2rad	base/math.jl	/^deg2rad(z::Real) = deg2rad(float(z))$/;"	f
deg2rad_ext	base/special/trig.jl	/^deg2rad_ext(x::Float32) = DoubleFloat32(deg2rad(Float64(x)))$/;"	f
deg2rad_ext	base/special/trig.jl	/^deg2rad_ext(x::Real) = deg2rad(x) # Fallback$/;"	f
deg2rad_ext	base/special/trig.jl	/^function deg2rad_ext(x::Float64)$/;"	f
degree	stdlib/Random/src/DSFMT.jl	/^degree(f::GF2X) = Base.ndigits0z(f.z, 2) - 1$/;"	f
del_client	stdlib/Distributed/src/remotecall.jl	/^del_client(id, client) = del_client(PGRP, id, client)$/;"	f
del_client	stdlib/Distributed/src/remotecall.jl	/^del_client(rr::AbstractRemoteRef) = del_client(remoteref_id(rr), myid())$/;"	f
del_client	stdlib/Distributed/src/remotecall.jl	/^function del_client(pg, id, client)$/;"	f
del_clients	stdlib/Distributed/src/remotecall.jl	/^function del_clients(pairs::Vector)$/;"	f
delete!	base/abstractdict.jl	/^delete!(s::IdSet, @nospecialize(x)) = (delete!(s.dict, x); s)$/;"	f
delete!	base/abstractdict.jl	/^function delete!(d::IdDict{K}, @nospecialize(key)) where K$/;"	f
delete!	base/bitset.jl	/^@inline delete!(s::BitSet, n::Int) = _setint!(s, n, false)$/;"	f
delete!	base/bitset.jl	/^@inline delete!(s::BitSet, n::Integer) = _is_convertible_Int(n) ? delete!(s, Int(n)) : s$/;"	f
delete!	base/dict.jl	/^function delete!(h::Dict, key)$/;"	f
delete!	base/env.jl	/^delete!(::EnvDict, k::AbstractString) = (_unsetenv(k); ENV)$/;"	f
delete!	base/set.jl	/^delete!(s::Set, x) = (delete!(s.dict, x); s)$/;"	f
delete!	base/weakkeydict.jl	/^delete!(wkh::WeakKeyDict, key) = lock(() -> delete!(wkh.ht, key), wkh)$/;"	f
delete_branch	stdlib/LibGit2/src/reference.jl	/^function delete_branch(branch::GitReference)$/;"	f
delete_method	base/reflection.jl	/^function delete_method(m::Method)$/;"	f
deleteat!	base/array.jl	/^deleteat!(a::Vector, i::Integer) = (_deleteat!(a, i, 1); a)$/;"	f
deleteat!	base/array.jl	/^deleteat!(a::Vector, inds) = _deleteat!(a, inds)$/;"	f
deleteat!	base/array.jl	/^deleteat!(a::Vector, inds::AbstractVector) = _deleteat!(a, to_indices(a, (inds,))[1])$/;"	f
deleteat!	base/array.jl	/^function deleteat!(a::Vector, inds::AbstractVector{Bool})$/;"	f
deleteat!	base/array.jl	/^function deleteat!(a::Vector, r::UnitRange{<:Integer})$/;"	f
deleteat!	base/bitarray.jl	/^function deleteat!(B::BitVector, i::Integer)$/;"	f
deleteat!	base/bitarray.jl	/^function deleteat!(B::BitVector, inds)$/;"	f
deleteat!	base/bitarray.jl	/^function deleteat!(B::BitVector, r::UnitRange{Int})$/;"	f
deleted_world	src/julia.h	/^    size_t deleted_world;$/;"	m	struct:_jl_method_t	typeref:typename:size_t
deletesym	src/flisp/flisp.h	/^    value_t vtabsym, pagesym, returnsym, escsym, spacesym, deletesym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
deletions	stdlib/LibGit2/src/diff.jl	/^function deletions(diff_stat::GitDiffStats)$/;"	f
delim	src/support/strptime.c	/^#define delim(/;"	d	file:
deliver_result	stdlib/Distributed/src/process_messages.jl	/^function deliver_result(sock::IO, msg, oid, value)$/;"	f
denominator	base/rational.jl	/^denominator(x::Integer) = one(x)$/;"	f
denominator	base/rational.jl	/^denominator(x::Rational) = x.den$/;"	f
dense_to_sparse	stdlib/SuiteSparse/src/cholmod.jl	/^function dense_to_sparse(D::Dense{Tv}, ::Type{SuiteSparse_long}) where Tv<:VTypes$/;"	f
densemv	stdlib/SparseArrays/src/sparsevector.jl	/^function densemv(A::AbstractSparseMatrixCSC, x::AbstractSparseVector; trans::AbstractChar='N')$/;"	f
dep	src/processor.cpp	/^    uint32_t dep;$/;"	m	struct:__anon839834ed0111::FeatureDep	typeref:typename:uint32_t	file:
dep_message_prefix	src/module.c	/^char dep_message_prefix[] = "_dep_message_";$/;"	v	typeref:typename:char[]
deparse	src/ast.scm	/^(define (deparse e (ilvl 0))$/;"	f
deparse-arglist	src/ast.scm	/^(define (deparse-arglist l (sep ", "))$/;"	f
deparse-block	src/ast.scm	/^(define (deparse-block head lst ilvl)$/;"	f
deparse-colon-dot	src/ast.scm	/^(define (deparse-colon-dot e)$/;"	f
deparse-flatten	src/ast.scm	/^(define (deparse-flatten e iters (flat #t))$/;"	f
deparse-generator	src/ast.scm	/^(define (deparse-generator e)$/;"	f
deparse-prefix-call	src/ast.scm	/^(define (deparse-prefix-call head args opn cls)$/;"	f
depcomp	deps/srccache/patchelf-0.9/src/Makefile.in	/^depcomp = $(SHELL) $(top_srcdir)\/build-aux\/depcomp$/;"	m
depcomp	deps/srccache/patchelf-0.9/tests/Makefile.in	/^depcomp = $(SHELL) $(top_srcdir)\/build-aux\/depcomp$/;"	m
deploy	doc/Makefile	/^deploy: deps$/;"	t
depots	test/loading.jl	/^const depots = [mktempdir() for _ = 1:3]$/;"	v
deprecate	base/deprecated.jl	/^deprecate(m::Module, s::Symbol, flag=1) = ccall(:jl_deprecate_binding, Cvoid, (Any, Any, Cint), /;"	f
deprecate	base/deprecated.jl	/^macro deprecate(old, new, ex=true)$/;"	f
deprecate_binding	base/deprecated.jl	/^macro deprecate_binding(old, new, export_old=true, dep_message=:nothing, constant=true)$/;"	f
deprecate_moved	base/deprecated.jl	/^macro deprecate_moved(old, new, export_old=true)$/;"	f
deprecate_stdlib	base/deprecated.jl	/^macro deprecate_stdlib(old, mod, export_old=true, newname=old)$/;"	f
deprecated	src/julia.h	/^    uint8_t deprecated:2; \/\/ 0=not deprecated, 1=renamed, 2=moved to another package$/;"	m	struct:__anon055fe4271108	typeref:typename:uint8_t:2
deprecation-message	src/jlfrontend.scm	/^(define (deprecation-message msg lno)$/;"	f
deps	doc/Makefile	/^deps: $(SRCCACHE)\/UnicodeData.txt$/;"	t
deps	src/processor_arm.cpp	/^static constexpr FeatureDep deps[] = {$/;"	v	namespace:ARM::Feature	typeref:typename:FeatureDep[]	file:
deps	src/processor_x86.cpp	/^static constexpr FeatureDep deps[] = {$/;"	v	namespace:X86::Feature	typeref:typename:FeatureDep[]	file:
depth	src/subtype.c	/^    int depth;$/;"	m	struct:__anon0f0258f90108	typeref:typename:int	file:
depth0	src/subtype.c	/^    int depth0;         \/\/ # of invariant constructors nested around the UnionAll type for thi/;"	m	struct:jl_varbinding_t	typeref:typename:int	file:
depwarn	base/deprecated.jl	/^function depwarn(msg, funcsym)$/;"	f
depwarn	src/julia.h	/^    int8_t depwarn;$/;"	m	struct:__anon055fe4271808	typeref:typename:int8_t
depwarn24658	test/deprecation_exec.jl	/^depwarn24658() = Base.firstcaller(backtrace(), :_func_not_found_)$/;"	f
dereferenceable_size	src/cgutils.cpp	/^static size_t dereferenceable_size(jl_value_t *jt)$/;"	f	typeref:typename:size_t	file:
deregister_eh_frames	src/debuginfo.cpp	/^void deregister_eh_frames(uint8_t *Addr, size_t Size)$/;"	f	typeref:typename:void
deregister_worker	stdlib/Distributed/src/cluster.jl	/^deregister_worker(pid) = deregister_worker(PGRP, pid)$/;"	f
deregister_worker	stdlib/Distributed/src/cluster.jl	/^function deregister_worker(pg, pid)$/;"	f
describe_hash	stdlib/SHA/test/runtests.jl	/^function describe_hash(T::Type{S}) where {S <: SHA.SHA_CTX}$/;"	f
deser_sym	src/staticdata.c	/^static arraylist_t deser_sym;$/;"	v	typeref:typename:arraylist_t	file:
deser_symbols	src/dump.c	/^static jl_value_t *deser_symbols[256];$/;"	v	typeref:typename:jl_value_t * [256]	file:
deser_tag	src/dump.c	/^static jl_value_t *deser_tag[256];$/;"	v	typeref:typename:jl_value_t * [256]	file:
deserialize	stdlib/Distributed/src/clusterserialize.jl	/^function deserialize(s::ClusterSerializer, ::Type{Core.TypeName})$/;"	f
deserialize	stdlib/Distributed/src/clusterserialize.jl	/^function deserialize(s::ClusterSerializer, t::Type{<:CapturedException})$/;"	f
deserialize	stdlib/Distributed/src/remotecall.jl	/^function deserialize(s::ClusterSerializer, t::Type{<:Future})$/;"	f
deserialize	stdlib/Distributed/src/remotecall.jl	/^function deserialize(s::ClusterSerializer, t::Type{<:RemoteChannel})$/;"	f
deserialize	stdlib/Distributed/src/workerpool.jl	/^deserialize(S::AbstractSerializer, t::Type{T}) where {T<:WorkerPool} = T(deserialize(S))$/;"	f
deserialize	stdlib/Random/src/RNGs.jl	/^    function deserialize(s::AbstractSerializer, t::Type{RandomDevice})$/;"	f
deserialize	stdlib/Serialization/src/Serialization.jl	/^deserialize(filename::AbstractString) = open(deserialize, filename)$/;"	f
deserialize	stdlib/Serialization/src/Serialization.jl	/^deserialize(s::AbstractSerializer, ::Type{BigInt}) = parse(BigInt, deserialize(s), base = 62)$/;"	f
deserialize	stdlib/Serialization/src/Serialization.jl	/^deserialize(s::IO) = deserialize(Serializer(s))$/;"	f
deserialize	stdlib/Serialization/src/Serialization.jl	/^function deserialize(s::AbstractSerializer)$/;"	f
deserialize	stdlib/Serialization/src/Serialization.jl	/^function deserialize(s::AbstractSerializer, ::Type{Base.StackTraces.StackFrame})$/;"	f
deserialize	stdlib/Serialization/src/Serialization.jl	/^function deserialize(s::AbstractSerializer, ::Type{CodeInfo})$/;"	f
deserialize	stdlib/Serialization/src/Serialization.jl	/^function deserialize(s::AbstractSerializer, ::Type{Core.LineInfoNode})$/;"	f
deserialize	stdlib/Serialization/src/Serialization.jl	/^function deserialize(s::AbstractSerializer, ::Type{Core.MethodInstance})$/;"	f
deserialize	stdlib/Serialization/src/Serialization.jl	/^function deserialize(s::AbstractSerializer, ::Type{Core.TypeName})$/;"	f
deserialize	stdlib/Serialization/src/Serialization.jl	/^function deserialize(s::AbstractSerializer, ::Type{Method})$/;"	f
deserialize	stdlib/Serialization/src/Serialization.jl	/^function deserialize(s::AbstractSerializer, ::Type{Task})$/;"	f
deserialize	stdlib/Serialization/src/Serialization.jl	/^function deserialize(s::AbstractSerializer, ::Type{UnionAll})$/;"	f
deserialize	stdlib/Serialization/src/Serialization.jl	/^function deserialize(s::AbstractSerializer, T::Type{Dict{K,V}}) where {K,V}$/;"	f
deserialize	stdlib/Serialization/src/Serialization.jl	/^function deserialize(s::AbstractSerializer, t::DataType)$/;"	f
deserialize	stdlib/Serialization/src/Serialization.jl	/^function deserialize(s::AbstractSerializer, t::Type{Regex})$/;"	f
deserialize	stdlib/SharedArrays/src/SharedArrays.jl	/^function deserialize(s::AbstractSerializer, t::Type{<:SharedArray})$/;"	f
deserialize	stdlib/SuiteSparse/src/umfpack.jl	/^function deserialize(s::AbstractSerializer, t::Type{UmfpackLU{Tv,Ti}}) where {Tv,Ti}$/;"	f
deserialize_array	stdlib/Serialization/src/Serialization.jl	/^function deserialize_array(s::AbstractSerializer)$/;"	f
deserialize_cycle	stdlib/Serialization/src/Serialization.jl	/^function deserialize_cycle(s::AbstractSerializer, @nospecialize(x))$/;"	f
deserialize_datatype	stdlib/Serialization/src/Serialization.jl	/^function deserialize_datatype(s::AbstractSerializer, full::Bool)$/;"	f
deserialize_expr	stdlib/Serialization/src/Serialization.jl	/^function deserialize_expr(s::AbstractSerializer, len)$/;"	f
deserialize_fillarray!	stdlib/Serialization/src/Serialization.jl	/^function deserialize_fillarray!(A::Array{T}, s::AbstractSerializer) where {T}$/;"	f
deserialize_global_from_main	stdlib/Distributed/src/clusterserialize.jl	/^function deserialize_global_from_main(s::ClusterSerializer, sym)$/;"	f
deserialize_hdr_raw	stdlib/Distributed/src/messages.jl	/^function deserialize_hdr_raw(io)$/;"	f
deserialize_module	stdlib/Serialization/src/Serialization.jl	/^function deserialize_module(s::AbstractSerializer)$/;"	f
deserialize_msg	stdlib/Distributed/src/messages.jl	/^    @eval function deserialize_msg(s::AbstractSerializer)$/;"	f
deserialize_string	stdlib/Serialization/src/Serialization.jl	/^function deserialize_string(s::AbstractSerializer, len::Int)$/;"	f
deserialize_svec	stdlib/Serialization/src/Serialization.jl	/^function deserialize_svec(s::AbstractSerializer)$/;"	f
deserialize_symbol	stdlib/Serialization/src/Serialization.jl	/^function deserialize_symbol(s::AbstractSerializer, len::Int)$/;"	f
deserialize_target_data	src/processor.cpp	/^static inline std::vector<TargetData<n>> deserialize_target_data(const uint8_t *data)$/;"	f	namespace:__anon839834ed0111	typeref:typename:std::vector<TargetData<n>>	file:
deserialize_tuple	stdlib/Serialization/src/Serialization.jl	/^deserialize_tuple(s::AbstractSerializer, len) = ntuple(i->deserialize(s), len)$/;"	f
deserialize_typename	stdlib/Serialization/src/Serialization.jl	/^function deserialize_typename(s::AbstractSerializer, number)$/;"	f
desertag	stdlib/Serialization/src/Serialization.jl	/^desertag(i::Int32) = @inbounds(TAGS[i])$/;"	f
deserves_sret	src/cgutils.cpp	/^static bool deserves_sret(jl_value_t *dt, Type *T)$/;"	f	typeref:typename:bool	file:
desktopCheckbox	contrib/windows/build-installer.nsi	/^Function desktopCheckbox$/;"	f
dest	test/offsetarray.jl	/^dest = OffsetArray(Matrix{Int}(undef, 4,4), (-1,1))$/;"	v
dest	test/offsetarray.jl	/^dest = similar(am)$/;"	v
destModule	src/ccall.cpp	/^    llvm::Module *destModule;$/;"	m	class:FunctionMover	typeref:typename:llvm::Module *	file:
det	stdlib/LinearAlgebra/src/cholesky.jl	/^function det(C::Cholesky)$/;"	f
det	stdlib/LinearAlgebra/src/cholesky.jl	/^function det(C::CholeskyPivoted)$/;"	f
det	stdlib/LinearAlgebra/src/diagonal.jl	/^det(D::Diagonal) = prod(det, D.diag)$/;"	f
det	stdlib/LinearAlgebra/src/eigen.jl	/^det(A::Eigen) = prod(A.values)$/;"	f
det	stdlib/LinearAlgebra/src/factorization.jl	/^function det(F::Factorization)$/;"	f
det	stdlib/LinearAlgebra/src/generic.jl	/^det(x::Number) = x$/;"	f
det	stdlib/LinearAlgebra/src/generic.jl	/^function det(A::AbstractMatrix{T}) where T$/;"	f
det	stdlib/LinearAlgebra/src/hessenberg.jl	/^det(F::Hessenberg) = det(F.H; shift=F.μ)$/;"	f
det	stdlib/LinearAlgebra/src/hessenberg.jl	/^function det(F::UpperHessenberg; shift::Number=false)$/;"	f
det	stdlib/LinearAlgebra/src/lq.jl	/^det(Q::LQPackedQ) = conj(_det_tau(Q.τ))$/;"	f
det	stdlib/LinearAlgebra/src/lu.jl	/^function det(F::LU{T}) where T$/;"	f
det	stdlib/LinearAlgebra/src/qr.jl	/^det(Q::QRCompactWYQ) =$/;"	f
det	stdlib/LinearAlgebra/src/qr.jl	/^det(Q::QRPackedQ) = _det_tau(Q.τ)$/;"	f
det	stdlib/LinearAlgebra/src/symmetric.jl	/^det(A::RealHermSymComplexHerm) = real(det(factorize(A)))$/;"	f
det	stdlib/LinearAlgebra/src/symmetric.jl	/^det(A::Symmetric) = det(factorize(A))$/;"	f
det	stdlib/LinearAlgebra/src/symmetric.jl	/^det(A::Symmetric{<:Real}) = det(factorize(A))$/;"	f
det	stdlib/LinearAlgebra/src/triangular.jl	/^det(A::LowerTriangular) = prod(diag(A.data))$/;"	f
det	stdlib/LinearAlgebra/src/triangular.jl	/^det(A::UnitLowerTriangular{T}) where {T} = one(T)$/;"	f
det	stdlib/LinearAlgebra/src/triangular.jl	/^det(A::UnitUpperTriangular{T}) where {T} = one(T)$/;"	f
det	stdlib/LinearAlgebra/src/triangular.jl	/^det(A::UpperTriangular) = prod(diag(A.data))$/;"	f
det	stdlib/LinearAlgebra/src/tridiag.jl	/^det(A::SymTridiagonal; shift::Number=false) = det_usmani(A.ev, A.dv, A.ev, shift)$/;"	f
det	stdlib/LinearAlgebra/src/tridiag.jl	/^det(A::Tridiagonal) = det_usmani(A.dl, A.d, A.du)$/;"	f
det	stdlib/LinearAlgebra/src/uniformscaling.jl	/^function det(J::UniformScaling{T}) where T$/;"	f
det	stdlib/SuiteSparse/src/cholmod.jl	/^det(L::Factor) = exp(logdet(L))$/;"	f
det	stdlib/SuiteSparse/src/umfpack.jl	/^        function det(lu::UmfpackLU{ComplexF64,$itype})$/;"	f
det	stdlib/SuiteSparse/src/umfpack.jl	/^        function det(lu::UmfpackLU{Float64,$itype})$/;"	f
det_usmani	stdlib/LinearAlgebra/src/tridiag.jl	/^function det_usmani(a::V, b::V, c::V, shift::Number=0) where {T,V<:AbstractVector{T}}$/;"	f
detach	base/cmd.jl	/^detach(cmd::Cmd) = Cmd(cmd; detach=true)$/;"	f
detect_ambiguities	stdlib/Test/src/Test.jl	/^function detect_ambiguities(mods...;$/;"	f
detect_unbound_args	stdlib/Test/src/Test.jl	/^function detect_unbound_args(mods...;$/;"	f
devnull	base/coreio.jl	/^const devnull = DevNull()$/;"	v
diag	stdlib/LinearAlgebra/src/bidiag.jl	/^function diag(M::Bidiagonal, n::Integer=0)$/;"	f
diag	stdlib/LinearAlgebra/src/bitarray.jl	/^function diag(B::BitMatrix)$/;"	f
diag	stdlib/LinearAlgebra/src/dense.jl	/^diag(A::AbstractMatrix, k::Integer=0) = A[diagind(A,k)]$/;"	f
diag	stdlib/LinearAlgebra/src/diagonal.jl	/^function diag(D::Diagonal, k::Integer=0)$/;"	f
diag	stdlib/LinearAlgebra/src/generic.jl	/^diag(A::AbstractVector) = throw(ArgumentError("use diagm instead of diag to construct a diagonal/;"	f
diag	stdlib/LinearAlgebra/src/triangular.jl	/^diag(A::LowerTriangular) = diag(A.data)$/;"	f
diag	stdlib/LinearAlgebra/src/triangular.jl	/^diag(A::UnitLowerTriangular) = fill(one(eltype(A)), size(A,1))$/;"	f
diag	stdlib/LinearAlgebra/src/triangular.jl	/^diag(A::UnitUpperTriangular) = fill(one(eltype(A)), size(A,1))$/;"	f
diag	stdlib/LinearAlgebra/src/triangular.jl	/^diag(A::UpperTriangular) = diag(A.data)$/;"	f
diag	stdlib/LinearAlgebra/src/tridiag.jl	/^function diag(M::SymTridiagonal, n::Integer=0)$/;"	f
diag	stdlib/LinearAlgebra/src/tridiag.jl	/^function diag(M::Tridiagonal{T}, n::Integer=0) where T$/;"	f
diag	stdlib/SparseArrays/src/sparsematrix.jl	/^function diag(A::AbstractSparseMatrixCSC{Tv,Ti}, d::Integer=0) where {Tv,Ti}$/;"	f
diag	stdlib/SuiteSparse/src/cholmod.jl	/^function diag(F::Factor{Tv}) where Tv$/;"	f
diagind	stdlib/LinearAlgebra/src/dense.jl	/^diagind(m::Integer, n::Integer, k::Integer=0) =$/;"	f
diagind	stdlib/LinearAlgebra/src/dense.jl	/^function diagind(A::AbstractMatrix, k::Integer=0)$/;"	f
diagm	stdlib/LinearAlgebra/src/dense.jl	/^diagm(kv::Pair{<:Integer,<:AbstractVector}...) = _diagm(nothing, kv...)$/;"	f
diagm	stdlib/LinearAlgebra/src/dense.jl	/^diagm(m::Integer, n::Integer, kv::Pair{<:Integer,<:AbstractVector}...) = _diagm((Int(m),Int(n)),/;"	f
diagm	stdlib/LinearAlgebra/src/dense.jl	/^diagm(m::Integer, n::Integer, v::AbstractVector) = diagm(m, n, 0 => v)$/;"	f
diagm	stdlib/LinearAlgebra/src/dense.jl	/^diagm(v::AbstractVector) = diagm(0 => v)$/;"	f
diagm_container	stdlib/LinearAlgebra/src/dense.jl	/^diagm_container(size, kv::Pair{<:Integer,<:BitVector}...) =$/;"	f
diagm_container	stdlib/LinearAlgebra/src/dense.jl	/^function diagm_container(size, kv::Pair{<:Integer,<:AbstractVector}...)$/;"	f
diagm_size	stdlib/LinearAlgebra/src/dense.jl	/^function diagm_size(size::Nothing, kv::Pair{<:Integer,<:AbstractVector}...)$/;"	f
diagm_size	stdlib/LinearAlgebra/src/dense.jl	/^function diagm_size(size::Tuple{Int,Int}, kv::Pair{<:Integer,<:AbstractVector}...)$/;"	f
diagzero	stdlib/LinearAlgebra/src/diagonal.jl	/^diagzero(::Diagonal{T},i,j) where {T} = zero(T)$/;"	f
diagzero	stdlib/LinearAlgebra/src/diagonal.jl	/^diagzero(D::Diagonal{Matrix{T}},i,j) where {T} = zeros(T, size(D.diag[i], 1), size(D.diag[j], 2)/;"	f
dict_identifier_key	stdlib/REPL/src/REPLCompletions.jl	/^function dict_identifier_key(str,tag)$/;"	f
dict_with_eltype	base/abstractdict.jl	/^dict_with_eltype(DT_apply, ::Type) = DT_apply(Any, Any)()$/;"	f
dict_with_eltype	base/abstractdict.jl	/^dict_with_eltype(DT_apply, ::Type{Pair{K,V}}) where {K,V} = DT_apply(K, V)()$/;"	f
dict_with_eltype	base/abstractdict.jl	/^dict_with_eltype(DT_apply, kv, ::TP{K,V}) where {K,V} = DT_apply(K, V)(kv)$/;"	f
dict_with_eltype	base/abstractdict.jl	/^dict_with_eltype(DT_apply, kv::Generator, ::TP{K,V}) where {K,V} = DT_apply(K, V)(kv)$/;"	f
dict_with_eltype	base/abstractdict.jl	/^dict_with_eltype(DT_apply::F, kv, t) where {F} = grow_to!(dict_with_eltype(DT_apply, @default_el/;"	f
dict_with_eltype	base/abstractdict.jl	/^function dict_with_eltype(DT_apply::F, kv::Generator, t) where F$/;"	f
didtrace	test/reflection.jl	/^didtrace = false$/;"	v
diff	base/multidimensional.jl	/^diff(a::AbstractVector) = diff(a, dims=1)$/;"	f
diff	base/multidimensional.jl	/^function diff(a::AbstractArray{T,N}; dims::Integer) where {T,N}$/;"	f
diff	src/utils.scm	/^(define (diff s1 s2)$/;"	f
diff	stdlib/SparseArrays/src/linalg.jl	/^diff(a::AbstractSparseMatrixCSC; dims::Integer) = dims==1 ? sparse_diff1(a) : sparse_diff2(a)$/;"	f
diff_files	stdlib/LibGit2/src/LibGit2.jl	/^function diff_files(repo::GitRepo, branch1::AbstractString, branch2::AbstractString;$/;"	f
diff_gc_total_bytes_func	src/codegen.cpp	/^static Function *diff_gc_total_bytes_func;$/;"	v	typeref:typename:Function *	file:
diff_names	base/namedtuple.jl	/^@pure function diff_names(an::Tuple{Vararg{Symbol}}, bn::Tuple{Vararg{Symbol}})$/;"	f
diff_tree	stdlib/LibGit2/src/diff.jl	/^function diff_tree(repo::GitRepo, oldtree::GitTree, newtree::GitTree)$/;"	f
diff_tree	stdlib/LibGit2/src/diff.jl	/^function diff_tree(repo::GitRepo, tree::GitTree, pathspecs::AbstractString=""; cached::Bool=fals/;"	f
diffrange	base/broadcast.jl	/^    diffrange(offset, rng) = range(offset-last(rng), length=length(rng))$/;"	f
digest!	stdlib/SHA/src/common.jl	/^function digest!(context::T) where T<:SHA_CTX$/;"	f
digest!	stdlib/SHA/src/hmac.jl	/^function digest!(ctx::HMAC_CTX{CTX}) where CTX$/;"	f
digest!	stdlib/SHA/src/sha3.jl	/^function digest!(context::T) where {T<:SHA3_CTX}$/;"	f
digestlen	stdlib/SHA/src/types.jl	/^digestlen(::Type{SHA1_CTX}) = 20$/;"	f
digestlen	stdlib/SHA/src/types.jl	/^digestlen(::Type{SHA2_224_CTX}) = 28$/;"	f
digestlen	stdlib/SHA/src/types.jl	/^digestlen(::Type{SHA2_256_CTX}) = 32$/;"	f
digestlen	stdlib/SHA/src/types.jl	/^digestlen(::Type{SHA2_384_CTX}) = 48$/;"	f
digestlen	stdlib/SHA/src/types.jl	/^digestlen(::Type{SHA2_512_CTX}) = 64$/;"	f
digestlen	stdlib/SHA/src/types.jl	/^digestlen(::Type{SHA3_224_CTX}) = 28$/;"	f
digestlen	stdlib/SHA/src/types.jl	/^digestlen(::Type{SHA3_256_CTX}) = 32$/;"	f
digestlen	stdlib/SHA/src/types.jl	/^digestlen(::Type{SHA3_384_CTX}) = 48$/;"	f
digestlen	stdlib/SHA/src/types.jl	/^digestlen(::Type{SHA3_512_CTX}) = 64$/;"	f
digitgen	base/grisu/fastprecision.jl	/^function digitgen(w,buffer,requested_digits=1000)$/;"	f
digitgen	base/grisu/fastshortest.jl	/^function digitgen(low,w,high,buffer)$/;"	f
digits	base/intfuncs.jl	/^digits(n::Integer; base::Integer = 10, pad::Integer = 1) =$/;"	f
digits	base/intfuncs.jl	/^function digits(T::Type{<:Integer}, n::Integer; base::Integer = 10, pad::Integer = 1)$/;"	f
digits!	base/intfuncs.jl	/^function digits!(a::AbstractVector{T}, n::Integer; base::Integer = 10) where T<:Integer$/;"	f
dim_break_linindex	test/subarray.jl	/^function dim_break_linindex(I)$/;"	f
dimg	stdlib/LinearAlgebra/test/lu.jl	/^dimg  = randn(n)\/2$/;"	v
dimlength	base/multidimensional.jl	/^    dimlength(start, stop) = stop-start+1$/;"	f
dimlub	stdlib/SparseArrays/src/sparsematrix.jl	/^dimlub(I) = isempty(I) ? 0 : Int(maximum(I)) #least upper bound on required sparse matrix dimens/;"	f
dims	stdlib/SharedArrays/test/runtests.jl	/^dims = (20,20,20)$/;"	v
dims2cat	base/abstractarray.jl	/^function dims2cat(::Val{n}) where {n}$/;"	f
dims2cat	base/abstractarray.jl	/^function dims2cat(dims)$/;"	f
dims2string	base/show.jl	/^dims2string(d) = isempty(d) ? "0-dimensional" :$/;"	f
dinfo	src/codegen.cpp	/^    DILocalVariable *dinfo;$/;"	m	struct:jl_varinfo_t	typeref:typename:DILocalVariable *	file:
dir	stdlib/FileWatching/test/runtests.jl	/^dir = mktempdir()$/;"	v
dir	test/file.jl	/^dir = mktempdir()$/;"	v
dir	test/precompile.jl	/^dir = mktempdir()$/;"	v
dir	test/testhelpers/llvmpasses.jl	/^dir = ARGS[1]$/;"	v
dir2	test/precompile.jl	/^dir2 = mktempdir()$/;"	v
directsubtype	stdlib/InteractiveUtils/src/InteractiveUtils.jl	/^directsubtype(a, b::DataType) = false$/;"	f
directsubtype	stdlib/InteractiveUtils/src/InteractiveUtils.jl	/^directsubtype(a::DataType, b::DataType) = supertype(a).name === b.name$/;"	f
directsubtype	stdlib/InteractiveUtils/src/InteractiveUtils.jl	/^directsubtype(a::Union, b::DataType) = directsubtype(a.a, b) || directsubtype(a.b, b)$/;"	f
directsubtype	stdlib/InteractiveUtils/src/InteractiveUtils.jl	/^directsubtype(a::UnionAll, b::DataType) = directsubtype(a.body, b)$/;"	f
dirname	base/path.jl	/^ dirname(path::AbstractString) = splitdir(path)[1]$/;"	f
dirname	src/support/dirname.c	/^JL_DLLEXPORT char *dirname( char *path )$/;"	f	typeref:typename:JL_DLLEXPORT char *
dirwalk	test/file.jl	/^dirwalk = mktempdir()$/;"	v
dis	src/processor.cpp	/^    } en, dis;$/;"	m	struct:__anon839834ed0111::TargetData	typeref:struct:__anon839834ed0111::TargetData::__anon839834ed0308	file:
disableRawMode	stdlib/REPL/src/TerminalMenus/util.jl	/^function disableRawMode(term)$/;"	f
disable_bracketed_paste	stdlib/REPL/src/Terminals.jl	/^@eval disable_bracketed_paste(t::UnixTerminal) = write(t.out_stream, $"$(CSI)?2004l")$/;"	f
disable_bracketed_paste	stdlib/REPL/src/Terminals.jl	/^disable_bracketed_paste(t::TextTerminal) = nothing$/;"	f
disable_depends	src/processor.cpp	/^static inline void disable_depends(FeatureList<n> &features, const FeatureDep *deps, size_t ndep/;"	f	namespace:__anon839834ed0111	typeref:typename:void	file:
disable_depends	src/processor_arm.cpp	/^static inline void disable_depends(FeatureList<n> &features)$/;"	f	namespace:ARM	typeref:typename:void	file:
disable_depends	src/processor_x86.cpp	/^static inline void disable_depends(FeatureList<n> &features)$/;"	f	namespace:X86	typeref:typename:void	file:
disable_gc	src/julia_threads.h	/^    int8_t disable_gc;$/;"	m	struct:_jl_tls_states_t	typeref:typename:int8_t
disable_library_threading	base/initdefs.jl	/^function disable_library_threading()$/;"	f
disable_library_threading_hooks	base/initdefs.jl	/^const disable_library_threading_hooks = []$/;"	v
disable_logging	base/logging.jl	/^function disable_logging(level::LogLevel)$/;"	f
disable_sigint	base/c.jl	/^function disable_sigint(f::Function)$/;"	f
disable_text_style	base/util.jl	/^const disable_text_style = AnyDict($/;"	v
disallowed-space	src/julia-parser.scm	/^(define (disallowed-space ex t)$/;"	f
disassociate_julia_struct	base/libuv.jl	/^disassociate_julia_struct(handle::Ptr{Cvoid}) =$/;"	f
disassociate_julia_struct	base/libuv.jl	/^disassociate_julia_struct(uv) = disassociate_julia_struct(uv.handle)$/;"	f
display	base/multimedia.jl	/^display(d::AbstractDisplay, mime::AbstractString, @nospecialize x) = display(d, MIME(mime), x)$/;"	f
display	base/multimedia.jl	/^display(d::TextDisplay, @nospecialize x) = display(d, MIME"text\/plain"(), x)$/;"	f
display	base/multimedia.jl	/^display(d::TextDisplay, M::MIME"text\/plain", @nospecialize x) = show(d.io, M, x)$/;"	f
display	base/multimedia.jl	/^display(mime::AbstractString, @nospecialize x) = display(MIME(mime), x)$/;"	f
display	base/multimedia.jl	/^function display(@nospecialize x)$/;"	f
display	base/multimedia.jl	/^function display(d::TextDisplay, M::MIME, @nospecialize x)$/;"	f
display	base/multimedia.jl	/^function display(m::MIME, @nospecialize x)$/;"	f
display	src/bin2hex.scm	/^(define display princ)$/;"	f
display	src/flisp/aliases.scm	/^(define (display x (port *output-stream*))$/;"	f
display	stdlib/REPL/src/REPL.jl	/^display(d::REPLDisplay, x) = display(d, MIME("text\/plain"), x)$/;"	f
display	stdlib/REPL/src/REPL.jl	/^function display(d::REPLDisplay, mime::MIME"text\/plain", x)$/;"	f
display_error	base/client.jl	/^display_error(er) = display_error(er, [])$/;"	f
display_error	base/client.jl	/^display_error(er, bt) = display_error(stderr, er, bt)$/;"	f
display_error	base/client.jl	/^display_error(stack::Vector) = display_error(stderr, stack)$/;"	f
display_error	base/client.jl	/^function display_error(io::IO, er, bt)$/;"	f
display_error	base/client.jl	/^function display_error(io::IO, stack::Vector)$/;"	f
displayable	base/multimedia.jl	/^displayable(d::AbstractDisplay, mime::AbstractString) = displayable(d, MIME(mime))$/;"	f
displayable	base/multimedia.jl	/^displayable(d::D, ::MIME{mime}) where {D<:AbstractDisplay,mime} =$/;"	f
displayable	base/multimedia.jl	/^displayable(d::TextDisplay, M::MIME) = istextmime(M)$/;"	f
displayable	base/multimedia.jl	/^displayable(mime::AbstractString) = displayable(MIME(mime))$/;"	f
displayable	base/multimedia.jl	/^function displayable(m::MIME)$/;"	f
displays	base/multimedia.jl	/^const displays = AbstractDisplay[]$/;"	v
displaysize	base/show.jl	/^displaysize(io::IOContext) = haskey(io, :displaysize) ? io[:displaysize] : displaysize(io.io)$/;"	f
displaysize	base/stream.jl	/^displaysize() = (parse(Int, get(ENV, "LINES",   "24")),$/;"	f
displaysize	base/stream.jl	/^displaysize(io::IO) = displaysize()$/;"	f
displaysize	base/stream.jl	/^function displaysize(io::TTY)$/;"	f
displaysize	stdlib/REPL/src/Terminals.jl	/^displaysize(::TextTerminal) = error("Unimplemented")$/;"	f
dist	deps/srccache/patchelf-0.9/Makefile.in	/^dist dist-all:$/;"	t
dist-all	deps/srccache/patchelf-0.9/Makefile.in	/^dist dist-all:$/;"	t
dist-bzip2	deps/srccache/patchelf-0.9/Makefile.in	/^dist-bzip2: distdir$/;"	t
dist-gzip	deps/srccache/patchelf-0.9/Makefile.in	/^dist-gzip: distdir$/;"	t
dist-lzip	deps/srccache/patchelf-0.9/Makefile.in	/^dist-lzip: distdir$/;"	t
dist-shar	deps/srccache/patchelf-0.9/Makefile.in	/^dist-shar: distdir$/;"	t
dist-tarZ	deps/srccache/patchelf-0.9/Makefile.in	/^dist-tarZ: distdir$/;"	t
dist-xz	deps/srccache/patchelf-0.9/Makefile.in	/^dist-xz: distdir$/;"	t
dist-zip	deps/srccache/patchelf-0.9/Makefile.in	/^dist-zip: distdir$/;"	t
distcheck	deps/srccache/patchelf-0.9/Makefile.in	/^distcheck: dist$/;"	t
distclean	Makefile	/^distclean:$/;"	t
distclean	deps/srccache/patchelf-0.9/Makefile.in	/^distclean: distclean-recursive$/;"	t
distclean	deps/srccache/patchelf-0.9/src/Makefile.in	/^distclean: distclean-am$/;"	t
distclean	deps/srccache/patchelf-0.9/tests/Makefile.in	/^distclean: distclean-am$/;"	t
distclean	stdlib/Makefile	/^distclean: $(addprefix distclean-, $(STDLIBS_EXT)) clean$/;"	t
distclean-am	deps/srccache/patchelf-0.9/Makefile.in	/^distclean-am: clean-am distclean-generic distclean-tags$/;"	t
distclean-am	deps/srccache/patchelf-0.9/src/Makefile.in	/^distclean-am: clean-am distclean-compile distclean-generic \\$/;"	t
distclean-am	deps/srccache/patchelf-0.9/tests/Makefile.in	/^distclean-am: clean-am distclean-compile distclean-generic \\$/;"	t
distclean-compile	deps/srccache/patchelf-0.9/src/Makefile.in	/^distclean-compile:$/;"	t
distclean-compile	deps/srccache/patchelf-0.9/tests/Makefile.in	/^distclean-compile:$/;"	t
distclean-curl	deps/curl.mk	/^distclean-curl:$/;"	t
distclean-dsfmt	deps/dsfmt.mk	/^distclean-dsfmt:$/;"	t
distclean-generic	deps/srccache/patchelf-0.9/Makefile.in	/^distclean-generic:$/;"	t
distclean-generic	deps/srccache/patchelf-0.9/src/Makefile.in	/^distclean-generic:$/;"	t
distclean-generic	deps/srccache/patchelf-0.9/tests/Makefile.in	/^distclean-generic:$/;"	t
distclean-gmp	deps/gmp.mk	/^distclean-gmp:$/;"	t
distclean-lapack	deps/blas.mk	/^distclean-lapack: distclean-openblas$/;"	t
distclean-lapack	deps/blas.mk	/^distclean-lapack:$/;"	t
distclean-libcxx	deps/llvm.mk	/^distclean-libcxx:$/;"	t
distclean-libcxxabi	deps/llvm.mk	/^distclean-libcxxabi:$/;"	t
distclean-llvm	deps/llvm.mk	/^distclean-llvm: distclean-libcxx distclean-libcxxabi$/;"	t
distclean-mbedtls	deps/mbedtls.mk	/^distclean-mbedtls:$/;"	t
distclean-mpfr	deps/mpfr.mk	/^distclean-mpfr:$/;"	t
distclean-objconv	deps/objconv.mk	/^distclean-objconv:$/;"	t
distclean-osxunwind	deps/unwind.mk	/^distclean-osxunwind:$/;"	t
distclean-patchelf	deps/patchelf.mk	/^distclean-patchelf:$/;"	t
distclean-pcre	deps/pcre.mk	/^distclean-pcre:$/;"	t
distclean-suitesparse	deps/suitesparse.mk	/^distclean-suitesparse: clean-suitesparse-wrapper$/;"	t
distclean-suitesparse-wrapper	deps/suitesparse.mk	/^distclean-suitesparse-wrapper: clean-suitesparse-wrapper$/;"	t
distclean-suitesparse-wrapper	deps/suitesparse.mk	/^distclean-suitesparse-wrapper: distclean-suitesparse$/;"	t
distclean-tags	deps/srccache/patchelf-0.9/Makefile.in	/^distclean-tags:$/;"	t
distclean-tags	deps/srccache/patchelf-0.9/src/Makefile.in	/^distclean-tags:$/;"	t
distclean-tags	deps/srccache/patchelf-0.9/tests/Makefile.in	/^distclean-tags:$/;"	t
distclean-unwind	deps/unwind.mk	/^distclean-unwind:$/;"	t
distcleanall	Makefile	/^distcleanall: cleanall$/;"	t
distcleanall	deps/Makefile	/^distcleanall: $(addprefix distclean-, $(DEP_LIBS))$/;"	t
distcleancheck	deps/srccache/patchelf-0.9/Makefile.in	/^distcleancheck: distclean$/;"	t
distcleancheck_listfiles	deps/srccache/patchelf-0.9/Makefile.in	/^distcleancheck_listfiles = find . -type f -print$/;"	m
distdir	deps/srccache/patchelf-0.9/Makefile.in	/^distdir = $(PACKAGE)-$(VERSION)$/;"	m
distdir	deps/srccache/patchelf-0.9/Makefile.in	/^distdir: $(DISTFILES)$/;"	t
distdir	deps/srccache/patchelf-0.9/src/Makefile.in	/^distdir: $(DISTFILES)$/;"	t
distdir	deps/srccache/patchelf-0.9/tests/Makefile.in	/^distdir: $(DISTFILES)$/;"	t
distributed	stdlib/Distributed/src/macros.jl	/^macro distributed(args...)$/;"	f
disttestfile	stdlib/Distributed/test/runtests.jl	/^disttestfile = joinpath(@__DIR__, "distributed_exec.jl")$/;"	v
distuninstallcheck	deps/srccache/patchelf-0.9/Makefile.in	/^distuninstallcheck:$/;"	t
distuninstallcheck_listfiles	deps/srccache/patchelf-0.9/Makefile.in	/^distuninstallcheck_listfiles = find . -type f -print$/;"	m
ditype	src/julia.h	/^    void *ditype; \/\/ llvm::MDNode* to be used as llvm::DIType(ditype)$/;"	m	struct:_jl_datatype_t	typeref:typename:void *
div	base/bool.jl	/^div(x::Bool, y::Bool) = y ? x : throw(DivideError())$/;"	f
div	base/int.jl	/^    div(x::Int128,  y::Int128)  = checked_sdiv_int(x, y)$/;"	f
div	base/int.jl	/^    div(x::UInt128, y::UInt128) = checked_udiv_int(x, y)$/;"	f
div	base/int.jl	/^    div(x::UInt128, y::UInt128) = divrem(x, y)[1]$/;"	f
div	base/int.jl	/^    function div(x::Int128, y::Int128)$/;"	f
div	base/int.jl	/^div(x::BitSigned, y::Unsigned) = flipsign(signed(div(unsigned(abs(x)), y)), x)$/;"	f
div	base/int.jl	/^div(x::T, y::T) where {T<:BitSigned64} = checked_sdiv_int(x, y)$/;"	f
div	base/int.jl	/^div(x::T, y::T) where {T<:BitUnsigned64} = checked_udiv_int(x, y)$/;"	f
div	base/int.jl	/^div(x::Unsigned, y::BitSigned) = unsigned(flipsign(signed(div(x, unsigned(abs(y)))), y))$/;"	f
div	base/mpfr.jl	/^function div(c::CdoubleMax, x::BigFloat)$/;"	f
div	base/mpfr.jl	/^function div(c::ClongMax, x::BigFloat)$/;"	f
div	base/mpfr.jl	/^function div(c::CulongMax, x::BigFloat)$/;"	f
div	base/mpfr.jl	/^function div(x::BigFloat, c::BigInt)$/;"	f
div	base/mpfr.jl	/^function div(x::BigFloat, c::CdoubleMax)$/;"	f
div	base/mpfr.jl	/^function div(x::BigFloat, c::ClongMax)$/;"	f
div	base/mpfr.jl	/^function div(x::BigFloat, c::CulongMax)$/;"	f
div	base/mpfr.jl	/^function div(x::BigFloat, y::BigFloat)$/;"	f
div	base/multinverses.jl	/^function div(a::T, b::SignedMultiplicativeInverse{T}) where T$/;"	f
div	base/multinverses.jl	/^function div(a::T, b::UnsignedMultiplicativeInverse{T}) where T$/;"	f
div	base/operators.jl	/^div(x::T, y::T) where {T<:Real} = convert(T,round((x-rem(x,y))\/y))$/;"	f
div	base/promotion.jl	/^div(x::Real, y::Real) = div(promote(x,y)...)$/;"	f
div	src/runtime_intrinsics.c	/^#define div(/;"	d	file:
div12	base/twiceprecision.jl	/^div12(x, y) = div12(promote(x, y)...)$/;"	f
div12	base/twiceprecision.jl	/^div12(x::T, y::T) where {T} = (p = x \/ y; (p, zero(p)))$/;"	f
div12	base/twiceprecision.jl	/^function div12(x::T, y::T) where {T<:AbstractFloat}$/;"	f
div_fast	base/fastmath.jl	/^    @inline div_fast(x::T, y::T) where {T<:ComplexTypes} =$/;"	f
div_fast	base/fastmath.jl	/^    div_fast(a::T, y::Complex{T}) where {T<:FloatTypes} =$/;"	f
div_fast	base/fastmath.jl	/^    div_fast(x::Complex{T}, b::T) where {T<:FloatTypes} =$/;"	f
div_fast	base/fastmath.jl	/^div_fast(x::T, y::T) where {T<:FloatTypes} = div_float_fast(x, y)$/;"	f
divexact	stdlib/Dates/src/periods.jl	/^function divexact(x, y)$/;"	f
divgcd	base/rational.jl	/^function divgcd(x::Integer,y::Integer)$/;"	f
dividemodulointbignum!	base/grisu/bignums.jl	/^function dividemodulointbignum!(x::Bignum,other::Bignum)$/;"	f
divrem	base/gmp.jl	/^divrem(x::BigInt, y::BigInt) = MPZ.tdiv_qr(x, y)$/;"	f
divrem	base/int.jl	/^    function divrem(x::UInt128, y::UInt128)$/;"	f
divrem	base/multinverses.jl	/^function divrem(a::T, b::MultiplicativeInverse{T}) where T$/;"	f
divrem	base/number.jl	/^divrem(x,y) = (div(x,y),rem(x,y))$/;"	f
divrem2	base/grisu/fastfixed.jl	/^function divrem2(x,power)$/;"	f
diy_fp	test/grisu.jl	/^diy_fp  = Grisu.Float(reinterpret(Float32,max_float32))$/;"	v
diy_fp	test/grisu.jl	/^diy_fp  = Grisu.Float(reinterpret(Float32,min_float32))$/;"	v
diy_fp	test/grisu.jl	/^diy_fp  = Grisu.Float(reinterpret(Float32,ordered))$/;"	v
diy_fp	test/grisu.jl	/^diy_fp  = Grisu.Float(reinterpret(Float64,max_double64))$/;"	v
diy_fp	test/grisu.jl	/^diy_fp  = Grisu.Float(reinterpret(Float64,min_double64))$/;"	v
diy_fp	test/grisu.jl	/^diy_fp  = Grisu.Float(reinterpret(Float64,ordered))$/;"	v
diy_fp	test/grisu.jl	/^diy_fp  = Grisu.normalize(Grisu.Float(Float32(1.0)))$/;"	v
diy_fp	test/grisu.jl	/^diy_fp  = Grisu.normalize(Grisu.Float(Float32(1.5)))$/;"	v
diy_fp	test/grisu.jl	/^diy_fp  = Grisu.normalize(Grisu.Float(reinterpret(Float32,largest_denormal32)))$/;"	v
diy_fp	test/grisu.jl	/^diy_fp  = Grisu.normalize(Grisu.Float(reinterpret(Float32,max_float32)))$/;"	v
diy_fp	test/grisu.jl	/^diy_fp  = Grisu.normalize(Grisu.Float(reinterpret(Float32,min_float32)))$/;"	v
diy_fp	test/grisu.jl	/^diy_fp  = Grisu.normalize(Grisu.Float(reinterpret(Float32,smallest_normal32)))$/;"	v
diy_fp	test/grisu.jl	/^diy_fp  = Grisu.normalize(Grisu.Float(reinterpret(Float64,max_double64)))$/;"	v
diy_fp	test/grisu.jl	/^diy_fp  = Grisu.normalize(Grisu.Float(reinterpret(Float64,min_double64)))$/;"	v
diy_fp	test/grisu.jl	/^diy_fp  = Grisu.normalize(Grisu.Float(reinterpret(Float64,ordered)))$/;"	v
diy_fp	test/grisu.jl	/^diy_fp = Grisu.normalize(Grisu.Float(1.0))$/;"	v
diy_fp	test/grisu.jl	/^diy_fp = Grisu.normalize(Grisu.Float(1.5))$/;"	v
diy_fp	test/grisu.jl	/^diy_fp = Grisu.normalize(Grisu.Float(reinterpret(Float64,min_double64)))$/;"	v
diy_fp	test/grisu.jl	/^diy_fp = Grisu.normalize(reinterpret(Float64,largest_denormal64))$/;"	v
diy_fp	test/grisu.jl	/^diy_fp = Grisu.normalize(reinterpret(Float64,max_double64))$/;"	v
diy_fp	test/grisu.jl	/^diy_fp = Grisu.normalize(reinterpret(Float64,smallest_normal64))$/;"	v
dl_phdr_info	stdlib/Libdl/src/Libdl.jl	/^    struct dl_phdr_info$/;"	f
dl_phdr_info_callback	stdlib/Libdl/src/Libdl.jl	/^    function dl_phdr_info_callback(di::dl_phdr_info, size::Csize_t, dynamic_libraries::Array{Str/;"	f
dlcache	src/flisp/flisp.h	/^    void *dlcache;     \/\/ dlsym address$/;"	m	struct:_symbol_t	typeref:typename:void *
dlclose	stdlib/Libdl/src/Libdl.jl	/^function dlclose(p::Nothing)$/;"	f
dlclose	stdlib/Libdl/src/Libdl.jl	/^function dlclose(p::Ptr)$/;"	f
dlimg	stdlib/LinearAlgebra/test/lu.jl	/^dlimg  = randn(n-1)\/2$/;"	v
dllist	stdlib/Libdl/src/Libdl.jl	/^function dllist()$/;"	f
dlls	stdlib/Libdl/test/runtests.jl	/^dlls = Libdl.dllist()$/;"	v
dlm_fill	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^function dlm_fill(T::DataType, offarr::Vector{Vector{Int}}, dims::NTuple{2,Integer}, has_header:/;"	f
dlm_parse	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^function dlm_parse(dbuff::String, eol::D, dlm::D, qchar::D, cchar::D,$/;"	f
dlopen	stdlib/Libdl/src/Libdl.jl	/^dlopen(s::Symbol, flags::Integer = RTLD_LAZY | RTLD_DEEPBIND; kwargs...) =$/;"	f
dlopen	stdlib/Libdl/src/Libdl.jl	/^function dlopen end$/;"	f
dlopen	stdlib/Libdl/src/Libdl.jl	/^function dlopen(f::Function, args...; kwargs...)$/;"	f
dlopen	stdlib/Libdl/src/Libdl.jl	/^function dlopen(s::AbstractString, flags::Integer = RTLD_LAZY | RTLD_DEEPBIND; throw_error::Bool/;"	f
dlopen_e	stdlib/Libdl/src/Libdl.jl	/^dlopen_e(args...) = something(dlopen(args...; throw_error=false), C_NULL)$/;"	f
dlpath	stdlib/Libdl/src/Libdl.jl	/^function dlpath(handle::Ptr{Cvoid})$/;"	f
dlpath	stdlib/Libdl/src/Libdl.jl	/^function dlpath(libname::Union{AbstractString, Symbol})$/;"	f
dlreal	stdlib/LinearAlgebra/test/lu.jl	/^dlreal = randn(n-1)\/2$/;"	v
dlsym	stdlib/Libdl/src/Libdl.jl	/^function dlsym(hnd::Ptr, s::Union{Symbol,AbstractString}; throw_error::Bool = true)$/;"	f
dlsym_e	stdlib/Libdl/src/Libdl.jl	/^function dlsym_e(hnd::Ptr, s::Union{Symbol,AbstractString})$/;"	f
dmg/$(APP_NAME)	contrib/mac/app/Makefile	/^dmg\/$(APP_NAME): startup.applescript julia.icns$/;"	t
dmg/.VolumeIcon.icns	contrib/mac/app/Makefile	/^dmg\/.VolumeIcon.icns: julia.icns$/;"	t
dmg/Applications	contrib/mac/app/Makefile	/^dmg\/Applications:$/;"	t
do33	stdlib/SparseArrays/test/sparse.jl	/^do33 = fill(1.,3)$/;"	v
doFinalization	src/llvm-final-gc-lowering.cpp	/^bool FinalLowerGC::doFinalization(Module &M)$/;"	f	class:FinalLowerGC	typeref:typename:bool
doInitialization	src/llvm-alloc-opt.cpp	/^bool AllocOpt::doInitialization(Module &M)$/;"	f	class:__anon0a1571000111::AllocOpt	typeref:typename:bool
doInitialization	src/llvm-final-gc-lowering.cpp	/^bool FinalLowerGC::doInitialization(Module &M) {$/;"	f	class:FinalLowerGC	typeref:typename:bool
doInitialization	src/llvm-late-gc-lowering.cpp	/^bool LateLowerGCFrame::doInitialization(Module &M) {$/;"	f	class:LateLowerGCFrame	typeref:typename:bool
doInitialization	src/llvm-lower-handlers.cpp	/^bool LowerExcHandlers::doInitialization(Module &M) {$/;"	f	class:LowerExcHandlers	typeref:typename:bool
do_broken_test	stdlib/Test/src/Test.jl	/^function do_broken_test(result::ExecutionResult, orig_expr)$/;"	f
do_call	src/interpreter.c	/^SECT_INTERP static jl_value_t *do_call(jl_value_t **args, size_t nargs, interpreter_state *s)$/;"	f	typeref:typename:SECT_INTERP jl_value_t *	file:
do_invoke	src/interpreter.c	/^SECT_INTERP static jl_value_t *do_invoke(jl_value_t **args, size_t nargs, interpreter_state *s)$/;"	f	typeref:typename:SECT_INTERP jl_value_t *	file:
do_read_sexpr	src/flisp/read.c	/^static value_t do_read_sexpr(fl_context_t *fl_ctx, value_t label)$/;"	f	typeref:typename:value_t	file:
do_something_async_27164	test/misc.jl	/^do_something_async_27164() = @async(begin sleep(1); x27164[] = 2; end)$/;"	f
do_start_task	src/jsvm-emscripten/asyncify_setup.js	/^function do_start_task(old_stack)$/;"	f
do_sym	src/ast.c	/^jl_sym_t *globalref_sym; jl_sym_t *do_sym;$/;"	v	typeref:typename:jl_sym_t *
do_test	stdlib/Test/src/Test.jl	/^function do_test(result::ExecutionResult, orig_expr)$/;"	f
do_test_throws	stdlib/Test/src/Test.jl	/^function do_test_throws(result::ExecutionResult, @nospecialize(orig_expr), @nospecialize(extype)/;"	f
do_tests	stdlib/SHA/test/perf.jl	/^function do_tests(filepath)$/;"	f
do_the_call	test/llvmcall.jl	/^    function do_the_call()$/;"	f
do_threadcall	base/threadcall.jl	/^function do_threadcall(fun_ptr::Ptr{Cvoid}, rettype::Type, argtypes::Vector, argvals::Vector)$/;"	f
do_trycatch	src/flisp/flisp.c	/^static value_t do_trycatch(fl_context_t *fl_ctx)$/;"	f	typeref:typename:value_t	file:
do_typemap_search	src/gf.c	/^static jl_typemap_entry_t *do_typemap_search(jl_methtable_t *mt JL_PROPAGATES_ROOT, jl_method_t /;"	f	typeref:typename:jl_typemap_entry_t *	file:
doc	base/boot.jl	/^macro doc(x...)$/;"	f
doc	base/docs/Docs.jl	/^function doc end$/;"	f
doc	stdlib/REPL/src/docview.jl	/^doc(obj::UnionAll) = doc(Base.unwrap_unionall(obj))$/;"	f
doc	stdlib/REPL/src/docview.jl	/^doc(object, sig...)              = doc(object, Tuple{sig...})$/;"	f
doc	stdlib/REPL/src/docview.jl	/^doc(object, sig::Type = Union{}) = doc(aliasof(object, typeof(object)), sig)$/;"	f
doc	stdlib/REPL/src/docview.jl	/^function doc(binding::Binding, sig::Type = Union{})$/;"	f
doc!	base/docs/Docs.jl	/^function doc!(__module__::Module, b::Binding, str::DocStr, @nospecialize sig = Union{})$/;"	f
doc!	base/docs/core.jl	/^function doc!(source::LineNumberNode, mod::Module, str, ex)$/;"	f
doc-string-literal?	src/julia-parser.scm	/^(define (doc-string-literal? s e)$/;"	f
doc_DATA	deps/srccache/patchelf-0.9/Makefile.am	/^doc_DATA = README$/;"	m
doc_DATA	deps/srccache/patchelf-0.9/Makefile.in	/^doc_DATA = README$/;"	m
doc_completions	stdlib/REPL/src/docview.jl	/^doc_completions(name) = fuzzysort(name, accessible(Main))$/;"	f
doc_completions	stdlib/REPL/src/docview.jl	/^doc_completions(name::Symbol) = doc_completions(string(name))$/;"	f
doc_str	stdlib/Markdown/src/Markdown.jl	/^doc_str(md::AbstractString, source::LineNumberNode, mod::Module) = doc_str(parse(md), source, mo/;"	f
doc_str	stdlib/Markdown/src/Markdown.jl	/^function doc_str(md, source::LineNumberNode, mod::Module)$/;"	f
doc_str	stdlib/Markdown/src/Markdown.jl	/^macro doc_str(s::AbstractString, t...)$/;"	f
doc_str	test/docs.jl	/^doc_str = Markdown.parse("""$/;"	v
doc_util_path	test/docs.jl	/^doc_util_path = Symbol(joinpath("docs", "utils.jl"))$/;"	v
docdir	deps/srccache/patchelf-0.9/Makefile.in	/^docdir = @docdir@$/;"	m
docdir	deps/srccache/patchelf-0.9/src/Makefile.in	/^docdir = @docdir@$/;"	m
docdir	deps/srccache/patchelf-0.9/tests/Makefile.in	/^docdir = @docdir@$/;"	m
docerror	base/docs/Docs.jl	/^function docerror(@nospecialize ex)$/;"	f
docexpr	base/docs/Docs.jl	/^docexpr(__source__, __module__, args...) = Expr(:call, docstr, args...)$/;"	f
docexpr	stdlib/Markdown/src/Markdown.jl	/^function docexpr(source::LineNumberNode, mod::Module, s, flavor = :julia)$/;"	f
docm	base/docs/Docs.jl	/^function docm(source::LineNumberNode, mod::Module, ex)$/;"	f
docm	base/docs/Docs.jl	/^function docm(source::LineNumberNode, mod::Module, meta, ex, define::Bool = true)$/;"	f
docm	base/docs/core.jl	/^docm(source::LineNumberNode, mod::Module, x) =$/;"	f
docm	base/docs/core.jl	/^function docm(source::LineNumberNode, mod::Module, str, x)$/;"	f
docs	Makefile	/^docs: julia-sysimg-$(JULIA_BUILD_MODE)$/;"	t
docsearch	stdlib/REPL/src/docview.jl	/^docsearch(::Nothing, needle) = false$/;"	f
docsearch	stdlib/REPL/src/docview.jl	/^docsearch(haystack::AbstractString, needle) = findfirst(needle, haystack) !== nothing$/;"	f
docsearch	stdlib/REPL/src/docview.jl	/^docsearch(haystack::Markdown.MD, needle) = docsearch(stripmd(haystack.content), needle)$/;"	f
docsearch	stdlib/REPL/src/docview.jl	/^docsearch(haystack::Symbol, needle) = docsearch(string(haystack), needle)$/;"	f
docsearch	stdlib/REPL/src/docview.jl	/^function docsearch(haystack, needle)$/;"	f
docsearch	stdlib/REPL/src/docview.jl	/^function docsearch(haystack::Array, needle)$/;"	f
docsearch	stdlib/REPL/src/docview.jl	/^function docsearch(haystack::DocStr, needle)$/;"	f
docsearch	stdlib/REPL/src/docview.jl	/^function docsearch(haystack::MultiDoc, needle)$/;"	f
docstr	base/docs/Docs.jl	/^docstr(object, data = Dict()) = _docstr(object, data)$/;"	f
docstr	base/docs/Docs.jl	/^function docstr(binding::Binding, typesig = Union{})$/;"	f
docstring_startswith	test/docs.jl	/^docstring_startswith(d1::DocStr, d2) = docstring_startswith(parsedoc(d1), d2)$/;"	f
docstring_startswith	test/docs.jl	/^function docstring_startswith(d1, d2)$/;"	f
docstrings_equal	test/docs.jl	/^docstrings_equal(d1::DocStr, d2) = docstrings_equal(parsedoc(d1), d2)$/;"	f
docstrings_equal	test/docs.jl	/^function docstrings_equal(d1, d2)$/;"	f
does	base/file.jl	/^function does not create any file or directory at the returned location, so$/;"	f
doiterate	base/iterators.jl	/^    function doiterate(itr, valstate::Union{Nothing, Tuple{Any, Any}})$/;"	f
dominated	base/compiler/ssair/domtree.jl	/^function dominated(domtree::DomTree, root::Int)$/;"	f
dominates	base/compiler/ssair/domtree.jl	/^function dominates(domtree::DomTree, bb1::Int, bb2::Int)$/;"	f
domsort_ssa!	base/compiler/ssair/slot2ssa.jl	/^function domsort_ssa!(ir::IRCode, domtree::DomTree)$/;"	f
done	src/llvm-multiversioning.cpp	/^    bool done()$/;"	f	struct:__anond5683ea40111::ConstantUses	typeref:typename:bool	file:
done_sym	src/task.c	/^jl_sym_t *done_sym;$/;"	v	typeref:typename:jl_sym_t *
donenotify	src/julia.h	/^    jl_value_t *donenotify;$/;"	m	struct:_jl_task_t	typeref:typename:jl_value_t *
dot	stdlib/LinearAlgebra/src/bidiag.jl	/^function dot(x::AbstractVector, B::Bidiagonal, y::AbstractVector)$/;"	f
dot	stdlib/LinearAlgebra/src/bitarray.jl	/^function dot(x::BitVector, y::BitVector)$/;"	f
dot	stdlib/LinearAlgebra/src/blas.jl	/^        function dot(n::Integer, DX::Union{Ptr{$elty},AbstractArray{$elty}}, incx::Integer, DY::/;"	f
dot	stdlib/LinearAlgebra/src/blas.jl	/^function dot end$/;"	f
dot	stdlib/LinearAlgebra/src/blas.jl	/^function dot(DX::Union{DenseArray{T},AbstractVector{T}}, DY::Union{DenseArray{T},AbstractVector{/;"	f
dot	stdlib/LinearAlgebra/src/diagonal.jl	/^function dot(x::AbstractVector, D::Diagonal, y::AbstractVector)$/;"	f
dot	stdlib/LinearAlgebra/src/generic.jl	/^dot(x, A, y) = dot(x, A*y) # generic fallback for cases that are not covered by specialized meth/;"	f
dot	stdlib/LinearAlgebra/src/generic.jl	/^dot(x::AbstractVector, adjA::Adjoint, y::AbstractVector) = adjoint(dot(y, adjA.parent, x))$/;"	f
dot	stdlib/LinearAlgebra/src/generic.jl	/^dot(x::AbstractVector, transA::Transpose{<:Real}, y::AbstractVector) = adjoint(dot(y, transA.par/;"	f
dot	stdlib/LinearAlgebra/src/generic.jl	/^dot(x::Number, y::Number) = conj(x) * y$/;"	f
dot	stdlib/LinearAlgebra/src/generic.jl	/^function dot end$/;"	f
dot	stdlib/LinearAlgebra/src/generic.jl	/^function dot(x, y) # arbitrary iterables$/;"	f
dot	stdlib/LinearAlgebra/src/generic.jl	/^function dot(x::AbstractArray, y::AbstractArray)$/;"	f
dot	stdlib/LinearAlgebra/src/generic.jl	/^function dot(x::AbstractVector, A::AbstractMatrix, y::AbstractVector)$/;"	f
dot	stdlib/LinearAlgebra/src/hessenberg.jl	/^function dot(x::AbstractVector, H::UpperHessenberg, y::AbstractVector)$/;"	f
dot	stdlib/LinearAlgebra/src/matmul.jl	/^dot(x::Union{DenseArray{T},StridedVector{T}}, y::Union{DenseArray{T},StridedVector{T}}) where {T/;"	f
dot	stdlib/LinearAlgebra/src/matmul.jl	/^function dot(x::Vector{T}, rx::Union{UnitRange{TI},AbstractRange{TI}}, y::Vector{T}, ry::Union{U/;"	f
dot	stdlib/LinearAlgebra/src/symmetric.jl	/^function dot(x::AbstractVector, A::RealHermSymComplexHerm, y::AbstractVector)$/;"	f
dot	stdlib/LinearAlgebra/src/triangular.jl	/^function dot(x::AbstractVector, A::LowerTriangular, y::AbstractVector)$/;"	f
dot	stdlib/LinearAlgebra/src/triangular.jl	/^function dot(x::AbstractVector, A::UnitLowerTriangular, y::AbstractVector)$/;"	f
dot	stdlib/LinearAlgebra/src/triangular.jl	/^function dot(x::AbstractVector, A::UnitUpperTriangular, y::AbstractVector)$/;"	f
dot	stdlib/LinearAlgebra/src/triangular.jl	/^function dot(x::AbstractVector, A::UpperTriangular, y::AbstractVector)$/;"	f
dot	stdlib/LinearAlgebra/src/tridiag.jl	/^function dot(x::AbstractVector, A::Tridiagonal, y::AbstractVector)$/;"	f
dot	stdlib/LinearAlgebra/src/tridiag.jl	/^function dot(x::AbstractVector, S::SymTridiagonal, y::AbstractVector)$/;"	f
dot	stdlib/LinearAlgebra/src/uniformscaling.jl	/^dot(x::AbstractVector, J::UniformScaling, y::AbstractVector) = dot(x, J.λ, y)$/;"	f
dot	stdlib/LinearAlgebra/src/uniformscaling.jl	/^dot(x::AbstractVector, a::Number, y::AbstractVector) = sum(t -> dot(t[1], a, t[2]), zip(x, y))$/;"	f
dot	stdlib/LinearAlgebra/src/uniformscaling.jl	/^dot(x::AbstractVector, a::Union{Real,Complex}, y::AbstractVector) = a*dot(x, y)$/;"	f
dot	stdlib/SparseArrays/src/linalg.jl	/^function dot(A::AbstractSparseMatrixCSC{T1,S1},B::AbstractSparseMatrixCSC{T2,S2}) where {T1,T2,S/;"	f
dot	stdlib/SparseArrays/src/linalg.jl	/^function dot(x::AbstractVector, A::AbstractSparseMatrixCSC, y::AbstractVector)$/;"	f
dot	stdlib/SparseArrays/src/linalg.jl	/^function dot(x::SparseVector, A::AbstractSparseMatrixCSC, y::SparseVector)$/;"	f
dot	stdlib/SparseArrays/src/sparsevector.jl	/^function dot(x::AbstractVector{Tx}, y::SparseVectorUnion{Ty}) where {Tx<:Number,Ty<:Number}$/;"	f
dot	stdlib/SparseArrays/src/sparsevector.jl	/^function dot(x::SparseVectorUnion{<:Number}, y::SparseVectorUnion{<:Number})$/;"	f
dot	stdlib/SparseArrays/src/sparsevector.jl	/^function dot(x::SparseVectorUnion{Tx}, y::AbstractVector{Ty}) where {Tx<:Number,Ty<:Number}$/;"	f
dot-opchar?	src/julia-parser.scm	/^(define dot-opchar? (Set$/;"	f
dot-operators	src/julia-parser.scm	/^(define dot-operators (filter (lambda (o)$/;"	f
dot1	stdlib/LinearAlgebra/test/matmul.jl	/^dot1(x,y) = invoke(dot, Tuple{Any,Any}, x,y)$/;"	f
dot2	stdlib/LinearAlgebra/test/matmul.jl	/^dot2(x,y) = invoke(dot, Tuple{AbstractArray,AbstractArray}, x,y)$/;"	f
dot_sym	src/ast.c	/^jl_sym_t *dot_sym;    jl_sym_t *newvar_sym;$/;"	v	typeref:typename:jl_sym_t *
dotc	stdlib/LinearAlgebra/src/blas.jl	/^        function dotc(n::Integer, DX::Union{Ptr{$elty},AbstractArray{$elty}}, incx::Integer, DY:/;"	f
dotc	stdlib/LinearAlgebra/src/blas.jl	/^function dotc end$/;"	f
dotc	stdlib/LinearAlgebra/src/blas.jl	/^function dotc(DX::Union{DenseArray{T},AbstractVector{T}}, DY::Union{DenseArray{T},AbstractVector/;"	f
dotimes	stdlib/Markdown/src/parse/util.jl	/^macro dotimes(n, body)$/;"	f
dotop-named?	src/ast.scm	/^(define (dotop-named? e) (dotop? (identifier-name e)))$/;"	f
dotop?	src/julia-parser.scm	/^(define dotop? (SuffSet dot-operators))$/;"	f
dots->vararg	src/julia-syntax.scm	/^(define (dots->vararg a)$/;"	f
dottable	base/broadcast.jl	/^dottable(x) = false # avoid dotting spliced objects (e.g. view calls inserted by @view)$/;"	f
dottable	base/broadcast.jl	/^dottable(x::Expr) = x.head != :\$$/;"	f
dottable	base/broadcast.jl	/^dottable(x::Symbol) = (!isoperator(x) || first(string(x)) != '.' || x === :..) && x !== :(:)$/;"	f
dotu	stdlib/LinearAlgebra/src/blas.jl	/^        function dotu(n::Integer, DX::Union{Ptr{$elty},AbstractArray{$elty}}, incx::Integer, DY:/;"	f
dotu	stdlib/LinearAlgebra/src/blas.jl	/^function dotu end$/;"	f
dotu	stdlib/LinearAlgebra/src/blas.jl	/^function dotu(DX::Union{DenseArray{T},AbstractVector{T}}, DY::Union{DenseArray{T},AbstractVector/;"	f
dotview	base/broadcast.jl	/^Base.@propagate_inbounds dotview(B::BitArray, i::BitArray) = BitMaskedBitArray(B, i)$/;"	f
dotview	base/broadcast.jl	/^Base.@propagate_inbounds dotview(args...) = Base.maybeview(args...)$/;"	f
doublehash	src/flisp/equal.c	/^#define doublehash(/;"	d	file:
doublesym	src/flisp/flisp.h	/^    value_t floatsym, doublesym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
doubletype	src/flisp/flisp.h	/^    fltype_t *floattype, *doubletype;$/;"	m	struct:_fl_context_t	typeref:typename:fltype_t **
doubly_declared2_trunc	test/llvmcall.jl	/^function doubly_declared2_trunc(x::Float64)$/;"	f
doubly_declared2_trunc	test/llvmcall2.jl	/^function doubly_declared2_trunc(x::Float64)$/;"	f
doubly_declared_floor	test/llvmcall.jl	/^function doubly_declared_floor(x::Float64)$/;"	f
doubly_declared_floor	test/llvmcall2.jl	/^function doubly_declared_floor(x::Float64)$/;"	f
download	base/download.jl	/^function download(url::AbstractString)$/;"	f
download	base/download.jl	/^function download(url::AbstractString, filename::AbstractString)$/;"	f
download_curl	base/download.jl	/^function download_curl(curl_exe::AbstractString, url::AbstractString, filename::AbstractString)$/;"	f
download_powershell	base/download.jl	/^    function download_powershell(url::AbstractString, filename::AbstractString)$/;"	f
download_url	base/download.jl	/^function download_url(url::String)$/;"	f
dowrap	stdlib/SparseArrays/test/sparse.jl	/^    dowrap(wr, A) = wr(A)$/;"	f
dowrap	stdlib/SparseArrays/test/sparse.jl	/^    dowrap(wr::Tuple, A) = (wr[1])(A, wr[2:end]...)$/;"	f
dows	stdlib/Dates/test/query.jl	/^dows = ["Tuesday", "Saturday", "Sunday", "Thursday", "Sunday", "Friday",$/;"	v
dr	stdlib/Dates/test/ranges.jl	/^dr  = Dates.Date(2013, 1, 1):Dates.Day(1):Dates.Date(2013, 2, 1)$/;"	v
dr	stdlib/Dates/test/ranges.jl	/^dr  = Dates.DateTime(2013, 1, 1):Dates.Day(1):Dates.DateTime(2013, 2, 1)$/;"	v
dr	stdlib/Dates/test/ranges.jl	/^dr  = Dates.Time(23, 1, 1):Dates.Second(1):Dates.Time(23, 2, 1)$/;"	v
dr1	stdlib/Dates/test/ranges.jl	/^dr1 = Dates.Date(2013, 1, 1):Dates.Day(1):Dates.Date(2013, 1, 1)$/;"	v
dr1	stdlib/Dates/test/ranges.jl	/^dr1 = Dates.DateTime(2013, 1, 1):Dates.Day(1):Dates.DateTime(2013, 1, 1)$/;"	v
dr1	stdlib/Dates/test/ranges.jl	/^dr1 = Dates.Time(23, 1, 1):Dates.Second(1):Dates.Time(23, 1, 1)$/;"	v
dr10	stdlib/Dates/test/ranges.jl	/^dr10 = typemax(Dates.Date):Dates.Day(-1):typemin(Dates.Date)$/;"	v
dr10	stdlib/Dates/test/ranges.jl	/^dr10 = typemax(Dates.DateTime):Dates.Day(-1):typemin(Dates.DateTime)$/;"	v
dr10	stdlib/Dates/test/ranges.jl	/^dr10 = typemax(Dates.Time):Dates.Microsecond(-1):typemin(Dates.Time)$/;"	v
dr11	stdlib/Dates/test/ranges.jl	/^dr11 = typemin(Dates.Date):Dates.Week(1):typemax(Dates.Date)$/;"	v
dr11	stdlib/Dates/test/ranges.jl	/^dr11 = typemin(Dates.DateTime):Dates.Week(1):typemax(Dates.DateTime)$/;"	v
dr11	stdlib/Dates/test/ranges.jl	/^dr11 = typemin(Dates.Time):Dates.Millisecond(1):typemax(Dates.Time)$/;"	v
dr12	stdlib/Dates/test/ranges.jl	/^dr12 = typemin(Dates.Date):Dates.Month(1):typemax(Dates.Date)$/;"	v
dr12	stdlib/Dates/test/ranges.jl	/^dr12 = typemin(Dates.DateTime):Dates.Month(1):typemax(Dates.DateTime)$/;"	v
dr12	stdlib/Dates/test/ranges.jl	/^dr12 = typemin(Dates.Time):Dates.Minute(1):typemax(Dates.Time)$/;"	v
dr13	stdlib/Dates/test/ranges.jl	/^dr13 = typemin(Dates.Date):Dates.Year(1):typemax(Dates.Date)$/;"	v
dr13	stdlib/Dates/test/ranges.jl	/^dr13 = typemin(Dates.DateTime):Dates.Year(1):typemax(Dates.DateTime)$/;"	v
dr13	stdlib/Dates/test/ranges.jl	/^dr13 = typemin(Dates.Time):Dates.Hour(1):typemax(Dates.Time)$/;"	v
dr14	stdlib/Dates/test/ranges.jl	/^dr14 = typemin(Dates.Date):Dates.Week(10):typemax(Dates.Date)$/;"	v
dr14	stdlib/Dates/test/ranges.jl	/^dr14 = typemin(Dates.DateTime):Dates.Week(10):typemax(Dates.DateTime)$/;"	v
dr14	stdlib/Dates/test/ranges.jl	/^dr14 = typemin(Dates.Time):Dates.Millisecond(10):typemax(Dates.Time)$/;"	v
dr15	stdlib/Dates/test/ranges.jl	/^dr15 = typemin(Dates.Date):Dates.Month(100):typemax(Dates.Date)$/;"	v
dr15	stdlib/Dates/test/ranges.jl	/^dr15 = typemin(Dates.DateTime):Dates.Month(100):typemax(Dates.DateTime)$/;"	v
dr15	stdlib/Dates/test/ranges.jl	/^dr15 = typemin(Dates.Time):Dates.Minute(100):typemax(Dates.Time)$/;"	v
dr16	stdlib/Dates/test/ranges.jl	/^dr16 = typemin(Dates.Date):Dates.Year(1000):typemax(Dates.Date)$/;"	v
dr16	stdlib/Dates/test/ranges.jl	/^dr16 = typemin(Dates.DateTime):Dates.Year(1000):typemax(Dates.DateTime)$/;"	v
dr16	stdlib/Dates/test/ranges.jl	/^dr16 = typemin(Dates.Time):Dates.Hour(1000):typemax(Dates.Time)$/;"	v
dr17	stdlib/Dates/test/ranges.jl	/^dr17 = typemax(Dates.Date):Dates.Week(-10000):typemin(Dates.Date)$/;"	v
dr17	stdlib/Dates/test/ranges.jl	/^dr17 = typemax(Dates.DateTime):Dates.Week(-10000):typemin(Dates.DateTime)$/;"	v
dr17	stdlib/Dates/test/ranges.jl	/^dr17 = typemax(Dates.Time):Dates.Millisecond(-10000):typemin(Dates.Time)$/;"	v
dr18	stdlib/Dates/test/ranges.jl	/^dr18 = typemax(Dates.Date):Dates.Month(-100000):typemin(Dates.Date)$/;"	v
dr18	stdlib/Dates/test/ranges.jl	/^dr18 = typemax(Dates.DateTime):Dates.Month(-100000):typemin(Dates.DateTime)$/;"	v
dr18	stdlib/Dates/test/ranges.jl	/^dr18 = typemax(Dates.Time):Dates.Minute(-100):typemin(Dates.Time)$/;"	v
dr19	stdlib/Dates/test/ranges.jl	/^dr19 = typemax(Dates.Date):Dates.Year(-1000000):typemin(Dates.Date)$/;"	v
dr19	stdlib/Dates/test/ranges.jl	/^dr19 = typemax(Dates.DateTime):Dates.Year(-1000000):typemin(Dates.DateTime)$/;"	v
dr19	stdlib/Dates/test/ranges.jl	/^dr19 = typemax(Dates.Time):Dates.Hour(-10):typemin(Dates.Time)$/;"	v
dr2	stdlib/Dates/test/ranges.jl	/^dr2 = Dates.Date(2013, 1, 1):Dates.Day(1):Dates.Date(2012, 2, 1) # empty range$/;"	v
dr2	stdlib/Dates/test/ranges.jl	/^dr2 = Dates.DateTime(2013, 1, 1):Dates.Day(1):Dates.DateTime(2012, 2, 1) # empty range$/;"	v
dr2	stdlib/Dates/test/ranges.jl	/^dr2 = Dates.Time(23, 1, 1):Dates.Second(1):Dates.Time(22, 2, 1) # empty range$/;"	v
dr20	stdlib/Dates/test/ranges.jl	/^dr20 = typemin(Dates.Date):Dates.Day(2):typemax(Dates.Date)$/;"	v
dr20	stdlib/Dates/test/ranges.jl	/^dr20 = typemin(Dates.DateTime):Dates.Day(2):typemax(Dates.DateTime)$/;"	v
dr20	stdlib/Dates/test/ranges.jl	/^dr20 = typemin(Dates.Time):Dates.Microsecond(2):typemax(Dates.Time)$/;"	v
dr3	stdlib/Dates/test/ranges.jl	/^dr3 = Dates.Date(2013, 1, 1):Dates.Day(-1):Dates.Date(2012, 1, 1) # negative step$/;"	v
dr3	stdlib/Dates/test/ranges.jl	/^dr3 = Dates.DateTime(2013, 1, 1):Dates.Day(-1):Dates.DateTime(2012) # negative step$/;"	v
dr3	stdlib/Dates/test/ranges.jl	/^dr3 = Dates.Time(23, 1, 1):Dates.Minute(-1):Dates.Time(22, 1, 1) # negative step$/;"	v
dr4	stdlib/Dates/test/ranges.jl	/^dr4 = Dates.Date(0):Dates.Day(1):Dates.Date(20000, 1, 1)$/;"	v
dr4	stdlib/Dates/test/ranges.jl	/^dr4 = Dates.DateTime(0):Dates.Day(1):Dates.DateTime(20000, 1, 1)$/;"	v
dr5	stdlib/Dates/test/ranges.jl	/^dr5 = Dates.Date(0):Dates.Day(1):Dates.Date(200000, 1, 1)$/;"	v
dr5	stdlib/Dates/test/ranges.jl	/^dr5 = Dates.DateTime(0):Dates.Day(1):Dates.DateTime(200000, 1, 1)$/;"	v
dr6	stdlib/Dates/test/ranges.jl	/^dr6 = Dates.Date(0):Dates.Day(1):Dates.Date(2000000, 1, 1)$/;"	v
dr6	stdlib/Dates/test/ranges.jl	/^dr6 = Dates.DateTime(0):Dates.Day(1):Dates.DateTime(2000000, 1, 1)$/;"	v
dr7	stdlib/Dates/test/ranges.jl	/^dr7 = Dates.Date(0):Dates.Day(1):Dates.Date(20000000, 1, 1)$/;"	v
dr7	stdlib/Dates/test/ranges.jl	/^dr7 = Dates.DateTime(0):Dates.Day(1):Dates.DateTime(20000000, 1, 1)$/;"	v
dr8	stdlib/Dates/test/ranges.jl	/^dr8 = Dates.Date(0):Dates.Day(1):Dates.Date(200000000, 1, 1)$/;"	v
dr8	stdlib/Dates/test/ranges.jl	/^dr8 = Dates.DateTime(0):Dates.Day(1):Dates.DateTime(200000000, 1, 1)$/;"	v
dr8	stdlib/Dates/test/ranges.jl	/^dr8 = typemin(Dates.Time):Dates.Second(1):typemax(Dates.Time)$/;"	v
dr9	stdlib/Dates/test/ranges.jl	/^dr9 = typemin(Dates.Date):Dates.Day(1):typemax(Dates.Date)$/;"	v
dr9	stdlib/Dates/test/ranges.jl	/^dr9 = typemin(Dates.DateTime):Dates.Day(1):typemax(Dates.DateTime)$/;"	v
dr9	stdlib/Dates/test/ranges.jl	/^dr9 = typemin(Dates.Time):Dates.Nanosecond(1):typemax(Dates.Time)$/;"	v
dreal	stdlib/LinearAlgebra/test/lu.jl	/^dreal = randn(n)\/2$/;"	v
drop	base/iterators.jl	/^drop(xs, n::Integer) = Drop(xs, Int(n))$/;"	f
drop	base/iterators.jl	/^drop(xs::Drop, n::Integer) = Drop(xs.xs, Int(n) + xs.n)$/;"	f
drop	base/iterators.jl	/^drop(xs::Take, n::Integer) = Take(drop(xs.xs, Int(n)), max(0, xs.n - Int(n)))$/;"	f
drop_iteratorsize	base/iterators.jl	/^drop_iteratorsize(::IsInfinite) = IsInfinite()$/;"	f
drop_iteratorsize	base/iterators.jl	/^drop_iteratorsize(::SizeUnknown) = SizeUnknown()$/;"	f
drop_iteratorsize	base/iterators.jl	/^drop_iteratorsize(::Union{HasShape, HasLength}) = HasLength()$/;"	f
dropdims	base/abstractarraymath.jl	/^dropdims(A; dims) = _dropdims(A, dims)$/;"	f
dropstored!	stdlib/SparseArrays/src/sparsematrix.jl	/^dropstored!(A::AbstractSparseMatrixCSC, ::Colon) = dropstored!(A, :, :)$/;"	f
dropstored!	stdlib/SparseArrays/src/sparsematrix.jl	/^dropstored!(A::AbstractSparseMatrixCSC, ::Colon, ::Colon) = dropstored!(A, 1:size(A,1), 1:size(A/;"	f
dropstored!	stdlib/SparseArrays/src/sparsematrix.jl	/^dropstored!(A::AbstractSparseMatrixCSC, ::Colon, j::Union{Integer,AbstractVector}) = dropstored!/;"	f
dropstored!	stdlib/SparseArrays/src/sparsematrix.jl	/^dropstored!(A::AbstractSparseMatrixCSC, I::AbstractVector{<:Integer}, j::Integer) = dropstored!(/;"	f
dropstored!	stdlib/SparseArrays/src/sparsematrix.jl	/^dropstored!(A::AbstractSparseMatrixCSC, i::Integer, J::AbstractVector{<:Integer}) = dropstored!(/;"	f
dropstored!	stdlib/SparseArrays/src/sparsematrix.jl	/^dropstored!(A::AbstractSparseMatrixCSC, i::Union{Integer,AbstractVector}, ::Colon) = dropstored!/;"	f
dropstored!	stdlib/SparseArrays/src/sparsematrix.jl	/^function dropstored!(A::AbstractSparseMatrixCSC, i::Integer, j::Integer)$/;"	f
dropstored!	stdlib/SparseArrays/src/sparsematrix.jl	/^function dropstored!(A::AbstractSparseMatrixCSC,$/;"	f
dropstored!	stdlib/SparseArrays/src/sparsevector.jl	/^function dropstored!(x::SparseVector, i::Integer)$/;"	f
droptol!	stdlib/SparseArrays/src/sparsematrix.jl	/^droptol!(A::AbstractSparseMatrixCSC, tol; trim::Bool = true) =$/;"	f
droptol!	stdlib/SparseArrays/src/sparsevector.jl	/^droptol!(x::SparseVector, tol; trim::Bool = true) = fkeep!(x, (i, x) -> abs(x) > tol, trim)$/;"	f
dropzeros	stdlib/SparseArrays/src/sparsematrix.jl	/^dropzeros(A::AbstractSparseMatrixCSC; trim::Bool = true) = dropzeros!(copy(A), trim = trim)$/;"	f
dropzeros	stdlib/SparseArrays/src/sparsevector.jl	/^dropzeros(x::SparseVector; trim::Bool = true) = dropzeros!(copy(x), trim = trim)$/;"	f
dropzeros!	stdlib/SparseArrays/src/sparsematrix.jl	/^dropzeros!(A::AbstractSparseMatrixCSC; trim::Bool = true) = fkeep!(A, (i, j, x) -> !iszero(x), t/;"	f
dropzeros!	stdlib/SparseArrays/src/sparsevector.jl	/^dropzeros!(x::SparseVector; trim::Bool = true) = fkeep!(x, (i, x) -> !iszero(x), trim)$/;"	f
drs	stdlib/Dates/test/ranges.jl	/^drs = Any[dr, dr1, dr2, dr3, dr4, dr5, dr6, dr7, dr8, dr9, dr10,$/;"	v
drs	stdlib/Dates/test/ranges.jl	/^drs = Any[dr, dr1, dr2, dr3, dr8, dr9, dr10,$/;"	v
drs2	stdlib/Dates/test/ranges.jl	/^drs2 = map(x->Dates.Date(first(x)):step(x):Dates.Date(last(x)), drs)$/;"	v
ds	stdlib/SharedArrays/test/runtests.jl	/^ds = deepcopy(d)$/;"	v
dsfmt-2.2/dSFMT.c	deps/patches/dSFMT.c.patch	/^--- dsfmt-2.2\/dSFMT.c	2012-06-29 03:24:27.000000000 -0400$/;"	m
dsfmt-2.2/dSFMT.h	deps/patches/dSFMT.h.patch	/^--- dsfmt-2.2\/dSFMT.h	2012-06-29 03:24:27.000000000 -0400$/;"	m
dsfmt_fill_array_close1_open2!	stdlib/Random/src/DSFMT.jl	/^function dsfmt_fill_array_close1_open2!(s::DSFMT_state, A::Ptr{Float64}, n::Int)$/;"	f
dsfmt_fill_array_close_open!	stdlib/Random/src/DSFMT.jl	/^function dsfmt_fill_array_close_open!(s::DSFMT_state, A::Ptr{Float64}, n::Int)$/;"	f
dsfmt_get_idstring	stdlib/Random/src/DSFMT.jl	/^function dsfmt_get_idstring()$/;"	f
dsfmt_get_min_array_size	stdlib/Random/src/DSFMT.jl	/^function dsfmt_get_min_array_size()$/;"	f
dsfmt_gv_init_by_array	stdlib/Random/src/DSFMT.jl	/^function dsfmt_gv_init_by_array(seed::Vector{UInt32})$/;"	f
dsfmt_init_by_array	stdlib/Random/src/DSFMT.jl	/^function dsfmt_init_by_array(s::DSFMT_state, seed::Vector{UInt32})$/;"	f
dsfmt_init_gen_rand	stdlib/Random/src/DSFMT.jl	/^function dsfmt_init_gen_rand(s::DSFMT_state, seed::UInt32)$/;"	f
dsfmt_jump	stdlib/Random/src/DSFMT.jl	/^function dsfmt_jump(s::DSFMT_state, jp::GF2X)$/;"	f
dsfmt_jump_add!	stdlib/Random/src/DSFMT.jl	/^function dsfmt_jump_add!(dest::AbstractVector{UInt64}, src::Vector{UInt64})$/;"	f
dsfmt_jump_next_state!	stdlib/Random/src/DSFMT.jl	/^function dsfmt_jump_next_state!(mts::Vector{UInt64})$/;"	f
dsfmt_min_array_size	stdlib/Random/src/DSFMT.jl	/^const dsfmt_min_array_size = dsfmt_get_min_array_size()$/;"	v
dst::typeof	base/array.jl	/^    dst::typeof(I) = ntuple(i-> _findin(I[i], i < n ? (1:sz[i]) : (1:s)), n)::typeof(I)$/;"	f
dt_compare	src/jltypes.c	/^static int dt_compare(const void *ap, const void *bp) JL_NOTSAFEPOINT$/;"	f	typeref:typename:int	file:
dtyp	stdlib/SuiteSparse/src/cholmod_h.jl	/^dtyp(::Type{ComplexF32}) = SINGLE$/;"	f
dtyp	stdlib/SuiteSparse/src/cholmod_h.jl	/^dtyp(::Type{ComplexF64}) = DOUBLE$/;"	f
dtyp	stdlib/SuiteSparse/src/cholmod_h.jl	/^dtyp(::Type{Float32}) = SINGLE$/;"	f
dtyp	stdlib/SuiteSparse/src/cholmod_h.jl	/^dtyp(::Type{Float64}) = DOUBLE$/;"	f
duimg	stdlib/LinearAlgebra/test/lu.jl	/^duimg  = randn(n-1)\/2$/;"	v
dummy_metafmt	stdlib/Logging/test/runtests.jl	/^    function dummy_metafmt(level, _module, group, id, file, line)$/;"	f
dummy_uuid	base/loading.jl	/^dummy_uuid(project_file::String) = uuid5(ns_dummy_uuid, realpath(project_file))$/;"	f
dummyloc	test/show.jl	/^dummyloc(m::Method) = :nofile, 123456789$/;"	f
dump	base/meta.jl	/^macro dump(expr)$/;"	f
dump	base/show.jl	/^dump(io::IOContext, x::Module, n::Int, indent) = print(io, "Module ", x)$/;"	f
dump	base/show.jl	/^dump(io::IOContext, x::Ptr,    n::Int, indent) = print(io, x)$/;"	f
dump	base/show.jl	/^dump(io::IOContext, x::String, n::Int, indent) = (print(io, "String "); show(io, x))$/;"	f
dump	base/show.jl	/^dump(io::IOContext, x::Symbol, n::Int, indent) = print(io, typeof(x), " ", x)$/;"	f
dump	base/show.jl	/^dump(io::IOContext, x::Union,  n::Int, indent) = print(io, x)$/;"	f
dump	base/show.jl	/^function dump(arg; maxdepth=DUMP_DEFAULT_MAXDEPTH)$/;"	f
dump	base/show.jl	/^function dump(io::IO, @nospecialize(x); maxdepth=DUMP_DEFAULT_MAXDEPTH)$/;"	f
dump	base/show.jl	/^function dump(io::IOContext, @nospecialize(x), n::Int, indent)$/;"	f
dump	base/show.jl	/^function dump(io::IOContext, x::Array, n::Int, indent)$/;"	f
dump	base/show.jl	/^function dump(io::IOContext, x::DataType, n::Int, indent)$/;"	f
dump	base/show.jl	/^function dump(io::IOContext, x::SimpleVector, n::Int, indent)$/;"	f
dump	src/clangsa/GCChecker.cpp	/^            void dump() const {$/;"	f	struct:__anon9c5a21540111::GCChecker::ValueState	typeref:typename:void	file:
dump	src/llvm-alloc-opt.cpp	/^JL_USED_FUNC void Optimizer::AllocUseInfo::dump()$/;"	f	class:__anon0a1571000111::Optimizer::AllocUseInfo	typeref:typename:JL_USED_FUNC void
dumpBitVectorValues	src/llvm-late-gc-lowering.cpp	/^static void dumpBitVectorValues(State &S, BitVector &BV) {$/;"	f	typeref:typename:void	file:
dumpColorAssignments	src/llvm-late-gc-lowering.cpp	/^JL_USED_FUNC static void dumpColorAssignments(const State &S, std::vector<int> &Colors)$/;"	f	typeref:typename:JL_USED_FUNC void	file:
dumpLivenessState	src/llvm-late-gc-lowering.cpp	/^JL_USED_FUNC static void dumpLivenessState(Function &F, State &S) {$/;"	f	typeref:typename:JL_USED_FUNC void	file:
dumpSafepointsForBBName	src/llvm-late-gc-lowering.cpp	/^JL_USED_FUNC static void dumpSafepointsForBBName(Function &F, State &S, const char *BBName) {$/;"	f	typeref:typename:JL_USED_FUNC void	file:
dumpState	src/clangsa/GCChecker.cpp	/^void GCChecker::dumpState(const ProgramStateRef &State) {$/;"	f	class:GCChecker	typeref:typename:void
dump_compiles_stream	src/codegen.cpp	/^static JL_STREAM *dump_compiles_stream = NULL;$/;"	v	typeref:typename:JL_STREAM *	file:
dump_cpu_spec	src/processor.cpp	/^static inline void dump_cpu_spec(uint32_t cpu, const FeatureList<n> &features,$/;"	f	namespace:__anon839834ed0111	typeref:typename:void	file:
dump_elts	base/show.jl	/^function dump_elts(io::IOContext, x::Array, n::Int, indent, i0, i1)$/;"	f
dumpbitcache	base/bitarray.jl	/^dumpbitcache(Bc::Vector{UInt64}, bind::Int, C::Vector{Bool}) =$/;"	f
dumpsubtypes	stdlib/InteractiveUtils/src/InteractiveUtils.jl	/^function dumpsubtypes(io::IO, x::DataType, m::Module, n::Int, indent)$/;"	f
dumptype	stdlib/InteractiveUtils/src/InteractiveUtils.jl	/^function dumptype(io::IO, @nospecialize(x), n::Int, indent)$/;"	f
dup	base/libc.jl	/^    function dup(src::WindowsRawSocket)$/;"	f
dup	base/libc.jl	/^    function dup(src::WindowsRawSocket, target::RawFD)$/;"	f
dup	base/libc.jl	/^dup(src::RawFD, target::RawFD) = systemerror("dup", -1 ==$/;"	f
dup	base/libc.jl	/^dup(x::RawFD) = ccall((@static Sys.iswindows() ? :_dup : :dup), RawFD, (RawFD,), x)$/;"	f
dureal	stdlib/LinearAlgebra/test/lu.jl	/^dureal = randn(n-1)\/2$/;"	v
dvi	deps/srccache/patchelf-0.9/Makefile.in	/^dvi: dvi-recursive$/;"	t
dvi	deps/srccache/patchelf-0.9/src/Makefile.in	/^dvi: dvi-am$/;"	t
dvi	deps/srccache/patchelf-0.9/tests/Makefile.in	/^dvi: dvi-am$/;"	t
dvi-am	deps/srccache/patchelf-0.9/Makefile.in	/^dvi-am:$/;"	t
dvi-am	deps/srccache/patchelf-0.9/src/Makefile.in	/^dvi-am:$/;"	t
dvi-am	deps/srccache/patchelf-0.9/tests/Makefile.in	/^dvi-am:$/;"	t
dvidir	deps/srccache/patchelf-0.9/Makefile.in	/^dvidir = @dvidir@$/;"	m
dvidir	deps/srccache/patchelf-0.9/src/Makefile.in	/^dvidir = @dvidir@$/;"	m
dvidir	deps/srccache/patchelf-0.9/tests/Makefile.in	/^dvidir = @dvidir@$/;"	m
dwAddr	src/stackwalk.c	/^    DWORD64 dwAddr;$/;"	m	struct:__anon8a94e5d20108	typeref:typename:DWORD64	file:
dynamic_pad	base/printf.jl	/^function dynamic_pad(m, val, c::Char)$/;"	f
dynamic_test	test/docs.jl	/^dynamic_test = DynamicDocType("test 1")$/;"	v
dynamic_test.x	test/docs.jl	/^dynamic_test.x = "test 2"$/;"	v
dynstack_t	test/gcext/gcext.c	/^} dynstack_t;$/;"	t	typeref:struct:__anonf90ca10a0108	file:
e	src/interpreter.c	/^    jl_value_t *e;$/;"	m	struct:interpret_toplevel_expr_in_args	typeref:typename:jl_value_t *	file:
e^A	stdlib/LinearAlgebra/src/dense.jl	/^e^A = \\\\sum_{n=0}^{\\\\infty} \\\\frac{A^n}{n!}.$/;"	v
e_ehsize	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Half	e_ehsize;		\/* ELF header size in bytes *\/$/;"	m	struct:__anonff7a58690108	typeref:typename:Elf32_Half
e_ehsize	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Half	e_ehsize;		\/* ELF header size in bytes *\/$/;"	m	struct:__anonff7a58690208	typeref:typename:Elf64_Half
e_entry	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Addr	e_entry;		\/* Entry point virtual address *\/$/;"	m	struct:__anonff7a58690108	typeref:typename:Elf32_Addr
e_entry	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Addr	e_entry;		\/* Entry point virtual address *\/$/;"	m	struct:__anonff7a58690208	typeref:typename:Elf64_Addr
e_flags	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word	e_flags;		\/* Processor-specific flags *\/$/;"	m	struct:__anonff7a58690108	typeref:typename:Elf32_Word
e_flags	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Word	e_flags;		\/* Processor-specific flags *\/$/;"	m	struct:__anonff7a58690208	typeref:typename:Elf64_Word
e_ident	deps/srccache/patchelf-0.9/src/elf.h	/^  unsigned char	e_ident[EI_NIDENT];	\/* Magic number and other info *\/$/;"	m	struct:__anonff7a58690108	typeref:typename:unsigned char[]
e_ident	deps/srccache/patchelf-0.9/src/elf.h	/^  unsigned char	e_ident[EI_NIDENT];	\/* Magic number and other info *\/$/;"	m	struct:__anonff7a58690208	typeref:typename:unsigned char[]
e_machine	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Half	e_machine;		\/* Architecture *\/$/;"	m	struct:__anonff7a58690108	typeref:typename:Elf32_Half
e_machine	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Half	e_machine;		\/* Architecture *\/$/;"	m	struct:__anonff7a58690208	typeref:typename:Elf64_Half
e_phentsize	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Half	e_phentsize;		\/* Program header table entry size *\/$/;"	m	struct:__anonff7a58690108	typeref:typename:Elf32_Half
e_phentsize	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Half	e_phentsize;		\/* Program header table entry size *\/$/;"	m	struct:__anonff7a58690208	typeref:typename:Elf64_Half
e_phnum	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Half	e_phnum;		\/* Program header table entry count *\/$/;"	m	struct:__anonff7a58690108	typeref:typename:Elf32_Half
e_phnum	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Half	e_phnum;		\/* Program header table entry count *\/$/;"	m	struct:__anonff7a58690208	typeref:typename:Elf64_Half
e_phoff	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Off	e_phoff;		\/* Program header table file offset *\/$/;"	m	struct:__anonff7a58690108	typeref:typename:Elf32_Off
e_phoff	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Off	e_phoff;		\/* Program header table file offset *\/$/;"	m	struct:__anonff7a58690208	typeref:typename:Elf64_Off
e_shentsize	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Half	e_shentsize;		\/* Section header table entry size *\/$/;"	m	struct:__anonff7a58690108	typeref:typename:Elf32_Half
e_shentsize	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Half	e_shentsize;		\/* Section header table entry size *\/$/;"	m	struct:__anonff7a58690208	typeref:typename:Elf64_Half
e_shnum	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Half	e_shnum;		\/* Section header table entry count *\/$/;"	m	struct:__anonff7a58690108	typeref:typename:Elf32_Half
e_shnum	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Half	e_shnum;		\/* Section header table entry count *\/$/;"	m	struct:__anonff7a58690208	typeref:typename:Elf64_Half
e_shoff	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Off	e_shoff;		\/* Section header table file offset *\/$/;"	m	struct:__anonff7a58690108	typeref:typename:Elf32_Off
e_shoff	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Off	e_shoff;		\/* Section header table file offset *\/$/;"	m	struct:__anonff7a58690208	typeref:typename:Elf64_Off
e_shstrndx	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Half	e_shstrndx;		\/* Section header string table index *\/$/;"	m	struct:__anonff7a58690108	typeref:typename:Elf32_Half
e_shstrndx	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Half	e_shstrndx;		\/* Section header string table index *\/$/;"	m	struct:__anonff7a58690208	typeref:typename:Elf64_Half
e_type	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Half	e_type;			\/* Object file type *\/$/;"	m	struct:__anonff7a58690108	typeref:typename:Elf32_Half
e_type	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Half	e_type;			\/* Object file type *\/$/;"	m	struct:__anonff7a58690208	typeref:typename:Elf64_Half
e_version	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word	e_version;		\/* Object file version *\/$/;"	m	struct:__anonff7a58690108	typeref:typename:Elf32_Word
e_version	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Word	e_version;		\/* Object file version *\/$/;"	m	struct:__anonff7a58690208	typeref:typename:Elf64_Word
eachcol	base/abstractarraymath.jl	/^eachcol(A::AbstractVecOrMat) = (view(A, :, i) for i in axes(A, 2))$/;"	f
eachindex	base/abstractarray.jl	/^eachindex(::IndexLinear, A::AbstractArray) = (@_inline_meta; OneTo(length(A)))$/;"	f
eachindex	base/abstractarray.jl	/^eachindex(::IndexLinear, A::AbstractVector) = (@_inline_meta; axes1(A))$/;"	f
eachindex	base/abstractarray.jl	/^eachindex(A::AbstractArray) = (@_inline_meta(); eachindex(IndexStyle(A), A))$/;"	f
eachindex	base/abstractarray.jl	/^eachindex(A::AbstractVector) = (@_inline_meta(); axes1(A))$/;"	f
eachindex	base/abstractarray.jl	/^eachindex(itrs...) = keys(itrs...)$/;"	f
eachindex	base/abstractarray.jl	/^function eachindex(::IndexLinear, A::AbstractArray, B::AbstractArray...)$/;"	f
eachindex	base/abstractarray.jl	/^function eachindex(A::AbstractArray, B::AbstractArray)$/;"	f
eachindex	base/abstractarray.jl	/^function eachindex(A::AbstractArray, B::AbstractArray...)$/;"	f
eachindex	base/missing.jl	/^eachindex(itr::SkipMissing) =$/;"	f
eachindex	base/multidimensional.jl	/^    @inline function eachindex(::IndexCartesian, A::AbstractArray, B::AbstractArray...)$/;"	f
eachindex	base/multidimensional.jl	/^    eachindex(::IndexCartesian, A::AbstractArray) = CartesianIndices(axes(A))$/;"	f
eachline	base/io.jl	/^function eachline(filename::AbstractString; keep::Bool=false)$/;"	f
eachline	base/io.jl	/^function eachline(stream::IO=stdin; keep::Bool=false)$/;"	f
eachline	base/process.jl	/^function eachline(cmd::AbstractCmd; keep::Bool=false)$/;"	f
eachmatch	base/regex.jl	/^eachmatch(re::Regex, str::AbstractString; overlap = false) =$/;"	f
eachmethod	src/gen_sysimg_symtab.jl	/^function eachmethod(f, mods = Base.loaded_modules_array())$/;"	f
eachrow	base/abstractarraymath.jl	/^eachrow(A::AbstractVecOrMat) = (view(A, i, :) for i in axes(A, 1))$/;"	f
eachslice	base/abstractarraymath.jl	/^@inline function eachslice(A::AbstractArray; dims)$/;"	f
eager-any	src/utils.scm	/^(define (eager-any pred lst)$/;"	f
eager_ambiguity_printing	src/gf.c	/^const int eager_ambiguity_printing = 0;$/;"	v	typeref:typename:const int
early_inline_special_case	base/compiler/ssair/inlining.jl	/^function early_inline_special_case(ir::IRCode, s::Signature, e::Expr, params::Params,$/;"	f
easter	stdlib/Dates/test/adjusters.jl	/^        function easter(y)$/;"	f
eatindent	stdlib/Markdown/src/parse/util.jl	/^function eatindent(io::IO, n = 3)$/;"	f
echo	stdlib/Serialization/test/runtests.jl	/^    echo(x)=x$/;"	f
echo	stdlib/Serialization/test/runtests.jl	/^echo(x) = x$/;"	f
echocmd	test/spawn.jl	/^echocmd = `echo`$/;"	v
edges	src/julia.h	/^    jl_value_t *edges; \/\/ forward edges to method instances that must be invalidated$/;"	m	struct:_jl_code_info_t	typeref:typename:jl_value_t *
edges_map	src/dump.c	/^htable_t edges_map;$/;"	v	typeref:typename:htable_t
edit	stdlib/InteractiveUtils/src/editless.jl	/^edit(f)                   = edit(functionloc(f)...)$/;"	f
edit	stdlib/InteractiveUtils/src/editless.jl	/^edit(f, @nospecialize t)  = edit(functionloc(f,t)...)$/;"	f
edit	stdlib/InteractiveUtils/src/editless.jl	/^edit(file, line::Integer) = error("could not find source file for function")$/;"	f
edit	stdlib/InteractiveUtils/src/editless.jl	/^edit(m::Module) = edit(pathof(m))$/;"	f
edit	stdlib/InteractiveUtils/src/editless.jl	/^function edit(path::AbstractString, line::Integer=0)$/;"	f
edit!	stdlib/REPL/test/lineedit.jl	/^    edit!(f) = transform!(f, s)[1]$/;"	f
edit_abort	stdlib/REPL/src/LineEdit.jl	/^function edit_abort(s, confirm::Bool=options(s).confirm_exit; key="^D")$/;"	f
edit_backspace	stdlib/REPL/src/LineEdit.jl	/^function edit_backspace(buf::IOBuffer, align::Bool=false, adjust::Bool=false)$/;"	f
edit_backspace	stdlib/REPL/src/LineEdit.jl	/^function edit_backspace(s::PromptState, align::Bool=options(s).backspace_align,$/;"	f
edit_clear	stdlib/REPL/src/LineEdit.jl	/^edit_clear(buf::IOBuffer) = truncate(buf, 0)$/;"	f
edit_clear	stdlib/REPL/src/LineEdit.jl	/^function edit_clear(s::MIState)$/;"	f
edit_copy_region	stdlib/REPL/src/LineEdit.jl	/^function edit_copy_region(s::MIState)$/;"	f
edit_delete	stdlib/REPL/src/LineEdit.jl	/^function edit_delete(buf::IOBuffer)$/;"	f
edit_delete	stdlib/REPL/src/LineEdit.jl	/^function edit_delete(s)$/;"	f
edit_delete_next_word	stdlib/REPL/src/LineEdit.jl	/^function edit_delete_next_word(buf::IOBuffer)$/;"	f
edit_delete_next_word	stdlib/REPL/src/LineEdit.jl	/^function edit_delete_next_word(s)$/;"	f
edit_delete_prev_word	stdlib/REPL/src/LineEdit.jl	/^function edit_delete_prev_word(buf::IOBuffer)$/;"	f
edit_delete_prev_word	stdlib/REPL/src/LineEdit.jl	/^function edit_delete_prev_word(s::MIState)$/;"	f
edit_exchange_point_and_mark	stdlib/REPL/src/LineEdit.jl	/^function edit_exchange_point_and_mark(buf::IOBuffer)$/;"	f
edit_exchange_point_and_mark	stdlib/REPL/src/LineEdit.jl	/^function edit_exchange_point_and_mark(s::MIState)$/;"	f
edit_indent	stdlib/REPL/src/LineEdit.jl	/^function edit_indent(buf::IOBuffer, num::Int, multiline::Bool)::Bool$/;"	f
edit_indent	stdlib/REPL/src/LineEdit.jl	/^function edit_indent(s::MIState, num::Int)$/;"	f
edit_indent_left	stdlib/REPL/src/LineEdit.jl	/^edit_indent_left(s::MIState, n=1) = edit_indent(s, -n)$/;"	f
edit_indent_right	stdlib/REPL/src/LineEdit.jl	/^edit_indent_right(s::MIState, n=1) = edit_indent(s, n)$/;"	f
edit_insert	stdlib/REPL/src/LineEdit.jl	/^function edit_insert(buf::IOBuffer, c)$/;"	f
edit_insert	stdlib/REPL/src/LineEdit.jl	/^function edit_insert(s::PromptState, c)$/;"	f
edit_insert_newline	stdlib/REPL/src/LineEdit.jl	/^function edit_insert_newline(s::PromptState, align::Int = 0 - options(s).auto_indent)$/;"	f
edit_insert_tab	stdlib/REPL/src/LineEdit.jl	/^function edit_insert_tab(buf::IOBuffer, jump_spaces=false, delete_trailing=jump_spaces)$/;"	f
edit_kill_line	stdlib/REPL/src/LineEdit.jl	/^function edit_kill_line(s::MIState, backwards::Bool=false)$/;"	f
edit_kill_line_backwards	stdlib/REPL/src/LineEdit.jl	/^edit_kill_line_backwards(s) = edit_kill_line(s, true)$/;"	f
edit_kill_line_forwards	stdlib/REPL/src/LineEdit.jl	/^edit_kill_line_forwards(s) = edit_kill_line(s, false)$/;"	f
edit_kill_region	stdlib/REPL/src/LineEdit.jl	/^function edit_kill_region(s::MIState)$/;"	f
edit_lower_case	stdlib/REPL/src/LineEdit.jl	/^function edit_lower_case(s)$/;"	f
edit_move_down	stdlib/REPL/src/LineEdit.jl	/^function edit_move_down(buf::IOBuffer)$/;"	f
edit_move_down	stdlib/REPL/src/LineEdit.jl	/^function edit_move_down(s)$/;"	f
edit_move_left	stdlib/REPL/src/LineEdit.jl	/^edit_move_left(s::PromptState) = edit_move_left(s.input_buffer) ? refresh_line(s) : false$/;"	f
edit_move_left	stdlib/REPL/src/LineEdit.jl	/^function edit_move_left(buf::IOBuffer)$/;"	f
edit_move_right	stdlib/REPL/src/LineEdit.jl	/^edit_move_right(s::PromptState) = edit_move_right(s.input_buffer) ? refresh_line(s) : false$/;"	f
edit_move_right	stdlib/REPL/src/LineEdit.jl	/^function edit_move_right(buf::IOBuffer)$/;"	f
edit_move_up	stdlib/REPL/src/LineEdit.jl	/^function edit_move_up(buf::IOBuffer)$/;"	f
edit_move_up	stdlib/REPL/src/LineEdit.jl	/^function edit_move_up(s)$/;"	f
edit_move_word_left	stdlib/REPL/src/LineEdit.jl	/^function edit_move_word_left(s)$/;"	f
edit_move_word_right	stdlib/REPL/src/LineEdit.jl	/^function edit_move_word_right(s)$/;"	f
edit_redo!	stdlib/REPL/src/LineEdit.jl	/^edit_redo!(s) = nothing$/;"	f
edit_redo!	stdlib/REPL/src/LineEdit.jl	/^function edit_redo!(s::MIState)$/;"	f
edit_redo!	stdlib/REPL/src/LineEdit.jl	/^function edit_redo!(s::PromptState)$/;"	f
edit_replace_word_right	stdlib/REPL/src/LineEdit.jl	/^function edit_replace_word_right(buf::IOBuffer, replace::Function)$/;"	f
edit_replace_word_right	stdlib/REPL/src/LineEdit.jl	/^function edit_replace_word_right(s, replace::Function)$/;"	f
edit_shift_move	stdlib/REPL/src/LineEdit.jl	/^function edit_shift_move(s::MIState, move_function::Function)$/;"	f
edit_splice!	stdlib/REPL/src/LineEdit.jl	/^            edit_splice!(s, (prev_pos - sizeof(partial)) => prev_pos, p)$/;"	f
edit_splice!	stdlib/REPL/src/LineEdit.jl	/^        edit_splice!(buf, position(buf) => position(buf), s)$/;"	f
edit_splice!	stdlib/REPL/src/LineEdit.jl	/^        edit_splice!(s, (prev_pos - sizeof(partial)) => prev_pos, completions[1])$/;"	f
edit_splice!	stdlib/REPL/src/LineEdit.jl	/^edit_splice!(s, ins::AbstractString) = edit_splice!(s, region(s), ins)$/;"	f
edit_splice!	stdlib/REPL/src/LineEdit.jl	/^function edit_splice!(s, r::Region=region(s), ins::AbstractString = ""; rigid_mark::Bool=true)$/;"	f
edit_tab	stdlib/REPL/src/LineEdit.jl	/^function edit_tab(s::MIState, jump_spaces=false, delete_trailing=jump_spaces)$/;"	f
edit_title_case	stdlib/REPL/src/LineEdit.jl	/^function edit_title_case(s)$/;"	f
edit_transpose_chars	stdlib/REPL/src/LineEdit.jl	/^function edit_transpose_chars(buf::IOBuffer)$/;"	f
edit_transpose_chars	stdlib/REPL/src/LineEdit.jl	/^function edit_transpose_chars(s::MIState)$/;"	f
edit_transpose_lines_down!	stdlib/REPL/src/LineEdit.jl	/^function edit_transpose_lines_down!(buf::IOBuffer, reg::Region)$/;"	f
edit_transpose_lines_down!	stdlib/REPL/src/LineEdit.jl	/^function edit_transpose_lines_down!(s::MIState)$/;"	f
edit_transpose_lines_up!	stdlib/REPL/src/LineEdit.jl	/^function edit_transpose_lines_up!(buf::IOBuffer, reg::Region)$/;"	f
edit_transpose_lines_up!	stdlib/REPL/src/LineEdit.jl	/^function edit_transpose_lines_up!(s::MIState)$/;"	f
edit_transpose_words	stdlib/REPL/src/LineEdit.jl	/^function edit_transpose_words(buf::IOBuffer, mode=:emacs)$/;"	f
edit_transpose_words	stdlib/REPL/src/LineEdit.jl	/^function edit_transpose_words(s)$/;"	f
edit_undo!	stdlib/REPL/src/LineEdit.jl	/^edit_undo!(s) = nothing$/;"	f
edit_undo!	stdlib/REPL/src/LineEdit.jl	/^function edit_undo!(s::MIState)$/;"	f
edit_undo!	stdlib/REPL/src/LineEdit.jl	/^function edit_undo!(s::PromptState)$/;"	f
edit_upper_case	stdlib/REPL/src/LineEdit.jl	/^function edit_upper_case(s)$/;"	f
edit_werase	stdlib/REPL/src/LineEdit.jl	/^function edit_werase(buf::IOBuffer)$/;"	f
edit_werase	stdlib/REPL/src/LineEdit.jl	/^function edit_werase(s::MIState)$/;"	f
edit_yank	stdlib/REPL/src/LineEdit.jl	/^function edit_yank(s::MIState)$/;"	f
edit_yank_pop	stdlib/REPL/src/LineEdit.jl	/^function edit_yank_pop(s::MIState, require_previous_yank=true)$/;"	f
editor	stdlib/InteractiveUtils/src/editless.jl	/^function editor()$/;"	f
ee	test/bigint.jl	/^ee = typemax(Int64)$/;"	v
ef	test/core.jl	/^    @noinline ef(::J) where {J} = (J,X[1]) # Use T$/;"	f
ef	test/core.jl	/^    ef(::J, ::Int) where {J} = (T,J)$/;"	f
effect-free?	src/ast.scm	/^(define (effect-free? e)$/;"	f
egal	test/core.jl	/^egal(x, y) = (ccall(:jl_egal, Cint, (Any, Any), x, y) != 0) # make sure we are NOT testing code-/;"	f
egal_svecs	test/compiler/codegen.jl	/^function egal_svecs()$/;"	f
egal_tfunc	base/compiler/tfuncs.jl	/^function egal_tfunc(@nospecialize(x), @nospecialize(y))$/;"	f
egal_tfunc	test/compiler/inference.jl	/^    function egal_tfunc(a, b)$/;"	f
egal_types	src/builtins.c	/^static int egal_types(jl_value_t *a, jl_value_t *b, jl_typeenv_t *env) JL_NOTSAFEPOINT$/;"	f	typeref:typename:int	file:
eh	src/julia.h	/^    jl_handler_t *eh;$/;"	m	struct:_jl_task_t	typeref:typename:jl_handler_t *
eh_ctx	src/julia.h	/^    jl_jmp_buf eh_ctx;$/;"	m	struct:_jl_handler_t	typeref:typename:jl_jmp_buf
eigen	stdlib/LinearAlgebra/src/bidiag.jl	/^eigen(M::Bidiagonal) = Eigen(eigvals(M), eigvecs(M))$/;"	f
eigen	stdlib/LinearAlgebra/src/diagonal.jl	/^function eigen(D::Diagonal; permute::Bool=true, scale::Bool=true, sortby::Union{Function,Nothing/;"	f
eigen	stdlib/LinearAlgebra/src/eigen.jl	/^eigen(A::Number, B::Number) = eigen(fill(A,1,1), fill(B,1,1))$/;"	f
eigen	stdlib/LinearAlgebra/src/eigen.jl	/^eigen(x::Number) = Eigen([x], fill(one(x), 1, 1))$/;"	f
eigen	stdlib/LinearAlgebra/src/eigen.jl	/^function eigen(A::AbstractMatrix{TA}, B::AbstractMatrix{TB}; kws...) where {TA,TB}$/;"	f
eigen	stdlib/LinearAlgebra/src/eigen.jl	/^function eigen(A::AbstractMatrix{T}; permute::Bool=true, scale::Bool=true, sortby::Union{Functio/;"	f
eigen	stdlib/LinearAlgebra/src/symmetric.jl	/^function eigen(A::RealHermSymComplexHerm, irange::UnitRange)$/;"	f
eigen	stdlib/LinearAlgebra/src/symmetric.jl	/^function eigen(A::RealHermSymComplexHerm, vl::Real, vh::Real)$/;"	f
eigen	stdlib/LinearAlgebra/src/symmetric.jl	/^function eigen(A::RealHermSymComplexHerm; sortby::Union{Function,Nothing}=nothing)$/;"	f
eigen	stdlib/LinearAlgebra/src/triangular.jl	/^eigen(A::AbstractTriangular) = Eigen(eigvals(A), eigvecs(A))$/;"	f
eigen	stdlib/SparseArrays/src/linalg.jl	/^eigen(A::AbstractSparseMatrixCSC) =$/;"	f
eigen!	stdlib/LinearAlgebra/src/eigen.jl	/^function eigen!(A::StridedMatrix{T}, B::StridedMatrix{T}; sortby::Union{Function,Nothing}=eigsor/;"	f
eigen!	stdlib/LinearAlgebra/src/eigen.jl	/^function eigen!(A::StridedMatrix{T}; permute::Bool=true, scale::Bool=true, sortby::Union{Functio/;"	f
eigen!	stdlib/LinearAlgebra/src/symmetric.jl	/^eigen!(A::RealHermSymComplexHerm{<:BlasReal,<:StridedMatrix}, irange::UnitRange) = Eigen(LAPACK./;"	f
eigen!	stdlib/LinearAlgebra/src/symmetric.jl	/^eigen!(A::RealHermSymComplexHerm{<:BlasReal,<:StridedMatrix}; sortby::Union{Function,Nothing}=no/;"	f
eigen!	stdlib/LinearAlgebra/src/symmetric.jl	/^eigen!(A::RealHermSymComplexHerm{T,<:StridedMatrix}, vl::Real, vh::Real) where {T<:BlasReal} =$/;"	f
eigen!	stdlib/LinearAlgebra/src/symmetric.jl	/^function eigen!(A::HermOrSym{T,S}, B::HermOrSym{T,S}; sortby::Union{Function,Nothing}=nothing) w/;"	f
eigen!	stdlib/LinearAlgebra/src/symmetric.jl	/^function eigen!(A::Hermitian{T,S}, B::Hermitian{T,S}; sortby::Union{Function,Nothing}=nothing) w/;"	f
eigen!	stdlib/LinearAlgebra/src/tridiag.jl	/^eigen!(A::SymTridiagonal{<:BlasReal}) = Eigen(LAPACK.stegr!('V', A.dv, A.ev)...)$/;"	f
eigen!	stdlib/LinearAlgebra/src/tridiag.jl	/^eigen!(A::SymTridiagonal{<:BlasReal}, irange::UnitRange) =$/;"	f
eigen!	stdlib/LinearAlgebra/src/tridiag.jl	/^eigen!(A::SymTridiagonal{<:BlasReal}, vl::Real, vu::Real) =$/;"	f
eigmax	stdlib/LinearAlgebra/src/eigen.jl	/^function eigmax(A::Union{Number, AbstractMatrix}; permute::Bool=true, scale::Bool=true)$/;"	f
eigmax	stdlib/LinearAlgebra/src/symmetric.jl	/^eigmax(A::RealHermSymComplexHerm{<:Real,<:StridedMatrix}) = eigvals(A, size(A, 1):size(A, 1))[1]$/;"	f
eigmax	stdlib/LinearAlgebra/src/tridiag.jl	/^eigmax(A::SymTridiagonal) = eigvals(A, size(A, 1):size(A, 1))[1]$/;"	f
eigmin	stdlib/LinearAlgebra/src/eigen.jl	/^function eigmin(A::Union{Number, AbstractMatrix};$/;"	f
eigmin	stdlib/LinearAlgebra/src/symmetric.jl	/^eigmin(A::RealHermSymComplexHerm{<:Real,<:StridedMatrix}) = eigvals(A, 1:1)[1]$/;"	f
eigmin	stdlib/LinearAlgebra/src/tridiag.jl	/^eigmin(A::SymTridiagonal) = eigvals(A, 1:1)[1]$/;"	f
eigsortby	stdlib/LinearAlgebra/src/eigen.jl	/^eigsortby(λ::Complex) = (real(λ),imag(λ))$/;"	f
eigsortby	stdlib/LinearAlgebra/src/eigen.jl	/^eigsortby(λ::Real) = λ$/;"	f
eigtype	stdlib/LinearAlgebra/src/eigen.jl	/^eigtype(T) = promote_type(Float32, typeof(zero(T)\/sqrt(abs2(one(T)))))$/;"	f
eigvals	stdlib/LinearAlgebra/src/bidiag.jl	/^eigvals(M::Bidiagonal) = M.dv$/;"	f
eigvals	stdlib/LinearAlgebra/src/diagonal.jl	/^eigvals(D::Diagonal; permute::Bool=true, scale::Bool=true) =$/;"	f
eigvals	stdlib/LinearAlgebra/src/diagonal.jl	/^eigvals(D::Diagonal{<:Number}; permute::Bool=true, scale::Bool=true) = D.diag$/;"	f
eigvals	stdlib/LinearAlgebra/src/eigen.jl	/^eigvals(F::Union{Eigen, GeneralizedEigen}) = F.values$/;"	f
eigvals	stdlib/LinearAlgebra/src/eigen.jl	/^eigvals(x::Number; kwargs...) = imag(x) == 0 ? real(x) : x$/;"	f
eigvals	stdlib/LinearAlgebra/src/eigen.jl	/^function eigvals(A::AbstractMatrix{TA}, B::AbstractMatrix{TB}; kws...) where {TA,TB}$/;"	f
eigvals	stdlib/LinearAlgebra/src/symmetric.jl	/^function eigvals(A::RealHermSymComplexHerm)$/;"	f
eigvals	stdlib/LinearAlgebra/src/symmetric.jl	/^function eigvals(A::RealHermSymComplexHerm, irange::UnitRange)$/;"	f
eigvals	stdlib/LinearAlgebra/src/symmetric.jl	/^function eigvals(A::RealHermSymComplexHerm, vl::Real, vh::Real)$/;"	f
eigvals	stdlib/LinearAlgebra/src/triangular.jl	/^eigvals(A::AbstractTriangular) = diag(A)$/;"	f
eigvals!	stdlib/LinearAlgebra/src/eigen.jl	/^function eigvals!(A::StridedMatrix{<:BlasComplex}; permute::Bool=true, scale::Bool=true, sortby:/;"	f
eigvals!	stdlib/LinearAlgebra/src/eigen.jl	/^function eigvals!(A::StridedMatrix{<:BlasReal}; permute::Bool=true, scale::Bool=true, sortby::Un/;"	f
eigvals!	stdlib/LinearAlgebra/src/eigen.jl	/^function eigvals!(A::StridedMatrix{T}, B::StridedMatrix{T}; sortby::Union{Function,Nothing}=eigs/;"	f
eigvals!	stdlib/LinearAlgebra/src/symmetric.jl	/^eigvals!(A::HermOrSym{T,S}, B::HermOrSym{T,S}) where {T<:BlasReal,S<:StridedMatrix} =$/;"	f
eigvals!	stdlib/LinearAlgebra/src/symmetric.jl	/^eigvals!(A::Hermitian{T,S}, B::Hermitian{T,S}) where {T<:BlasComplex,S<:StridedMatrix} =$/;"	f
eigvals!	stdlib/LinearAlgebra/src/symmetric.jl	/^eigvals!(A::RealHermSymComplexHerm{<:BlasReal,<:StridedMatrix}) =$/;"	f
eigvals!	stdlib/LinearAlgebra/src/symmetric.jl	/^eigvals!(A::RealHermSymComplexHerm{<:BlasReal,<:StridedMatrix}, irange::UnitRange) =$/;"	f
eigvals!	stdlib/LinearAlgebra/src/symmetric.jl	/^eigvals!(A::RealHermSymComplexHerm{T,<:StridedMatrix}, vl::Real, vh::Real) where {T<:BlasReal} =$/;"	f
eigvals!	stdlib/LinearAlgebra/src/tridiag.jl	/^eigvals!(A::SymTridiagonal{<:BlasReal}) = LAPACK.stev!('N', A.dv, A.ev)[1]$/;"	f
eigvals!	stdlib/LinearAlgebra/src/tridiag.jl	/^eigvals!(A::SymTridiagonal{<:BlasReal}, irange::UnitRange) =$/;"	f
eigvals!	stdlib/LinearAlgebra/src/tridiag.jl	/^eigvals!(A::SymTridiagonal{<:BlasReal}, vl::Real, vu::Real) =$/;"	f
eigvecs	stdlib/LinearAlgebra/src/bidiag.jl	/^function eigvecs(M::Bidiagonal{T}) where T$/;"	f
eigvecs	stdlib/LinearAlgebra/src/diagonal.jl	/^eigvecs(D::Diagonal) = Matrix{eltype(D)}(I, size(D))$/;"	f
eigvecs	stdlib/LinearAlgebra/src/eigen.jl	/^eigvecs(A::AbstractMatrix, B::AbstractMatrix; kws...) = eigvecs(eigen(A, B; kws...))$/;"	f
eigvecs	stdlib/LinearAlgebra/src/eigen.jl	/^eigvecs(A::Union{Number, AbstractMatrix}; kws...) =$/;"	f
eigvecs	stdlib/LinearAlgebra/src/eigen.jl	/^eigvecs(F::Union{Eigen, GeneralizedEigen}) = F.vectors$/;"	f
eigvecs	stdlib/LinearAlgebra/src/symmetric.jl	/^eigvecs(A::HermOrSym) = eigvecs(eigen(A))$/;"	f
eigvecs	stdlib/LinearAlgebra/src/triangular.jl	/^function eigvecs(A::AbstractTriangular{T}) where T$/;"	f
eigvecs	stdlib/LinearAlgebra/src/triangular.jl	/^function eigvecs(A::LowerTriangular{<:BlasFloat,<:StridedMatrix})$/;"	f
eigvecs	stdlib/LinearAlgebra/src/triangular.jl	/^function eigvecs(A::UnitLowerTriangular{<:BlasFloat,<:StridedMatrix})$/;"	f
eigvecs	stdlib/LinearAlgebra/src/triangular.jl	/^function eigvecs(A::UnitUpperTriangular{<:BlasFloat,<:StridedMatrix})$/;"	f
eigvecs	stdlib/LinearAlgebra/src/triangular.jl	/^function eigvecs(A::UpperTriangular{<:BlasFloat,<:StridedMatrix})$/;"	f
eigvecs	stdlib/LinearAlgebra/src/tridiag.jl	/^eigvecs(A::SymTridiagonal) = eigen(A).vectors$/;"	f
eigvecs	stdlib/LinearAlgebra/src/tridiag.jl	/^eigvecs(A::SymTridiagonal{<:BlasFloat}, eigvals::Vector{<:Real}) = LAPACK.stein!(A.dv, A.ev, eig/;"	f
el	test/compiler/inference.jl	/^    el(x::T) where {T} = eltype(T)$/;"	f
el_same	base/range.jl	/^el_same(::Type, a, b) = promote_typejoin(a, b)$/;"	f
el_same	base/range.jl	/^el_same(::Type{T}, a::Type{<:AbstractArray{S,n}}, b::Type{<:AbstractArray{T,n}}) where {T,S,n} =/;"	f
el_same	base/range.jl	/^el_same(::Type{T}, a::Type{<:AbstractArray{T,n}}, b::Type{<:AbstractArray{S,n}}) where {T,S,n} =/;"	f
el_same	base/range.jl	/^el_same(::Type{T}, a::Type{<:AbstractArray{T,n}}, b::Type{<:AbstractArray{T,n}}) where {T,n}   =/;"	f
elapsed	base/util.jl	/^macro elapsed(ex)$/;"	f
eles	src/processor.cpp	/^    uint32_t eles[n];$/;"	m	struct:__anon839834ed0111::FeatureList	typeref:typename:uint32_t[]	file:
elfFile	deps/srccache/patchelf-0.9/src/patchelf.cc	/^        ElfFile * elfFile;$/;"	m	struct:ElfFile::CompPhdr	typeref:typename:ElfFile *	file:
elfFile	deps/srccache/patchelf-0.9/src/patchelf.cc	/^        ElfFile * elfFile;$/;"	m	struct:ElfFile::CompShdr	typeref:typename:ElfFile *	file:
elsize	base/abstractarray.jl	/^elsize(A::AbstractArray) = elsize(typeof(A))$/;"	f
elsize	base/array.jl	/^elsize(::Type{<:Array{T}}) where {T} = isbitsunion(T) ? bitsunionsize(T) : (allocatedinline(T) ?/;"	f
elsize	base/reinterpretarray.jl	/^elsize(::Type{<:ReinterpretArray{T}}) where {T} = sizeof(T)$/;"	f
elsize	base/reshapedarray.jl	/^elsize(::Type{<:ReshapedArray{<:Any,<:Any,P}}) where {P} = elsize(P)$/;"	f
elsize	base/strings/basic.jl	/^elsize(s::CodeUnits{T}) where {T} = sizeof(T)$/;"	f
elsize	base/subarray.jl	/^elsize(::Type{<:SubArray{<:Any,<:Any,P}}) where {P} = elsize(P)$/;"	f
elsize	src/julia.h	/^    uint16_t elsize;$/;"	m	struct:__anon055fe4270408	typeref:typename:uint16_t
elsz	src/flisp/flisp.h	/^    size_t elsz;$/;"	m	struct:_fltype_t	typeref:typename:size_t
elty	src/llvm-alloc-opt.cpp	/^        Type *elty;$/;"	m	struct:__anon0a1571000111::Optimizer::Field	typeref:typename:Type *	file:
eltype	base/abstractarray.jl	/^eltype(::Type{<:AbstractArray{E}}) where {E} = @isdefined(E) ? E : Any$/;"	f
eltype	base/abstractdict.jl	/^eltype(::Type{ValueIterator{D}}) where {D} = _tt2(eltype(D))$/;"	f
eltype	base/abstractdict.jl	/^function eltype(::Type{<:AbstractDict{K,V}}) where {K,V}$/;"	f
eltype	base/abstractset.jl	/^eltype(::Type{<:AbstractSet{T}}) where {T} = @isdefined(T) ? T : Any$/;"	f
eltype	base/array.jl	/^eltype(::Type) = Any$/;"	f
eltype	base/array.jl	/^eltype(::Type{Bottom}) = throw(ArgumentError("Union{} does not have elements"))$/;"	f
eltype	base/array.jl	/^eltype(x) = eltype(typeof(x))$/;"	f
eltype	base/bitset.jl	/^eltype(::Type{BitSet}) = Int$/;"	f
eltype	base/c.jl	/^eltype(::Type{Cstring}) = Cchar$/;"	f
eltype	base/c.jl	/^eltype(::Type{Cwstring}) = Cwchar_t$/;"	f
eltype	base/channels.jl	/^eltype(::Type{Channel{T}}) where {T} = T$/;"	f
eltype	base/char.jl	/^eltype(::Type{T}) where {T<:AbstractChar} = T$/;"	f
eltype	base/error.jl	/^eltype(::Type{ExponentialBackOff}) = Float64$/;"	f
eltype	base/essentials.jl	/^eltype(::Type{SimpleVector}) = Any$/;"	f
eltype	base/io.jl	/^eltype(::Type{<:EachLine}) = String$/;"	f
eltype	base/iterators.jl	/^eltype(::Type{<:ProductIterator{I}}) where {I} = _prod_eltype(I)$/;"	f
eltype	base/iterators.jl	/^eltype(::Type{<:Rest{I}}) where {I} = eltype(I)$/;"	f
eltype	base/iterators.jl	/^eltype(::Type{Count{S}}) where {S} = S$/;"	f
eltype	base/iterators.jl	/^eltype(::Type{Cycle{I}}) where {I} = eltype(I)$/;"	f
eltype	base/iterators.jl	/^eltype(::Type{Drop{I}}) where {I} = eltype(I)$/;"	f
eltype	base/iterators.jl	/^eltype(::Type{Enumerate{I}}) where {I} = Tuple{Int, eltype(I)}$/;"	f
eltype	base/iterators.jl	/^eltype(::Type{Filter{F,I}}) where {F,I} = eltype(I)$/;"	f
eltype	base/iterators.jl	/^eltype(::Type{Flatten{I}}) where {I} = eltype(eltype(I))$/;"	f
eltype	base/iterators.jl	/^eltype(::Type{Flatten{Tuple{}}}) = eltype(Tuple{})$/;"	f
eltype	base/iterators.jl	/^eltype(::Type{PartitionIterator{T}}) where {T} = Vector{eltype(T)}$/;"	f
eltype	base/iterators.jl	/^eltype(::Type{Repeated{O}}) where {O} = O$/;"	f
eltype	base/iterators.jl	/^eltype(::Type{Reverse{T}}) where {T} = eltype(T)$/;"	f
eltype	base/iterators.jl	/^eltype(::Type{Stateful{T, VS}} where VS) where {T} = eltype(T)$/;"	f
eltype	base/iterators.jl	/^eltype(::Type{Take{I}}) where {I} = eltype(I)$/;"	f
eltype	base/iterators.jl	/^eltype(::Type{Zip{Is}}) where {Is<:Tuple} = _zip_eltype(Is)$/;"	f
eltype	base/linked_list.jl	/^eltype(::Type{<:InvasiveLinkedList{T}}) where {T} = @isdefined(T) ? T : Any$/;"	f
eltype	base/linked_list.jl	/^eltype(::Type{<:LinkedList{T}}) where {T} = @isdefined(T) ? T : Any$/;"	f
eltype	base/missing.jl	/^eltype(::Type{SkipMissing{T}}) where {T} = nonmissingtype(eltype(T))$/;"	f
eltype	base/multidimensional.jl	/^    eltype(::Type{CartesianIndices{N,TT}}) where {N,TT} = CartesianIndex{N}$/;"	f
eltype	base/multidimensional.jl	/^    eltype(::Type{CartesianIndices{N}}) where {N} = CartesianIndex{N}$/;"	f
eltype	base/multidimensional.jl	/^    eltype(::Type{T}) where {T<:CartesianIndex} = eltype(fieldtype(T, :I))$/;"	f
eltype	base/namedtuple.jl	/^eltype(::Type{NamedTuple{names,T}}) where {names,T} = eltype(T)$/;"	f
eltype	base/number.jl	/^eltype(::Type{T}) where {T<:Number} = T$/;"	f
eltype	base/pair.jl	/^eltype(p::Type{Pair{A, B}}) where {A, B} = Union{A, B}$/;"	f
eltype	base/process.jl	/^eltype(::Type{Cmd}) = eltype(fieldtype(Cmd, :exec))$/;"	f
eltype	base/reflection.jl	/^eltype(::Type{MethodList}) = Method$/;"	f
eltype	base/refpointer.jl	/^eltype(x::Type{<:Ref{T}}) where {T} = @isdefined(T) ? T : Any$/;"	f
eltype	base/regex.jl	/^eltype(::Type{RegexMatchIterator}) = RegexMatch$/;"	f
eltype	base/reinterpretarray.jl	/^eltype(::Type{<:CyclePadding}) = Padding$/;"	f
eltype	base/reshapedarray.jl	/^eltype(::Type{<:ReshapedArrayIterator{I}}) where {I} = @isdefined(I) ? ReshapedIndex{eltype(I)} /;"	f
eltype	base/strings/basic.jl	/^eltype(::Type{<:AbstractString}) = Char # some string types may use another AbstractChar$/;"	f
eltype	base/strings/basic.jl	/^eltype(::Type{<:EachStringIndex}) = Int$/;"	f
eltype	base/strings/unicode.jl	/^eltype(::Type{GraphemeIterator{SubString{S}}}) where {S} = SubString{S}$/;"	f
eltype	base/strings/unicode.jl	/^eltype(::Type{GraphemeIterator{S}}) where {S} = SubString{S}$/;"	f
eltype	base/task.jl	/^eltype(::Type{CompositeException}) = Any$/;"	f
eltype	base/tuple.jl	/^eltype(::Type{Tuple{}}) = Bottom$/;"	f
eltype	base/tuple.jl	/^eltype(t::Type{<:Tuple}) = _compute_eltype(t)$/;"	f
eltype	base/tuple.jl	/^function eltype(t::Type{<:Tuple{Vararg{E}}}) where {E}$/;"	f
eltype	base/twiceprecision.jl	/^eltype(::Type{TwicePrecision{T}}) where {T} = T$/;"	f
eltype	src/flisp/flisp.h	/^    struct _fltype_t *eltype;  \/\/ for arrays$/;"	m	struct:_fltype_t	typeref:struct:_fltype_t *
eltype	stdlib/LinearAlgebra/src/factorization.jl	/^eltype(::Type{<:Factorization{T}}) where {T} = T$/;"	f
eltype	stdlib/LinearAlgebra/src/uniformscaling.jl	/^eltype(::Type{UniformScaling{T}}) where {T} = T$/;"	f
eltype	stdlib/SuiteSparse/src/cholmod.jl	/^eltype(::Type{Dense{T}}) where {T<:VTypes} = T$/;"	f
eltype	stdlib/SuiteSparse/src/cholmod.jl	/^eltype(::Type{Factor{T}}) where {T<:VTypes} = T$/;"	f
eltype	stdlib/SuiteSparse/src/cholmod.jl	/^eltype(::Type{Sparse{T}}) where {T<:VTypes} = T$/;"	f
eltypeof	base/abstractarray.jl	/^eltypeof(x) = typeof(x)$/;"	f
eltypeof	base/abstractarray.jl	/^eltypeof(x::AbstractArray) = eltype(x)$/;"	f
eltypes	base/broadcast.jl	/^eltypes(::Tuple{}) = Tuple{}$/;"	f
eltypes	base/broadcast.jl	/^eltypes(t::Tuple) = Tuple{_broadcast_getindex_eltype(t[1]), eltypes(tail(t)).types...}$/;"	f
eltypes	base/broadcast.jl	/^eltypes(t::Tuple{Any,Any}) = Tuple{_broadcast_getindex_eltype(t[1]), _broadcast_getindex_eltype(/;"	f
eltypes	base/broadcast.jl	/^eltypes(t::Tuple{Any}) = Tuple{_broadcast_getindex_eltype(t[1])}$/;"	f
emantissa	stdlib/Random/test/runtests.jl	/^emantissa           = Int64(2)^52$/;"	v
embedding	test/Makefile	/^embedding:$/;"	t
emit	test/testhelpers/llvmpasses.jl	/^function emit(f, tt...)$/;"	f
emitBasicBlockEndAnnot	src/disasm.cpp	/^void LineNumberAnnotatedWriter::emitBasicBlockEndAnnot($/;"	f	class:LineNumberAnnotatedWriter	typeref:typename:void
emitFunctionAnnot	src/disasm.cpp	/^void LineNumberAnnotatedWriter::emitFunctionAnnot($/;"	f	class:LineNumberAnnotatedWriter	typeref:typename:void
emitInstructionAnnot	src/disasm.cpp	/^void LineNumberAnnotatedWriter::emitInstructionAnnot($/;"	f	class:LineNumberAnnotatedWriter	typeref:typename:void
emit_LINE	test/loading.jl	/^macro emit_LINE()$/;"	f
emit_a_ccall	src/ccall.cpp	/^jl_cgval_t function_sig_t::emit_a_ccall($/;"	f	class:function_sig_t	typeref:typename:jl_cgval_t
emit_allocobj	src/cgutils.cpp	/^static Value *emit_allocobj(jl_codectx_t &ctx, size_t static_size, Value *jt)$/;"	f	typeref:typename:Value *	file:
emit_array_nd_index	src/cgutils.cpp	/^static Value *emit_array_nd_index($/;"	f	typeref:typename:Value *	file:
emit_arrayelsize	src/cgutils.cpp	/^static Value *emit_arrayelsize(jl_codectx_t &ctx, const jl_cgval_t &tinfo)$/;"	f	typeref:typename:Value *	file:
emit_arrayflags	src/cgutils.cpp	/^static Value *emit_arrayflags(jl_codectx_t &ctx, const jl_cgval_t &tinfo)$/;"	f	typeref:typename:Value *	file:
emit_arraylen	src/cgutils.cpp	/^static Value *emit_arraylen(jl_codectx_t &ctx, const jl_cgval_t &tinfo)$/;"	f	typeref:typename:Value *	file:
emit_arraylen_prim	src/cgutils.cpp	/^static Value *emit_arraylen_prim(jl_codectx_t &ctx, const jl_cgval_t &tinfo)$/;"	f	typeref:typename:Value *	file:
emit_arrayndims	src/cgutils.cpp	/^static Value *emit_arrayndims(jl_codectx_t &ctx, const jl_cgval_t &ary)$/;"	f	typeref:typename:Value *	file:
emit_arrayoffset	src/cgutils.cpp	/^static Value *emit_arrayoffset(jl_codectx_t &ctx, const jl_cgval_t &tinfo, int nd)$/;"	f	typeref:typename:Value *	file:
emit_arrayptr	src/cgutils.cpp	/^static Value *emit_arrayptr(jl_codectx_t &ctx, const jl_cgval_t &tinfo, bool isboxed = false)$/;"	f	typeref:typename:Value *	file:
emit_arrayptr	src/cgutils.cpp	/^static Value *emit_arrayptr(jl_codectx_t &ctx, const jl_cgval_t &tinfo, jl_value_t *ex, bool isb/;"	f	typeref:typename:Value *	file:
emit_arrayptr_internal	src/cgutils.cpp	/^static Value *emit_arrayptr_internal(jl_codectx_t &ctx, const jl_cgval_t &tinfo, Value *t, unsig/;"	f	typeref:typename:Value *	file:
emit_arraysize	src/cgutils.cpp	/^static Value *emit_arraysize(jl_codectx_t &ctx, const jl_cgval_t &tinfo, Value *dim)$/;"	f	typeref:typename:Value *	file:
emit_arraysize	src/cgutils.cpp	/^static Value *emit_arraysize(jl_codectx_t &ctx, const jl_cgval_t &tinfo, int dim)$/;"	f	typeref:typename:Value *	file:
emit_arraysize	src/cgutils.cpp	/^static Value *emit_arraysize(jl_codectx_t &ctx, const jl_cgval_t &tinfo, jl_value_t *ex, int dim/;"	f	typeref:typename:Value *	file:
emit_arraysize_for_unsafe_dim	src/cgutils.cpp	/^static Value *emit_arraysize_for_unsafe_dim(jl_codectx_t &ctx,$/;"	f	typeref:typename:Value *	file:
emit_assignment	src/codegen.cpp	/^static void emit_assignment(jl_codectx_t &ctx, jl_value_t *l, jl_value_t *r, ssize_t ssaval)$/;"	f	typeref:typename:void	file:
emit_bitcast	src/cgutils.cpp	/^static Value *emit_bitcast(jl_codectx_t &ctx, Value *v, Type *jl_value)$/;"	f	typeref:typename:Value *	file:
emit_bits_compare	src/codegen.cpp	/^static Value *emit_bits_compare(jl_codectx_t &ctx, const jl_cgval_t &arg1, const jl_cgval_t &arg/;"	f	typeref:typename:Value *	file:
emit_bitsunion_compare	src/codegen.cpp	/^static Value *emit_bitsunion_compare(jl_codectx_t &ctx, const jl_cgval_t &arg1, const jl_cgval_t/;"	f	typeref:typename:Value *	file:
emit_bounds_check	src/cgutils.cpp	/^static Value *emit_bounds_check(jl_codectx_t &ctx, const jl_cgval_t &ainfo, jl_value_t *ty, Valu/;"	f	typeref:typename:Value *	file:
emit_builtin_call	src/codegen.cpp	/^static bool emit_builtin_call(jl_codectx_t &ctx, jl_cgval_t *ret, jl_value_t *f,$/;"	f	typeref:typename:bool	file:
emit_call	src/codegen.cpp	/^static jl_cgval_t emit_call(jl_codectx_t &ctx, jl_expr_t *ex, jl_value_t *rt)$/;"	f	typeref:typename:jl_cgval_t	file:
emit_call_specfun_boxed	src/codegen.cpp	/^static jl_cgval_t emit_call_specfun_boxed(jl_codectx_t &ctx, StringRef specFunctionObject,$/;"	f	typeref:typename:jl_cgval_t	file:
emit_call_specfun_other	src/codegen.cpp	/^static jl_cgval_t emit_call_specfun_other(jl_codectx_t &ctx, jl_code_instance_t *codeinst, Strin/;"	f	typeref:typename:jl_cgval_t	file:
emit_ccall	src/ccall.cpp	/^static jl_cgval_t emit_ccall(jl_codectx_t &ctx, jl_value_t **args, size_t nargs)$/;"	f	typeref:typename:jl_cgval_t	file:
emit_cfunc_invalidate	src/codegen.cpp	/^static void emit_cfunc_invalidate($/;"	f	typeref:typename:void	file:
emit_cfunction	src/codegen.cpp	/^static jl_cgval_t emit_cfunction(jl_codectx_t &ctx, jl_value_t *output_type, const jl_cgval_t &f/;"	f	typeref:typename:jl_cgval_t	file:
emit_cglobal	src/ccall.cpp	/^static jl_cgval_t emit_cglobal(jl_codectx_t &ctx, jl_value_t **args, size_t nargs)$/;"	f	typeref:typename:jl_cgval_t	file:
emit_checked_srem_int	src/intrinsics.cpp	/^static Value *emit_checked_srem_int(jl_codectx_t &ctx, Value *x, Value *den)$/;"	f	typeref:typename:Value *	file:
emit_checked_var	src/codegen.cpp	/^static jl_cgval_t emit_checked_var(jl_codectx_t &ctx, Value *bp, jl_sym_t *name, bool isvol, MDN/;"	f	typeref:typename:jl_cgval_t	file:
emit_concretecheck	src/cgutils.cpp	/^static void emit_concretecheck(jl_codectx_t &ctx, Value *typ, const std::string &msg)$/;"	f	typeref:typename:void	file:
emit_condition	src/codegen.cpp	/^static Value *emit_condition(jl_codectx_t &ctx, const jl_cgval_t &condV, const std::string &msg)$/;"	f	typeref:typename:Value *	file:
emit_condition	src/codegen.cpp	/^static Value *emit_condition(jl_codectx_t &ctx, jl_value_t *cond, const std::string &msg)$/;"	f	typeref:typename:Value *	file:
emit_cpointercheck	src/cgutils.cpp	/^static void emit_cpointercheck(jl_codectx_t &ctx, const jl_cgval_t &x, const std::string &msg)$/;"	f	typeref:typename:void	file:
emit_datatype_isprimitivetype	src/cgutils.cpp	/^static Value *emit_datatype_isprimitivetype(jl_codectx_t &ctx, Value *dt)$/;"	f	typeref:typename:Value *	file:
emit_datatype_mutabl	src/cgutils.cpp	/^static Value *emit_datatype_mutabl(jl_codectx_t &ctx, Value *dt)$/;"	f	typeref:typename:Value *	file:
emit_datatype_name	src/cgutils.cpp	/^static Value *emit_datatype_name(jl_codectx_t &ctx, Value *dt)$/;"	f	typeref:typename:Value *	file:
emit_datatype_nfields	src/cgutils.cpp	/^static Value *emit_datatype_nfields(jl_codectx_t &ctx, Value *dt)$/;"	f	typeref:typename:Value *	file:
emit_datatype_size	src/cgutils.cpp	/^static Value *emit_datatype_size(jl_codectx_t &ctx, Value *dt)$/;"	f	typeref:typename:Value *	file:
emit_datatype_types	src/cgutils.cpp	/^static Value *emit_datatype_types(jl_codectx_t &ctx, Value *dt)$/;"	f	typeref:typename:Value *	file:
emit_defer_signal	src/cgutils.cpp	/^static Value *emit_defer_signal(jl_codectx_t &ctx)$/;"	f	typeref:typename:Value *	file:
emit_error	src/cgutils.cpp	/^static void emit_error(jl_codectx_t &ctx, const std::string &txt)$/;"	f	typeref:typename:void	file:
emit_expr	src/codegen.cpp	/^static jl_cgval_t emit_expr(jl_codectx_t &ctx, jl_value_t *expr, ssize_t ssaval)$/;"	f	file:
emit_f_is	src/codegen.cpp	/^static Value *emit_f_is(jl_codectx_t &ctx, const jl_cgval_t &arg1, const jl_cgval_t &arg2)$/;"	f	typeref:typename:Value *	file:
emit_finish	src/disasm.cpp	/^    void emit_finish(std::string &Out)$/;"	f	class:DILineInfoPrinter	typeref:typename:void	file:
emit_finish	src/disasm.cpp	/^void DILineInfoPrinter::emit_finish(raw_ostream &Out)$/;"	f	class:DILineInfoPrinter	typeref:typename:void
emit_function	src/codegen.cpp	/^static std::unique_ptr<Module> emit_function($/;"	f	typeref:typename:std::unique_ptr<Module>	file:
emit_function	src/julia.h	/^    jl_value_t *emit_function;$/;"	m	struct:__anon055fe4271b08	typeref:typename:jl_value_t *
emit_getfield	src/codegen.cpp	/^static jl_cgval_t emit_getfield(jl_codectx_t &ctx, const jl_cgval_t &strct, jl_sym_t *name)$/;"	f	typeref:typename:jl_cgval_t	file:
emit_getfield_knownidx	src/cgutils.cpp	/^static jl_cgval_t emit_getfield_knownidx(jl_codectx_t &ctx, const jl_cgval_t &strct, unsigned id/;"	f	typeref:typename:jl_cgval_t	file:
emit_getfield_unknownidx	src/cgutils.cpp	/^static bool emit_getfield_unknownidx(jl_codectx_t &ctx,$/;"	f	typeref:typename:bool	file:
emit_global	src/codegen.cpp	/^static jl_cgval_t emit_global(jl_codectx_t &ctx, jl_sym_t *sym)$/;"	f	typeref:typename:jl_cgval_t	file:
emit_globalref	src/codegen.cpp	/^static jl_cgval_t emit_globalref(jl_codectx_t &ctx, jl_module_t *mod, jl_sym_t *name)$/;"	f	typeref:typename:jl_cgval_t	file:
emit_ifelse	src/intrinsics.cpp	/^static jl_cgval_t emit_ifelse(jl_codectx_t &ctx, jl_cgval_t c, jl_cgval_t x, jl_cgval_t y, jl_va/;"	f	typeref:typename:jl_cgval_t	file:
emit_intrinsic	src/intrinsics.cpp	/^static jl_cgval_t emit_intrinsic(jl_codectx_t &ctx, intrinsic f, jl_value_t **args, size_t nargs/;"	f	typeref:typename:jl_cgval_t	file:
emit_invoke	src/codegen.cpp	/^static jl_cgval_t emit_invoke(jl_codectx_t &ctx, jl_expr_t *ex, jl_value_t *rt)$/;"	f	typeref:typename:jl_cgval_t	file:
emit_isa	src/cgutils.cpp	/^static std::pair<Value*, bool> emit_isa(jl_codectx_t &ctx, const jl_cgval_t &x, jl_value_t *type/;"	f	typeref:typename:std::pair<Value *,bool>	file:
emit_isconcrete	src/cgutils.cpp	/^static Value *emit_isconcrete(jl_codectx_t &ctx, Value *typ)$/;"	f	typeref:typename:Value *	file:
emit_isdefined	src/codegen.cpp	/^static jl_cgval_t emit_isdefined(jl_codectx_t &ctx, jl_value_t *sym)$/;"	f	typeref:typename:jl_cgval_t	file:
emit_jlcall	src/codegen.cpp	/^static CallInst *emit_jlcall(jl_codectx_t &ctx, Value *theFptr, Value *theF,$/;"	f	typeref:typename:CallInst *	file:
emit_last_age_field	src/codegen.cpp	/^static void emit_last_age_field(jl_codectx_t &ctx)$/;"	f	typeref:typename:void	file:
emit_lineinfo	src/disasm.cpp	/^    void emit_lineinfo(raw_ostream &Out, DIInliningInfo &DI)$/;"	f	class:DILineInfoPrinter	typeref:typename:void	file:
emit_lineinfo	src/disasm.cpp	/^    void emit_lineinfo(raw_ostream &Out, DILineInfo &DI)$/;"	f	class:DILineInfoPrinter	typeref:typename:void	file:
emit_lineinfo	src/disasm.cpp	/^    void emit_lineinfo(std::string &Out, T &DI)$/;"	f	class:DILineInfoPrinter	typeref:typename:void	file:
emit_lineinfo	src/disasm.cpp	/^void DILineInfoPrinter::emit_lineinfo(raw_ostream &Out, std::vector<DILineInfo> &DI)$/;"	f	class:DILineInfoPrinter	typeref:typename:void
emit_lineinfo_update	base/compiler/ssair/show.jl	/^    function emit_lineinfo_update(io::IO, linestart::String, lineidx::Int32)$/;"	f
emit_llvmcall	src/ccall.cpp	/^static jl_cgval_t emit_llvmcall(jl_codectx_t &ctx, jl_value_t **args, size_t nargs)$/;"	f	typeref:typename:jl_cgval_t	file:
emit_local	src/codegen.cpp	/^static jl_cgval_t emit_local(jl_codectx_t &ctx, jl_value_t *slotload)$/;"	f	typeref:typename:jl_cgval_t	file:
emit_memcpy	src/cgutils.cpp	/^static void emit_memcpy(jl_codectx_t &ctx, Value *dst, MDNode *tbaa_dst, Value *src, MDNode *tba/;"	f	typeref:typename:void	file:
emit_memcpy	src/cgutils.cpp	/^static void emit_memcpy(jl_codectx_t &ctx, Value *dst, MDNode *tbaa_dst, const jl_cgval_t &src,$/;"	f	typeref:typename:void	file:
emit_memcpy_llvm	src/cgutils.cpp	/^static void emit_memcpy_llvm(jl_codectx_t &ctx, Value *dst, MDNode *tbaa_dst, Value *src, MDNode/;"	f	typeref:typename:void	file:
emit_metadata	src/llvm-multiversioning.cpp	/^void CloneCtx::emit_metadata()$/;"	f	class:__anond5683ea40111::CloneCtx	typeref:typename:void
emit_n_varargs	src/cgutils.cpp	/^static Value *emit_n_varargs(jl_codectx_t &ctx)$/;"	f	typeref:typename:Value *	file:
emit_new_bits	src/cgutils.cpp	/^static Value *emit_new_bits(jl_codectx_t &ctx, Value *jt, Value *pval)$/;"	f	typeref:typename:Value *	file:
emit_new_struct	src/cgutils.cpp	/^static jl_cgval_t emit_new_struct(jl_codectx_t &ctx, jl_value_t *ty, size_t nargs, const jl_cgva/;"	f	typeref:typename:jl_cgval_t	file:
emit_nthptr	src/cgutils.cpp	/^static Value *emit_nthptr(jl_codectx_t &ctx, Value *v, ssize_t n, MDNode *tbaa)$/;"	f	typeref:typename:Value *	file:
emit_nthptr_addr	src/cgutils.cpp	/^static Value *emit_nthptr_addr(jl_codectx_t &ctx, Value *v, Value *idx)$/;"	f	typeref:typename:Value *	file:
emit_nthptr_addr	src/cgutils.cpp	/^static Value *emit_nthptr_addr(jl_codectx_t &ctx, Value *v, ssize_t n, bool gctracked = true)$/;"	f	typeref:typename:Value *	file:
emit_nthptr_recast	src/cgutils.cpp	/^static Value *emit_nthptr_recast(jl_codectx_t &ctx, Value *v, Value *idx, MDNode *tbaa, Type *pt/;"	f	typeref:typename:Value *	file:
emit_nthptr_recast	src/cgutils.cpp	/^static Value *emit_nthptr_recast(jl_codectx_t &ctx, Value *v, ssize_t n, MDNode *tbaa, Type *pty/;"	f	typeref:typename:Value *	file:
emit_offset_table	src/jitlayers.cpp	/^static void emit_offset_table(Module *mod, const std::vector<GlobalValue*> &vars, StringRef name/;"	f	typeref:typename:void	file:
emit_offset_table	src/llvm-multiversioning.cpp	/^Constant *CloneCtx::emit_offset_table(const std::vector<T*> &vars, StringRef name) const$/;"	f	class:__anond5683ea40111::CloneCtx	typeref:typename:Constant *
emit_phinode_assign	src/codegen.cpp	/^static void emit_phinode_assign(jl_codectx_t &ctx, ssize_t idx, jl_value_t *r)$/;"	f	typeref:typename:void	file:
emit_plt	src/ccall.cpp	/^static Value *emit_plt($/;"	f	typeref:typename:Value *	file:
emit_plt_thunk	src/ccall.cpp	/^static GlobalVariable *emit_plt_thunk($/;"	f	typeref:typename:GlobalVariable *	file:
emit_pointer_from_objref	src/cgutils.cpp	/^static Value *emit_pointer_from_objref(jl_codectx_t &ctx, Value *V)$/;"	f	typeref:typename:Value *	file:
emit_pointer_from_objref_internal	src/cgutils.cpp	/^static Value *emit_pointer_from_objref_internal(jl_codectx_t &ctx, Value *V)$/;"	f	typeref:typename:Value *	file:
emit_pointerref	src/intrinsics.cpp	/^static jl_cgval_t emit_pointerref(jl_codectx_t &ctx, jl_cgval_t *argv)$/;"	f	typeref:typename:jl_cgval_t	file:
emit_pointerset	src/intrinsics.cpp	/^static jl_cgval_t emit_pointerset(jl_codectx_t &ctx, jl_cgval_t *argv)$/;"	f	typeref:typename:jl_cgval_t	file:
emit_ptls_tp	src/llvm-ptls.cpp	/^Instruction *LowerPTLS::emit_ptls_tp(Value *offset, Instruction *insertBefore) const$/;"	f	class:__anonf46923380111::LowerPTLS	typeref:typename:Instruction *
emit_result	src/jitlayers.cpp	/^static void emit_result(std::vector<NewArchiveMember> &Archive, SmallVectorImpl<char> &OS,$/;"	f	typeref:typename:void	file:
emit_runtime_call	src/intrinsics.cpp	/^static jl_cgval_t emit_runtime_call(jl_codectx_t &ctx, JL_I::intrinsic f, const jl_cgval_t *argv/;"	f	typeref:typename:jl_cgval_t	file:
emit_runtime_pointerref	src/intrinsics.cpp	/^static jl_cgval_t emit_runtime_pointerref(jl_codectx_t &ctx, jl_cgval_t *argv)$/;"	f	typeref:typename:jl_cgval_t	file:
emit_runtime_pointerset	src/intrinsics.cpp	/^static jl_cgval_t emit_runtime_pointerset(jl_codectx_t &ctx, jl_cgval_t *argv)$/;"	f	typeref:typename:jl_cgval_t	file:
emit_setfield	src/cgutils.cpp	/^static void emit_setfield(jl_codectx_t &ctx,$/;"	f	typeref:typename:void	file:
emit_signal_fence	src/cgutils.cpp	/^static void emit_signal_fence(jl_codectx_t &ctx)$/;"	f	typeref:typename:void	file:
emit_sparam	src/codegen.cpp	/^static jl_cgval_t emit_sparam(jl_codectx_t &ctx, size_t i)$/;"	f	typeref:typename:jl_cgval_t	file:
emit_ssaval_assign	src/codegen.cpp	/^static void emit_ssaval_assign(jl_codectx_t &ctx, ssize_t idx, jl_value_t *r)$/;"	f	typeref:typename:void	file:
emit_static_alloca	src/codegen.cpp	/^static AllocaInst *emit_static_alloca(jl_codectx_t &ctx, Type *lty, int arraysize=1)$/;"	f	typeref:typename:AllocaInst *	file:
emit_stmtpos	src/codegen.cpp	/^static void emit_stmtpos(jl_codectx_t &ctx, jl_value_t *expr, int ssaval_result)$/;"	f	typeref:typename:void	file:
emit_struct_gep	src/cgutils.cpp	/^static Value *emit_struct_gep(jl_codectx_t &ctx, Type *lty, Value *base, unsigned byte_offset)$/;"	f	typeref:typename:Value *	file:
emit_type_error	src/cgutils.cpp	/^static void emit_type_error(jl_codectx_t &ctx, const jl_cgval_t &x, Value *type, const std::stri/;"	f	typeref:typename:void	file:
emit_typecheck	src/cgutils.cpp	/^static void emit_typecheck(jl_codectx_t &ctx, const jl_cgval_t &x, jl_value_t *type, const std::/;"	f	typeref:typename:void	file:
emit_typeof	src/cgutils.cpp	/^static Value *emit_typeof(jl_codectx_t &ctx, Value *tt)$/;"	f	typeref:typename:Value *	file:
emit_typeof	src/cgutils.cpp	/^static jl_cgval_t emit_typeof(jl_codectx_t &ctx, const jl_cgval_t &p)$/;"	f	typeref:typename:jl_cgval_t	file:
emit_typeof_boxed	src/cgutils.cpp	/^static Value *emit_typeof_boxed(jl_codectx_t &ctx, const jl_cgval_t &p)$/;"	f	typeref:typename:Value *	file:
emit_unbox	src/intrinsics.cpp	/^static Value *emit_unbox(jl_codectx_t &ctx, Type *to, const jl_cgval_t &x, jl_value_t *jt, Value/;"	f	typeref:typename:Value *	file:
emit_unboxed_coercion	src/intrinsics.cpp	/^static Value *emit_unboxed_coercion(jl_codectx_t &ctx, Type *to, Value *unboxed)$/;"	f	typeref:typename:Value *	file:
emit_unionmove	src/cgutils.cpp	/^static void emit_unionmove(jl_codectx_t &ctx, Value *dest, MDNode *tbaa_dst, const jl_cgval_t &s/;"	f	typeref:typename:void	file:
emit_unsafe_arrayptr	src/cgutils.cpp	/^static Value *emit_unsafe_arrayptr(jl_codectx_t &ctx, const jl_cgval_t &tinfo, bool isboxed = fa/;"	f	typeref:typename:Value *	file:
emit_untyped_intrinsic	src/intrinsics.cpp	/^static Value *emit_untyped_intrinsic(jl_codectx_t &ctx, intrinsic f, Value **argvalues, size_t n/;"	f	typeref:typename:Value *	file:
emit_varinfo	src/codegen.cpp	/^static jl_cgval_t emit_varinfo(jl_codectx_t &ctx, jl_varinfo_t &vi, jl_sym_t *varname, jl_value_/;"	f	typeref:typename:jl_cgval_t	file:
emit_varinfo_assign	src/codegen.cpp	/^static void emit_varinfo_assign(jl_codectx_t &ctx, jl_varinfo_t &vi, jl_cgval_t rval_info, jl_va/;"	f	typeref:typename:void	file:
emit_vectormaxsize	src/cgutils.cpp	/^static Value *emit_vectormaxsize(jl_codectx_t &ctx, const jl_cgval_t &ary)$/;"	f	typeref:typename:Value *	file:
emit_vi_assignment_unboxed	src/codegen.cpp	/^static void emit_vi_assignment_unboxed(jl_codectx_t &ctx, jl_varinfo_t &vi, Value *isboxed, jl_c/;"	f	typeref:typename:void	file:
emit_write_barrier	src/cgutils.cpp	/^static void emit_write_barrier(jl_codectx_t &ctx, Value *parent, Value *ptr)$/;"	f	typeref:typename:void	file:
emitted_function	src/julia.h	/^    jl_value_t *emitted_function;$/;"	m	struct:__anon055fe4271b08	typeref:typename:jl_value_t *
emoji_symbols	stdlib/REPL/src/emoji_symbols.jl	/^const emoji_symbols = Dict($/;"	v
emojis	stdlib/REPL/src/emoji_symbols.jl	/^emojis = JSON.parsefile(download("https:\/\/raw.githubusercontent.com\/iamcal\/emoji-data\/0f0cf/;"	v
emphasize	base/show.jl	/^emphasize(io, str::AbstractString, col = Base.error_color()) = get(io, :color, false) ?$/;"	f
emptiness_only	src/subtype.c	/^    int emptiness_only;       \/\/ true iff intersection only needs to test for emptiness$/;"	m	struct:jl_stenv_t	typeref:typename:int	file:
empty	base/abstractarray.jl	/^empty(a::AbstractVector{T}, ::Type{U}=T) where {T,U} = Vector{U}()$/;"	f
empty	base/abstractdict.jl	/^empty(a::AbstractDict) = empty(a, keytype(a), valtype(a))$/;"	f
empty	base/abstractdict.jl	/^empty(a::AbstractDict, ::Type{V}) where {V} = empty(a, keytype(a), V) # Note: this is the form w/;"	f
empty	base/abstractdict.jl	/^empty(d::IdDict, ::Type{K}, ::Type{V}) where {K, V} = IdDict{K,V}()$/;"	f
empty	base/bitset.jl	/^empty(s::BitSet, ::Type{Int}=Int) = BitSet()$/;"	f
empty	base/dict.jl	/^empty(::ImmutableDict, ::Type{K}, ::Type{V}) where {K, V} = ImmutableDict{K,V}()$/;"	f
empty	base/dict.jl	/^empty(a::AbstractDict, ::Type{K}, ::Type{V}) where {K, V} = Dict{K, V}()$/;"	f
empty	base/namedtuple.jl	/^empty(::NamedTuple) = NamedTuple()$/;"	f
empty	base/set.jl	/^empty(s::AbstractSet{T}, ::Type{U}=T) where {T,U} = Set{U}()$/;"	f
empty	base/tuple.jl	/^empty(@nospecialize x::Tuple) = ()$/;"	f
empty	base/weakkeydict.jl	/^empty(d::WeakKeyDict, ::Type{K}, ::Type{V}) where {K, V} = WeakKeyDict{K, V}()$/;"	f
empty	src/processor.cpp	/^    inline bool empty() const$/;"	f	struct:__anon839834ed0111::FeatureList	typeref:typename:bool	file:
empty	test/gcext/LocalTest.jl	/^function empty(stack :: Stack)$/;"	f
empty!	base/abstractdict.jl	/^empty!(s::IdSet) = (empty!(s.dict); s)$/;"	f
empty!	base/abstractdict.jl	/^function empty!(d::IdDict)$/;"	f
empty!	base/array.jl	/^function empty!(a::Vector)$/;"	f
empty!	base/bitarray.jl	/^function empty!(B::BitVector)$/;"	f
empty!	base/bitset.jl	/^function empty!(s::BitSet)$/;"	f
empty!	base/dict.jl	/^function empty!(h::Dict{K,V}) where V where K$/;"	f
empty!	base/set.jl	/^empty!(s::Set) = (empty!(s.dict); s)$/;"	f
empty!	base/weakkeydict.jl	/^empty!(wkh::WeakKeyDict) = (lock(() -> empty!(wkh.ht), wkh); wkh)$/;"	f
empty_pages	src/gc-debug.c	/^static int64_t empty_pages;$/;"	v	typeref:typename:int64_t	file:
empty_pool	stdlib/Distributed/test/distributed_exec.jl	/^empty_pool = WorkerPool([myid()])$/;"	v
empty_slottypes	base/compiler/utilities.jl	/^const empty_slottypes = Any[]$/;"	v
empty_sym	base/methodshow.jl	/^const empty_sym = Symbol("")$/;"	v
empty_sym	base/stacktraces.jl	/^const empty_sym = Symbol("")$/;"	v
empty_sym	src/ast.c	/^jl_sym_t *empty_sym;   jl_sym_t *top_sym;$/;"	v	typeref:typename:jl_sym_t *
empty_undo	stdlib/REPL/src/LineEdit.jl	/^empty_undo(s) = nothing$/;"	f
empty_undo	stdlib/REPL/src/LineEdit.jl	/^function empty_undo(s::PromptState)$/;"	f
emptyf	test/file.jl	/^emptyf = open(emptyfile)$/;"	v
emptyfile	test/file.jl	/^emptyfile = joinpath(dir, "empty")$/;"	v
emptymutable	base/abstractarray.jl	/^emptymutable(a::AbstractVector{T}, ::Type{U}=T) where {T,U} = Vector{U}()$/;"	f
emptymutable	base/abstractarray.jl	/^emptymutable(itr, ::Type{U}) where {U} = Vector{U}()$/;"	f
emptymutable	base/bitset.jl	/^emptymutable(s::BitSet, ::Type{Int}=Int) = BitSet()$/;"	f
emptymutable	base/set.jl	/^emptymutable(s::AbstractSet{T}, ::Type{U}=T) where {T,U} = Set{U}()$/;"	f
emptyperiod	stdlib/Dates/test/periods.jl	/^emptyperiod = ((y + d) - d) - y$/;"	v
emptystringsym	src/flisp/flisp.h	/^    value_t emptystringsym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
en	src/processor.cpp	/^    } en, dis;$/;"	m	struct:__anon839834ed0111::TargetData	typeref:struct:__anon839834ed0111::TargetData::__anon839834ed0308	file:
en_dash	stdlib/Markdown/src/Common/inline.jl	/^function en_dash(stream::IO, md::MD)$/;"	f
enable	base/gcutils.jl	/^enable(on::Bool) = ccall(:jl_gc_enable, Int32, (Int32,), on) != 0$/;"	f
enableRawMode	stdlib/REPL/src/TerminalMenus/util.jl	/^function enableRawMode(term)$/;"	f
enableUnsafeAlgebraIfReduction	src/llvm-simdloop.cpp	/^void LowerSIMDLoop::enableUnsafeAlgebraIfReduction(PHINode *Phi, Loop *L) const$/;"	f	class:llvm::LowerSIMDLoop	typeref:typename:void
enable_bracketed_paste	stdlib/REPL/src/Terminals.jl	/^@eval enable_bracketed_paste(t::UnixTerminal) = write(t.out_stream, $"$(CSI)?2004h")$/;"	f
enable_bracketed_paste	stdlib/REPL/src/Terminals.jl	/^enable_bracketed_paste(t::TextTerminal) = nothing$/;"	f
enable_depends	src/processor.cpp	/^static inline void enable_depends(FeatureList<n> &features, const FeatureDep *deps, size_t ndeps/;"	f	namespace:__anon839834ed0111	typeref:typename:void	file:
enable_depends	src/processor_arm.cpp	/^static inline void enable_depends(FeatureList<n> &features)$/;"	f	namespace:ARM	typeref:typename:void	file:
enable_depends	src/processor_x86.cpp	/^static inline void enable_depends(FeatureList<n> &features)$/;"	f	namespace:X86	typeref:typename:void	file:
enable_promptpaste	stdlib/REPL/src/REPL.jl	/^enable_promptpaste(v::Bool) = JL_PROMPT_PASTE[] = v$/;"	f
enable_trace	src/gf.c	/^static void __attribute__ ((unused)) enable_trace(int x) { trace_en=x; }$/;"	f	typeref:typename:void	file:
encode	stdlib/Base64/src/encode.jl	/^encode(x::UInt8) = @inbounds return BASE64_ENCODE[(x & 0x3f) + 1]$/;"	f
encodedMaxLine76	stdlib/Base64/test/runtests.jl	/^const encodedMaxLine76 = """$/;"	v
encodepadding	stdlib/Base64/src/encode.jl	/^encodepadding()  = UInt8('=')$/;"	f
end	src/gc.h	/^    jl_binding_t **end; \/\/ The end address (after the last slot to be scanned)$/;"	m	struct:__anoncf30557c0c08	typeref:typename:jl_binding_t **
end	src/gc.h	/^    jl_fielddesc16_t *end; \/\/ End of field descriptor.$/;"	m	struct:__anoncf30557c0808	typeref:typename:jl_fielddesc16_t *
end	src/gc.h	/^    jl_fielddesc32_t *end; \/\/ End of field descriptor.$/;"	m	struct:__anoncf30557c0908	typeref:typename:jl_fielddesc32_t *
end	src/gc.h	/^    jl_fielddesc8_t *end; \/\/ End of field descriptor.$/;"	m	struct:__anoncf30557c0708	typeref:typename:jl_fielddesc8_t *
end	src/gc.h	/^    jl_value_t **end; \/\/ The end address (after the last slot to be scanned)$/;"	m	struct:__anoncf30557c0608	typeref:typename:jl_value_t **
end	src/gc.h	/^    jl_value_t **end;$/;"	m	struct:__anoncf30557c0d08	typeref:typename:jl_value_t **
end-symbol	src/julia-parser.scm	/^(define end-symbol #f)$/;"	f
end-val	src/julia-syntax.scm	/^(define (end-val a n tuples last)$/;"	f
end_base_include	base/Base.jl	/^end_base_include = time_ns()$/;"	v
end_keypad_transmit_mode	stdlib/REPL/src/Terminals.jl	/^@eval end_keypad_transmit_mode(t::UnixTerminal) = # tput rmkx$/;"	f
endofline	stdlib/REPL/src/LineEdit.jl	/^function endofline(buf, pos=position(buf))$/;"	f
ends-interpolated-atom?	src/julia-parser.scm	/^(define (ends-interpolated-atom? c)$/;"	f
ends_with_semicolon	stdlib/REPL/src/REPL.jl	/^function ends_with_semicolon(line::AbstractString)$/;"	f
endswith	base/regex.jl	/^function endswith(s::AbstractString, r::Regex)$/;"	f
endswith	base/regex.jl	/^function endswith(s::SubString, r::Regex)$/;"	f
endswith	base/strings/util.jl	/^endswith(str::AbstractString, chars::Chars) = !isempty(str) && last(str) in chars$/;"	f
endswith	base/strings/util.jl	/^function endswith(a::AbstractString, b::AbstractString)$/;"	f
endswith	base/strings/util.jl	/^function endswith(a::Union{String, SubString{String}},$/;"	f
endswith_extension	src/dlload.c	/^static int endswith_extension(const char *path)$/;"	f	typeref:typename:int	file:
enq_work	base/task.jl	/^function enq_work(t::Task)$/;"	f
ensure_enter_function	src/llvm-lower-handlers.cpp	/^static void ensure_enter_function(Module &M)$/;"	f	typeref:typename:void	file:
ensure_indexable	base/multidimensional.jl	/^@inline ensure_indexable(I::Tuple{Any, Vararg{Any}}) = (I[1], ensure_indexable(tail(I))...)$/;"	f
ensure_indexable	base/multidimensional.jl	/^@inline ensure_indexable(I::Tuple{LogicalIndex, Vararg{Any}}) = (collect(I[1]), ensure_indexable/;"	f
ensure_indexable	base/multidimensional.jl	/^ensure_indexable(I::Tuple{}) = ()$/;"	f
ensure_initialized	stdlib/LibGit2/src/LibGit2.jl	/^function ensure_initialized end$/;"	f
ensure_initialized	stdlib/LibGit2/src/LibGit2.jl	/^function ensure_initialized()$/;"	f
ensure_iterable	test/subarray.jl	/^ensure_iterable(::Tuple{}) = ()$/;"	f
ensure_iterable	test/subarray.jl	/^ensure_iterable(t::Tuple{Any, Vararg{Any}}) = (t[1], ensure_iterable(Base.tail(t))...)$/;"	f
ensure_iterable	test/subarray.jl	/^ensure_iterable(t::Tuple{Union{Number, CartesianIndex}, Vararg{Any}}) = ((t[1],), ensure_iterabl/;"	f
ensure_jit_target	src/processor_arm.cpp	/^static void ensure_jit_target(bool imaging)$/;"	f	namespace:ARM	typeref:typename:void	file:
ensure_jit_target	src/processor_fallback.cpp	/^static void ensure_jit_target(bool imaging)$/;"	f	namespace:Fallback	typeref:typename:void	file:
ensure_jit_target	src/processor_x86.cpp	/^static void ensure_jit_target(bool imaging)$/;"	f	namespace:X86	typeref:typename:void	file:
ensure_rescheduled	base/task.jl	/^function ensure_rescheduled(othertask::Task)$/;"	f
ensureroom	base/iobuffer.jl	/^@inline ensureroom(io::GenericIOBuffer, nshort::Int) = ensureroom(io, UInt(nshort))$/;"	f
ensureroom	base/iobuffer.jl	/^@inline function ensureroom(io::GenericIOBuffer, nshort::UInt)$/;"	f
ensureroom_slowpath	base/iobuffer.jl	/^@noinline function ensureroom_slowpath(io::GenericIOBuffer, nshort::UInt)$/;"	f
enter_interpreter_frame	src/interpreter-stacktrace.c	/^void *NOINLINE enter_interpreter_frame(void *(*callback)(interpreter_state *, void *), void *arg/;"	f	typeref:typename:void * NOINLINE
enter_interpreter_frame_end	src/interpreter-stacktrace.c	/^uintptr_t enter_interpreter_frame_end = (uintptr_t)&enter_interpreter_frame_end_val;$/;"	v	typeref:typename:uintptr_t
enter_interpreter_frame_start	src/interpreter-stacktrace.c	/^uintptr_t enter_interpreter_frame_start = (uintptr_t)&enter_interpreter_frame_start_val;$/;"	v	typeref:typename:uintptr_t
enter_prefix_search	stdlib/REPL/src/LineEdit.jl	/^function enter_prefix_search(s::MIState, p::PrefixHistoryPrompt, backward::Bool)$/;"	f
enter_search	stdlib/REPL/src/LineEdit.jl	/^function enter_search(s::MIState, p::HistoryPrompt, backward::Bool)$/;"	f
enter_sym	src/ast.c	/^jl_sym_t *enter_sym;   jl_sym_t *leave_sym;$/;"	v	typeref:typename:jl_sym_t *
ento	src/clangsa/GCChecker.cpp	/^namespace ento {$/;"	n	namespace:clang	file:
entry_at_idx	base/compiler/ssair/ir.jl	/^entry_at_idx(entry, idx) = entry.attach_after ? entry.pos == idx - 1 : entry.pos == idx$/;"	f
entry_path	base/loading.jl	/^function entry_path(path::String, name::String)::Union{Nothing,String}$/;"	f
entry_point_and_project_file	base/loading.jl	/^function entry_point_and_project_file(dir::String, name::String)::Union{Tuple{Nothing,Nothing},T/;"	f
entry_point_and_project_file_inside	base/loading.jl	/^function entry_point_and_project_file_inside(dir::String, name::String)::Union{Tuple{Nothing,Not/;"	f
entryid	stdlib/LibGit2/src/tree.jl	/^function entryid(te::GitTreeEntry)$/;"	f
entrytype	stdlib/LibGit2/src/tree.jl	/^function entrytype(te::GitTreeEntry)$/;"	f
enum	base/Enums.jl	/^macro enum(T, syms...)$/;"	f
enum_argument_error	base/Enums.jl	/^@noinline enum_argument_error(typename, x) = throw(ArgumentError(string("invalid value for Enum /;"	f
enumerate	base/iterators.jl	/^enumerate(iter) = Enumerate(iter)$/;"	f
env	src/flisp/flisp.h	/^    value_t env;$/;"	m	struct:__anonb455601d0708	typeref:typename:value_t
env	src/julia_internal.h	/^    jl_svec_t *env; \/\/ intersection env (initialize to null to perform intersection without an/;"	m	struct:typemap_intersection_env	typeref:typename:jl_svec_t *
env_mappings	doc/make.jl	/^env_mappings = [$/;"	v
env_project_file	base/loading.jl	/^function env_project_file(env::String)::Union{Bool,String}$/;"	f
envidx	src/subtype.c	/^    int envidx;               \/\/ current index in envout$/;"	m	struct:jl_stenv_t	typeref:typename:int	file:
envout	src/subtype.c	/^    jl_value_t **envout;      \/\/ for passing caller the computed bounds of right-side variable/;"	m	struct:jl_stenv_t	typeref:typename:jl_value_t **	file:
envs	test/loading.jl	/^const envs = Dict{String,Any}()$/;"	v
envsz	src/subtype.c	/^    int envsz;                \/\/ length of envout$/;"	m	struct:jl_stenv_t	typeref:typename:int	file:
eof	base/coreio.jl	/^eof(::DevNull) = true$/;"	f
eof	base/filesystem.jl	/^eof(f::File) = bytesavailable(f) == 0$/;"	f
eof	base/io.jl	/^eof(io::AbstractPipe) = eof(pipe_reader(io))$/;"	f
eof	base/io.jl	/^function eof end$/;"	f
eof	base/iobuffer.jl	/^eof(io::GenericIOBuffer) = (io.ptr-1 == io.size)$/;"	f
eof	base/iostream.jl	/^eof(s::IOStream) = @lock_nofail s.lock _eof_nolock(s)$/;"	f
eof	base/secretbuffer.jl	/^eof(io::SecretBuffer) = io.ptr > io.size$/;"	f
eof	base/stream.jl	/^function eof(s::BufferStream)$/;"	f
eof	base/stream.jl	/^function eof(s::LibuvStream)$/;"	f
epochdays2date	stdlib/Dates/src/rounding.jl	/^epochdays2date(i) = Date(UTD(DATEEPOCH + Int64(i)))$/;"	f
epochms2datetime	stdlib/Dates/src/rounding.jl	/^epochms2datetime(i) = DateTime(UTM(DATETIMEEPOCH + Int64(i)))$/;"	f
eps	base/float.jl	/^    eps() = eps(Float64)$/;"	f
eps	base/float.jl	/^    eps(::Type{Float16}) = $(bitcast(Float16, 0x1400))$/;"	f
eps	base/float.jl	/^    eps(::Type{Float32}) = $(bitcast(Float32, 0x34000000))$/;"	f
eps	base/float.jl	/^    eps(::Type{Float64}) = $(bitcast(Float64, 0x3cb0000000000000))$/;"	f
eps	base/float.jl	/^    eps(x::AbstractFloat) = isfinite(x) ? abs(x) >= floatmin(x) ? ldexp(eps(typeof(x)), exponent/;"	f
eps	base/mpfr.jl	/^eps(::Type{BigFloat}) = nextfloat(BigFloat(1)) - BigFloat(1)$/;"	f
eps32	test/fastmath.jl	/^const eps32 = eps(Float32)$/;"	v
eps32_2	test/fastmath.jl	/^const eps32_2 = eps32\/2$/;"	v
eps64	test/fastmath.jl	/^const eps64 = eps(Float64)$/;"	v
eps64_2	test/fastmath.jl	/^const eps64_2 = eps64\/2$/;"	v
eq	src/runtime_intrinsics.c	/^#define eq(/;"	d	file:
eq-sym?	src/ast.scm	/^(define (eq-sym? a b)$/;"	f
eq_bindings	src/module.c	/^static int eq_bindings(jl_binding_t *a, jl_binding_t *b)$/;"	f	typeref:typename:int	file:
eq_class	src/flisp/equal.c	/^static value_t eq_class(fl_context_t *fl_ctx, htable_t *table, value_t key)$/;"	f	typeref:typename:value_t	file:
eq_comparable	src/flisp/flisp.h	/^#define eq_comparable(/;"	d
eq_comparablep	src/flisp/flisp.h	/^#define eq_comparablep(/;"	d
eq_fast	base/fastmath.jl	/^    eq_fast(a::T, y::Complex{T}) where {T<:FloatTypes} =$/;"	f
eq_fast	base/fastmath.jl	/^    eq_fast(x::Complex{T}, b::T) where {T<:FloatTypes} =$/;"	f
eq_fast	base/fastmath.jl	/^    eq_fast(x::T, y::T) where {T<:ComplexTypes} =$/;"	f
eq_fast	base/fastmath.jl	/^eq_fast(x::T, y::T) where {T<:FloatTypes} = eq_float_fast(x, y)$/;"	f
eq_msp	src/subtype.c	/^static int eq_msp(jl_value_t *a, jl_value_t *b, jl_typeenv_t *env)$/;"	f	typeref:typename:int	file:
eq_union	src/flisp/equal.c	/^static void eq_union(fl_context_t *fl_ctx, htable_t *table, value_t a,$/;"	f	typeref:typename:void	file:
equal_eq_hashtable	src/flisp/flisp.h	/^    htable_t equal_eq_hashtable;$/;"	m	struct:_fl_context_t	typeref:typename:htable_t
equal_lispvalue	src/flisp/equal.c	/^int equal_lispvalue(fl_context_t *fl_ctx, value_t a, value_t b)$/;"	f	typeref:typename:int
equiv_type	src/interpreter.c	/^SECT_INTERP static int equiv_type(jl_datatype_t *dta, jl_datatype_t *dtb)$/;"	f	typeref:typename:SECT_INTERP int	file:
erfc_zigg_root2	stdlib/Random/test/runtests.jl	/^erfc_zigg_root2     = parse(BigFloat,"2.58032487653900889834388550448720318539858453640903304607/;"	v
err	stdlib/Libdl/test/runtests.jl	/^err = @test_throws ErrorException Libdl.dlopen(".\/foo.$(Libdl.dlext).0")$/;"	v
err	stdlib/Libdl/test/runtests.jl	/^err = @test_throws ErrorException Libdl.dlopen(".\/foo.$(Libdl.dlext).0.22.1")$/;"	v
err20000	test/syntax.jl	/^macro err20000()$/;"	f
err20033	test/compiler/inference.jl	/^err20033(x::Float64...) = prod(x)$/;"	f
err_message	base/pcre.jl	/^function err_message(errno)$/;"	f
err_msg	src/ccall.cpp	/^    std::string err_msg;$/;"	m	class:function_sig_t	typeref:typename:std::string	file:
err_str	test/errorshow.jl	/^err_str = @except_str 1 + 2 MethodError$/;"	v
err_str	test/errorshow.jl	/^err_str = @except_str Array([1]) MethodError$/;"	v
err_str	test/errorshow.jl	/^err_str = @except_str Float64[](1) MethodError$/;"	v
errno	base/libc.jl	/^errno() = ccall(:jl_errno, Cint, ())$/;"	f
errno	base/libc.jl	/^errno(e::Integer) = ccall(:jl_set_errno, Cvoid, (Cint,), e)$/;"	f
error	base/error.jl	/^error(s::AbstractString) = throw(ErrorException(s))$/;"	f
error	base/error.jl	/^function error(s::Vararg{Any,N}) where {N}$/;"	f
error	base/logging.jl	/^macro error(exs...) logmsg_code((@_sourceinfo)..., :Error, exs...) end$/;"	f
error	deps/srccache/patchelf-0.9/src/patchelf.cc	/^__attribute__((noreturn)) static void error(string msg)$/;"	f	typeref:typename:void	file:
error-wrap	src/jlfrontend.scm	/^(define (error-wrap thk)$/;"	f
error_codes	stdlib/Profile/src/Profile.jl	/^error_codes = Dict($/;"	v
error_color	base/client.jl	/^error_color() = repl_color("JULIA_ERROR_COLOR", default_color_error)$/;"	f
error_ctx	src/signals-win.c	/^static PCONTEXT error_ctx;$/;"	v	typeref:typename:PCONTEXT	file:
error_en	src/gf.c	/^static int error_en = 1;$/;"	v	typeref:typename:int	file:
error_if_canonical_getindex	base/abstractarray.jl	/^error_if_canonical_getindex(::IndexCartesian, A::AbstractArray{T,N}, ::Vararg{Int,N}) where {T,N/;"	f
error_if_canonical_getindex	base/abstractarray.jl	/^error_if_canonical_getindex(::IndexLinear, A::AbstractArray, ::Int) =$/;"	f
error_if_canonical_getindex	base/abstractarray.jl	/^error_if_canonical_getindex(::IndexStyle, ::AbstractArray, ::Any...) = nothing$/;"	f
error_if_canonical_setindex	base/abstractarray.jl	/^error_if_canonical_setindex(::IndexCartesian, A::AbstractArray{T,N}, ::Vararg{Int,N}) where {T,N/;"	f
error_if_canonical_setindex	base/abstractarray.jl	/^error_if_canonical_setindex(::IndexLinear, A::AbstractArray, ::Int) =$/;"	f
error_if_canonical_setindex	base/abstractarray.jl	/^error_if_canonical_setindex(::IndexStyle, ::AbstractArray, ::Any...) = nothing$/;"	f
error_out	test/errorshow.jl	/^error_out = String(take!(buf))$/;"	v
error_out1	test/errorshow.jl	/^error_out1 = String(take!(buf))$/;"	v
error_out2	test/errorshow.jl	/^error_out2 = String(take!(buf))$/;"	v
error_out3	test/errorshow.jl	/^error_out3 = String(take!(buf))$/;"	v
error_return_fiber	src/signals-win.c	/^static jl_ucontext_t error_return_fiber;$/;"	v	typeref:typename:jl_ucontext_t	file:
error_sym	src/ast.c	/^    value_t error_sym;$/;"	m	struct:_jl_ast_context_t	typeref:typename:value_t	file:
error_sym	src/ast.c	/^jl_sym_t *exc_sym;     jl_sym_t *error_sym;$/;"	v	typeref:typename:jl_sym_t *
error_unless	src/cgutils.cpp	/^static void error_unless(jl_codectx_t &ctx, Value *cond, const std::string &msg)$/;"	f	typeref:typename:void	file:
errorbounds	stdlib/LinearAlgebra/src/triangular.jl	/^        errorbounds(A::$t{T,<:StridedMatrix}, X::StridedVecOrMat{T}, B::StridedVecOrMat{T}) wher/;"	f
errorbounds	stdlib/LinearAlgebra/src/triangular.jl	/^errorbounds(A::AbstractTriangular{T,<:StridedMatrix}, X::StridedVecOrMat{T}, B::StridedVecOrMat{/;"	f
errorbounds	stdlib/LinearAlgebra/src/triangular.jl	/^function errorbounds(A::AbstractTriangular{TA,<:StridedMatrix}, X::StridedVecOrMat{TX}, B::Strid/;"	f
esc	base/essentials.jl	/^esc(@nospecialize(e)) = Expr(:escape, e)$/;"	f
escape_chars	stdlib/Markdown/src/Common/inline.jl	/^const escape_chars = "\\\\`*_#+-.!{}[]()\\$"$/;"	v
escape_defaults	stdlib/REPL/src/LineEdit.jl	/^const escape_defaults = merge!($/;"	v
escape_nul	base/strings/io.jl	/^escape_nul(c::Union{Nothing, AbstractChar}) =$/;"	f
escape_string	base/strings/io.jl	/^escape_string(s::AbstractString, esc=('\\"',)) = sprint(escape_string, s, esc, sizehint=lastinde/;"	f
escape_string	base/strings/io.jl	/^function escape_string(io::IO, s::AbstractString, esc="")$/;"	f
escape_sym	src/ast.c	/^jl_sym_t *escape_sym;$/;"	v	typeref:typename:jl_sym_t *
escaped	src/llvm-alloc-opt.cpp	/^        bool escaped:1;$/;"	m	struct:__anon0a1571000111::Optimizer::AllocUseInfo	typeref:typename:bool:1	file:
escapes	stdlib/Markdown/src/Common/inline.jl	/^function escapes(stream::IO, md::MD)$/;"	f
escsym	src/flisp/flisp.h	/^    value_t vtabsym, pagesym, returnsym, escsym, spacesym, deletesym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
estimate_mulsize	stdlib/SparseArrays/src/linalg.jl	/^function estimate_mulsize(m::Integer, nnzA::Integer, n::Integer, nnzB::Integer, k::Integer)$/;"	f
estimatepower	base/grisu/bignum.jl	/^estimatepower(exponent::Int) = ceil(Int,(exponent + kSignificandSize - 1) * k1Log10 - 1e-10)$/;"	f
euler11	test/euler.jl	/^function euler11(grid,n)$/;"	f
euler14	test/euler.jl	/^function euler14(m)$/;"	f
euler2	test/euler.jl	/^function euler2(n)$/;"	f
euler4	test/euler.jl	/^function euler4(n)$/;"	f
euler8	test/euler.jl	/^function euler8(n,m)$/;"	f
euler9	test/euler.jl	/^function euler9(n)$/;"	f
eval	base/Base.jl	/^eval(m::Module, x) = Core.eval(m, x)$/;"	f
eval	base/Base.jl	/^eval(x) = Core.eval(Base, x)$/;"	f
eval	base/boot.jl	/^eval(Core, :(GlobalRef(m::Module, s::Symbol) = $(Expr(:new, :GlobalRef, :m, :s))))$/;"	f
eval	base/boot.jl	/^eval(Core, :(LineInfoNode(@nospecialize(method), file::Symbol, line::Int, inlined_at::Int) =$/;"	f
eval	base/boot.jl	/^eval(Core, :(LineNumberNode(l::Int) = $(Expr(:new, :LineNumberNode, :l, nothing))))$/;"	f
eval	base/boot.jl	/^eval(Core, :(LineNumberNode(l::Int, @nospecialize(f)) = $(Expr(:new, :LineNumberNode, :l, :f))))$/;"	f
eval	base/boot.jl	/^eval(Core, :(NamedTuple{names,T}(args::T) where {names, T <: Tuple} =$/;"	f
eval	base/boot.jl	/^eval(Core, :(PhiCNode(values::Array{Any, 1}) = $(Expr(:new, :PhiCNode, :values))))$/;"	f
eval	base/boot.jl	/^eval(Core, :(PhiNode(edges::Array{Any, 1}, values::Array{Any, 1}) = $(Expr(:new, :PhiNode, :edge/;"	f
eval	base/boot.jl	/^eval(Core, :(PiNode(val, typ) = $(Expr(:new, :PiNode, :val, :typ))))$/;"	f
eval	base/boot.jl	/^eval(Core, :(SlotNumber(n::Int) = $(Expr(:new, :SlotNumber, :n))))$/;"	f
eval	base/boot.jl	/^eval(Core, :(TypedSlot(n::Int, @nospecialize(t)) = $(Expr(:new, :TypedSlot, :n, :t))))$/;"	f
eval	base/boot.jl	/^eval(Core, :(UpsilonNode() = $(Expr(:new, :UpsilonNode))))$/;"	f
eval	base/boot.jl	/^eval(Core, :(UpsilonNode(val) = $(Expr(:new, :UpsilonNode, :val))))$/;"	f
eval	base/boot.jl	/^eval(m::Module, @nospecialize(e)) = ccall(:jl_toplevel_eval_in, Any, (Any, Any), m, e)$/;"	f
eval	base/client.jl	/^eval(x) = Core.eval(Main, x)$/;"	f
eval	base/compiler/compiler.jl	/^eval(m, x) = Core.eval(m, x)$/;"	f
eval	base/compiler/compiler.jl	/^eval(x) = Core.eval(Compiler, x)$/;"	f
eval	base/essentials.jl	/^macro eval(ex)$/;"	f
eval	base/essentials.jl	/^macro eval(mod, ex)$/;"	f
eval	contrib/generate_precompile.jl	/^                eval(PrecompileStagingArea, :(const $(Symbol(_mod)) = $_mod))$/;"	f
eval	test/ccall.jl	/^             eval(:(f20835(x) = ccall(:fn, Cvoid, (Ptr{typeof(x)},), x))))$/;"	f
eval	test/ccall.jl	/^             eval(:(f20835(x) = ccall(:fn, Something_not_defined_20835, (Ptr{typeof(x)},), x))))$/;"	f
eval:withJulia:arguments:task:	contrib/mac/frameworkapp/ExecSandbox/ExecSandbox.m	/^                        NSFileHandle *stdOut, NSFileHandle *stdErr))reply {$/;"	m	implementation:ExecSandbox
eval:withJulia:arguments:task:	contrib/mac/frameworkapp/ExecSandbox/ExecSandboxProtocol.h	/^                                NSFileHandle *_Nullable stdErr))reply;$/;"	m	protocol:ExecSandboxProtocol
evalCall	src/clangsa/GCChecker.cpp	/^bool GCChecker::evalCall(const CallExpr *CE,$/;"	f	class:GCChecker	typeref:typename:bool
eval_abstracttype	src/interpreter.c	/^static void eval_abstracttype(jl_expr_t *ex, interpreter_state *s)$/;"	f	typeref:typename:void	file:
eval_body	src/interpreter.c	/^SECT_INTERP static jl_value_t *eval_body(jl_array_t *stmts, interpreter_state *s, size_t ip, int/;"	f	typeref:typename:SECT_INTERP jl_value_t *	file:
eval_import_from	src/toplevel.c	/^static jl_module_t *eval_import_from(jl_module_t *m JL_PROPAGATES_ROOT, jl_expr_t *ex, const cha/;"	f	typeref:typename:jl_module_t *	file:
eval_import_path	src/toplevel.c	/^static jl_module_t *eval_import_path(jl_module_t *where, jl_module_t *from JL_PROPAGATES_ROOT,$/;"	f	typeref:typename:jl_module_t *	file:
eval_methoddef	src/interpreter.c	/^static jl_value_t *eval_methoddef(jl_expr_t *ex, interpreter_state *s)$/;"	f	typeref:typename:jl_value_t *	file:
eval_phi	src/interpreter.c	/^SECT_INTERP static size_t eval_phi(jl_array_t *stmts, interpreter_state *s, size_t ns, size_t to/;"	f	typeref:typename:SECT_INTERP size_t	file:
eval_primitivetype	src/interpreter.c	/^static void eval_primitivetype(jl_expr_t *ex, interpreter_state *s)$/;"	f	typeref:typename:void	file:
eval_stmt_value	src/interpreter.c	/^SECT_INTERP static void eval_stmt_value(jl_value_t *stmt, interpreter_state *s)$/;"	f	typeref:typename:SECT_INTERP void	file:
eval_structtype	src/interpreter.c	/^static void eval_structtype(jl_expr_t *ex, interpreter_state *s)$/;"	f	typeref:typename:void	file:
eval_test	stdlib/Test/src/Test.jl	/^function eval_test(evaluated::Expr, quoted::Expr, source::LineNumberNode, negate::Bool=false)$/;"	f
eval_user_input	base/client.jl	/^function eval_user_input(errio, @nospecialize(ast), show_value::Bool)$/;"	f
eval_user_input	stdlib/REPL/src/REPL.jl	/^function eval_user_input(@nospecialize(ast), backend::REPLBackend)$/;"	f
eval_value	src/interpreter.c	/^SECT_INTERP static jl_value_t *eval_value(jl_value_t *e, interpreter_state *s)$/;"	f	typeref:typename:SECT_INTERP jl_value_t *	file:
eval_with_backend	stdlib/REPL/src/REPL.jl	/^function eval_with_backend(ast, backend::REPLBackendRef)$/;"	f
evalf_callback_19805	test/ccall.jl	/^evalf_callback_19805(ci::callinfos_19805{FUNC_FT}) where {FUNC_FT} = ci.f(0.5)::Float64$/;"	f
evalf_callback_c_19805	test/ccall.jl	/^evalf_callback_c_19805(ci::callinfos_19805{FUNC_FT}) where {FUNC_FT} = @cfunction($/;"	f
evalfile	base/loading.jl	/^evalfile(path::AbstractString, args::Vector) = evalfile(path, String[args...])$/;"	f
evalfile	base/loading.jl	/^function evalfile(path::AbstractString, args::Vector{String}=String[])$/;"	f
evalpoly	base/math.jl	/^macro evalpoly(z, p...)$/;"	f
evalsym	src/flisp/flisp.h	/^    value_t tsym, Tsym, fsym, Fsym, booleansym, nullsym, evalsym, fnsym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
eventloop	base/libuv.jl	/^eventloop() = uv_eventloop::Ptr{Cvoid}$/;"	f
eventually-call?	src/julia-parser.scm	/^(define (eventually-call? ex)$/;"	f
everywhere	stdlib/Distributed/src/macros.jl	/^macro everywhere(ex)$/;"	f
everywhere	stdlib/Distributed/src/macros.jl	/^macro everywhere(procs, ex)$/;"	f
ex	base/docs/basedocs.jl	/^ex = quote$/;"	v
ex	test/cartesian.jl	/^ex = Base.Cartesian.exprresolve(:(if 5 > 4; :x; else :y; end))$/;"	v
ex	test/core.jl	/^ex = try$/;"	v
ex1	test/meta.jl	/^ex1 = quote$/;"	v
exact_equal	stdlib/SparseArrays/test/sparsevector.jl	/^function exact_equal(x::AbstractSparseVector, y::AbstractSparseVector)$/;"	f
example	base/docs/Docs.jl	/^    macro example(f)$/;"	f
example_1	test/docs.jl	/^macro example_1(f)$/;"	f
example_2	test/docs.jl	/^macro example_2(f)$/;"	f
example_function	base/essentials.jl	/^function example_function(@nospecialize x)$/;"	f
example_function	base/essentials.jl	/^function example_function(@nospecialize(x = 1), y)$/;"	f
example_function	base/essentials.jl	/^function example_function(x, y, z)$/;"	f
exc_ctx	src/flisp/flisp.h	/^    fl_exception_context_t *exc_ctx;$/;"	m	struct:_fl_context_t	typeref:typename:fl_exception_context_t *
exc_sym	src/ast.c	/^jl_sym_t *exc_sym;     jl_sym_t *error_sym;$/;"	v	typeref:typename:jl_sym_t *
except_enter_func	src/codegen.cpp	/^static Function *except_enter_func;$/;"	v	typeref:typename:Function *	file:
except_enter_func	src/llvm-lower-handlers.cpp	/^    Function *except_enter_func;$/;"	m	struct:LowerExcHandlers	typeref:typename:Function *	file:
except_stackframe	test/errorshow.jl	/^macro except_stackframe(expr, err_type)$/;"	f
except_str	test/errorshow.jl	/^macro except_str(expr, err_type)$/;"	f
except_strbt	test/errorshow.jl	/^macro except_strbt(expr, err_type)$/;"	f
exception	src/julia.h	/^    jl_value_t *exception;$/;"	m	struct:_jl_task_t	typeref:typename:jl_value_t *
excludedirs	contrib/add_license_to_files.jl	/^const excludedirs = [$/;"	v
excstack	src/julia.h	/^    jl_excstack_t *excstack;$/;"	m	struct:_jl_task_t	typeref:typename:jl_excstack_t *
excstackframe	src/gc.h	/^    gc_mark_excstack_t excstackframe;$/;"	m	union:_jl_gc_mark_data	typeref:typename:gc_mark_excstack_t
exe_alloc	src/cgmemmgr.cpp	/^    std::unique_ptr<ROAllocator<true>> exe_alloc;$/;"	m	class:__anon06c686bc0111::RTDyldMemoryManagerJL	typeref:typename:std::unique_ptr<ROAllocator<true>>	file:
exec	base/pcre.jl	/^function exec(re, subject, offset, options, match_data)$/;"	f
execJuliaInTerminal	contrib/mac/frameworkapp/JuliaLauncher/AppDelegate.m	/^static void execJuliaInTerminal(NSURL *_Nonnull julia);$/;"	f
execJuliaInTerminal	contrib/mac/frameworkapp/JuliaLauncher/AppDelegate.m	/^void execJuliaInTerminal(NSURL *_Nonnull julia) {$/;"	f
exec_conn_func	stdlib/Distributed/src/cluster.jl	/^exec_conn_func(id::Int) = exec_conn_func(worker_from_id(id))$/;"	f
exec_conn_func	stdlib/Distributed/src/cluster.jl	/^function exec_conn_func(w::Worker)$/;"	f
exec_from_cache	stdlib/Distributed/src/workerpool.jl	/^exec_from_cache(rr::RemoteChannel, args...; kwargs...) = fetch(rr)(args...; kwargs...)$/;"	f
exec_from_cache	stdlib/Distributed/src/workerpool.jl	/^function exec_from_cache(f_ref::Tuple{Function, RemoteChannel}, args...; kwargs...)$/;"	f
exec_options	base/client.jl	/^function exec_options(opts)$/;"	f
exec_prefix	deps/srccache/patchelf-0.9/Makefile.in	/^exec_prefix = @exec_prefix@$/;"	m
exec_prefix	deps/srccache/patchelf-0.9/src/Makefile.in	/^exec_prefix = @exec_prefix@$/;"	m
exec_prefix	deps/srccache/patchelf-0.9/tests/Makefile.in	/^exec_prefix = @exec_prefix@$/;"	m
exec_r	base/pcre.jl	/^function exec_r(re, subject, offset, options)$/;"	f
exec_r_data	base/pcre.jl	/^function exec_r_data(re, subject, offset, options)$/;"	f
exename	test/spawn.jl	/^exename = Base.julia_cmd()$/;"	v
exhausted_abort	stdlib/LibGit2/src/callbacks.jl	/^function exhausted_abort()$/;"	f
existing_root	test/clangsa/MissingRoots.c	/^jl_value_t *existing_root() {$/;"	f	typeref:typename:jl_value_t *
exists_subtype	src/subtype.c	/^static int exists_subtype(jl_value_t *x, jl_value_t *y, jl_stenv_t *e, jl_value_t *saved, jl_sav/;"	f	typeref:typename:int	file:
exit	base/initdefs.jl	/^exit() = exit(0)$/;"	f
exit	base/initdefs.jl	/^exit(n) = ccall(:jl_exit, Cvoid, (Int32,), n)$/;"	f
exit_on_sigint	src/signal-handling.c	/^static int exit_on_sigint = 0;$/;"	v	typeref:typename:int	file:
exit_signal_cond	src/signals-unix.c	/^static pthread_cond_t exit_signal_cond;$/;"	v	typeref:typename:pthread_cond_t	file:
exp	base/complex.jl	/^function exp(z::Complex)$/;"	f
exp	base/special/exp.jl	/^exp(x::Real) = exp(float(x))$/;"	f
exp	base/special/exp.jl	/^function exp(x::T) where T<:Union{Float32,Float64}$/;"	f
exp	stdlib/LinearAlgebra/src/dense.jl	/^exp(A::StridedMatrix{<:BlasFloat}) = exp!(copy(A))$/;"	f
exp	stdlib/LinearAlgebra/src/dense.jl	/^exp(A::StridedMatrix{<:Union{Integer,Complex{<:Integer}}}) = exp!(float.(A))$/;"	f
exp!	stdlib/LinearAlgebra/src/dense.jl	/^function exp!(A::StridedMatrix{T}) where T<:BlasFloat$/;"	f
exp10	base/complex.jl	/^exp10(z::Complex) = exp10(float(z))$/;"	f
exp10	base/complex.jl	/^function exp10(z::Complex{T}) where T<:AbstractFloat$/;"	f
exp10	base/math.jl	/^exp10(x::AbstractFloat) = 10^x$/;"	f
exp10	base/special/exp10.jl	/^exp10(x::Real) = exp10(float(x))$/;"	f
exp10	base/special/exp10.jl	/^function exp10(x::T) where T<:Union{Float32,Float64}$/;"	f
exp10_fast	base/fastmath.jl	/^    exp10_fast(x::T) where {T<:ComplexTypes} =$/;"	f
exp10_kernel	base/special/exp10.jl	/^@inline exp10_kernel(x::Float32) =$/;"	f
exp10_kernel	base/special/exp10.jl	/^@inline exp10_kernel(x::Float64) =$/;"	f
exp10_small_thres	base/special/exp10.jl	/^@eval exp10_small_thres(::Type{Float32}) = $(2.0f0^-14)$/;"	f
exp10_small_thres	base/special/exp10.jl	/^@eval exp10_small_thres(::Type{Float64}) = $(2.0^-29)$/;"	f
exp2	base/complex.jl	/^exp2(z::Complex) = exp2(float(z))$/;"	f
exp2	base/complex.jl	/^function exp2(z::Complex{T}) where T<:AbstractFloat$/;"	f
exp2	base/math.jl	/^@inline function exp2(x::Base.BitInteger)$/;"	f
exp2	base/math.jl	/^exp2(x::AbstractFloat) = 2^x$/;"	f
exp2_fast	base/fastmath.jl	/^    exp2_fast(x::T) where {T<:ComplexTypes} =$/;"	f
exp_fast	base/fastmath.jl	/^    exp_fast(x::ComplexTypes) = exp(real(x)) * cis(imag(x))$/;"	f
exp_kernel	base/special/exp.jl	/^@inline exp_kernel(x::Float32) = @horner(x, 1.6666625440f-1, -2.7667332906f-3)$/;"	f
exp_kernel	base/special/exp.jl	/^@inline exp_kernel(x::Float64) = @horner(x, 1.66666666666666019037e-1,$/;"	f
exp_section_area	stdlib/Random/test/runtests.jl	/^exp_section_area    = (ziggurat_exp_r + 1)*exp(-ziggurat_exp_r)$/;"	v
exp_small_thres	base/special/exp.jl	/^@eval exp_small_thres(::Type{Float32}) = $(2.0f0^-13)$/;"	f
exp_small_thres	base/special/exp.jl	/^@eval exp_small_thres(::Type{Float64}) = $(2.0^-28)$/;"	f
expand-and	src/julia-syntax.scm	/^(define (expand-and e)$/;"	f
expand-arrow	src/julia-syntax.scm	/^(define (expand-arrow e)$/;"	f
expand-compare-chain	src/julia-syntax.scm	/^(define (expand-compare-chain e)$/;"	f
expand-const-decl	src/julia-syntax.scm	/^(define (expand-const-decl e)$/;"	f
expand-decls	src/julia-syntax.scm	/^(define (expand-decls what binds const?)$/;"	f
expand-for	src/julia-syntax.scm	/^(define (expand-for lhss itrs body)$/;"	f
expand-forms	src/julia-syntax.scm	/^(define (expand-forms e)$/;"	f
expand-function-def	src/julia-syntax.scm	/^(define (expand-function-def e)   ;; handle function definitions$/;"	f
expand-function-def-	src/julia-syntax.scm	/^(define (expand-function-def- e)$/;"	f
expand-fuse-broadcast	src/julia-syntax.scm	/^(define (expand-fuse-broadcast lhs rhs)$/;"	f
expand-generator	src/julia-syntax.scm	/^(define (expand-generator e flat outervars)$/;"	f
expand-let	src/julia-syntax.scm	/^(define (expand-let e)$/;"	f
expand-local-or-global-decl	src/julia-syntax.scm	/^(define (expand-local-or-global-decl e)$/;"	f
expand-macro-def	src/julia-syntax.scm	/^(define (expand-macro-def e)$/;"	f
expand-or	src/julia-syntax.scm	/^(define (expand-or e)$/;"	f
expand-scalar-compare	src/julia-syntax.scm	/^(define (expand-scalar-compare e)$/;"	f
expand-struct-def	src/julia-syntax.scm	/^(define (expand-struct-def e)$/;"	f
expand-table	src/julia-syntax.scm	/^(define expand-table$/;"	f
expand-toplevel-expr	src/jlfrontend.scm	/^(define (expand-toplevel-expr e file line)$/;"	f
expand-toplevel-expr--	src/jlfrontend.scm	/^(define (expand-toplevel-expr-- e file line)$/;"	f
expand-try	src/julia-syntax.scm	/^(define (expand-try e)$/;"	f
expand-unionall-def	src/julia-syntax.scm	/^(define (expand-unionall-def name type-ex)$/;"	f
expand-update-operator	src/julia-syntax.scm	/^(define (expand-update-operator op op= lhs rhs . declT)$/;"	f
expand-update-operator-	src/julia-syntax.scm	/^(define (expand-update-operator- op op= lhs rhs declT)$/;"	f
expand-vector-compare	src/julia-syntax.scm	/^(define (expand-vector-compare e)$/;"	f
expand-where	src/julia-syntax.scm	/^(define (expand-where body var)$/;"	f
expand-wheres	src/julia-syntax.scm	/^(define (expand-wheres body vars)$/;"	f
expand_ccallable	base/c.jl	/^function expand_ccallable(rt, def)$/;"	f
expandptr	stdlib/SparseArrays/src/sparsematrix.jl	/^function expandptr(V::Vector{<:Integer})$/;"	f
expandstorage!	stdlib/SparseArrays/src/higherorderfns.jl	/^function expandstorage!(A::SparseVecOrMat, maxstored)$/;"	f
expanduser	base/path.jl	/^expanduser(path::AbstractString) = path$/;"	f
expanduser	base/path.jl	/^function expanduser(path::AbstractString)$/;"	f
expansion	stdlib/Dates/src/io.jl	/^macro expansion time and reuses it later. see [`@dateformat_str`](@ref).$/;"	f
expect-end	src/julia-parser.scm	/^(define (expect-end s word)$/;"	f
expect-end-current-line	src/julia-parser.scm	/^(define expect-end-current-line 0)$/;"	f
expect-space-before	src/julia-parser.scm	/^(define (expect-space-before s t)$/;"	f
expect_func	src/codegen.cpp	/^static Function *expect_func;$/;"	v	typeref:typename:Function *	file:
expected_num_conns	stdlib/Distributed/test/topology.jl	/^expected_num_conns = 8$/;"	v
explicit_manifest_deps_get	base/loading.jl	/^function explicit_manifest_deps_get(project_file::String, where::UUID, name::String)::Union{Noth/;"	f
explicit_manifest_uuid_path	base/loading.jl	/^function explicit_manifest_uuid_path(project_file::String, pkg::PkgId)::Union{Nothing,String}$/;"	f
explicit_project_deps_get	base/loading.jl	/^function explicit_project_deps_get(project_file::String, name::String)::Union{Nothing,UUID}$/;"	f
expm1	base/complex.jl	/^function expm1(z::Complex{T}) where T<:Real$/;"	f
expm1_fast	base/fastmath.jl	/^    expm1_fast(x::ComplexTypes) = exp(x)-1$/;"	f
exponent	base/math.jl	/^function exponent(x::T) where T<:IEEEFloat$/;"	f
exponent	base/mpfr.jl	/^function exponent(x::BigFloat)$/;"	f
exponent_bias	base/math.jl	/^    @eval exponent_bias(::Type{$T}) = $(Int(exponent_one(T) >> significand_bits(T)))$/;"	f
exponent_bits	base/float.jl	/^    @eval exponent_bits(::Type{$T}) = $(sizeof(T)*8 - significand_bits(T) - 1)$/;"	f
exponent_half	base/float.jl	/^exponent_half(::Type{Float16}) =    0x3800$/;"	f
exponent_half	base/float.jl	/^exponent_half(::Type{Float32}) =    0x3f00_0000$/;"	f
exponent_half	base/float.jl	/^exponent_half(::Type{Float64}) =    0x3fe0_0000_0000_0000$/;"	f
exponent_lshift	base/special/ldexp_exp.jl	/^exponent_lshift(T::Type{Float32}, hw) = hw << 23 # this comes from 32 (bits in UInt32) minus 9 b/;"	f
exponent_lshift	base/special/ldexp_exp.jl	/^exponent_lshift(T::Type{Float64}, hw) = hw << 20 # this comes from 32 (bits in UInt32) minus 12 /;"	f
exponent_mask	base/float.jl	/^exponent_mask(::Type{Float16}) =    0x7c00$/;"	f
exponent_mask	base/float.jl	/^exponent_mask(::Type{Float32}) =    0x7f80_0000$/;"	f
exponent_mask	base/float.jl	/^exponent_mask(::Type{Float64}) =    0x7ff0_0000_0000_0000$/;"	f
exponent_max	base/math.jl	/^    @eval exponent_max(::Type{$T}) = $(Int(exponent_mask(T) >> significand_bits(T)) - exponent_b/;"	f
exponent_one	base/float.jl	/^exponent_one(::Type{Float16}) =     0x3c00$/;"	f
exponent_one	base/float.jl	/^exponent_one(::Type{Float32}) =     0x3f80_0000$/;"	f
exponent_one	base/float.jl	/^exponent_one(::Type{Float64}) =     0x3ff0_0000_0000_0000$/;"	f
exponent_raw_max	base/math.jl	/^    @eval exponent_raw_max(::Type{$T}) = $(Int(exponent_mask(T) >> significand_bits(T)))$/;"	f
exponent_rshift	base/special/ldexp_exp.jl	/^exponent_rshift(T::Type{Float32}, hw) = hw >> 23 # this comes from 32 (bits in UInt32) minus 9 b/;"	f
exponent_rshift	base/special/ldexp_exp.jl	/^exponent_rshift(T::Type{Float64}, hw) = hw >> 20 # this comes from 32 (bits in UInt32) minus 12 /;"	f
exponentbits	base/ryu/utils.jl	/^exponentbits(::Type{Float16}) = 5$/;"	f
exponentbits	base/ryu/utils.jl	/^exponentbits(::Type{Float32}) = 8$/;"	f
exponentbits	base/ryu/utils.jl	/^exponentbits(::Type{Float64}) = 11$/;"	f
export_gc_state	src/gc.c	/^STATIC_INLINE void export_gc_state(jl_ptls_t ptls, jl_gc_mark_sp_t *sp) {$/;"	f	typeref:typename:STATIC_INLINE void
export_sym	src/ast.c	/^jl_sym_t *export_sym;  jl_sym_t *import_sym;$/;"	v	typeref:typename:jl_sym_t *
exportp	src/julia.h	/^    uint8_t exportp:1;$/;"	m	struct:__anon055fe4271108	typeref:typename:uint8_t:1
expr-contains-eq	src/utils.scm	/^(define (expr-contains-eq x expr)$/;"	f
expr-contains-p	src/utils.scm	/^(define (expr-contains-p p expr (filt (lambda (x) #t)))$/;"	f
expr-find-all	src/utils.scm	/^(define (expr-find-all p expr key (filt (lambda (x) #t)))$/;"	f
expr_attributes	src/toplevel.c	/^static void expr_attributes(jl_value_t *v, int *has_intrinsics, int *has_defs)$/;"	f	typeref:typename:void	file:
expr_calls	base/show.jl	/^const expr_calls  = Dict(:call => ('(',')'), :calldecl => ('(',')'),$/;"	v
expr_infix	base/show.jl	/^const expr_infix = Set{Symbol}([:(:), :(->), Symbol("::")])$/;"	v
expr_infix_any	base/show.jl	/^const expr_infix_any = union(expr_infix, expr_infix_wide)$/;"	v
expr_infix_wide	base/show.jl	/^const expr_infix_wide = Set{Symbol}([$/;"	v
expr_parens	base/show.jl	/^const expr_parens = Dict(:tuple=>('(',')'), :vcat=>('[',']'),$/;"	v
exprresolve	base/cartesian.jl	/^exprresolve(arg) = arg$/;"	f
exprresolve	base/cartesian.jl	/^function exprresolve(ex::Expr)$/;"	f
exprresolve_arith	base/cartesian.jl	/^exprresolve_arith(arg) = false, 0$/;"	f
exprresolve_arith	base/cartesian.jl	/^function exprresolve_arith(ex::Expr)$/;"	f
exprresolve_arith_dict	base/cartesian.jl	/^const exprresolve_arith_dict = Dict{Symbol,Function}(:+ => +,$/;"	v
exprresolve_cond_dict	base/cartesian.jl	/^const exprresolve_cond_dict = Dict{Symbol,Function}(:(==) => ==,$/;"	v
exprresolve_conditional	base/cartesian.jl	/^exprresolve_conditional(arg) = false, false$/;"	f
exprresolve_conditional	base/cartesian.jl	/^exprresolve_conditional(b::Bool) = true, b$/;"	f
exprresolve_conditional	base/cartesian.jl	/^function exprresolve_conditional(ex::Expr)$/;"	f
ext_features	src/processor.cpp	/^    std::string ext_features;$/;"	m	struct:__anon839834ed0111::TargetData	typeref:typename:std::string	file:
ext_prefix	contrib/add_license_to_files.jl	/^const ext_prefix = Dict([$/;"	v
extensions	src/dlload.c	/^static char const *const extensions[] = { "", ".dylib" };$/;"	v	typeref:typename:char const * const[]	file:
extract	deps/Makefile	/^extract: $(addprefix extract-, $(DEP_LIBS))$/;"	t
extract-curl	deps/curl.mk	/^extract-curl: $(SRCCACHE)\/curl-$(CURL_VER)\/source-extracted$/;"	t
extract-dsfmt	deps/dsfmt.mk	/^extract-dsfmt: $(BUILDDIR)\/dsfmt-$(DSFMT_VER)\/source-extracted$/;"	t
extract-gmp	deps/gmp.mk	/^extract-gmp: $(SRCCACHE)\/gmp-$(GMP_VER)\/source-extracted$/;"	t
extract-implicit-whereparams	src/julia-syntax.scm	/^(define (extract-implicit-whereparams e)$/;"	f
extract-lapack	deps/blas.mk	/^extract-lapack: $(BUILDDIR)\/lapack-$(LAPACK_VER)\/source-extracted$/;"	t
extract-lapack	deps/blas.mk	/^extract-lapack: extract-openblas$/;"	t
extract-libgit2	deps/libgit2.mk	/^extract-libgit2: $(SRCCACHE)\/$(LIBGIT2_SRC_DIR)\/source-extracted$/;"	t
extract-libssh2	deps/libssh2.mk	/^extract-libssh2: $(SRCCACHE)\/$(LIBSSH2_SRC_DIR)\/source-extracted$/;"	t
extract-libuv	deps/libuv.mk	/^extract-libuv: $(SRCCACHE)\/$(LIBUV_SRC_DIR)\/source-extracted$/;"	t
extract-libwhich	deps/libwhich.mk	/^extract-libwhich: $(BUILDDIR)\/$(LIBWHICH_SRC_DIR)\/source-extracted$/;"	t
extract-line-file	src/jlfrontend.scm	/^(define (extract-line-file lno)$/;"	f
extract-llvm	deps/llvm.mk	/^extract-llvm: $(LLVM_SRC_DIR)\/source-extracted$/;"	t
extract-mbedtls	deps/mbedtls.mk	/^extract-mbedtls: $(SRCCACHE)\/$(MBEDTLS_SRC)\/source-extracted$/;"	t
extract-method-prologue	src/julia-syntax.scm	/^(define (extract-method-prologue body)$/;"	f
extract-mpfr	deps/mpfr.mk	/^extract-mpfr: $(SRCCACHE)\/mpfr-$(MPFR_VER)\/source-extracted$/;"	t
extract-objconv	deps/objconv.mk	/^extract-objconv: $(BUILDDIR)\/objconv\/source-extracted$/;"	t
extract-openblas	deps/blas.mk	/^extract-openblas: $(BUILDDIR)\/$(OPENBLAS_SRC_DIR)\/source-extracted$/;"	t
extract-openlibm	deps/openlibm.mk	/^extract-openlibm: $(BUILDDIR)\/$(OPENLIBM_SRC_DIR)\/source-extracted$/;"	t
extract-osxunwind	deps/unwind.mk	/^extract-osxunwind: $(BUILDDIR)\/libosxunwind-$(OSXUNWIND_VER)\/source-extracted$/;"	t
extract-patchelf	deps/patchelf.mk	/^extract-patchelf: $(SRCCACHE)\/patchelf-$(PATCHELF_VER)\/source-extracted$/;"	t
extract-pcre	deps/pcre.mk	/^extract-pcre: $(SRCCACHE)\/pcre2-$(PCRE_VER)\/source-extracted$/;"	t
extract-suitesparse	deps/suitesparse.mk	/^extract-suitesparse: $(BUILDDIR)\/SuiteSparse-$(SUITESPARSE_VER)\/source-extracted$/;"	t
extract-suitesparse-wrapper	deps/suitesparse.mk	/^extract-suitesparse-wrapper: extract-suitesparse$/;"	t
extract-suitesparse-wrapper	deps/suitesparse.mk	/^extract-suitesparse-wrapper:$/;"	t
extract-unwind	deps/unwind.mk	/^extract-unwind: $(SRCCACHE)\/libunwind-$(UNWIND_VER)\/source-extracted$/;"	t
extract-utf8proc	deps/utf8proc.mk	/^extract-utf8proc: $(UTF8PROC_BUILDDIR)\/source-extracted$/;"	t
extract_exception	stdlib/Distributed/src/pmap.jl	/^extract_exception(e) = isa(e, RemoteException) ? e.captured.ex : e$/;"	f
extract_imports	stdlib/Distributed/src/macros.jl	/^extract_imports(x) = extract_imports!(Any[], x)$/;"	f
extract_imports!	stdlib/Distributed/src/macros.jl	/^extract_imports!(imports, x) = imports$/;"	f
extract_imports!	stdlib/Distributed/src/macros.jl	/^function extract_imports!(imports, ex::Expr)$/;"	f
extract_wrapper	src/jltypes.c	/^static jl_value_t *extract_wrapper(jl_value_t *t)$/;"	f	typeref:typename:jl_value_t *	file:
extravagant_args	test/keywordargs.jl	/^extravagant_args(x,y=0,rest...;color="blue",kw...) = (x,y,rest,color,kwf1(6;tens=8,kw...))$/;"	f
extrema	base/bitset.jl	/^extrema(s::BitSet) = (first(s), last(s))$/;"	f
extrema	base/multidimensional.jl	/^extrema(A::AbstractArray; dims = :) = _extrema_dims(identity, A, dims)$/;"	f
extrema	base/multidimensional.jl	/^extrema(f, A::AbstractArray; dims=:) = _extrema_dims(f, A, dims)$/;"	f
extrema	base/operators.jl	/^extrema(f, itr) = _extrema_itr(f, itr)$/;"	f
extrema	base/operators.jl	/^extrema(f, x::Real) = (y = f(x); (y, y))$/;"	f
extrema	base/operators.jl	/^extrema(itr) = _extrema_itr(identity, itr)$/;"	f
extrema	base/operators.jl	/^extrema(x::Real) = (x, x)$/;"	f
extrema	base/range.jl	/^extrema(r::AbstractRange) = (minimum(r), maximum(r))$/;"	f
extrema!	base/multidimensional.jl	/^@noinline function extrema!(f, B, A)$/;"	f
extrema!	base/multidimensional.jl	/^extrema!(B, A) = extrema!(identity, B, A)$/;"	f
extrude	base/broadcast.jl	/^extrude(x) = x$/;"	f
extrude	base/broadcast.jl	/^extrude(x::AbstractArray) = Extruded(x, newindexer(x)...)$/;"	f
eye	stdlib/SuiteSparse/src/cholmod.jl	/^eye(m::Integer, n::Integer) = eye(m, n, Float64)$/;"	f
eye	stdlib/SuiteSparse/src/cholmod.jl	/^eye(n::Integer) = eye(n, n, Float64)$/;"	f
eye	stdlib/SuiteSparse/src/cholmod.jl	/^function eye(m::Integer, n::Integer, ::Type{Tv}) where Tv<:VTypes$/;"	f
f	base/compiler/ssair/show.jl	/^f() = leaf_function() # Delibarately not defined to end up in the IR verbatim$/;"	f
f	base/compiler/ssair/show.jl	/^function f()$/;"	f
f	base/docs/Docs.jl	/^    f(x, y) = ...$/;"	f
f	base/docs/Docs.jl	/^    f(x::T, y = ?) where {T} = ...$/;"	f
f	base/docs/basedocs.jl	/^f = open("file")$/;"	v
f	base/essentials.jl	/^f(y) = [x for x in y]$/;"	f
f	base/expr.jl	/^           function f()$/;"	f
f	base/util.jl	/^            function f()$/;"	f
f	contrib/generate_precompile.jl	/^f(x) = x03$/;"	f
f	src/codegen.cpp	/^    Function *f = NULL;$/;"	m	class:jl_codectx_t	typeref:typename:Function *	file:
f	src/flisp/unittest.lsp	/^(define f (compile `(lambda ,as ,(car (last-pair as)))))$/;"	f
f	src/flisp/unittest.lsp	/^(define f (compile `(lambda ,as ,(lastcdr as))))$/;"	f
f	src/gf.c	/^            jl_value_t *f;$/;"	m	struct:jl_method_error_bare::jl_method_error	typeref:typename:jl_value_t *	file:
f	src/interpreter.c	/^    jl_value_t *f;$/;"	m	struct:jl_interpret_call_args	typeref:typename:jl_value_t *	file:
f	src/runtime_intrinsics.c	/^    double f;$/;"	m	union:__anonc5a5d9f6020a	typeref:typename:double	file:
f	src/runtime_intrinsics.c	/^    float f;$/;"	m	union:__anonc5a5d9f6010a	typeref:typename:float	file:
f	stdlib/Distributed/src/remotecall.jl	/^f = Future(p)$/;"	v
f	stdlib/Distributed/test/distributed_exec.jl	/^    Distributed.@everywhere f() = myid()$/;"	f
f	stdlib/Distributed/test/distributed_exec.jl	/^f = @spawnat :any rand(1, 1)$/;"	v
f	stdlib/Distributed/test/distributed_exec.jl	/^f = @spawnat wid1 rand(1,1)$/;"	v
f	stdlib/Distributed/test/distributed_exec.jl	/^f = Future(wid1)$/;"	v
f	stdlib/Distributed/test/distributed_exec.jl	/^f = remotecall(myid, wid1)$/;"	v
f	stdlib/Distributed/test/distributed_exec.jl	/^f = remotecall_wait(identity, id_other, ones(10))$/;"	v
f	stdlib/Distributed/test/distributed_exec.jl	/^f=Future(id_me)$/;"	v
f	stdlib/Distributed/test/distributed_exec.jl	/^f=Future(id_other)$/;"	v
f	stdlib/InteractiveUtils/test/runtests.jl	/^    @noinline f() = ccall((:time, "error_library_doesnt_exist\\0"), Cvoid, ()) # some expression/;"	f
f	stdlib/Profile/test/runtests.jl	/^    function f(x)$/;"	f
f	stdlib/SparseArrays/test/higherorderfns.jl	/^    f(x, y) = x + y + 1$/;"	f
f	stdlib/SparseArrays/test/higherorderfns.jl	/^    f(x, y, z) = x + y + z + 1$/;"	f
f	stdlib/SparseArrays/test/higherorderfns.jl	/^    f(x, y, z) = x == y == z == 0 ? 0.0 : NaN$/;"	f
f	stdlib/Test/test/runtests.jl	/^    f(src) = read(pipeline(ignorestatus(`$cmd -e $src`), stderr=devnull), String)$/;"	f
f	test/ambiguous.jl	/^f(::Irrational) = 3$/;"	f
f	test/ambiguous.jl	/^f(::Signed) = 4$/;"	f
f	test/ambiguous.jl	/^f(::Union{AbstractIrrational, Int}) =  2$/;"	f
f	test/ambiguous.jl	/^f(::Union{typeof(pi), Integer}) =  1$/;"	f
f	test/ambiguous.jl	/^f(x::Complex{<:Integer}) = 1$/;"	f
f	test/ambiguous.jl	/^f(x::Complex{<:Rational}) = 2$/;"	f
f	test/arrayops.jl	/^    f(A, i) = @inbounds i == 0 ? (return 0) : A[i]$/;"	f
f	test/broadcast.jl	/^    @. f(x) = x^2$/;"	f
f	test/broadcast.jl	/^    f(A, n) = broadcast(x -> +(x, n), A)$/;"	f
f	test/ccall.jl	/^            f(b) = ccall(($f, libccalltest), $ty, (Cchar, $ty, Cchar), '0' + $i, a, $b[1])$/;"	f
f	test/compiler/contextual.jl	/^f() = 1$/;"	f
f	test/compiler/contextual.jl	/^f() = 2$/;"	f
f	test/compiler/inference.jl	/^    f() = c(Vector{Any[Int][1]}, [1])$/;"	f
f	test/compiler/irpasses.jl	/^function f(x::Vector{T}) where {T}$/;"	f
f	test/compiler/ssair.jl	/^    @noinline f(x, y) = x + y$/;"	f
f	test/compiler/ssair.jl	/^    f(a, b) = a >: b$/;"	f
f	test/core.jl	/^        function f$/;"	f
f	test/core.jl	/^        function f(x::T = 1) where T$/;"	f
f	test/core.jl	/^    @noinline f() = a[end]$/;"	f
f	test/core.jl	/^    f() = (global sin; nothing)$/;"	f
f	test/core.jl	/^    f() = (isa(A(), A) ? A : B)()$/;"	f
f	test/core.jl	/^    f() = y$/;"	f
f	test/core.jl	/^    f(::Union{ntuple(i->Type{sometypes[i]}, length(sometypes))...}) = 1$/;"	f
f	test/core.jl	/^    f(a::Vector{Vector{T}}) where {T} = a$/;"	f
f	test/core.jl	/^    function f()$/;"	f
f	test/core.jl	/^    macro f()$/;"	f
f	test/core.jl	/^f = unsafe_wrap(Array, ccall(:malloc, Ptr{UInt8}, (Csize_t,), 10), 10, own = true)$/;"	v
f	test/core.jl	/^f = unsafe_wrap(Array, pointer(d), length(d))$/;"	v
f	test/core.jl	/^f() = (x,y,(5,6))$/;"	f
f	test/core.jl	/^f(::Type{Bar}, x) = Bar(1)$/;"	f
f	test/core.jl	/^f(::Type{Bar}, x::T) where {T <: Abs} = Bar(2)$/;"	f
f	test/core.jl	/^f(::Type{Baz}, x) = Baz(1)$/;"	f
f	test/core.jl	/^f(::Type{Baz}, x::T) where {T <: Abs} = Baz(2)$/;"	f
f	test/core.jl	/^f(::Type{T}, x::T) where {T} = T(3)$/;"	f
f	test/core.jl	/^f(x) = 2$/;"	f
f	test/core.jl	/^f(x::Int) = 3.0$/;"	f
f	test/core.jl	/^function f end$/;"	f
f	test/deprecation_exec.jl	/^    f() = true$/;"	f
f	test/dict.jl	/^    f(x) = x^2$/;"	f
f	test/docs.jl	/^f = () -> nothing$/;"	v
f	test/docs.jl	/^f(x) = x$/;"	f
f	test/docs.jl	/^f(x, y) = x + y$/;"	f
f	test/docs.jl	/^function f end, function f! end, @enum E a b c$/;"	f
f	test/docs.jl	/^function f(x)$/;"	f
f	test/enums.jl	/^f(x::Fruit) = "hey, I'm a Fruit"$/;"	f
f	test/float16.jl	/^f = Float16(2.)$/;"	v
f	test/functional.jl	/^    f(s::String) = s == "a"$/;"	f
f	test/functional.jl	/^    f(s::Union{Nothing, Missing}) = s$/;"	f
f	test/generic_map_tests.jl	/^    f(x) = x + 1$/;"	f
f	test/generic_map_tests.jl	/^    f(x, y) = x + y$/;"	f
f	test/generic_map_tests.jl	/^    f(x, y, z) = x + y + z$/;"	f
f	test/grisu.jl	/^f = Float32(-3.9292015898194142585311918e-10)$/;"	v
f	test/grisu.jl	/^f = reinterpret(Float32,0x007FFFFF)$/;"	v
f	test/grisu.jl	/^f = reinterpret(Float32,0x00800000)$/;"	v
f	test/intrinsics.jl	/^    f() = Int24(Int(0x02468ace))$/;"	f
f	test/keywordargs.jl	/^        f(;k=0) = 2k+1$/;"	f
f	test/keywordargs.jl	/^    f(args...; kws...) = (args, values(kws))$/;"	f
f	test/keywordargs.jl	/^    f(x; y, z=3) = x + 2y + 3z$/;"	f
f	test/llvmcall.jl	/^    f() = ccall("extern time", llvmcall, Cvoid, (Ptr{Cvoid},), C_NULL)$/;"	f
f	test/llvmcall.jl	/^    f() = ccall("time", llvmcall, Cvoid, (Ptr{Cvoid},), C_NULL)$/;"	f
f	test/meta.jl	/^f() = backtrace()$/;"	f
f	test/meta.jl	/^function f(x)$/;"	f
f	test/misc.jl	/^    @noinline f(n) = n ? error() : Int$/;"	f
f	test/misc.jl	/^f(x) = 1$/;"	f
f	test/misc.jl	/^f(x, y; z=0) = x * y + z$/;"	f
f	test/precompile.jl	/^                f() = myid()$/;"	f
f	test/read.jl	/^f = joinpath(dir, "test.txt")$/;"	v
f	test/reflection.jl	/^f(x::Int; y=3) = x + y$/;"	f
f	test/show.jl	/^    f() = 1$/;"	f
f	test/specificity.jl	/^    f(dims::NTuple{M,Int}, A::AbstractArray{T,N}) where {T,M,N} = 3$/;"	f
f	test/specificity.jl	/^    f(dims::NTuple{N,Int}, A::AbstractArray{T,N}) where {T,N} = 2$/;"	f
f	test/specificity.jl	/^    f(dims::NTuple{N,Int}, A::AbstractArray{T,N}) where {T,N} = 4$/;"	f
f	test/specificity.jl	/^    f(dims::Tuple{}, A::AbstractArray{T,0}) where {T} = 1$/;"	f
f	test/stacktraces.jl	/^f(x) = (y = h(x); y)$/;"	f
f	test/syntax.jl	/^                     f(x) = x")$/;"	f
f	test/syntax.jl	/^                     f(x) = x", 1)[1]  # custom string literal is not a docstring$/;"	f
f	test/syntax.jl	/^                     f(x) = x", 1)[1]$/;"	f
f	test/syntax.jl	/^                  f(x) = x", 1)[1] === "x"$/;"	f
f	test/syntax.jl	/^        function f()$/;"	f
f	test/syntax.jl	/^    function f()$/;"	f
f	test/syntax.jl	/^    macro f() end$/;"	f
f	test/syntax.jl	/^    macro f(args...) end; @f "macro argument"$/;"	f
f	test/syntax.jl	/^    macro f(x); return :x; end$/;"	f
f1	src/ccalltest.c	/^        float f1;$/;"	m	struct:__anon84ad8c4c2e08::__anon84ad8c4c2f08	typeref:typename:float	file:
f1	src/ccalltest.c	/^    double f1;$/;"	m	struct:__anon84ad8c4c1d08	typeref:typename:double	file:
f1	src/ccalltest.c	/^    double f1;$/;"	m	struct:__anon84ad8c4c1e08	typeref:typename:double	file:
f1	test/arrayops.jl	/^    f1() = [1]$/;"	f
f1	test/boundscheck_exec.jl	/^@inline function f1(a)$/;"	f
f1	test/core.jl	/^    f1(x...) = [x...]$/;"	f
f1	test/core.jl	/^@eval function f1()$/;"	f
f1	test/core.jl	/^function f1()$/;"	f
f1	test/core.jl	/^function f1(a)$/;"	f
f1	test/read.jl	/^f1 = open(f)$/;"	v
f1	test/read.jl	/^f1 = open(f, "r+")$/;"	v
f1	test/syntax.jl	/^function f1(a)$/;"	f
f10	test/arrayops.jl	/^    f10() = Float64[1;]$/;"	f
f10178	test/staged.jl	/^@generated function f10178(x::X) where X$/;"	f
f10373	test/core.jl	/^f10373(x) = x$/;"	f
f10502	test/staged.jl	/^@generated function f10502(x...)$/;"	f
f10502	test/staged.jl	/^f10502() = ()$/;"	f
f1090	test/core.jl	/^function f1090(x)::Int$/;"	f
f1090_err	test/core.jl	/^function f1090_err()::Int$/;"	f
f10978	test/core.jl	/^f10978(T::TupleType10978) = isa(T, TupleType10978)$/;"	f
f10985	test/core.jl	/^f10985(::Any...) = 1$/;"	f
f10995	test/core.jl	/^f10995(::Any) = (while false; end; nothing)$/;"	f
f10995	test/core.jl	/^f10995(T::TupleType10978) = (while false; end; @assert isa(T, TupleType10978))$/;"	f
f11	test/arrayops.jl	/^    f11() = Int[1;2]$/;"	f
f11007	test/errorshow.jl	/^    f11007(::MethodType11007) = nothing$/;"	f
f11015	test/compiler/inference.jl	/^f11015(a::AT11015) = g11015(Base.fieldtype(typeof(a), :f), true)$/;"	f
f11065	test/core.jl	/^function f11065()$/;"	f
f11149	test/core.jl	/^@noinline f11149(a,b,args...) = (a,b,args...)$/;"	f
f11295	test/core.jl	/^function f11295(x...)$/;"	f
f11327	test/core.jl	/^f11327(::Type{T},x::T) where {T} = x$/;"	f
f11355	test/core.jl	/^function f11355(arg::DataType)$/;"	f
f11355	test/core.jl	/^function f11355(sig::Type{T}) where T<:Tuple$/;"	f
f11357	test/core.jl	/^function f11357()$/;"	f
f11366	test/compiler/inference.jl	/^f11366(x::Type{Ref{T}}) where {T} = Ref{x}$/;"	f
f11480	test/compiler/inference.jl	/^@noinline f11480(x,y) = x$/;"	f
f11675	test/core.jl	/^    function f11675(x)$/;"	f
f11715	test/core.jl	/^f11715(x) = (x === Tuple{Any})$/;"	f
f11813	test/core.jl	/^    f11813(p) = ((Int32(3),UInt8(0x66)),Int32(0)) === unsafe_load(convert(Ptr{Tuple{Tuple{Int32,/;"	f
f11813	test/core.jl	/^    f11813(p) = (Int8(1),(Int8(2),Int32(3))) === unsafe_load(convert(Ptr{Tuple{Int8,Tuple{Int8,I/;"	f
f11840	test/core.jl	/^f11840(::DataType) = "DataType"$/;"	f
f11840	test/core.jl	/^f11840(::Type) = "Type"$/;"	f
f11840	test/core.jl	/^f11840(::Type{T}) where {T<:Tuple} = "Tuple"$/;"	f
f11840	test/core.jl	/^f11840(::UnionAll) = "UnionAll"$/;"	f
f11858	test/core.jl	/^f11858(a) = for Baz in a$/;"	f
f11982	test/staged.jl	/^@generated function f11982(T)$/;"	f
f12	src/ccalltest.c	/^    complex float f12;$/;"	m	struct:__anon84ad8c4c1f08	typeref:typename:complex float	file:
f12	test/arrayops.jl	/^    f12() = Float64[1;2]$/;"	f
f12063	test/core.jl	/^f12063(args...) = 2$/;"	f
f12063	test/core.jl	/^f12063(tt, g, p, c, b, v, cu::T, d::AbstractArray{T, 2}, ve) where {T} = 1$/;"	f
f12092	test/core.jl	/^f12092(x::Int, y) = 0$/;"	f
f12092	test/core.jl	/^f12092(x::Int, y::Int...) = 2$/;"	f
f12092	test/core.jl	/^f12092(x::Int,) = 1$/;"	f
f12474	test/compiler/inference.jl	/^@generated function f12474(::Any)$/;"	f
f12476	test/compiler/inference.jl	/^function f12476(a)$/;"	f
f12517	test/core.jl	/^    @eval f12517() = Val{$x}$/;"	f
f12593_1	test/docs.jl	/^f12593_1() = 1$/;"	f
f12593_2	test/docs.jl	/^f12593_2() = 1$/;"	f
f12721	test/subtype.jl	/^f12721(::T) where {T<:Type{Int}} = true$/;"	f
f12826	test/compiler/inference.jl	/^f12826(v::Vector{I}) where {I<:Integer} = v[1]$/;"	f
f13	test/arrayops.jl	/^    f13() = Int[1;2.0]$/;"	f
f13127	test/show.jl	/^function f13127()$/;"	f
f13168	stdlib/Distributed/test/distributed_exec.jl	/^function f13168(n)$/;"	f
f13261	test/core.jl	/^f13261() = (x = (error("oops"),); +(x...))$/;"	f
f13432	test/core.jl	/^@noinline function f13432(x)$/;"	f
f13432b	test/core.jl	/^@noinline function f13432b(x)$/;"	f
f13647	test/core.jl	/^function f13647(x, y)$/;"	f
f14	test/arrayops.jl	/^    f14() = Int[1 2]$/;"	f
f14009	test/compiler/inference.jl	/^f14009(a) = rand(Bool) ? f14009(A14009(a)) : a$/;"	f
f14245	test/core.jl	/^f14245() = (v = []; push!(v, length(v)); v)$/;"	f
f14339	test/core.jl	/^f14339(x::T, y::T) where {T<:Union{}} = 0$/;"	f
f14346	test/reflection.jl	/^@noinline function f14346(id, mask, limit)$/;"	f
f1442	test/core.jl	/^    f1442(::DataType) = 1$/;"	f
f1442	test/core.jl	/^    f1442(::Type{S1442{T}}) where {T} = 2$/;"	f
f14767	test/core.jl	/^@inline f14767(x) = x ? A14767 : ()$/;"	f
f14893	test/core.jl	/^function f14893()$/;"	f
f15	test/arrayops.jl	/^    f15() = Float64[1 2]$/;"	f
f15180	test/core.jl	/^function f15180(x::T) where T$/;"	f
f15259	test/compiler/inference.jl	/^@eval f15259(x,y) = (a = $(Expr(:new, :A15259, :x, :y)); (a.x, a.y, getfield(a,1), getfield(a, 2/;"	f
f15276	test/compiler/inference.jl	/^function f15276(x)$/;"	f
f15280	test/reflection.jl	/^function f15280(x) end$/;"	f
f15425	test/core.jl	/^@noinline function f15425(x)$/;"	f
f15447	test/reflection.jl	/^@noinline function f15447(s, a)$/;"	f
f15561	test/goto.jl	/^function f15561()$/;"	f
f15684	test/docs.jl	/^    f15684(x) = 1$/;"	f
f15714	test/reflection.jl	/^function f15714(array_var15714)$/;"	f
f15809	test/core.jl	/^function f15809()$/;"	f
f15844	test/syntax.jl	/^function f15844(x)$/;"	f
f15894	test/arrayops.jl	/^function f15894(d)$/;"	f
f16	test/arrayops.jl	/^    f16() = Int[1 2.0]$/;"	f
f16023	test/core.jl	/^function f16023()$/;"	f
f16089	test/core.jl	/^f16089(args...) = typeof(args)$/;"	f
f16090	test/core.jl	/^f16090() = typeof(undefined_x16090::Tuple{Type{Int}})$/;"	f
f16091a	stdlib/Distributed/test/distributed_exec.jl	/^f16091a() = 1$/;"	f
f16091b	stdlib/Distributed/test/distributed_exec.jl	/^f16091b = () -> 1$/;"	v
f16096	test/syntax.jl	/^macro f16096()$/;"	f
f16096_2	test/syntax.jl	/^macro f16096_2()$/;"	f
f16153	test/core.jl	/^f16153(@nospecialize(x), y...) = 2$/;"	f
f16153	test/core.jl	/^f16153(x) = 1$/;"	f
f16158	test/core.jl	/^function f16158(x)$/;"	f
f16165	test/compiler/inline.jl	/^@inline f16165(x) = (x = UInt(x) + 1)$/;"	f
f1628	test/compiler/inference.jl	/^    f1628() = I1628((Integer,Int))$/;"	f
f1632	test/core.jl	/^    f1632(::R, ::S) where {R,S} = 1$/;"	f
f1632	test/core.jl	/^    f1632(::T, ::T) where {T} = 2$/;"	f
f16340	test/core.jl	/^function f16340(x::T) where T$/;"	f
f16431	test/core.jl	/^function f16431(x)$/;"	f
f16517	test/syntax.jl	/^f16517() = try error(); catch; 0; end$/;"	f
f16530a	test/compiler/inference.jl	/^f16530a() = fieldtype(Foo16530a, :c)$/;"	f
f16530a	test/compiler/inference.jl	/^f16530a(c) = fieldtype(Foo16530a, c)$/;"	f
f16530b	test/compiler/inference.jl	/^f16530b() = fieldtype(Foo16530b, :c)$/;"	f
f16530b	test/compiler/inference.jl	/^f16530b(c) = fieldtype(Foo16530b, c)$/;"	f
f16580	test/show.jl	/^f16580(x, y...; z=1, w=y+x, q...) = nothing$/;"	f
f16783	test/core.jl	/^function f16783()$/;"	f
f16eps2	test/float16.jl	/^const f16eps2 = Float32(eps(Float16(0.0)))\/2$/;"	v
f17	test/arrayops.jl	/^    f17() = [1:2;]$/;"	f
f17016	test/specificity.jl	/^f17016(f, t1::Tuple) = 1$/;"	f
f17016	test/specificity.jl	/^f17016(f, t::T_17016) = 0$/;"	f
f17147	test/core.jl	/^f17147(::Tuple) = 1$/;"	f
f17147	test/core.jl	/^f17147(::Vararg{Tuple,N}) where {N} = 2$/;"	f
f17204	test/ccall.jl	/^function f17204(a)$/;"	f
f17240	test/keywordargs.jl	/^    f17240(;a=a-1, b=2a) = (a, b)$/;"	f
f17255	test/core.jl	/^@noinline function f17255(n)$/;"	f
f17300	test/broadcast.jl	/^    f17300(x) = begin; push!(g, x); x+2; end$/;"	f
f17300kw	test/broadcast.jl	/^    f17300kw(x; y=0) = x + y$/;"	f
f17413	test/ccall.jl	/^@inline f17413() = (g17413(); g17413())$/;"	f
f17449	test/core.jl	/^@noinline f17449(x, y) = nothing$/;"	f
f17510	test/broadcast.jl	/^    f17510() = 9$/;"	f
f17572	test/compiler/inference.jl	/^function f17572(::Type{Val{A}}) where A$/;"	f
f17613_2	test/core.jl	/^function f17613_2(x)::Float64$/;"	f
f18	test/arrayops.jl	/^    f18() = Int[1:2;]$/;"	f
f18037	test/compiler/inference.jl	/^    f18037() = fieldtype(T, 1)$/;"	f
f18037	test/compiler/inference.jl	/^    f18037(i) = fieldtype(T, i)$/;"	f
f18085	test/core.jl	/^f18085(a, x...) = (0, )$/;"	f
f18095	test/core.jl	/^f18095(::Int, ::Number) = 0x21$/;"	f
f18095	test/core.jl	/^f18095(::Number, ::Int) = 0x12$/;"	f
f18173	test/core.jl	/^function f18173()$/;"	f
f18222	test/compiler/inference.jl	/^f18222(::Union{T, Int}) where {T<:AbstractFloat} = false$/;"	f
f18222	test/compiler/inference.jl	/^f18222(x) = true$/;"	f
f18236	test/core.jl	/^@eval @noinline f18236(ptr) = ccall(ptr, VecElement{Float64},$/;"	f
f18236_2	test/core.jl	/^@eval @noinline f18236_2(ptr) = ccall(ptr, VecElement{NTuple{2,Int8}},$/;"	f
f18348	test/subtype.jl	/^f18348(::Type{T}, x) where {T<:Any} = 1$/;"	f
f18348	test/subtype.jl	/^f18348(::Type{T}, x::T) where {T<:Any} = 2$/;"	f
f18385	test/core.jl	/^function f18385(g)$/;"	f
f18386	test/core.jl	/^function f18386(a, b, second_pass)$/;"	f
f18396	test/keywordargs.jl	/^    f18396(;kwargs...) = g18396(;kwargs...)$/;"	f
f18412	test/core.jl	/^Base.@propagate_inbounds function f18412(a)$/;"	f
f18444_1	test/core.jl	/^    f18444_1(a) = invoke(sin, Tuple{Int}, g18444(a))$/;"	f
f18444_2	test/core.jl	/^    f18444_2(a) = invoke(sin, Tuple{Integer}, g18444(a))$/;"	f
f18450	test/compiler/inference.jl	/^f18450() = ifelse(true, Tuple{Vararg{Int}}, Tuple{Vararg})$/;"	f
f18577	test/core.jl	/^@generated f18577() = quote ()->1 end$/;"	f
f18679	test/compiler/inference.jl	/^function f18679()$/;"	f
f18845	test/keywordargs.jl	/^f18845() = 2$/;"	f
f18883	stdlib/InteractiveUtils/test/runtests.jl	/^@generated f18883() = nothing$/;"	f
f18888	test/reflection.jl	/^f18888() = nothing$/;"	f
f18948	test/compiler/inline.jl	/^f18948() = (local bar::Int64; bar=1.5)$/;"	f
f19	test/arrayops.jl	/^    f19() = Float64[1:2;]$/;"	f
f19106	test/core.jl	/^function f19106()::Nothing end$/;"	f
f19333	test/core.jl	/^function f19333(x19333)$/;"	f
f19554	test/boundscheck_exec.jl	/^function f19554(a)$/;"	f
f19554_2	test/boundscheck_exec.jl	/^function f19554_2(a, b)$/;"	f
f19599	test/core.jl	/^f19599(x::((S)->Vector{S})(T)...) where {T} = 1$/;"	f
f19872a	test/math.jl	/^    f19872a(x) = x ^ 5$/;"	f
f19872b	test/math.jl	/^    f19872b(x) = x ^ (-1024)$/;"	f
f19957	test/compiler/inference.jl	/^f19957(::Any...) = "no"$/;"	f
f19957	test/compiler/inference.jl	/^f19957(::Int) = Int8(1)            # issue #19957, inference failure when splatting a number$/;"	f
f19957	test/compiler/inference.jl	/^f19957(::Int...) = Int16(1)$/;"	f
f1_11993	test/docs.jl	/^@inline f1_11993() = nothing$/;"	f
f1_24305	test/subtype.jl	/^f1_24305(x,y,z) = x*y-z^2-1$/;"	f
f1_ci	test/syntax.jl	/^f1_ci = code_typed(f1, (Int,), debuginfo=:source)[1][1]$/;"	v
f1_exprs	test/syntax.jl	/^f1_exprs = get_expr_list(f1_ci)$/;"	v
f2	src/ccalltest.c	/^        float f2;$/;"	m	struct:__anon84ad8c4c2e08::__anon84ad8c4c2f08	typeref:typename:float	file:
f2	src/ccalltest.c	/^    double f2;$/;"	m	struct:__anon84ad8c4c1d08	typeref:typename:double	file:
f2	src/ccalltest.c	/^    double f2;$/;"	m	struct:__anon84ad8c4c1e08	typeref:typename:double	file:
f2	test/arrayops.jl	/^    f2() = [1;]$/;"	f
f2	test/core.jl	/^    f2(x::Vararg{Any}) = [x...]$/;"	f
f2	test/core.jl	/^@eval function f2()$/;"	f
f2	test/core.jl	/^function f2()$/;"	f
f2	test/core.jl	/^function f2(a)$/;"	f
f2	test/read.jl	/^f2 = Base.Filesystem.open(f, Base.Filesystem.JL_O_RDONLY)$/;"	v
f2	test/read.jl	/^f2 = Base.Filesystem.open(f, Base.Filesystem.JL_O_RDWR)$/;"	v
f2	test/syntax.jl	/^@generated function f2(a)$/;"	f
f20	test/arrayops.jl	/^    f20() = [1:2;1:2]$/;"	f
f20065	test/numbers.jl	/^f20065(B, i) = UInt8(B[i])$/;"	f
f20103	test/subtype.jl	/^f20103(::Type{TT20103{X,X}},x::X) where {X} = 100$/;"	f
f20103	test/subtype.jl	/^f20103(::Type{TT20103{X,Y}},x::X,y::Y) where {X,Y} = 1$/;"	f
f20267	test/compiler/inference.jl	/^f20267(x::T20267{T}, y::T) where (T) = f20267(Any[1][1], x.inds)$/;"	f
f20343	test/compiler/inference.jl	/^f20343(::Any...) = "no"$/;"	f
f20343	test/compiler/inference.jl	/^f20343(::Int, ::Int, ::String, ::Int, ::Int, ::Int) = 1$/;"	f
f20343	test/compiler/inference.jl	/^f20343(::Int, ::String, ::Int, ::Int) = 1$/;"	f
f20343	test/compiler/inference.jl	/^f20343(::String, ::Int) = 1$/;"	f
f20343	test/compiler/inference.jl	/^f20343(::Union{Int,String}...) = Int8(1)$/;"	f
f20511	test/core.jl	/^f20511(x) = 1$/;"	f
f20511	test/core.jl	/^f20511(x::DataType) = 0$/;"	f
f20524	test/core.jl	/^        function f20524()$/;"	f
f20704	test/compiler/inference.jl	/^f20704(::Int) = 1$/;"	f
f20872	test/reflection.jl	/^f20872(::Val, ::Val) = false$/;"	f
f20872	test/reflection.jl	/^f20872(::Val{N}, ::Val{N}) where {N} = true$/;"	f
f20961	test/vecelement.jl	/^function f20961(x::Vector{Vec{N, T}}, y::Vector{Vec{N, T}}) where{N, T}$/;"	f
f21	test/arrayops.jl	/^    f21() = Int[1:2;1:2]$/;"	f
f21006	test/errorshow.jl	/^    f21006() = nothing$/;"	f
f21006	test/errorshow.jl	/^    f21006(x) = x$/;"	f
f21065	test/compiler/inference.jl	/^function f21065(x,y)$/;"	f
f21074	test/compiler/inline.jl	/^@eval f21074() = $(s21074((1,2))).x[1]$/;"	f
f21104at	test/ccall.jl	/^@noinline f21104at(::Type{T}) where {T} = ccall(:fn, Cvoid, (Some{T},), Some(0))$/;"	f
f21104rt	test/ccall.jl	/^@noinline f21104rt(::Type{T}) where {T} = ccall(:fn, Some{T}, ())$/;"	f
f21147	test/keywordargs.jl	/^    function f21147(f::Tuple{A}; kwargs...) where {B,A<:Tuple{B}}$/;"	f
f21175	test/compiler/inference.jl	/^f21175() = 902221$/;"	f
f21271	test/core.jl	/^f21271() = convert(Tuple{Type{Int}, Type{Float64}}, (Int, Float64))::Tuple{Type{Int}, Type{Float/;"	f
f21271	test/core.jl	/^f21271(x) = x::Tuple{Type{Int}, Type{Float64}}$/;"	f
f21410	test/compiler/inference.jl	/^f21410(::V, ::Pair{V,E}) where {V, E} = E$/;"	f
f21510	test/keywordargs.jl	/^    f21510(; Base.@nospecialize a = 2) = a$/;"	f
f21518	test/keywordargs.jl	/^    f21518(;kw=nothing) = kw$/;"	f
f21568	test/core.jl	/^    @eval f21568(x::AbstractArray{T,1}) where {T<:Real} = $y$/;"	f
f21568	test/core.jl	/^f21568() = 0$/;"	f
f21586	test/syntax.jl	/^f21586(; @m21586(a), @m21586(b)) = a + b$/;"	f
f21653	test/compiler/inference.jl	/^f21653() = f21653()$/;"	f
f21771	test/compiler/inference.jl	/^f21771(::Val{U}) where {U} = Tuple{g21771(U)}$/;"	f
f21900	test/core.jl	/^function f21900()$/;"	f
f21900_cnt	test/core.jl	/^f21900_cnt = 0$/;"	v
f21933	test/compiler/inference.jl	/^f21933(x::Val{T}) where {T} = f(Val(plus1(T)))$/;"	f
f21972	test/deprecation_exec.jl	/^    @noinline function f21972()$/;"	f
f22	test/arrayops.jl	/^    f22() = Float64[1:2;1:2]$/;"	f
f22290	test/compiler/inference.jl	/^f22290() = return 3$/;"	f
f22314	test/syntax.jl	/^function f22314()$/;"	f
f22364	test/compiler/inference.jl	/^f22364(::Int, ::Any...) = 0$/;"	f
f22364	test/compiler/inference.jl	/^f22364(::String, ::Any...) = 0.0$/;"	f
f22421_1	test/compiler/codegen.jl	/^@noinline f22421_1(x) = x[] + 1$/;"	f
f22421_2	test/compiler/codegen.jl	/^@noinline f22421_2(x) = x[] + 2$/;"	f
f22421_3	test/compiler/codegen.jl	/^@noinline f22421_3(x, y, z, v) = x[] + y[] + z[] + v$/;"	f
f22440	test/staged.jl	/^@generated function f22440(y)$/;"	f
f22440kernel	test/staged.jl	/^f22440kernel(::Type{T}) where {T<:AbstractFloat} = zero(T)$/;"	f
f22440kernel	test/staged.jl	/^f22440kernel(::Type{T}) where {T} = one(T)$/;"	f
f22440kernel	test/staged.jl	/^f22440kernel(x...) = x[1] + x[1]$/;"	f
f22440kernel	test/staged.jl	/^f22440kernel(x::AbstractFloat) = x * x$/;"	f
f22798	test/show.jl	/^@generated f22798(x::Integer, y) = :x$/;"	f
f22842	test/core.jl	/^f22842(x::DataType) = length(x.parameters)$/;"	f
f22842	test/core.jl	/^f22842(x::UnionAll) = UnionAll$/;"	f
f22865	stdlib/Distributed/test/distributed_exec.jl	/^@everywhere f22865(p) = remotecall_fetch(x->x.*2, p, fill(1.,2))$/;"	f
f22908	test/specificity.jl	/^f22908(::Type{Union{Int, Float32}}) = 1$/;"	f
f22908	test/specificity.jl	/^f22908(::Union) = 2$/;"	f
f22938	test/compiler/validation.jl	/^function f22938(a, b, x...)$/;"	f
f22979	test/reflection.jl	/^@generated f22979(x...) = (y = 1; :(x[1] + x[2]))$/;"	f
f23	test/arrayops.jl	/^    f23() = [1:2;1.0:2.0]$/;"	f
f23024	test/compiler/inference.jl	/^function f23024(::Type{T}, ::Int) where T$/;"	f
f23168	test/staged.jl	/^function f23168(a, x)$/;"	f
f23239	test/core.jl	/^f23239() = @aa23239()$/;"	f
f23595	test/compiler/codegen.jl	/^@generated f23595(g, args...) = Expr(:call, :g, Expr(:(...), :args))$/;"	f
f23685	test/compiler/inference.jl	/^f23685() = update23685!(h23685)$/;"	f
f24	test/arrayops.jl	/^    f24() = Int[1:2;1.0:2.0]$/;"	f
f24108	test/compiler/codegen.jl	/^@noinline f24108(x) = length(x)$/;"	f
f24305	test/subtype.jl	/^f24305(x) = [g24305(x) g24305(x) g24305(x) g24305(x); g24305(x) g24305(x) 0 0];$/;"	f
f24331	test/core.jl	/^function f24331()$/;"	f
f24363	test/core.jl	/^f24363(a) = a.x$/;"	f
f24460	test/core.jl	/^f24460(x, y) = 1$/;"	f
f24460	test/core.jl	/^f24460(x::Int, y::Int) = "3"$/;"	f
f24460	test/core.jl	/^f24460(x::T, y::T) where {T} = 2.0$/;"	f
f24521	test/subtype.jl	/^f24521(::Type{T}, ::Type{T}) where {T} = T$/;"	f
f24658	test/deprecation_exec.jl	/^f24658() = depwarn24658()$/;"	f
f24852_early_expr	test/compiler/inference.jl	/^    function f24852_early_expr(f, x::X, y::Y) where {X, Y}$/;"	f
f24852_early_inflated	test/compiler/inference.jl	/^    function f24852_early_inflated(f, x::X, y::Y) where {X, Y}$/;"	f
f24852_early_uninflated	test/compiler/inference.jl	/^    function f24852_early_uninflated(f, x::X, y::Y) where {X, Y}$/;"	f
f24852_gen_cinfo_inflated	test/compiler/inference.jl	/^function f24852_gen_cinfo_inflated(X, Y, _, f, x, y)$/;"	f
f24852_gen_cinfo_uninflated	test/compiler/inference.jl	/^function f24852_gen_cinfo_uninflated(X, Y, _, f, x, y)$/;"	f
f24852_gen_expr	test/compiler/inference.jl	/^function f24852_gen_expr(X, Y, _, f, x, y) # deparse f(x::X, y::Y) where {X, Y}$/;"	f
f24852_kernel	test/compiler/inference.jl	/^f24852_kernel(x, y::Number) = f24852_kernel3(x, (y,))$/;"	f
f24852_kernel1	test/compiler/inference.jl	/^f24852_kernel1(x, y::Tuple) = x * y[1][1][1]$/;"	f
f24852_kernel2	test/compiler/inference.jl	/^f24852_kernel2(x, y::Tuple) = f24852_kernel1(x, (y,))$/;"	f
f24852_kernel3	test/compiler/inference.jl	/^f24852_kernel3(x, y::Tuple) = f24852_kernel2(x, (y,))$/;"	f
f24852_kernel_cinfo	test/compiler/inference.jl	/^function f24852_kernel_cinfo(fsig::Type)$/;"	f
f24852_late_expr	test/compiler/inference.jl	/^    function f24852_late_expr(f, x::X, y::Y) where {X, Y}$/;"	f
f24852_late_inflated	test/compiler/inference.jl	/^    function f24852_late_inflated(f, x::X, y::Y) where {X, Y}$/;"	f
f24852_late_uninflated	test/compiler/inference.jl	/^    function f24852_late_uninflated(f, x::X, y::Y) where {X, Y}$/;"	f
f25	test/arrayops.jl	/^    f25() = [1:2 1:2]$/;"	f
f25055	test/syntax.jl	/^function f25055()$/;"	f
f25130	test/deprecation_exec.jl	/^f25130() = Base.depwarn("f25130 message", :f25130)$/;"	f
f25261	test/compiler/inference.jl	/^f25261() = (1, 1)$/;"	f
f25261	test/compiler/inference.jl	/^f25261(s) = i == 1 ? (1, 2) : nothing$/;"	f
f25579	test/compiler/inference.jl	/^function f25579(g)$/;"	f
f25835	stdlib/Test/test/runtests.jl	/^f25835(;x=nothing) = _f25835(x)$/;"	f
f25847	stdlib/Distributed/test/distributed_exec.jl	/^@everywhere function f25847(ref)$/;"	f
f26	test/arrayops.jl	/^    f26() = Int[1:2 1:2]$/;"	f
f26009	test/arrayops.jl	/^    f26009(A, i) = selectdim(A, 1, i)$/;"	f
f26172	test/compiler/inference.jl	/^f26172(v) = Val{length(Base.tail(ntuple(identity, v)))}() # Val(M-1)$/;"	f
f26301	test/core.jl	/^f26301(x) = 1$/;"	f
f26301	test/core.jl	/^f26301(x::Int) = 2$/;"	f
f26339	test/compiler/inference.jl	/^f26339(T) = T === Union{} ? 1 : ""$/;"	f
f26405	test/subtype.jl	/^f26405(::Type{T}) where {T<:Union{Integer, Missing}} = T$/;"	f
f26453	test/subtype.jl	/^f26453(x::T,y::T) where {S,T>:S} = 0$/;"	f
f265	test/worlds.jl	/^f265(::Any) = 1.0$/;"	f
f265	test/worlds.jl	/^f265(::Int) = 1$/;"	f
f26506	test/worlds.jl	/^f26506(@nospecialize(x)) = 1$/;"	f
f26506	test/worlds.jl	/^f26506(x::Float64) = 4$/;"	f
f26506	test/worlds.jl	/^f26506(x::Int) = 2$/;"	f
f26506	test/worlds.jl	/^f26506(x::String) = 3$/;"	f
f26518	test/core.jl	/^function f26518((a,b)) end$/;"	f
f265a	test/worlds.jl	/^    f265a(x::Any) = 1$/;"	f
f265a	test/worlds.jl	/^    f265a(x::Any) = 2.0$/;"	f
f265b	test/worlds.jl	/^    f265b(x::Any) = 2.0$/;"	f
f265b	test/worlds.jl	/^    f265b(x::Int) = 1$/;"	f
f265c	test/worlds.jl	/^    f265c(x::Any) = 1$/;"	f
f265c	test/worlds.jl	/^    f265c(x::Int) = 2.0$/;"	f
f26743	test/core.jl	/^function f26743()$/;"	f
f26826	test/compiler/inference.jl	/^f26826(x) = apply26826(Base.getproperty, Foo26826(1, x), :b)$/;"	f
f26873	test/syntax.jl	/^f26873 = 0$/;"	v
f27	test/arrayops.jl	/^    f27() = Float64[1:2 1:2]$/;"	f
f27078	test/compiler/inference.jl	/^f27078(T::Type{S}) where {S} = isa(T, UnionAll) ? f27078(T.body) : T$/;"	f
f27079	test/arrayops.jl	/^function f27079()$/;"	f
f27103	test/core.jl	/^function f27103()$/;"	f
f27129	test/syntax.jl	/^f27129(x = 1) = (@Base._inline_meta; x)$/;"	f
f27181	test/core.jl	/^function f27181()$/;"	f
f27204	test/core.jl	/^@noinline f27204(x) = x ? Foo27204{Int}() : Foo27204{Float64}()$/;"	f
f27209	test/core.jl	/^@noinline function f27209(x::Union{Float64, Nothing})$/;"	f
f27268	test/syntax.jl	/^function f27268()$/;"	f
f27268_2	test/syntax.jl	/^function f27268_2()$/;"	f
f27316	test/compiler/inference.jl	/^f27316(::Any) = f27316(Any[][1]), f27316(Any[][1])$/;"	f
f27316	test/compiler/inference.jl	/^f27316(::Vector) = nothing$/;"	f
f27351	test/compiler/inference.jl	/^    @eval f27351(::Val{$i27351}, ::AbstractT27351, ::AbstractT27351) = $i27351$/;"	f
f27351	test/compiler/inference.jl	/^f27351(::T, ::T27351, ::T27351) where {T} = 16$/;"	f
f27597	test/core.jl	/^function f27597(y)$/;"	f
f27910	test/core.jl	/^f27910() = ((),)[2]$/;"	f
f28	test/arrayops.jl	/^    f28() = [1:2 1.0:2.0]$/;"	f
f28044	test/syntax.jl	/^    function f28044(::Val{code28044}) where code28044$/;"	f
f28279	test/compiler/inference.jl	/^function f28279(b::Bool)$/;"	f
f28284	test/compiler/inference.jl	/^f28284() = Val(t28284(1))$/;"	f
f28356	test/compiler/inference.jl	/^function f28356(::Type{T}) where {T<:Union{Float64,Float32}}$/;"	f
f28399	test/core.jl	/^function f28399()$/;"	f
f28442	test/errorshow.jl	/^    f28442(c) = g28442(c + 1)$/;"	f
f28641	test/compiler/inference.jl	/^f28641(x::VoxelIndices, f) = getfield(x, f)$/;"	f
f28762	test/compiler/inference.jl	/^f28762(::Type{<:AbstractArray{T}}) where {T} = T$/;"	f
f28762	test/compiler/inference.jl	/^f28762(::Type{<:AbstractArray}) = Any$/;"	f
f28825	test/embedding/include_and_eval.jl	/^function f28825()$/;"	f
f28900	test/syntax.jl	/^f28900(; kwarg) = kwarg$/;"	f
f28955	test/compiler/inference.jl	/^f28955(::DataType, x, y) = y$/;"	f
f28955	test/compiler/inference.jl	/^f28955(::Type{Bool}, x, y) = x$/;"	f
f29	test/arrayops.jl	/^    f29() = Int[1:2 1.0:2.0]$/;"	f
f29036	test/compiler/inference.jl	/^function f29036(s, i)$/;"	f
f29083	test/compiler/inline.jl	/^f29083(;μ,σ) = μ + σ*randn()$/;"	f
f29152	test/core.jl	/^function f29152()$/;"	f
f29175	test/core.jl	/^function f29175(tuple::T) where {T<:Tuple}$/;"	f
f29326	test/compiler/inference.jl	/^function f29326()::Any$/;"	f
f29718	test/core.jl	/^function f29718()$/;"	f
f29828	test/core.jl	/^f29828() = 2::String$/;"	f
f2_11993	test/docs.jl	/^@inline f2_11993() = nothing$/;"	f
f2_17003	test/compiler/inference.jl	/^f2_17003(::Any) = f2_17003(NArray_17003(gl_17003))$/;"	f
f2_17003	test/compiler/inference.jl	/^f2_17003(item::AVector_17003) = nothing$/;"	f
f2_24305	test/subtype.jl	/^f2_24305(x,y,z) = x*y*z+y^2-x^2-2$/;"	f
f2_ci	test/syntax.jl	/^f2_ci = code_typed(f2, (Int,), debuginfo=:source)[1][1]$/;"	v
f2_exprs	test/syntax.jl	/^f2_exprs = get_expr_list(f2_ci)$/;"	v
f3	src/ccalltest.c	/^        float f3;$/;"	m	struct:__anon84ad8c4c2e08::__anon84ad8c4c2f08	typeref:typename:float	file:
f3	src/ccalltest.c	/^    double f3;$/;"	m	struct:__anon84ad8c4c1d08	typeref:typename:double	file:
f3	src/ccalltest.c	/^    double f3;$/;"	m	struct:__anon84ad8c4c1e08	typeref:typename:double	file:
f3	test/arrayops.jl	/^    f3() = [1;2]$/;"	f
f3	test/core.jl	/^    f3(x::Vararg) = [x...]$/;"	f
f3	test/core.jl	/^@eval function f3()$/;"	f
f3	test/core.jl	/^@generated function f3()$/;"	f
f3	test/core.jl	/^function f3(a)$/;"	f
f30	test/arrayops.jl	/^    f30() = [A;]$/;"	f
f30098	test/compiler/inference.jl	/^f30098() = _false30098 ? g30098() : 3$/;"	f
f30284	test/staged.jl	/^@generated function f30284(x)$/;"	f
f30385	test/compiler/inference.jl	/^f30385(T, y) = g30385(getfield, g30385(tuple, T, y), 1)$/;"	f
f30394	test/compiler/inference.jl	/^f30394(foo, T2) = f30394(foo.foo_inner, T2)$/;"	f
f30394	test/compiler/inference.jl	/^f30394(foo::T1, ::Type{T2}) where {T2, T1 <: T2} = foo$/;"	f
f30656	test/syntax.jl	/^f30656(T) = (t, _)::Pair -> t >= T$/;"	f
f30679	test/core.jl	/^@noinline function f30679(::DataType)$/;"	f
f30679	test/core.jl	/^@noinline function f30679(t::Type{Int})$/;"	f
f30772	test/syntax.jl	/^function f30772(a::T) where T$/;"	f
f30792	test/keywordargs.jl	/^    f30792(a::C; b::R=R(1)) where {R <: Real, C <: Union{R, Complex{R}}} = R$/;"	f
f30926	test/syntax.jl	/^f30926 = function (;k=0)$/;"	v
f31	test/arrayops.jl	/^    f31() = Int[A;]$/;"	f
f31012	test/compiler/contextual.jl	/^f31012(T) = Val(isbitstype(T))$/;"	f
f31219	stdlib/Test/test/runtests.jl	/^    f31219(x) = throw(Exception31219(x))$/;"	f
f31353	test/reflection.jl	/^function f31353(f, x::Array{<:Dict})$/;"	f
f31404	test/syntax.jl	/^f31404(a, b; kws...) = (a, b, kws.data)$/;"	f
f31486	test/core.jl	/^f31486(x::Bool, y::Bool, z::Bool) = Core.Intrinsics.bitcast(UInt8, Core.Intrinsics.add_int(x, Co/;"	f
f31583	test/core.jl	/^f31583() = a31583 === "a"$/;"	f
f31596	test/syntax.jl	/^f31596(x; kw...) = x$/;"	f
f31687_child	test/reflection.jl	/^    @noinline f31687_child(i) = f31687_nonexistent(i)$/;"	f
f31687_parent	test/reflection.jl	/^    f31687_parent() = f31687_child(0)$/;"	f
f3182	test/compiler/inference.jl	/^f3182(::Type{T}) where {T} = 0$/;"	f
f3182	test/compiler/inference.jl	/^f3182(x) = 1$/;"	f
f31974	test/compiler/inference.jl	/^f31974(a::UnitRange) = (if first(a) <= last(a); f31974((first(a)+1):last(a)); end; a)$/;"	f
f31974	test/compiler/inference.jl	/^f31974(n::Int) = f31974(1:n)$/;"	f
f32	test/arrayops.jl	/^    f32() = Float64[A;]$/;"	f
f32579	test/compiler/ssair.jl	/^function f32579(x::Int, b::Bool)$/;"	f
f32620	test/syntax.jl	/^function f32620(x::T) where T$/;"	f
f32820	test/core.jl	/^function f32820(refs)$/;"	f
f33	test/arrayops.jl	/^    f33() = [A;A]$/;"	f
f33135	test/syntax.jl	/^function f33135(x::T) where {C1, T}$/;"	f
f34	src/ccalltest.c	/^    complex float f34;$/;"	m	struct:__anon84ad8c4c1f08	typeref:typename:complex float	file:
f34	test/arrayops.jl	/^    f34() = Int[A;A]$/;"	f
f3471	test/core.jl	/^function f3471(y)$/;"	f
f35	test/arrayops.jl	/^    f35() = Float64[A;A]$/;"	f
f36	test/arrayops.jl	/^    f36() = [A;B]$/;"	f
f37	test/arrayops.jl	/^    f37() = Int[A;B]$/;"	f
f38	test/arrayops.jl	/^    f38() = [A A]$/;"	f
f3821	test/core.jl	/^function f3821()$/;"	f
f3852	test/core.jl	/^function f3852()$/;"	f
f39	test/arrayops.jl	/^    f39() = Int[A A]$/;"	f
f3_24305	test/subtype.jl	/^f3_24305(x,y,z) = exp(x)+z-exp(y)-3$/;"	f
f4	src/ccalltest.c	/^        float f4;$/;"	m	struct:__anon84ad8c4c2e08::__anon84ad8c4c2f08	typeref:typename:float	file:
f4	src/ccalltest.c	/^    double f4;$/;"	m	struct:__anon84ad8c4c1d08	typeref:typename:double	file:
f4	src/ccalltest.c	/^    double f4;$/;"	m	struct:__anon84ad8c4c1e08	typeref:typename:double	file:
f4	test/arrayops.jl	/^    f4() = [1;2.0]$/;"	f
f4	test/core.jl	/^function f4(a, p)$/;"	f
f40	test/arrayops.jl	/^    f40() = Float64[A A]$/;"	f
f41	test/arrayops.jl	/^    f41() = [A B]$/;"	f
f42	test/arrayops.jl	/^    f42() = Int[A B]$/;"	f
f4413	test/core.jl	/^f4413(::Union{A4413, B4413, C4413}) = "ABC"$/;"	f
f4413	test/core.jl	/^f4413(::Union{A4413, B4413}) = "AB"$/;"	f
f4479	test/core.jl	/^f4479(::Int, ::Int, ::Bool) = 2$/;"	f
f4479	test/core.jl	/^f4479(::Int, x, a...) = 0$/;"	f
f4479	test/core.jl	/^f4479(::Real,c) = 1$/;"	f
f4482	test/core.jl	/^f4482(x::T) where {T} = T$/;"	f
f4518	test/core.jl	/^f4518(x, y::Union{Int32,Int64}) = 0$/;"	f
f4518	test/core.jl	/^f4518(x::String, y::Union{Int32,Int64}) = 1$/;"	f
f4526	test/core.jl	/^f4526(x) = isa(x.a, Nothing)$/;"	f
f4528	test/core.jl	/^function f4528(A, B)$/;"	f
f4538_3	test/keywordargs.jl	/^f4538_3(;x=1) = x$/;"	f
f4675	test/core.jl	/^f4675(x::StridedArray...) = 1$/;"	f
f4675	test/core.jl	/^f4675(x::StridedArray{T}...) where {T} = 2$/;"	f
f47	test/core.jl	/^f47(x::Vector{Vector{T}}) where {T} = 0$/;"	f
f4731	test/core.jl	/^f4731(x...) = 0$/;"	f
f4731	test/core.jl	/^f4731(x::T...) where {T} = ""$/;"	f
f5	src/ccalltest.c	/^    double f5;$/;"	m	struct:__anon84ad8c4c1d08	typeref:typename:double	file:
f5	src/ccalltest.c	/^    double f5;$/;"	m	struct:__anon84ad8c4c1e08	typeref:typename:double	file:
f5	test/arrayops.jl	/^    f5() = [1 2]$/;"	f
f5	test/core.jl	/^function f5(a)$/;"	f
f5142	test/core.jl	/^f5142() = h5142(1)$/;"	f
f5150	test/core.jl	/^f5150(T) = Vector{Rational{T}}(undef, 1)$/;"	f
f5254	test/core.jl	/^f5254(::Type{T}, b::T) where {T} = 0$/;"	f
f5254	test/core.jl	/^f5254(a, b) = 1$/;"	f
f5457	test/core.jl	/^function f5457(obj_ptr::Ptr{Float64}, f)$/;"	f
f5575	test/compiler/inference.jl	/^f5575() = zeros5575(Type[Float64][1], 1)$/;"	f
f5577	test/core.jl	/^f5577(::Any) = false$/;"	f
f5577	test/core.jl	/^f5577(::Type) = true$/;"	f
f5584	test/core.jl	/^function f5584()$/;"	f
f56	src/ccalltest.c	/^    complex float f56;$/;"	m	struct:__anon84ad8c4c1f08	typeref:typename:complex float	file:
f5906	test/compiler/inference.jl	/^function f5906(h::Hanoi5906{T}) where T$/;"	f
f5971	test/show.jl	/^f5971(x, y...; z=1, w...) = nothing$/;"	f
f6	src/ccalltest.c	/^    double f6;$/;"	m	struct:__anon84ad8c4c1d08	typeref:typename:double	file:
f6	src/ccalltest.c	/^    double f6;$/;"	m	struct:__anon84ad8c4c1e08	typeref:typename:double	file:
f6	test/arrayops.jl	/^    f6() = [1 2.0]$/;"	f
f6	test/core.jl	/^function f6(a)$/;"	f
f6242	test/core.jl	/^f6242(x::NTuple{N,Int}) where {N} = (N==0 ? 1 : ntuple(n->x[n],N))$/;"	f
f6426	test/core.jl	/^f6426(x,args...) = f6426(x,map(a->(isa(a,Type) ? Type{a} : typeof(a)), args))$/;"	f
f6426	test/core.jl	/^f6426(x,t::Tuple{Vararg{Type}}) = string(t)$/;"	f
f6502	test/core.jl	/^f6502() = convert(Tuple{Vararg{Int}}, (10,))$/;"	f
f6591	test/intrinsics.jl	/^function f6591(d)$/;"	f
f6597	test/misc.jl	/^@noinline function f6597(c)$/;"	f
f6614	test/core.jl	/^f6614((x, y)) = [x, y]$/;"	f
f6846	test/core.jl	/^f6846() = (please6846; 2)$/;"	f
f6896	test/core.jl	/^f6896(x) = y::Int=x$/;"	f
f6980	test/core.jl	/^f6980(::Union{Int, Float64}, ::A6980) = false$/;"	f
f6980	test/core.jl	/^f6980(::Union{Int, Float64}, ::B6980) = true$/;"	f
f7	src/ccalltest.c	/^    double f7;$/;"	m	struct:__anon84ad8c4c1d08	typeref:typename:double	file:
f7	src/ccalltest.c	/^    double f7;$/;"	m	struct:__anon84ad8c4c1e08	typeref:typename:double	file:
f7	src/ccalltest.c	/^    float f7;$/;"	m	struct:__anon84ad8c4c1f08	typeref:typename:float	file:
f7	test/arrayops.jl	/^    f7() = Int[1]$/;"	f
f7	test/core.jl	/^function f7(a)$/;"	f
f7045	test/keywordargs.jl	/^    f7045(x::Float64; y=true) = y ? 1 : invoke(f7045,Tuple{Real},x,y=y)$/;"	f
f7045	test/keywordargs.jl	/^    f7045(x::Real; y=true) = y ? 2 : 3$/;"	f
f7062	test/core.jl	/^f7062(::Type{Array{t,n}}, ::Array{t,n}) where {t,n} = (t,n,2)$/;"	f
f7062	test/core.jl	/^f7062(::Type{Array{t}}  , ::Array{t,n}) where {t,n} = (t,n,1)$/;"	f
f7221	test/core.jl	/^f7221(::AbstractVecOrMat) = 3$/;"	f
f7221	test/core.jl	/^f7221(::BitArray) = 2$/;"	f
f7221	test/core.jl	/^f7221(::T) where {T<:Number} = 1$/;"	f
f7234_2	test/core.jl	/^    f7234_2() = (glob_x3 += 1)$/;"	f
f7234_a	test/core.jl	/^    function f7234_a()$/;"	f
f7234_b	test/core.jl	/^    function f7234_b()$/;"	f
f7234_cnt	test/core.jl	/^f7234_cnt = 0$/;"	v
f7648	test/reflection.jl	/^const f7648 = 10$/;"	v
f7652	test/core.jl	/^f7652() = fieldtype(t_a7652, :a) <: Int$/;"	f
f7978a	test/core.jl	/^f7978a() = 1$/;"	f
f7978b	test/core.jl	/^f7978b() = 1, 2$/;"	f
f8	src/ccalltest.c	/^    double f8;$/;"	m	struct:__anon84ad8c4c1d08	typeref:typename:double	file:
f8	src/ccalltest.c	/^    double f8;$/;"	m	struct:__anon84ad8c4c1e08	typeref:typename:double	file:
f8	src/ccalltest.c	/^    float f8;$/;"	m	struct:__anon84ad8c4c1f08	typeref:typename:float	file:
f8	test/arrayops.jl	/^    f8() = Float64[1]$/;"	f
f8	test/core.jl	/^function f8(a, c)$/;"	f
f8932	test/core.jl	/^f8932(a::Vec3_8932, b::Vec3_8932) = Vec3_8932(a.x % b.x, a.y % b.y, a.z % b.z)$/;"	f
f9	src/ccalltest.c	/^    double f9;$/;"	m	struct:__anon84ad8c4c1e08	typeref:typename:double	file:
f9	test/arrayops.jl	/^    f9() = Int[1;]$/;"	f
f9	test/core.jl	/^function f9(a)$/;"	f
f9085	test/numbers.jl	/^    f9085() = typemax(UInt64) != 2.0^64$/;"	f
f9088	test/staged.jl	/^@generated function f9088(x, a=5)$/;"	f
f9134	test/core.jl	/^function f9134()$/;"	f
f9520a	test/core.jl	/^f9520a(::Any, ::Any, args...) = 15$/;"	f
f9520b	test/core.jl	/^f9520b(::Any, ::Any, ::Any, args...) = 23$/;"	f
f9520c	test/core.jl	/^f9520c(::Any, ::Any, ::Any, ::Any, ::Any, ::Any, args...) = 46$/;"	f
f9534a	test/core.jl	/^f9534a() = (a = 1 + 2im; getfield(a, -100))$/;"	f
f9534a	test/core.jl	/^f9534a(x) = (a = 1 + 2im; getfield(a, x))$/;"	f
f9534b	test/core.jl	/^f9534b() = (a = (1, 2., ""); a[5])$/;"	f
f9534b	test/core.jl	/^f9534b(x) = (a = (1, 2., ""); a[x])$/;"	f
f9534c	test/core.jl	/^f9534c() = (a = (1, 2.); a[3])$/;"	f
f9534c	test/core.jl	/^f9534c(x) = (a = (1, 2.); a[x])$/;"	f
f9534d	test/core.jl	/^f9534d() = (a = (1, 2, 4, 6, 7); a[7])$/;"	f
f9534d	test/core.jl	/^f9534d(x) = (a = (1, 2, 4, 6, 7); a[x])$/;"	f
f9534e	test/core.jl	/^    f9534e(x) = setfield!(a, x, 3)$/;"	f
f9534f	test/core.jl	/^    f9534f() = getfield(a, -2)$/;"	f
f9534f	test/core.jl	/^    f9534f(x) = getfield(a, x)$/;"	f
f9534g	test/core.jl	/^f9534g(a, b, c...) = c[0]$/;"	f
f9534h	test/core.jl	/^f9534h(a, b, c...) = c[a]$/;"	f
f9535	test/core.jl	/^f9535() = (global counter9535; counter9535 += 1; counter9535)$/;"	f
f9765	test/core.jl	/^f9765(::Bool) = 1$/;"	f
f9770	test/compiler/inference.jl	/^function f9770(x)$/;"	f
f9947	test/core.jl	/^function f9947()$/;"	f
f::Fix1	base/operators.jl	/^(f::Fix1)(y) = f.f(f.x, y)$/;"	f
f::Fix2	base/operators.jl	/^(f::Fix2)(y) = f.f(y, f.x)$/;"	f
f::OOB_Functor	test/arrayops.jl	/^(f::OOB_Functor)(i::Int) = f.a[i]$/;"	f
f::T20804	test/keywordargs.jl	/^(f::T20804)(;x=10) = f.y + x$/;"	f
f::typeof	base/intfuncs.jl	/^    f::typeof(n*n) = 1$/;"	f
fComplicatedUnionAll	test/compiler/inference.jl	/^fComplicatedUnionAll(::Type{T}) where {T} = Type{Tuple{S,rand() >= 0.5 ? Int : Float64}} where S/;"	f
fIO	stdlib/SHA/test/runtests.jl	/^fIO = open(file, "w")$/;"	v
fLargeTable	test/reflection.jl	/^fLargeTable() = 4$/;"	f
fLargeTable	test/reflection.jl	/^fLargeTable(::Any...) = 3$/;"	f
fLargeTable	test/reflection.jl	/^fLargeTable(::Complex, ::Complex) = 4$/;"	f
fLargeTable	test/reflection.jl	/^fLargeTable(::Union{ComplexF32, ComplexF64}...) = 5$/;"	f
fMaybeFunc	test/core.jl	/^fMaybeFunc() = MaybeFunc(Int64)$/;"	f
fNInt	test/compiler/inference.jl	/^fNInt(x::NInt) = (x...,)$/;"	f
fNonBitsTypeConstants	test/compiler/inference.jl	/^function fNonBitsTypeConstants()$/;"	f
fT	test/compiler/inference.jl	/^    fT(x::T) where {T} = T$/;"	f
fUnionAll	test/compiler/inference.jl	/^fUnionAll(::Type{T}) where {T} = Type{S} where S <: T$/;"	f
fVararg	test/core.jl	/^fVararg(x) = Vararg{x}$/;"	f
f_19433	test/misc.jl	/^    f_19433(f_19433, xs...) = f_19433(_get_19433(xs)...)$/;"	f
f_22708	test/compiler/inference.jl	/^f_22708(::Type{Foo_22708}, x) = bar_22708("x")$/;"	f
f_22708	test/compiler/inference.jl	/^f_22708(x) = x$/;"	f
f_22708	test/compiler/inference.jl	/^f_22708(x::Int) = f_22708(Foo_22708, x)$/;"	f
f_31546	test/compiler/irpasses.jl	/^function f_31546(x)$/;"	f
f_apply_typevar	test/compiler/inline.jl	/^function f_apply_typevar(T)$/;"	f
f_args	stdlib/Distributed/test/distributed_exec.jl	/^@everywhere f_args(v1, v2=0; kw1=0, kw2=0) = v1+v2+kw1+kw2$/;"	f
f_constant	test/compiler/inference.jl	/^f_constant(x) = convert(Int, x)$/;"	f
f_dict_hash_alloc	test/compiler/codegen.jl	/^function f_dict_hash_alloc()$/;"	f
f_div	test/compiler/inline.jl	/^function f_div(x)$/;"	f
f_div	test/compiler/inline.jl	/^function f_div(x, y)$/;"	f
f_drop	stdlib/SparseArrays/test/sparsevector.jl	/^    f_drop(i, x) = (abs(x) == 1.) || (i in [1, 7])$/;"	f
f_fieldtype	test/core.jl	/^f_fieldtype(b) = fieldtype(b ? Int : FooFieldType, 1)$/;"	f
f_gen265	test/worlds.jl	/^f_gen265(x) = 1$/;"	f
f_gen265	test/worlds.jl	/^f_gen265(x::Int) = 2$/;"	f
f_gen265	test/worlds.jl	/^f_gen265(x::Type{Int}) = 3$/;"	f
f_identity_splat	test/compiler/inline.jl	/^f_identity_splat(t) = (t...,)$/;"	f
f_ifelse	test/compiler/inline.jl	/^function f_ifelse(x)$/;"	f
f_incr	test/compiler/inference.jl	/^f_incr(x::Tuple) = x$/;"	f
f_incr	test/compiler/inference.jl	/^f_incr(x::Tuple, y::Tuple, args...) = f_incr((x, y), args...)$/;"	f
f_infer_abstract_fieldtype	test/compiler/inference.jl	/^f_infer_abstract_fieldtype() = fieldtype(HasAbstractlyTypedField, :x)$/;"	f
f_infer_undef_field	test/compiler/inference.jl	/^f_infer_undef_field() = fieldtype(UndefField__, :x)$/;"	f
f_inferred_union	test/compiler/inference.jl	/^function f_inferred_union()$/;"	f
f_inferred_union_float	test/compiler/inference.jl	/^f_inferred_union_float(::Any) = "broken"$/;"	f
f_inferred_union_float	test/compiler/inference.jl	/^f_inferred_union_float(::Float64) = 2$/;"	f
f_inferred_union_int	test/compiler/inference.jl	/^f_inferred_union_int(::Any) = "broken"$/;"	f
f_inferred_union_int	test/compiler/inference.jl	/^f_inferred_union_int(::Int) = 3$/;"	f
f_inferred_union_nothing	test/compiler/inference.jl	/^f_inferred_union_nothing(::Any) = "broken"$/;"	f
f_inferred_union_nothing	test/compiler/inference.jl	/^f_inferred_union_nothing(::Nothing) = 1$/;"	f
f_inlined	test/meta.jl	/^@inline function f_inlined(x)$/;"	f
f_instance	test/compiler/inference.jl	/^f_instance(::Type{T}) where {T} = T.instance$/;"	f
f_isdefined	test/core.jl	/^f_isdefined(x) = @isdefined x$/;"	f
f_isdefined_cl_1	test/core.jl	/^f_isdefined_cl_1(y) = (local x; for i = 1:y; x = 2; end; () -> x; @isdefined x)$/;"	f
f_isdefined_cl_2	test/core.jl	/^f_isdefined_cl_2(y) = (local x; for i = 1:y; x = 2; end; () -> @isdefined x)$/;"	f
f_isdefined_cl_3	test/core.jl	/^f_isdefined_cl_3() = (x = 2; () -> x; @isdefined x)$/;"	f
f_isdefined_cl_4	test/core.jl	/^f_isdefined_cl_4() = (local x; () -> x; @isdefined x)$/;"	f
f_isdefined_cl_5	test/core.jl	/^f_isdefined_cl_5() = (x = 2; () -> @isdefined x)$/;"	f
f_isdefined_cl_6	test/core.jl	/^f_isdefined_cl_6() = (local x; () -> @isdefined x)$/;"	f
f_isdefined_def	test/core.jl	/^f_isdefined_def() = @isdefined f_isdefined_def$/;"	f
f_isdefined_defvarI	test/core.jl	/^f_isdefined_defvarI() = (x = rand(Int); @isdefined x)$/;"	f
f_isdefined_defvarS	test/core.jl	/^f_isdefined_defvarS() = (x = randstring(1); @isdefined x)$/;"	f
f_isdefined_latedef	test/core.jl	/^f_isdefined_latedef() = @isdefined f_isdefined_def$/;"	f
f_isdefined_splat	test/core.jl	/^f_isdefined_splat(x...) = @isdefined x$/;"	f
f_isdefined_tv	test/core.jl	/^f_isdefined_tv(::T) where {T} = @isdefined T$/;"	f
f_isdefined_undef	test/core.jl	/^f_isdefined_undef() = @isdefined x_isundef$/;"	f
f_isdefined_undefvar	test/core.jl	/^f_isdefined_undefvar() = (local x; @isdefined x)$/;"	f
f_isdefined_unionvar	test/core.jl	/^f_isdefined_unionvar(y, t) = (t > 0 && (x = (t == 1 ? 1 : y)); @isdefined x)$/;"	f
f_isdefined_va	test/core.jl	/^f_isdefined_va(::T...) where {T} = @isdefined T$/;"	f
f_lib	src/ccall.cpp	/^    const char *f_lib;    \/\/ if a library name is specified$/;"	m	struct:__anonc9e75fcc0208	typeref:typename:const char *	file:
f_line	test/show.jl	/^@inline function f_line()$/;"	f
f_mutable_nothrow	test/compiler/inline.jl	/^f_mutable_nothrow(s::String) = Val{typeof(s).mutable}$/;"	f
f_myid	stdlib/Distributed/test/distributed_exec.jl	/^f_myid = ()->myid()$/;"	v
f_name	src/ccall.cpp	/^    const char *f_name;   \/\/ if the symbol name is known$/;"	m	struct:__anonc9e75fcc0208	typeref:typename:const char *	file:
f_partial	test/compiler/irpasses.jl	/^    f_partial(x) = new(x, 2).x$/;"	f
f_pure_add	test/compiler/inference.jl	/^f_pure_add() = (1 + 1 == 2) ? true : "FAIL"$/;"	f
f_subtype	test/compiler/inline.jl	/^function f_subtype()$/;"	f
f_typeassert	test/compiler/codegen.jl	/^function f_typeassert(c)$/;"	f
f_typeof_tfunc	test/compiler/inference.jl	/^f_typeof_tfunc(x) = typeof(x)$/;"	f
f_unused_undefined_sp	test/core.jl	/^function f_unused_undefined_sp(::T...) where T$/;"	f
f_with_Type_arg	test/compiler/inference.jl	/^f_with_Type_arg(::Type{T}) where {T} = T$/;"	f
f_with_params	test/show.jl	/^struct f_with_params{t} <: Function$/;"	f
fact_	stdlib/SuiteSparse/src/cholmod.jl	/^function fact_(A::Sparse{<:VTypes}, cm::Array{UInt8};$/;"	f
factor_recreation_tests	stdlib/LinearAlgebra/test/cholesky.jl	/^function factor_recreation_tests(a_U, a_L)$/;"	f
factor_to_sparse!	stdlib/SuiteSparse/src/cholmod.jl	/^function factor_to_sparse!(F::Factor{Tv}) where Tv<:VTypes$/;"	f
factorial	base/combinatorics.jl	/^    factorial(n::Union{Int32,UInt32}) = factorial_lookup(n, _fact_table64, 12)$/;"	f
factorial	base/combinatorics.jl	/^    factorial(n::Union{Int8,UInt8,Int16,UInt16,Int32,UInt32}) = factorial(Int64(n))$/;"	f
factorial	base/combinatorics.jl	/^    factorial(n::Union{Int8,UInt8,Int16,UInt16}) = factorial(Int32(n))$/;"	f
factorial	base/combinatorics.jl	/^factorial(n::Int128) = factorial_lookup(n, _fact_table128, 33)$/;"	f
factorial	base/combinatorics.jl	/^factorial(n::UInt128) = factorial_lookup(n, _fact_table128, 34)$/;"	f
factorial	base/combinatorics.jl	/^factorial(n::Union{Int64,UInt64}) = factorial_lookup(n, _fact_table64, 20)$/;"	f
factorial	base/gmp.jl	/^factorial(x::BigInt) = isneg(x) ? BigInt(0) : MPZ.fac_ui(x)$/;"	f
factorial	base/intfuncs.jl	/^function factorial(n::Integer)$/;"	f
factorial	base/mpfr.jl	/^function factorial(x::BigFloat)$/;"	f
factorial_lookup	base/combinatorics.jl	/^function factorial_lookup(n::Integer, table, lim)$/;"	f
factorize	stdlib/LinearAlgebra/src/bidiag.jl	/^factorize(A::Bidiagonal) = A$/;"	f
factorize	stdlib/LinearAlgebra/src/dense.jl	/^factorize(A::Adjoint)   =   adjoint(factorize(parent(A)))$/;"	f
factorize	stdlib/LinearAlgebra/src/dense.jl	/^factorize(A::Transpose) = transpose(factorize(parent(A)))$/;"	f
factorize	stdlib/LinearAlgebra/src/dense.jl	/^function factorize(A::StridedMatrix{T}) where T$/;"	f
factorize	stdlib/LinearAlgebra/src/diagonal.jl	/^factorize(D::Diagonal) = D$/;"	f
factorize	stdlib/LinearAlgebra/src/ldlt.jl	/^factorize(S::SymTridiagonal) = ldlt(S)$/;"	f
factorize	stdlib/LinearAlgebra/src/lu.jl	/^factorize(A::Tridiagonal) = lu(A)$/;"	f
factorize	stdlib/LinearAlgebra/src/symmetric.jl	/^function factorize(A::HermOrSym{T}) where T$/;"	f
factorize	stdlib/LinearAlgebra/src/triangular.jl	/^factorize(A::AbstractTriangular) = A$/;"	f
factorize	stdlib/SparseArrays/src/linalg.jl	/^function factorize(A::AbstractSparseMatrixCSC)$/;"	f
factorize	stdlib/SparseArrays/src/linalg.jl	/^function factorize(A::LinearAlgebra.RealHermSymComplexHerm{Float64,<:AbstractSparseMatrixCSC})$/;"	f
factorize!	stdlib/SuiteSparse/src/cholmod.jl	/^function factorize!(A::Sparse{Tv}, F::Factor{Tv}, cmmn::Vector{UInt8}) where Tv<:VTypes$/;"	f
factorize_p!	stdlib/SuiteSparse/src/cholmod.jl	/^function factorize_p!(A::Sparse{Tv}, β::Real, F::Factor{Tv}, cmmn::Vector{UInt8}) where Tv<:VTy/;"	f
fadd	test/broadcast.jl	/^    fadd(aa) = aa .+ 1$/;"	f
fadd2	test/broadcast.jl	/^    fadd2(aa) = aa .+ 1 .* 2$/;"	f
failed_sym	src/task.c	/^jl_sym_t *failed_sym;$/;"	v	typeref:typename:jl_sym_t *
failing_cmd	test/spawn.jl	/^failing_cmd = `$catcmd _doesnt_exist__111_`$/;"	v
failing_pipeline	test/spawn.jl	/^failing_pipeline = pipeline(failing_cmd, stderr=devnull) # make quiet for tests$/;"	v
failure12003	test/core.jl	/^failure12003(dt=DATE12003) = Dates.year(dt)$/;"	f
fake_repl	stdlib/REPL/test/repl.jl	/^function fake_repl(@nospecialize(f); options::REPL.Options=REPL.Options(confirm_exit=false))$/;"	f
fakehistory	stdlib/REPL/test/repl.jl	/^fakehistory = """$/;"	v
fallback	src/processor.cpp	/^    CPU fallback;$/;"	m	struct:__anon839834ed0111::CPUSpec	typeref:typename:CPU	file:
fallback_testset	stdlib/Test/src/Test.jl	/^fallback_testset = FallbackTestSet()$/;"	v
false_sym	src/ast.c	/^    value_t false_sym;$/;"	m	struct:_jl_ast_context_t	typeref:typename:value_t	file:
falsecmd	test/spawn.jl	/^falsecmd = `false`$/;"	v
falses	base/bitarray.jl	/^falses(dims::DimOrInd...) = falses(dims)$/;"	f
falses	base/bitarray.jl	/^falses(dims::NTuple{N, Integer}) where {N} = fill!(BitArray(undef, dims), false)$/;"	f
falses	base/bitarray.jl	/^falses(dims::NTuple{N, Union{Integer, OneTo}}) where {N} = falses(map(to_dim, dims))$/;"	f
falses	base/bitarray.jl	/^falses(dims::Tuple{}) = fill!(BitArray(undef, dims), false)$/;"	f
fargt	src/ccall.cpp	/^    std::vector<Type*> fargt; \/\/ vector of llvm output types (julia_struct_to_llvm) for argume/;"	m	class:function_sig_t	typeref:typename:std::vector<Type * >	file:
fargt_isboxed	src/ccall.cpp	/^    std::vector<bool> fargt_isboxed; \/\/ vector of whether the llvm output type is a Julia-box /;"	m	class:function_sig_t	typeref:typename:std::vector<bool>	file:
fargt_sig	src/ccall.cpp	/^    std::vector<Type*> fargt_sig; \/\/ vector of ABI coercion types for call signature$/;"	m	class:function_sig_t	typeref:typename:std::vector<Type * >	file:
fast_math	src/julia.h	/^    int8_t fast_math;$/;"	m	struct:__anon055fe4271808	typeref:typename:int8_t
fast_op	base/fastmath.jl	/^const fast_op =$/;"	v
fastcheck	deps/Makefile	/^fastcheck: $(addprefix fastcheck-, $(DEP_LIBS))$/;"	t
fastcheck-curl	deps/curl.mk	/^fastcheck-curl: #none$/;"	t
fastcheck-dsfmt	deps/dsfmt.mk	/^fastcheck-dsfmt: check-dsfmt$/;"	t
fastcheck-gmp	deps/gmp.mk	/^fastcheck-gmp: check-gmp$/;"	t
fastcheck-lapack	deps/blas.mk	/^fastcheck-lapack: check-lapack$/;"	t
fastcheck-lapack	deps/blas.mk	/^fastcheck-lapack: fastcheck-openblas$/;"	t
fastcheck-libgit2	deps/libgit2.mk	/^fastcheck-libgit2: #none$/;"	t
fastcheck-libssh2	deps/libssh2.mk	/^fastcheck-libssh2: check-libssh2$/;"	t
fastcheck-libuv	deps/libuv.mk	/^fastcheck-libuv: #none$/;"	t
fastcheck-libwhich	deps/libwhich.mk	/^fastcheck-libwhich: check-libwhich$/;"	t
fastcheck-llvm	deps/llvm.mk	/^fastcheck-llvm: #none$/;"	t
fastcheck-mbedtls	deps/mbedtls.mk	/^fastcheck-mbedtls: #check-mbedtls$/;"	t
fastcheck-mpfr	deps/mpfr.mk	/^fastcheck-mpfr: check-mpfr$/;"	t
fastcheck-objconv	deps/objconv.mk	/^fastcheck-objconv: check-objconv$/;"	t
fastcheck-openblas	deps/blas.mk	/^fastcheck-openblas: check-openblas$/;"	t
fastcheck-openlibm	deps/openlibm.mk	/^fastcheck-openlibm: check-openlibm$/;"	t
fastcheck-osxunwind	deps/unwind.mk	/^fastcheck-osxunwind: check-osxunwind$/;"	t
fastcheck-pcre	deps/pcre.mk	/^fastcheck-pcre: check-pcre$/;"	t
fastcheck-suitesparse	deps/suitesparse.mk	/^fastcheck-suitesparse: #none$/;"	t
fastcheck-suitesparse-wrapper	deps/suitesparse.mk	/^fastcheck-suitesparse-wrapper: #none$/;"	t
fastcheck-suitesparse-wrapper	deps/suitesparse.mk	/^fastcheck-suitesparse-wrapper: fastcheck-suitesparse$/;"	t
fastcheck-unwind	deps/unwind.mk	/^fastcheck-unwind: #none$/;"	t
fastcheck-utf8proc	deps/utf8proc.mk	/^fastcheck-utf8proc: #check-utf8proc$/;"	t
fastfixedtoa	base/grisu/fastfixed.jl	/^function fastfixedtoa(v,mode,fractional_count,buffer)$/;"	f
fastmath	base/fastmath.jl	/^macro fastmath(expr)$/;"	f
fastprecision	base/grisu/fastprecision.jl	/^function fastprecision(v, requested_digits, buffer = Vector{UInt8}(undef, 100))$/;"	f
fastshortest	base/grisu/fastshortest.jl	/^function fastshortest(v, buffer = Vector{UInt8}(undef, 17))$/;"	f
fatal_type_bound_error	base/compiler/ssair/inlining.jl	/^const fatal_type_bound_error = ErrorException("fatal error in type inference (type bound)")$/;"	v
faz1	test/reflection.jl	/^faz1(x) = foo1(x)$/;"	f
faz2	test/reflection.jl	/^faz2(x) = foo2(x)$/;"	f
faz3	test/reflection.jl	/^faz3(x) = foo3(x)$/;"	f
faz4	test/reflection.jl	/^faz4(x) = foo4(x)$/;"	f
fd	base/filesystem.jl	/^fd(f::File) = f.handle$/;"	f
fd	base/iostream.jl	/^fd(s::IOStream) = Int(ccall(:jl_ios_fd, Clong, (Ptr{Cvoid},), s.ios))$/;"	f
fde_offset	src/debuginfo.cpp	/^    int32_t fde_offset;$/;"	m	struct:unw_table_entry	typeref:typename:int32_t	file:
fdio	base/iostream.jl	/^fdio(fd::Integer, own::Bool=false) = fdio(string("<fd ",fd,">"), fd, own)$/;"	f
fdio	base/iostream.jl	/^function fdio(name::AbstractString, fd::Integer, own::Bool=false)$/;"	f
fe	src/jlfrontend.scm	/^(define (fe str)$/;"	f
fe	stdlib/Random/src/normal.jl	/^const fe =$/;"	v
fe	stdlib/Random/test/runtests.jl	/^fe = Vector{Float64}(undef, ziggurat_table_size)$/;"	v
feature	src/processor.cpp	/^    uint32_t feature;$/;"	m	struct:__anon839834ed0111::FeatureDep	typeref:typename:uint32_t	file:
feature_arch_version	src/processor_arm.cpp	/^static std::pair<int,bool> feature_arch_version(const FeatureList<feature_sz> &feature)$/;"	f	namespace:ARM	typeref:typename:std::pair<int,bool>	file:
feature_masks	src/processor_arm.cpp	/^static constexpr auto feature_masks = get_feature_masks($/;"	v	namespace:ARM	typeref:typename:auto	file:
feature_masks	src/processor_x86.cpp	/^static constexpr auto feature_masks = get_feature_masks($/;"	v	namespace:X86	typeref:typename:auto	file:
feature_names	src/processor_arm.cpp	/^static constexpr FeatureName feature_names[] = {$/;"	v	namespace:ARM	typeref:typename:FeatureName[]	file:
feature_names	src/processor_x86.cpp	/^static constexpr FeatureName feature_names[] = {$/;"	v	namespace:X86	typeref:typename:FeatureName[]	file:
feature_sz	src/processor_arm.cpp	/^static constexpr size_t feature_sz = 3;$/;"	v	namespace:ARM	typeref:typename:size_t	file:
feature_sz	src/processor_x86.cpp	/^static constexpr size_t feature_sz = 9;$/;"	v	namespace:X86	typeref:typename:size_t	file:
features	src/processor.cpp	/^        FeatureList<n> features;$/;"	m	struct:__anon839834ed0111::TargetData::__anon839834ed0308	typeref:typename:FeatureList<n>	file:
features	src/processor.cpp	/^    FeatureList<n> features;$/;"	m	struct:__anon839834ed0111::CPUSpec	typeref:typename:FeatureList<n>	file:
features	stdlib/LibGit2/src/utils.jl	/^function features()$/;"	f
features_disable_avx	src/processor_x86.cpp	/^static inline void features_disable_avx(T &features)$/;"	f	namespace:X86	typeref:typename:void	file:
features_disable_avx512	src/processor_x86.cpp	/^static inline void features_disable_avx512(T &features)$/;"	f	namespace:X86	typeref:typename:void	file:
fencedcode	stdlib/Markdown/src/GitHub/GitHub.jl	/^function fencedcode(stream::IO, block::MD)$/;"	f
fetch	base/channels.jl	/^fetch(c::Channel) = isbuffered(c) ? fetch_buffered(c) : fetch_unbuffered(c)$/;"	f
fetch	base/task.jl	/^fetch(@nospecialize x) = x$/;"	f
fetch	base/task.jl	/^function fetch(t::Task)$/;"	f
fetch	stdlib/Distributed/src/macros.jl	/^macro fetch(expr)$/;"	f
fetch	stdlib/Distributed/src/remotecall.jl	/^fetch(r::RemoteChannel, args...) = call_on_owner(fetch_ref, r, args...)$/;"	f
fetch	stdlib/Distributed/src/remotecall.jl	/^function fetch(r::Future)$/;"	f
fetch	stdlib/LibGit2/src/LibGit2.jl	/^function fetch(repo::GitRepo; remote::AbstractString="origin",$/;"	f
fetch	stdlib/LibGit2/src/remote.jl	/^function fetch(rmt::GitRemote, refspecs::Vector{<:AbstractString};$/;"	f
fetch	stdlib/Profile/src/Profile.jl	/^function fetch()$/;"	f
fetch_buffered	base/channels.jl	/^function fetch_buffered(c::Channel)$/;"	f
fetch_ref	stdlib/Distributed/src/remotecall.jl	/^fetch_ref(rid, args...) = fetch(lookup_ref(rid).c, args...)$/;"	f
fetch_refspecs	stdlib/LibGit2/src/remote.jl	/^function fetch_refspecs(rmt::GitRemote)$/;"	f
fetch_unbuffered	base/channels.jl	/^fetch_unbuffered(c::Channel) = throw(ErrorException("`fetch` is not supported on an unbuffered C/;"	f
fetchfrom	stdlib/Distributed/src/macros.jl	/^macro fetchfrom(p, expr)$/;"	f
fetchhead_foreach_callback	stdlib/LibGit2/src/callbacks.jl	/^function fetchhead_foreach_callback(ref_name::Cstring, remote_url::Cstring,$/;"	f
fetchhead_foreach_cb	stdlib/LibGit2/src/callbacks.jl	/^fetchhead_foreach_cb() = @cfunction(fetchhead_foreach_callback, Cint, (Cstring, Cstring, Ptr{Git/;"	f
fetchheads	stdlib/LibGit2/src/repository.jl	/^function fetchheads(repo::GitRepo)$/;"	f
ff	src/flisp/unittest.lsp	/^(define ff (compile `(lambda ,as (set! ,(car (last-pair as)) 42)$/;"	f
ff	test/compiler/inference.jl	/^    ff(x::Type{T}) where {T} = T$/;"	f
ff16153	test/core.jl	/^ff16153(@nospecialize(x), y...) = 2$/;"	f
ff16153	test/core.jl	/^ff16153(x) = 1$/;"	f
ff6614	test/core.jl	/^ff6614((x, y)::Tuple{Int, String}) = (x, y)$/;"	f
ffmerge!	stdlib/LibGit2/src/merge.jl	/^function ffmerge!(repo::GitRepo, ann::GitAnnotated)$/;"	f
ffs_u32	src/gc.h	/^STATIC_INLINE unsigned ffs_u32(uint32_t bitvec)$/;"	f	typeref:typename:STATIC_INLINE unsigned
fi	stdlib/Random/src/normal.jl	/^const fi =$/;"	v
fi	stdlib/Random/test/runtests.jl	/^fi = Vector{Float64}(undef, ziggurat_table_size)$/;"	v
fib	test/core.jl	/^fib(n) = n < 2 ? n : fib(n-1) + fib(n-2)$/;"	f
fibb	test/core.jl	/^    fibb(n) = n < 2 ? n : fibb(n-1)+fibb(n-2)$/;"	f
fid	stdlib/Distributed/test/distributed_exec.jl	/^fid = remoteref_id(f)$/;"	v
field27368	test/core.jl	/^field27368(name) =$/;"	f
field_access	test/clangsa/MissingRoots.c	/^int field_access() {$/;"	f	typeref:typename:int
fieldcount	base/reflection.jl	/^function fieldcount(@nospecialize t)$/;"	f
fieldcount_noerror	base/compiler/tfuncs.jl	/^function fieldcount_noerror(@nospecialize t)$/;"	f
fielddesc_type	src/julia.h	/^    uint32_t fielddesc_type : 2; \/\/ 0 -> 8, 1 -> 16, 2 -> 32$/;"	m	struct:__anon055fe4270f08	typeref:typename:uint32_t:2
fielddoc	stdlib/REPL/src/docview.jl	/^fielddoc(object, field::Symbol) = fielddoc(aliasof(object, typeof(object)), field)$/;"	f
fielddoc	stdlib/REPL/src/docview.jl	/^function fielddoc(binding::Binding, field::Symbol)$/;"	f
fieldindex	base/reflection.jl	/^function fieldindex(T::DataType, name::Symbol, err::Bool=true)$/;"	f
fieldname	base/reflection.jl	/^fieldname(t::Type{<:Tuple}, i::Integer) =$/;"	f
fieldname	base/reflection.jl	/^fieldname(t::UnionAll, i::Integer) = fieldname(unwrap_unionall(t), i)$/;"	f
fieldname	base/reflection.jl	/^function fieldname(t::DataType, i::Integer)$/;"	f
fieldnames	base/reflection.jl	/^fieldnames(::Core.TypeofBottom) =$/;"	f
fieldnames	base/reflection.jl	/^fieldnames(t::DataType) = (fieldcount(t); # error check to make sure type is specific enough$/;"	f
fieldnames	base/reflection.jl	/^fieldnames(t::Type{<:Tuple}) = ntuple(identity, fieldcount(t))$/;"	f
fieldnames	base/reflection.jl	/^fieldnames(t::UnionAll) = fieldnames(unwrap_unionall(t))$/;"	f
fieldoffset	base/reflection.jl	/^fieldoffset(x::DataType, idx::Integer) = (@_pure_meta; ccall(:jl_get_field_offset, Csize_t, (Any/;"	f
fieldtype	base/show.jl	/^        fieldtype(typeinfo, 1) => fieldtype(typeinfo, 2) :$/;"	f
fieldtype_nothrow	base/compiler/tfuncs.jl	/^function fieldtype_nothrow(@nospecialize(s0), @nospecialize(name))$/;"	f
fieldtype_tfunc	base/compiler/tfuncs.jl	/^fieldtype_tfunc(@nospecialize(s0), @nospecialize(name), @nospecialize(inbounds)) =$/;"	f
fieldtype_tfunc	base/compiler/tfuncs.jl	/^function fieldtype_tfunc(@nospecialize(s0), @nospecialize(name))$/;"	f
fieldtypes	base/reflection.jl	/^fieldtypes(T::Type) = ntuple(i -> fieldtype(T, i), fieldcount(T))$/;"	f
file	src/codegen.cpp	/^        StringRef file;$/;"	m	struct:emit_function::DebugLineTable	typeref:typename:StringRef	file:
file	src/codegen.cpp	/^    StringRef file{};$/;"	m	class:jl_codectx_t	typeref:typename:StringRef	file:
file	src/julia.h	/^    jl_sym_t *file;$/;"	m	struct:_jl_method_t	typeref:typename:jl_sym_t *
file	src/julia.h	/^    uv_os_fd_t file;$/;"	m	struct:__anon055fe4271708	typeref:typename:uv_os_fd_t
file	stdlib/FileWatching/test/runtests.jl	/^file = joinpath(dir, "afile.txt")$/;"	v
file	stdlib/Mmap/test/runtests.jl	/^file = tempname()$/;"	v
file	stdlib/SHA/test/runtests.jl	/^file = joinpath(tempdir, ".sha")$/;"	v
file	test/core.jl	/^file = open(fname, "w")$/;"	v
file	test/file.jl	/^file = joinpath(dir, "afile.txt")$/;"	v
file	test/file.jl	/^file = newfile$/;"	v
fileName	deps/srccache/patchelf-0.9/src/patchelf.cc	/^static string fileName;$/;"	v	typeref:typename:string	file:
fileSize	deps/srccache/patchelf-0.9/src/patchelf.cc	/^off_t fileSize, maxSize;$/;"	v	typeref:typename:off_t
file_name	src/julia_internal.h	/^    char *file_name;$/;"	m	struct:__anon9dd660c30108	typeref:typename:char *
filedata	stdlib/SharedArrays/test/runtests.jl	/^filedata = Vector{UInt8}(undef, len)$/;"	v
filedata	stdlib/SharedArrays/test/runtests.jl	/^filedata = similar(Atrue)$/;"	v
filedata2	stdlib/SharedArrays/test/runtests.jl	/^filedata2 = similar(Atrue)$/;"	v
filemode	base/stat.jl	/^filemode(st::StatStruct) = st.mode$/;"	f
filemode	stdlib/LibGit2/src/tree.jl	/^function filemode(te::GitTreeEntry)$/;"	f
filename	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "filename" : "128.png",$/;"	s	object:images.4
filename	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "filename" : "128@2x.png",$/;"	s	object:images.5
filename	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "filename" : "16.png",$/;"	s	object:images.0
filename	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "filename" : "16@2x.png",$/;"	s	object:images.1
filename	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "filename" : "256.png",$/;"	s	object:images.6
filename	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "filename" : "256@2x.png",$/;"	s	object:images.7
filename	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "filename" : "32.png",$/;"	s	object:images.2
filename	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "filename" : "32@2x.png",$/;"	s	object:images.3
filename	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "filename" : "512.png",$/;"	s	object:images.8
filename	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "filename" : "512@2x.png",$/;"	s	object:images.9
filename	src/debuginfo.cpp	/^    StringRef filename;$/;"	m	struct:debug_link_info	typeref:typename:StringRef	file:
filename	stdlib/LibGit2/src/tree.jl	/^function filename(te::GitTreeEntry)$/;"	f
filename	test/read.jl	/^filename = joinpath(dir, "file.txt")$/;"	v
fileno	src/support/ios.c	/^#define fileno /;"	d	file:
files	stdlib/LibGit2/src/LibGit2.jl	/^files = LibGit2.diff_files(repo, "branch\/a", "branch\/b", filter=filt)$/;"	v
files_changed	stdlib/LibGit2/src/diff.jl	/^function files_changed(diff_stat::GitDiffStats)$/;"	f
filesize	base/stat.jl	/^filesize(st::StatStruct) = st.size$/;"	f
fileurl	base/methodshow.jl	/^fileurl(file) = let f = find_source_file(file); f === nothing ? "" : "file:\/\/"*f; end$/;"	f
fill	base/array.jl	/^fill(v, dims::DimOrInd...) = fill(v, dims)$/;"	f
fill	base/array.jl	/^fill(v, dims::NTuple{N, Integer}) where {N} = (a=Array{typeof(v),N}(undef, dims); fill!(a, v); a/;"	f
fill	base/array.jl	/^fill(v, dims::NTuple{N, Union{Integer, OneTo}}) where {N} = fill(v, map(to_dim, dims))$/;"	f
fill	base/array.jl	/^fill(v, dims::Tuple{}) = (a=Array{typeof(v),0}(undef, dims); fill!(a, v); a)$/;"	f
fill!	base/array.jl	/^function fill!(a::Union{Array{UInt8}, Array{Int8}}, x::Integer)$/;"	f
fill!	base/array.jl	/^function fill!(dest::Array{T}, x) where T$/;"	f
fill!	base/bitarray.jl	/^function fill!(B::BitArray, x)$/;"	f
fill!	base/multidimensional.jl	/^fill!(V::SubArray{Bool, <:Any, <:BitArray, Tuple{AbstractUnitRange{Int}, Vararg{Union{Int,Abstra/;"	f
fill!	base/multidimensional.jl	/^function fill!(A::AbstractArray{T}, x) where T$/;"	f
fill!	base/multidimensional.jl	/^function fill!(V::SubArray{Bool, <:Any, <:BitArray, Tuple{AbstractUnitRange{Int}}}, x)$/;"	f
fill!	stdlib/LibGit2/src/gitcredential.jl	/^fill!(helper::GitCredentialHelper, cred::GitCredential) = run!(helper, "get", cred)$/;"	f
fill!	stdlib/LibGit2/src/gitcredential.jl	/^function fill!(cfg::GitConfig, cred::GitCredential)$/;"	f
fill!	stdlib/LinearAlgebra/src/special.jl	/^function fill!(A::Union{Diagonal,Bidiagonal,Tridiagonal,SymTridiagonal}, x)$/;"	f
fill!	stdlib/LinearAlgebra/src/symmetric.jl	/^fill!(A::HermOrSym, x) = fillstored!(A, x)$/;"	f
fill!	stdlib/SharedArrays/src/SharedArrays.jl	/^function fill!(S::SharedArray, v)$/;"	f
fill!	stdlib/SparseArrays/src/sparsevector.jl	/^function fill!(A::Union{SparseVector, AbstractSparseMatrixCSC}, x)$/;"	f
fill-missing-argname	src/julia-syntax.scm	/^(define (fill-missing-argname a unused)$/;"	f
fill_array!	stdlib/Random/src/RNGs.jl	/^fill_array!(s::DSFMT_state, A::Ptr{Float64}, n::Int, ::CloseOpen01_64) =$/;"	f
fill_array!	stdlib/Random/src/RNGs.jl	/^fill_array!(s::DSFMT_state, A::Ptr{Float64}, n::Int, ::CloseOpen12_64) =$/;"	f
fill_bitarray_from_itr!	base/bitarray.jl	/^function fill_bitarray_from_itr!(B::BitArray, itr)$/;"	f
fill_chunks!	base/bitarray.jl	/^function fill_chunks!(Bc::Array{UInt64}, x::Bool, pos::Integer, numbits::Integer)$/;"	f
fill_to_length	base/ntuple.jl	/^@inline function fill_to_length(t::Tuple, val, ::Val{N}) where {N}$/;"	f
fill_to_length	base/tuple.jl	/^fill_to_length(t::NTuple{N,Any}, val, ::Val{N}) where {N} = t$/;"	f
fill_to_length	base/tuple.jl	/^fill_to_length(t::Tuple{Any}, val, ::Val{2}) = (t..., val)$/;"	f
fill_to_length	base/tuple.jl	/^fill_to_length(t::Tuple{}, val, ::Val{1}) = (val,)$/;"	f
fill_to_length	base/tuple.jl	/^fill_to_length(t::Tuple{}, val, ::Val{2}) = (val, val)$/;"	f
fillband!	stdlib/LinearAlgebra/src/dense.jl	/^function fillband!(A::AbstractMatrix{T}, x, l, u) where T$/;"	f
fillcache_zeros!	stdlib/Random/src/RNGs.jl	/^function fillcache_zeros!(r::MersenneTwister)$/;"	f
filldigits32	base/grisu/fastfixed.jl	/^function filldigits32(n,buffer,len)$/;"	f
filldigits32fixedlength	base/grisu/fastfixed.jl	/^function filldigits32fixedlength(n1,requested_len,buffer,len)$/;"	f
filldigits64	base/grisu/fastfixed.jl	/^function filldigits64(n3,buffer,len)$/;"	f
filldigits64fixedlength	base/grisu/fastfixed.jl	/^function filldigits64fixedlength(n2,buffer,len)$/;"	f
fillfractionals	base/grisu/fastfixed.jl	/^function fillfractionals(fractionals, exponent,$/;"	f
fillstored!	stdlib/LinearAlgebra/src/hessenberg.jl	/^fillstored!(H::UpperHessenberg, x) = (fillband!(H.data, x, -1, size(H,2)-1); H)$/;"	f
fillstored!	stdlib/LinearAlgebra/src/special.jl	/^fillstored!(A::Bidiagonal, x) = (fill!(A.dv, x); fill!(A.ev, x); A)$/;"	f
fillstored!	stdlib/LinearAlgebra/src/special.jl	/^fillstored!(A::Diagonal, x) = (fill!(A.diag, x); A)$/;"	f
fillstored!	stdlib/LinearAlgebra/src/special.jl	/^fillstored!(A::SymTridiagonal, x) = (fill!(A.dv, x); fill!(A.ev, x); A)$/;"	f
fillstored!	stdlib/LinearAlgebra/src/special.jl	/^fillstored!(A::Tridiagonal, x) = (fill!(A.dl, x); fill!(A.d, x); fill!(A.du, x); A)$/;"	f
fillstored!	stdlib/LinearAlgebra/src/symmetric.jl	/^function fillstored!(A::HermOrSym{T}, x) where T$/;"	f
fillstored!	stdlib/LinearAlgebra/src/triangular.jl	/^fillstored!(A::LowerTriangular, x)     = (fillband!(A.data, x, 1-size(A,1), 0); A)$/;"	f
fillstored!	stdlib/LinearAlgebra/src/triangular.jl	/^fillstored!(A::UnitLowerTriangular, x) = (fillband!(A.data, x, 1-size(A,1), -1); A)$/;"	f
fillstored!	stdlib/LinearAlgebra/src/triangular.jl	/^fillstored!(A::UnitUpperTriangular, x) = (fillband!(A.data, x, 1, size(A,2)-1); A)$/;"	f
fillstored!	stdlib/LinearAlgebra/src/triangular.jl	/^fillstored!(A::UpperTriangular, x)     = (fillband!(A.data, x, 0, size(A,2)-1); A)$/;"	f
filt	stdlib/LibGit2/src/LibGit2.jl	/^filt = Set([LibGit2.Consts.DELTA_ADDED])$/;"	v
filt	stdlib/LibGit2/src/LibGit2.jl	/^filt = Set([LibGit2.Consts.DELTA_MODIFIED])$/;"	v
filter	base/abstractdict.jl	/^function filter(f, d::AbstractDict)$/;"	f
filter	base/abstractset.jl	/^filter(pred, s::AbstractSet) = mapfilter(pred, push!, s, emptymutable(s))$/;"	f
filter	base/array.jl	/^function filter(f, a::AbstractArray)$/;"	f
filter	base/array.jl	/^function filter(f, a::Array{T, N}) where {T, N}$/;"	f
filter	base/bitarray.jl	/^function filter(f, Bs::BitArray)$/;"	f
filter	base/iterators.jl	/^filter(flt, itr) = Filter(flt, itr)$/;"	f
filter	base/missing.jl	/^function filter(f, itr::SkipMissing{<:AbstractArray})$/;"	f
filter	base/strings/basic.jl	/^function filter(f, s::AbstractString)$/;"	f
filter	base/strings/string.jl	/^function filter(f, s::String)$/;"	f
filter!	base/abstractdict.jl	/^filter!(f, d::IdDict) = filter_in_one_pass!(f, d)$/;"	f
filter!	base/abstractdict.jl	/^filter!(f, d::IdSet) = unsafe_filter!(f, d)$/;"	f
filter!	base/abstractdict.jl	/^function filter!(f, d::AbstractDict)$/;"	f
filter!	base/array.jl	/^function filter!(f, a::AbstractVector)$/;"	f
filter!	base/bitset.jl	/^filter!(f, s::BitSet) = unsafe_filter!(f, s)$/;"	f
filter!	base/dict.jl	/^function filter!(pred, h::Dict{K,V}) where {K,V}$/;"	f
filter!	base/set.jl	/^filter!(f, s::Set) = unsafe_filter!(f, s)$/;"	f
filter!	base/weakkeydict.jl	/^filter!(f, d::WeakKeyDict) = filter_in_one_pass!(f, d)$/;"	f
filter-sparams	src/julia-syntax.scm	/^(define (filter-sparams expr sparams)$/;"	f
filter_errors	stdlib/Test/src/Test.jl	/^function filter_errors(ts::DefaultTestSet)$/;"	f
filter_in_one_pass!	base/abstractdict.jl	/^function filter_in_one_pass!(f, d::AbstractDict)$/;"	f
filtered_mod_names	stdlib/REPL/src/REPLCompletions.jl	/^function filtered_mod_names(ffunc::Function, mod::Module, name::AbstractString, all::Bool = fals/;"	f
filtered_stacktrace	test/stacktraces.jl	/^    filtered_stacktrace() = StackTraces.remove_frames!(stacktrace(), StackTracesTestMod)$/;"	f
filterfunc	stdlib/Distributed/src/cluster.jl	/^        filterfunc(x) = (x.id != 1) && isdefined(x, :config) &&$/;"	f
filtervalid	stdlib/REPL/src/docview.jl	/^filtervalid(names) = filter(x->!occursin(r"#", x), map(string, names))$/;"	f
final_shred!	base/secretbuffer.jl	/^function final_shred!(s::SecretBuffer)$/;"	f
finalize	base/gcutils.jl	/^finalize(@nospecialize(o)) = ccall(:jl_finalize_th, Cvoid, (Ptr{Cvoid}, Any,),$/;"	f
finalize	src/cgmemmgr.cpp	/^    virtual void finalize()$/;"	f	class:__anon06c686bc0111::ROAllocator	typeref:typename:void	file:
finalize	src/cgmemmgr.cpp	/^    void finalize() override$/;"	f	class:__anon06c686bc0111::DualMapAllocator	typeref:typename:void	file:
finalize	src/cgmemmgr.cpp	/^    void finalize() override$/;"	f	class:__anon06c686bc0111::SelfMemAllocator	typeref:typename:void	file:
finalize	src/flisp/flisp.h	/^    void (*finalize)(fl_context_t *fl_ctx, value_t self);$/;"	m	struct:__anonb455601d0308	typeref:typename:void (*)(fl_context_t * fl_ctx,value_t self)
finalize	src/llvm-alloc-opt.cpp	/^bool Optimizer::finalize()$/;"	f	class:__anon0a1571000111::Optimizer	typeref:typename:bool
finalizeMemory	src/cgmemmgr.cpp	/^bool RTDyldMemoryManagerJL::finalizeMemory(std::string *ErrMsg)$/;"	f	class:__anon06c686bc0111::RTDyldMemoryManagerJL	typeref:typename:bool
finalize_and_test	stdlib/SharedArrays/test/runtests.jl	/^function finalize_and_test(r)$/;"	f
finalize_block	src/cgmemmgr.cpp	/^    void finalize_block(SplitPtrBlock &block, bool reset)$/;"	f	class:__anon06c686bc0111::DualMapAllocator	typeref:typename:void	file:
finalize_block	src/cgmemmgr.cpp	/^    void finalize_block(SplitPtrBlock &block, bool reset)$/;"	f	class:__anon06c686bc0111::SelfMemAllocator	typeref:typename:void	file:
finalize_object	src/gc.c	/^static void finalize_object(arraylist_t *list, jl_value_t *o,$/;"	f	typeref:typename:void	file:
finalize_ref	stdlib/Distributed/src/remotecall.jl	/^function finalize_ref(r::AbstractRemoteRef)$/;"	f
finalize_refs	stdlib/SharedArrays/src/SharedArrays.jl	/^function finalize_refs(S::SharedArray{T,N}) where T where N$/;"	f
finalizer	base/gcutils.jl	/^function finalizer(@nospecialize(f), @nospecialize(o))$/;"	f
finalizer	base/gcutils.jl	/^function finalizer(f::Ptr{Cvoid}, o::T) where T$/;"	f
finalizer_cptr	src/ccalltest.c	/^JL_DLLEXPORT void finalizer_cptr(void* v)$/;"	f	typeref:typename:JL_DLLEXPORT void
finalizer_list_marked	src/gc.c	/^arraylist_t finalizer_list_marked;$/;"	v	typeref:typename:arraylist_t
finalizers	src/julia_threads.h	/^    arraylist_t finalizers;$/;"	m	struct:_jl_tls_states_t	typeref:typename:arraylist_t
finalizers_inhibited	src/julia.h	/^    int finalizers_inhibited;$/;"	m	struct:_jl_handler_t	typeref:typename:int
finalizers_inhibited	src/julia_threads.h	/^    int finalizers_inhibited;$/;"	m	struct:_jl_tls_states_t	typeref:typename:int
finalizers_lock	src/gc.c	/^static jl_mutex_t finalizers_lock;$/;"	v	typeref:typename:jl_mutex_t	file:
find-assigned-vars	src/julia-syntax.scm	/^(define (find-assigned-vars e)$/;"	f
find-assigned-vars-in-expansion	src/macroexpand.scm	/^(define (find-assigned-vars-in-expansion e (outer #t))$/;"	f
find-declared-vars-in-expansion	src/macroexpand.scm	/^(define (find-declared-vars-in-expansion e decl (outer #t))$/;"	f
find-decls	src/julia-syntax.scm	/^(define (find-decls kind e)$/;"	f
find-global-decls	src/julia-syntax.scm	/^(define (find-global-decls e) (find-decls 'global e))$/;"	f
find-local-decls	src/julia-syntax.scm	/^(define (find-local-decls e) (find-decls 'local e))$/;"	f
find-local-def-decls	src/julia-syntax.scm	/^(define (find-local-def-decls e) (find-decls 'local-def e))$/;"	f
find-symbolic-label-defs	src/julia-syntax.scm	/^(define (find-symbolic-label-defs e tbl)$/;"	f
find-symbolic-label-refs	src/julia-syntax.scm	/^(define (find-symbolic-label-refs e tbl)$/;"	f
findJuliaQueryDidUpdate:	contrib/mac/frameworkapp/JuliaLauncher/AppDelegate.m	/^- (void)findJuliaQueryDidUpdate:(NSNotification *)sender {$/;"	m	implementation:AppDelegate
findJuliaWithSpotlight	contrib/mac/frameworkapp/JuliaLauncher/AppDelegate.m	/^- (void)findJuliaWithSpotlight {$/;"	m	implementation:AppDelegate
findLowerField	src/llvm-alloc-opt.cpp	/^        std::map<uint32_t,Field>::iterator findLowerField(uint32_t offset)$/;"	f	struct:__anon0a1571000111::Optimizer::AllocUseInfo	typeref:typename:std::map<uint32_t,Field>::iterator	file:
findSection	deps/srccache/patchelf-0.9/src/patchelf.cc	/^Elf_Shdr & ElfFile<ElfFileParamNames>::findSection(const SectionName & sectionName)$/;"	f	class:ElfFile	typeref:typename:Elf_Shdr &
findSection2	deps/srccache/patchelf-0.9/src/patchelf.cc	/^Elf_Shdr * ElfFile<ElfFileParamNames>::findSection2(const SectionName & sectionName)$/;"	f	class:ElfFile	typeref:typename:Elf_Shdr *
findSection3	deps/srccache/patchelf-0.9/src/patchelf.cc	/^unsigned int ElfFile<ElfFileParamNames>::findSection3(const SectionName & sectionName)$/;"	f	class:ElfFile	typeref:typename:unsigned int
findSymbol	src/jitlayers.cpp	/^JL_JITSymbol JuliaOJIT::findSymbol(const std::string &Name, bool ExportedSymbolsOnly)$/;"	f	class:JuliaOJIT	typeref:typename:JL_JITSymbol
findUnmangledSymbol	src/jitlayers.cpp	/^JL_JITSymbol JuliaOJIT::findUnmangledSymbol(const std::string Name)$/;"	f	class:JuliaOJIT	typeref:typename:JL_JITSymbol
find_all_in_cache_path	base/loading.jl	/^function find_all_in_cache_path(pkg::PkgId)$/;"	f
find_bidiagonal	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^find_bidiagonal() = throw(ArgumentError("could not find Bidiagonal within broadcast expression")/;"	f
find_bidiagonal	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^find_bidiagonal(a::Bidiagonal, rest...) = a$/;"	f
find_bidiagonal	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^find_bidiagonal(bc::Broadcast.Broadcasted, rest...) = find_bidiagonal(find_bidiagonal(bc.args.../;"	f
find_bidiagonal	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^find_bidiagonal(x, rest...) = find_bidiagonal(rest...)$/;"	f
find_call	test/compiler/inference.jl	/^function find_call(code::Core.CodeInfo, @nospecialize(func), narg)$/;"	f
find_checksum	deps/tools/jlchecksum	/^find_checksum()$/;"	f
find_checksum_progs	deps/tools/jlchecksum	/^find_checksum_progs()$/;"	f
find_cpu	src/processor.cpp	/^static const CPUSpec<CPU,n> *find_cpu(llvm::StringRef name, const CPUSpec<CPU,n> *cpus,$/;"	f	namespace:__anon839834ed0111	typeref:typename:const CPUSpec<CPU,n> *	file:
find_cpu	src/processor.cpp	/^static const CPUSpec<CPU,n> *find_cpu(uint32_t cpu, const CPUSpec<CPU,n> *cpus, uint32_t ncpus)$/;"	f	namespace:__anon839834ed0111	typeref:typename:const CPUSpec<CPU,n> *	file:
find_cpu	src/processor_arm.cpp	/^static inline const CPUSpec<CPU,feature_sz> *find_cpu(llvm::StringRef name)$/;"	f	namespace:ARM	typeref:typename:const CPUSpec<CPU,feature_sz> *	file:
find_cpu	src/processor_arm.cpp	/^static inline const CPUSpec<CPU,feature_sz> *find_cpu(uint32_t cpu)$/;"	f	namespace:ARM	typeref:typename:const CPUSpec<CPU,feature_sz> *	file:
find_cpu	src/processor_x86.cpp	/^static inline const CPUSpec<CPU,feature_sz> *find_cpu(llvm::StringRef name)$/;"	f	namespace:X86	typeref:typename:const CPUSpec<CPU,feature_sz> *	file:
find_cpu	src/processor_x86.cpp	/^static inline const CPUSpec<CPU,feature_sz> *find_cpu(uint32_t cpu)$/;"	f	namespace:X86	typeref:typename:const CPUSpec<CPU,feature_sz> *	file:
find_cpu_name	src/processor.cpp	/^static const char *find_cpu_name(uint32_t cpu, const CPUSpec<CPU,n> *cpus, uint32_t ncpus)$/;"	f	namespace:__anon839834ed0111	typeref:typename:const char *	file:
find_cpu_name	src/processor_arm.cpp	/^static inline const char *find_cpu_name(uint32_t cpu)$/;"	f	namespace:ARM	typeref:typename:const char *	file:
find_cpu_name	src/processor_x86.cpp	/^static inline const char *find_cpu_name(uint32_t cpu)$/;"	f	namespace:X86	typeref:typename:const char *	file:
find_curblock	base/compiler/ssair/passes.jl	/^function find_curblock(domtree::DomTree, allblocks::Vector{Int}, curblock::Int)$/;"	f
find_curl	base/download.jl	/^function find_curl()$/;"	f
find_dict_matches	stdlib/REPL/src/REPLCompletions.jl	/^@noinline function find_dict_matches(identifier, partial_key)$/;"	f
find_extended_dims	base/subarray.jl	/^find_extended_dims(dim) = ()$/;"	f
find_extended_dims	base/subarray.jl	/^find_extended_dims(dim, ::ScalarIndex, I...) = (@_inline_meta; find_extended_dims(dim + 1, I...)/;"	f
find_extended_dims	base/subarray.jl	/^find_extended_dims(dim, i1, I...) = (@_inline_meta; (dim, find_extended_dims(dim + 1, I...)...))$/;"	f
find_extended_inds	base/subarray.jl	/^find_extended_inds() = ()$/;"	f
find_extended_inds	base/subarray.jl	/^find_extended_inds(::ScalarIndex, I...) = (@_inline_meta; find_extended_inds(I...))$/;"	f
find_extended_inds	base/subarray.jl	/^find_extended_inds(i1, I...) = (@_inline_meta; (i1, find_extended_inds(I...)...))$/;"	f
find_feature_bit	src/processor.cpp	/^JL_UNUSED static uint32_t find_feature_bit(const FeatureName *features, size_t nfeatures,$/;"	f	namespace:__anon839834ed0111	typeref:typename:JL_UNUSED uint32_t	file:
find_free_typevars	src/jltypes.c	/^static void find_free_typevars(jl_value_t *v, jl_typeenv_t *env, jl_array_t *out)$/;"	f	typeref:typename:void	file:
find_hist_file	stdlib/REPL/src/REPL.jl	/^find_hist_file() = get(ENV, "JULIA_HISTORY",$/;"	f
find_inferred	base/compiler/ssair/inlining.jl	/^function find_inferred(mi::MethodInstance, @nospecialize(atypes), sv::OptimizationState, @nospec/;"	f
find_library	stdlib/Libdl/src/Libdl.jl	/^find_library(libname::Union{Symbol,AbstractString}, extrapaths=String[]) =$/;"	f
find_library	stdlib/Libdl/src/Libdl.jl	/^function find_library(libnames, extrapaths=String[])$/;"	f
find_object_file	src/debuginfo.cpp	/^static objfileentry_t &find_object_file(uint64_t fbase, StringRef fname)$/;"	f	typeref:typename:objfileentry_t &	file:
find_package	base/loading.jl	/^function find_package(args...)$/;"	f
find_shlib	contrib/fixup-libgfortran.sh	/^find_shlib()$/;"	f
find_shlib	contrib/fixup-libstdc++.sh	/^find_shlib ()$/;"	f
find_shlib_dir	contrib/fixup-libgfortran.sh	/^find_shlib_dir()$/;"	f
find_source_file	base/loading.jl	/^function find_source_file(path::AbstractString)$/;"	f
find_ssavalue_uses	base/compiler/utilities.jl	/^function find_ssavalue_uses(body::Vector{Any}, nvals::Int)$/;"	f
find_ssavalue_uses	base/compiler/utilities.jl	/^function find_ssavalue_uses(e::Expr, uses::Vector{BitSet}, line::Int)$/;"	f
find_start_brace	stdlib/REPL/src/REPLCompletions.jl	/^function find_start_brace(s::AbstractString; c_start='(', c_end=')')$/;"	f
find_string	src/support/strptime.c	/^find_string(const u_char *bp, int *tgt, const char * const *n1,$/;"	f	typeref:typename:const u_char *	file:
find_tfunc	base/compiler/tfuncs.jl	/^function find_tfunc(@nospecialize f)$/;"	f
find_tvar10930	test/compiler/inference.jl	/^find_tvar10930(sig::Type{T}) where {T<:Tuple} = 1$/;"	f
find_tvar10930	test/compiler/inference.jl	/^function find_tvar10930(arg)$/;"	f
findall	base/array.jl	/^findall(p::Fix2{typeof(in)}, x::Number) = x in p.x ? [1] : Vector{Int}()$/;"	f
findall	base/array.jl	/^findall(pred::Fix2{typeof(in)}, x::Union{AbstractArray, Tuple}) = _findin(x, pred.x)$/;"	f
findall	base/array.jl	/^findall(testf::Function, A) = collect(first(p) for p in pairs(A) if testf(last(p)))$/;"	f
findall	base/array.jl	/^findall(testf::Function, x::Number) = testf(x) ? [1] : Vector{Int}()$/;"	f
findall	base/array.jl	/^findall(x::Bool) = x ? [1] : Vector{Int}()$/;"	f
findall	base/array.jl	/^function findall(A)$/;"	f
findall	base/array.jl	/^function findall(A::AbstractArray{Bool})$/;"	f
findall	base/array.jl	/^function findall(pred::Fix2{typeof(in),<:Union{Array{<:Real},Real}}, x::Array{<:Real})$/;"	f
findall	base/bitarray.jl	/^findall(::typeof(!iszero), B::BitArray) = findall(B)$/;"	f
findall	base/bitarray.jl	/^function findall(B::BitArray)$/;"	f
findall	base/regex.jl	/^function findall(t::Union{AbstractString,Regex}, s::AbstractString; overlap::Bool=false)$/;"	f
findall	stdlib/SparseArrays/src/sparsematrix.jl	/^findall(p::Base.Fix2{typeof(in)}, x::AbstractSparseMatrixCSC) =$/;"	f
findall	stdlib/SparseArrays/src/sparsematrix.jl	/^function findall(S::AbstractSparseMatrixCSC)$/;"	f
findall	stdlib/SparseArrays/src/sparsematrix.jl	/^function findall(p::Function, S::AbstractSparseMatrixCSC)$/;"	f
findall	stdlib/SparseArrays/src/sparsevector.jl	/^findall(p::Base.Fix2{typeof(in)}, x::SparseVector{<:Any,Ti}) where {Ti} =$/;"	f
findall	stdlib/SparseArrays/src/sparsevector.jl	/^function findall(p::Function, x::SparseVector{<:Any,Ti}) where Ti$/;"	f
findall	stdlib/SparseArrays/src/sparsevector.jl	/^function findall(x::SparseVector)$/;"	f
finddoc	base/docs/Docs.jl	/^finddoc(λ, @nospecialize def) = false$/;"	f
finddoc	base/docs/Docs.jl	/^function finddoc(λ, def::Expr)$/;"	f
findfirst	base/array.jl	/^findfirst(A::Union{AbstractArray, AbstractString}) = findnext(A, first(keys(A)))$/;"	f
findfirst	base/array.jl	/^findfirst(testf::Function, A::Union{AbstractArray, AbstractString}) =$/;"	f
findfirst	base/array.jl	/^function findfirst(A)$/;"	f
findfirst	base/array.jl	/^function findfirst(p::Union{Fix2{typeof(isequal),T},Fix2{typeof(==),T}}, r::StepRange{T,S}) wher/;"	f
findfirst	base/array.jl	/^function findfirst(testf::Function, A)$/;"	f
findfirst	base/regex.jl	/^findfirst(r::Regex, s::AbstractString) = findnext(r,s,firstindex(s))$/;"	f
findfirst	base/strings/search.jl	/^findfirst(ch::AbstractChar, string::AbstractString) = findfirst(==(ch), string)$/;"	f
findfirst	base/strings/search.jl	/^findfirst(pattern::AbstractString, string::AbstractString) =$/;"	f
findfirst	base/strings/search.jl	/^findfirst(pred::Fix2{<:Union{typeof(isequal),typeof(==)},<:Union{Int8,UInt8}}, a::ByteArray) =$/;"	f
findfirstnot	base/bitarray.jl	/^findfirstnot(B::BitArray) = findnextnot(B,1)$/;"	f
findlast	base/array.jl	/^findlast(A::Union{AbstractArray, AbstractString}) = findprev(A, last(keys(A)))$/;"	f
findlast	base/array.jl	/^findlast(testf::Function, A::Union{AbstractArray, AbstractString}) =$/;"	f
findlast	base/array.jl	/^function findlast(A)$/;"	f
findlast	base/array.jl	/^function findlast(testf::Function, A)$/;"	f
findlast	base/strings/search.jl	/^findlast(ch::AbstractChar, string::AbstractString) = findlast(==(ch), string)$/;"	f
findlast	base/strings/search.jl	/^findlast(pattern::AbstractString, string::AbstractString) =$/;"	f
findlast	base/strings/search.jl	/^findlast(pred::Fix2{<:Union{typeof(isequal),typeof(==)},<:Union{Int8,UInt8}}, a::ByteArray) =$/;"	f
findlastnot	base/bitarray.jl	/^findlastnot(B::BitArray) = findprevnot(B, length(B))$/;"	f
findmax	base/array.jl	/^findmax(a) = _findmax(a, :)$/;"	f
findmax	base/bitarray.jl	/^function findmax(a::BitArray)$/;"	f
findmax	base/reducedim.jl	/^findmax(A::AbstractArray; dims=:) = _findmax(A, dims)$/;"	f
findmax	stdlib/SparseArrays/src/sparsematrix.jl	/^findmax(A::AbstractSparseMatrixCSC) = (r=findmax(A,(1,2)); (r[1][1], r[2][1]))$/;"	f
findmax	stdlib/SparseArrays/src/sparsematrix.jl	/^findmax(A::AbstractSparseMatrixCSC{Tv,Ti}, region) where {Tv,Ti} = _findr(_isgreater_fm, A, regi/;"	f
findmax!	base/reducedim.jl	/^function findmax!(rval::AbstractArray, rind::AbstractArray, A::AbstractArray;$/;"	f
findmeta	base/expr.jl	/^findmeta(ex::Array{Any,1}) = findmeta_block(ex)$/;"	f
findmeta	base/expr.jl	/^function findmeta(ex::Expr)$/;"	f
findmeta_block	base/expr.jl	/^function findmeta_block(exargs, argsmatch=args->true)$/;"	f
findmetaarg	base/expr.jl	/^function findmetaarg(metaargs, sym)$/;"	f
findmin	base/array.jl	/^findmin(a) = _findmin(a, :)$/;"	f
findmin	base/bitarray.jl	/^function findmin(a::BitArray)$/;"	f
findmin	base/reducedim.jl	/^findmin(A::AbstractArray; dims=:) = _findmin(A, dims)$/;"	f
findmin	stdlib/SparseArrays/src/sparsematrix.jl	/^findmin(A::AbstractSparseMatrixCSC) = (r=findmin(A,(1,2)); (r[1][1], r[2][1]))$/;"	f
findmin	stdlib/SparseArrays/src/sparsematrix.jl	/^findmin(A::AbstractSparseMatrixCSC{Tv,Ti}, region) where {Tv,Ti} = _findr(_isless_fm, A, region,/;"	f
findmin!	base/reducedim.jl	/^function findmin!(rval::AbstractArray, rind::AbstractArray, A::AbstractArray;$/;"	f
findminmax!	base/reducedim.jl	/^function findminmax!(f, Rval, Rind, A::AbstractArray{T,N}) where {T,N}$/;"	f
findnext	base/array.jl	/^function findnext(A, start)$/;"	f
findnext	base/array.jl	/^function findnext(testf::Function, A, start)$/;"	f
findnext	base/bitarray.jl	/^function findnext(B::BitArray, start::Integer)$/;"	f
findnext	base/bitarray.jl	/^function findnext(pred::Fix2{<:Union{typeof(isequal),typeof(==)},Bool},$/;"	f
findnext	base/bitarray.jl	/^function findnext(testf::Function, B::BitArray, start::Integer)$/;"	f
findnext	base/regex.jl	/^findnext(pat::RegexAndMatchData, str, i) = _findnext_re(pat.re, str, i, pat.match_data)$/;"	f
findnext	base/regex.jl	/^findnext(r::Regex, s::AbstractString, idx::Integer) = throw(ArgumentError($/;"	f
findnext	base/regex.jl	/^findnext(re::Regex, str::Union{String,SubString}, idx::Integer) = _findnext_re(re, str, idx, C_N/;"	f
findnext	base/strings/search.jl	/^findnext(ch::AbstractChar, string::AbstractString, ind::Integer) =$/;"	f
findnext	base/strings/search.jl	/^findnext(pred::Fix2{<:Union{typeof(isequal),typeof(==)},<:Union{Int8,UInt8}}, a::ByteArray, i::I/;"	f
findnext	base/strings/search.jl	/^findnext(t::AbstractString, s::AbstractString, i::Integer) = _search(s, t, i)$/;"	f
findnext	base/strings/search.jl	/^function findnext(pred::Fix2{<:Union{typeof(isequal),typeof(==)},<:AbstractChar},$/;"	f
findnext	base/strings/search.jl	/^function findnext(testf::Function, s::AbstractString, i::Integer)$/;"	f
findnext	stdlib/SparseArrays/src/abstractsparse.jl	/^function findnext(f::Function, v::AbstractSparseArray, i)$/;"	f
findnextnot	base/bitarray.jl	/^function findnextnot(B::BitArray, start::Integer)$/;"	f
findnz	stdlib/SparseArrays/src/abstractsparse.jl	/^function findnz end$/;"	f
findnz	stdlib/SparseArrays/src/sparsematrix.jl	/^function findnz(S::AbstractSparseMatrixCSC{Tv,Ti}) where {Tv,Ti}$/;"	f
findnz	stdlib/SparseArrays/src/sparsevector.jl	/^function findnz(x::SparseVector{Tv,Ti}) where {Tv,Ti}$/;"	f
findprev	base/array.jl	/^function findprev(A, start)$/;"	f
findprev	base/array.jl	/^function findprev(testf::Function, A, start)$/;"	f
findprev	base/bitarray.jl	/^function findprev(B::BitArray, start::Integer)$/;"	f
findprev	base/bitarray.jl	/^function findprev(pred::Fix2{<:Union{typeof(isequal),typeof(==)},Bool},$/;"	f
findprev	base/bitarray.jl	/^function findprev(testf::Function, B::BitArray, start::Integer)$/;"	f
findprev	base/strings/search.jl	/^findprev(ch::AbstractChar, string::AbstractString, ind::Integer) =$/;"	f
findprev	base/strings/search.jl	/^findprev(pred::Fix2{<:Union{typeof(isequal),typeof(==)},<:Union{Int8,UInt8}}, a::ByteArray, i::I/;"	f
findprev	base/strings/search.jl	/^findprev(t::AbstractString, s::AbstractString, i::Integer) = _rsearch(s, t, i)$/;"	f
findprev	base/strings/search.jl	/^function findprev(pred::Fix2{<:Union{typeof(isequal),typeof(==)},<:AbstractChar},$/;"	f
findprev	base/strings/search.jl	/^function findprev(testf::Function, s::AbstractString, i::Integer)$/;"	f
findprev	stdlib/SparseArrays/src/abstractsparse.jl	/^function findprev(f::Function, v::AbstractSparseArray, i)$/;"	f
findprevnot	base/bitarray.jl	/^function findprevnot(B::BitArray, start::Integer)$/;"	f
fini	deps/gfortblas.c	/^static void fini(void) {$/;"	f	typeref:typename:void	file:
finish	base/compiler/ssair/ir.jl	/^function finish(compact::IncrementalCompact)$/;"	f
finish	base/compiler/typeinfer.jl	/^function finish(me::InferenceState)$/;"	f
finish	base/compiler/typeinfer.jl	/^function finish(src::CodeInfo)$/;"	f
finish	stdlib/LibGit2/src/rebase.jl	/^function finish(rb::GitRebase, sig::GitSignature)$/;"	f
finish	stdlib/SuiteSparse/src/cholmod.jl	/^function finish(a::Vector{UInt8})$/;"	f
finish	stdlib/Test/src/Test.jl	/^finish(ts::FallbackTestSet) = ts$/;"	f
finish	stdlib/Test/src/Test.jl	/^function finish end$/;"	f
finish	stdlib/Test/src/Test.jl	/^function finish(ts::DefaultTestSet)$/;"	f
finish	stdlib/Test/test/runtests.jl	/^function finish(ts::CustomTestSet)$/;"	f
finish_cfg_inline!	base/compiler/ssair/inlining.jl	/^function finish_cfg_inline!(state::CFGInliningState)$/;"	f
finish_current_bb!	base/compiler/ssair/ir.jl	/^function finish_current_bb!(compact, active_bb, old_result_idx=compact.result_idx, unreachable=f/;"	f
finish_schedule_task	src/jsvm-emscripten/asyncify_setup.js	/^function finish_schedule_task() {$/;"	f
finish_unionall	src/subtype.c	/^static jl_value_t *finish_unionall(jl_value_t *res JL_MAYBE_UNROOTED, jl_varbinding_t *vb, jl_st/;"	f	typeref:typename:jl_value_t *	file:
finlist	src/gc.h	/^    gc_mark_finlist_t finlist;$/;"	m	union:_jl_gc_mark_data	typeref:typename:gc_mark_finlist_t
fintrinsic_op1	src/runtime_intrinsics.c	/^typedef void (fintrinsic_op1)(unsigned, void*, void*);$/;"	t	typeref:typename:void ()(unsigned,void *,void *)	file:
first	base/abstractarray.jl	/^first(a::AbstractArray) = a[first(eachindex(a))]$/;"	f
first	base/abstractarray.jl	/^function first(itr)$/;"	f
first	base/bitset.jl	/^function first(s::BitSet)$/;"	f
first	base/char.jl	/^first(c::AbstractChar) = c$/;"	f
first	base/compiler/ssair/ir.jl	/^first(r::StmtRange) = r.start$/;"	f
first	base/indices.jl	/^first(S::IdentityUnitRange) = first(S.indices)$/;"	f
first	base/indices.jl	/^first(S::Slice) = first(S.indices)$/;"	f
first	base/indices.jl	/^first(iter::LinearIndices) = 1$/;"	f
first	base/indices.jl	/^first(iter::LinearIndices{1}) = (@_inline_meta; first(axes1(iter.indices[1])))$/;"	f
first	base/iterators.jl	/^first(r::Reverse) = last(r.itr) # and the last shall be first$/;"	f
first	base/multidimensional.jl	/^    first(iter::CartesianIndices) = CartesianIndex(map(first, iter.indices))$/;"	f
first	base/number.jl	/^first(x::Number) = x$/;"	f
first	base/pair.jl	/^first(p::Pair) = p.first$/;"	f
first	base/range.jl	/^first(r::LinRange) = r.start$/;"	f
first	base/range.jl	/^first(r::OneTo{T}) where {T} = oneunit(T)$/;"	f
first	base/range.jl	/^first(r::OrdinalRange{T}) where {T} = convert(T, r.start)$/;"	f
first	base/range.jl	/^first(r::StepRangeLen) = unsafe_getindex(r, 1)$/;"	f
first	base/set.jl	/^           first(kv) < 3 ? first(kv)=>3 : kv$/;"	f
first	base/strings/basic.jl	/^first(::EachStringIndex) = 1$/;"	f
first	base/strings/basic.jl	/^first(s::AbstractString, n::Integer) = @inbounds s[1:min(end, nextind(s, 0, n))]$/;"	f
first	base/tuple.jl	/^first(::Tuple{}) = throw(ArgumentError("tuple must be non-empty"))$/;"	f
first	base/tuple.jl	/^first(t::Tuple) = t[1]$/;"	f
first	src/init.c	/^struct uv_shutdown_queue { struct uv_shutdown_queue_item *first; struct uv_shutdown_queue_item */;"	m	struct:uv_shutdown_queue	typeref:struct:uv_shutdown_queue_item *	file:
first-non-meta	src/julia-syntax.scm	/^(define (first-non-meta blk)$/;"	f
first_arg_datatype	src/rtutils.c	/^static jl_datatype_t *first_arg_datatype(jl_value_t *a JL_PROPAGATES_ROOT, int got_tuple1) JL_NO/;"	f	typeref:typename:jl_datatype_t *	file:
first_index	base/subarray.jl	/^first_index(V::FastSubArray) = V.offset1 + V.stride1 # cached for fast linear SubArrays$/;"	f
first_index	base/subarray.jl	/^function first_index(V::SubArray)$/;"	f
first_insert_for_bb	base/compiler/ssair/ir.jl	/^function first_insert_for_bb(code, cfg::CFG, block::Int)$/;"	f
first_methtable	src/method.c	/^static jl_methtable_t *first_methtable(jl_value_t *a JL_PROPAGATES_ROOT, int got_tuple1) JL_NOTS/;"	f	typeref:typename:jl_methtable_t *	file:
first_safepoint	src/llvm-alloc-opt.cpp	/^    std::map<BasicBlock*, llvm::WeakVH> first_safepoint;$/;"	m	struct:__anon0a1571000111::Optimizer	typeref:typename:std::map<BasicBlock *,llvm::WeakVH>	file:
first_utf8_byte	base/char.jl	/^first_utf8_byte(c::Char) = (reinterpret(UInt32, c) >> 24) % UInt8$/;"	f
first_wday_of	src/support/strptime.c	/^first_wday_of(int yr)$/;"	f	typeref:typename:int	file:
firstcaller	base/deprecated.jl	/^firstcaller(bt::Vector, ::Nothing) = Ptr{Cvoid}(0), StackTraces.UNKNOWN$/;"	f
firstcaller	base/deprecated.jl	/^firstcaller(bt::Vector, funcsym::Symbol) = firstcaller(bt, (funcsym,))$/;"	f
firstcaller	base/deprecated.jl	/^function firstcaller(bt::Vector, funcsyms)$/;"	f
firstdayofmonth	stdlib/Dates/src/adjusters.jl	/^firstdayofmonth(dt::Date) = Date(UTD(value(dt) - day(dt) + 1))$/;"	f
firstdayofmonth	stdlib/Dates/src/adjusters.jl	/^firstdayofmonth(dt::DateTime) = DateTime(firstdayofmonth(Date(dt)))$/;"	f
firstdayofmonth	stdlib/Dates/src/adjusters.jl	/^function firstdayofmonth end$/;"	f
firstdayofquarter	stdlib/Dates/src/adjusters.jl	/^firstdayofquarter(dt::DateTime) = DateTime(firstdayofquarter(Date(dt)))$/;"	f
firstdayofquarter	stdlib/Dates/src/adjusters.jl	/^function firstdayofquarter end$/;"	f
firstdayofquarter	stdlib/Dates/src/adjusters.jl	/^function firstdayofquarter(dt::Date)$/;"	f
firstdayofweek	stdlib/Dates/src/adjusters.jl	/^firstdayofweek(dt::Date) = Date(UTD(value(dt) - dayofweek(dt) + 1))$/;"	f
firstdayofweek	stdlib/Dates/src/adjusters.jl	/^firstdayofweek(dt::DateTime) = DateTime(firstdayofweek(Date(dt)))$/;"	f
firstdayofweek	stdlib/Dates/src/adjusters.jl	/^function firstdayofweek end$/;"	f
firstdayofyear	stdlib/Dates/src/adjusters.jl	/^firstdayofyear(dt::Date) = Date(UTD(value(dt) - dayofyear(dt) + 1))$/;"	f
firstdayofyear	stdlib/Dates/src/adjusters.jl	/^firstdayofyear(dt::DateTime) = DateTime(firstdayofyear(Date(dt)))$/;"	f
firstdayofyear	stdlib/Dates/src/adjusters.jl	/^function firstdayofyear end$/;"	f
firstindex	base/abstractarray.jl	/^firstindex(a::AbstractArray) = (@_inline_meta; first(eachindex(IndexLinear(), a)))$/;"	f
firstindex	base/abstractarray.jl	/^firstindex(a::AbstractArray, d) = (@_inline_meta; first(axes(a, d)))$/;"	f
firstindex	base/char.jl	/^firstindex(c::AbstractChar) = 1$/;"	f
firstindex	base/essentials.jl	/^firstindex(v::SimpleVector) = 1$/;"	f
firstindex	base/namedtuple.jl	/^firstindex(t::NamedTuple) = 1$/;"	f
firstindex	base/number.jl	/^firstindex(x::Number) = 1$/;"	f
firstindex	base/pair.jl	/^firstindex(p::Pair) = 1$/;"	f
firstindex	base/range.jl	/^firstindex(::LinRange) = 1$/;"	f
firstindex	base/range.jl	/^firstindex(::StepRange) = 1$/;"	f
firstindex	base/range.jl	/^firstindex(::UnitRange) = 1$/;"	f
firstindex	base/strings/basic.jl	/^firstindex(s::AbstractString) = 1$/;"	f
firstindex	base/tuple.jl	/^firstindex(@nospecialize t::Tuple) = 1$/;"	f
firstlast	test/core.jl	/^    firstlast(::Val{false}) = "Last"$/;"	f
firstlast	test/core.jl	/^    firstlast(::Val{true}) = "First"$/;"	f
fits_bits	src/flisp/flisp.h	/^#define fits_bits(/;"	d
fits_fixnum	src/flisp/flisp.h	/^#define fits_fixnum(/;"	d
fix-arglist	src/julia-syntax.scm	/^(define (fix-arglist l (unused #t))$/;"	f
fix-function-arg-type	src/julia-syntax.scm	/^(define (fix-function-arg-type te typ iskw namemap type-sp)$/;"	f
fix-syntactic-unary	src/julia-parser.scm	/^(define (fix-syntactic-unary e)$/;"	f
fix-uint-neg	src/julia-parser.scm	/^(define (fix-uint-neg neg n)$/;"	f
fix_dec	base/printf.jl	/^fix_dec(out, d, flags::String, width::Int, precision::Int, c::Char, digits) = (true, fix_dec(d, /;"	f
fix_dec	base/printf.jl	/^fix_dec(out, d::BigFloat, flags::String, width::Int, precision::Int, c::Char, digits) = bigfloat/;"	f
fix_dec	base/printf.jl	/^fix_dec(x::Integer, n::Int, digits) = decode_dec(x, digits)$/;"	f
fix_dec	base/printf.jl	/^fix_dec(x::Real, n::Int, digits) = fix_dec(float(x),n,digits)$/;"	f
fix_dec	base/printf.jl	/^function fix_dec(x::SmallFloatingPoint, n::Int, digits)$/;"	f
fix_gv_uses	src/llvm-multiversioning.cpp	/^void CloneCtx::fix_gv_uses()$/;"	f	class:__anond5683ea40111::CloneCtx	typeref:typename:void
fix_inferred_var_bound	src/subtype.c	/^static jl_value_t *fix_inferred_var_bound(jl_tvar_t *var, jl_value_t *ty JL_MAYBE_UNROOTED)$/;"	f	typeref:typename:jl_value_t *	file:
fix_inst_uses	src/llvm-multiversioning.cpp	/^void CloneCtx::fix_inst_uses()$/;"	f	class:__anond5683ea40111::CloneCtx	typeref:typename:void
fix_ptls_use	src/llvm-ptls.cpp	/^void LowerPTLS::fix_ptls_use(CallInst *ptlsStates)$/;"	f	class:__anonf46923380111::LowerPTLS	typeref:typename:void
fixedperiod_conversions	stdlib/Dates/src/periods.jl	/^const fixedperiod_conversions = [(:Week, 7), (:Day, 24), (:Hour, 60), (:Minute, 60), (:Second, 1/;"	v
fixedperiod_seed	stdlib/Dates/src/periods.jl	/^const fixedperiod_seed = UInt === UInt64 ? 0x5b7fc751bba97516 : 0xeae0fdcb$/;"	v
fixemup!	base/compiler/ssair/slot2ssa.jl	/^function fixemup!(cond, rename, ir::IRCode, ci::CodeInfo, idx::Int, @nospecialize(stmt))$/;"	f
fixnum	src/flisp/flisp.h	/^#define fixnum(/;"	d
fixnum_t	src/flisp/flisp.h	/^typedef int_t fixnum_t;$/;"	t	typeref:typename:int_t
fixnumsym	src/flisp/flisp.h	/^    value_t pairsym, symbolsym, fixnumsym, vectorsym, builtinsym, vu8sym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
fixup_keymaps!	stdlib/REPL/src/LineEdit.jl	/^fixup_keymaps!(d, l, s, sk) = nothing$/;"	f
fixup_keymaps!	stdlib/REPL/src/LineEdit.jl	/^function fixup_keymaps!(dict::Dict, level, s, subkeymap)$/;"	f
fixup_node	base/compiler/ssair/ir.jl	/^function fixup_node(compact::IncrementalCompact, @nospecialize(stmt))$/;"	f
fixup_phinode_values!	base/compiler/ssair/ir.jl	/^function fixup_phinode_values!(compact::IncrementalCompact, old_values::Vector{Any})$/;"	f
fixup_slot!	base/compiler/ssair/slot2ssa.jl	/^function fixup_slot!(ir::IRCode, ci::CodeInfo, idx::Int, slot::Int, @nospecialize(stmt::Union{Sl/;"	f
fixup_uses!	base/compiler/ssair/slot2ssa.jl	/^function fixup_uses!(ir::IRCode, ci::CodeInfo, code, uses::Vector{Int}, slot, @nospecialize(ssa)/;"	f
fixupmultiply10!	base/grisu/bignum.jl	/^function fixupmultiply10!(estimated_power,is_even,num,den,minus,plus)$/;"	f
fkeep!	stdlib/SparseArrays/src/sparsematrix.jl	/^function fkeep!(A::AbstractSparseMatrixCSC, f, trim::Bool = true)$/;"	f
fkeep!	stdlib/SparseArrays/src/sparsevector.jl	/^function fkeep!(x::SparseVector, f, trim::Bool = true)$/;"	f
fl	src/ast.c	/^    fl_context_t fl;$/;"	m	struct:_jl_ast_context_t	typeref:typename:fl_context_t	file:
fl_accum_julia_symbol	src/flisp/julia_extensions.c	/^value_t fl_accum_julia_symbol(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_add_any	src/flisp/cvalues.c	/^static value_t fl_add_any(fl_context_t *fl_ctx, value_t *args, uint32_t nargs, fixnum_t carryIn)$/;"	f	typeref:typename:value_t	file:
fl_append	src/flisp/flisp.c	/^value_t fl_append(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_apply	src/flisp/flisp.c	/^value_t fl_apply(fl_context_t *fl_ctx, value_t f, value_t l)$/;"	f	typeref:typename:value_t
fl_apply_accum	src/flisp/flisp.c	/^#define fl_apply_accum /;"	d	file:
fl_apply_c	src/flisp/flisp.c	/^#define fl_apply_c /;"	d	file:
fl_apply_e	src/flisp/flisp.c	/^#define fl_apply_e /;"	d	file:
fl_apply_func	src/flisp/flisp.c	/^#define fl_apply_func /;"	d	file:
fl_apply_pv	src/flisp/flisp.c	/^#define fl_apply_pv /;"	d	file:
fl_apply_v	src/flisp/flisp.c	/^#define fl_apply_v /;"	d	file:
fl_applyn	src/flisp/flisp.c	/^value_t fl_applyn(fl_context_t *fl_ctx, uint32_t n, value_t f, ...)$/;"	f	typeref:typename:value_t
fl_ash	src/flisp/cvalues.c	/^static value_t fl_ash(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t	file:
fl_assq	src/flisp/builtins.c	/^static value_t fl_assq(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t	file:
fl_begin_offset	src/gc.h	/^    uint16_t fl_begin_offset; \/\/ offset of first free object in this page$/;"	m	struct:__anoncf30557c1108	typeref:typename:uint16_t
fl_bitwise_op	src/flisp/cvalues.c	/^static value_t fl_bitwise_op(fl_context_t *fl_ctx, value_t a, value_t b, int opcode, char *fname/;"	f	typeref:typename:value_t	file:
fl_buffer	src/flisp/iostream.c	/^value_t fl_buffer(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_builtin	src/flisp/cvalues.c	/^value_t fl_builtin(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_char_t	src/flisp/flisp.h	/^typedef char     fl_char_t;$/;"	t	typeref:typename:char
fl_clear_profile	src/ast.c	/^JL_DLLEXPORT void fl_clear_profile(void)$/;"	f	typeref:typename:JL_DLLEXPORT void
fl_compare	src/flisp/equal.c	/^value_t fl_compare(fl_context_t *fl_ctx, value_t a, value_t b)$/;"	f	typeref:typename:value_t
fl_cons	src/flisp/flisp.c	/^value_t fl_cons(fl_context_t *fl_ctx, value_t a, value_t b)$/;"	f	typeref:typename:value_t
fl_constantp	src/flisp/builtins.c	/^static value_t fl_constantp(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t	file:
fl_context_t	src/flisp/flisp.h	/^typedef struct _fl_context_t fl_context_t;$/;"	t	typeref:struct:_fl_context_t
fl_copy	src/flisp/cvalues.c	/^value_t fl_copy(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_copylist	src/flisp/flisp.c	/^value_t fl_copylist(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_current_module_counter	src/ast.c	/^value_t fl_current_module_counter(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_div2	src/flisp/cvalues.c	/^static value_t fl_div2(fl_context_t *fl_ctx, value_t a, value_t b)$/;"	f	typeref:typename:value_t	file:
fl_double_t	src/flisp/flisp.h	/^typedef double   fl_double_t;$/;"	t	typeref:typename:double
fl_end_offset	src/gc.h	/^    uint16_t fl_end_offset;   \/\/ offset of last free object in this page$/;"	m	struct:__anoncf30557c1108	typeref:typename:uint16_t
fl_eof_object	src/flisp/iostream.c	/^value_t fl_eof_object(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_eof_objectp	src/flisp/iostream.c	/^value_t fl_eof_objectp(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_equal	src/flisp/equal.c	/^value_t fl_equal(fl_context_t *fl_ctx, value_t a, value_t b)$/;"	f	typeref:typename:value_t
fl_exception_context_t	src/flisp/flisp.h	/^} fl_exception_context_t;$/;"	t	typeref:struct:_ectx_t
fl_exit	src/flisp/builtins.c	/^static value_t fl_exit(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t	file:
fl_f_raise	src/flisp/builtins.c	/^static value_t fl_f_raise(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t	file:
fl_file	src/flisp/iostream.c	/^value_t fl_file(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_fixnum	src/flisp/builtins.c	/^static value_t fl_fixnum(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t	file:
fl_float_t	src/flisp/flisp.h	/^typedef float    fl_float_t;$/;"	t	typeref:typename:float
fl_foreach	src/flisp/flisp.c	/^value_t fl_foreach(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_free_gc_handles	src/flisp/flisp.c	/^void fl_free_gc_handles(fl_context_t *fl_ctx, uint32_t n)$/;"	f	typeref:typename:void
fl_function	src/flisp/flisp.c	/^static value_t fl_function(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t	file:
fl_function_code	src/flisp/flisp.c	/^static value_t fl_function_code(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t	file:
fl_function_env	src/flisp/flisp.c	/^static value_t fl_function_env(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t	file:
fl_function_name	src/flisp/flisp.c	/^static value_t fl_function_name(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t	file:
fl_function_vals	src/flisp/flisp.c	/^static value_t fl_function_vals(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t	file:
fl_gc_handle	src/flisp/flisp.c	/^void fl_gc_handle(fl_context_t *fl_ctx, value_t *pv)$/;"	f	typeref:typename:void
fl_gensym	src/flisp/flisp.c	/^value_t fl_gensym(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_gensymp	src/flisp/flisp.c	/^static value_t fl_gensymp(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t	file:
fl_global_ctx	src/flisp/flmain.c	/^static fl_context_t fl_global_ctx;$/;"	v	typeref:typename:fl_context_t	file:
fl_global_env	src/flisp/builtins.c	/^value_t fl_global_env(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_hash	src/flisp/equal.c	/^value_t fl_hash(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_idiv2	src/flisp/cvalues.c	/^static value_t fl_idiv2(fl_context_t *fl_ctx, value_t a, value_t b)$/;"	f	typeref:typename:value_t	file:
fl_init	src/flisp/flisp.c	/^void fl_init(fl_context_t *fl_ctx, size_t initial_heapsize)$/;"	f	typeref:typename:void
fl_init_julia_extensions	src/flisp/julia_extensions.c	/^void fl_init_julia_extensions(fl_context_t *fl_ctx)$/;"	f	typeref:typename:void
fl_int16_t	src/flisp/flisp.h	/^typedef int16_t  fl_int16_t;$/;"	t	typeref:typename:int16_t
fl_int32_t	src/flisp/flisp.h	/^typedef int32_t  fl_int32_t;$/;"	t	typeref:typename:int32_t
fl_int64_t	src/flisp/flisp.h	/^typedef int64_t  fl_int64_t;$/;"	t	typeref:typename:int64_t
fl_int8_t	src/flisp/flisp.h	/^typedef int8_t   fl_int8_t;$/;"	t	typeref:typename:int8_t
fl_integer_valuedp	src/flisp/builtins.c	/^static value_t fl_integer_valuedp(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t	file:
fl_integerp	src/flisp/builtins.c	/^static value_t fl_integerp(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t	file:
fl_ioclose	src/flisp/iostream.c	/^value_t fl_ioclose(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_iocolno	src/flisp/iostream.c	/^value_t fl_iocolno(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_iocopy	src/flisp/iostream.c	/^value_t fl_iocopy(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_iocopyuntil	src/flisp/iostream.c	/^value_t fl_iocopyuntil(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_ioeof	src/flisp/iostream.c	/^value_t fl_ioeof(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_ioflush	src/flisp/iostream.c	/^value_t fl_ioflush(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_iogetc	src/flisp/iostream.c	/^value_t fl_iogetc(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_iolineno	src/flisp/iostream.c	/^value_t fl_iolineno(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_iopeekc	src/flisp/iostream.c	/^value_t fl_iopeekc(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_iopos	src/flisp/iostream.c	/^value_t fl_iopos(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_iopurge	src/flisp/iostream.c	/^value_t fl_iopurge(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_ioputc	src/flisp/iostream.c	/^value_t fl_ioputc(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_ioread	src/flisp/iostream.c	/^value_t fl_ioread(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_ioreaduntil	src/flisp/iostream.c	/^value_t fl_ioreaduntil(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_ioseek	src/flisp/iostream.c	/^value_t fl_ioseek(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_iostreamp	src/flisp/iostream.c	/^value_t fl_iostreamp(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_iotostring	src/flisp/iostream.c	/^value_t fl_iotostring(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_ioungetc	src/flisp/iostream.c	/^value_t fl_ioungetc(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_iowrite	src/flisp/iostream.c	/^value_t fl_iowrite(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_isgensym	src/flisp/flisp.c	/^int fl_isgensym(fl_context_t *fl_ctx, value_t v)$/;"	f	typeref:typename:int
fl_isiostream	src/flisp/iostream.c	/^int fl_isiostream(fl_context_t *fl_ctx, value_t v)$/;"	f	typeref:typename:int
fl_isnumber	src/flisp/flisp.c	/^int fl_isnumber(fl_context_t *fl_ctx, value_t v)$/;"	f	typeref:typename:int
fl_isstring	src/flisp/cvalues.c	/^int fl_isstring(fl_context_t *fl_ctx, value_t v)$/;"	f	typeref:typename:int
fl_jmp_buf	src/flisp/flisp.h	/^#define fl_jmp_buf /;"	d
fl_julia_identifier_char	src/flisp/julia_extensions.c	/^value_t fl_julia_identifier_char(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_julia_identifier_start_char	src/flisp/julia_extensions.c	/^value_t fl_julia_identifier_start_char(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_julia_logmsg	src/ast.c	/^value_t fl_julia_logmsg(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_julia_never_identifier_char	src/flisp/julia_extensions.c	/^value_t fl_julia_never_identifier_char(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_julia_op_suffix_char	src/flisp/julia_extensions.c	/^value_t fl_julia_op_suffix_char(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_julia_scalar	src/ast.c	/^value_t fl_julia_scalar(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_julia_strip_op_suffix	src/flisp/julia_extensions.c	/^value_t fl_julia_strip_op_suffix(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_julia_underscore_symbolp	src/flisp/julia_extensions.c	/^value_t fl_julia_underscore_symbolp(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_keywordp	src/flisp/builtins.c	/^static value_t fl_keywordp(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t	file:
fl_length	src/flisp/builtins.c	/^static value_t fl_length(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t	file:
fl_list2	src/flisp/flisp.c	/^value_t fl_list2(fl_context_t *fl_ctx, value_t a, value_t b)$/;"	f	typeref:typename:value_t
fl_listn	src/flisp/flisp.c	/^value_t fl_listn(fl_context_t *fl_ctx, size_t n, ...)$/;"	f	typeref:typename:value_t
fl_liststar	src/flisp/flisp.c	/^value_t fl_liststar(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_load_system_image	src/flisp/flisp.c	/^int fl_load_system_image(fl_context_t *fl_ctx, value_t sys_image_iostream)$/;"	f	typeref:typename:int
fl_load_system_image_str	src/flisp/flisp.c	/^int fl_load_system_image_str(fl_context_t *fl_ctx, char *str, size_t len)$/;"	f	typeref:typename:int
fl_logand	src/flisp/cvalues.c	/^static value_t fl_logand(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t	file:
fl_logior	src/flisp/cvalues.c	/^static value_t fl_logior(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t	file:
fl_lognot	src/flisp/cvalues.c	/^static value_t fl_lognot(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t	file:
fl_logxor	src/flisp/cvalues.c	/^static value_t fl_logxor(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t	file:
fl_longjmp	src/flisp/flisp.h	/^#define fl_longjmp(/;"	d
fl_map1	src/flisp/flisp.c	/^value_t fl_map1(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_memq	src/flisp/builtins.c	/^static value_t fl_memq(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t	file:
fl_mul_any	src/flisp/cvalues.c	/^static value_t fl_mul_any(fl_context_t *fl_ctx, value_t *args, uint32_t nargs, int64_t Saccum)$/;"	f	typeref:typename:value_t	file:
fl_nconc	src/flisp/builtins.c	/^static value_t fl_nconc(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t	file:
fl_neg	src/flisp/cvalues.c	/^static value_t fl_neg(fl_context_t *fl_ctx, value_t n)$/;"	f	typeref:typename:value_t	file:
fl_numbertostring	src/flisp/string.c	/^value_t fl_numbertostring(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_os_getenv	src/flisp/builtins.c	/^static value_t fl_os_getenv(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t	file:
fl_os_setenv	src/flisp/builtins.c	/^static value_t fl_os_setenv(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t	file:
fl_path_cwd	src/flisp/builtins.c	/^static value_t fl_path_cwd(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t	file:
fl_path_exists	src/flisp/builtins.c	/^static value_t fl_path_exists(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t	file:
fl_podp	src/flisp/cvalues.c	/^value_t fl_podp(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_print	src/flisp/print.c	/^void fl_print(fl_context_t *fl_ctx, ios_t *f, value_t v)$/;"	f	typeref:typename:void
fl_print_child	src/flisp/print.c	/^void fl_print_child(fl_context_t *fl_ctx, ios_t *f, value_t v)$/;"	f	typeref:typename:void
fl_print_chr	src/flisp/print.c	/^void fl_print_chr(fl_context_t *fl_ctx, char c, ios_t *f)$/;"	f	typeref:typename:void
fl_print_init	src/flisp/print.c	/^void fl_print_init(fl_context_t *fl_ctx)$/;"	f	typeref:typename:void
fl_print_str	src/flisp/print.c	/^void fl_print_str(fl_context_t *fl_ctx, const char *s, ios_t *f)$/;"	f	typeref:typename:void
fl_profile	src/ast.c	/^JL_DLLEXPORT void fl_profile(const char *fname)$/;"	f	typeref:typename:JL_DLLEXPORT void
fl_ptrdiff_t	src/flisp/flisp.h	/^typedef ptrdiff_t fl_ptrdiff_t;$/;"	t	typeref:typename:ptrdiff_t
fl_raise	src/flisp/flisp.c	/^void fl_raise(fl_context_t *fl_ctx, value_t e)$/;"	f	typeref:typename:void
fl_read	src/flisp/iostream.c	/^value_t fl_read(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_read_init	src/flisp/read.c	/^static void fl_read_init(fl_context_t *fl_ctx)$/;"	f	typeref:typename:void	file:
fl_read_sexpr	src/flisp/read.c	/^value_t fl_read_sexpr(fl_context_t *fl_ctx, value_t f)$/;"	f	typeref:typename:value_t
fl_readstate_t	src/flisp/flisp.c	/^} fl_readstate_t;$/;"	t	typeref:struct:_fl_readstate_t	file:
fl_restorestate	src/flisp/flisp.c	/^void fl_restorestate(fl_context_t *fl_ctx, fl_exception_context_t *_ctx)$/;"	f	typeref:typename:void
fl_savestate	src/flisp/flisp.c	/^void fl_savestate(fl_context_t *fl_ctx, fl_exception_context_t *_ctx)$/;"	f	typeref:typename:void
fl_set_top_level_value	src/flisp/builtins.c	/^static value_t fl_set_top_level_value(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t	file:
fl_setjmp	src/flisp/flisp.h	/^#define fl_setjmp(/;"	d
fl_show_profile	src/ast.c	/^JL_DLLEXPORT void fl_show_profile(void)$/;"	f	typeref:typename:JL_DLLEXPORT void
fl_size_t	src/flisp/flisp.h	/^typedef size_t   fl_size_t;$/;"	t	typeref:typename:size_t
fl_skipws	src/flisp/julia_extensions.c	/^value_t fl_skipws(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_stacktrace	src/flisp/flisp.c	/^value_t fl_stacktrace(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_string	src/flisp/string.c	/^value_t fl_string(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_string_char	src/flisp/string.c	/^value_t fl_string_char(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_string_count	src/flisp/string.c	/^value_t fl_string_count(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_string_dec	src/flisp/string.c	/^value_t fl_string_dec(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_string_find	src/flisp/string.c	/^value_t fl_string_find(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_string_inc	src/flisp/string.c	/^value_t fl_string_inc(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_string_isutf8	src/flisp/string.c	/^value_t fl_string_isutf8(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_string_sub	src/flisp/string.c	/^value_t fl_string_sub(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_stringp	src/flisp/string.c	/^value_t fl_stringp(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_stringtonumber	src/flisp/string.c	/^value_t fl_stringtonumber(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_symbol	src/flisp/builtins.c	/^static value_t fl_symbol(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t	file:
fl_table	src/flisp/table.c	/^value_t fl_table(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_table_del	src/flisp/table.c	/^value_t fl_table_del(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_table_foldl	src/flisp/table.c	/^value_t fl_table_foldl(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_table_get	src/flisp/table.c	/^value_t fl_table_get(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_table_has	src/flisp/table.c	/^value_t fl_table_has(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_table_put	src/flisp/table.c	/^value_t fl_table_put(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_tablep	src/flisp/table.c	/^value_t fl_tablep(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
fl_time_now	src/flisp/builtins.c	/^static value_t fl_time_now(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t	file:
fl_toiostream	src/flisp/iostream.c	/^ios_t *fl_toiostream(fl_context_t *fl_ctx, value_t v, const char *fname)$/;"	f	typeref:typename:ios_t *
fl_top_level_value	src/flisp/builtins.c	/^static value_t fl_top_level_value(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t	file:
fl_toplevel_eval	src/flisp/flisp.c	/^value_t fl_toplevel_eval(fl_context_t *fl_ctx, value_t expr)$/;"	f	typeref:typename:value_t
fl_truncate	src/flisp/builtins.c	/^static value_t fl_truncate(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t	file:
fl_uint16_t	src/flisp/flisp.h	/^typedef uint16_t fl_uint16_t;$/;"	t	typeref:typename:uint16_t
fl_uint32_t	src/flisp/flisp.h	/^typedef uint32_t fl_uint32_t;$/;"	t	typeref:typename:uint32_t
fl_uint64_t	src/flisp/flisp.h	/^typedef uint64_t fl_uint64_t;$/;"	t	typeref:typename:uint64_t
fl_uint8_t	src/flisp/flisp.h	/^typedef uint8_t  fl_uint8_t;$/;"	t	typeref:typename:uint8_t
fl_vector_alloc	src/flisp/builtins.c	/^static value_t fl_vector_alloc(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t	file:
fl_write	src/flisp/iostream.c	/^value_t fl_write(fl_context_t *fl_ctx, value_t *args, uint32_t nargs)$/;"	f	typeref:typename:value_t
flag	src/getopt.h	/^  int *flag;$/;"	m	struct:option	typeref:typename:int *
flagref_list	src/dump.c	/^static arraylist_t flagref_list;$/;"	v	typeref:typename:arraylist_t	file:
flags	src/flisp/flisp.h	/^    uintptr_t flags;$/;"	m	struct:_symbol_t	typeref:typename:uintptr_t
flags	src/julia.h	/^    jl_array_flags_t flags;$/;"	m	struct:__anon055fe4270408	typeref:typename:jl_array_flags_t
flags	src/llvm-multiversioning.cpp	/^        uint32_t flags;$/;"	m	struct:__anond5683ea40111::CloneCtx::Target	typeref:typename:uint32_t	file:
flags	src/processor.cpp	/^        uint32_t flags;$/;"	m	struct:__anon839834ed0111::TargetData::__anon839834ed0308	typeref:typename:uint32_t	file:
flags	src/processor.h	/^    uint32_t flags;$/;"	m	struct:jl_target_spec_t	typeref:typename:uint32_t
flat	stdlib/Profile/src/Profile.jl	/^function flat(io::IO, data::Vector{UInt64}, lidict::Union{LineInfoDict, LineInfoFlatDict}, cols:/;"	f
flatten	base/broadcast.jl	/^function flatten(bc::Broadcasted{Style}) where {Style}$/;"	f
flatten	base/iterators.jl	/^flatten(itr) = Flatten(itr)$/;"	f
flatten	base/multidimensional.jl	/^    @inline flatten(I) = _flatten(I...)$/;"	f
flatten	base/multidimensional.jl	/^    flatten(I::Tuple{<:CartesianIndex}) = I[1].I$/;"	f
flatten	base/multidimensional.jl	/^    flatten(I::Tuple{Any}) = I$/;"	f
flatten	base/multidimensional.jl	/^    flatten(I::Tuple{}) = I$/;"	f
flatten	stdlib/Profile/src/Profile.jl	/^function flatten(data::Vector, lidict::LineInfoDict)$/;"	f
flatten-blocks	src/ast.scm	/^(define (flatten-blocks e) (flatten-ex 'block e))$/;"	f
flatten-ex	src/ast.scm	/^(define (flatten-ex head e)$/;"	f
flatten-where-expr	src/julia-syntax.scm	/^(define (flatten-where-expr e)$/;"	f
flatten_iteratorsize	base/iterators.jl	/^flatten_iteratorsize(::Union{HasShape, HasLength}, ::Type{<:NTuple{N,Any}}) where {N} = HasLengt/;"	f
flatten_iteratorsize	base/iterators.jl	/^flatten_iteratorsize(::Union{HasShape, HasLength}, ::Type{<:Number}) = HasLength()$/;"	f
flatten_iteratorsize	base/iterators.jl	/^flatten_iteratorsize(::Union{HasShape, HasLength}, ::Type{<:Tuple}) = SizeUnknown()$/;"	f
flatten_iteratorsize	base/iterators.jl	/^flatten_iteratorsize(a, b) = SizeUnknown()$/;"	f
flatten_length	base/iterators.jl	/^flatten_length(f, ::Type{<:Number}) = length(f.it)$/;"	f
flatten_length	base/iterators.jl	/^flatten_length(f, T) = throw(ArgumentError($/;"	f
flatten_length	base/iterators.jl	/^function flatten_length(f, T::Type{<:NTuple{N,Any}}) where {N}$/;"	f
flatten_type_union	src/jltypes.c	/^static void flatten_type_union(jl_value_t **types, size_t n, jl_value_t **out, size_t *idx) JL_N/;"	f	typeref:typename:void	file:
flavor	stdlib/Markdown/src/parse/config.jl	/^macro flavor(name, features)$/;"	f
flavors	stdlib/Markdown/src/parse/config.jl	/^const flavors = Dict{Symbol, Config}()$/;"	v
fld	base/bool.jl	/^fld(x::Bool, y::Bool) = div(x,y)$/;"	f
fld	base/int.jl	/^fld(x::Signed, y::Unsigned) = div(x, y) - (signbit(x) & (rem(x, y) != 0))$/;"	f
fld	base/int.jl	/^fld(x::T, y::T) where {T<:Unsigned} = div(x,y)$/;"	f
fld	base/int.jl	/^fld(x::Unsigned, y::Signed) = div(x, y) - (signbit(y) & (rem(x, y) != 0))$/;"	f
fld	base/int.jl	/^function fld(x::T, y::T) where T<:Integer$/;"	f
fld	base/operators.jl	/^fld(x::T, y::T) where {T<:Real} = convert(T,round((x-mod(x,y))\/y))$/;"	f
fld	base/promotion.jl	/^fld(x::Real, y::Real) = fld(promote(x,y)...)$/;"	f
fld1	base/operators.jl	/^fld1(x::T, y::T) where {T<:Real} = (m = mod1(x, y); fld(x + y - m, y))$/;"	f
fld1	base/operators.jl	/^function fld1(x::T, y::T) where T<:Integer$/;"	f
fld1	base/promotion.jl	/^fld1(x::Real, y::Real) = fld1(promote(x,y)...)$/;"	f
fldmod	base/number.jl	/^fldmod(x,y) = (fld(x,y),mod(x,y))$/;"	f
fldmod1	base/operators.jl	/^fldmod1(x, y) = (fld1(x, y), mod1(x, y))$/;"	f
flip_vars	src/subtype.c	/^static void flip_vars(jl_stenv_t *e)$/;"	f	typeref:typename:void	file:
flipsign	base/complex.jl	/^flipsign(x::Complex, y::Real) = ifelse(signbit(y), -x, x)$/;"	f
flipsign	base/floatfuncs.jl	/^flipsign(x::Float32, y::Float32) = bitcast(Float32, xor_int(bitcast(UInt32, x), and_int(bitcast(/;"	f
flipsign	base/floatfuncs.jl	/^flipsign(x::Float32, y::Real) = flipsign(x, Float32(y))$/;"	f
flipsign	base/floatfuncs.jl	/^flipsign(x::Float64, y::Float64) = bitcast(Float64, xor_int(bitcast(UInt64, x), and_int(bitcast(/;"	f
flipsign	base/floatfuncs.jl	/^flipsign(x::Float64, y::Real) = flipsign(x, Float64(y))$/;"	f
flipsign	base/gmp.jl	/^flipsign( x::BigInt, y::BigInt)  = signbit(y) ? -x : x$/;"	f
flipsign	base/gmp.jl	/^flipsign( x::BigInt, y::Integer) = signbit(y) ? -x : x$/;"	f
flipsign	base/int.jl	/^flipsign(x::BitSigned, y::BitSigned) = flipsign_int(promote(x, y)...) % typeof(x)$/;"	f
flipsign	base/int.jl	/^flipsign(x::Signed, y::Float16) = flipsign(x, bitcast(Int16, y))$/;"	f
flipsign	base/int.jl	/^flipsign(x::Signed, y::Float32) = flipsign(x, bitcast(Int32, y))$/;"	f
flipsign	base/int.jl	/^flipsign(x::Signed, y::Float64) = flipsign(x, bitcast(Int64, y))$/;"	f
flipsign	base/int.jl	/^flipsign(x::Signed, y::Real)    = flipsign(x, -oftype(x, signbit(y)))$/;"	f
flipsign	base/int.jl	/^flipsign(x::T, y::T) where {T<:BitSigned} = flipsign_int(x, y)$/;"	f
flipsign	base/number.jl	/^flipsign(x::Real, y::Real) = ifelse(signbit(y), -x, +x) # the + is for type-stability on Bool$/;"	f
flipsign	base/promotion.jl	/^flipsign(x::T, y::T) where {T<:Signed} = no_op_err("flipsign", T)$/;"	f
flipsign	src/runtime_intrinsics.c	/^#define flipsign(/;"	d	file:
flipsign!	base/gmp.jl	/^flipsign!(x::BigInt, y::Integer) = (signbit(y) && (x.size = -x.size); x)$/;"	f
flisp_lock	src/ast.c	/^static jl_mutex_t flisp_lock;$/;"	v	typeref:typename:jl_mutex_t	file:
flisp_system_image	src/ast.c	/^static uint8_t flisp_system_image[] = {$/;"	v	typeref:typename:uint8_t[]	file:
float	base/complex.jl	/^float(::Type{Complex{T}}) where {T<:AbstractFloat} = Complex{T}$/;"	f
float	base/complex.jl	/^float(::Type{Complex{T}}) where {T} = Complex{float(T)}$/;"	f
float	base/complex.jl	/^float(z::Complex) = Complex(float(real(z)), float(imag(z)))$/;"	f
float	base/complex.jl	/^float(z::Complex{<:AbstractFloat}) = z$/;"	f
float	base/float.jl	/^float(::Type{T}) where {T<:AbstractFloat} = T$/;"	f
float	base/float.jl	/^float(::Type{T}) where {T<:Number} = typeof(float(zero(T)))$/;"	f
float	base/float.jl	/^float(A::AbstractArray{<:AbstractFloat}) = A$/;"	f
float	base/float.jl	/^float(r::StepRange) = float(r.start):float(r.step):float(last(r))$/;"	f
float	base/float.jl	/^float(r::StepRangeLen{T}) where {T} =$/;"	f
float	base/float.jl	/^float(r::UnitRange) = float(r.start):float(last(r))$/;"	f
float	base/float.jl	/^float(x) = AbstractFloat(x)$/;"	f
float	base/float.jl	/^function float(A::AbstractArray{T}) where T$/;"	f
float	base/float.jl	/^function float(r::LinRange)$/;"	f
float	base/irrationals.jl	/^float(::Type{<:AbstractIrrational}) = Float64$/;"	f
float	base/missing.jl	/^float(A::AbstractArray{Missing}) = A$/;"	f
float	base/missing.jl	/^function float(A::AbstractArray{Union{T, Missing}}) where {T}$/;"	f
float	base/mpfr.jl	/^float(::Type{BigInt}) = BigFloat$/;"	f
float	base/rational.jl	/^float(::Type{Rational{T}}) where {T<:Integer} = float(T)$/;"	f
float	base/twiceprecision.jl	/^float(x::TwicePrecision) = TwicePrecision(float(x.hi), float(x.lo))$/;"	f
float	base/twiceprecision.jl	/^float(x::TwicePrecision{<:AbstractFloat}) = x$/;"	f
float	stdlib/SparseArrays/src/sparsematrix.jl	/^float(S::SparseMatrixCSC) = SparseMatrixCSC(size(S, 1), size(S, 2), copy(getcolptr(S)), copy(row/;"	f
float	stdlib/SparseArrays/src/sparsevector.jl	/^float(x::AbstractSparseVector) =$/;"	f
float	stdlib/SparseArrays/src/sparsevector.jl	/^float(x::AbstractSparseVector{<:AbstractFloat}) = x$/;"	f
float	test/math.jl	/^float(x::FloatWrapper) = x$/;"	f
float32x2_t	src/ccalltest.c	/^typedef float float32x2_t __attribute__ ((vector_size (8)));$/;"	t	typeref:typename:float	file:
float32x4_t	src/ccalltest.c	/^typedef float float32x4_t __attribute__ ((vector_size (16)));$/;"	t	typeref:typename:float	file:
float64x2_t	src/ccalltest.c	/^typedef double float64x2_t __attribute__ ((vector_size (16)));$/;"	t	typeref:typename:double	file:
float_bits	test/grisu.jl	/^float_bits = 0x000FFFFFFFFFFFFF$/;"	v
float_bits	test/grisu.jl	/^float_bits = 0x0010000000000000$/;"	v
float_bits	test/grisu.jl	/^float_bits = 0x007FFFFF$/;"	v
float_bits	test/grisu.jl	/^float_bits = 0x00800000$/;"	v
float_func	src/intrinsics.cpp	/^static bool float_func[num_intrinsics];$/;"	v	typeref:typename:bool[]	file:
floatmax	base/float.jl	/^    floatmax(::Type{Float16}) = $(bitcast(Float16, 0x7bff))$/;"	f
floatmax	base/float.jl	/^    floatmax(::Type{Float32}) = $(bitcast(Float32, 0x7f7fffff))$/;"	f
floatmax	base/float.jl	/^    floatmax(::Type{Float64}) = $(bitcast(Float64, 0x7fefffffffffffff))$/;"	f
floatmax	base/float.jl	/^floatmax() = floatmax(Float64)$/;"	f
floatmax	base/float.jl	/^floatmax(x::T) where {T<:AbstractFloat} = floatmax(T)$/;"	f
floatmax	base/mpfr.jl	/^floatmax(::Type{BigFloat}) = prevfloat(BigFloat(Inf))$/;"	f
floatmin	base/float.jl	/^    floatmin(::Type{Float16}) = $(bitcast(Float16, 0x0400))$/;"	f
floatmin	base/float.jl	/^    floatmin(::Type{Float32}) = $(bitcast(Float32, 0x00800000))$/;"	f
floatmin	base/float.jl	/^    floatmin(::Type{Float64}) = $(bitcast(Float64, 0x0010000000000000))$/;"	f
floatmin	base/float.jl	/^floatmin() = floatmin(Float64)$/;"	f
floatmin	base/float.jl	/^floatmin(x::T) where {T<:AbstractFloat} = floatmin(T)$/;"	f
floatmin	base/mpfr.jl	/^floatmin(::Type{BigFloat}) = nextfloat(zero(BigFloat))$/;"	f
floatmin2	stdlib/LinearAlgebra/src/givens.jl	/^floatmin2(::Type{Float32}) = reinterpret(Float32, 0x26000000)$/;"	f
floatmin2	stdlib/LinearAlgebra/src/givens.jl	/^floatmin2(::Type{Float64}) = reinterpret(Float64, 0x21a0000000000000)$/;"	f
floatmin2	stdlib/LinearAlgebra/src/givens.jl	/^floatmin2(::Type{T}) where {T} = (twopar = 2one(T); twopar^trunc(Integer,log(floatmin(T)\/eps(T)/;"	f
floatrange	base/twiceprecision.jl	/^function floatrange(::Type{T}, start_n::Integer, step_n::Integer, len::Integer, den::Integer) wh/;"	f
floatrange	base/twiceprecision.jl	/^function floatrange(a::AbstractFloat, st::AbstractFloat, len::Real, divisor::AbstractFloat)$/;"	f
floatsym	src/flisp/flisp.h	/^    value_t floatsym, doublesym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
floattype	src/flisp/flisp.h	/^    fltype_t *floattype, *doubletype;$/;"	m	struct:_fl_context_t	typeref:typename:fltype_t *
floattypes	base/atomics.jl	/^const floattypes = (Float16, Float32, Float64)$/;"	v
floattypes	stdlib/LinearAlgebra/test/addmul.jl	/^floattypes = [$/;"	v
floor	base/float.jl	/^floor(::Type{T}, x::AbstractFloat) where {T<:Integer} = trunc(T,round(x, RoundDown))$/;"	f
floor	base/float.jl	/^floor(::Type{T}, x::Float16) where {T<:Integer} = floor(T, Float32(x))$/;"	f
floor	base/floatfuncs.jl	/^floor(x::Real; kwargs...) = round(x, RoundDown; kwargs...)$/;"	f
floor	base/int.jl	/^floor(::Type{T}, x::Integer) where {T<:Integer} = convert(T, x)$/;"	f
floor	base/int.jl	/^function floor end$/;"	f
floor	base/mpfr.jl	/^floor(::Type{BigInt}, x::BigFloat) = unsafe_cast(BigInt, x, RoundDown)$/;"	f
floor	base/mpfr.jl	/^floor(::Type{Integer}, x::BigFloat) = floor(BigInt, x)$/;"	f
floor	base/mpfr.jl	/^function floor(::Type{T}, x::BigFloat) where T<:Union{Signed,Unsigned}$/;"	f
floor	base/rational.jl	/^floor(::Type{T}, x::Rational) where {T} = convert(T,fld(x.num,x.den))$/;"	f
floor	base/rational.jl	/^floor(x::Rational{T}) where {T} = Rational(floor(T,x))$/;"	f
floor_float	src/runtime_intrinsics.c	/^#define floor_float(/;"	d	file:
floorceil	stdlib/Dates/src/rounding.jl	/^function floorceil(dt::TimeType, p::Period)$/;"	f
floorceil	stdlib/Dates/src/rounding.jl	/^function floorceil(x::ConvertiblePeriod, precision::ConvertiblePeriod)$/;"	f
fltype_t	src/flisp/flisp.h	/^} fltype_t;$/;"	t	typeref:struct:_fltype_t
flush	base/coreio.jl	/^flush(::DevNull) = nothing$/;"	f
flush	base/io.jl	/^flush(io::AbstractPipe) = flush(pipe_writer(io))$/;"	f
flush	base/io.jl	/^flush(io::IO) = nothing$/;"	f
flush	base/io.jl	/^function flush end$/;"	f
flush	base/iostream.jl	/^function flush(s::IOStream)$/;"	f
flush	base/multimedia.jl	/^flush(d::TextDisplay) = flush(d.io)$/;"	f
flush	base/stream.jl	/^function flush(s::BufferStream)$/;"	f
flush	base/stream.jl	/^function flush(s::LibuvStream)$/;"	f
flush	stdlib/REPL/src/Terminals.jl	/^flush(t::TextTerminal) = nothing$/;"	f
flush_cstdio	base/libc.jl	/^flush_cstdio() = ccall(:jl_flush_cstdio, Cvoid, ())$/;"	f
flush_gc_msgs	stdlib/Distributed/src/messages.jl	/^function flush_gc_msgs()$/;"	f
flush_gc_msgs	stdlib/Distributed/src/messages.jl	/^function flush_gc_msgs(w::Worker)$/;"	f
fm_fast_32	test/fastmath.jl	/^fm_fast_32(x) = @fastmath x + eps32_2 + eps32_2$/;"	f
fm_fast_64	test/fastmath.jl	/^fm_fast_64(x) = @fastmath x + eps64_2 + eps64_2$/;"	f
fm_fast_64_upd	test/fastmath.jl	/^fm_fast_64_upd(x) = @fastmath (r=x; r+=eps64_2; r+=eps64_2)$/;"	f
fm_ieee_32	test/fastmath.jl	/^fm_ieee_32(x) = x + eps32_2 + eps32_2$/;"	f
fm_ieee_64	test/fastmath.jl	/^fm_ieee_64(x) = x + eps64_2 + eps64_2$/;"	f
fm_ieee_64_upd	test/fastmath.jl	/^fm_ieee_64_upd(x) = (r=x; r+=eps64_2; r+=eps64_2)$/;"	f
fma	base/floatfuncs.jl	/^    fma(x::Float32, y::Float32, z::Float32) = fma_libm(x,y,z)$/;"	f
fma	base/floatfuncs.jl	/^    fma(x::Float32, y::Float32, z::Float32) = fma_llvm(x,y,z)$/;"	f
fma	base/floatfuncs.jl	/^    fma(x::Float64, y::Float64, z::Float64) = fma_libm(x,y,z)$/;"	f
fma	base/floatfuncs.jl	/^    fma(x::Float64, y::Float64, z::Float64) = fma_llvm(x,y,z)$/;"	f
fma	base/floatfuncs.jl	/^function fma end$/;"	f
fma	base/floatfuncs.jl	/^function fma(a::Float16, b::Float16, c::Float16)$/;"	f
fma	base/mpfr.jl	/^function fma(x::BigFloat, y::BigFloat, z::BigFloat)$/;"	f
fma	base/promotion.jl	/^fma(x::Integer, y::Integer, z::Integer) = x*y+z$/;"	f
fma	base/promotion.jl	/^fma(x::Number, y::Number, z::Number) = fma(promote(x,y,z)...)$/;"	f
fma	base/promotion.jl	/^fma(x::T, y::T, z::T) where {T<:Number} = no_op_err("fma", T)$/;"	f
fma	base/rational.jl	/^fma(x::Rational, y::Rational, z::Rational) = x*y+z$/;"	f
fma	src/runtime_intrinsics.c	/^#define fma(/;"	d	file:
fma_libm	base/floatfuncs.jl	/^fma_libm(x::Float32, y::Float32, z::Float32) =$/;"	f
fma_libm	base/floatfuncs.jl	/^fma_libm(x::Float64, y::Float64, z::Float64) =$/;"	f
fma_llvm	base/floatfuncs.jl	/^fma_llvm(x::Float32, y::Float32, z::Float32) = fma_float(x, y, z)$/;"	f
fma_llvm	base/floatfuncs.jl	/^fma_llvm(x::Float64, y::Float64, z::Float64) = fma_float(x, y, z)$/;"	f
fmix32	src/support/MurmurHash3.c	/^FORCE_INLINE uint32_t fmix32 ( uint32_t h )$/;"	f	typeref:typename:FORCE_INLINE uint32_t
fmix64	src/support/MurmurHash3.c	/^FORCE_INLINE uint64_t fmix64 ( uint64_t k )$/;"	f	typeref:typename:FORCE_INLINE uint64_t
fmpz	test/precompile.jl	/^              struct fmpz end$/;"	f
fn	stdlib/SharedArrays/test/runtests.jl	/^fn = tempname()$/;"	v
fn2	stdlib/SharedArrays/test/runtests.jl	/^fn2 = tempname()$/;"	v
fn3	stdlib/SharedArrays/test/runtests.jl	/^fn3 = tempname()$/;"	v
fn_bcode	src/flisp/flisp.h	/^#define fn_bcode(/;"	d
fn_env	src/flisp/flisp.h	/^#define fn_env(/;"	d
fn_name	src/flisp/flisp.h	/^#define fn_name(/;"	d
fn_vals	src/flisp/flisp.h	/^#define fn_vals(/;"	d
fname	stdlib/Mmap/test/runtests.jl	/^fname = tempname()$/;"	v
fname	stdlib/REPL/src/latex_symbols.jl	/^fname = "unicode-math-table.tex"$/;"	v
fname	test/core.jl	/^fname = tempname()$/;"	v
fnsym	src/flisp/flisp.h	/^    value_t tsym, Tsym, fsym, Fsym, booleansym, nullsym, evalsym, fnsym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
foldl	base/reduce.jl	/^foldl(op, itr; kw...) = mapfoldl(identity, op, itr; kw...)$/;"	f
foldr	base/reduce.jl	/^foldr(op, itr; kw...) = mapfoldr(identity, op, itr; kw...)$/;"	f
following_uuids	stdlib/UUIDs/test/runtests.jl	/^const following_uuids = [$/;"	v
foo	base/docs/Docs.jl	/^    foo(x) = ...$/;"	f
foo	base/docs/Docs.jl	/^    function foo() ...$/;"	f
foo	base/docs/basedocs.jl	/^foo(a::MyType) = bar(a.x) + 1$/;"	f
foo	deps/srccache/patchelf-0.9/tests/foo.c	/^int foo()$/;"	f	typeref:typename:int
foo	stdlib/Distributed/src/workerpool.jl	/^const foo = rand(10^8);$/;"	v
foo	stdlib/Distributed/test/distributed_exec.jl	/^                foo() = throw(ErrorException("A.error"))$/;"	f
foo	stdlib/REPL/test/replcompletions.jl	/^        foo() = bar$/;"	f
foo	stdlib/Serialization/test/runtests.jl	/^foo(x) = error("Instances must implement foo")$/;"	f
foo	stdlib/Test/src/logging.jl	/^    function foo(n)$/;"	f
foo	stdlib/Test/test/runtests.jl	/^        foo(x) = length(x)^2$/;"	f
foo	stdlib/Test/test/runtests.jl	/^    function foo(n)$/;"	f
foo	test/ambiguous.jl	/^foo(::Type{Array{S,N}}, A::AbstractArray{T,N}) where {S<:AbstractFloat,N,T<:AbstractFloat} =$/;"	f
foo	test/ambiguous.jl	/^foo(::Type{Array{S,N}}, A::MyArray{T,N}) where {S<:AbstractFloat,N,T<:AbstractFloat} =$/;"	f
foo	test/ambiguous.jl	/^foo(::Type{Array{T,N}}, A::MyArray{T,N}) where {T,N} = A.data$/;"	f
foo	test/ambiguous.jl	/^foo(::Type{Array{T,N}}, A::MyArray{T,N}) where {T<:AbstractFloat,N} = A.data$/;"	f
foo	test/broadcast.jl	/^    foo(x::Char, y::Int) = 0$/;"	f
foo	test/broadcast.jl	/^    foo(x::String, y::Int) = "hello"$/;"	f
foo	test/cmdlineargs.jl	/^        foo() = :foo; bar() = :bar$/;"	f
foo	test/compiler/contextual.jl	/^foo(i) = i+bar(Val(1))$/;"	f
foo	test/core.jl	/^    foo(x) = x > 0 ? x : missing$/;"	f
foo	test/core.jl	/^    foo(x::Tuple{Vararg{Any}}) = 0$/;"	f
foo	test/core.jl	/^    foo(x::Tuple{Vararg{Integer}}) = 1$/;"	f
foo	test/core.jl	/^    function foo()$/;"	f
foo	test/core.jl	/^    function foo(x)$/;"	f
foo	test/core.jl	/^foo(x) = 1$/;"	f
foo	test/core.jl	/^macro foo(TYP)$/;"	f
foo	test/core.jl	/^macro foo(var)$/;"	f
foo	test/docs.jl	/^    function foo end$/;"	f
foo	test/docs.jl	/^foo(::Float64) = 2$/;"	f
foo	test/docs.jl	/^foo(::Int) = 1$/;"	f
foo	test/docs.jl	/^macro foo(x)$/;"	f
foo	test/llvmcall.jl	/^function foo()$/;"	f
foo	test/reflection.jl	/^foo(::Int, ::Int) = 1$/;"	f
foo	test/reflection.jl	/^foo(::Int, ::Real) = 3$/;"	f
foo	test/reflection.jl	/^foo(::Real, ::Int) = 2$/;"	f
foo	test/reflection.jl	/^foo(x) = x$/;"	f
foo	test/staged.jl	/^    foo() = (bar(rand() > 0.5 ? 1 : 1.0); error("foo"))$/;"	f
foo	test/staged.jl	/^    foo() = return nothing$/;"	f
foo	test/syntax.jl	/^        function foo(x::T, y::S) where T<:Number where S<:Number$/;"	f
foo	test/syntax.jl	/^    function foo(a::A, b::B) where {A,B}$/;"	f
foo	test/syntax.jl	/^    function foo(a::T) where {T}$/;"	f
foo	test/tuple.jl	/^    foo() = 2$/;"	f
foo	test/tuple.jl	/^    foo(x) = 2x$/;"	f
foo	test/tuple.jl	/^    foo(x, y) = x + y$/;"	f
foo	test/tuple.jl	/^    foo(x, y, z) = x + y + z$/;"	f
foo1	test/reflection.jl	/^foo1(x) = bar1(x)$/;"	f
foo1	test/staged.jl	/^@generated function foo1(a::Array{T,N}) where {N,T}$/;"	f
foo11122	stdlib/InteractiveUtils/test/runtests.jl	/^foo11122(x) = @fastmath x - 1.0$/;"	f
foo11904	test/core.jl	/^@inline function foo11904(x::Nullable11904{S}) where S$/;"	f
foo11904	test/core.jl	/^foo11904(x::Int) = x$/;"	f
foo1234	test/deprecation_exec.jl	/^    foo1234(x) = x+1$/;"	f
foo12967	test/core.jl	/^foo12967(x, ::TupleType12967) = 2$/;"	f
foo12967	test/core.jl	/^foo12967(x, @nospecialize y) = 1$/;"	f
foo13031	test/ccall.jl	/^foo13031(x) = Cint(1)$/;"	f
foo13031	test/ccall.jl	/^foo13031(x,y,z) = z$/;"	f
foo13031p	test/ccall.jl	/^foo13031p = @cfunction(foo13031, Cint, (Ref{Tuple{}}, Ref{Tuple{}}, Cint))$/;"	v
foo13031p	test/ccall.jl	/^foo13031p = @cfunction(foo13031, Cint, (Ref{Tuple{}},))$/;"	v
foo13825	test/reflection.jl	/^foo13825(::Array{T, N}, ::Array, ::Vector) where {T, N} = nothing$/;"	f
foo16096	test/syntax.jl	/^        @inline function foo16096(sub)$/;"	f
foo16239	test/syntax.jl	/^macro foo16239(x)$/;"	f
foo1784	test/core.jl	/^function foo1784()$/;"	f
foo19463	stdlib/Distributed/test/distributed_exec.jl	/^function foo19463()$/;"	f
foo19641	test/compiler/inference.jl	/^foo19641() = let a = 1.0$/;"	f
foo2	test/core.jl	/^    foo2(x::Vararg{Any,2}) = 2$/;"	f
foo2	test/core.jl	/^macro foo2()$/;"	f
foo2	test/reflection.jl	/^foo2(x) = bar2(x)$/;"	f
foo2	test/staged.jl	/^@generated function foo2(a::Array{T,N}) where {T,N}$/;"	f
foo20518	test/compiler/inference.jl	/^foo20518(xs::Any...) = -1$/;"	f
foo20518	test/compiler/inference.jl	/^foo20518(xs::Int...) = [0]$/;"	f
foo21094	test/broadcast.jl	/^@generated function foo21094(out, x)$/;"	f
foo21397	test/core.jl	/^foo21397(x) = bar21397(x)$/;"	f
foo21568	test/core.jl	/^function foo21568()$/;"	f
foo21900	test/core.jl	/^foo21900 = 0$/;"	v
foo22770	test/compiler/codegen.jl	/^    function foo22770()$/;"	f
foo23996	test/core.jl	/^function foo23996(xs...)$/;"	f
foo25261	test/compiler/inference.jl	/^function foo25261()$/;"	f
foo25955	test/syntax.jl	/^struct foo25955$/;"	f
foo27204	test/core.jl	/^foo27204(x) = f27204(x)()$/;"	f
foo27240	test/core.jl	/^@inline function foo27240()$/;"	f
foo27365	test/core.jl	/^    foo27365() = new()$/;"	f
foo27365	test/core.jl	/^mutable struct foo27365$/;"	f
foo27456	test/core.jl	/^@inline foo27456() = try baz_nonexistent27456(); catch; nothing; end$/;"	f
foo27594	test/core.jl	/^function foo27594()$/;"	f
foo27770	test/core.jl	/^foo27770() = get27770(Nullable27770(), Handle27770())$/;"	f
foo28077	test/goto.jl	/^function foo28077()$/;"	f
foo28208	test/core.jl	/^@noinline function foo28208(a::Bool, b::Bool)$/;"	f
foo28224	test/core.jl	/^function foo28224()$/;"	f
foo28244	test/syntax.jl	/^macro foo28244(sym)$/;"	f
foo28326	test/core.jl	/^function foo28326(a)$/;"	f
foo28444	test/compiler/inference.jl	/^mutable struct foo28444$/;"	f
foo28445	test/core.jl	/^mutable struct foo28445$/;"	f
foo28900	test/syntax.jl	/^macro foo28900(x)$/;"	f
foo2_keymap	stdlib/REPL/test/lineedit.jl	/^const foo2_keymap = Dict($/;"	v
foo3	test/reflection.jl	/^foo3(x) = bar3(x)$/;"	f
foo30594	test/compiler/irpasses.jl	/^    function foo30594(cnt::Int, dx::Int)$/;"	f
foo30783	test/compiler/inference.jl	/^function foo30783(b)$/;"	f
foo31018!	test/compiler/codegen.jl	/^function foo31018!(a, b)$/;"	f
foo31164	test/compiler/inference.jl	/^@eval function foo31164(b, x)$/;"	f
foo31357	test/core.jl	/^function foo31357(b::Bool)$/;"	f
foo31783	test/core.jl	/^foo31783(tv::TypeVar) = tv.ub == Any ? Union{tv,LL31783{tv}} : tv$/;"	f
foo32_64	test/arrayops.jl	/^    foo32_64(x) = (x<2) ? Int32(x) : Int64(x)$/;"	f
foo4	test/reflection.jl	/^foo4(x) = bar4(x)$/;"	f
foo4075	test/core.jl	/^function foo4075(f::Foo4075, s::Symbol)$/;"	f
foo4129	test/core.jl	/^foo4129(a::Baz4129,args...)         = foo4129(a,a.b,args...)$/;"	f
foo4129	test/core.jl	/^foo4129(a::Baz4129,b::Bar41291,args...) = foo4129(a,b.f,b,args...)$/;"	f
foo4129	test/core.jl	/^foo4129(a::Baz4129,b::Bar41292,args...) = foo4129(a,b.f,b,args...)$/;"	f
foo4129	test/core.jl	/^foo4129(a::Baz4129,c::Foo4129,b::Bar4129,@nospecialize(x),y) = (a,b,c,x,y)$/;"	f
foo4154	test/core.jl	/^foo4154(x) = MyType4154(x, [])$/;"	f
foo5312	test/core.jl	/^    foo5312() = (incr5312(),)$/;"	f
foo7648	test/reflection.jl	/^foo7648(x) = x$/;"	f
foo7648_nomethods	test/reflection.jl	/^function foo7648_nomethods end$/;"	f
foo9222	test/compiler/inference.jl	/^function foo9222()$/;"	f
foo9475	test/reflection.jl	/^    foo9475(x) = x$/;"	f
foo9677	test/core.jl	/^@generated function foo9677(x::AbstractArray{T,N}) where {T,N}$/;"	f
foo9677	test/core.jl	/^foo9677(x::Array) = invoke(foo9677, Tuple{AbstractArray}, x)$/;"	f
foo::CassetteLikeWrapper	test/core.jl	/^(foo::CassetteLikeWrapper)(args...) = foo.f(args...)$/;"	f
foo::CassetteLikeWrapper	test/core.jl	/^(foo::CassetteLikeWrapper)(x) = invoke(foo, Tuple{Vararg{Any}}, x)$/;"	f
fooDFW	test/compiler/inference.jl	/^fooDFW(p) = string(p.parameters[1])$/;"	f
fooDFW	test/compiler/inference.jl	/^fooDFW(p::Type{FooBarDFW}) = string(p.parameters[1])$/;"	f
fooN	test/core.jl	/^    fooN(A::Array{T,N}, x::Vararg{Any,N}) where {T,N} = -1$/;"	f
fooTuple	test/compiler/inference.jl	/^struct fooTuple{s}; end$/;"	f
foo_22792	test/core.jl	/^foo_22792(::Type{<:Union{Int8,Int,UInt}}) = 1;$/;"	f
foo_22792	test/core.jl	/^foo_22792(::Union) = 2;$/;"	f
foo_9965	test/errorshow.jl	/^foo_9965(x::Float64; w=false) = x$/;"	f
foo_9965	test/errorshow.jl	/^foo_9965(x::Int) = 2x$/;"	f
foo_ams	test/ccall.jl	/^    foo_ams(a1, a2, a3, a4) = VecReg(ntuple(i -> VecElement(a1[i].value + a2[i].value * (a3[i].v/;"	f
foo_apply_apply_type_svec	test/compiler/inline.jl	/^function foo_apply_apply_type_svec()$/;"	f
foo_data_ptr	base/docs/basedocs.jl	/^const foo_data_ptr = Ref{Ptr{Cvoid}}(0)$/;"	v
foo_error	test/error.jl	/^    function foo_error(c, n)$/;"	f
foo_inl	test/compiler/inline.jl	/^@inline function foo_inl(x)$/;"	f
foo_inlining_apply	test/compiler/inference.jl	/^foo_inlining_apply(args...) = ccall(:jl_, Nothing, (Any,), args[1])$/;"	f
foo_keymap	stdlib/REPL/test/lineedit.jl	/^const foo_keymap = Dict($/;"	v
foo_kwargs	test/error.jl	/^    foo_kwargs(x; y=5) = x + y$/;"	f
foo_out_arg	test/clangsa/MissingRoots.c	/^void foo_out_arg()$/;"	f	typeref:typename:void
foo_squares	test/arrayops.jl	/^foo_squares = SquaresVector(5)$/;"	v
foo_tail_const_prop	test/compiler/inference.jl	/^function foo_tail_const_prop()$/;"	f
foob	test/core.jl	/^    foob(x::AbstractArray) = 0$/;"	f
foob	test/core.jl	/^    foob(x::AbstractVector{T}) where {T} = 1$/;"	f
foobar	stdlib/REPL/test/replcompletions.jl	/^        macro foobar()$/;"	f
foobar	stdlib/Unicode/test/runtests.jl	/^    foobar(ch) = Char(0xd800)$/;"	f
foobar	test/core.jl	/^    foobar() = push!(rets, 3)$/;"	f
foobaz	stdlib/Unicode/test/runtests.jl	/^    foobaz(ch) = reinterpret(Char, typemax(UInt32))$/;"	f
foofunction	test/core.jl	/^        foofunction(x::Type{T}) where {T<:Number} = x$/;"	f
fookw	test/reflection.jl	/^fookw(x; direction=:up) = direction$/;"	f
fookw	test/reflection.jl	/^fookw(y::Int) = 2$/;"	f
foomany	test/reflection.jl	/^    @eval foomany(x::$T1, y::$T2, z::$T3) = y$/;"	f
foomap	stdlib/Unicode/test/runtests.jl	/^    foomap(ch) = (ch > Char(65))$/;"	f
fooo	test/core.jl	/^function fooo()$/;"	f
fooo_2	test/core.jl	/^function fooo_2()$/;"	f
fooo_3	test/core.jl	/^function fooo_3()$/;"	f
foor	test/core.jl	/^    foor(x::Union) = 1$/;"	f
footnote	doc/NEWS-update.jl	/^footnote(n) = "[#$n]: https:\/\/github.com\/JuliaLang\/julia\/issues\/$n"$/;"	f
footnote	stdlib/Markdown/src/Common/block.jl	/^function footnote(stream::IO, block::MD)$/;"	f
footnote_link	stdlib/Markdown/src/Common/inline.jl	/^function footnote_link(stream::IO, md::MD)$/;"	f
foots	doc/NEWS-update.jl	/^foots = join(map(footnote, sort!(unique(N))), "\\n")$/;"	v
for	base/arrayshow.jl	/^    for (k, j) = enumerate(cols)$/;"	f
for	base/env.jl	/^    for (k,v) = ENV$/;"	f
for	stdlib/InteractiveUtils/src/macros.jl	/^            for (head, f) in (:ref => Base.getindex, :hcat => Base.hcat, :(.) => Base.getpropert/;"	f
for	stdlib/LinearAlgebra/src/transpose.jl	/^        for (i,j) = zip(RB, RA)$/;"	f
for	stdlib/REPL/src/docview.jl	/^    for (i, char) = enumerate(match)$/;"	f
for	stdlib/Test/src/Test.jl	/^        for (xa, xb) = zip(va, vb)$/;"	f
for	test/bitarray.jl	/^        for (x1,t1) = [(f1, Float64),$/;"	f
for	test/sets.jl	/^    for (s, t) = ((s1, t1), (s2, t2))$/;"	f
for	test/show.jl	/^    for (p, s) in (Pair(1.0,2.0)                          => "1.0 => 2.0",$/;"	f
for-each-isdefined	src/julia-syntax.scm	/^(define (for-each-isdefined f e)$/;"	f
for-generator	src/julia-parser.scm	/^(define for-generator #f)$/;"	f
for_each_uniontype_small	src/cgutils.cpp	/^static bool for_each_uniontype_small($/;"	f	typeref:typename:bool	file:
forall_exists_equal	src/subtype.c	/^static int forall_exists_equal(jl_value_t *x, jl_value_t *y, jl_stenv_t *e)$/;"	f	typeref:typename:int	file:
forall_exists_subtype	src/subtype.c	/^static int forall_exists_subtype(jl_value_t *x, jl_value_t *y, jl_stenv_t *e, int param)$/;"	f	typeref:typename:int	file:
forceDwarf	src/signals-mach.c	/^volatile static int forceDwarf = -2;$/;"	v	typeref:typename:volatile int	file:
forceRPath	deps/srccache/patchelf-0.9/src/patchelf.cc	/^static bool forceRPath = false;$/;"	v	typeref:typename:bool	file:
foreach	base/abstractarray.jl	/^foreach(f) = (f(); nothing)$/;"	f
foreach	base/abstractarray.jl	/^foreach(f, itr) = (for x in itr; f(x); end; nothing)$/;"	f
foreach	base/abstractarray.jl	/^foreach(f, itrs...) = (for z in zip(itrs...); f(z...); end; nothing)$/;"	f
foreach_mtable_in_module	src/gf.c	/^static void foreach_mtable_in_module($/;"	f	typeref:typename:void	file:
foreachssa	base/compiler/ssair/ir.jl	/^function foreachssa(f, @nospecialize(stmt))$/;"	f
foreign_varargs	test/ccall.jl	/^@eval function foreign_varargs()$/;"	f
foreigncall_sym	src/ast.c	/^jl_sym_t *structtype_sym;   jl_sym_t *foreigncall_sym;$/;"	v	typeref:typename:jl_sym_t *
form_8x8_chunk	stdlib/LinearAlgebra/src/bitarray.jl	/^function form_8x8_chunk(Bc::Vector{UInt64}, i1::Int, i2::Int, m::Int, cgap::Int, cinc::Int, nc::/;"	f
format	doc/make.jl	/^const format = if render_pdf$/;"	v
format	stdlib/Dates/src/io.jl	/^    @eval function format(io, ::DatePart{$tok}, dt, locale)$/;"	f
format	stdlib/Dates/src/io.jl	/^    @eval function format(io, d::DatePart{$c}, dt)$/;"	f
format	stdlib/Dates/src/io.jl	/^    @eval function format(io, d::DatePart{$tok}, dt, locale)$/;"	f
format	stdlib/Dates/src/io.jl	/^@generated function format(io::IO, dt::TimeType, fmt::DateFormat{<:Any,T}) where T$/;"	f
format	stdlib/Dates/src/io.jl	/^@inline function format(io, d::AbstractDateToken, dt, locale)$/;"	f
format	stdlib/Dates/src/io.jl	/^@inline function format(io, d::DatePart{'y'}, dt)$/;"	f
format	stdlib/Dates/src/io.jl	/^@inline function format(io, d::Delim, dt, locale)$/;"	f
format	stdlib/Dates/src/io.jl	/^function format(dt::TimeType, f::AbstractString; locale::Locale=ENGLISH)$/;"	f
format	stdlib/Dates/src/io.jl	/^function format(dt::TimeType, fmt::DateFormat, bufsize=12)$/;"	f
format	stdlib/Dates/src/io.jl	/^function format(io, d::DatePart{'p'}, dt, locale)$/;"	f
format	stdlib/Dates/src/io.jl	/^function format(io, d::DatePart{'s'}, dt)$/;"	f
format	stdlib/LibGit2/src/repository.jl	/^function format(result::GitDescribeResult; options::DescribeFormatOptions=DescribeFormatOptions(/;"	f
format-file-line	src/jlfrontend.scm	/^(define (format-file-line file line exactloc)$/;"	f
format-loc	src/jlfrontend.scm	/^(define (format-loc lno)$/;"	f
format-syntax-deprecation	src/jlfrontend.scm	/^(define (format-syntax-deprecation what instead file line exactloc)$/;"	f
format_bytes	base/util.jl	/^function format_bytes(bytes)$/;"	f
format_filename	test/cmdlineargs.jl	/^function format_filename(s)$/;"	f
format_output	stdlib/LibGit2/test/libgit2.jl	/^    function format_output(output)$/;"	f
formatdoc	base/docs/Docs.jl	/^function formatdoc end$/;"	f
formatdoc	stdlib/REPL/src/docview.jl	/^@noinline formatdoc(buffer, d, part) = print(buffer, part)$/;"	f
formatdoc	stdlib/REPL/src/docview.jl	/^function formatdoc(d::DocStr)$/;"	f
forouter	test/core.jl	/^    function forouter()$/;"	f
forsym	src/flisp/flisp.h	/^    value_t definesym, defmacrosym, forsym, setqsym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
forward	src/flisp/flisp.h	/^#define forward(/;"	d
forward	src/llvm-multiversioning.cpp	/^void ConstantUses<U>::forward()$/;"	f	class:__anond5683ea40111::ConstantUses	typeref:typename:void
forwardloc	src/flisp/flisp.h	/^#define forwardloc(/;"	d
found_well_typed_getfield_call	test/compiler/inference.jl	/^found_well_typed_getfield_call = false$/;"	v
foundfunc	test/meta.jl	/^function foundfunc(bt, funcname)$/;"	f
foundslot	test/compiler/inference.jl	/^foundslot = false$/;"	v
fp_select	src/runtime_intrinsics.c	/^#define fp_select(/;"	d	file:
fp_select2	src/runtime_intrinsics.c	/^#define fp_select2(/;"	d	file:
fpcr_fz_mask	src/processor_arm.cpp	/^static constexpr uint32_t fpcr_fz_mask = 1 << 24;$/;"	v	typeref:typename:uint32_t	file:
fpe_handler	src/signals-unix.c	/^static void fpe_handler(int sig, siginfo_t *info, void *context)$/;"	f	typeref:typename:void	file:
fpext	src/runtime_intrinsics.c	/^#define fpext(/;"	d	file:
fpiseq	src/runtime_intrinsics.c	/^#define fpiseq(/;"	d	file:
fpiseq_n	src/runtime_intrinsics.c	/^#define fpiseq_n(/;"	d	file:
fpislt	src/runtime_intrinsics.c	/^#define fpislt(/;"	d	file:
fpislt_n	src/runtime_intrinsics.c	/^#define fpislt_n(/;"	d	file:
fprod	test/broadcast.jl	/^    fprod(aa) = aa .* aa'$/;"	f
fpsort!	base/sort.jl	/^fpsort!(v::AbstractVector, a::Sort.PartialQuickSort, o::Ordering) =$/;"	f
fpsort!	base/sort.jl	/^function fpsort!(v::AbstractVector, a::Algorithm, o::Ordering)$/;"	f
fptosi_tfunc	base/compiler/tfuncs.jl	/^fptosi_tfunc(@nospecialize(t), @nospecialize(x)) = bitcast_tfunc(t, x)$/;"	f
fptoui_tfunc	base/compiler/tfuncs.jl	/^fptoui_tfunc(@nospecialize(t), @nospecialize(x)) = bitcast_tfunc(t, x)$/;"	f
fptr	src/ccall.cpp	/^    void (*fptr)(void);     \/\/ if the argument is a constant pointer$/;"	m	struct:__anonc9e75fcc0208	typeref:typename:void (*)(void)	file:
fptr	src/flisp/flisp.h	/^    builtin_t fptr;$/;"	m	struct:__anonb455601d0808	typeref:typename:builtin_t
fptr	src/julia.h	/^    void* fptr;$/;"	m	union:__anon055fe427060a	typeref:typename:void *
fptr	src/julia_internal.h	/^    jl_typemap_intersection_visitor_fptr fptr; \/\/ fptr to call on a match$/;"	m	struct:typemap_intersection_env	typeref:typename:jl_typemap_intersection_visitor_fptr
fptr1	src/julia.h	/^    jl_fptr_args_t fptr1;$/;"	m	union:__anon055fe427060a	typeref:typename:jl_fptr_args_t
fptr3	src/julia.h	/^    jl_fptr_sparam_t fptr3;$/;"	m	union:__anon055fe427060a	typeref:typename:jl_fptr_sparam_t
fptr_record	src/staticdata.c	/^    ios_t *fptr_record;$/;"	m	struct:__anonc3a2e68f0108	typeref:typename:ios_t *	file:
fptr_to_id	src/staticdata.c	/^static htable_t fptr_to_id;$/;"	v	typeref:typename:htable_t	file:
fptrunc	src/runtime_intrinsics.c	/^#define fptrunc(/;"	d	file:
fpure	test/compiler/inference.jl	/^Base.@pure function fpure(a=rand(); b=rand())$/;"	f
frak	stdlib/REPL/src/latex_symbols.jl	/^const frak = "\\\\frak"$/;"	v
frame	src/flisp/flisp.h	/^    uint32_t frame;$/;"	m	struct:_ectx_t	typeref:typename:uint32_t
framework	contrib/mac/framework/Makefile	/^framework: toplevelinstall$/;"	t
frameworkDir	contrib/julia-config.jl	/^function frameworkDir()$/;"	f
framework_current_symlinks	contrib/mac/framework/Makefile	/^framework_current_symlinks := $(addprefix $(DESTDIR)$(prefix)\/$(framework_directory)\/,$(FRAMEW/;"	m
framework_destdirs	contrib/mac/framework/Makefile	/^framework_destdirs := $(sort $(addprefix $(DESTDIR)$(prefix)\/,$(framework_currver) $(framework_/;"	m
framework_version_symlink	contrib/mac/framework/Makefile	/^framework_version_symlink := $(DESTDIR)$(prefix)\/$(framework_versions)\/Current$/;"	m
frameworknoinstall	contrib/mac/framework/Makefile	/^frameworknoinstall: $(DESTDIR)$(prefix)\/$(framework_infoplist) | $(framework_current_symlinks) /;"	t
free	base/libc.jl	/^free(p::Cstring) = free(convert(Ptr{UInt8}, p))$/;"	f
free	base/libc.jl	/^free(p::Cwstring) = free(convert(Ptr{Cwchar_t}, p))$/;"	f
free	base/libc.jl	/^free(p::Ptr) = ccall(:free, Cvoid, (Ptr{Cvoid},), p)$/;"	f
free	stdlib/LibGit2/src/types.jl	/^function free(buf_ref::Base.Ref{Buffer})$/;"	f
free	stdlib/LibGit2/src/types.jl	/^function free(sa_ref::Base.Ref{StrArrayStruct})$/;"	f
free!	stdlib/SuiteSparse/src/cholmod.jl	/^free!(A::Dense)  = free!(pointer(A))$/;"	f
free!	stdlib/SuiteSparse/src/cholmod.jl	/^free!(A::Sparse) = free!(pointer(A))$/;"	f
free!	stdlib/SuiteSparse/src/cholmod.jl	/^free!(F::Factor) = free!(pointer(F))$/;"	f
free!	stdlib/SuiteSparse/src/cholmod.jl	/^function free!(p::Ptr{C_Dense{Tv}}) where {Tv<:VTypes}$/;"	f
free!	stdlib/SuiteSparse/src/cholmod.jl	/^function free!(ptr::Ptr{C_Factor{Tv}}) where Tv<:VTypes$/;"	f
free!	stdlib/SuiteSparse/src/cholmod.jl	/^function free!(ptr::Ptr{C_Sparse{Tv}}) where Tv<:VTypes$/;"	f
free-vars	src/julia-syntax.scm	/^(define (free-vars e)$/;"	f
free-vars-	src/julia-syntax.scm	/^(define (free-vars- e tab)$/;"	f
free_bigval	test/gcext/gcext.c	/^void free_bigval(void *p)$/;"	f	typeref:typename:void
free_htable	src/flisp/table.c	/^void free_htable(fl_context_t *fl_ctx, value_t self)$/;"	f	typeref:typename:void
free_iostream	src/flisp/iostream.c	/^void free_iostream(fl_context_t *fl_ctx, value_t self)$/;"	f	typeref:typename:void
free_jit_stack	base/pcre.jl	/^free_jit_stack(stack) =$/;"	f
free_match_context	base/pcre.jl	/^free_match_context(context) =$/;"	f
free_match_data	base/pcre.jl	/^free_match_data(match_data) =$/;"	f
free_memory	base/sysinfo.jl	/^free_memory() = ccall(:uv_get_free_memory, UInt64, ())$/;"	f
free_re	base/pcre.jl	/^free_re(re) =$/;"	f
free_readstate	src/flisp/flisp.c	/^static void free_readstate(fl_readstate_t *rs)$/;"	f	typeref:typename:void	file:
free_stack	src/gc-stacks.c	/^static void free_stack(void *stkbuf, size_t bufsz)$/;"	f	typeref:typename:void	file:
free_stacks	src/julia_threads.h	/^    arraylist_t free_stacks[JL_N_STACK_POOLS];$/;"	m	struct:__anonf8aecdb10608	typeref:typename:arraylist_t[]
free_treap	test/gcext/gcext.c	/^void free_treap(treap_t *t)$/;"	f	typeref:typename:void
freecall	src/gc.h	/^    uint64_t    freecall;$/;"	m	struct:__anoncf30557c0308	typeref:typename:uint64_t
freecall	src/julia_threads.h	/^    uint64_t    freecall;$/;"	m	struct:__anonf8aecdb10508	typeref:typename:uint64_t
freed	src/gc.h	/^    int64_t     freed;$/;"	m	struct:__anoncf30557c0308	typeref:typename:int64_t
freed	src/julia_threads.h	/^    int64_t     freed;$/;"	m	struct:__anonf8aecdb10508	typeref:typename:int64_t
freed_pages	src/gc-debug.c	/^static int64_t freed_pages = 0;$/;"	v	typeref:typename:int64_t	file:
freelist	src/julia_threads.h	/^    jl_taggedvalue_t *freelist;   \/\/ root of list of free objects$/;"	m	struct:__anonf8aecdb10408	typeref:typename:jl_taggedvalue_t *
freelist_map	src/gc-debug.c	/^static uint8_t freelist_map[GC_PAGE_SZ \/ sizeof(void*) \/ 8];$/;"	v	typeref:typename:uint8_t[]	file:
freelist_zerod	src/gc-debug.c	/^static int freelist_zerod;$/;"	v	typeref:typename:int	file:
freemap	src/gc.h	/^    uint32_t freemap[REGION0_PG_COUNT \/ 32];$/;"	m	struct:__anoncf30557c1208	typeref:typename:uint32_t[]
freemap0	src/gc.h	/^    uint32_t freemap0[REGION1_PG_COUNT \/ 32];$/;"	m	struct:__anoncf30557c1308	typeref:typename:uint32_t[]
freemap1	src/gc.h	/^    uint32_t freemap1[(REGION2_PG_COUNT + 31) \/ 32];$/;"	m	struct:__anoncf30557c1408	typeref:typename:uint32_t[]
frem	src/runtime_intrinsics.c	/^#define frem(/;"	d	file:
fret	test/syntax.jl	/^fret() = uncalled(return true)$/;"	f
frexp	base/math.jl	/^function frexp(x::T) where T<:IEEEFloat$/;"	f
frexp	base/mpfr.jl	/^function frexp(x::BigFloat)$/;"	f
from	base/stacktraces.jl	/^function from(frame::StackFrame, m::Module)$/;"	f
fromC	src/julia_internal.h	/^    int fromC;$/;"	m	struct:__anon9dd660c30108	typeref:typename:int
from_fenv	base/rounding.jl	/^function from_fenv(r::Integer)$/;"	f
fromfraction	base/special/rem_pio2.jl	/^function fromfraction(f::Int128)$/;"	f
fromhighword	base/math.jl	/^@inline fromhighword(::Type{Float32}, u::UInt32) = reinterpret(Float32, u)$/;"	f
fromhighword	base/math.jl	/^@inline fromhighword(::Type{Float64}, u::UInt32) = reinterpret(Float64, UInt64(u) << 32)$/;"	f
fromspace	src/flisp/flisp.h	/^    unsigned char *fromspace;$/;"	m	struct:_fl_context_t	typeref:typename:unsigned char *
fromzone	src/support/strptime.c	/^fromzone(const unsigned char **bp, struct tm *tm, int mandatory)$/;"	f	typeref:typename:int	file:
front	base/tuple.jl	/^function front(t::Tuple)$/;"	f
frontend-depwarn	src/jlfrontend.scm	/^(define (frontend-depwarn msg file line)$/;"	f
frozen	src/julia.h	/^    uint8_t frozen; \/\/ whether this accepts adding new methods$/;"	m	struct:_jl_methtable_t	typeref:typename:uint8_t
fstore	stdlib/Distributed/test/distributed_exec.jl	/^fstore = RemoteChannel(wid2)$/;"	v
fsvecinf	test/compiler/inference.jl	/^@eval fsvecinf() = $(QuoteNode(Core.svec(Tuple{Int,Int}, Int)))[1]$/;"	f
fsym	src/flisp/flisp.h	/^    value_t tsym, Tsym, fsym, Fsym, booleansym, nullsym, evalsym, fnsym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
ft1arg	src/intrinsics.cpp	/^static FunctionType *ft1arg(Type *ret, Type *arg)$/;"	f	typeref:typename:FunctionType *	file:
ftranspose	stdlib/SparseArrays/src/sparsematrix.jl	/^function ftranspose(A::AbstractSparseMatrixCSC{Tv,Ti}, f::Function) where {Tv,Ti}$/;"	f
ftranspose!	stdlib/SparseArrays/src/sparsematrix.jl	/^function ftranspose!(X::AbstractSparseMatrixCSC{Tv,Ti}, A::AbstractSparseMatrixCSC{Tv,Ti}, f::Fu/;"	f
ftwoparams	test/subtype.jl	/^ftwoparams(::TwoParams) = 1$/;"	f
ftwoparams	test/subtype.jl	/^ftwoparams(::TwoParams{<:Real,<:Real}) = 3$/;"	f
ftwoparams	test/subtype.jl	/^ftwoparams(::TwoParams{<:Real}) = 2$/;"	f
ftype_eval	test/core.jl	/^ftype_eval = Ref(0)$/;"	v
full!	stdlib/LinearAlgebra/src/triangular.jl	/^function full!(A::LowerTriangular)$/;"	f
full!	stdlib/LinearAlgebra/src/triangular.jl	/^function full!(A::UnitLowerTriangular)$/;"	f
full!	stdlib/LinearAlgebra/src/triangular.jl	/^function full!(A::UnitUpperTriangular)$/;"	f
full!	stdlib/LinearAlgebra/src/triangular.jl	/^function full!(A::UpperTriangular)$/;"	f
full-source-dist	Makefile	/^full-source-dist: light-source-dist.tmp$/;"	t
full_sweep	src/gc.h	/^    int         full_sweep;$/;"	m	struct:__anoncf30557c0308	typeref:typename:int
full_va_len	base/promotion.jl	/^function full_va_len(p)$/;"	f
full_warning_showed	base/loading.jl	/^const full_warning_showed = Ref(false)$/;"	v
fullname	base/reflection.jl	/^function fullname(m::Module)$/;"	f
fullname	stdlib/LibGit2/src/reference.jl	/^function fullname(ref::GitReference)$/;"	f
func	src/ccall.cpp	/^    Func func;$/;"	m	struct:LazyModule	typeref:typename:Func	file:
func	src/gc.c	/^    jl_gc_cb_func_t func;$/;"	m	struct:jl_gc_callback_list_t	typeref:typename:jl_gc_cb_func_t	file:
func	src/julia.h	/^    } func;$/;"	m	struct:_jl_typemap_entry_t	typeref:union:_jl_typemap_entry_t::__anon055fe427130a
func-for-generator-ranges	src/julia-syntax.scm	/^(define (func-for-generator-ranges expr range-exprs flat outervars)$/;"	f
func1	stdlib/Logging/test/runtests.jl	/^@noinline func1() = backtrace()$/;"	f
func1	test/compiler/contextual.jl	/^Base.@pure func1() = 42$/;"	f
func1_6404	test/core.jl	/^function func1_6404(v1::Integer)$/;"	f
func2	test/compiler/contextual.jl	/^Base.@pure func2() = (this_is_an_exception; func1())$/;"	f
func3	test/compiler/contextual.jl	/^func3() = func2()$/;"	f
func4union	stdlib/InteractiveUtils/test/runtests.jl	/^func4union(::Union{Type4Union,Int}) = ()$/;"	f
func8283	test/core.jl	/^function func8283 end$/;"	f
funcName	src/codegen.cpp	/^    std::string funcName;$/;"	m	class:jl_codectx_t	typeref:typename:std::string	file:
func_cl_dashL	deps/srccache/patchelf-0.9/build-aux/compile	/^func_cl_dashL ()$/;"	f
func_cl_dashl	deps/srccache/patchelf-0.9/build-aux/compile	/^func_cl_dashl ()$/;"	f
func_cl_wrapper	deps/srccache/patchelf-0.9/build-aux/compile	/^func_cl_wrapper ()$/;"	f
func_file_conv	deps/srccache/patchelf-0.9/build-aux/compile	/^func_file_conv ()$/;"	f
func_for_method_checked	base/reflection.jl	/^function func_for_method_checked(m::Method, @nospecialize(types))$/;"	f
func_for_method_checked	base/reflection.jl	/^function func_for_method_checked(m::Method, @nospecialize(types), sparams::SimpleVector)$/;"	f
func_ids	src/llvm-multiversioning.cpp	/^    std::map<const Function*,uint32_t> func_ids{};$/;"	m	struct:__anond5683ea40111::CloneCtx	typeref:typename:std::map<const Function *,uint32_t>	file:
func_infos	src/llvm-multiversioning.cpp	/^    std::vector<uint32_t> func_infos{};$/;"	m	struct:__anond5683ea40111::CloneCtx	typeref:typename:std::vector<uint32_t>	file:
func_name	src/julia_internal.h	/^    char *func_name;$/;"	m	struct:__anon9dd660c30108	typeref:typename:char *
function-body-lineno	src/julia-syntax.scm	/^(define (function-body-lineno body)$/;"	f
function-def?	src/ast.scm	/^(define (function-def? e)$/;"	f
functionObject	src/julia.h	/^    const char *functionObject;         \/\/ jl_callptr_t llvm Function name$/;"	m	struct:_jl_llvm_functions_t	typeref:typename:const char *
functionObjectsDecls	src/julia.h	/^    jl_llvm_functions_t functionObjectsDecls;$/;"	m	struct:_jl_code_instance_t	typeref:typename:jl_llvm_functions_t
function_proto	src/cgutils.cpp	/^static Function *function_proto(Function *F, Module *M = nullptr)$/;"	f	typeref:typename:Function *	file:
function_sig_t	src/ccall.cpp	/^    function_sig_t(const char *fname, Type *lrt, jl_value_t *rt, bool retboxed, jl_svec_t *at, j/;"	f	class:function_sig_t	file:
function_sig_t	src/ccall.cpp	/^class function_sig_t {$/;"	c	file:
function_t	src/flisp/flisp.h	/^} function_t;$/;"	t	typeref:struct:__anonb455601d0708
functionloc	base/methodshow.jl	/^function functionloc(@nospecialize(f))$/;"	f
functionloc	base/methodshow.jl	/^function functionloc(m::Method)$/;"	f
functionloc	base/methodshow.jl	/^functionloc(@nospecialize(f), @nospecialize(types)) = functionloc(which(f,types))$/;"	f
functionloc	base/methodshow.jl	/^functionloc(m::Core.MethodInstance) = functionloc(m.def)$/;"	f
functype	src/ccall.cpp	/^    FunctionType *functype() const {$/;"	f	class:function_sig_t	typeref:typename:FunctionType *	file:
futime	base/filesystem.jl	/^function futime(f::File, atime::Float64, mtime::Float64)$/;"	f
fuzzyscore	stdlib/REPL/src/docview.jl	/^function fuzzyscore(needle, haystack)$/;"	f
fuzzysort	stdlib/REPL/src/docview.jl	/^function fuzzysort(search, candidates)$/;"	f
fvars	src/llvm-multiversioning.cpp	/^    std::vector<Function*> fvars;$/;"	m	struct:__anond5683ea40111::CloneCtx	typeref:typename:std::vector<Function * >	file:
fz	test/reduce.jl	/^fz = float(z)$/;"	v
fzero	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^function fzero(bc::Broadcast.Broadcasted)$/;"	f
fzero	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^fzero(S::StructuredMatrix) = zero(eltype(S))$/;"	f
fzero	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^fzero(x) = missing$/;"	f
fzero	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^fzero(x::Number) = x$/;"	f
fzeropreserving	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^fzeropreserving(bc) = (v = fzero(bc); !ismissing(v) && _iszero(v))$/;"	f
g	base/compiler/ssair/show.jl	/^g() = f()$/;"	f
g	stdlib/InteractiveUtils/test/runtests.jl	/^    @noinline g() = _true[] ? 0 : h()$/;"	f
g	test/ambiguous.jl	/^g(::Irrational) = 3$/;"	f
g	test/ambiguous.jl	/^g(::Signed) = 4$/;"	f
g	test/ambiguous.jl	/^g(::Union{AbstractIrrational, Int}) =  2$/;"	f
g	test/ambiguous.jl	/^g(::Union{typeof(pi), Integer}) =  1$/;"	f
g	test/arrayops.jl	/^    g(A, i) = (i == 0 ? (@inbounds return 0) : (@inbounds A[i]))$/;"	f
g	test/broadcast.jl	/^    g() = (a = 1; Broadcast.combine_eltypes(x -> x + a, (1.0,)))$/;"	f
g	test/ccall.jl	/^function g(i)$/;"	f
g	test/compiler/inference.jl	/^    g(x::Ref{T}) where {T} = T$/;"	f
g	test/core.jl	/^    function g((x,y))$/;"	f
g	test/core.jl	/^    function g()$/;"	f
g	test/core.jl	/^    function g(y::T) where T$/;"	f
g	test/core.jl	/^    g() = (global cos; cos = 2; nothing)$/;"	f
g	test/core.jl	/^    g(a::Vector{Vector{T}}) where {T} = a$/;"	f
g	test/core.jl	/^    g(a::_AA{_AA{T}}) where {T} = a$/;"	f
g	test/core.jl	/^    g(x) = x.z$/;"	f
g	test/core.jl	/^    g(x...) = 0$/;"	f
g	test/core.jl	/^    g(x::T...) where {T} = T$/;"	f
g	test/core.jl	/^    g(y) = begin z = z + y; y + x end$/;"	f
g	test/core.jl	/^@noinline function g(a)$/;"	f
g	test/core.jl	/^@noinline g() = error()$/;"	f
g	test/core.jl	/^g() = f() * 100$/;"	f
g	test/core.jl	/^g() = f(y)$/;"	f
g	test/docs.jl	/^function g end$/;"	f
g	test/docs.jl	/^function g(x) end$/;"	f
g	test/float16.jl	/^g = Float16(1.)$/;"	v
g	test/keywordargs.jl	/^    g(x; y::Int, z=3) = x + 2y + 3z$/;"	f
g	test/meta.jl	/^g(x) = f(2x)$/;"	f
g	test/misc.jl	/^    g() = Union{f(true)}$/;"	f
g	test/offsetarray.jl	/^g = OffsetArray(Vector(-2:3), (-3,))$/;"	v
g	test/precompile.jl	/^                g() = f()$/;"	f
g	test/precompile.jl	/^              g() = override(1.0)$/;"	f
g	test/reflection.jl	/^g(; b, c, a) = a + b + c$/;"	f
g	test/stacktraces.jl	/^@inline g(x) = (y = throw("a"); y) # the inliner does not insert the proper markers when inlinin/;"	f
g	test/syntax.jl	/^        function g(::Val{x->2x})$/;"	f
g	test/syntax.jl	/^      g(x) = 1$/;"	f
g	test/syntax.jl	/^    function g()$/;"	f
g	test/syntax.jl	/^    function g(::Union{map(t->Array{t,N},types27268)...} where N)$/;"	f
g	test/syntax.jl	/^    g(col::AbstractArray{<:Real}) = col$/;"	f
g	test/syntax.jl	/^    g(col::AbstractArray{T} where T<:Real) = col$/;"	f
g	test/syntax.jl	/^    g(x) = x$/;"	f
g1	test/boundscheck_exec.jl	/^@inline function g1(a)$/;"	f
g10178	test/staged.jl	/^g10178(x) = f10178(x)$/;"	f
g10373	test/core.jl	/^g10373(x) = x$/;"	f
g10878	test/compiler/inference.jl	/^function g10878(x; kw...); end$/;"	f
g10995	test/core.jl	/^g10995(x) = f10995(typeof(x))$/;"	f
g11007	test/errorshow.jl	/^    g11007(::AbstractVector) = nothing$/;"	f
g11015	test/compiler/inference.jl	/^g11015(::Type{Bool}, ::Bool) = 2.0$/;"	f
g11015	test/compiler/inference.jl	/^g11015(::Type{S}, ::S) where {S} = 1$/;"	f
g11840	test/core.jl	/^g11840(::DataType) = 1$/;"	f
g11840	test/core.jl	/^g11840(::Type) = 2$/;"	f
g11840	test/core.jl	/^g11840(sig::Type{T}) where {T<:Tuple} = 3$/;"	f
g11840b	test/core.jl	/^g11840b(::DataType) = 1$/;"	f
g11840b	test/core.jl	/^g11840b(::Type) = 2$/;"	f
g11840b	test/core.jl	/^g11840b(sig::Type{T}) where {T<:Tuple} = 3$/;"	f
g11858	test/core.jl	/^g11858(x::Float64) = x$/;"	f
g12063	test/core.jl	/^g12063() = f12063(0, 0, 0, 0, 0, 0, 0.0, spzeros(0,0), Int[])$/;"	f
g13261	test/core.jl	/^g13261() = f13261()$/;"	f
g14009	test/compiler/inference.jl	/^g14009(a) = g14009(B14009{a})$/;"	f
g15259	test/compiler/inference.jl	/^@eval g15259(x,y) = (a = $(Expr(:new, :A15259, :x, :y)); a.z)$/;"	f
g15276	test/compiler/inference.jl	/^function g15276()$/;"	f
g15714	test/reflection.jl	/^function g15714(array_var15714)$/;"	f
g15809	test/core.jl	/^    @eval g15809(x::T) where {T} = T$/;"	f
g15844	test/syntax.jl	/^g15844 = let$/;"	v
g16089	test/core.jl	/^g16089() = f16089(UInt8)$/;"	f
g16096	test/syntax.jl	/^        g16096($(esc(:x))) = 2x$/;"	f
g16096_2	test/syntax.jl	/^        g16096_2(; $(esc(:x))=2) = 2x$/;"	f
g16153	test/core.jl	/^g16153(@nospecialize(x), @nospecialize(y)) = 2$/;"	f
g16153	test/core.jl	/^g16153(@nospecialize(x), y...) = 1$/;"	f
g16165	test/compiler/inline.jl	/^g16165(x) = f16165(x)$/;"	f
g1632	test/core.jl	/^    g1632(::R, ::S) where {R,S} = 1$/;"	f
g1632	test/core.jl	/^    g1632(::T, ::T) where {T} = 2$/;"	f
g16493	test/ambiguous.jl	/^g16493(x::Complex{T}, y) where {T} = 1$/;"	f
g16493	test/ambiguous.jl	/^g16493(x::T, y::Integer) where {T<:Number} = 0$/;"	f
g17413	test/ccall.jl	/^@noinline g17413() = rand()$/;"	f
g17449	test/core.jl	/^@noinline function g17449(r)$/;"	f
g17785	test/keywordargs.jl	/^    g17785(; a=1, b=2) = (a, b)$/;"	f
g18222	test/compiler/inference.jl	/^g18222(x) = f18222(x)$/;"	f
g18396	test/keywordargs.jl	/^    g18396(;x=1,y=2) = x+y$/;"	f
g18444	test/core.jl	/^    @noinline g18444(a) = (x += 1; a[])$/;"	f
g18679	test/compiler/inference.jl	/^g18679() = g18679(any_undef_global::Union{Int, Tuple{}})$/;"	f
g18679	test/compiler/inference.jl	/^g18679(x::Tuple) = ()$/;"	f
g18948	test/compiler/inline.jl	/^g18948() = (local bar::Int32; bar=0x80000000)$/;"	f
g19333	test/core.jl	/^        g19333() = (global x19333 += 2)$/;"	f
g19348	test/compiler/inference.jl	/^function g19348(x)$/;"	f
g19957	test/compiler/inference.jl	/^g19957(x) = f19957(x...)$/;"	f
g20343	test/compiler/inference.jl	/^function g20343()$/;"	f
g20704	test/compiler/inference.jl	/^Base.@pure g20704(::Int) = 1$/;"	f
g21054	test/syntax.jl	/^g21054(>:) = >:2$/;"	f
g21065	test/compiler/inference.jl	/^g21065(x,y) = +(f21065(x,y)...)$/;"	f
g21074	test/compiler/inline.jl	/^@eval g21074() = $(s21074((1,2)))[1]$/;"	f
g21147	test/keywordargs.jl	/^    function g21147(f::Tuple{A}, k = 2) where {B,A<:Tuple{B}}$/;"	f
g21518	test/keywordargs.jl	/^    g21518() = (a+=1; f21518)$/;"	f
g21719	test/core.jl	/^g21719(f, goal; tol = 1e-6) = T21719(f, tol, goal)$/;"	f
g21771	test/compiler/inference.jl	/^g21771(T) = T$/;"	f
g22364	test/compiler/inference.jl	/^g22364(x) = f22364(x, Any[[]][1]...)$/;"	f
g22421_1	test/compiler/codegen.jl	/^function g22421_1(x, y, b)$/;"	f
g22421_2	test/compiler/codegen.jl	/^function g22421_2(x, y, b)$/;"	f
g23024	test/compiler/inference.jl	/^g23024(TT::Tuple{DataType}) = f23024(TT[1], v23024)$/;"	f
g24108	test/compiler/codegen.jl	/^g24108(x::B24108) = f24108(x.x.x)$/;"	f
g24460	test/core.jl	/^g24460() = invoke(f24460, T24460, 1, 2)$/;"	f
g24521	test/subtype.jl	/^g24521(::T, ::T) where {T} = T$/;"	f
g25579	test/compiler/inference.jl	/^function g25579(g)$/;"	f
g25835	stdlib/Test/test/runtests.jl	/^g25835(;x=1) = rand(Bool) ? 1.0 : 1$/;"	f
g25907a	test/core.jl	/^g25907a(x) = x[1]::Integer$/;"	f
g25907b	test/core.jl	/^g25907b(x) = x[1]::Complex$/;"	f
g26172	test/compiler/inference.jl	/^g26172(::Val{0}) = ()$/;"	f
g26172	test/compiler/inference.jl	/^g26172(v) = (nothing, g26172(f26172(v))...)$/;"	f
g26301	test/core.jl	/^function g26301()$/;"	f
g26339	test/compiler/inference.jl	/^g26339(T) = T === Int ? 1 : ""$/;"	f
g26453	test/subtype.jl	/^g26453(x::T,y::T) where {S,T>:S} = T$/;"	f
g265	test/worlds.jl	/^g265() = [f265(x) for x in 1:3.]$/;"	f
g26506	test/worlds.jl	/^g26506(x) = f26506(x[1])$/;"	f
g265a	test/worlds.jl	/^    g265a() = f265a(0)$/;"	f
g265c	test/worlds.jl	/^    g265c() = f265c(0)$/;"	f
g26826	test/compiler/inference.jl	/^g26826(x) = getfield26826(x, :a, :b)$/;"	f
g27079	test/boundscheck_exec.jl	/^function g27079(X)$/;"	f
g27103	test/core.jl	/^g27103() = @isdefined z27103$/;"	f
g27209	test/core.jl	/^g27209(x) = f27209(x ? nothing : 1.0)$/;"	f
g27268	test/syntax.jl	/^    function g27268()$/;"	f
g27316	test/compiler/inference.jl	/^function g27316()$/;"	f
g28070	test/compiler/inference.jl	/^g28070(f, args...) = f(args...)$/;"	f
g28079	test/compiler/inference.jl	/^@inline g28079(::Any, f, args...) = f(args...)$/;"	f
g28399	test/core.jl	/^function g28399(n)$/;"	f
g28442	test/errorshow.jl	/^    g28442(c) = c > 10000 ? (return backtrace()) : f28442(c+1)$/;"	f
g28762	test/compiler/inference.jl	/^g28762(::Type{X}) where {X} = Array{eltype(X)}(undef, 0)$/;"	f
g28955	test/compiler/inference.jl	/^function g28955(x, y)$/;"	f
g29083	test/compiler/inline.jl	/^g29083() = f29083(μ=2.0,σ=0.1)$/;"	f
g29152	test/core.jl	/^g29152() = (_true29152 ? error() : _true29152 ? 0 : false)$/;"	f
g29828	test/core.jl	/^g29828() = 2::Any[String][1]$/;"	f
g2_23206	test/core.jl	/^g2_23206(::Tuple{Type{Int}}) = 1$/;"	f
g30098	test/compiler/inference.jl	/^g30098() = (h30098(:f30098); 4)$/;"	f
g30385	test/compiler/inference.jl	/^g30385(args...) = h30385(args...)$/;"	f
g30792	test/keywordargs.jl	/^    g30792(a::C; b=R(1)) where {R <: Real, C <: Union{R, Complex{R}}} = R$/;"	f
g30926	test/syntax.jl	/^    g30926(x) = 1$/;"	f
g3182	test/compiler/inference.jl	/^function g3182(t::DataType)$/;"	f
g32074	test/keywordargs.jl	/^function g32074(i::Float32; args...)$/;"	f
g32074	test/keywordargs.jl	/^function g32074(i::Int32; args...)$/;"	f
g3855	contrib/julia.svg	/^<svg xmlns="http:\/\/www.w3.org\/2000\/svg" viewBox="0 0 153.14 98.64"><defs><style>.cls-1{fill:/;"	i
g4141	test/core.jl	/^g4141(N,T) = Hull4141{Face4141{Vertex4141{N,T}}}()$/;"	f
g4154	test/core.jl	/^g4154() = typeof(foo4154(rand(2,2,2,2,2,2,2,2,2)))$/;"	f
g4413	test/core.jl	/^g4413(::Union{A4413, B4413, C4413}) = "ABC"$/;"	f
g4413	test/core.jl	/^g4413(::Union{A4413, C4413}) = "AC"$/;"	f
g4505	test/core.jl	/^    g4505(::X) where {X} = 0$/;"	f
g4675	test/core.jl	/^g4675(x::StridedArray...) = 1$/;"	f
g4675	test/core.jl	/^g4675(x::StridedArray{T}...) where {T} = 2$/;"	f
g4731	test/core.jl	/^g4731() = f4731()$/;"	f
g5575	test/compiler/inference.jl	/^g5575() = zeros(Type[Float64][1], 1)$/;"	f
g6175	test/core.jl	/^function g6175(); print(""); (); end$/;"	f
g6175	test/core.jl	/^g6175(i, I...) = tuple(length(i), g6175(I...)...)$/;"	f
g6175	test/core.jl	/^g6175(i::Real, I...) = g6175(I...)$/;"	f
g6614	test/core.jl	/^g6614((x, y), (z,), (a, b)) = (x,y,z,a,b)$/;"	f
g6896	test/core.jl	/^g6896(x) = x::Int=x$/;"	f
g7652	test/core.jl	/^g7652() = fieldtype(DataType, :types)$/;"	f
g890	contrib/julia.svg	/^<svg xmlns="http:\/\/www.w3.org\/2000\/svg" viewBox="0 0 153.14 98.64"><defs><style>.cls-1{fill:/;"	i
g893	contrib/julia.svg	/^<svg xmlns="http:\/\/www.w3.org\/2000\/svg" viewBox="0 0 153.14 98.64"><defs><style>.cls-1{fill:/;"	i
g898	contrib/julia.svg	/^<svg xmlns="http:\/\/www.w3.org\/2000\/svg" viewBox="0 0 153.14 98.64"><defs><style>.cls-1{fill:/;"	i
g905	contrib/julia.svg	/^<svg xmlns="http:\/\/www.w3.org\/2000\/svg" viewBox="0 0 153.14 98.64"><defs><style>.cls-1{fill:/;"	i
g920	contrib/julia.svg	/^<svg xmlns="http:\/\/www.w3.org\/2000\/svg" viewBox="0 0 153.14 98.64"><defs><style>.cls-1{fill:/;"	i
g945	contrib/julia.svg	/^<svg xmlns="http:\/\/www.w3.org\/2000\/svg" viewBox="0 0 153.14 98.64"><defs><style>.cls-1{fill:/;"	i
g9535	test/core.jl	/^g9535() = (f9535(),f9535())$/;"	f
g9765	test/core.jl	/^g9765() = f9765(isa(1, 1))$/;"	f
g9770	test/compiler/inference.jl	/^function g9770(x,y)$/;"	f
g984	contrib/julia.svg	/^<svg xmlns="http:\/\/www.w3.org\/2000\/svg" viewBox="0 0 153.14 98.64"><defs><style>.cls-1{fill:/;"	i
gNInt	test/compiler/inference.jl	/^gNInt() = fNInt(x)$/;"	f
gVararg	test/core.jl	/^gVararg(a::fVararg(Int)) = length(a)$/;"	f
g_dict_hash_alloc	test/compiler/codegen.jl	/^function g_dict_hash_alloc()$/;"	f
g_gen265	test/worlds.jl	/^@generated g_gen265(x) = f_gen265(x)$/;"	f
g_gen265b	test/worlds.jl	/^@generated g_gen265b(x) = f_gen265(x)$/;"	f
g_inlined	test/meta.jl	/^@inline g_inlined() = f()$/;"	f
g_inlined	test/meta.jl	/^g_inlined(x) = f_inlined(2x)$/;"	f
g_line	test/show.jl	/^@inline g_line() = leaffunc()$/;"	f
g_noinlined	test/meta.jl	/^@noinline g_noinlined() = f()$/;"	f
g_test_constant	test/compiler/inference.jl	/^g_test_constant() = (f_constant(3) == 3 && f_constant(4) == 4 ? true : "BAD")$/;"	f
garbage_finalizer	test/channels.jl	/^    @noinline garbage_finalizer(f) = (finalizer(f, "gar" * "bage"); nothing)$/;"	f
gbmv	stdlib/LinearAlgebra/src/blas.jl	/^        function gbmv(trans::AbstractChar, m::Integer, kl::Integer, ku::Integer, A::AbstractMatr/;"	f
gbmv	stdlib/LinearAlgebra/src/blas.jl	/^        function gbmv(trans::AbstractChar, m::Integer, kl::Integer, ku::Integer, alpha::($elty),/;"	f
gbmv	stdlib/LinearAlgebra/src/blas.jl	/^function gbmv end$/;"	f
gbmv!	stdlib/LinearAlgebra/src/blas.jl	/^        function gbmv!(trans::AbstractChar, m::Integer, kl::Integer, ku::Integer,$/;"	f
gbmv!	stdlib/LinearAlgebra/src/blas.jl	/^function gbmv! end$/;"	f
gbtrf!	stdlib/LinearAlgebra/src/lapack.jl	/^        function gbtrf!(kl::Integer, ku::Integer, m::Integer, AB::AbstractMatrix{$elty})$/;"	f
gbtrs!	stdlib/LinearAlgebra/src/lapack.jl	/^        function gbtrs!(trans::AbstractChar, kl::Integer, ku::Integer, m::Integer,$/;"	f
gc	base/gcutils.jl	/^gc(full::Bool=true) = ccall(:jl_gc_collect, Cvoid, (Int32,), full)$/;"	f
gc	src/flisp/flisp.c	/^void gc(fl_context_t *fl_ctx, int mustgrow)$/;"	f	typeref:typename:void
gc	src/gc.h	/^            uintptr_t gc:2;$/;"	m	struct:_bigval_t::__anoncf30557c0f0a::__anoncf30557c1008	typeref:typename:uintptr_t:2
gc	src/julia.h	/^    uintptr_t gc:2;$/;"	m	struct:_jl_taggedvalue_bits	typeref:typename:uintptr_t:2
gcEnabledHere	src/clangsa/GCChecker.cpp	/^bool GCChecker::gcEnabledHere(CheckerContext &C) const {$/;"	f	class:GCChecker	typeref:typename:bool
gc_add_finalizer_	src/gc.c	/^static void gc_add_finalizer_(jl_ptls_t ptls, void *v, void *f)$/;"	f	typeref:typename:void	file:
gc_alignment	base/reflection.jl	/^gc_alignment(T::Type) = gc_alignment(Core.sizeof(T))$/;"	f
gc_alignment	base/reflection.jl	/^gc_alignment(sz::Integer) = Int(ccall(:jl_alignment, Cint, (Csize_t,), sz))$/;"	f
gc_alloc_count	base/util.jl	/^function gc_alloc_count(diff::GC_Diff)$/;"	f
gc_alloc_size	test/gcext/gcext.c	/^static size_t gc_alloc_size(jl_value_t *val)$/;"	f	typeref:typename:size_t	file:
gc_assert_datatype_fail	src/gc.c	/^JL_NORETURN NOINLINE void gc_assert_datatype_fail(jl_ptls_t ptls, jl_datatype_t *vt,$/;"	f	typeref:typename:JL_NORETURN NOINLINE void
gc_big_object_link	src/gc.h	/^STATIC_INLINE void gc_big_object_link(bigval_t *hdr, bigval_t **list) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE void
gc_big_object_unlink	src/gc.h	/^STATIC_INLINE void gc_big_object_unlink(const bigval_t *hdr) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE void
gc_bytes	base/util.jl	/^gc_bytes() = ccall(:jl_gc_total_bytes, Int64, ())$/;"	f
gc_cache	src/julia_threads.h	/^    jl_gc_mark_cache_t gc_cache;$/;"	m	struct:_jl_tls_states_t	typeref:typename:jl_gc_mark_cache_t
gc_cache_lock	src/gc.c	/^static jl_mutex_t gc_cache_lock;$/;"	v	typeref:typename:jl_mutex_t	file:
gc_cblist_notify_external_alloc	src/gc.c	/^static jl_gc_callback_list_t *gc_cblist_notify_external_alloc;$/;"	v	typeref:typename:jl_gc_callback_list_t *	file:
gc_cblist_notify_external_free	src/gc.c	/^static jl_gc_callback_list_t *gc_cblist_notify_external_free;$/;"	v	typeref:typename:jl_gc_callback_list_t *	file:
gc_cblist_post_gc	src/gc.c	/^static jl_gc_callback_list_t *gc_cblist_post_gc;$/;"	v	typeref:typename:jl_gc_callback_list_t *	file:
gc_cblist_pre_gc	src/gc.c	/^static jl_gc_callback_list_t *gc_cblist_pre_gc;$/;"	v	typeref:typename:jl_gc_callback_list_t *	file:
gc_cblist_root_scanner	src/gc.c	/^static jl_gc_callback_list_t *gc_cblist_root_scanner;$/;"	v	typeref:typename:jl_gc_callback_list_t *	file:
gc_cblist_task_scanner	src/gc.c	/^static jl_gc_callback_list_t *gc_cblist_task_scanner;$/;"	v	typeref:typename:jl_gc_callback_list_t *	file:
gc_clear_mark_page	src/gc-debug.c	/^static void gc_clear_mark_page(jl_gc_pagemeta_t *pg, int bits)$/;"	f	typeref:typename:void	file:
gc_clear_mark_pagetable	src/gc-debug.c	/^static void gc_clear_mark_pagetable(int bits)$/;"	f	typeref:typename:void	file:
gc_clear_mark_pagetable0	src/gc-debug.c	/^static void gc_clear_mark_pagetable0(pagetable0_t *pagetable0, int bits)$/;"	f	typeref:typename:void	file:
gc_clear_mark_pagetable1	src/gc-debug.c	/^static void gc_clear_mark_pagetable1(pagetable1_t *pagetable1, int bits)$/;"	f	typeref:typename:void	file:
gc_count_pool	src/gc-debug.c	/^void gc_count_pool(void)$/;"	f	typeref:typename:void
gc_count_pool_page	src/gc-debug.c	/^static void gc_count_pool_page(jl_gc_pagemeta_t *pg)$/;"	f	typeref:typename:void	file:
gc_count_pool_pagetable	src/gc-debug.c	/^static void gc_count_pool_pagetable(void)$/;"	f	typeref:typename:void	file:
gc_count_pool_pagetable0	src/gc-debug.c	/^static void gc_count_pool_pagetable0(pagetable0_t *pagetable0)$/;"	f	typeref:typename:void	file:
gc_count_pool_pagetable1	src/gc-debug.c	/^static void gc_count_pool_pagetable1(pagetable1_t *pagetable1)$/;"	f	typeref:typename:void	file:
gc_counter	test/gcext/LocalTest.jl	/^function gc_counter()$/;"	f
gc_counter_full	test/gcext/LocalTest.jl	/^function gc_counter_full()$/;"	f
gc_counter_full	test/gcext/gcext.c	/^size_t gc_counter_full, gc_counter_inc;$/;"	v	typeref:typename:size_t
gc_counter_inc	test/gcext/LocalTest.jl	/^function gc_counter_inc()$/;"	f
gc_counter_inc	test/gcext/gcext.c	/^size_t gc_counter_full, gc_counter_inc;$/;"	v	typeref:typename:size_t
gc_debug_alloc_check	src/gc-debug.c	/^static int gc_debug_alloc_check(jl_alloc_num_t *num)$/;"	f	typeref:typename:int	file:
gc_debug_alloc_init	src/gc-debug.c	/^static void gc_debug_alloc_init(jl_alloc_num_t *num, const char *name)$/;"	f	typeref:typename:void	file:
gc_debug_alloc_setnext	src/gc-debug.c	/^static void gc_debug_alloc_setnext(jl_alloc_num_t *num)$/;"	f	typeref:typename:void	file:
gc_debug_check_other	src/gc-debug.c	/^int gc_debug_check_other(void)$/;"	f	typeref:typename:int
gc_debug_check_other	src/gc.h	/^static inline int gc_debug_check_other(void)$/;"	f	typeref:typename:int
gc_debug_check_pool	src/gc-debug.c	/^int gc_debug_check_pool(void)$/;"	f	typeref:typename:int
gc_debug_check_pool	src/gc.h	/^static inline int gc_debug_check_pool(void)$/;"	f	typeref:typename:int
gc_debug_critical_error	src/gc-debug.c	/^void gc_debug_critical_error(void)$/;"	f	typeref:typename:void
gc_debug_init	src/gc-debug.c	/^void gc_debug_init(void)$/;"	f	typeref:typename:void
gc_debug_print	src/gc-debug.c	/^void gc_debug_print(void)$/;"	f	typeref:typename:void
gc_debug_print	src/gc.h	/^static inline void gc_debug_print(void)$/;"	f	typeref:typename:void
gc_debug_print_status	src/gc-debug.c	/^void gc_debug_print_status(void)$/;"	f	typeref:typename:void
gc_final_count_page	src/gc-debug.c	/^void gc_final_count_page(size_t pg_cnt)$/;"	f	typeref:typename:void
gc_final_count_page	src/gc.h	/^#define gc_final_count_page(/;"	d
gc_final_pause_end	src/gc-debug.c	/^void gc_final_pause_end(int64_t t0, int64_t tend)$/;"	f	typeref:typename:void
gc_final_pause_end	src/gc.h	/^#define gc_final_pause_end(/;"	d
gc_findval	src/gc.c	/^static void *volatile gc_findval; \/\/ for usage from gdb, for finding the gc-root for a value$/;"	v	typeref:typename:void * volatile	file:
gc_flush_func	src/llvm-pass-helpers.h	/^    llvm::Function *gc_flush_func;$/;"	m	struct:JuliaPassContext	typeref:typename:llvm::Function *
gc_get_stack_addr	src/gc.c	/^STATIC_INLINE uintptr_t gc_get_stack_addr(void *_addr, uintptr_t offset,$/;"	f	typeref:typename:STATIC_INLINE uintptr_t
gc_get_stack_ptr	src/gc.c	/^NOINLINE uintptr_t gc_get_stack_ptr(void)$/;"	f	typeref:typename:NOINLINE uintptr_t
gc_grew	src/flisp/flisp.h	/^    int gc_grew;$/;"	m	struct:_fl_context_t	typeref:typename:int
gc_invoke_callbacks	src/gc.c	/^#define gc_invoke_callbacks(/;"	d	file:
gc_managed_realloc_	src/gc.c	/^static void *gc_managed_realloc_(jl_ptls_t ptls, void *d, size_t sz, size_t oldsz,$/;"	f	typeref:typename:void *	file:
gc_mark_binding_t	src/gc.h	/^} gc_mark_binding_t;$/;"	t	typeref:struct:__anoncf30557c0c08
gc_mark_excstack_t	src/gc.h	/^} gc_mark_excstack_t;$/;"	t	typeref:struct:__anoncf30557c0b08
gc_mark_finlist_t	src/gc.h	/^} gc_mark_finlist_t;$/;"	t	typeref:struct:__anoncf30557c0d08
gc_mark_jmp	src/gc.c	/^#  define gc_mark_jmp(/;"	d	file:
gc_mark_jmp	src/gc.c	/^#define gc_mark_jmp(/;"	d	file:
gc_mark_label_addrs	src/gc.c	/^void *gc_mark_label_addrs[_GC_MARK_L_MAX];$/;"	v	typeref:typename:void * []
gc_mark_laddr	src/gc.c	/^#  define gc_mark_laddr(/;"	d	file:
gc_mark_laddr	src/gc.c	/^#define gc_mark_laddr(/;"	d	file:
gc_mark_loop	src/gc.c	/^JL_EXTENSION NOINLINE void gc_mark_loop(jl_ptls_t ptls, jl_gc_mark_sp_t sp)$/;"	f	typeref:typename:JL_EXTENSION NOINLINE void
gc_mark_loop_unwind	src/gc-debug.c	/^NOINLINE void gc_mark_loop_unwind(jl_ptls_t ptls, jl_gc_mark_sp_t sp, int pc_offset)$/;"	f	typeref:typename:NOINLINE void
gc_mark_marked_obj_t	src/gc.h	/^} gc_mark_marked_obj_t;$/;"	t	typeref:struct:__anoncf30557c0508
gc_mark_obj16_t	src/gc.h	/^} gc_mark_obj16_t;$/;"	t	typeref:struct:__anoncf30557c0808
gc_mark_obj32_t	src/gc.h	/^} gc_mark_obj32_t;$/;"	t	typeref:struct:__anoncf30557c0908
gc_mark_obj8_t	src/gc.h	/^} gc_mark_obj8_t;$/;"	t	typeref:struct:__anoncf30557c0708
gc_mark_objarray_t	src/gc.h	/^} gc_mark_objarray_t;$/;"	t	typeref:struct:__anoncf30557c0608
gc_mark_push_remset	src/gc.c	/^STATIC_INLINE void gc_mark_push_remset(jl_ptls_t ptls, jl_value_t *obj, uintptr_t nptr) JL_NOTSA/;"	f	typeref:typename:STATIC_INLINE void
gc_mark_queue_all_roots	src/gc.c	/^void gc_mark_queue_all_roots(jl_ptls_t ptls, jl_gc_mark_sp_t *sp)$/;"	f	typeref:typename:void
gc_mark_queue_finlist	src/gc.c	/^void gc_mark_queue_finlist(jl_gc_mark_cache_t *gc_cache, jl_gc_mark_sp_t *sp,$/;"	f	typeref:typename:void
gc_mark_queue_obj	src/gc.c	/^STATIC_INLINE int gc_mark_queue_obj(jl_gc_mark_cache_t *gc_cache, jl_gc_mark_sp_t *sp, void *_ob/;"	f	typeref:typename:STATIC_INLINE int
gc_mark_queue_scan_obj	src/gc.c	/^STATIC_INLINE void gc_mark_queue_scan_obj(jl_gc_mark_cache_t *gc_cache, jl_gc_mark_sp_t *sp,$/;"	f	typeref:typename:STATIC_INLINE void
gc_mark_scan_obj16	src/gc.c	/^STATIC_INLINE int gc_mark_scan_obj16(jl_ptls_t ptls, jl_gc_mark_sp_t *sp, gc_mark_obj16_t *obj16/;"	f	typeref:typename:STATIC_INLINE int
gc_mark_scan_obj32	src/gc.c	/^STATIC_INLINE int gc_mark_scan_obj32(jl_ptls_t ptls, jl_gc_mark_sp_t *sp, gc_mark_obj32_t *obj32/;"	f	typeref:typename:STATIC_INLINE int
gc_mark_scan_obj8	src/gc.c	/^STATIC_INLINE int gc_mark_scan_obj8(jl_ptls_t ptls, jl_gc_mark_sp_t *sp, gc_mark_obj8_t *obj8,$/;"	f	typeref:typename:STATIC_INLINE int
gc_mark_scan_objarray	src/gc.c	/^STATIC_INLINE int gc_mark_scan_objarray(jl_ptls_t ptls, jl_gc_mark_sp_t *sp,$/;"	f	typeref:typename:STATIC_INLINE int
gc_mark_sp	src/julia_threads.h	/^    jl_gc_mark_sp_t gc_mark_sp;$/;"	m	struct:_jl_tls_states_t	typeref:typename:jl_gc_mark_sp_t
gc_mark_sp_init	src/gc.h	/^STATIC_INLINE void gc_mark_sp_init(jl_gc_mark_cache_t *gc_cache, jl_gc_mark_sp_t *sp)$/;"	f	typeref:typename:STATIC_INLINE void
gc_mark_stack_push	src/gc.c	/^STATIC_INLINE void gc_mark_stack_push(jl_gc_mark_cache_t *gc_cache, jl_gc_mark_sp_t *sp,$/;"	f	typeref:typename:STATIC_INLINE void
gc_mark_stack_resize	src/gc.c	/^static void NOINLINE gc_mark_stack_resize(jl_gc_mark_cache_t *gc_cache, jl_gc_mark_sp_t *sp) JL_/;"	f	typeref:typename:void NOINLINE	file:
gc_mark_stackframe_t	src/gc.h	/^} gc_mark_stackframe_t;$/;"	t	typeref:struct:__anoncf30557c0a08
gc_marked	src/gc.h	/^STATIC_INLINE int gc_marked(uintptr_t bits) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE int
gc_num	base/util.jl	/^gc_num() = ccall(:jl_gc_num, GC_Num, ())$/;"	f
gc_num	src/gc.c	/^jl_gc_num_t gc_num = {0,0,0,0,0,0,0,0,0,0,0,0,0,0};$/;"	v	typeref:typename:jl_gc_num_t
gc_num	src/julia_threads.h	/^    jl_thread_gc_num_t gc_num;$/;"	m	struct:_jl_tls_states_t	typeref:typename:jl_thread_gc_num_t
gc_old	src/gc.h	/^STATIC_INLINE int gc_old(uintptr_t bits) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE int
gc_page_data	src/gc.h	/^STATIC_INLINE char *gc_page_data(void *x) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE char *
gc_perm_alloc_large	src/gc.c	/^static void *gc_perm_alloc_large(size_t sz, int zero, unsigned align, unsigned offset) JL_NOTSAF/;"	f	typeref:typename:void *	file:
gc_perm_end	src/gc.c	/^static uintptr_t gc_perm_end = 0;$/;"	v	typeref:typename:uintptr_t	file:
gc_perm_lock	src/gc.c	/^jl_mutex_t gc_perm_lock = {0, 0};$/;"	v	typeref:typename:jl_mutex_t
gc_perm_pool	src/gc.c	/^static uintptr_t gc_perm_pool = 0;$/;"	v	typeref:typename:uintptr_t	file:
gc_pool_sync_nfree	src/gc.c	/^static void gc_pool_sync_nfree(jl_gc_pagemeta_t *pg, jl_taggedvalue_t *last) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void	file:
gc_pop_markdata	src/gc.h	/^#define gc_pop_markdata(/;"	d
gc_pop_markdata_	src/gc.h	/^STATIC_INLINE void *gc_pop_markdata_(jl_gc_mark_sp_t *sp, size_t size)$/;"	f	typeref:typename:STATIC_INLINE void *
gc_postmark_end	src/gc-debug.c	/^static uint64_t gc_postmark_end;$/;"	v	typeref:typename:uint64_t	file:
gc_premark_end	src/gc-debug.c	/^static uint64_t gc_premark_end;$/;"	v	typeref:typename:uint64_t	file:
gc_preserve_begin	src/llvm-alloc-opt.cpp	/^    Function *gc_preserve_begin;$/;"	m	struct:__anon0a1571000111::AllocOpt	typeref:typename:Function *	file:
gc_preserve_begin_func	src/codegen.cpp	/^static Function *gc_preserve_begin_func;$/;"	v	typeref:typename:Function *	file:
gc_preserve_begin_func	src/llvm-pass-helpers.h	/^    llvm::Function *gc_preserve_begin_func;$/;"	m	struct:JuliaPassContext	typeref:typename:llvm::Function *
gc_preserve_begin_sym	src/ast.c	/^jl_sym_t *gc_preserve_begin_sym; jl_sym_t *gc_preserve_end_sym;$/;"	v	typeref:typename:jl_sym_t *
gc_preserve_end_func	src/codegen.cpp	/^static Function *gc_preserve_end_func;$/;"	v	typeref:typename:Function *	file:
gc_preserve_end_func	src/llvm-pass-helpers.h	/^    llvm::Function *gc_preserve_end_func;$/;"	m	struct:JuliaPassContext	typeref:typename:llvm::Function *
gc_preserve_end_sym	src/ast.c	/^jl_sym_t *gc_preserve_begin_sym; jl_sym_t *gc_preserve_end_sym;$/;"	v	typeref:typename:jl_sym_t *
gc_ptr_clear_tag	src/gc.h	/^STATIC_INLINE void *gc_ptr_clear_tag(void *v, uintptr_t mask) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE void *
gc_ptr_tag	src/gc.h	/^STATIC_INLINE uintptr_t gc_ptr_tag(void *v, uintptr_t mask) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE uintptr_t
gc_queue_big_marked	src/gc.c	/^STATIC_INLINE void gc_queue_big_marked(jl_ptls_t ptls, bigval_t *hdr,$/;"	f	typeref:typename:STATIC_INLINE void
gc_queue_binding	src/gc.c	/^void gc_queue_binding(jl_binding_t *bnd)$/;"	f	typeref:typename:void
gc_read_stack	src/gc.c	/^STATIC_INLINE uintptr_t gc_read_stack(void *_addr, uintptr_t offset,$/;"	f	typeref:typename:STATIC_INLINE uintptr_t
gc_repush_markdata	src/gc.h	/^#define gc_repush_markdata(/;"	d
gc_repush_markdata_	src/gc.h	/^STATIC_INLINE void *gc_repush_markdata_(jl_gc_mark_sp_t *sp, size_t size) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE void *
gc_scrub	src/gc-debug.c	/^void gc_scrub(void)$/;"	f	typeref:typename:void
gc_scrub	src/gc.h	/^static inline void gc_scrub(void)$/;"	f	typeref:typename:void
gc_scrub_range	src/gc-debug.c	/^static void gc_scrub_range(char *low, char *high)$/;"	f	typeref:typename:void	file:
gc_scrub_record_task	src/gc-debug.c	/^void gc_scrub_record_task(jl_task_t *t)$/;"	f	typeref:typename:void
gc_scrub_record_task	src/gc.h	/^static inline void gc_scrub_record_task(jl_task_t *ta) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void
gc_scrub_task	src/gc-debug.c	/^static void gc_scrub_task(jl_task_t *ta)$/;"	f	typeref:typename:void	file:
gc_set_bits	src/gc.h	/^STATIC_INLINE uintptr_t gc_set_bits(uintptr_t tag, int bits) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE uintptr_t
gc_setmark	src/gc.c	/^STATIC_INLINE void gc_setmark(jl_ptls_t ptls, jl_taggedvalue_t *o,$/;"	f	typeref:typename:STATIC_INLINE void
gc_setmark_big	src/gc.c	/^STATIC_INLINE void gc_setmark_big(jl_ptls_t ptls, jl_taggedvalue_t *o,$/;"	f	typeref:typename:STATIC_INLINE void
gc_setmark_buf	src/gc.c	/^void gc_setmark_buf(jl_ptls_t ptls, void *o, uint8_t mark_mode, size_t minsz) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void
gc_setmark_buf_	src/gc.c	/^STATIC_INLINE void gc_setmark_buf_(jl_ptls_t ptls, void *o, uint8_t mark_mode, size_t minsz) JL_/;"	f	typeref:typename:STATIC_INLINE void
gc_setmark_pool	src/gc.c	/^STATIC_INLINE void gc_setmark_pool(jl_ptls_t ptls, jl_taggedvalue_t *o,$/;"	f	typeref:typename:STATIC_INLINE void
gc_setmark_pool_	src/gc.c	/^STATIC_INLINE void gc_setmark_pool_(jl_ptls_t ptls, jl_taggedvalue_t *o,$/;"	f	typeref:typename:STATIC_INLINE void
gc_setmark_tag	src/gc.c	/^STATIC_INLINE int gc_setmark_tag(jl_taggedvalue_t *o, uint8_t mark_mode,$/;"	f	typeref:typename:STATIC_INLINE int
gc_settime_postmark_end	src/gc-debug.c	/^void gc_settime_postmark_end(void)$/;"	f	typeref:typename:void
gc_settime_postmark_end	src/gc.h	/^#define gc_settime_postmark_end(/;"	d
gc_settime_premark_end	src/gc-debug.c	/^void gc_settime_premark_end(void)$/;"	f	typeref:typename:void
gc_settime_premark_end	src/gc.h	/^#define gc_settime_premark_end(/;"	d
gc_slot_to_arrayidx	src/gc-debug.c	/^int gc_slot_to_arrayidx(void *obj, void *_slot)$/;"	f	typeref:typename:int
gc_slot_to_fieldidx	src/gc-debug.c	/^int gc_slot_to_fieldidx(void *obj, void *slot)$/;"	f	typeref:typename:int
gc_state	src/julia.h	/^    int8_t gc_state;$/;"	m	struct:_jl_handler_t	typeref:typename:int8_t
gc_state	src/julia_threads.h	/^    volatile int8_t gc_state;$/;"	m	struct:_jl_tls_states_t	typeref:typename:volatile int8_t
gc_stats_all_pool	src/gc-debug.c	/^void gc_stats_all_pool(void)$/;"	f	typeref:typename:void
gc_stats_all_pool	src/gc.h	/^#define gc_stats_all_pool(/;"	d
gc_stats_big_obj	src/gc-debug.c	/^void gc_stats_big_obj(void)$/;"	f	typeref:typename:void
gc_stats_big_obj	src/gc.h	/^#define gc_stats_big_obj(/;"	d
gc_stats_pagetable	src/gc-debug.c	/^static void gc_stats_pagetable(unsigned *p2, unsigned *p1, unsigned *p0)$/;"	f	typeref:typename:void	file:
gc_stats_pagetable0	src/gc-debug.c	/^static void gc_stats_pagetable0(pagetable0_t *pagetable0, unsigned *p0)$/;"	f	typeref:typename:void	file:
gc_stats_pagetable1	src/gc-debug.c	/^static void gc_stats_pagetable1(pagetable1_t *pagetable1, unsigned *p1, unsigned *p0)$/;"	f	typeref:typename:void	file:
gc_sweep_always_full	src/gc.h	/^#define gc_sweep_always_full /;"	d
gc_sweep_foreign_objs	src/gc.c	/^static void gc_sweep_foreign_objs(void)$/;"	f	typeref:typename:void	file:
gc_sweep_foreign_objs_in_list	src/gc.c	/^static void gc_sweep_foreign_objs_in_list(arraylist_t *objs)$/;"	f	typeref:typename:void	file:
gc_sweep_other	src/gc.c	/^static void gc_sweep_other(jl_ptls_t ptls, int sweep_full) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void	file:
gc_sweep_perm_alloc	src/gc.c	/^static void gc_sweep_perm_alloc(void)$/;"	f	typeref:typename:void	file:
gc_sweep_pool	src/gc.c	/^static void gc_sweep_pool(int sweep_full)$/;"	f	typeref:typename:void	file:
gc_sweep_sysimg	src/staticdata.c	/^void gc_sweep_sysimg(void)$/;"	f	typeref:typename:void
gc_sync_all_caches_nolock	src/gc.c	/^static void gc_sync_all_caches_nolock(jl_ptls_t ptls)$/;"	f	typeref:typename:void	file:
gc_sync_cache	src/gc.c	/^static void gc_sync_cache(jl_ptls_t ptls) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void	file:
gc_sync_cache_nolock	src/gc.c	/^static void gc_sync_cache_nolock(jl_ptls_t ptls, jl_gc_mark_cache_t *gc_cache) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void	file:
gc_time_big_end	src/gc-debug.c	/^void gc_time_big_end(void)$/;"	f	typeref:typename:void
gc_time_big_end	src/gc.h	/^#define gc_time_big_end(/;"	d
gc_time_big_start	src/gc-debug.c	/^void gc_time_big_start(void)$/;"	f	typeref:typename:void
gc_time_big_start	src/gc.h	/^#define gc_time_big_start(/;"	d
gc_time_count_big	src/gc-debug.c	/^void gc_time_count_big(int old_bits, int bits)$/;"	f	typeref:typename:void
gc_time_count_big	src/gc.h	/^STATIC_INLINE void gc_time_count_big(int old_bits, int bits) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE void
gc_time_count_mallocd_array	src/gc-debug.c	/^void gc_time_count_mallocd_array(int bits)$/;"	f	typeref:typename:void
gc_time_count_mallocd_array	src/gc.h	/^STATIC_INLINE void gc_time_count_mallocd_array(int bits) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE void
gc_time_count_page	src/gc-debug.c	/^void gc_time_count_page(int freedall, int pg_skpd)$/;"	f	typeref:typename:void
gc_time_count_page	src/gc.h	/^STATIC_INLINE void gc_time_count_page(int freedall, int pg_skpd) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE void
gc_time_mallocd_array_end	src/gc-debug.c	/^void gc_time_mallocd_array_end(void)$/;"	f	typeref:typename:void
gc_time_mallocd_array_end	src/gc.h	/^#define gc_time_mallocd_array_end(/;"	d
gc_time_mallocd_array_start	src/gc-debug.c	/^void gc_time_mallocd_array_start(void)$/;"	f	typeref:typename:void
gc_time_mallocd_array_start	src/gc.h	/^#define gc_time_mallocd_array_start(/;"	d
gc_time_mark_pause	src/gc-debug.c	/^void gc_time_mark_pause(int64_t t0, int64_t scanned_bytes,$/;"	f	typeref:typename:void
gc_time_mark_pause	src/gc.h	/^#define gc_time_mark_pause(/;"	d
gc_time_ns	base/util.jl	/^gc_time_ns() = ccall(:jl_gc_total_hrtime, UInt64, ())$/;"	f
gc_time_pool_end	src/gc-debug.c	/^void gc_time_pool_end(int sweep_full)$/;"	f	typeref:typename:void
gc_time_pool_end	src/gc.h	/^#define gc_time_pool_end(/;"	d
gc_time_pool_start	src/gc-debug.c	/^void gc_time_pool_start(void)$/;"	f	typeref:typename:void
gc_time_pool_start	src/gc.h	/^#define gc_time_pool_start(/;"	d
gc_time_sweep_pause	src/gc-debug.c	/^void gc_time_sweep_pause(uint64_t gc_end_t, int64_t actual_allocd,$/;"	f	typeref:typename:void
gc_time_sweep_pause	src/gc.h	/^#define gc_time_sweep_pause(/;"	d
gc_time_sysimg_end	src/gc-debug.c	/^void gc_time_sysimg_end(uint64_t t0)$/;"	f	typeref:typename:void
gc_time_sysimg_end	src/gc.h	/^#define gc_time_sysimg_end(/;"	d
gc_total_bytes	base/util.jl	/^gc_total_bytes(gc_num::GC_Num) =$/;"	f
gc_try_perm_alloc_pool	src/gc.c	/^STATIC_INLINE void *gc_try_perm_alloc_pool(size_t sz, unsigned align, unsigned offset) JL_NOTSAF/;"	f	typeref:typename:STATIC_INLINE void *
gc_try_setmark	src/gc.c	/^STATIC_INLINE int gc_try_setmark(jl_value_t *obj, uintptr_t *nptr,$/;"	f	typeref:typename:STATIC_INLINE int
gc_verify	src/gc-debug.c	/^void gc_verify(jl_ptls_t ptls)$/;"	f	typeref:typename:void
gc_verify	src/gc.h	/^#define gc_verify(/;"	d
gc_verify_tags	src/gc-debug.c	/^void gc_verify_tags(void)$/;"	f	typeref:typename:void
gc_verify_tags	src/gc.h	/^static inline void gc_verify_tags(void)$/;"	f	typeref:typename:void
gc_verify_tags_page	src/gc-debug.c	/^static void gc_verify_tags_page(jl_gc_pagemeta_t *pg)$/;"	f	typeref:typename:void	file:
gc_verify_tags_pagetable	src/gc-debug.c	/^static void gc_verify_tags_pagetable(void)$/;"	f	typeref:typename:void	file:
gc_verify_tags_pagetable0	src/gc-debug.c	/^static void gc_verify_tags_pagetable0(pagetable0_t *pagetable0)$/;"	f	typeref:typename:void	file:
gc_verify_tags_pagetable1	src/gc-debug.c	/^static void gc_verify_tags_pagetable1(pagetable1_t *pagetable1)$/;"	f	typeref:typename:void	file:
gc_verify_track	src/gc-debug.c	/^static void gc_verify_track(jl_ptls_t ptls)$/;"	f	typeref:typename:void	file:
gc_verifying	src/gc-debug.c	/^int gc_verifying;$/;"	v	typeref:typename:int
gc_verifying	src/gc.h	/^#define gc_verifying /;"	d
gcc_version	contrib/normalize_triplet.py	/^        gcc_version = {$/;"	v
gcc_version	contrib/normalize_triplet.py	/^gcc_version = get_field(m, gcc_version_mapping)$/;"	v
gcc_version_mapping	contrib/normalize_triplet.py	/^gcc_version_mapping = {$/;"	v
gcd	base/intfuncs.jl	/^function gcd(a::T, b::T) where T<:Integer$/;"	f
gcd	base/intfuncs.jl	/^function gcd(a::T, b::T) where T<:Union{Int8,UInt8,Int16,UInt16,Int32,UInt32,Int64,UInt64,Int128/;"	f
gcd	base/intfuncs.jl	/^function gcd(abc::AbstractArray{<:Integer})$/;"	f
gcd	base/intfuncs.jl	/^gcd(a::Integer) = a$/;"	f
gcd	base/intfuncs.jl	/^gcd(a::Integer, b::Integer) = gcd(promote(a,b)...)$/;"	f
gcd	base/intfuncs.jl	/^gcd(a::Integer, b::Integer...) = gcd(a, gcd(b...))$/;"	f
gcdext	base/gmp.jl	/^gcdext(a::BigInt, b::BigInt) = gcdext!(BigInt(), BigInt(), BigInt(), a, b)$/;"	f
gcdext!	base/gmp.jl	/^function gcdext!(x::BigInt, y::BigInt, z::BigInt, a::BigInt, b::BigInt)$/;"	f
gcdx	base/gmp.jl	/^function gcdx(a::BigInt, b::BigInt)$/;"	f
gcdx	base/intfuncs.jl	/^function gcdx(a::T, b::T) where T<:Integer$/;"	f
gcdx	base/intfuncs.jl	/^gcdx(a::Integer, b::Integer) = gcdx(promote(a,b)...)$/;"	f
gcext	test/Makefile	/^gcext:$/;"	t
gcroot	src/ccall.cpp	/^    jl_value_t *gcroot;$/;"	m	struct:__anonc9e75fcc0208	typeref:typename:jl_value_t *	file:
gcroot_flush_func	src/codegen.cpp	/^static Function *gcroot_flush_func;$/;"	v	typeref:typename:Function *	file:
gcstack	src/julia.h	/^    jl_gcframe_t *gcstack;$/;"	m	struct:_jl_handler_t	typeref:typename:jl_gcframe_t *
gcstack	src/julia.h	/^    jl_gcframe_t *gcstack;$/;"	m	struct:_jl_task_t	typeref:typename:jl_gcframe_t *
gctags_list	src/staticdata.c	/^    arraylist_t gctags_list;$/;"	m	struct:__anonc3a2e68f0108	typeref:typename:arraylist_t	file:
gcuse	stdlib/LibGit2/test/libgit2.jl	/^    @noinline gcuse(a) = a$/;"	f
gdb debugging tips	doc/src/devdocs/debuggingtips.md	/^# gdb debugging tips$/;"	c
gebak!	stdlib/LinearAlgebra/src/lapack.jl	/^        function gebak!(job::AbstractChar, side::AbstractChar,$/;"	f
gebal!	stdlib/LinearAlgebra/src/lapack.jl	/^        function gebal!(job::AbstractChar, A::AbstractMatrix{$elty})$/;"	f
gebrd!	stdlib/LinearAlgebra/src/lapack.jl	/^        function gebrd!(A::AbstractMatrix{$elty})$/;"	f
gecon!	stdlib/LinearAlgebra/src/lapack.jl	/^        function gecon!(normtype::AbstractChar, A::AbstractMatrix{$elty}, anorm::$elty)$/;"	f
gecon!	stdlib/LinearAlgebra/src/lapack.jl	/^        function gecon!(normtype::AbstractChar, A::AbstractMatrix{$elty}, anorm::$relty)$/;"	f
gees!	stdlib/LinearAlgebra/src/lapack.jl	/^        function gees!(jobvs::AbstractChar, A::AbstractMatrix{$elty})$/;"	f
geev!	stdlib/LinearAlgebra/src/lapack.jl	/^        function geev!(jobvl::AbstractChar, jobvr::AbstractChar, A::AbstractMatrix{$elty})$/;"	f
geevx!	stdlib/LinearAlgebra/src/lapack.jl	/^        function geevx!(balanc::AbstractChar, jobvl::AbstractChar, jobvr::AbstractChar, sense::A/;"	f
gehrd!	stdlib/LinearAlgebra/src/lapack.jl	/^        function gehrd!(ilo::Integer, ihi::Integer, A::AbstractMatrix{$elty})$/;"	f
gehrd!	stdlib/LinearAlgebra/src/lapack.jl	/^gehrd!(A::AbstractMatrix) = gehrd!(1, size(A, 1), A)$/;"	f
gelqf!	stdlib/LinearAlgebra/src/lapack.jl	/^        function gelqf!(A::AbstractMatrix{$elty}, tau::AbstractVector{$elty})$/;"	f
gelqf!	stdlib/LinearAlgebra/src/lapack.jl	/^gelqf!(A::AbstractMatrix{<:BlasFloat}) = ((m,n) = size(A); gelqf!(A, similar(A, min(m, n))))$/;"	f
gels!	stdlib/LinearAlgebra/src/lapack.jl	/^        function gels!(trans::AbstractChar, A::AbstractMatrix{$elty}, B::AbstractVecOrMat{$elty}/;"	f
gelsd!	stdlib/LinearAlgebra/src/lapack.jl	/^        function gelsd!(A::AbstractMatrix{$elty}, B::AbstractVecOrMat{$elty}, rcond::Real=-one($/;"	f
gelsy!	stdlib/LinearAlgebra/src/lapack.jl	/^        function gelsy!(A::AbstractMatrix{$elty}, B::AbstractVecOrMat{$elty}, rcond::Real=eps($e/;"	f
gelsy!	stdlib/LinearAlgebra/src/lapack.jl	/^        function gelsy!(A::AbstractMatrix{$elty}, B::AbstractVecOrMat{$elty}, rcond::Real=eps($r/;"	f
gemm	stdlib/LinearAlgebra/src/blas.jl	/^        function gemm(transA::AbstractChar, transB::AbstractChar, A::AbstractMatrix{$elty}, B::A/;"	f
gemm	stdlib/LinearAlgebra/src/blas.jl	/^        function gemm(transA::AbstractChar, transB::AbstractChar, alpha::($elty), A::AbstractMat/;"	f
gemm!	stdlib/LinearAlgebra/src/blas.jl	/^        function gemm!(transA::AbstractChar, transB::AbstractChar,$/;"	f
gemm!	stdlib/LinearAlgebra/src/blas.jl	/^function gemm! end$/;"	f
gemm_wrapper	stdlib/LinearAlgebra/src/matmul.jl	/^function gemm_wrapper(tA::AbstractChar, tB::AbstractChar,$/;"	f
gemm_wrapper!	stdlib/LinearAlgebra/src/matmul.jl	/^function gemm_wrapper!(C::StridedVecOrMat{T}, tA::AbstractChar, tB::AbstractChar,$/;"	f
gemqrt!	stdlib/LinearAlgebra/src/lapack.jl	/^        function gemqrt!(side::AbstractChar, trans::AbstractChar, V::AbstractMatrix{$elty}, T::A/;"	f
gemv	stdlib/LinearAlgebra/src/blas.jl	/^        function gemv(trans::AbstractChar, A::AbstractMatrix{$elty}, X::AbstractVector{$elty})$/;"	f
gemv	stdlib/LinearAlgebra/src/blas.jl	/^        function gemv(trans::AbstractChar, alpha::($elty), A::AbstractMatrix{$elty}, X::Abstract/;"	f
gemv!	stdlib/LinearAlgebra/src/blas.jl	/^        function gemv!(trans::AbstractChar, alpha::Union{($elty), Bool},$/;"	f
gemv!	stdlib/LinearAlgebra/src/matmul.jl	/^function gemv!(y::StridedVector{T}, tA::AbstractChar, A::StridedVecOrMat{T}, x::StridedVector{T}/;"	f
gen	base/printf.jl	/^function gen(s::AbstractString)$/;"	f
gen_a	base/printf.jl	/^function gen_a(flags::String, width::Int, precision::Int, c::Char)$/;"	f
gen_bitarray	base/bitarray.jl	/^function gen_bitarray(::HasLength, itr)$/;"	f
gen_bitarray	base/bitarray.jl	/^function gen_bitarray(::HasShape, itr)$/;"	f
gen_bitarray	base/bitarray.jl	/^function gen_bitarray(::HasShape, itr::Generator)$/;"	f
gen_bitarray	base/bitarray.jl	/^gen_bitarray(::IsInfinite, itr) =  throw(ArgumentError("infinite-size iterable used in BitArray /;"	f
gen_bitarray	base/bitarray.jl	/^gen_bitarray(isz::IteratorSize, itr) = gen_bitarray_from_itr(itr)$/;"	f
gen_bitarray_from_itr	base/bitarray.jl	/^function gen_bitarray_from_itr(itr)$/;"	f
gen_c	base/printf.jl	/^function gen_c(flags::String, width::Int, precision::Int, c::Char)$/;"	f
gen_call_with_extracted_types	stdlib/InteractiveUtils/src/macros.jl	/^function gen_call_with_extracted_types(__module__, fcn, ex0)$/;"	f
gen_call_with_extracted_types_and_kwargs	stdlib/InteractiveUtils/src/macros.jl	/^function gen_call_with_extracted_types_and_kwargs(__module__, fcn, ex0)$/;"	f
gen_ccall_echo	test/ccall.jl	/^function gen_ccall_echo(x, T, U, ret=nothing)$/;"	f
gen_cfun_wrapper	src/codegen.cpp	/^static Function* gen_cfun_wrapper($/;"	f	typeref:typename:Function *	file:
gen_d	base/printf.jl	/^function gen_d(flags::String, width::Int, precision::Int, c::Char)$/;"	f
gen_e	base/printf.jl	/^function gen_e(flags::String, width::Int, precision::Int, c::Char, inside_g::Bool=false)$/;"	f
gen_ex	stdlib/LibGit2/test/libgit2.jl	/^                function gen_ex(cred)$/;"	f
gen_ex	stdlib/LibGit2/test/libgit2.jl	/^            function gen_ex(; cached_cred=nothing, allow_prompt=true)$/;"	f
gen_ex	stdlib/LibGit2/test/libgit2.jl	/^            function gen_ex(; username="git")$/;"	f
gen_ex	stdlib/LibGit2/test/libgit2.jl	/^            function gen_ex(cred; allow_prompt=true)$/;"	f
gen_ex	stdlib/LibGit2/test/libgit2.jl	/^            function gen_ex(cred; allow_prompt=true, allow_ssh_agent=false)$/;"	f
gen_ex	stdlib/LibGit2/test/libgit2.jl	/^            function gen_ex(cred; username="git")$/;"	f
gen_f	base/printf.jl	/^function gen_f(flags::String, width::Int, precision::Int, c::Char)$/;"	f
gen_f	stdlib/Serialization/test/runtests.jl	/^    function gen_f(a::T) where T$/;"	f
gen_g	base/printf.jl	/^function gen_g(flags::String, width::Int, precision::Int, c::Char)$/;"	f
gen_getindex_data	test/bitarray.jl	/^        function gen_getindex_data(c)$/;"	f
gen_getindex_data4	test/bitarray.jl	/^        function gen_getindex_data4(c)$/;"	f
gen_invoke_wrapper	src/codegen.cpp	/^static Function *gen_invoke_wrapper(jl_method_instance_t *lam, jl_value_t *jlretty, const jl_ret/;"	f	typeref:typename:Function *	file:
gen_nodes	test/compiler/inference.jl	/^function gen_nodes(qty::Integer) :: AbstractNode$/;"	f
gen_p	base/printf.jl	/^function gen_p(flags::String, width::Int, precision::Int, c::Char)$/;"	f
gen_rand	stdlib/Random/src/RNGs.jl	/^function gen_rand(r::MersenneTwister)$/;"	f
gen_s	base/printf.jl	/^function gen_s(flags::String, width::Int, precision::Int, c::Char)$/;"	f
gen_seq	src/processor.cpp	/^struct gen_seq : gen_seq<N-1, N-1, Is...>{};$/;"	s	namespace:__anon839834ed0111	file:
gen_seq	src/processor.cpp	/^struct gen_seq<0, Is...> : seq<Is...>{};$/;"	s	namespace:__anon839834ed0111	file:
gen_setindex_data	test/bitarray.jl	/^        function gen_setindex_data(c)$/;"	f
gen_setindex_data4	test/bitarray.jl	/^        function gen_setindex_data4(c)$/;"	f
generate_func_sig	src/ccall.cpp	/^std::string generate_func_sig(const char *fname)$/;"	f	class:function_sig_t	typeref:typename:std::string	file:
generate_precompile_statements	contrib/generate_precompile.jl	/^function generate_precompile_statements()$/;"	f
generatecounteddigits!	base/grisu/bignum.jl	/^function generatecounteddigits!(count,num,den,buffer,decimal_point)$/;"	f
generated	base/expr.jl	/^macro generated()$/;"	f
generated	base/expr.jl	/^macro generated(f)$/;"	f
generated-meta?	src/ast.scm	/^(define (generated-meta? e)$/;"	f
generated-part-	src/julia-syntax.scm	/^(define (generated-part- x genpart)$/;"	f
generated-version	src/julia-syntax.scm	/^(define (generated-version body)$/;"	f
generated_only-meta?	src/ast.scm	/^(define (generated_only-meta? e)$/;"	f
generated_only_sym	src/ast.c	/^jl_sym_t *generated_only_sym; jl_sym_t *isdefined_sym;$/;"	v	typeref:typename:jl_sym_t *
generated_sym	src/ast.c	/^jl_sym_t *noinline_sym; jl_sym_t *generated_sym;$/;"	v	typeref:typename:jl_sym_t *
generateinversetables	base/ryu/utils.jl	/^function generateinversetables()$/;"	f
generateshortestdigits!	base/grisu/bignum.jl	/^function generateshortestdigits!(num,den,minus,plus,is_even,buffer)$/;"	f
generator	src/julia.h	/^    jl_value_t *generator;  \/\/ executable code-generating function if available$/;"	m	struct:_jl_method_t	typeref:typename:jl_value_t *
generic	src/processor_arm.cpp	/^    generic = 0,$/;"	e	enum:ARM::CPU	file:
generic	src/processor_arm.cpp	/^constexpr auto generic = _armv7a;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
generic	src/processor_arm.cpp	/^constexpr auto generic = _armv7m;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
generic	src/processor_arm.cpp	/^constexpr auto generic = _armv7r;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
generic	src/processor_arm.cpp	/^constexpr auto generic = _armv8a;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
generic	src/processor_arm.cpp	/^constexpr auto generic = _armv8m;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
generic	src/processor_arm.cpp	/^constexpr auto generic = _armv8r;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
generic	src/processor_arm.cpp	/^constexpr auto generic = get_feature_masks();$/;"	v	namespace:ARM::Feature	typeref:typename:auto
generic	src/processor_arm.cpp	/^constexpr auto generic = get_feature_masks(v7);$/;"	v	namespace:ARM::Feature	typeref:typename:auto
generic	src/processor_arm.cpp	/^constexpr auto generic = get_feature_masks(v7, v8, hwdiv);$/;"	v	namespace:ARM::Feature	typeref:typename:auto
generic	src/processor_x86.cpp	/^    generic = 0,$/;"	e	enum:X86::CPU	file:
generic	src/processor_x86.cpp	/^constexpr auto generic = get_feature_masks(cx16);$/;"	v	namespace:X86::Feature	typeref:typename:auto
generic	test/core.jl	/^          function generic end$/;"	f
generic_bitcast	src/intrinsics.cpp	/^static jl_cgval_t generic_bitcast(jl_codectx_t &ctx, const jl_cgval_t *argv)$/;"	f	typeref:typename:jl_cgval_t	file:
generic_cast	src/intrinsics.cpp	/^static jl_cgval_t generic_cast($/;"	f	typeref:typename:jl_cgval_t	file:
generic_for_arch	src/processor_arm.cpp	/^static CPU generic_for_arch(std::pair<int,bool> arch)$/;"	f	namespace:ARM	typeref:typename:CPU	file:
generic_lufact!	stdlib/LinearAlgebra/src/lu.jl	/^function generic_lufact!(A::StridedMatrix{T}, ::Val{Pivot} = Val(true);$/;"	f
generic_map_tests	test/generic_map_tests.jl	/^function generic_map_tests(mapf, inplace_mapf=nothing)$/;"	f
generic_matmatmul	stdlib/LinearAlgebra/src/matmul.jl	/^function generic_matmatmul(tA, tB, A::AbstractVecOrMat{T}, B::AbstractMatrix{S}) where {T,S}$/;"	f
generic_matmatmul!	stdlib/LinearAlgebra/src/matmul.jl	/^function generic_matmatmul!(C::AbstractMatrix, tA, tB, A::AbstractMatrix, B::AbstractMatrix,$/;"	f
generic_matmatmul!	stdlib/LinearAlgebra/src/matmul.jl	/^generic_matmatmul!(C::AbstractVecOrMat, tA, tB, A::AbstractVecOrMat, B::AbstractVecOrMat, _add::/;"	f
generic_matvecmul!	stdlib/LinearAlgebra/src/matmul.jl	/^function generic_matvecmul!(C::AbstractVector{R}, tA, A::AbstractVecOrMat, B::AbstractVector,$/;"	f
generic_mul!	stdlib/LinearAlgebra/src/generic.jl	/^function generic_mul!(C::AbstractArray, X::AbstractArray, s::Number, _add::MulAddMul)$/;"	f
generic_mul!	stdlib/LinearAlgebra/src/generic.jl	/^function generic_mul!(C::AbstractArray, s::Number, X::AbstractArray, _add::MulAddMul)$/;"	f
generic_norm1	stdlib/LinearAlgebra/src/generic.jl	/^function generic_norm1(x)$/;"	f
generic_norm2	stdlib/LinearAlgebra/src/generic.jl	/^function generic_norm2(x)$/;"	f
generic_normInf	stdlib/LinearAlgebra/src/generic.jl	/^function generic_normInf(x)$/;"	f
generic_normMinusInf	stdlib/LinearAlgebra/src/generic.jl	/^function generic_normMinusInf(x)$/;"	f
generic_normp	stdlib/LinearAlgebra/src/generic.jl	/^function generic_normp(x, p)$/;"	f
genmsg	stdlib/Logging/test/runtests.jl	/^    function genmsg(message; level=Logging.Info, _module=Main,$/;"	f
genmsg	test/logging.jl	/^    function genmsg(level, message, _module, filepath, line; kws...)$/;"	f
genperm	base/permuteddimsarray.jl	/^@inline genperm(I, perm::AbstractVector{Int}) = genperm(I, (perm...,))$/;"	f
genperm	base/permuteddimsarray.jl	/^@inline genperm(I::NTuple{N,Any}, perm::Dims{N}) where {N} = ntuple(d -> I[perm[d]], Val(N))$/;"	f
gensy	src/ast.scm	/^(define (gensy)$/;"	f
gensym	base/expr.jl	/^gensym() = ccall(:jl_gensym, Ref{Symbol}, ())$/;"	f
gensym	base/expr.jl	/^gensym(s::String) = ccall(:jl_tagged_gensym, Ref{Symbol}, (Ptr{UInt8}, Int32), s, sizeof(s))$/;"	f
gensym	base/expr.jl	/^gensym(s::Symbol) =$/;"	f
gensym	base/expr.jl	/^gensym(ss::String...) = map(gensym, ss)$/;"	f
gensym	base/expr.jl	/^macro gensym(names...)$/;"	f
gensym	stdlib/Serialization/test/runtests.jl	/^    gensym(len) = Symbol(repeat("A", len))$/;"	f
gensym_ctr	src/flisp/flisp.h	/^    uint32_t gensym_ctr;$/;"	m	struct:_fl_context_t	typeref:typename:uint32_t
gensym_t	src/flisp/flisp.h	/^} gensym_t;$/;"	t	typeref:struct:__anonb455601d0208
gensyms	src/flisp/flisp.c	/^    htable_t gensyms;$/;"	m	struct:_fl_readstate_t	typeref:typename:htable_t	file:
gentype	stdlib/Random/src/Random.jl	/^gentype(::Type{<:FloatInterval{T}}) where {T<:AbstractFloat} = T$/;"	f
gentype	stdlib/Random/src/Random.jl	/^gentype(::Type{<:Sampler{E}}) where {E} = E$/;"	f
gentype	stdlib/Random/src/Random.jl	/^gentype(::Type{<:UniformBits{T}}) where {T} = T$/;"	f
gentype	stdlib/Random/src/Random.jl	/^gentype(::Type{X}) where {X} = eltype(X)$/;"	f
gentype	stdlib/Random/src/Random.jl	/^gentype(x) = gentype(typeof(x))$/;"	f
genvar	stdlib/Dates/src/parse.jl	/^genvar(t::DataType) = Symbol(lowercase(string(nameof(t))))$/;"	f
geqlf!	stdlib/LinearAlgebra/src/lapack.jl	/^        function geqlf!(A::AbstractMatrix{$elty}, tau::AbstractVector{$elty})$/;"	f
geqlf!	stdlib/LinearAlgebra/src/lapack.jl	/^geqlf!(A::AbstractMatrix{<:BlasFloat}) = ((m,n) = size(A); geqlf!(A, similar(A, min(m, n))))$/;"	f
geqp3!	stdlib/LinearAlgebra/src/lapack.jl	/^        function geqp3!(A::AbstractMatrix{$elty}, jpvt::AbstractVector{BlasInt}, tau::AbstractVe/;"	f
geqp3!	stdlib/LinearAlgebra/src/lapack.jl	/^function geqp3!(A::AbstractMatrix{<:BlasFloat})$/;"	f
geqp3!	stdlib/LinearAlgebra/src/lapack.jl	/^function geqp3!(A::AbstractMatrix{<:BlasFloat}, jpvt::AbstractVector{BlasInt})$/;"	f
geqrf!	stdlib/LinearAlgebra/src/lapack.jl	/^        function geqrf!(A::AbstractMatrix{$elty}, tau::AbstractVector{$elty})$/;"	f
geqrf!	stdlib/LinearAlgebra/src/lapack.jl	/^geqrf!(A::AbstractMatrix{<:BlasFloat}) = ((m,n) = size(A); geqrf!(A, similar(A, min(m, n))))$/;"	f
geqrt!	stdlib/LinearAlgebra/src/lapack.jl	/^        function geqrt!(A::AbstractMatrix{$elty}, T::AbstractMatrix{$elty})$/;"	f
geqrt!	stdlib/LinearAlgebra/src/lapack.jl	/^geqrt!(A::AbstractMatrix{<:BlasFloat}, nb::Integer) = geqrt!(A, similar(A, nb, minimum(size(A)))/;"	f
geqrt3!	stdlib/LinearAlgebra/src/lapack.jl	/^        function geqrt3!(A::AbstractMatrix{$elty}, T::AbstractMatrix{$elty})$/;"	f
geqrt3!	stdlib/LinearAlgebra/src/lapack.jl	/^geqrt3!(A::AbstractMatrix{<:BlasFloat}) = (n = size(A, 2); geqrt3!(A, similar(A, n, n)))$/;"	f
ger!	stdlib/LinearAlgebra/src/blas.jl	/^        function ger!(α::$elty, x::AbstractVector{$elty}, y::AbstractVector{$elty}, A::Abstract/;"	f
ger!	stdlib/LinearAlgebra/src/blas.jl	/^function ger! end$/;"	f
gerqf!	stdlib/LinearAlgebra/src/lapack.jl	/^        function gerqf!(A::AbstractMatrix{$elty},tau::AbstractVector{$elty})$/;"	f
gerqf!	stdlib/LinearAlgebra/src/lapack.jl	/^gerqf!(A::AbstractMatrix{<:BlasFloat}) = ((m,n) = size(A); gerqf!(A, similar(A, min(m, n))))$/;"	f
gesdd!	stdlib/LinearAlgebra/src/lapack.jl	/^        function gesdd!(job::AbstractChar, A::AbstractMatrix{$elty})$/;"	f
gesv!	stdlib/LinearAlgebra/src/lapack.jl	/^        function gesv!(A::AbstractMatrix{$elty}, B::AbstractVecOrMat{$elty})$/;"	f
gesvd!	stdlib/LinearAlgebra/src/lapack.jl	/^        function gesvd!(jobu::AbstractChar, jobvt::AbstractChar, A::AbstractMatrix{$elty})$/;"	f
gesvx!	stdlib/LinearAlgebra/src/lapack.jl	/^        function gesvx!(A::AbstractMatrix{$elty}, B::AbstractVecOrMat{$elty})$/;"	f
gesvx!	stdlib/LinearAlgebra/src/lapack.jl	/^        function gesvx!(fact::AbstractChar, trans::AbstractChar, A::AbstractMatrix{$elty},$/;"	f
get	base/abstractarray.jl	/^get(A::AbstractArray, I::AbstractRange, default) = get!(similar(A, typeof(default), index_shape(/;"	f
get	base/abstractarray.jl	/^get(A::AbstractArray, I::Dims, default) = checkbounds(Bool, A, I...) ? A[I...] : default$/;"	f
get	base/abstractarray.jl	/^get(A::AbstractArray, I::RangeVecIntList, default) =$/;"	f
get	base/abstractarray.jl	/^get(A::AbstractArray, I::Tuple{}, default) = checkbounds(Bool, A) ? A[] : default$/;"	f
get	base/abstractarray.jl	/^get(A::AbstractArray, i::Integer, default) = checkbounds(Bool, A, i) ? A[i] : default$/;"	f
get	base/abstractdict.jl	/^function get(d::IdDict{K,V}, @nospecialize(key), @nospecialize(default)) where {K, V}$/;"	f
get	base/abstractdict.jl	/^function get(default::Callable, d::IdDict{K,V}, @nospecialize(key)) where {K, V}$/;"	f
get	base/dict.jl	/^function get(default::Callable, h::Dict{K,V}, key) where V where K$/;"	f
get	base/dict.jl	/^function get(dict::ImmutableDict, key, default)$/;"	f
get	base/dict.jl	/^function get(h::Dict{K,V}, key, default) where V where K$/;"	f
get	base/env.jl	/^get(::EnvDict, k::AbstractString, def) = access_env(k->def, k)$/;"	f
get	base/env.jl	/^get(f::Callable, ::EnvDict, k::AbstractString) = access_env(k->f(), k)$/;"	f
get	base/iterators.jl	/^get(f::Base.Callable, v::Pairs, key) = get(f, v.data, key)$/;"	f
get	base/iterators.jl	/^get(v::Pairs, key, default) = get(v.data, key, default)$/;"	f
get	base/namedtuple.jl	/^get(f::Callable, nt::NamedTuple, key::Union{Integer, Symbol}) = haskey(nt, key) ? getfield(nt, k/;"	f
get	base/namedtuple.jl	/^get(nt::NamedTuple, key::Union{Integer, Symbol}, default) = haskey(nt, key) ? getfield(nt, key) /;"	f
get	base/show.jl	/^get(io::IO, key, default) = default$/;"	f
get	base/show.jl	/^get(io::IOContext, key, default) = get(io.dict, key, default)$/;"	f
get	base/stream.jl	/^get(::TTY, key::Symbol, default) = key === :color ? have_color : default$/;"	f
get	base/strings/basic.jl	/^function get(s::AbstractString, i::Integer, default)$/;"	f
get	base/weakkeydict.jl	/^get(default::Callable, wkh::WeakKeyDict{K}, key) where {K} = lock(() -> get(default, wkh.ht, key/;"	f
get	base/weakkeydict.jl	/^get(wkh::WeakKeyDict{K}, key, default) where {K} = lock(() -> get(wkh.ht, key, default), wkh)$/;"	f
get	deps/Makefile	/^get: $(addprefix get-, $(DEP_LIBS))$/;"	t
get	src/ccall.cpp	/^    Module *get()$/;"	f	struct:LazyModule	typeref:typename:Module *	file:
get	stdlib/LibGit2/src/config.jl	/^function get(::Type{<:AbstractString}, c::GitConfig, name::AbstractString)$/;"	f
get	stdlib/LibGit2/src/config.jl	/^function get(::Type{Bool}, c::GitConfig, name::AbstractString)$/;"	f
get	stdlib/LibGit2/src/config.jl	/^function get(::Type{Int32}, c::GitConfig, name::AbstractString)$/;"	f
get	stdlib/LibGit2/src/config.jl	/^function get(::Type{Int64}, c::GitConfig, name::AbstractString)$/;"	f
get	stdlib/LibGit2/src/config.jl	/^function get(c::GitConfig, name::AbstractString, default::T) where T$/;"	f
get	stdlib/LibGit2/src/remote.jl	/^function get(::Type{GitRemote}, repo::GitRepo, rmt_name::AbstractString)$/;"	f
get	stdlib/Makefile	/^getall get: $(addprefix get-, $(STDLIBS_EXT))$/;"	t
get!	base/abstractarray.jl	/^function get!(X::AbstractArray{T}, A::AbstractArray, I::RangeVecIntList, default::T) where T$/;"	f
get!	base/abstractarray.jl	/^function get!(X::AbstractArray{T}, A::AbstractArray, I::Union{AbstractRange,AbstractVector{Int}}/;"	f
get!	base/abstractarray.jl	/^function get!(X::AbstractVector{T}, A::AbstractVector, I::Union{AbstractRange,AbstractVector{Int/;"	f
get!	base/abstractdict.jl	/^function get!(default::Callable, d::IdDict{K,V}, @nospecialize(key)) where {K, V}$/;"	f
get!	base/abstractdict.jl	/^get!(d::IdDict{K,V}, @nospecialize(key), @nospecialize(default)) where {K, V} = (d[key] = get(d,/;"	f
get!	base/dict.jl	/^function get!(default::Callable, h::Dict{K,V}, key0) where V where K$/;"	f
get!	base/dict.jl	/^function get!(default::Callable, h::Dict{K,V}, key::K) where V where K$/;"	f
get!	base/dict.jl	/^get!(h::Dict{K,V}, key0, default) where {K,V} = get!(()->default, h, key0)$/;"	f
get!	base/dict.jl	/^macro get!(h, key0, default)$/;"	f
get!	base/weakkeydict.jl	/^function get!(default::Callable, wkh::WeakKeyDict{K}, key) where {K}$/;"	f
get!	base/weakkeydict.jl	/^function get!(wkh::WeakKeyDict{K}, key, default) where {K}$/;"	f
get-curl	deps/curl.mk	/^get-curl: $(SRCCACHE)\/curl-$(CURL_VER).tar.bz2$/;"	t
get-defined-vars	src/flisp/compiler.lsp	/^(define get-defined-vars$/;"	f
get-dsfmt	deps/dsfmt.mk	/^get-dsfmt: $(SRCCACHE)\/dsfmt-$(DSFMT_VER).tar.gz$/;"	t
get-gmp	deps/gmp.mk	/^get-gmp: $(SRCCACHE)\/gmp-$(GMP_VER).tar.bz2$/;"	t
get-lapack	deps/blas.mk	/^get-lapack: $(SRCCACHE)\/lapack-$(LAPACK_VER).tgz$/;"	t
get-lapack	deps/blas.mk	/^get-lapack: get-openblas$/;"	t
get-libcxx	deps/llvm.mk	/^get-libcxx: $(LLVM_SRC_DIR)\/projects\/libcxx$/;"	t
get-libcxxabi	deps/llvm.mk	/^get-libcxxabi: $(LLVM_SRC_DIR)\/projects\/libcxxabi$/;"	t
get-libgit2	deps/libgit2.mk	/^get-libgit2: $(LIBGIT2_SRC_FILE)$/;"	t
get-libgit2	deps/libgit2.mk	/^get-libgit2: $(SRCCACHE)\/cacert-$(MOZILLA_CACERT_VERSION).pem$/;"	t
get-libssh2	deps/libssh2.mk	/^get-libssh2: $(LIBSSH2_SRC_FILE)$/;"	t
get-libuv	deps/libuv.mk	/^get-libuv: $(LIBUV_SRC_FILE)$/;"	t
get-libwhich	deps/libwhich.mk	/^get-libwhich: $(LIBWHICH_SRC_FILE)$/;"	t
get-llvm	deps/llvm.mk	/^get-llvm: $(LLVM_SRC_DIR)\/source-extracted$/;"	t
get-llvm	deps/llvm.mk	/^get-llvm: $(LLVM_TAR) $(LLVM_CLANG_TAR) $(LLVM_COMPILER_RT_TAR) $(LLVM_LIBCXX_TAR) $(LLVM_LLDB_T/;"	t
get-llvm	deps/llvm.mk	/^get-llvm: get-libcxx get-libcxxabi$/;"	t
get-mbedtls	deps/mbedtls.mk	/^get-mbedtls: $(SRCCACHE)\/$(MBEDTLS_SRC).tgz$/;"	t
get-mpfr	deps/mpfr.mk	/^get-mpfr: $(SRCCACHE)\/mpfr-$(MPFR_VER).tar.bz2$/;"	t
get-objconv	deps/objconv.mk	/^get-objconv: $(SRCCACHE)\/objconv.zip$/;"	t
get-openblas	deps/blas.mk	/^get-openblas: $(OPENBLAS_SRC_FILE)$/;"	t
get-openlibm	deps/openlibm.mk	/^get-openlibm: $(OPENLIBM_SRC_FILE)$/;"	t
get-osxunwind	deps/unwind.mk	/^get-osxunwind: $(SRCCACHE)\/libosxunwind-$(OSXUNWIND_VER).tar.gz$/;"	t
get-output-string	src/flisp/aliases.scm	/^(define (get-output-string b)$/;"	f
get-patchelf	deps/patchelf.mk	/^get-patchelf: $(SRCCACHE)\/patchelf-$(PATCHELF_VER).tar.gz$/;"	t
get-pcre	deps/pcre.mk	/^get-pcre: $(SRCCACHE)\/pcre2-$(PCRE_VER).tar.bz2$/;"	t
get-suitesparse	deps/suitesparse.mk	/^get-suitesparse: $(SRCCACHE)\/SuiteSparse-$(SUITESPARSE_VER).tar.gz$/;"	t
get-suitesparse-wrapper	deps/suitesparse.mk	/^get-suitesparse-wrapper: get-suitesparse$/;"	t
get-suitesparse-wrapper	deps/suitesparse.mk	/^get-suitesparse-wrapper:$/;"	t
get-unwind	deps/unwind.mk	/^get-unwind: $(SRCCACHE)\/libunwind-$(UNWIND_VER).tar.gz$/;"	t
get-utf8proc	deps/utf8proc.mk	/^get-utf8proc: $(UTF8PROC_SRC_FILE)$/;"	t
get27770	test/core.jl	/^get27770(n::Nullable27770, v::Handle27770) = n.hasvalue ? n.value : v$/;"	f
getAddressForFunction	src/codegen.cpp	/^static uint64_t getAddressForFunction(StringRef fname)$/;"	f	typeref:typename:uint64_t	file:
getAllocated	src/clangsa/GCChecker.cpp	/^            static ValueState getAllocated() { return ValueState(Allocated, nullptr, -1); }$/;"	f	struct:__anon9c5a21540111::GCChecker::ValueState	typeref:typename:ValueState	file:
getAnalysisUsage	src/llvm-alloc-opt.cpp	/^    void getAnalysisUsage(AnalysisUsage &AU) const override$/;"	f	struct:__anon0a1571000111::AllocOpt	typeref:typename:void	file:
getAnalysisUsage	src/llvm-gc-invariant-verifier.cpp	/^    void getAnalysisUsage(AnalysisUsage &AU) const override {$/;"	f	struct:GCInvariantVerifier	typeref:typename:void	file:
getAnalysisUsage	src/llvm-late-gc-lowering.cpp	/^    void getAnalysisUsage(AnalysisUsage &AU) const override {$/;"	f	struct:LateLowerGCFrame	typeref:typename:void	file:
getAnalysisUsage	src/llvm-multiversioning.cpp	/^    void getAnalysisUsage(AnalysisUsage &AU) const override$/;"	f	struct:__anond5683ea40111::MultiVersioning	typeref:typename:void	file:
getAnalysisUsage	src/llvm-simdloop.cpp	/^    void getAnalysisUsage(AnalysisUsage &AU) const override$/;"	f	struct:llvm::LowerSIMDLoop	typeref:typename:void	file:
getDataLayout	src/jitlayers.cpp	/^const DataLayout& JuliaOJIT::getDataLayout() const$/;"	f	class:JuliaOJIT	typeref:typename:const DataLayout &
getDebuglink	src/debuginfo.cpp	/^static debug_link_info getDebuglink(const object::ObjectFile &Obj)$/;"	f	typeref:typename:debug_link_info	file:
getDefaultForHost	src/jitlayers.cpp	/^static object::Archive::Kind getDefaultForHost(Triple &triple) {$/;"	f	typeref:typename:object::Archive::Kind	file:
getDomTree	src/llvm-alloc-opt.cpp	/^    DominatorTree &getDomTree()$/;"	f	struct:__anon0a1571000111::Optimizer	typeref:typename:DominatorTree &	file:
getEntry	stdlib/REPL/src/LineEdit.jl	/^function getEntry(keymap,key)$/;"	f
getField	src/llvm-alloc-opt.cpp	/^Optimizer::AllocUseInfo::getField(uint32_t offset, uint32_t size, Type *elty)$/;"	f	class:__anon0a1571000111::Optimizer::AllocUseInfo	typeref:typename:std::pair<const uint32_t,Optimizer::Field> &
getFirstSafepoint	src/llvm-alloc-opt.cpp	/^Instruction *Optimizer::getFirstSafepoint(BasicBlock *bb)$/;"	f	class:__anon0a1571000111::Optimizer	typeref:typename:Instruction *
getForArgument	src/clangsa/GCChecker.cpp	/^            static ValueState getForArgument(const FunctionDecl *FD,$/;"	f	struct:__anon9c5a21540111::GCChecker::ValueState	typeref:typename:ValueState	file:
getFreed	src/clangsa/GCChecker.cpp	/^            static ValueState getFreed() { return ValueState(PotentiallyFreed, nullptr, -1); }$/;"	f	struct:__anon9c5a21540111::GCChecker::ValueState	typeref:typename:ValueState	file:
getFunctionAddress	src/jitlayers.cpp	/^uint64_t JuliaOJIT::getFunctionAddress(const std::string &Name)$/;"	f	class:JuliaOJIT	typeref:typename:uint64_t
getGCAllocSize	src/llvm-alloc-opt.cpp	/^ssize_t Optimizer::getGCAllocSize(Instruction *I)$/;"	f	class:__anon0a1571000111::Optimizer	typeref:typename:ssize_t
getGCFrameSlot	src/llvm-pass-helpers.cpp	/^    const IntrinsicDescription getGCFrameSlot($/;"	v	namespace:jl_intrinsics	typeref:typename:const IntrinsicDescription
getGlobalValueAddress	src/jitlayers.cpp	/^uint64_t JuliaOJIT::getGlobalValueAddress(const std::string &Name)$/;"	f	class:JuliaOJIT	typeref:typename:uint64_t
getIP	src/disasm.cpp	/^uint64_t SymbolTable::getIP() const$/;"	f	class:__anon2853c92e0211::SymbolTable	typeref:typename:uint64_t
getInterpreter	deps/srccache/patchelf-0.9/src/patchelf.cc	/^string ElfFile<ElfFileParamNames>::getInterpreter()$/;"	f	class:ElfFile	typeref:typename:string
getLLVMContext	src/llvm-pass-helpers.h	/^    llvm::LLVMContext &getLLVMContext() const$/;"	f	struct:JuliaPassContext	typeref:typename:llvm::LLVMContext &
getLd!	stdlib/SuiteSparse/src/cholmod.jl	/^function getLd!(S::SparseMatrixCSC)$/;"	f
getMangledName	src/jitlayers.cpp	/^std::string JuliaOJIT::getMangledName(const GlobalValue *GV)$/;"	f	class:JuliaOJIT	typeref:typename:std::string
getMangledName	src/jitlayers.cpp	/^std::string JuliaOJIT::getMangledName(const std::string &Name)$/;"	f	class:JuliaOJIT	typeref:typename:std::string
getMemoryObject	src/disasm.cpp	/^    const FuncMCView &getMemoryObject() const { return MemObj; }$/;"	f	class:__anon2853c92e0211::SymbolTable	typeref:typename:const FuncMCView &	file:
getModuleFlag	src/codegen.cpp	/^#define getModuleFlag(/;"	d	file:
getObjUUID	src/debuginfo.cpp	/^static bool getObjUUID(llvm::object::MachOObjectFile *obj, uint8_t uuid[16])$/;"	f	typeref:typename:bool	file:
getObjectMap	src/debuginfo.cpp	/^    std::map<size_t, ObjectInfo, revcomp>& getObjectMap()$/;"	f	class:JuliaJITEventListener	typeref:typename:std::map<size_t,ObjectInfo,revcomp> &	file:
getOrDeclare	src/llvm-pass-helpers.cpp	/^llvm::Function *JuliaPassContext::getOrDeclare($/;"	f	class:JuliaPassContext	typeref:typename:llvm::Function *
getOrNull	src/llvm-pass-helpers.cpp	/^llvm::Function *JuliaPassContext::getOrNull($/;"	f	class:JuliaPassContext	typeref:typename:llvm::Function *
getPageSize	deps/srccache/patchelf-0.9/src/patchelf.cc	/^static unsigned int getPageSize(){$/;"	f	typeref:typename:unsigned int	file:
getPass	src/disasm.cpp	/^    int getPass() const { return Pass; }$/;"	f	class:__anon2853c92e0211::SymbolTable	typeref:typename:int	file:
getPgcstack	src/llvm-final-gc-lowering.cpp	/^Instruction *FinalLowerGC::getPgcstack(Instruction *ptlsStates)$/;"	f	class:FinalLowerGC	typeref:typename:Instruction *
getPointerToGlobalIfAvailable	src/jitlayers.cpp	/^void *JuliaOJIT::getPointerToGlobalIfAvailable(StringRef S)$/;"	f	class:JuliaOJIT	typeref:typename:void *
getPointerToGlobalIfAvailable	src/jitlayers.cpp	/^void *JuliaOJIT::getPointerToGlobalIfAvailable(const GlobalValue *GV)$/;"	f	class:JuliaOJIT	typeref:typename:void *
getPtls	src/llvm-pass-helpers.cpp	/^llvm::CallInst *JuliaPassContext::getPtls(llvm::Function &F) const$/;"	f	class:JuliaPassContext	typeref:typename:llvm::CallInst *
getReduceOpcode	src/llvm-simdloop.cpp	/^static unsigned getReduceOpcode(Instruction *J, Instruction *operand)$/;"	f	namespace:llvm	typeref:typename:unsigned	file:
getRoot	src/clangsa/GCChecker.cpp	/^            static RootState getRoot(int Depth) { return RootState(Root, Depth); }$/;"	f	struct:__anon9c5a21540111::GCChecker::RootState	typeref:typename:RootState	file:
getRootArray	src/clangsa/GCChecker.cpp	/^            static RootState getRootArray(int Depth) { return RootState(RootArray, Depth); }$/;"	f	struct:__anon9c5a21540111::GCChecker::RootState	typeref:typename:RootState	file:
getRooted	src/clangsa/GCChecker.cpp	/^            static ValueState getRooted(const MemRegion *Root, int Depth) { return ValueState(Ro/;"	f	struct:__anon9c5a21540111::GCChecker::ValueState	typeref:typename:ValueState	file:
getSectionName	deps/srccache/patchelf-0.9/src/patchelf.cc	/^string ElfFile<ElfFileParamNames>::getSectionName(const Elf_Shdr & shdr)$/;"	f	class:ElfFile	typeref:typename:string
getSymbolForResult	src/clangsa/GCChecker.cpp	/^SymbolRef GCChecker::getSymbolForResult(const Expr *Result, const ValueState *OldValS, ProgramSt/;"	f	class:GCChecker	typeref:typename:SymbolRef
getSymbolNameAt	src/disasm.cpp	/^StringRef SymbolTable::getSymbolNameAt(uint64_t offset) const$/;"	f	class:__anon2853c92e0211::SymbolTable	typeref:typename:StringRef
getTargetTriple	src/jitlayers.cpp	/^const Triple& JuliaOJIT::getTargetTriple() const$/;"	f	class:JuliaOJIT	typeref:typename:const Triple &
getUntracked	src/clangsa/GCChecker.cpp	/^            static ValueState getUntracked() { return ValueState(Untracked, nullptr, -1); }$/;"	f	struct:__anon9c5a21540111::GCChecker::ValueState	typeref:typename:ValueState	file:
getValStateForRegion	src/clangsa/GCChecker.cpp	/^const GCChecker::ValueState *GCChecker::getValStateForRegion(ASTContext &AstC,$/;"	f	class:GCChecker	typeref:typename:const GCChecker::ValueState *
getValueAddrSpace	src/llvm-late-gc-lowering.cpp	/^static unsigned getValueAddrSpace(Value *V) {$/;"	f	typeref:typename:unsigned	file:
getValueAddrSpace	src/llvm-propagate-addrspaces.cpp	/^static unsigned getValueAddrSpace(Value *V) {$/;"	f	typeref:typename:unsigned	file:
getX	stdlib/REPL/src/Terminals.jl	/^getX(t::TextTerminal) = error("Unimplemented")$/;"	f
getY	stdlib/REPL/src/Terminals.jl	/^getY(t::TextTerminal) = error("Unimplemented")$/;"	f
get_A18434	stdlib/InteractiveUtils/test/runtests.jl	/^function get_A18434()$/;"	f
get_alignment	stdlib/Test/src/Test.jl	/^function get_alignment(ts::DefaultTestSet, depth::Int)$/;"	f
get_alignment	stdlib/Test/src/Test.jl	/^get_alignment(ts, depth::Int) = 0$/;"	f
get_amd_processor_name	src/processor_x86.cpp	/^static CPU get_amd_processor_name(uint32_t family, uint32_t model, const uint32_t *features)$/;"	f	namespace:X86	typeref:typename:CPU	file:
get_anon_hdl	src/cgmemmgr.cpp	/^static intptr_t get_anon_hdl(void)$/;"	f	namespace:__anon06c686bc0111	typeref:typename:intptr_t	file:
get_array_type	src/flisp/types.c	/^fltype_t *get_array_type(fl_context_t *fl_ctx, value_t eltype)$/;"	f	typeref:typename:fltype_t *
get_aux_root	test/gcext/LocalTest.jl	/^function get_aux_root(n :: Int)$/;"	f
get_aux_root	test/gcext/gcext.c	/^jl_value_t *get_aux_root(size_t n)$/;"	f	typeref:typename:jl_value_t *
get_bind_addr	stdlib/Distributed/src/cluster.jl	/^function get_bind_addr(w::Worker)$/;"	f
get_bind_addr	stdlib/Distributed/src/cluster.jl	/^get_bind_addr(pid::Integer) = get_bind_addr(worker_from_id(pid))$/;"	f
get_bind_addr	stdlib/Distributed/src/cluster.jl	/^get_bind_addr(w::LocalProcess) = LPROC.bind_addr$/;"	f
get_block_size	src/cgmemmgr.cpp	/^static size_t get_block_size(size_t size)$/;"	f	namespace:__anon06c686bc0111	typeref:typename:size_t	file:
get_box_tindex	src/cgutils.cpp	/^static unsigned get_box_tindex(jl_datatype_t *jt, jl_value_t *ut)$/;"	f	typeref:typename:unsigned	file:
get_bt_frames	test/backtrace.jl	/^function get_bt_frames(functionname, bt)$/;"	f
get_c_func	test/ccall.jl	/^get_c_func(fcn::FCN_TYPE) where {FCN_TYPE<:Function} = return make_cfunc27178(CallThisFunc27178(/;"	f
get_c_int	src/ccalltest.c	/^JL_DLLEXPORT int get_c_int(void)$/;"	f	typeref:typename:JL_DLLEXPORT int
get_c_locale	src/support/strtod.c	/^locale_t get_c_locale(void)$/;"	f	typeref:typename:locale_t
get_chunks_id	base/bitarray.jl	/^@inline get_chunks_id(i::Integer) = _div64(Int(i)-1)+1, _mod64(Int(i)-1)$/;"	f
get_clone_base	src/processor.cpp	/^static inline int get_clone_base(const char *start, const char *end)$/;"	f	namespace:__anon839834ed0111	typeref:typename:int	file:
get_cmdline_targets	src/processor.cpp	/^static inline std::vector<TargetData<n>> &get_cmdline_targets(F &&feature_cb)$/;"	f	namespace:__anon839834ed0111	typeref:typename:std::vector<TargetData<n>> &	file:
get_cmdline_targets	src/processor_arm.cpp	/^static const std::vector<TargetData<feature_sz>> &get_cmdline_targets(void)$/;"	f	namespace:ARM	typeref:typename:const std::vector<TargetData<feature_sz>> &	file:
get_cmdline_targets	src/processor_fallback.cpp	/^static const std::vector<TargetData<1>> &get_cmdline_targets(void)$/;"	f	namespace:Fallback	typeref:typename:const std::vector<TargetData<1>> &	file:
get_cmdline_targets	src/processor_x86.cpp	/^static const std::vector<TargetData<feature_sz>> &get_cmdline_targets(void)$/;"	f	namespace:X86	typeref:typename:const std::vector<TargetData<feature_sz>> &	file:
get_cpu_name	src/processor_arm.cpp	/^static CPU get_cpu_name(CPUID cpuid)$/;"	f	namespace:ARM	typeref:typename:CPU	file:
get_cpuinfo	src/processor_arm.cpp	/^static std::set<CPUID> get_cpuinfo(void)$/;"	f	namespace:ARM	typeref:typename:std::set<CPUID>	file:
get_cpuinfo_procfs	src/processor_arm.cpp	/^static inline void get_cpuinfo_procfs(std::set<CPUID> &res)$/;"	f	namespace:ARM	typeref:typename:void	file:
get_cpuinfo_sysfs	src/processor_arm.cpp	/^static inline void get_cpuinfo_sysfs(std::set<CPUID> &res)$/;"	f	namespace:ARM	typeref:typename:void	file:
get_current_task	src/jsvm-emscripten/asyncify_setup.js	/^function get_current_task() {$/;"	f
get_d	base/gmp.jl	/^get_d(a::BigInt) = ccall((:__gmpz_get_d, :libgmp), Cdouble, (mpz_t,), a)$/;"	f
get_data_pointer	stdlib/Profile/src/Profile.jl	/^get_data_pointer() = convert(Ptr{UInt}, ccall(:jl_profile_get_data, Ptr{UInt8}, ()))$/;"	f
get_delim_arg	src/flisp/iostream.c	/^static char get_delim_arg(fl_context_t *fl_ctx, value_t arg, char *fname)$/;"	f	typeref:typename:char	file:
get_elf_arch	src/processor_arm.cpp	/^static std::pair<int,char> get_elf_arch(void)$/;"	f	namespace:ARM	typeref:typename:std::pair<int,char>	file:
get_emax	base/mpfr.jl	/^get_emax() = ccall((:mpfr_get_emax, :libmpfr), Clong, ())$/;"	f
get_emax_max	base/mpfr.jl	/^get_emax_max() = ccall((:mpfr_get_emax_max, :libmpfr), Clong, ())$/;"	f
get_emax_min	base/mpfr.jl	/^get_emax_min() = ccall((:mpfr_get_emax_min, :libmpfr), Clong, ())$/;"	f
get_emin	base/mpfr.jl	/^get_emin() = ccall((:mpfr_get_emin, :libmpfr), Clong, ())$/;"	f
get_emin_max	base/mpfr.jl	/^get_emin_max() = ccall((:mpfr_get_emin_max, :libmpfr), Clong, ())$/;"	f
get_emin_min	base/mpfr.jl	/^get_emin_min() = ccall((:mpfr_get_emin_min, :libmpfr), Clong, ())$/;"	f
get_expr_list	test/syntax.jl	/^function get_expr_list(ex::Core.CodeInfo)$/;"	f
get_expr_list	test/syntax.jl	/^function get_expr_list(ex::Expr)$/;"	f
get_feature_mask_u32	src/processor.cpp	/^static inline constexpr uint32_t get_feature_mask_u32(uint32_t u32idx, Args... args)$/;"	f	namespace:__anon839834ed0111	typeref:typename:uint32_t	file:
get_feature_masks	src/processor.cpp	/^static inline constexpr FeatureList<n> get_feature_masks(Args... args)$/;"	f	namespace:__anon839834ed0111	typeref:typename:FeatureList<n>	file:
get_feature_masks	src/processor_arm.cpp	/^static inline constexpr FeatureList<feature_sz> get_feature_masks(Args... args)$/;"	f	namespace:ARM	typeref:typename:FeatureList<feature_sz>	file:
get_feature_masks	src/processor_x86.cpp	/^static inline constexpr FeatureList<feature_sz> get_feature_masks(Args... args)$/;"	f	namespace:X86	typeref:typename:FeatureList<feature_sz>	file:
get_field	contrib/normalize_triplet.py	/^def get_field(m, mapping):$/;"	f
get_fpcr_aarch64	src/processor_arm.cpp	/^static inline uint32_t get_fpcr_aarch64(void)$/;"	f	typeref:typename:uint32_t	file:
get_func_id	src/llvm-multiversioning.cpp	/^uint32_t CloneCtx::get_func_id(Function *F)$/;"	f	class:__anond5683ea40111::CloneCtx	typeref:typename:uint32_t
get_function_name_and_base	src/debuginfo.cpp	/^static void get_function_name_and_base(const object::ObjectFile *object, bool insysimage,$/;"	f	typeref:typename:void	file:
get_gc_counter	test/gcext/gcext.c	/^size_t get_gc_counter(int full)$/;"	f	typeref:typename:size_t
get_global_dir	stdlib/LibGit2/test/libgit2.jl	/^function get_global_dir()$/;"	f
get_host_cpu	src/processor_arm.cpp	/^static inline const std::pair<uint32_t,FeatureList<feature_sz>> &get_host_cpu()$/;"	f	namespace:ARM	typeref:typename:const std::pair<uint32_t,FeatureList<feature_sz>> &	file:
get_host_cpu	src/processor_x86.cpp	/^static inline const std::pair<uint32_t,FeatureList<feature_sz>> &get_host_cpu()$/;"	f	namespace:X86	typeref:typename:const std::pair<uint32_t,FeatureList<feature_sz>> &	file:
get_info	src/llvm-multiversioning.cpp	/^    UseInfo get_info() const$/;"	f	struct:__anond5683ea40111::ConstantUses	typeref:typename:UseInfo	file:
get_intel_processor_name	src/processor_x86.cpp	/^static CPU get_intel_processor_name(uint32_t family, uint32_t model, uint32_t brand_id,$/;"	f	namespace:X86	typeref:typename:CPU	file:
get_item_for_reloc	src/staticdata.c	/^static inline uintptr_t get_item_for_reloc(jl_serializer_state *s, uintptr_t base, size_t size, /;"	f	typeref:typename:uintptr_t	file:
get_lines_in_region	stdlib/REPL/src/LineEdit.jl	/^function get_lines_in_region(s)::Vector{Int}$/;"	f
get_linfo	test/compiler/inference.jl	/^function get_linfo(@nospecialize(f), @nospecialize(t))$/;"	f
get_llvm	test/compiler/codegen.jl	/^get_llvm(@nospecialize(f), @nospecialize(t), strip_ir_metadata=true, dump_module=false) =$/;"	f
get_llvm_fp_or_vectype	src/abi_aarch64.cpp	/^Type *get_llvm_fp_or_vectype(jl_datatype_t *dt) const$/;"	f	struct:ABI_AArch64Layout	typeref:typename:Type *	file:
get_llvm_fptype	src/abi_aarch64.cpp	/^Type *get_llvm_fptype(jl_datatype_t *dt) const$/;"	f	struct:ABI_AArch64Layout	typeref:typename:Type *	file:
get_llvm_fptype	src/abi_arm.cpp	/^Type *get_llvm_fptype(jl_datatype_t *dt) const$/;"	f	struct:ABI_ARMLayout	typeref:typename:Type *	file:
get_llvm_noopt	test/compiler/codegen.jl	/^get_llvm_noopt(@nospecialize(f), @nospecialize(t), strip_ir_metadata=true, dump_module=false) =$/;"	f
get_llvm_target_noext	src/processor_arm.cpp	/^get_llvm_target_noext(const TargetData<feature_sz> &data)$/;"	f	namespace:ARM	typeref:typename:std::pair<std::string,std::vector<std::string>>	file:
get_llvm_target_noext	src/processor_fallback.cpp	/^get_llvm_target_noext(const TargetData<1> &data)$/;"	f	namespace:Fallback	typeref:typename:std::pair<std::string,std::vector<std::string>>	file:
get_llvm_target_noext	src/processor_x86.cpp	/^get_llvm_target_noext(const TargetData<feature_sz> &data)$/;"	f	namespace:X86	typeref:typename:std::pair<std::string,std::vector<std::string>>	file:
get_llvm_target_str	src/processor_arm.cpp	/^get_llvm_target_str(const TargetData<feature_sz> &data)$/;"	f	namespace:ARM	typeref:typename:std::pair<std::string,std::string>	file:
get_llvm_target_str	src/processor_fallback.cpp	/^get_llvm_target_str(const TargetData<1> &data)$/;"	f	namespace:Fallback	typeref:typename:std::pair<std::string,std::string>	file:
get_llvm_target_str	src/processor_x86.cpp	/^get_llvm_target_str(const TargetData<feature_sz> &data)$/;"	f	namespace:X86	typeref:typename:std::pair<std::string,std::string>	file:
get_llvm_target_vec	src/processor_arm.cpp	/^get_llvm_target_vec(const TargetData<feature_sz> &data)$/;"	f	namespace:ARM	typeref:typename:std::pair<std::string,std::vector<std::string>>	file:
get_llvm_target_vec	src/processor_fallback.cpp	/^get_llvm_target_vec(const TargetData<1> &data)$/;"	f	namespace:Fallback	typeref:typename:std::pair<std::string,std::vector<std::string>>	file:
get_llvm_target_vec	src/processor_x86.cpp	/^get_llvm_target_vec(const TargetData<feature_sz> &data)$/;"	f	namespace:X86	typeref:typename:std::pair<std::string,std::vector<std::string>>	file:
get_llvm_vectype	src/abi_aarch64.cpp	/^Type *get_llvm_vectype(jl_datatype_t *dt) const$/;"	f	struct:ABI_AArch64Layout	typeref:typename:Type *	file:
get_local_match_context	base/pcre.jl	/^function get_local_match_context()$/;"	f
get_max_feature	src/processor_arm.cpp	/^static FeatureList<feature_sz> get_max_feature(void)$/;"	f	namespace:ARM	typeref:typename:FeatureList<feature_sz>	file:
get_method_unspec_list	src/gf.c	/^static int get_method_unspec_list(jl_typemap_entry_t *def, void *closure)$/;"	f	typeref:typename:int	file:
get_methodtable	base/reflection.jl	/^function get_methodtable(m::Method)$/;"	f
get_next	test/keywordargs.jl	/^    function get_next()$/;"	f
get_next_pid	stdlib/Distributed/src/cluster.jl	/^    function get_next_pid()$/;"	f
get_next_task	src/partr.c	/^static jl_task_t *get_next_task(jl_value_t *getsticky)$/;"	f	typeref:typename:jl_task_t *	file:
get_num_threads	stdlib/Distributed/test/distributed_exec.jl	/^const get_num_threads = function() # anonymous so it will be serialized when called$/;"	v
get_obj_sweeps	test/gcext/gcext.c	/^size_t get_obj_sweeps()$/;"	f	typeref:typename:size_t
get_order	test/compiler/inference.jl	/^function get_order(by = identity, func = isless, rev = false)$/;"	f
get_order_kwargs	test/compiler/inference.jl	/^get_order_kwargs(; by = identity, func = isless, rev = false) = get_order(by, func, rev)$/;"	f
get_perm	stdlib/SuiteSparse/src/cholmod.jl	/^function get_perm(F::Factor)$/;"	f
get_perm	stdlib/SuiteSparse/src/cholmod.jl	/^get_perm(FC::FactorComponent) = get_perm(Factor(FC))$/;"	f
get_pointer_to_constant	src/codegen.cpp	/^static GlobalVariable *get_pointer_to_constant(Constant *val, StringRef name, Module &M)$/;"	f	typeref:typename:GlobalVariable *	file:
get_process_title	base/sysinfo.jl	/^function get_process_title()$/;"	f
get_ptrdiff32	src/llvm-multiversioning.cpp	/^Constant *CloneCtx::get_ptrdiff32(Constant *ptr, Constant *base) const$/;"	f	class:__anond5683ea40111::CloneCtx	typeref:typename:Constant *
get_radix_arg	src/flisp/string.c	/^static unsigned long get_radix_arg(fl_context_t *fl_ctx, value_t arg, char *fname)$/;"	f	typeref:typename:unsigned long	file:
get_reloc_for_item	src/staticdata.c	/^static uintptr_t get_reloc_for_item(uintptr_t reloc_item, size_t reloc_offset)$/;"	f	typeref:typename:uintptr_t	file:
get_reloc_slot	src/llvm-multiversioning.cpp	/^std::pair<uint32_t,GlobalVariable*> CloneCtx::get_reloc_slot(Function *F)$/;"	f	class:__anond5683ea40111::CloneCtx	typeref:typename:std::pair<uint32_t,GlobalVariable * >
get_remote_num_threads	stdlib/Distributed/test/distributed_exec.jl	/^function get_remote_num_threads(processes_added)$/;"	f
get_root_exception	stdlib/Distributed/src/process_messages.jl	/^function get_root_exception(ex)$/;"	f
get_root_task	src/jsvm-emscripten/asyncify_setup.js	/^function get_root_task() {$/;"	f
get_self_mem_fd	src/cgmemmgr.cpp	/^static int get_self_mem_fd()$/;"	f	namespace:__anon06c686bc0111	typeref:typename:int	file:
get_spec_unspec_list	src/gf.c	/^static int get_spec_unspec_list(jl_typemap_entry_t *l, void *closure)$/;"	f	typeref:typename:int	file:
get_specsig_di	src/codegen.cpp	/^get_specsig_di(jl_value_t *rt, jl_value_t *sig, DIFile *topfile, DIBuilder &dbuilder)$/;"	f	typeref:typename:DISubroutineType *	file:
get_specsig_function	src/codegen.cpp	/^static jl_returninfo_t get_specsig_function(Module *M, const std::string &name, jl_value_t *sig,/;"	f	typeref:typename:jl_returninfo_t	file:
get_stack	src/llvm-multiversioning.cpp	/^    const SmallVector<Frame, 4> &get_stack() const$/;"	f	struct:__anond5683ea40111::ConstantUses	typeref:typename:const SmallVector<Frame,4> &	file:
get_staged	base/compiler/utilities.jl	/^function get_staged(li::MethodInstance)$/;"	f
get_start_count_args	src/flisp/iostream.c	/^static void get_start_count_args(fl_context_t *fl_ctx, value_t *args, uint32_t nargs, size_t sz,$/;"	f	typeref:typename:void	file:
get_str!	base/gmp.jl	/^get_str!(x, a, b::BigInt) = (ccall((:__gmpz_get_str,:libgmp), Ptr{Cchar}, (Ptr{Cchar}, Cint, mpz/;"	f
get_task_tls	base/task.jl	/^function get_task_tls(t::Task)$/;"	f
get_test_counts	stdlib/Test/src/Test.jl	/^function get_test_counts(ts::DefaultTestSet)$/;"	f
get_test_result	stdlib/Test/src/Test.jl	/^function get_test_result(ex, source)$/;"	f
get_testset	stdlib/Test/src/Test.jl	/^function get_testset()$/;"	f
get_testset_depth	stdlib/Test/src/Test.jl	/^function get_testset_depth()$/;"	f
get_type	src/flisp/types.c	/^fltype_t *get_type(fl_context_t *fl_ctx, value_t t)$/;"	f	typeref:typename:fltype_t *
get_type	stdlib/REPL/src/REPLCompletions.jl	/^function get_type(sym, fn::Module)$/;"	f
get_type	stdlib/REPL/src/REPLCompletions.jl	/^function get_type(sym::Expr, fn::Module)$/;"	f
get_type_call	stdlib/REPL/src/REPLCompletions.jl	/^function get_type_call(expr::Expr)$/;"	f
get_umask	test/file.jl	/^    function get_umask()$/;"	f
get_value	stdlib/REPL/src/REPLCompletions.jl	/^function get_value(sym::Expr, fn)$/;"	f
get_value	stdlib/REPL/src/REPLCompletions.jl	/^get_value(sym, fn) = (sym, true)$/;"	f
get_value	stdlib/REPL/src/REPLCompletions.jl	/^get_value(sym::QuoteNode, fn) = isdefined(fn, sym.value) ? (getfield(fn, sym.value), true) : (no/;"	f
get_value	stdlib/REPL/src/REPLCompletions.jl	/^get_value(sym::Symbol, fn) = isdefined(fn, sym) ? (getfield(fn, sym), true) : (nothing, false)$/;"	f
get_value_getfield	stdlib/REPL/src/REPLCompletions.jl	/^function get_value_getfield(ex::Expr, fn)$/;"	f
get_value_getfield	stdlib/REPL/src/REPLCompletions.jl	/^get_value_getfield(sym, fn) = get_value(sym, fn)$/;"	f
get_vmsize	test/netload/memtest.jl	/^function get_vmsize()$/;"	f
get_world_counter	base/reflection.jl	/^get_world_counter() = ccall(:jl_get_world_counter, UInt, ())$/;"	f
get_wr_ptr	src/cgmemmgr.cpp	/^    void *get_wr_ptr(SplitPtrBlock &block, void *rt_ptr, size_t, size_t) override$/;"	f	class:__anon06c686bc0111::DualMapAllocator	typeref:typename:void *	file:
get_wr_ptr	src/cgmemmgr.cpp	/^    void *get_wr_ptr(SplitPtrBlock &block, void *rt_ptr,$/;"	f	class:__anon06c686bc0111::SelfMemAllocator	typeref:typename:void *	file:
get_x	test/core.jl	/^@noinline get_x(a::A23367) = a.x$/;"	f
get_xcr0	src/processor_x86.cpp	/^static uint64_t get_xcr0(void)$/;"	f	namespace:X86	typeref:typename:uint64_t	file:
get_zero_subnormals	base/rounding.jl	/^get_zero_subnormals() = ccall(:jl_get_zero_subnormals,Int32,())!=0$/;"	f
getaddrinfo	stdlib/Sockets/src/addrinfo.jl	/^function getaddrinfo(host::String, T::Type{<:IPAddr})$/;"	f
getaddrinfo	stdlib/Sockets/src/addrinfo.jl	/^getaddrinfo(host::AbstractString) = getaddrinfo(String(host), IPv4)$/;"	f
getaddrinfo	stdlib/Sockets/src/addrinfo.jl	/^getaddrinfo(host::AbstractString, T::Type{<:IPAddr}) = getaddrinfo(String(host), T)$/;"	f
getall	deps/Makefile	/^getall: get-llvm get-libuv get-pcre get-openlibm get-dsfmt get-openblas get-lapack get-suitespar/;"	t
getall	stdlib/Makefile	/^getall get: $(addprefix get-, $(STDLIBS_EXT))$/;"	t
getalladdrinfo	stdlib/Sockets/src/addrinfo.jl	/^function getalladdrinfo(host::String)$/;"	f
getalladdrinfo	stdlib/Sockets/src/addrinfo.jl	/^getalladdrinfo(host::AbstractString) = getalladdrinfo(String(host))$/;"	f
getauxval_procfs	src/processor_arm.cpp	/^static unsigned long getauxval_procfs(unsigned long type)$/;"	f	namespace:ARM	typeref:typename:unsigned long	file:
getbuf	base/grisu/grisu.jl	/^function getbuf()$/;"	f
getcolptr	stdlib/SparseArrays/src/sparsematrix.jl	/^getcolptr(S::SparseMatrixCSC)     = getfield(S, :colptr)$/;"	f
getcolptr	stdlib/SparseArrays/src/sparsematrix.jl	/^getcolptr(S::SparseMatrixCSCView) = view(getcolptr(parent(S)), first(axes(S, 2)):(last(axes(S, 2/;"	f
getconfig	stdlib/LibGit2/src/config.jl	/^function getconfig(name::AbstractString, default)$/;"	f
getconfig	stdlib/LibGit2/src/config.jl	/^function getconfig(r::GitRepo, name::AbstractString, default)$/;"	f
getconfig	stdlib/LibGit2/src/config.jl	/^function getconfig(rname::AbstractString, name::AbstractString, default)$/;"	f
getcontext	src/task.c	/^#define getcontext /;"	d	file:
getdict	stdlib/Profile/src/Profile.jl	/^function getdict(data::Vector{UInt})$/;"	f
getdoc	base/docs/Docs.jl	/^function getdoc end$/;"	f
getdoc	base/docs/Docs.jl	/^getdoc(@nospecialize(x)) = nothing$/;"	f
getdoc	base/docs/Docs.jl	/^getdoc(@nospecialize(x), @nospecialize(sig)) = getdoc(x)$/;"	f
getfield26826	test/compiler/inference.jl	/^getfield26826(x, args...) = Base.getproperty(x, getfield(args, 2))$/;"	f
getfield_elim_pass!	base/compiler/ssair/passes.jl	/^function getfield_elim_pass!(ir::IRCode, domtree::DomTree)$/;"	f
getfield_nothrow	base/compiler/tfuncs.jl	/^function getfield_nothrow(@nospecialize(s00), @nospecialize(name), @nospecialize(inbounds))$/;"	f
getfield_nothrow	base/compiler/tfuncs.jl	/^function getfield_nothrow(argtypes::Vector{Any})$/;"	f
getfield_tfunc	base/compiler/tfuncs.jl	/^function getfield_tfunc(@nospecialize(s00), @nospecialize(name))$/;"	f
getfield_tfunc	base/compiler/tfuncs.jl	/^getfield_tfunc(@nospecialize(s00), @nospecialize(name), @nospecialize(inbounds)) =$/;"	f
getfield_undefref_sym	src/ast.c	/^jl_sym_t *throw_undef_if_not_sym; jl_sym_t *getfield_undefref_sym;$/;"	v	typeref:typename:jl_sym_t *
getfilespaths!	contrib/add_license_to_files.jl	/^function getfilespaths!(filepaths::Vector, rootdir::AbstractString)$/;"	f
gethandle	stdlib/Mmap/src/Mmap.jl	/^function gethandle(io::IO)$/;"	f
gethandle	stdlib/Mmap/src/Mmap.jl	/^gethandle(io::Anonymous) = INVALID_OS_HANDLE$/;"	f
gethandle	stdlib/Mmap/src/Mmap.jl	/^gethandle(io::IO) = RawFD(fd(io))$/;"	f
gethostname	base/libc.jl	/^function gethostname()$/;"	f
getindex	base/abstractarray.jl	/^function getindex(A::AbstractArray, I...)$/;"	f
getindex	base/abstractdict.jl	/^function getindex(d::IdDict{K,V}, @nospecialize(key)) where {K, V}$/;"	f
getindex	base/abstractdict.jl	/^function getindex(t::AbstractDict, key)$/;"	f
getindex	base/abstractdict.jl	/^getindex(t::AbstractDict, k1, k2, ks...) = getindex(t, tuple(k1,k2,ks...))$/;"	f
getindex	base/array.jl	/^@eval getindex(A::Array, i1::Int) = arrayref($(Expr(:boundscheck)), A, i1)$/;"	f
getindex	base/array.jl	/^@eval getindex(A::Array, i1::Int, i2::Int, I::Int...) = (@_inline_meta; arrayref($(Expr(:boundsc/;"	f
getindex	base/array.jl	/^function getindex end$/;"	f
getindex	base/array.jl	/^function getindex(::Type{Any}, @nospecialize vals...)$/;"	f
getindex	base/array.jl	/^function getindex(::Type{T}, vals...) where T$/;"	f
getindex	base/array.jl	/^function getindex(A::Array, I::UnitRange{Int})$/;"	f
getindex	base/array.jl	/^function getindex(A::Array, c::Colon)$/;"	f
getindex	base/array.jl	/^function getindex(A::Array{S}, I::AbstractRange{Int}) where S$/;"	f
getindex	base/array.jl	/^getindex(::Type{Any}) = Vector{Any}()$/;"	f
getindex	base/array.jl	/^getindex(::Type{T}) where {T} = (@_inline_meta; Vector{T}())$/;"	f
getindex	base/array.jl	/^getindex(::Type{T}, x) where {T} = (@_inline_meta; a = Vector{T}(undef, 1); @inbounds a[1] = x; /;"	f
getindex	base/array.jl	/^getindex(::Type{T}, x, y) where {T} = (@_inline_meta; a = Vector{T}(undef, 2); @inbounds (a[1] =/;"	f
getindex	base/array.jl	/^getindex(::Type{T}, x, y, z) where {T} = (@_inline_meta; a = Vector{T}(undef, 3); @inbounds (a[1/;"	f
getindex	base/atomics.jl	/^    @eval getindex(x::Atomic{$typ}) =$/;"	f
getindex	base/bitarray.jl	/^@inline function getindex(B::BitArray, i::Int)$/;"	f
getindex	base/char.jl	/^getindex(c::AbstractChar) = c$/;"	f
getindex	base/char.jl	/^getindex(c::AbstractChar, I::Integer...) = all(x -> x == 1, I) ? c : throw(BoundsError())$/;"	f
getindex	base/char.jl	/^getindex(c::AbstractChar, i::Integer) = i == 1 ? c : throw(BoundsError())$/;"	f
getindex	base/compiler/ssair/ir.jl	/^function getindex(compact::IncrementalCompact, idx::Int)$/;"	f
getindex	base/compiler/ssair/ir.jl	/^function getindex(compact::IncrementalCompact, ssa::NewSSAValue)$/;"	f
getindex	base/compiler/ssair/ir.jl	/^function getindex(compact::IncrementalCompact, ssa::OldSSAValue)$/;"	f
getindex	base/compiler/ssair/ir.jl	/^function getindex(compact::IncrementalCompact, ssa::SSAValue)$/;"	f
getindex	base/compiler/ssair/ir.jl	/^function getindex(view::TypesView, idx)$/;"	f
getindex	base/compiler/ssair/ir.jl	/^function getindex(view::TypesView, idx::NewSSAValue)$/;"	f
getindex	base/compiler/ssair/ir.jl	/^function getindex(view::TypesView, v::OldSSAValue)$/;"	f
getindex	base/compiler/ssair/ir.jl	/^function getindex(x::IRCode, s::SSAValue)$/;"	f
getindex	base/compiler/ssair/ir.jl	/^function getindex(x::UseRef)$/;"	f
getindex	base/compiler/ssair/ir.jl	/^getindex(it::UseRefIterator) = it.use[1].stmt$/;"	f
getindex	base/dict.jl	/^function getindex(dict::ImmutableDict, key)$/;"	f
getindex	base/dict.jl	/^function getindex(h::Dict{K,V}, key) where V where K$/;"	f
getindex	base/env.jl	/^getindex(::EnvDict, k::AbstractString) = access_env(k->throw(KeyError(k)), k)$/;"	f
getindex	base/essentials.jl	/^function getindex(v::SimpleVector, i::Int)$/;"	f
getindex	base/essentials.jl	/^getindex(v::SimpleVector, I::AbstractArray) = Core.svec(Any[ v[i] for i in I ]...)$/;"	f
getindex	base/indices.jl	/^function getindex(iter::LinearIndices, i::AbstractRange{<:Integer})$/;"	f
getindex	base/indices.jl	/^function getindex(iter::LinearIndices, i::Int)$/;"	f
getindex	base/indices.jl	/^getindex(S::IdentityUnitRange, i::AbstractUnitRange{<:Integer}) = (@_inline_meta; @boundscheck c/;"	f
getindex	base/indices.jl	/^getindex(S::IdentityUnitRange, i::Int) = (@_inline_meta; @boundscheck checkbounds(S, i); i)$/;"	f
getindex	base/indices.jl	/^getindex(S::IdentityUnitRange, i::StepRange{<:Integer}) = (@_inline_meta; @boundscheck checkboun/;"	f
getindex	base/indices.jl	/^getindex(S::Slice, i::AbstractUnitRange{<:Integer}) = (@_inline_meta; @boundscheck checkbounds(S/;"	f
getindex	base/indices.jl	/^getindex(S::Slice, i::Int) = (@_inline_meta; @boundscheck checkbounds(S, i); i)$/;"	f
getindex	base/indices.jl	/^getindex(S::Slice, i::StepRange{<:Integer}) = (@_inline_meta; @boundscheck checkbounds(S, i); i)$/;"	f
getindex	base/iterators.jl	/^getindex(v::Pairs, key) = v.data[key]$/;"	f
getindex	base/missing.jl	/^@propagate_inbounds function getindex(itr::SkipMissing, I...)$/;"	f
getindex	base/multidimensional.jl	/^    getindex(index::CartesianIndex, i::Integer) = index.I[i]$/;"	f
getindex	base/multidimensional.jl	/^@propagate_inbounds getindex(A::Array, i1::Union{Integer, CartesianIndex}, I::Union{Integer, Car/;"	f
getindex	base/multidimensional.jl	/^getindex(b::Ref, ::CartesianIndex{0}) = getindex(b)$/;"	f
getindex	base/multidimensional.jl	/^getindex(t::Tuple,  i::CartesianIndex{1}) = getindex(t, i.I[1])$/;"	f
getindex	base/multidimensional.jl	/^getindex(x::Number, i::CartesianIndex{0}) = x$/;"	f
getindex	base/namedtuple.jl	/^getindex(t::NamedTuple, i::Int) = getfield(t, i)$/;"	f
getindex	base/namedtuple.jl	/^getindex(t::NamedTuple, i::Symbol) = getfield(t, i)$/;"	f
getindex	base/number.jl	/^function getindex(x::Number, I::Integer...)$/;"	f
getindex	base/number.jl	/^function getindex(x::Number, i::Integer)$/;"	f
getindex	base/number.jl	/^getindex(x::Number) = x$/;"	f
getindex	base/pair.jl	/^getindex(p::Pair,i::Int) = getfield(p,i)$/;"	f
getindex	base/pair.jl	/^getindex(p::Pair,i::Real) = getfield(p, convert(Int, i))$/;"	f
getindex	base/range.jl	/^    function getindex(t::Tuple, r::AbstractUnitRange{<:Real})$/;"	f
getindex	base/range.jl	/^function getindex(r::AbstractUnitRange, s::AbstractUnitRange{<:Integer})$/;"	f
getindex	base/range.jl	/^function getindex(r::AbstractUnitRange, s::StepRange{<:Integer})$/;"	f
getindex	base/range.jl	/^function getindex(r::LinRange, s::OrdinalRange{<:Integer})$/;"	f
getindex	base/range.jl	/^function getindex(r::OneTo{T}, s::OneTo) where T$/;"	f
getindex	base/range.jl	/^function getindex(r::StepRange, s::AbstractRange{<:Integer})$/;"	f
getindex	base/range.jl	/^function getindex(r::StepRangeLen{T}, s::OrdinalRange{<:Integer}) where {T}$/;"	f
getindex	base/range.jl	/^function getindex(r::Union{StepRangeLen,LinRange}, i::Integer)$/;"	f
getindex	base/range.jl	/^function getindex(v::AbstractRange{T}, i::Integer) where T$/;"	f
getindex	base/range.jl	/^function getindex(v::OneTo{T}, i::Integer) where T$/;"	f
getindex	base/range.jl	/^function getindex(v::UnitRange{T}, i::Integer) where T$/;"	f
getindex	base/range.jl	/^function getindex(v::UnitRange{T}, i::Integer) where {T<:OverflowSafe}$/;"	f
getindex	base/range.jl	/^getindex(r::AbstractRange, ::Colon) = copy(r)$/;"	f
getindex	base/refpointer.jl	/^getindex(b::RefArray) = b.x[b.i]$/;"	f
getindex	base/refvalue.jl	/^getindex(b::RefValue) = b.x$/;"	f
getindex	base/regex.jl	/^function getindex(m::RegexMatch, name::Symbol)$/;"	f
getindex	base/regex.jl	/^getindex(m::RegexMatch, idx::Integer) = m.captures[idx]$/;"	f
getindex	base/regex.jl	/^getindex(m::RegexMatch, name::AbstractString) = m[Symbol(name)]$/;"	f
getindex	base/reinterpretarray.jl	/^@inline @propagate_inbounds function getindex(a::ReinterpretArray{T,N,S}, i::Int) where {T,N,S}$/;"	f
getindex	base/reinterpretarray.jl	/^@inline @propagate_inbounds function getindex(a::ReinterpretArray{T,N,S}, inds::Vararg{Int, N}) /;"	f
getindex	base/reinterpretarray.jl	/^@inline @propagate_inbounds getindex(a::ReinterpretArray) = a[1]$/;"	f
getindex	base/reinterpretarray.jl	/^@inline @propagate_inbounds getindex(a::ReinterpretArray{T,0}) where {T} = reinterpret(T, a.pare/;"	f
getindex	base/reshapedarray.jl	/^@inline function getindex(A::ReshapedArray, index::ReshapedIndex)$/;"	f
getindex	base/reshapedarray.jl	/^@inline function getindex(A::ReshapedArrayLF, index::Int)$/;"	f
getindex	base/reshapedarray.jl	/^@inline function getindex(A::ReshapedArray{T,N}, indices::Vararg{Int,N}) where {T,N}$/;"	f
getindex	base/show.jl	/^getindex(io::IO, key) = throw(KeyError(key))$/;"	f
getindex	base/show.jl	/^getindex(io::IOContext, key) = getindex(io.dict, key)$/;"	f
getindex	base/stream.jl	/^getindex(::TTY, key::Symbol) = key === :color ? have_color : throw(KeyError(key))$/;"	f
getindex	base/strings/basic.jl	/^@propagate_inbounds getindex(s::CodeUnits, i::Int) = codeunit(s.s, i)$/;"	f
getindex	base/strings/basic.jl	/^function getindex(s::AbstractString, i::Integer)$/;"	f
getindex	base/strings/basic.jl	/^getindex(s::AbstractString, i::Colon) = s$/;"	f
getindex	base/strings/basic.jl	/^getindex(s::AbstractString, v::AbstractVector{<:Integer}) =$/;"	f
getindex	base/strings/basic.jl	/^getindex(s::AbstractString, v::AbstractVector{Bool}) =$/;"	f
getindex	base/strings/string.jl	/^@inline function getindex(s::String, r::UnitRange{Int})$/;"	f
getindex	base/strings/string.jl	/^@propagate_inbounds function getindex(s::String, i::Int)$/;"	f
getindex	base/strings/string.jl	/^getindex(s::String, r::UnitRange{<:Integer}) = s[Int(first(r)):Int(last(r))]$/;"	f
getindex	base/strings/substring.jl	/^function getindex(s::SubString, i::Integer)$/;"	f
getindex	base/strings/substring.jl	/^getindex(s::AbstractString, r::UnitRange{<:Integer}) = SubString(s, r)$/;"	f
getindex	base/subarray.jl	/^function getindex(V::FastContiguousSubArray, i::Int)$/;"	f
getindex	base/subarray.jl	/^function getindex(V::FastContiguousSubArray{<:Any, 1}, i::Int)$/;"	f
getindex	base/subarray.jl	/^function getindex(V::FastSubArray, i::Int)$/;"	f
getindex	base/subarray.jl	/^function getindex(V::FastSubArray{<:Any, 1}, i::Int)$/;"	f
getindex	base/subarray.jl	/^function getindex(V::SubArray{T,N}, I::Vararg{Int,N}) where {T,N}$/;"	f
getindex	base/tuple.jl	/^@eval getindex(@nospecialize(t::Tuple), i::Int) = getfield(t, i, $(Expr(:boundscheck)))$/;"	f
getindex	base/tuple.jl	/^@eval getindex(@nospecialize(t::Tuple), i::Real) = getfield(t, convert(Int, i), $(Expr(:boundsch/;"	f
getindex	base/tuple.jl	/^getindex(t::Tuple, b::AbstractArray{Bool,1}) = length(b) == length(t) ? getindex(t, findall(b)) /;"	f
getindex	base/tuple.jl	/^getindex(t::Tuple, c::Colon) = t$/;"	f
getindex	base/tuple.jl	/^getindex(t::Tuple, r::AbstractArray{<:Any,1}) = ([t[ri] for ri in r]...,)$/;"	f
getindex	base/twiceprecision.jl	/^function getindex(r::StepRangeLen{T,<:TwicePrecision,<:TwicePrecision}, s::OrdinalRange{<:Intege/;"	f
getindex	base/weakkeydict.jl	/^getindex(wkh::WeakKeyDict{K}, key) where {K} = lock(() -> getindex(wkh.ht, key), wkh)$/;"	f
getindex	stdlib/Distributed/src/remotecall.jl	/^function getindex(r::RemoteChannel, args...)$/;"	f
getindex	stdlib/Distributed/src/remotecall.jl	/^getindex(r::Future) = fetch(r)$/;"	f
getindex	stdlib/Distributed/src/remotecall.jl	/^getindex(r::Future, args...) = getindex(fetch(r), args...)$/;"	f
getindex	stdlib/Distributed/src/remotecall.jl	/^getindex(r::RemoteChannel) = fetch(r)$/;"	f
getindex	stdlib/LinearAlgebra/src/adjtrans.jl	/^@propagate_inbounds getindex(A::AdjOrTransAbsMat, i::Int, j::Int) = wrapperop(A)(A.parent[j, i])$/;"	f
getindex	stdlib/LinearAlgebra/src/adjtrans.jl	/^@propagate_inbounds getindex(v::AdjOrTransAbsVec, ::Colon, ::Colon) = wrapperop(v)(v.parent[:])$/;"	f
getindex	stdlib/LinearAlgebra/src/adjtrans.jl	/^@propagate_inbounds getindex(v::AdjOrTransAbsVec, ::Colon, is::AbstractArray{Int}) = wrapperop(v/;"	f
getindex	stdlib/LinearAlgebra/src/adjtrans.jl	/^@propagate_inbounds getindex(v::AdjOrTransAbsVec, i::Int) = wrapperop(v)(v.parent[i-1+first(axes/;"	f
getindex	stdlib/LinearAlgebra/src/bidiag.jl	/^function getindex(A::Bidiagonal{T}, i::Integer, j::Integer) where T$/;"	f
getindex	stdlib/LinearAlgebra/src/diagonal.jl	/^@inline function getindex(D::Diagonal, i::Int, j::Int)$/;"	f
getindex	stdlib/LinearAlgebra/src/givens.jl	/^function getindex(G::Givens, i::Integer, j::Integer)$/;"	f
getindex	stdlib/LinearAlgebra/src/hessenberg.jl	/^getindex(H::UpperHessenberg{T}, i::Integer, j::Integer) where {T} =$/;"	f
getindex	stdlib/LinearAlgebra/src/lq.jl	/^getindex(A::LQPackedQ, i::Integer, j::Integer) =$/;"	f
getindex	stdlib/LinearAlgebra/src/qr.jl	/^function getindex(Q::AbstractQ, i::Integer, j::Integer)$/;"	f
getindex	stdlib/LinearAlgebra/src/symmetric.jl	/^@inline function getindex(A::Hermitian, i::Integer, j::Integer)$/;"	f
getindex	stdlib/LinearAlgebra/src/symmetric.jl	/^@inline function getindex(A::Symmetric, i::Integer, j::Integer)$/;"	f
getindex	stdlib/LinearAlgebra/src/triangular.jl	/^getindex(A::LowerTriangular, i::Integer, j::Integer) =$/;"	f
getindex	stdlib/LinearAlgebra/src/triangular.jl	/^getindex(A::UnitLowerTriangular{T}, i::Integer, j::Integer) where {T} =$/;"	f
getindex	stdlib/LinearAlgebra/src/triangular.jl	/^getindex(A::UnitUpperTriangular{T}, i::Integer, j::Integer) where {T} =$/;"	f
getindex	stdlib/LinearAlgebra/src/triangular.jl	/^getindex(A::UpperTriangular, i::Integer, j::Integer) =$/;"	f
getindex	stdlib/LinearAlgebra/src/tridiag.jl	/^function getindex(A::SymTridiagonal{T}, i::Integer, j::Integer) where T$/;"	f
getindex	stdlib/LinearAlgebra/src/tridiag.jl	/^function getindex(A::Tridiagonal{T}, i::Integer, j::Integer) where T$/;"	f
getindex	stdlib/LinearAlgebra/src/uniformscaling.jl	/^getindex(J::UniformScaling, i::Integer,j::Integer) = ifelse(i==j,J.λ,zero(J.λ))$/;"	f
getindex	stdlib/SharedArrays/src/SharedArrays.jl	/^getindex(S::SharedArray, i::Real) = getindex(S.s, i)$/;"	f
getindex	stdlib/SparseArrays/src/sparsematrix.jl	/^function getindex(A::AbstractSparseMatrixCSC{Tv,Ti}, I::AbstractArray) where {Tv,Ti}$/;"	f
getindex	stdlib/SparseArrays/src/sparsematrix.jl	/^function getindex(A::AbstractSparseMatrixCSC{Tv,Ti}, I::AbstractRange, J::AbstractVector) where /;"	f
getindex	stdlib/SparseArrays/src/sparsematrix.jl	/^function getindex(A::AbstractSparseMatrixCSC{Tv,Ti}, I::AbstractVector, J::AbstractVector) where/;"	f
getindex	stdlib/SparseArrays/src/sparsematrix.jl	/^function getindex(A::AbstractSparseMatrixCSC{T}, i0::Integer, i1::Integer) where T$/;"	f
getindex	stdlib/SparseArrays/src/sparsematrix.jl	/^getindex(A::AbstractSparseMatrixCSC, ::Colon, ::Colon) = copy(A)$/;"	f
getindex	stdlib/SparseArrays/src/sparsematrix.jl	/^getindex(A::AbstractSparseMatrixCSC, ::Colon, i)       = getindex(A, 1:size(A, 1), i)$/;"	f
getindex	stdlib/SparseArrays/src/sparsematrix.jl	/^getindex(A::AbstractSparseMatrixCSC, I::AbstractRange{<:Integer}, J::AbstractVector{Bool}) = A[I/;"	f
getindex	stdlib/SparseArrays/src/sparsematrix.jl	/^getindex(A::AbstractSparseMatrixCSC, I::AbstractVector{<:Integer}, J::AbstractVector{Bool}) = A[/;"	f
getindex	stdlib/SparseArrays/src/sparsematrix.jl	/^getindex(A::AbstractSparseMatrixCSC, I::AbstractVector{Bool}, J::AbstractVector{<:Integer}) = A[/;"	f
getindex	stdlib/SparseArrays/src/sparsematrix.jl	/^getindex(A::AbstractSparseMatrixCSC, I::AbstractVector{Bool}, J::AbstractVector{Bool}) = A[finda/;"	f
getindex	stdlib/SparseArrays/src/sparsematrix.jl	/^getindex(A::AbstractSparseMatrixCSC, I::AbstractVector{Bool}, J::Integer) = A[findall(I),J]$/;"	f
getindex	stdlib/SparseArrays/src/sparsematrix.jl	/^getindex(A::AbstractSparseMatrixCSC, I::Integer, J::AbstractVector{Bool}) = A[I,findall(J)]$/;"	f
getindex	stdlib/SparseArrays/src/sparsematrix.jl	/^getindex(A::AbstractSparseMatrixCSC, I::Tuple{Integer,Integer}) = getindex(A, I[1], I[2])$/;"	f
getindex	stdlib/SparseArrays/src/sparsematrix.jl	/^getindex(A::AbstractSparseMatrixCSC, i, ::Colon)       = getindex(A, i, 1:size(A, 2))$/;"	f
getindex	stdlib/SparseArrays/src/sparsematrix.jl	/^getindex(A::AbstractSparseMatrixCSC{<:Any,<:Integer}, I::AbstractRange{Bool}, J::AbstractVector{/;"	f
getindex	stdlib/SparseArrays/src/sparsevector.jl	/^@inline function getindex(A::AbstractSparseMatrixCSC, I::AbstractVector, J::Integer)$/;"	f
getindex	stdlib/SparseArrays/src/sparsevector.jl	/^@inline function getindex(x::AbstractSparseVector{Tv,Ti}, I::AbstractVector) where {Tv,Ti}$/;"	f
getindex	stdlib/SparseArrays/src/sparsevector.jl	/^function getindex(A::AbstractSparseMatrixCSC{Tv,Ti}, I::AbstractVector) where {Tv,Ti}$/;"	f
getindex	stdlib/SparseArrays/src/sparsevector.jl	/^function getindex(A::AbstractSparseMatrixCSC{Tv}, I::AbstractUnitRange) where Tv$/;"	f
getindex	stdlib/SparseArrays/src/sparsevector.jl	/^function getindex(x::AbstractSparseMatrixCSC, ::Colon, j::Integer)$/;"	f
getindex	stdlib/SparseArrays/src/sparsevector.jl	/^function getindex(x::AbstractSparseMatrixCSC, I::AbstractUnitRange, j::Integer)$/;"	f
getindex	stdlib/SparseArrays/src/sparsevector.jl	/^function getindex(x::AbstractSparseVector, i::Integer)$/;"	f
getindex	stdlib/SparseArrays/src/sparsevector.jl	/^function getindex(x::AbstractSparseVector{Tv,Ti}, I::AbstractArray) where {Tv,Ti}$/;"	f
getindex	stdlib/SparseArrays/src/sparsevector.jl	/^function getindex(x::AbstractSparseVector{Tv,Ti}, I::AbstractUnitRange) where {Tv,Ti}$/;"	f
getindex	stdlib/SparseArrays/src/sparsevector.jl	/^getindex(A::AbstractSparseMatrixCSC, ::Colon) = A[1:end]$/;"	f
getindex	stdlib/SparseArrays/src/sparsevector.jl	/^getindex(A::AbstractSparseMatrixCSC, I::AbstractArray{Bool}) = _logical_index(A, I)$/;"	f
getindex	stdlib/SparseArrays/src/sparsevector.jl	/^getindex(A::AbstractSparseMatrixCSC, I::AbstractVector{Bool}) = _logical_index(A, I) # Ambiguiti/;"	f
getindex	stdlib/SparseArrays/src/sparsevector.jl	/^getindex(A::AbstractSparseMatrixCSC, i::Integer, ::Colon) = A[i, 1:end]$/;"	f
getindex	stdlib/SparseArrays/src/sparsevector.jl	/^getindex(x::AbstractSparseVector, ::Colon) = copy(x)$/;"	f
getindex	stdlib/SparseArrays/src/sparsevector.jl	/^getindex(x::AbstractSparseVector, I::AbstractArray{Bool}) = x[findall(I)]$/;"	f
getindex	stdlib/SparseArrays/src/sparsevector.jl	/^getindex(x::AbstractSparseVector, I::AbstractVector{Bool}) = x[findall(I)]$/;"	f
getindex	stdlib/SuiteSparse/src/cholmod.jl	/^function getindex(A::Dense, i::Integer)$/;"	f
getindex	stdlib/SuiteSparse/src/cholmod.jl	/^function getindex(A::Sparse{T}, i0::Integer, i1::Integer) where T$/;"	f
getindex_I_sorted	stdlib/SparseArrays/src/sparsematrix.jl	/^function getindex_I_sorted(A::AbstractSparseMatrixCSC{Tv,Ti}, I::AbstractVector, J::AbstractVect/;"	f
getindex_I_sorted_bsearch_A	stdlib/SparseArrays/src/sparsematrix.jl	/^function getindex_I_sorted_bsearch_A(A::AbstractSparseMatrixCSC{Tv,Ti}, I::AbstractVector, J::Ab/;"	f
getindex_I_sorted_bsearch_I	stdlib/SparseArrays/src/sparsematrix.jl	/^function getindex_I_sorted_bsearch_I(A::AbstractSparseMatrixCSC{Tv,Ti}, I::AbstractVector, J::Ab/;"	f
getindex_I_sorted_linear	stdlib/SparseArrays/src/sparsematrix.jl	/^function getindex_I_sorted_linear(A::AbstractSparseMatrixCSC{Tv,Ti}, I::AbstractVector, J::Abstr/;"	f
getindex_cols	stdlib/SparseArrays/src/sparsematrix.jl	/^function getindex_cols(A::AbstractSparseMatrixCSC{Tv,Ti}, J::AbstractVector) where {Tv,Ti}$/;"	f
getindex_continued	base/strings/string.jl	/^function getindex_continued(s::String, i::Int, u::UInt32)$/;"	f
getindex_general	stdlib/SparseArrays/src/sparsematrix.jl	/^function getindex_general(A::AbstractSparseMatrixCSC, I::AbstractVector, J::AbstractVector)$/;"	f
getindex_traverse_col	stdlib/SparseArrays/src/sparsematrix.jl	/^getindex_traverse_col(::AbstractUnitRange, lo::Integer, hi::Integer) = lo:hi$/;"	f
getindex_traverse_col	stdlib/SparseArrays/src/sparsematrix.jl	/^getindex_traverse_col(I::StepRange, lo::Integer, hi::Integer) = step(I) > 0 ? (lo:1:hi) : (hi:-1/;"	f
getipaddr	stdlib/Sockets/src/addrinfo.jl	/^function getipaddr(addr_type::Type{T}) where T<:IPAddr$/;"	f
getipaddr	stdlib/Sockets/src/addrinfo.jl	/^getipaddr() = getipaddr(IPv4)$/;"	f
getipaddrs	stdlib/Sockets/src/addrinfo.jl	/^function getipaddrs(addr_type::Type{T}=IPAddr; loopback::Bool=false) where T<:IPAddr$/;"	f
getkey	base/dict.jl	/^function getkey(h::Dict{K,V}, key, default) where V where K$/;"	f
getkey	base/weakkeydict.jl	/^function getkey(wkh::WeakKeyDict{K}, kk, default) where K$/;"	f
getline	test/ambiguous.jl	/^getline(m::Core.TypeMapEntry) = getline(m.func::Method)$/;"	f
getline	test/ambiguous.jl	/^getline(m::Method) = m.line - lineoffset$/;"	f
getmark	stdlib/REPL/src/LineEdit.jl	/^getmark(s) = max(0, buffer(s).mark)$/;"	f
getnameinfo	stdlib/Sockets/src/addrinfo.jl	/^function getnameinfo(address::Union{IPv4, IPv6})$/;"	f
getnzval	stdlib/SparseArrays/src/sparsematrix.jl	/^getnzval( S::AbstractSparseMatrixCSC) = nonzeros(S)$/;"	f
getnzval	stdlib/SparseArrays/src/sparsematrix.jl	/^getnzval( S::SparseMatrixCSCView) = nonzeros(parent(S))$/;"	f
getopt	src/getopt.c	/^int getopt(int argc, char * const argv[], const char *optstring)$/;"	f	typeref:typename:int
getopt_long	src/getopt.c	/^int getopt_long(int argc, char *const *argv, const char *optstring, const struct option *longopt/;"	f	typeref:typename:int
getopt_long_only	src/getopt.c	/^int getopt_long_only(int argc, char *const *argv, const char *optstring, const struct option *lo/;"	f	typeref:typename:int
getpass	base/util.jl	/^function getpass end$/;"	f
getpass	base/util.jl	/^function getpass(input::TTY, output::IO, prompt::AbstractString)$/;"	f
getpass	base/util.jl	/^getpass(prompt::AbstractString) = getpass(stdin, stdout, prompt)$/;"	f
getpeername	stdlib/Sockets/src/Sockets.jl	/^getpeername(sock::TCPSocket) = _sockname(sock, false)$/;"	f
getpid	base/libc.jl	/^getpid() = ccall(:jl_getpid, Int32, ())$/;"	f
getproperty	base/Base.jl	/^getproperty(Core.@nospecialize(x), f::Symbol) = getfield(x, f)$/;"	f
getproperty	base/Base.jl	/^getproperty(x::Module, f::Symbol) = getfield(x, f)$/;"	f
getproperty	base/Base.jl	/^getproperty(x::Tuple, f::Int) = getfield(x, f)$/;"	f
getproperty	base/Base.jl	/^getproperty(x::Type, f::Symbol) = getfield(x, f)$/;"	f
getproperty	base/boot.jl	/^const getproperty = getfield$/;"	v
getproperty	base/compiler/compiler.jl	/^const getproperty = getfield$/;"	v
getproperty	stdlib/LinearAlgebra/src/bunchkaufman.jl	/^function getproperty(B::BunchKaufman{T}, d::Symbol) where {T<:BlasFloat}$/;"	f
getproperty	stdlib/LinearAlgebra/src/cholesky.jl	/^function getproperty(C::Cholesky, d::Symbol)$/;"	f
getproperty	stdlib/LinearAlgebra/src/cholesky.jl	/^function getproperty(C::CholeskyPivoted{T}, d::Symbol) where T<:BlasFloat$/;"	f
getproperty	stdlib/LinearAlgebra/src/hessenberg.jl	/^function getproperty(F::Hessenberg, d::Symbol)$/;"	f
getproperty	stdlib/LinearAlgebra/src/ldlt.jl	/^function getproperty(F::LDLt, d::Symbol)$/;"	f
getproperty	stdlib/LinearAlgebra/src/lq.jl	/^function getproperty(F::LQ, d::Symbol)$/;"	f
getproperty	stdlib/LinearAlgebra/src/lu.jl	/^function getproperty(F::LU{T,<:StridedMatrix}, d::Symbol) where T$/;"	f
getproperty	stdlib/LinearAlgebra/src/lu.jl	/^function getproperty(F::LU{T,Tridiagonal{T,V}}, d::Symbol) where {T,V}$/;"	f
getproperty	stdlib/LinearAlgebra/src/qr.jl	/^function getproperty(F::QR, d::Symbol)$/;"	f
getproperty	stdlib/LinearAlgebra/src/qr.jl	/^function getproperty(F::QRCompactWY, d::Symbol)$/;"	f
getproperty	stdlib/LinearAlgebra/src/qr.jl	/^function getproperty(F::QRPivoted{T}, d::Symbol) where T$/;"	f
getproperty	stdlib/LinearAlgebra/src/schur.jl	/^function getproperty(F::GeneralizedSchur, d::Symbol)$/;"	f
getproperty	stdlib/LinearAlgebra/src/schur.jl	/^function getproperty(F::Schur, d::Symbol)$/;"	f
getproperty	stdlib/LinearAlgebra/src/svd.jl	/^@inline function getproperty(F::GeneralizedSVD{T}, d::Symbol) where T$/;"	f
getproperty	stdlib/LinearAlgebra/src/svd.jl	/^function getproperty(F::SVD, d::Symbol)$/;"	f
getproperty	stdlib/SuiteSparse/src/cholmod.jl	/^@inline function getproperty(F::Factor, sym::Symbol)$/;"	f
getproperty	stdlib/SuiteSparse/src/umfpack.jl	/^@inline function getproperty(lu::UmfpackLU, d::Symbol)$/;"	f
getptls	base/boot.jl	/^getptls() = ccall(:jl_get_ptls_states, Ptr{Cvoid}, ())$/;"	f
getqs	stdlib/LinearAlgebra/test/lq.jl	/^    function getqs(F::LinearAlgebra.LQ)$/;"	f
getrf!	stdlib/LinearAlgebra/src/lapack.jl	/^        function getrf!(A::AbstractMatrix{$elty})$/;"	f
getri!	stdlib/LinearAlgebra/src/lapack.jl	/^        function getri!(A::AbstractMatrix{$elty}, ipiv::AbstractVector{BlasInt})$/;"	f
getrowval	stdlib/SparseArrays/src/sparsematrix.jl	/^getrowval(S::AbstractSparseMatrixCSC) = rowvals(S)$/;"	f
getrowval	stdlib/SparseArrays/src/sparsematrix.jl	/^getrowval(S::SparseMatrixCSCView) = rowvals(parent(S))$/;"	f
getrs!	stdlib/LinearAlgebra/src/lapack.jl	/^        function getrs!(trans::AbstractChar, A::AbstractMatrix{$elty}, ipiv::AbstractVector{Blas/;"	f
getset	stdlib/Markdown/src/parse/config.jl	/^getset(coll, key, default) = coll[key] = get(coll, key, default)$/;"	f
getsockname	stdlib/Sockets/src/Sockets.jl	/^getsockname(sock::Union{TCPSocket, TCPServer}) = _sockname(sock, true)$/;"	f
gettable	stdlib/Serialization/src/Serialization.jl	/^function gettable(s::AbstractSerializer, id::Int)$/;"	f
gettypeinfos	base/show.jl	/^function gettypeinfos(io::IO, p::Pair)$/;"	f
getx	test/keywordargs.jl	/^        getx() = x$/;"	f
gf2_matrix_square	src/crc32c.c	/^static inline void gf2_matrix_square(uint32_t *square, uint32_t *mat)$/;"	f	typeref:typename:void	file:
gf2_matrix_times	src/crc32c.c	/^static inline uint32_t gf2_matrix_times(uint32_t *mat, uint32_t vec)$/;"	f	typeref:typename:uint32_t	file:
gf_err	test/staged.jl	/^    @generated function gf_err()$/;"	f
gf_err2	test/staged.jl	/^    @generated function gf_err2(::f) where {f}$/;"	f
gg13183	test/compiler/inference.jl	/^gg13183(x::X...) where {X} = (_false13183 ? gg13183(x, x) : 0)$/;"	f
gg16153	test/core.jl	/^gg16153(@nospecialize(x), @nospecialize(y)) = 2$/;"	f
gg16153	test/core.jl	/^gg16153(@nospecialize(x), y...) = 1$/;"	f
gg6614	test/core.jl	/^gg6614((x, y)::Tuple{Int, String} = (2, " ")) = (x, y)$/;"	f
gges!	stdlib/LinearAlgebra/src/lapack.jl	/^        function gges!(jobvsl::AbstractChar, jobvsr::AbstractChar, A::AbstractMatrix{$elty}, B::/;"	f
ggev!	stdlib/LinearAlgebra/src/lapack.jl	/^        function ggev!(jobvl::AbstractChar, jobvr::AbstractChar, A::AbstractMatrix{$elty}, B::Ab/;"	f
gglse!	stdlib/LinearAlgebra/src/lapack.jl	/^        function gglse!(A::AbstractMatrix{$elty}, c::AbstractVector{$elty},$/;"	f
ggsvd!	stdlib/LinearAlgebra/src/lapack.jl	/^        function ggsvd!(jobu::AbstractChar, jobv::AbstractChar, jobq::AbstractChar, A::AbstractM/;"	f
ggsvd3!	stdlib/LinearAlgebra/src/lapack.jl	/^        function ggsvd3!(jobu::AbstractChar, jobv::AbstractChar, jobq::AbstractChar, A::Abstract/;"	f
ghostValue	src/codegen.cpp	/^static inline jl_cgval_t ghostValue(jl_datatype_t *typ)$/;"	f	typeref:typename:jl_cgval_t	file:
ghostValue	src/codegen.cpp	/^static inline jl_cgval_t ghostValue(jl_value_t *typ)$/;"	f	typeref:typename:jl_cgval_t	file:
git-external	deps/tools/git-external.mk	/^define git-external$/;"	m
git_info_string	src/jlapi.c	/^static const char *git_info_string(const char *fld)$/;"	f	typeref:typename:const char *	file:
git_url	stdlib/LibGit2/src/utils.jl	/^function git_url(;$/;"	f
gitdir	stdlib/LibGit2/src/repository.jl	/^function gitdir(repo::GitRepo)$/;"	f
githash_str	stdlib/LibGit2/src/oid.jl	/^macro githash_str(id)$/;"	f
github_paragraph	stdlib/Markdown/src/GitHub/GitHub.jl	/^function github_paragraph(stream::IO, md::MD)$/;"	f
github_table	stdlib/Markdown/src/GitHub/table.jl	/^function github_table(stream::IO, md::MD)$/;"	f
give_advice	deps/srccache/patchelf-0.9/build-aux/missing	/^give_advice ()$/;"	f
givens	stdlib/LinearAlgebra/src/givens.jl	/^function givens(f::T, g::T, i1::Integer, i2::Integer) where T$/;"	f
givens	stdlib/LinearAlgebra/src/givens.jl	/^givens(A::AbstractMatrix, i1::Integer, i2::Integer, j::Integer) =$/;"	f
givens	stdlib/LinearAlgebra/src/givens.jl	/^givens(x::AbstractVector, i1::Integer, i2::Integer) =$/;"	f
givensAlgorithm	stdlib/LinearAlgebra/src/givens.jl	/^function givensAlgorithm(f::Complex{T}, g::Complex{T}) where T<:AbstractFloat$/;"	f
givensAlgorithm	stdlib/LinearAlgebra/src/givens.jl	/^function givensAlgorithm(f::T, g::T) where T<:AbstractFloat$/;"	f
givensAlgorithm	stdlib/LinearAlgebra/src/givens.jl	/^givensAlgorithm(f, g) = givensAlgorithm(promote(float(f), float(g))...)$/;"	f
gl_17003	test/compiler/inference.jl	/^gl_17003 = [1, 2, 3]$/;"	v
glob_x	test/core.jl	/^glob_x = 23$/;"	v
globalUnique	src/anticodegen.c	/^int globalUnique = 0;$/;"	v	typeref:typename:int
globalUnique	src/codegen.cpp	/^    int globalUnique = 0;$/;"	v	typeref:typename:int
global_array2	test/clangsa/MissingRoots.c	/^void global_array2() {$/;"	f	typeref:typename:void
global_array3	test/clangsa/MissingRoots.c	/^void global_array3() {$/;"	f	typeref:typename:void
global_binding_pointer	src/codegen.cpp	/^static Value *global_binding_pointer(jl_codectx_t &ctx, jl_module_t *m, jl_sym_t *s,$/;"	f	typeref:typename:Value *	file:
global_copy	test/clangsa/MissingRoots.c	/^void global_copy() {$/;"	f	typeref:typename:void
global_env_list	src/flisp/builtins.c	/^static void global_env_list(fl_context_t *fl_ctx, symbol_t *root, value_t *pv)$/;"	f	typeref:typename:void	file:
global_jlvalue_to_llvm	src/codegen.cpp	/^static GlobalVariable *global_jlvalue_to_llvm(const std::string &cname, jl_value_t **addr, Modul/;"	f	typeref:typename:GlobalVariable *	file:
global_logger	base/logging.jl	/^function global_logger(logger::AbstractLogger)$/;"	f
global_logger	base/logging.jl	/^global_logger() = _global_logstate.logger$/;"	f
global_proto	src/jitlayers.h	/^static inline GlobalVariable *global_proto(GlobalVariable *G, Module *M = NULL)$/;"	f	typeref:typename:GlobalVariable *
global_sym	src/ast.c	/^jl_sym_t *global_sym; jl_sym_t *list_sym;$/;"	v	typeref:typename:jl_sym_t *
global_to_llvm	src/codegen.cpp	/^static GlobalVariable *global_to_llvm(const std::string &cname, void *addr, Module *m)$/;"	f	typeref:typename:GlobalVariable *	file:
global_value_address1	test/llvmcall.jl	/^    @eval global_value_address1() = llvmcall($(the_other_f1), Int64, Tuple{})$/;"	f
global_value_address2	test/llvmcall.jl	/^    @eval global_value_address2() = llvmcall($(the_other_f2), Int64, Tuple{})$/;"	f
global_var	src/ccalltest.c	/^JL_DLLEXPORT const int global_var = 1;$/;"	v	typeref:typename:JL_DLLEXPORT const int
globally_rooted	test/clangsa/MissingRoots.c	/^void globally_rooted() {$/;"	f	typeref:typename:void
globalref	src/julia.h	/^    jl_value_t *globalref;  \/\/ cached GlobalRef for this binding$/;"	m	struct:__anon055fe4271108	typeref:typename:jl_value_t *
globalref?	src/ast.scm	/^(define (globalref? e)$/;"	f
globalref_sym	src/ast.c	/^jl_sym_t *globalref_sym; jl_sym_t *do_sym;$/;"	v	typeref:typename:jl_sym_t *
glotest	test/core.jl	/^function glotest()$/;"	f
glue_src_bitchunks	base/bitarray.jl	/^function glue_src_bitchunks(src::Vector{UInt64}, k::Int, ks1::Int, msk_s0::UInt64, ls0::Int)$/;"	f
gmp-6.1.2/configure	deps/patches/gmp-config-ldflags.patch	/^--- gmp-6.1.2\/configure	2019-03-25 17:58:41.928471374 -0400$/;"	m
gmp_limb_size	src/dump.c	/^static int gmp_limb_size = 0;$/;"	v	typeref:typename:int	file:
gmp_limb_size	src/staticdata.c	/^static int gmp_limb_size = 0;$/;"	v	typeref:typename:int	file:
gmpz	base/gmp.jl	/^gmpz(op::Symbol) = (Symbol(:__gmpz_, op), :libgmp)$/;"	f
gnu_pubnames	src/julia.h	/^    int gnu_pubnames;       \/\/ can we emit the gnu pubnames debuginfo$/;"	m	struct:__anon055fe4271b08	typeref:typename:int
goldmont	src/processor_x86.cpp	/^constexpr auto goldmont = silvermont | get_feature_masks(mpx, sha, rdrnd, rdseed, xsave,$/;"	v	namespace:X86::Feature	typeref:typename:auto
goto	base/essentials.jl	/^macro goto(name::Symbol)$/;"	f
goto_ifnot_sym	src/ast.c	/^jl_sym_t *goto_sym;    jl_sym_t *goto_ifnot_sym;$/;"	v	typeref:typename:jl_sym_t *
goto_sym	src/ast.c	/^jl_sym_t *goto_sym;    jl_sym_t *goto_ifnot_sym;$/;"	v	typeref:typename:jl_sym_t *
goto_test1	test/goto.jl	/^function goto_test1()$/;"	f
goto_test2	test/goto.jl	/^        function goto_test2()$/;"	f
goto_test3	test/goto.jl	/^        function goto_test3()$/;"	f
goto_test4	test/goto.jl	/^        function goto_test4()$/;"	f
goto_test5_1	test/goto.jl	/^        function goto_test5_1()$/;"	f
goto_test5_2	test/goto.jl	/^        function goto_test5_2()$/;"	f
goto_test5_3	test/goto.jl	/^function goto_test5_3()$/;"	f
goto_test5_macro1	test/goto.jl	/^macro goto_test5_macro1()$/;"	f
goto_test5_macro2	test/goto.jl	/^macro goto_test5_macro2()$/;"	f
goto_test5_macro3	test/goto.jl	/^macro goto_test5_macro3()$/;"	f
goto_test6	test/goto.jl	/^        function goto_test6()$/;"	f
goto_test6	test/goto.jl	/^function goto_test6()$/;"	f
goto_test7	test/goto.jl	/^function goto_test7(x)$/;"	f
goto_test8_macro	test/goto.jl	/^    macro goto_test8_macro()$/;"	f
gperm	base/stat.jl	/^gperm(st::StatStruct) = UInt8((filemode(st) >> 3) & 0x7)$/;"	f
gpure	test/compiler/inference.jl	/^gpure() = fpure()$/;"	f
gpure	test/compiler/inference.jl	/^gpure(x::Irrational) = fpure(x)$/;"	f
gr	test/bitarray.jl	/^        gr(b) = (resize!(b, v1)[(v1÷2):end] .= 1; b)$/;"	f
grandparent	test/stacktraces.jl	/^    @noinline grandparent() = parent()$/;"	f
graphemes	base/strings/unicode.jl	/^graphemes(s::AbstractString) = GraphemeIterator{typeof(s)}(s)$/;"	f
graphemes	stdlib/Unicode/src/Unicode.jl	/^graphemes(s::AbstractString) = Base.Unicode.GraphemeIterator{typeof(s)}(s)$/;"	f
graphs	test/loading.jl	/^const graphs = Any[]$/;"	v
grisu	base/grisu/grisu.jl	/^function grisu(v::AbstractFloat,mode,requested_digits,buffer=DIGITSs[Threads.threadid()],bignums/;"	f
groups	src/llvm-multiversioning.cpp	/^    std::vector<Group> groups{};$/;"	m	struct:__anond5683ea40111::CloneCtx	typeref:typename:std::vector<Group>	file:
grow!	stdlib/Mmap/src/Mmap.jl	/^function grow!(io::IO, offset::Integer, len::Integer)$/;"	f
grow!	stdlib/Mmap/src/Mmap.jl	/^grow!(::Anonymous,o::Integer,l::Integer) = return$/;"	f
growFile	deps/srccache/patchelf-0.9/src/patchelf.cc	/^static void growFile(off_t newSize)$/;"	f	typeref:typename:void	file:
grow_stack	src/flisp/flisp.c	/^static void grow_stack(fl_context_t *fl_ctx)$/;"	f	typeref:typename:void	file:
grow_to!	base/array.jl	/^function grow_to!(dest, itr)$/;"	f
grow_to!	base/array.jl	/^function grow_to!(dest, itr, st)$/;"	f
grow_to!	base/dict.jl	/^function grow_to!(dest::AbstractDict{K, V}, itr) where V where K$/;"	f
grow_to!	base/dict.jl	/^function grow_to!(dest::AbstractDict{K,V}, itr, st) where V where K$/;"	f
grown_heap_age	src/gc.c	/^static int64_t grown_heap_age = 0;  \/\/ # of collects since live_bytes grew and remained$/;"	v	typeref:typename:int64_t	file:
gs_ctr	src/symbol.c	/^static uint32_t gs_ctr = 0;  \/\/ TODO: per-thread$/;"	v	typeref:typename:uint32_t	file:
gsname	src/flisp/flisp.h	/^    char gsname[2][16];$/;"	m	struct:_fl_context_t	typeref:typename:char[2][16]
gsnameno	src/flisp/flisp.h	/^    int gsnameno;$/;"	m	struct:_fl_context_t	typeref:typename:int
gt_bytes	deps/srccache/patchelf-0.9/src/elf.h	/^      Elf32_Word gt_bytes;		\/* This many bytes would be used.  *\/$/;"	m	struct:__anonff7a5869230a::__anonff7a58692508	typeref:typename:Elf32_Word
gt_current_g_value	deps/srccache/patchelf-0.9/src/elf.h	/^      Elf32_Word gt_current_g_value;	\/* -G value used for compilation.  *\/$/;"	m	struct:__anonff7a5869230a::__anonff7a58692408	typeref:typename:Elf32_Word
gt_entry	deps/srccache/patchelf-0.9/src/elf.h	/^    } gt_entry;				\/* Subsequent entries in section.  *\/$/;"	m	union:__anonff7a5869230a	typeref:struct:__anonff7a5869230a::__anonff7a58692508
gt_g_value	deps/srccache/patchelf-0.9/src/elf.h	/^      Elf32_Word gt_g_value;		\/* If this value were used for -G.  *\/$/;"	m	struct:__anonff7a5869230a::__anonff7a58692508	typeref:typename:Elf32_Word
gt_header	deps/srccache/patchelf-0.9/src/elf.h	/^    } gt_header;			\/* First entry in section.  *\/$/;"	m	union:__anonff7a5869230a	typeref:struct:__anonff7a5869230a::__anonff7a58692408
gt_unused	deps/srccache/patchelf-0.9/src/elf.h	/^      Elf32_Word gt_unused;		\/* Not used.  *\/$/;"	m	struct:__anonff7a5869230a::__anonff7a58692408	typeref:typename:Elf32_Word
gtsv!	stdlib/LinearAlgebra/src/lapack.jl	/^        function gtsv!(dl::AbstractVector{$elty}, d::AbstractVector{$elty}, du::AbstractVector{$/;"	f
gttrf!	stdlib/LinearAlgebra/src/lapack.jl	/^        function gttrf!(dl::AbstractVector{$elty}, d::AbstractVector{$elty}, du::AbstractVector{/;"	f
gttrs!	stdlib/LinearAlgebra/src/lapack.jl	/^        function gttrs!(trans::AbstractChar, dl::AbstractVector{$elty}, d::AbstractVector{$elty}/;"	f
guardseed	stdlib/Test/src/Test.jl	/^function guardseed(f::Function, r::AbstractRNG=default_rng())$/;"	f
guardseed	stdlib/Test/src/Test.jl	/^guardseed(f::Function, seed::Union{Vector{UInt32},Integer}) = guardseed() do$/;"	f
guardsigs	src/julia.h	/^    jl_svec_t *guardsigs;$/;"	m	struct:_jl_typemap_entry_t	typeref:typename:jl_svec_t *
guess	stdlib/Dates/src/ranges.jl	/^guess(a::Date, b::Date, c) = Int64(div(value(b - a), days(c)))$/;"	f
guess	stdlib/Dates/src/ranges.jl	/^guess(a::DateTime, b::DateTime, c) = floor(Int64, (Int128(value(b)) - Int128(value(a))) \/ toms(/;"	f
gv	src/jitlayers.h	/^typedef struct {Value *gv; int32_t index;} jl_value_llvm; \/\/ uses 1-based indexing$/;"	m	struct:__anona49ae9290108	typeref:typename:Value *
gv	test/offsetarray.jl	/^gv = view(g, -1:2)$/;"	v
gv	test/offsetarray.jl	/^gv = view(g, OffsetArray(-1:2, (-1,)))$/;"	v
gv	test/offsetarray.jl	/^gv = view(g, OffsetArray(-1:2, (-2,)))$/;"	v
gv_for_global	src/codegen.cpp	/^llvm::SmallVector<std::pair<jl_value_t**, GlobalVariable*>, 16> gv_for_global;$/;"	v	typeref:typename:llvm::SmallVector<std::pair<jl_value_t **,GlobalVariable * >,16>
gv_relocs	src/llvm-multiversioning.cpp	/^    std::vector<std::pair<Constant*,uint32_t>> gv_relocs{};$/;"	m	struct:__anond5683ea40111::CloneCtx	typeref:typename:std::vector<std::pair<Constant *,uint32_t>>	file:
gvar_record	src/staticdata.c	/^    ios_t *gvar_record;$/;"	m	struct:__anonc3a2e68f0108	typeref:typename:ios_t *	file:
gvars	src/llvm-multiversioning.cpp	/^    std::vector<Constant*> gvars;$/;"	m	struct:__anond5683ea40111::CloneCtx	typeref:typename:std::vector<Constant * >	file:
h	base/broadcast.jl	/^   h(w, x, y, z) = f(w, g(x, y), z)$/;"	f
h	base/compiler/ssair/show.jl	/^h() = g()$/;"	f
h	src/init.c	/^struct uv_shutdown_queue_item { uv_handle_t *h; struct uv_shutdown_queue_item *next; };$/;"	m	struct:uv_shutdown_queue_item	typeref:typename:uv_handle_t *	file:
h	stdlib/Dates/test/periods.jl	/^h = Dates.Hour(1)$/;"	v
h	stdlib/Dates/test/types.jl	/^h = Dates.Hour(1)$/;"	v
h	stdlib/InteractiveUtils/test/runtests.jl	/^    @noinline h() = (g(); f())$/;"	f
h	test/core.jl	/^    h() = (global sqrt; nothing)$/;"	f
h	test/core.jl	/^h(f) = II8978.callf() do$/;"	f
h	test/docs.jl	/^function h end$/;"	f
h	test/docs.jl	/^h(x = 1, y = 2, z = 3) = x + y + z$/;"	f
h	test/keywordargs.jl	/^        h(;x=x) = x$/;"	f
h	test/offsetarray.jl	/^h = OffsetArray([-1,1,-2,2,0], (-3,))$/;"	v
h	test/reflection.jl	/^h(; kwargs...) = 4$/;"	f
h	test/stacktraces.jl	/^@inline h(x) = (y = g(x); y)       # this test could be extended to check for that if we switch /;"	f
h	test/staged.jl	/^@generated function h(x)$/;"	f
h	test/syntax.jl	/^        h(::Val{x}) = 1$/;"	f
h11480	test/compiler/inference.jl	/^    function h11480(x::A{A{A{A{A{A{A{A{A{Int}}}}}}}}}) # enough for type_too_complex$/;"	f
h11840	test/core.jl	/^h11840(::DataType) = '1'$/;"	f
h11840	test/core.jl	/^h11840(::Type) = '2'$/;"	f
h11840	test/core.jl	/^h11840(::Type{T}) where {T<:Tuple} = '4'$/;"	f
h11840	test/core.jl	/^h11840(::UnionAll) = '3'$/;"	f
h15259	test/compiler/inference.jl	/^@eval h15259(x,y) = (a = $(Expr(:new, :A15259, :x, :y)); getfield(a, 3))$/;"	f
h16850	test/reflection.jl	/^h16850 = has_backslashes(Base)$/;"	v
h17449	test/core.jl	/^function h17449(v)$/;"	f
h18679	test/compiler/inference.jl	/^function h18679()$/;"	f
h19333	test/core.jl	/^function h19333()$/;"	f
h20343	test/compiler/inference.jl	/^function h20343()$/;"	f
h20704	test/compiler/inference.jl	/^h20704(@nospecialize(x)) = g20704(x)$/;"	f
h23685	test/compiler/inference.jl	/^h23685 = Node23685{Float64}()$/;"	v
h25579	test/compiler/inference.jl	/^function h25579(g)$/;"	f
h25835	stdlib/Test/test/runtests.jl	/^h25835(;x=1,y=1) = x isa Int ? x*y : (rand(Bool) ? 1.0 : 1)$/;"	f
h265	test/worlds.jl	/^h265() = true$/;"	f
h27268	test/syntax.jl	/^function h27268()$/;"	f
h27316	test/compiler/inference.jl	/^function h27316()$/;"	f
h27316_	test/compiler/inference.jl	/^h27316_(x) = (x,)$/;"	f
h27316_	test/compiler/inference.jl	/^h27316_(x::Tuple{Vector}) = (Any[x][1],)::R27316 # a UnionAll of a Tuple, not vice versa!$/;"	f
h28079	test/compiler/inference.jl	/^@inline h28079(x, args...) = g28079(x, args...)$/;"	f
h28356	test/compiler/inference.jl	/^h28356() = f28356(Any[Float64][1])$/;"	f
h28762	test/compiler/inference.jl	/^h28762(::Type{X}) where {X} = Array{f28762(X)}(undef, 0)$/;"	f
h2index	src/table.c	/^#define h2index(/;"	d	file:
h30098	test/compiler/inference.jl	/^h30098(f) = getfield(@__MODULE__, f)()$/;"	f
h30385	test/compiler/inference.jl	/^h30385(f, args...) = f(args...)$/;"	f
h4154	test/core.jl	/^h4154() = typeof(foo4154(rand(2,2,2)))$/;"	f
h5142	test/core.jl	/^function h5142(a::Bool)$/;"	f
h5142	test/core.jl	/^function h5142(a::Int)$/;"	f
h5142b	test/core.jl	/^function h5142b(a::Int)$/;"	f
h6614	test/core.jl	/^h6614((x, y) = (5, 6)) = (y, x)$/;"	f
h7652	test/core.jl	/^h7652() = setfield!(a7652, 1, 2)$/;"	f
hBtThread	src/signals-win.c	/^volatile HANDLE hBtThread = 0;$/;"	v	typeref:typename:volatile HANDLE
hMainThread	src/signals-win.c	/^HANDLE hMainThread = INVALID_HANDLE_VALUE;$/;"	v	typeref:typename:HANDLE
h_gen265	test/worlds.jl	/^@generated h_gen265(x) = :(f_gen265(x))$/;"	f
h_inlined	test/meta.jl	/^h_inlined() = g_inlined()$/;"	f
h_line	test/show.jl	/^h_line() = f_line()$/;"	f
h_noinlined	test/meta.jl	/^h_noinlined() = g_noinlined()$/;"	f
halfperm!	stdlib/SparseArrays/src/sparsematrix.jl	/^function halfperm!(X::AbstractSparseMatrixCSC{Tv,Ti}, A::AbstractSparseMatrixCSC{Tv,Ti},$/;"	f
handleSleep	src/jsvm-emscripten/asyncify_setup.js	/^        Asyncify.handleSleep = function (startAsync) {$/;"	f	function:Asyncify
handle_as	base/libuv.jl	/^macro handle_as(hand, typ)$/;"	f
handle_deserialize	stdlib/Serialization/src/Serialization.jl	/^function handle_deserialize(s::AbstractSerializer, b::Int32)$/;"	f
handle_message	base/logging.jl	/^function handle_message end$/;"	f
handle_message	base/logging.jl	/^function handle_message(logger::SimpleLogger, level, message, _module, group, id,$/;"	f
handle_message	base/logging.jl	/^handle_message(::NullLogger, args...; kwargs...) =$/;"	f
handle_message	stdlib/Logging/src/ConsoleLogger.jl	/^function handle_message(logger::ConsoleLogger, level, message, _module, group, id,$/;"	f
handle_message	stdlib/Test/src/logging.jl	/^function handle_message(logger::TestLogger, level, msg, _module,$/;"	f
handle_msg	stdlib/Distributed/src/process_messages.jl	/^function handle_msg(msg::CallMsg{:call_fetch}, header, r_stream, w_stream, version)$/;"	f
handle_msg	stdlib/Distributed/src/process_messages.jl	/^function handle_msg(msg::CallMsg{:call}, header, r_stream, w_stream, version)$/;"	f
handle_msg	stdlib/Distributed/src/process_messages.jl	/^function handle_msg(msg::CallWaitMsg, header, r_stream, w_stream, version)$/;"	f
handle_msg	stdlib/Distributed/src/process_messages.jl	/^function handle_msg(msg::IdentifySocketAckMsg, header, r_stream, w_stream, version)$/;"	f
handle_msg	stdlib/Distributed/src/process_messages.jl	/^function handle_msg(msg::IdentifySocketMsg, header, r_stream, w_stream, version)$/;"	f
handle_msg	stdlib/Distributed/src/process_messages.jl	/^function handle_msg(msg::JoinCompleteMsg, header, r_stream, w_stream, version)$/;"	f
handle_msg	stdlib/Distributed/src/process_messages.jl	/^function handle_msg(msg::JoinPGRPMsg, header, r_stream, w_stream, version)$/;"	f
handle_msg	stdlib/Distributed/src/process_messages.jl	/^function handle_msg(msg::RemoteDoMsg, header, r_stream, w_stream, version)$/;"	f
handle_msg	stdlib/Distributed/src/process_messages.jl	/^function handle_msg(msg::ResultMsg, header, r_stream, w_stream, version)$/;"	f
handle_on_m22098	test/core.jl	/^handle_on_m22098 = getfield(@__MODULE__, Symbol("@m22098"))$/;"	v
handle_signals	src/julia.h	/^    int8_t handle_signals;$/;"	m	struct:__anon055fe4271808	typeref:typename:int8_t
handle_single_case!	base/compiler/ssair/inlining.jl	/^function handle_single_case!(ir::IRCode, stmt::Expr, idx::Int, @nospecialize(case), isinvoke::Bo/;"	f
handle_zero	base/printf.jl	/^macro handle_zero(ex, digits)$/;"	f
handlenegative	base/printf.jl	/^function handlenegative(d::Integer)$/;"	f
handlenegative	base/printf.jl	/^handlenegative(d::Unsigned) = (false, d)$/;"	f
handler	test/core.jl	/^    function handler(append)$/;"	f
harddivs	test/complex.jl	/^harddivs = ((1.0+im*1.0, 1.0+im*2^1023.0, 2^-1023.0-im*2^-1023.0), #1$/;"	v
has-break-or-continue?	src/julia-syntax.scm	/^(define (has-break-or-continue? e)$/;"	f
has-dups	src/utils.scm	/^(define (has-dups lst)$/;"	f
has-parameters?	src/julia-parser.scm	/^(define (has-parameters? lst)$/;"	f
has-return?	src/julia-syntax.scm	/^(define (has-return? e)$/;"	f
has-unmatched-symbolic-goto?	src/julia-syntax.scm	/^(define (has-unmatched-symbolic-goto? e)$/;"	f
hasObjref	src/llvm-alloc-opt.cpp	/^static bool hasObjref(Type *ty)$/;"	f	namespace:__anon0a1571000111	typeref:typename:bool	file:
has_arg	src/getopt.h	/^  int has_arg;$/;"	m	struct:option	typeref:typename:int
has_backslashes	test/reflection.jl	/^function has_backslashes(f::Function)$/;"	f
has_backslashes	test/reflection.jl	/^function has_backslashes(meth::Method)$/;"	f
has_backslashes	test/reflection.jl	/^function has_backslashes(mod::Module)$/;"	f
has_backslashes	test/reflection.jl	/^has_backslashes(x) = nothing$/;"	f
has_bottom_parameter	base/reflection.jl	/^function has_bottom_parameter(t::DataType)$/;"	f
has_bottom_parameter	base/reflection.jl	/^has_bottom_parameter(::Any) = false$/;"	f
has_bottom_parameter	base/reflection.jl	/^has_bottom_parameter(t::TypeVar) = has_bottom_parameter(t.ub)$/;"	f
has_bottom_parameter	base/reflection.jl	/^has_bottom_parameter(t::Union) = has_bottom_parameter(t.a) & has_bottom_parameter(t.b)$/;"	f
has_bottom_parameter	base/reflection.jl	/^has_bottom_parameter(t::UnionAll) = has_bottom_parameter(unwrap_unionall(t))$/;"	f
has_bottom_parameter	base/reflection.jl	/^has_bottom_parameter(t::typeof(Bottom)) = true$/;"	f
has_cloneall	src/llvm-multiversioning.cpp	/^    bool has_cloneall{false};$/;"	m	struct:__anond5683ea40111::CloneCtx	typeref:typename:bool	file:
has_concrete_subtype	src/julia.h	/^    uint8_t has_concrete_subtype; \/\/ If clear, no value will have this datatype$/;"	m	struct:_jl_datatype_t	typeref:typename:uint8_t
has_fast_linear_indexing	base/reducedim.jl	/^has_fast_linear_indexing(a::AbstractArray) = false$/;"	f
has_fast_linear_indexing	base/reducedim.jl	/^has_fast_linear_indexing(a::Array) = true$/;"	f
has_free_typevars	base/reflection.jl	/^has_free_typevars(@nospecialize(t)) = ccall(:jl_has_free_typevars, Cint, (Any,), t) != 0$/;"	f
has_free_typevars	src/jltypes.c	/^static int has_free_typevars(jl_value_t *v, jl_typeenv_t *env) JL_NOTSAFEPOINT$/;"	f	typeref:typename:int	file:
has_marked	src/gc.h	/^    uint8_t has_marked;$/;"	m	struct:__anoncf30557c1108	typeref:typename:uint8_t
has_nondefault_cmd_flags	base/cmd.jl	/^has_nondefault_cmd_flags(c::Cmd) =$/;"	f
has_nontrivial_const_info	base/compiler/typeutils.jl	/^function has_nontrivial_const_info(@nospecialize t)$/;"	f
has_offset_axes	base/abstractarray.jl	/^has_offset_axes(::Colon) = false$/;"	f
has_offset_axes	base/abstractarray.jl	/^has_offset_axes(A)    = _tuple_any(x->first(x)!=1, axes(A))$/;"	f
has_offset_axes	base/abstractarray.jl	/^has_offset_axes(A...) = _tuple_any(has_offset_axes, A)$/;"	f
has_sret	src/codegen.cpp	/^    bool has_sret = false;$/;"	m	class:jl_codectx_t	typeref:typename:bool	file:
has_tight_type	base/show.jl	/^has_tight_type(p::Pair) =$/;"	f
has_typevar	base/show.jl	/^has_typevar(@nospecialize(t), v::TypeVar) = ccall(:jl_has_typevar, Cint, (Any, Any), t, v)!=0$/;"	f
has_unbound_vars	stdlib/Test/src/Test.jl	/^function has_unbound_vars(@nospecialize sig)$/;"	f
has_unused	stdlib/InteractiveUtils/test/runtests.jl	/^has_unused() = (a = rand(5))$/;"	f
has_veccall	src/llvm-multiversioning.cpp	/^    bool has_veccall{false};$/;"	m	struct:__anond5683ea40111::CloneCtx	typeref:typename:bool	file:
has_young	src/gc.h	/^    uint8_t has_young;$/;"	m	struct:__anoncf30557c1108	typeref:typename:uint8_t
hasaggr	src/llvm-alloc-opt.cpp	/^        bool hasaggr:1;$/;"	m	struct:__anon0a1571000111::Optimizer::Field	typeref:typename:bool:1	file:
hasbt	test/backtrace.jl	/^hasbt = hasbt2 = false$/;"	v
hascolor	stdlib/REPL/src/Terminals.jl	/^    function hascolor(t::TTYTerminal)$/;"	f
hascolor	stdlib/REPL/src/Terminals.jl	/^    hascolor(t::TTYTerminal) = true$/;"	f
hascolor	stdlib/REPL/src/Terminals.jl	/^hascolor(::TextTerminal) = false$/;"	f
hasfastin	base/abstractset.jl	/^hasfastin(::Type) = false$/;"	f
hasfastin	base/abstractset.jl	/^hasfastin(::Union{Type{<:AbstractSet},Type{<:AbstractDict},Type{<:AbstractRange}}) = true$/;"	f
hasfastin	base/abstractset.jl	/^hasfastin(x) = hasfastin(typeof(x))$/;"	f
hasfield	base/reflection.jl	/^function hasfield(::Type{T}, name::Symbol) where T$/;"	f
hasfreetypevars	src/julia.h	/^    uint8_t hasfreetypevars; \/\/ majority part of isconcrete computation$/;"	m	struct:_jl_datatype_t	typeref:typename:uint8_t
hash	base/abstractarray.jl	/^function hash(A::AbstractArray, h::UInt)$/;"	f
hash	base/abstractdict.jl	/^function hash(a::AbstractDict, h::UInt)$/;"	f
hash	base/char.jl	/^hash(x::AbstractChar, h::UInt) = hash(Char(x), h)$/;"	f
hash	base/char.jl	/^hash(x::Char, h::UInt) =$/;"	f
hash	base/cmd.jl	/^hash(x::AndCmds, h::UInt) = hash(x.a, hash(x.b, h))$/;"	f
hash	base/cmd.jl	/^hash(x::Cmd, h::UInt) = hash(x.exec, hash(x.env, hash(x.ignorestatus, hash(x.dir, hash(x.flags, /;"	f
hash	base/complex.jl	/^function hash(z::Complex, h::UInt)$/;"	f
hash	base/docs/utils.jl	/^hash(t::T, h::UInt) where {T<:Union{HTML,Text}} = hash(T, hash(t.content, h))$/;"	f
hash	base/float.jl	/^hash(x::Float32, h::UInt) = hash(Float64(x), h)$/;"	f
hash	base/float.jl	/^hash(x::Float64, h::UInt) = isnan(x) ? (hx_NaN ⊻ h) : hx(fptoui(UInt64, abs(x)), x, h)$/;"	f
hash	base/float.jl	/^hash(x::Int64,   h::UInt) = hx(reinterpret(UInt64, abs(x)), Float64(x), h)$/;"	f
hash	base/float.jl	/^hash(x::UInt64,  h::UInt) = hx(x, Float64(x), h)$/;"	f
hash	base/float.jl	/^hash(x::Union{Bool,Int8,UInt8,Int16,UInt16,Int32,UInt32}, h::UInt) = hash(Int64(x), h)$/;"	f
hash	base/hashing.jl	/^    hash(x::Expr, h::UInt) = hash(x.args, hash(x.head, h + 0x83c7900696d26dc6))$/;"	f
hash	base/hashing.jl	/^    hash(x::Expr, h::UInt) = hash(x.args, hash(x.head, h + 0x96d26dc6))$/;"	f
hash	base/hashing.jl	/^    hash(x::QuoteNode, h::UInt) = hash(x.value, h + 0x2c97bf8b3de87020)$/;"	f
hash	base/hashing.jl	/^    hash(x::QuoteNode, h::UInt) = hash(x.value, h + 0x469d72af)$/;"	f
hash	base/hashing.jl	/^hash(@nospecialize(x), h::UInt) = hash_uint(3h - objectid(x))$/;"	f
hash	base/hashing.jl	/^hash(w::WeakRef, h::UInt) = hash(w.value, h)$/;"	f
hash	base/hashing.jl	/^hash(x::Any) = hash(x, zero(UInt))$/;"	f
hash	base/hashing2.jl	/^function hash(s::Union{String,SubString{String}}, h::UInt)$/;"	f
hash	base/hashing2.jl	/^function hash(x::Rational{<:BitInteger64}, h::UInt)$/;"	f
hash	base/hashing2.jl	/^function hash(x::Real, h::UInt)$/;"	f
hash	base/hashing2.jl	/^hash(s::AbstractString, h::UInt) = hash(String(s), h)$/;"	f
hash	base/hashing2.jl	/^hash(x::Float16, h::UInt) = hash(Float64(x), h)$/;"	f
hash	base/irrationals.jl	/^hash(x::Irrational, h::UInt) = 3*objectid(x) - h$/;"	f
hash	base/loading.jl	/^function hash(pkg::PkgId, h::UInt)$/;"	f
hash	base/loading.jl	/^hash(a::SHA1, h::UInt) = hash((SHA1, a.bytes), h)$/;"	f
hash	base/multidimensional.jl	/^hash(x::Prehashed) = x.hash$/;"	f
hash	base/namedtuple.jl	/^hash(x::NamedTuple, h::UInt) = xor(objectid(_nt_names(x)), hash(Tuple(x), h))$/;"	f
hash	base/pair.jl	/^hash(p::Pair, h::UInt) = hash(p.second, hash(p.first, h))$/;"	f
hash	base/regex.jl	/^function hash(r::Regex, h::UInt)$/;"	f
hash	base/secretbuffer.jl	/^hash(s::SecretBuffer, h::UInt) = hash(_sb_hash, h)$/;"	f
hash	base/set.jl	/^function hash(s::AbstractSet, h::UInt)$/;"	f
hash	base/stacktraces.jl	/^function hash(frame::StackFrame, h::UInt)$/;"	f
hash	base/strings/unicode.jl	/^hash(g::GraphemeIterator, h::UInt) = hash(g.s, h)$/;"	f
hash	base/tuple.jl	/^function hash(t::Any16, h::UInt)$/;"	f
hash	base/tuple.jl	/^hash(::Tuple{}, h::UInt) = h + tuplehash_seed$/;"	f
hash	base/tuple.jl	/^hash(t::Tuple, h::UInt) = hash(t[1], hash(tail(t), h))$/;"	f
hash	base/version.jl	/^function hash(v::VersionNumber, h::UInt)$/;"	f
hash	src/flisp/flisp.h	/^    uint32_t hash;$/;"	m	struct:_symbol_t	typeref:typename:uint32_t
hash	src/julia.h	/^    intptr_t hash;$/;"	m	struct:__anon055fe4270a08	typeref:typename:intptr_t
hash	src/julia.h	/^    uintptr_t hash;    \/\/ precomputed hash value$/;"	m	struct:_jl_sym_t	typeref:typename:uintptr_t
hash	stdlib/Distributed/src/messages.jl	/^hash(r::RRID, h::UInt) = hash(r.whence, hash(r.id, h))$/;"	f
hash	stdlib/Distributed/src/remotecall.jl	/^hash(r::AbstractRemoteRef, h::UInt) = hash(r.whence, hash(r.id, h))$/;"	f
hash	stdlib/Distributed/test/distributed_exec.jl	/^    hash(x::TestSerCnt, h::UInt) = hash(hash(x.v), h)$/;"	f
hash	stdlib/Random/src/DSFMT.jl	/^hash(s::DSFMT_state, h::UInt) = hash(s.val, h)$/;"	f
hash	stdlib/Random/src/RNGs.jl	/^hash(r::MersenneTwister, h::UInt) =$/;"	f
hash	test/dict.jl	/^    @test hash(Dict(Dict(1=>2) => 3, Dict(4=>5) => 6)) != hash(Dict(Dict(4=>5) => 3, Dict(1=>2) /;"	f
hash	test/dict.jl	/^hash(x::I1438T, h::UInt) = hash(x.id, h)$/;"	f
hash	test/precompile.jl	/^              function hash(a::typeA, h::UInt)$/;"	f
hash	test/precompile.jl	/^              hash(x::typeB) = hash(x.y)$/;"	f
hash_0_imag	base/complex.jl	/^const hash_0_imag = hash(0, h_imag)$/;"	v
hash_32_32	base/hashing.jl	/^function hash_32_32(n::UInt32)$/;"	f
hash_64_32	base/hashing.jl	/^function hash_64_32(n::UInt64)$/;"	f
hash_64_64	base/hashing.jl	/^function hash_64_64(n::UInt64)$/;"	f
hash_integer	base/hashing2.jl	/^function hash_integer(n::BigInt, h::UInt)$/;"	f
hash_integer	base/hashing2.jl	/^function hash_integer(n::Integer, h::UInt)$/;"	f
hash_lispvalue	src/flisp/equal.c	/^uintptr_t hash_lispvalue(fl_context_t *fl_ctx, value_t a)$/;"	f	typeref:typename:uintptr_t
hash_size	src/table.c	/^#define hash_size(/;"	d	file:
hash_str	stdlib/LibGit2/src/blob.jl	/^hash_str = string(commit_oid)$/;"	v
hash_svec	src/builtins.c	/^static uintptr_t NOINLINE hash_svec(jl_svec_t *v) JL_NOTSAFEPOINT$/;"	f	typeref:typename:uintptr_t NOINLINE	file:
hash_symbol	src/symbol.c	/^static uintptr_t hash_symbol(const char *str, size_t len) JL_NOTSAFEPOINT$/;"	f	typeref:typename:uintptr_t	file:
hash_uint	base/hashing.jl	/^    hash_uint(x::UInt)     = hash_32_32(x)$/;"	f
hash_uint	base/hashing.jl	/^    hash_uint(x::UInt)     = hash_64_64(x)$/;"	f
hash_uint64	base/hashing.jl	/^    hash_uint64(x::UInt64) = hash_64_32(x)$/;"	f
hash_uint64	base/hashing.jl	/^    hash_uint64(x::UInt64) = hash_64_64(x)$/;"	f
hasha_seed	base/abstractdict.jl	/^const hasha_seed = UInt === UInt64 ? 0x6d35bb51952d5539 : 0x952d5539$/;"	v
hashheader	stdlib/Markdown/src/Common/block.jl	/^function hashheader(stream::IO, md::MD)$/;"	f
hashindex	base/dict.jl	/^hashindex(key, sz) = (((hash(key)%Int) & (sz-1)) + 1)::Int$/;"	f
hashre_seed	base/regex.jl	/^const hashre_seed = UInt === UInt64 ? 0x67e195eb8555e72d : 0xe32373e4$/;"	v
hashs_seed	base/set.jl	/^const hashs_seed = UInt === UInt64 ? 0x852ada37cfe8e0ce : 0xcfe8e0ce$/;"	v
haskey	base/abstractdict.jl	/^haskey(d::AbstractDict, k) = in(k, keys(d))$/;"	f
haskey	base/dict.jl	/^function haskey(dict::ImmutableDict, key)$/;"	f
haskey	base/dict.jl	/^haskey(h::Dict, key) = (ht_keyindex(h, key) >= 0)$/;"	f
haskey	base/iterators.jl	/^haskey(v::Pairs, key) = (key in v.itr)$/;"	f
haskey	base/namedtuple.jl	/^haskey(nt::NamedTuple, key::Union{Integer, Symbol}) = isdefined(nt, key)$/;"	f
haskey	base/show.jl	/^haskey(io::IO, key) = false$/;"	f
haskey	base/show.jl	/^haskey(io::IOContext, key) = haskey(io.dict, key)$/;"	f
haskey	base/stream.jl	/^haskey(::TTY, key::Symbol) = key === :color$/;"	f
haskey	base/weakkeydict.jl	/^haskey(wkh::WeakKeyDict{K}, key) where {K} = lock(() -> haskey(wkh.ht, key), wkh)$/;"	f
haslength	base/generator.jl	/^haslength(iter) = IteratorSize(iter) isa Union{HasShape, HasLength}$/;"	f
hasload	src/llvm-alloc-opt.cpp	/^        bool hasload:1;$/;"	m	struct:__anon0a1571000111::Optimizer::AllocUseInfo	typeref:typename:bool:1	file:
hasload	src/llvm-alloc-opt.cpp	/^        bool hasload:1;$/;"	m	struct:__anon0a1571000111::Optimizer::Field	typeref:typename:bool:1	file:
hasme	test/backtrace.jl	/^hasme = hasbtmacro = false$/;"	v
hasmemset	src/llvm-alloc-opt.cpp	/^        bool hasmemset:1;$/;"	m	struct:__anon0a1571000111::Optimizer::AllocUseInfo	typeref:typename:bool:1	file:
hasmethod	base/reflection.jl	/^function hasmethod(@nospecialize(f), @nospecialize(t), kwnames::Tuple{Vararg{Symbol}}; world=typ/;"	f
hasmethod	base/reflection.jl	/^function hasmethod(@nospecialize(f), @nospecialize(t); world=typemax(UInt))$/;"	f
hasobjref	src/llvm-alloc-opt.cpp	/^        bool hasobjref:1;$/;"	m	struct:__anon0a1571000111::Optimizer::Field	typeref:typename:bool:1	file:
haspadding	src/julia.h	/^    uint32_t haspadding : 1; \/\/ has internal undefined bytes$/;"	m	struct:__anon055fe4270f08	typeref:typename:uint32_t:1
hasparent	src/flisp/flisp.h	/^#define hasparent(/;"	d
haspreserve	src/llvm-alloc-opt.cpp	/^        bool haspreserve:1;$/;"	m	struct:__anon0a1571000111::Optimizer::AllocUseInfo	typeref:typename:bool:1	file:
hasproperty	base/reflection.jl	/^hasproperty(x, s::Symbol) = s in propertynames(x)$/;"	f
hastoplevel	test/backtrace.jl	/^hastoplevel = false$/;"	v
hastypemax	base/gmp.jl	/^hastypemax(::Type{BigInt}) = false$/;"	f
hastypemax	base/intfuncs.jl	/^hastypemax(::Base.BitIntegerType) = true$/;"	f
hastypemax	base/intfuncs.jl	/^hastypemax(::Type{T}) where {T} = applicable(typemax, T)$/;"	f
hasuniquerep	base/compiler/typeutils.jl	/^function hasuniquerep(@nospecialize t)$/;"	f
hasunknownmem	src/llvm-alloc-opt.cpp	/^        bool hasunknownmem:1;$/;"	m	struct:__anon0a1571000111::Optimizer::AllocUseInfo	typeref:typename:bool:1	file:
hasvalue	src/julia.h	/^    uint8_t hasvalue;$/;"	m	struct:__anon055fe4271908	typeref:typename:uint8_t
hasvalue	src/julia.h	/^    uint8_t hasvalue;$/;"	m	struct:__anon055fe4271a08	typeref:typename:uint8_t
haswell	src/processor_x86.cpp	/^constexpr auto haswell = ivybridge | get_feature_masks(avx2, bmi, bmi2, fma, lzcnt, movbe);$/;"	v	namespace:X86::Feature	typeref:typename:auto
have	base/docs/basedocs.jl	/^module have been executed). Because it is called *after* fully importing the module, `__init__`$/;"	f
have_backtrace_fiber	src/signals-win.c	/^static int have_backtrace_fiber;$/;"	v	typeref:typename:int	file:
have_color	base/client.jl	/^have_color = false$/;"	v
have_repl	contrib/generate_precompile.jl	/^have_repl =  haskey(Base.loaded_modules,$/;"	v
havebb	test/spawn.jl	/^havebb = false$/;"	v
hbmv	stdlib/LinearAlgebra/src/blas.jl	/^        function hbmv(uplo::AbstractChar, k::Integer, A::AbstractMatrix{$elty}, x::AbstractVecto/;"	f
hbmv	stdlib/LinearAlgebra/src/blas.jl	/^        function hbmv(uplo::AbstractChar, k::Integer, alpha::($elty), A::AbstractMatrix{$elty}, /;"	f
hbmv!	stdlib/LinearAlgebra/src/blas.jl	/^        function hbmv!(uplo::AbstractChar, k::Integer, alpha::($elty), A::AbstractMatrix{$elty},/;"	f
hcat	base/abstractarray.jl	/^hcat(A::AbstractArray) = cat(A; dims=Val(2))$/;"	f
hcat	base/abstractarray.jl	/^hcat(A::AbstractArray, B::AbstractArray) = cat(A, B; dims=Val(2))$/;"	f
hcat	base/abstractarray.jl	/^hcat(A::AbstractArray...) = cat(A...; dims=Val(2))$/;"	f
hcat	base/abstractarray.jl	/^hcat(A::AbstractVecOrMat...) = typed_hcat(promote_eltype(A...), A...)$/;"	f
hcat	base/abstractarray.jl	/^hcat(A::AbstractVecOrMat{T}...) where {T} = typed_hcat(T, A...)$/;"	f
hcat	base/abstractarray.jl	/^hcat(X...) = cat(X...; dims=Val(2))$/;"	f
hcat	base/abstractarray.jl	/^hcat(X::Number...) = hvcat_fill(Matrix{promote_typeof(X...)}(undef, 1,length(X)), X)$/;"	f
hcat	base/abstractarray.jl	/^hcat(X::T...) where {T<:Number} = T[ X[j] for i=1:1, j=1:length(X) ]$/;"	f
hcat	base/abstractarray.jl	/^hcat(X::T...) where {T}         = T[ X[j] for i=1:1, j=1:length(X) ]$/;"	f
hcat	base/array.jl	/^function hcat(V::Vector{T}...) where T$/;"	f
hcat	base/array.jl	/^hcat() = Vector{Any}()$/;"	f
hcat	base/bitarray.jl	/^function hcat(A::Union{BitMatrix,BitVector}...)$/;"	f
hcat	base/bitarray.jl	/^function hcat(B::BitVector...)$/;"	f
hcat	stdlib/LinearAlgebra/src/adjtrans.jl	/^hcat(avs::Adjoint{<:Any,<:Vector}...) = _adjoint_hcat(avs...)$/;"	f
hcat	stdlib/LinearAlgebra/src/adjtrans.jl	/^hcat(avs::Adjoint{T,Vector{T}}...) where {T} = _adjoint_hcat(avs...)$/;"	f
hcat	stdlib/LinearAlgebra/src/adjtrans.jl	/^hcat(avs::Union{Number,AdjointAbsVec}...) = _adjoint_hcat(avs...)$/;"	f
hcat	stdlib/LinearAlgebra/src/adjtrans.jl	/^hcat(tvs::Transpose{<:Any,<:Vector}...) = _transpose_hcat(tvs...)$/;"	f
hcat	stdlib/LinearAlgebra/src/adjtrans.jl	/^hcat(tvs::Transpose{T,Vector{T}}...) where {T} = _transpose_hcat(tvs...)$/;"	f
hcat	stdlib/LinearAlgebra/src/adjtrans.jl	/^hcat(tvs::Union{Number,TransposeAbsVec}...) = _transpose_hcat(tvs...)$/;"	f
hcat	stdlib/SparseArrays/src/sparsematrix.jl	/^function hcat(X::AbstractSparseMatrixCSC...)$/;"	f
hcat	stdlib/SparseArrays/src/sparsevector.jl	/^function hcat(Xin::_SparseConcatGroup...)$/;"	f
hcat	stdlib/SparseArrays/src/sparsevector.jl	/^hcat(A::Vector...) = Base.typed_hcat(promote_eltype(A...), A...)$/;"	f
hcat	stdlib/SparseArrays/src/sparsevector.jl	/^hcat(A::_DenseConcatGroup...) = Base.typed_hcat(promote_eltype(A...), A...)$/;"	f
hcat	stdlib/SparseArrays/src/sparsevector.jl	/^hcat(A::_TypedDenseConcatGroup{T}...) where {T} = Base.typed_hcat(T, A...)$/;"	f
hcat	stdlib/SparseArrays/src/sparsevector.jl	/^hcat(X::AbstractSparseVector{Tv,Ti}...) where {Tv,Ti<:Integer} = _absspvec_hcat(X...)$/;"	f
hcat	stdlib/SparseArrays/src/sparsevector.jl	/^hcat(X::SparseVector{Tv,Ti}...) where {Tv,Ti<:Integer} = _absspvec_hcat(X...)$/;"	f
hcat	stdlib/SparseArrays/src/sparsevector.jl	/^hcat(Xin::Union{Vector, AbstractSparseVector}...) = hcat(map(sparse, Xin)...)$/;"	f
hdr	deps/srccache/patchelf-0.9/src/patchelf.cc	/^    Elf_Ehdr * hdr;$/;"	m	class:ElfFile	typeref:typename:Elf_Ehdr *	file:
head	src/julia.h	/^    jl_sym_t *head;$/;"	m	struct:__anon055fe4271408	typeref:typename:JL_DATA_TYPE jl_sym_t *
head	stdlib/LibGit2/src/LibGit2.jl	/^function head(pkg::AbstractString)$/;"	f
head	stdlib/LibGit2/src/reference.jl	/^function head(repo::GitRepo)$/;"	f
head!	stdlib/LibGit2/src/reference.jl	/^function head!(repo::GitRepo, ref::GitReference)$/;"	f
head_and_tail	stdlib/Distributed/src/pmap.jl	/^function head_and_tail(c, n)$/;"	f
head_oid	stdlib/LibGit2/src/LibGit2.jl	/^head_oid = LibGit2.head_oid(repo)$/;"	v
head_oid	stdlib/LibGit2/src/repository.jl	/^function head_oid(repo::GitRepo)$/;"	f
header	src/gc.h	/^        uintptr_t header;$/;"	m	union:_bigval_t::__anoncf30557c0f0a	typeref:typename:uintptr_t
header	src/julia.h	/^        uintptr_t header;$/;"	m	union:_jl_taggedvalue_t::__anon055fe427010a	typeref:typename:uintptr_t
header	stdlib/REPL/src/TerminalMenus/AbstractMenu.jl	/^header(m::AbstractMenu) = ""$/;"	f
header	stdlib/REPL/src/TerminalMenus/MultiSelectMenu.jl	/^header(m::MultiSelectMenu) = "[press: d=done, a=all, n=none]"$/;"	f
headname	stdlib/LibGit2/src/repository.jl	/^function headname(repo::GitRepo)$/;"	f
heads	base/tuple.jl	/^heads(ts::Tuple...) = map(t -> t[1], ts)$/;"	f
heap	src/julia_threads.h	/^    jl_thread_heap_t heap;$/;"	m	struct:_jl_tls_states_t	typeref:typename:jl_thread_heap_t
heap_c	src/partr.c	/^static const int heap_c = 2;$/;"	v	typeref:typename:const int	file:
heap_d	src/partr.c	/^static const int32_t heap_d = 8;$/;"	v	typeref:typename:const int32_t	file:
heap_p	src/partr.c	/^static int32_t heap_p;$/;"	v	typeref:typename:int32_t	file:
heaps	src/partr.c	/^static taskheap_t *heaps;$/;"	v	typeref:typename:taskheap_t *	file:
heapsize	src/flisp/flisp.h	/^    uint32_t heapsize;\/\/bytes$/;"	m	struct:_fl_context_t	typeref:typename:uint32_t
height	stdlib/REPL/src/Terminals.jl	/^height(t::TextTerminal) = displaysize(t)[1]$/;"	f
hello	test/docs.jl	/^    function hello(param::Vector{In64_nOt_DeFiNeD__})$/;"	f
help	doc/Makefile	/^help:$/;"	t
helpmode	stdlib/REPL/src/docview.jl	/^helpmode(io::IO, line::AbstractString) = :($REPL.insert_hlines($io, $(REPL._helpmode(io, line)))/;"	f
helpmode	stdlib/REPL/src/docview.jl	/^helpmode(line::AbstractString) = helpmode(stdout, line)$/;"	f
hemm	stdlib/LinearAlgebra/src/blas.jl	/^        function hemm(side::AbstractChar, uplo::AbstractChar, A::AbstractMatrix{$elty}, B::Abstr/;"	f
hemm	stdlib/LinearAlgebra/src/blas.jl	/^        function hemm(side::AbstractChar, uplo::AbstractChar, alpha::($elty), A::AbstractMatrix{/;"	f
hemm!	stdlib/LinearAlgebra/src/blas.jl	/^        function hemm!(side::AbstractChar, uplo::AbstractChar, alpha::Union{($elty), Bool},$/;"	f
hemv	stdlib/LinearAlgebra/src/blas.jl	/^        function hemv(uplo::AbstractChar, A::AbstractMatrix{$elty}, x::AbstractVector{$elty})$/;"	f
hemv	stdlib/LinearAlgebra/src/blas.jl	/^        function hemv(uplo::AbstractChar, α::($elty), A::AbstractMatrix{$elty}, x::AbstractVect/;"	f
hemv!	stdlib/LinearAlgebra/src/blas.jl	/^        function hemv!(uplo::AbstractChar, α::Union{$elty, Bool}, A::AbstractMatrix{$elty}, x::/;"	f
her!	stdlib/LinearAlgebra/src/blas.jl	/^        function her!(uplo::AbstractChar, α::$relty, x::AbstractVector{$elty}, A::AbstractMatri/;"	f
her!	stdlib/LinearAlgebra/src/blas.jl	/^function her! end$/;"	f
her2k	stdlib/LinearAlgebra/src/blas.jl	/^       function her2k(uplo::AbstractChar, trans::AbstractChar, alpha::($elty1), A::AbstractVecOr/;"	f
her2k	stdlib/LinearAlgebra/src/blas.jl	/^       her2k(uplo::AbstractChar, trans::AbstractChar, A::AbstractVecOrMat{$elty1}, B::AbstractVe/;"	f
her2k!	stdlib/LinearAlgebra/src/blas.jl	/^       function her2k!(uplo::AbstractChar, trans::AbstractChar, alpha::($elty1),$/;"	f
herk	stdlib/LinearAlgebra/src/blas.jl	/^       function herk(uplo::AbstractChar, trans::AbstractChar, α::$relty, A::AbstractVecOrMat{$e/;"	f
herk	stdlib/LinearAlgebra/src/blas.jl	/^       herk(uplo::AbstractChar, trans::AbstractChar, A::AbstractVecOrMat{$elty}) = herk(uplo, tr/;"	f
herk	stdlib/LinearAlgebra/src/blas.jl	/^function herk end$/;"	f
herk!	stdlib/LinearAlgebra/src/blas.jl	/^       function herk!(uplo::AbstractChar, trans::AbstractChar,$/;"	f
herk!	stdlib/LinearAlgebra/src/blas.jl	/^function herk! end$/;"	f
herk_wrapper!	stdlib/LinearAlgebra/src/matmul.jl	/^function herk_wrapper!(C::Union{StridedMatrix{T}, StridedMatrix{Complex{T}}}, tA::AbstractChar, /;"	f
hermitian	stdlib/LinearAlgebra/src/symmetric.jl	/^hermitian(A::AbstractMatrix, uplo::Symbol) = Hermitian(A, uplo)$/;"	f
hermitian	stdlib/LinearAlgebra/src/symmetric.jl	/^hermitian(A::Number, ::Symbol) = convert(typeof(A), real(A))$/;"	f
hermitian_type	stdlib/LinearAlgebra/src/symmetric.jl	/^function hermitian_type(::Type{T}) where {S, T<:AbstractMatrix{S}}$/;"	f
hermitian_type	stdlib/LinearAlgebra/src/symmetric.jl	/^function hermitian_type(::Type{T}) where {S<:AbstractMatrix, T<:AbstractMatrix{S}}$/;"	f
hermitian_type	stdlib/LinearAlgebra/src/symmetric.jl	/^function hermitian_type(::Type{T}) where {S<:Number, T<:AbstractMatrix{S}}$/;"	f
hermitian_type	stdlib/LinearAlgebra/src/symmetric.jl	/^hermitian_type(::Type{T}) where {T<:Number} = T$/;"	f
hessenberg!	stdlib/LinearAlgebra/src/hessenberg.jl	/^function hessenberg!(A::Union{Symmetric{<:BlasReal},Hermitian{<:BlasFloat}})$/;"	f
hessenberg!	stdlib/LinearAlgebra/src/hessenberg.jl	/^hessenberg!(A::StridedMatrix{<:BlasFloat}) = Hessenberg(LAPACK.gehrd!(A)...)$/;"	f
hesv!	stdlib/LinearAlgebra/src/lapack.jl	/^        function hesv!(uplo::AbstractChar, A::AbstractMatrix{$elty}, B::AbstractVecOrMat{$elty})$/;"	f
hesv_rook!	stdlib/LinearAlgebra/src/lapack.jl	/^        function hesv_rook!(uplo::AbstractChar, A::AbstractMatrix{$elty}, B::AbstractVecOrMat{$e/;"	f
hetrd!	stdlib/LinearAlgebra/src/lapack.jl	/^        function hetrd!(uplo::AbstractChar, A::AbstractMatrix{$elty})$/;"	f
hetrf!	stdlib/LinearAlgebra/src/lapack.jl	/^        function hetrf!(uplo::AbstractChar, A::AbstractMatrix{$elty})$/;"	f
hetrf_rook!	stdlib/LinearAlgebra/src/lapack.jl	/^        function hetrf_rook!(uplo::AbstractChar, A::AbstractMatrix{$elty})$/;"	f
hetri!	stdlib/LinearAlgebra/src/lapack.jl	/^        function hetri!(uplo::AbstractChar, A::AbstractMatrix{$elty}, ipiv::AbstractVector{BlasI/;"	f
hetri_rook!	stdlib/LinearAlgebra/src/lapack.jl	/^        function hetri_rook!(uplo::AbstractChar, A::AbstractMatrix{$elty}, ipiv::AbstractVector{/;"	f
hetrs!	stdlib/LinearAlgebra/src/lapack.jl	/^        function hetrs!(uplo::AbstractChar, A::AbstractMatrix{$elty},$/;"	f
hetrs_rook!	stdlib/LinearAlgebra/src/lapack.jl	/^        function hetrs_rook!(uplo::AbstractChar, A::AbstractMatrix{$elty},$/;"	f
hex	base/intfuncs.jl	/^function hex(x::Unsigned, pad::Integer, neg::Bool)$/;"	f
hex2bytes	base/strings/util.jl	/^function hex2bytes end$/;"	f
hex2bytes	base/strings/util.jl	/^hex2bytes(s::AbstractString) = hex2bytes(String(s))$/;"	f
hex2bytes	base/strings/util.jl	/^hex2bytes(s::Union{String,AbstractVector{UInt8}}) = hex2bytes!(Vector{UInt8}(undef, length(s) >>/;"	f
hex2bytes!	base/strings/util.jl	/^function hex2bytes!(d::AbstractVector{UInt8}, s::Union{String,AbstractVector{UInt8}})$/;"	f
hex_chars	base/char.jl	/^const hex_chars = UInt8['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',$/;"	v
hex_digit	src/support/utf8.c	/^int hex_digit(char c)$/;"	f	typeref:typename:int
hex_symbols	base/printf.jl	/^const hex_symbols = b"0123456789abcdef"$/;"	v
hh6614	test/core.jl	/^function hh6614()$/;"	f
hi	src/flisp/flisp.c	/^    fixnum_t s, hi;$/;"	v	typeref:typename:fixnum_t
hi	src/julia.h	/^    uint64_t hi;$/;"	m	struct:__anon055fe4271208	typeref:typename:uint64_t
hidigit	base/floatfuncs.jl	/^function hidigit(x::AbstractFloat, base)$/;"	f
hidigit	base/floatfuncs.jl	/^hidigit(x::Integer, base) = ndigits0z(x, base)$/;"	f
hidigit	base/floatfuncs.jl	/^hidigit(x::Real, base) = hidigit(float(x), base)$/;"	f
hier_symlinks	contrib/mac/framework/Makefile	/^hier_symlinks: \\$/;"	t
high	base/grisu/fastfixed.jl	/^high(x) = UInt64(x >>> 64)$/;"	f
highlight_region	stdlib/REPL/src/LineEdit.jl	/^function highlight_region(lwrite::String, regstart::Int, regstop::Int, written::Int, slength::In/;"	f
highprec_pair	test/ranges.jl	/^function highprec_pair(x, y)$/;"	f
highword	base/math.jl	/^@inline highword(x::Float32) = reinterpret(UInt32, x)$/;"	f
highword	base/math.jl	/^@inline highword(x::Float64) = highword(reinterpret(UInt64, x))$/;"	f
highword	base/math.jl	/^@inline highword(x::UInt64)  = (x >>> 32) % UInt32$/;"	f
hilb	stdlib/LinearAlgebra/test/pinv.jl	/^function hilb(T::Type, m::Integer, n::Integer)$/;"	f
hilb	stdlib/LinearAlgebra/test/pinv.jl	/^function hilb(T::Type, n::Integer)$/;"	f
hilb	stdlib/LinearAlgebra/test/pinv.jl	/^hilb(m::Integer, n::Integer) = hilb(Float64,m,n)$/;"	f
hilb	stdlib/LinearAlgebra/test/pinv.jl	/^hilb(n::Integer) = hilb(Float64,n)$/;"	f
hist	stdlib/Random/test/runtests.jl	/^function hist(X, n)$/;"	f
hist_from_file	stdlib/REPL/src/REPL.jl	/^function hist_from_file(hp, file, path)$/;"	f
hist_getline	stdlib/REPL/src/REPL.jl	/^function hist_getline(file)$/;"	f
history_first	stdlib/REPL/src/LineEdit.jl	/^history_first(::EmptyHistoryProvider) = ("", false)$/;"	f
history_first	stdlib/REPL/src/REPL.jl	/^history_first(s::LineEdit.MIState, hist::REPLHistoryProvider) =$/;"	f
history_keymap	stdlib/REPL/src/LineEdit.jl	/^const history_keymap = AnyDict($/;"	v
history_last	stdlib/REPL/src/LineEdit.jl	/^history_last(::EmptyHistoryProvider) = ("", false)$/;"	f
history_last	stdlib/REPL/src/REPL.jl	/^history_last(s::LineEdit.MIState, hist::REPLHistoryProvider) =$/;"	f
history_move	stdlib/REPL/src/REPL.jl	/^function history_move(s::Union{LineEdit.MIState,LineEdit.PrefixSearchState}, hist::REPLHistoryPr/;"	f
history_move_prefix	stdlib/REPL/src/REPL.jl	/^function history_move_prefix(s::LineEdit.PrefixSearchState,$/;"	f
history_move_prefix	stdlib/REPL/test/repl.jl	/^function history_move_prefix(s::LineEdit.MIState,$/;"	f
history_next	stdlib/REPL/src/LineEdit.jl	/^function history_next(s, hist)$/;"	f
history_next	stdlib/REPL/src/LineEdit.jl	/^history_next(::EmptyHistoryProvider) = ("", false)$/;"	f
history_next	stdlib/REPL/src/REPL.jl	/^function history_next(s::LineEdit.MIState, hist::REPLHistoryProvider,$/;"	f
history_next_prefix	stdlib/REPL/src/LineEdit.jl	/^history_next_prefix(s, hist, prefix) = false$/;"	f
history_next_prefix	stdlib/REPL/src/REPL.jl	/^history_next_prefix(s::LineEdit.PrefixSearchState, hist::REPLHistoryProvider, prefix::AbstractSt/;"	f
history_next_prefix	stdlib/REPL/test/repl.jl	/^history_next_prefix(s::LineEdit.MIState, hist::REPL.REPLHistoryProvider) =$/;"	f
history_next_result	stdlib/REPL/src/LineEdit.jl	/^function history_next_result(s::MIState, data::SearchState)$/;"	f
history_prev	stdlib/REPL/src/LineEdit.jl	/^function history_prev(s, hist)$/;"	f
history_prev	stdlib/REPL/src/LineEdit.jl	/^history_prev(::EmptyHistoryProvider) = ("", false)$/;"	f
history_prev	stdlib/REPL/src/REPL.jl	/^function history_prev(s::LineEdit.MIState, hist::REPLHistoryProvider,$/;"	f
history_prev_prefix	stdlib/REPL/src/LineEdit.jl	/^history_prev_prefix(s, hist, prefix) = false$/;"	f
history_prev_prefix	stdlib/REPL/src/REPL.jl	/^history_prev_prefix(s::LineEdit.PrefixSearchState, hist::REPLHistoryProvider, prefix::AbstractSt/;"	f
history_prev_prefix	stdlib/REPL/test/repl.jl	/^history_prev_prefix(s::LineEdit.MIState, hist::REPL.REPLHistoryProvider) =$/;"	f
history_reset_state	stdlib/REPL/src/REPL.jl	/^function history_reset_state(hist::REPLHistoryProvider)$/;"	f
history_search	stdlib/REPL/src/LineEdit.jl	/^history_search(::EmptyHistoryProvider, args...) = false$/;"	f
history_search	stdlib/REPL/src/REPL.jl	/^function history_search(hist::REPLHistoryProvider, query_buffer::IOBuffer, response_buffer::IOBu/;"	f
history_set_backward	stdlib/REPL/src/LineEdit.jl	/^function history_set_backward(s::SearchState, backward)$/;"	f
historyfile	src/julia.h	/^    int8_t historyfile;$/;"	m	struct:__anon055fe4271808	typeref:typename:int8_t
homedir	base/path.jl	/^function homedir()$/;"	f
hook	test/keywordargs.jl	/^    hook(i; args...) = args$/;"	f
horizontalrule	stdlib/Markdown/src/Common/block.jl	/^function horizontalrule(stream::IO, block::MD)$/;"	f
horner	base/math.jl	/^macro horner(x, p...)$/;"	f
horzcat	stdlib/SuiteSparse/src/cholmod.jl	/^function horzcat(A::Sparse{Tv}, B::Sparse{Tv}, values::Bool) where Tv<:VRealTypes$/;"	f
host_alias	deps/srccache/patchelf-0.9/Makefile.in	/^host_alias = @host_alias@$/;"	m
host_alias	deps/srccache/patchelf-0.9/src/Makefile.in	/^host_alias = @host_alias@$/;"	m
host_alias	deps/srccache/patchelf-0.9/tests/Makefile.in	/^host_alias = @host_alias@$/;"	m
host_char_bit	src/APInt-C.cpp	/^const unsigned int host_char_bit = 8;$/;"	v	typeref:typename:const unsigned int
host_char_bit	src/runtime_intrinsics.c	/^const unsigned int host_char_bit = 8;$/;"	v	typeref:typename:const unsigned int
host_cpu_name	src/processor_arm.cpp	/^static inline const std::string &host_cpu_name()$/;"	f	namespace:ARM	typeref:typename:const std::string &	file:
host_cpu_name	src/processor_fallback.cpp	/^static inline const std::string &host_cpu_name()$/;"	f	namespace:Fallback	typeref:typename:const std::string &	file:
host_cpu_name	src/processor_x86.cpp	/^static inline const std::string &host_cpu_name()$/;"	f	namespace:X86	typeref:typename:const std::string &	file:
hour	stdlib/Dates/src/accessors.jl	/^hour(dt::DateTime)   = mod(fld(value(dt), 3600000), 24)$/;"	f
hour	stdlib/Dates/src/accessors.jl	/^hour(t::Time)   = mod(fld(value(t), 3600000000000), Int64(24))$/;"	f
hour12	stdlib/Dates/src/io.jl	/^hour12(dt) = let h = hour(dt); h > 12 ? h - 12 : h == 0 ? 12 : h; end$/;"	f
how	src/julia.h	/^    uint16_t how:2;$/;"	m	struct:__anon055fe4270308	typeref:typename:uint16_t:2
ht_keyindex	base/dict.jl	/^function ht_keyindex(h::Dict{K,V}, key) where V where K$/;"	f
ht_keyindex2!	base/dict.jl	/^function ht_keyindex2!(h::Dict{K,V}, key) where V where K$/;"	f
htable_free	src/support/htable.c	/^void htable_free(htable_t *h)$/;"	f	typeref:typename:void
htable_new	src/support/htable.c	/^htable_t *htable_new(htable_t *h, size_t size)$/;"	f	typeref:typename:htable_t *
htable_reset	src/support/htable.c	/^void htable_reset(htable_t *h, size_t sz)$/;"	f	typeref:typename:void
htable_t	src/support/htable.h	/^} htable_t;$/;"	t	typeref:struct:__anon806c816e0108
html	deps/srccache/patchelf-0.9/Makefile.in	/^html: html-recursive$/;"	t
html	deps/srccache/patchelf-0.9/src/Makefile.in	/^html: html-am$/;"	t
html	deps/srccache/patchelf-0.9/tests/Makefile.in	/^html: html-am$/;"	t
html	doc/Makefile	/^html: deps$/;"	t
html	stdlib/Markdown/src/GitHub/table.jl	/^function html(io::IO, md::Table)$/;"	f
html	stdlib/Markdown/src/render/html.jl	/^function html(io::IO, code::Code)$/;"	f
html	stdlib/Markdown/src/render/html.jl	/^function html(io::IO, content::Vector)$/;"	f
html	stdlib/Markdown/src/render/html.jl	/^function html(io::IO, f::Footnote)$/;"	f
html	stdlib/Markdown/src/render/html.jl	/^function html(io::IO, header::Header{l}) where l$/;"	f
html	stdlib/Markdown/src/render/html.jl	/^function html(io::IO, md::Admonition)$/;"	f
html	stdlib/Markdown/src/render/html.jl	/^function html(io::IO, md::BlockQuote)$/;"	f
html	stdlib/Markdown/src/render/html.jl	/^function html(io::IO, md::HorizontalRule)$/;"	f
html	stdlib/Markdown/src/render/html.jl	/^function html(io::IO, md::List)$/;"	f
html	stdlib/Markdown/src/render/html.jl	/^function html(io::IO, md::Paragraph)$/;"	f
html	stdlib/Markdown/src/render/html.jl	/^html(io::IO, md::MD) = html(io, md.content)$/;"	f
html	stdlib/Markdown/src/render/html.jl	/^html(io::IO, x) = tohtml(io, x)$/;"	f
html	stdlib/Markdown/src/render/html.jl	/^html(md) = sprint(html, md)$/;"	f
html-am	deps/srccache/patchelf-0.9/Makefile.in	/^html-am:$/;"	t
html-am	deps/srccache/patchelf-0.9/src/Makefile.in	/^html-am:$/;"	t
html-am	deps/srccache/patchelf-0.9/tests/Makefile.in	/^html-am:$/;"	t
html_str	base/docs/utils.jl	/^macro html_str(s)$/;"	f
htmldir	deps/srccache/patchelf-0.9/Makefile.in	/^htmldir = @htmldir@$/;"	m
htmldir	deps/srccache/patchelf-0.9/src/Makefile.in	/^htmldir = @htmldir@$/;"	m
htmldir	deps/srccache/patchelf-0.9/tests/Makefile.in	/^htmldir = @htmldir@$/;"	m
htmlesc	stdlib/Markdown/src/render/html.jl	/^function htmlesc(io::IO, s::AbstractString)$/;"	f
htmlesc	stdlib/Markdown/src/render/html.jl	/^function htmlesc(io::IO, s::Symbol)$/;"	f
htmlesc	stdlib/Markdown/src/render/html.jl	/^function htmlesc(io::IO, xs::Union{AbstractString,Symbol}...)$/;"	f
htmlesc	stdlib/Markdown/src/render/html.jl	/^function htmlesc(s::Union{AbstractString,Symbol})$/;"	f
htmlinline	stdlib/Markdown/src/render/html.jl	/^function htmlinline(io::IO, br::LineBreak)$/;"	f
htmlinline	stdlib/Markdown/src/render/html.jl	/^function htmlinline(io::IO, code::Code)$/;"	f
htmlinline	stdlib/Markdown/src/render/html.jl	/^function htmlinline(io::IO, content::Vector)$/;"	f
htmlinline	stdlib/Markdown/src/render/html.jl	/^function htmlinline(io::IO, f::Footnote)$/;"	f
htmlinline	stdlib/Markdown/src/render/html.jl	/^function htmlinline(io::IO, link::Link)$/;"	f
htmlinline	stdlib/Markdown/src/render/html.jl	/^function htmlinline(io::IO, md::Bold)$/;"	f
htmlinline	stdlib/Markdown/src/render/html.jl	/^function htmlinline(io::IO, md::Image)$/;"	f
htmlinline	stdlib/Markdown/src/render/html.jl	/^function htmlinline(io::IO, md::Italic)$/;"	f
htmlinline	stdlib/Markdown/src/render/html.jl	/^function htmlinline(io::IO, md::Union{Symbol,AbstractString})$/;"	f
htmlinline	stdlib/Markdown/src/render/html.jl	/^htmlinline(io::IO, x) = tohtml(io, x)$/;"	f
htol	base/io.jl	/^        htol(x) = bswap(x)$/;"	f
htol	base/io.jl	/^        htol(x) = x$/;"	f
hton	base/io.jl	/^        hton(x) = bswap(x)$/;"	f
hton	base/io.jl	/^        hton(x) = x$/;"	f
hval1	stdlib/Distributed/test/distributed_exec.jl	/^hval1 = hash(v7)$/;"	v
hvcat	base/abstractarray.jl	/^function hvcat(nbc::Integer, as...)$/;"	f
hvcat	base/abstractarray.jl	/^function hvcat(rows::Tuple{Vararg{Int}}, xs::T...) where T<:Number$/;"	f
hvcat	base/abstractarray.jl	/^hvcat(rows::Tuple{Vararg{Int}}) = []$/;"	f
hvcat	base/abstractarray.jl	/^hvcat(rows::Tuple{Vararg{Int}}, xs...) = typed_hvcat(promote_eltypeof(xs...), rows, xs...)$/;"	f
hvcat	base/abstractarray.jl	/^hvcat(rows::Tuple{Vararg{Int}}, xs::AbstractVecOrMat...) = typed_hvcat(promote_eltype(xs...), ro/;"	f
hvcat	base/abstractarray.jl	/^hvcat(rows::Tuple{Vararg{Int}}, xs::AbstractVecOrMat{T}...) where {T} = typed_hvcat(T, rows, xs./;"	f
hvcat	base/abstractarray.jl	/^hvcat(rows::Tuple{Vararg{Int}}, xs::Number...) = typed_hvcat(promote_typeof(xs...), rows, xs...)$/;"	f
hvcat	stdlib/LinearAlgebra/src/uniformscaling.jl	/^function hvcat(rows::Tuple{Vararg{Int}}, A::Union{AbstractVecOrMat,UniformScaling}...)$/;"	f
hvcat	stdlib/SparseArrays/src/sparsevector.jl	/^function hvcat(rows::Tuple{Vararg{Int}}, X::_SparseConcatGroup...)$/;"	f
hvcat	stdlib/SparseArrays/src/sparsevector.jl	/^hvcat(rows::Tuple{Vararg{Int}}, xs::_DenseConcatGroup...) = Base.typed_hvcat(promote_eltype(xs../;"	f
hvcat	stdlib/SparseArrays/src/sparsevector.jl	/^hvcat(rows::Tuple{Vararg{Int}}, xs::_TypedDenseConcatGroup{T}...) where {T} = Base.typed_hvcat(T/;"	f
hvcat18399	test/compiler/inference.jl	/^function hvcat18399(as)$/;"	f
hvcat_fill	base/abstractarray.jl	/^function hvcat_fill(a::Array, xs::Tuple)$/;"	f
hwp_flags1	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word hwp_flags1;	\/* Extra flags.  *\/$/;"	m	struct:__anonff7a58692808	typeref:typename:Elf32_Word
hwp_flags2	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word hwp_flags2;	\/* Extra flags.  *\/$/;"	m	struct:__anonff7a58692808	typeref:typename:Elf32_Word
hx	base/float.jl	/^hx(a::UInt64, b::Float64, h::UInt) = hash_uint64((3a + reinterpret(UInt64,b)) - h)$/;"	f
hx_NaN	base/float.jl	/^const hx_NaN = hx(UInt64(0), NaN, UInt(0  ))$/;"	v
hygienicscope_sym	src/ast.c	/^jl_sym_t *colon_sym; jl_sym_t *hygienicscope_sym;$/;"	v	typeref:typename:jl_sym_t *
hypot	base/math.jl	/^function hypot(x::T, y::T) where T<:Number$/;"	f
hypot	base/math.jl	/^function hypot(x::T,y::T) where T<:AbstractFloat$/;"	f
hypot	base/math.jl	/^hypot(x::Complex, y::Complex) = hypot(promote(abs(x),abs(y))...)$/;"	f
hypot	base/math.jl	/^hypot(x::Integer, y::Integer) = hypot(promote(float(x), float(y))...)$/;"	f
hypot	base/math.jl	/^hypot(x::Number, y::Number) = hypot(promote(x, y)...)$/;"	f
hypot	base/math.jl	/^hypot(x::Number...) = sqrt(sum(abs2(y) for y in x))$/;"	f
hypot	base/mpfr.jl	/^function hypot(x::BigFloat, y::BigFloat)$/;"	f
hypot_fast	base/fastmath.jl	/^    hypot_fast(x::T, y::T) where {T<:FloatTypes} = sqrt(x*x + y*y)$/;"	f
i	base/channels.jl	/^i = 1$/;"	v
i	base/channels.jl	/^i = 2$/;"	v
i	base/channels.jl	/^i = 3$/;"	v
i	base/channels.jl	/^i = 4$/;"	v
i	src/flisp/cvalues.c	/^struct prim_int16{ char a; int16_t i; };$/;"	m	struct:prim_int16	typeref:typename:int16_t	file:
i	src/flisp/cvalues.c	/^struct prim_int32{ char a; int32_t i; };$/;"	m	struct:prim_int32	typeref:typename:int32_t	file:
i	src/flisp/cvalues.c	/^struct prim_int64{ char a; int64_t i; };$/;"	m	struct:prim_int64	typeref:typename:int64_t	file:
i	src/flisp/cvalues.c	/^struct prim_ptr{ char a;  void   *i; };$/;"	m	struct:prim_ptr	typeref:typename:void *	file:
i	src/flisp/flisp.c	/^    uint32_t i;$/;"	v	typeref:typename:uint32_t
i	src/gc.h	/^    size_t i;          \/\/ Iterator into backtrace data for exception$/;"	m	struct:__anoncf30557c0b08	typeref:typename:size_t
i	src/gc.h	/^    uint32_t i; \/\/ The current slot index in the frame$/;"	m	struct:__anoncf30557c0a08	typeref:typename:uint32_t
i	src/simplevector.c	/^    for (size_t i = 0; i < n; i++)$/;"	v	typeref:typename:size_t
i	src/simplevector.c	/^    for(size_t i=0; i < n; i++)$/;"	v	typeref:typename:size_t
i	src/subtype.c	/^    size_t i, j;$/;"	m	struct:subtype_tuple_env	typeref:typename:size_t	file:
i	test/compiler/inference.jl	/^i = 1$/;"	v
i	test/reduce.jl	/^i = Base.Slice(-3:3)$/;"	v
i	test/reduce.jl	/^i = Base.Slice(0:0)$/;"	v
i	test/syntax.jl	/^i = 0$/;"	v
i1	test/offsetarray.jl	/^i1 = OffsetArray([2,1], (-5,))$/;"	v
i1	test/offsetarray.jl	/^i1 = OffsetArray([2,1], -5)$/;"	v
i10165	test/reflection.jl	/^i10165(::Type) = 0$/;"	f
i10165	test/reflection.jl	/^i10165(::Type{AbstractArray{T,n}}) where {T,n} = 1$/;"	f
i13385	test/docs.jl	/^const i13385 = I13385(true)$/;"	v
i18408	test/core.jl	/^function i18408()$/;"	f
i20343	test/compiler/inference.jl	/^function i20343()$/;"	f
i2098	test/core.jl	/^    i2098() = begin$/;"	f
i2161_1	test/core.jl	/^    i2161_1() = promote(2,2,2.0,2)$/;"	f
i2161_2	test/core.jl	/^    i2161_2() = i2161_1()[1]$/;"	f
i2169	test/core.jl	/^    i2169(a::Array{T}) where {T} = typemin(T)$/;"	f
i2619	test/core.jl	/^function i2619()$/;"	f
i4645	test/core.jl	/^i4645(x) = (println(zz); zz = x; zz)$/;"	f
i64	src/flisp/equal.c	/^        int64_t i64;$/;"	m	union:bounded_hash::__anon73d424b2010a	typeref:typename:int64_t	file:
i64	src/support/operators.c	/^    union { double d; int64_t i64; } u, v;$/;"	m	union:cmp_eq::__anon042f5e38010a	typeref:typename:int64_t	file:
i7197	test/arrayops.jl	/^function i7197()$/;"	f
i7652	test/core.jl	/^i7652() = Base.setproperty!(a7652, :a, 3.0)$/;"	f
i::Issue2403	test/core.jl	/^(i::Issue2403)(y) = i.x + 2y$/;"	f
iamax	stdlib/LinearAlgebra/src/blas.jl	/^        function iamax(n::Integer, dx::Union{Ptr{$elty}, AbstractArray{$elty}}, incx::Integer)$/;"	f
iamax	stdlib/LinearAlgebra/src/blas.jl	/^iamax(dx::Union{AbstractVector,DenseArray}) = GC.@preserve dx iamax(length(dx), pointer(dx), str/;"	f
iarr	src/flisp/unittest.lsp	/^(define iarr (array 'int64 32 16 8 7 1))$/;"	f
icmp	base/multidimensional.jl	/^    icmp(a, b) = ifelse(isless(a,b), 1, ifelse(a==b, 0, -1))$/;"	f
id	src/flisp/flisp.h	/^    uint32_t id;$/;"	m	struct:__anonb455601d0208	typeref:typename:uint32_t
id	src/julia.h	/^    ssize_t id;$/;"	m	struct:_jl_ssavalue_t	typeref:typename:JL_DATA_TYPE ssize_t
id	stdlib/LibGit2/src/blob.jl	/^id = LibGit2.addblob!(repo, blob_file)$/;"	v
id28992	test/syntax.jl	/^macro id28992(x) x end$/;"	f
id_in_procs	stdlib/Distributed/src/cluster.jl	/^function id_in_procs(id)  # faster version of `id in procs()`$/;"	f
id_me	stdlib/Distributed/test/distributed_exec.jl	/^id_me = myid()$/;"	v
id_me	stdlib/SharedArrays/test/runtests.jl	/^id_me = myid()$/;"	v
id_other	stdlib/Distributed/test/distributed_exec.jl	/^id_other = filter(x -> x != id_me, procs())[rand(1:(nprocs()-1))]$/;"	v
id_other	stdlib/SharedArrays/test/runtests.jl	/^id_other = filter(x -> x != id_me, procs())[rand(1:(nprocs()-1))]$/;"	v
id_to_fptrs	src/staticdata.c	/^static const jl_fptr_args_t id_to_fptrs[] = {$/;"	v	typeref:typename:const jl_fptr_args_t[]	file:
ident_cmp	base/version.jl	/^function ident_cmp($/;"	f
ident_cmp	base/version.jl	/^ident_cmp(a::Integer, b::Integer) = cmp(a, b)$/;"	f
ident_cmp	base/version.jl	/^ident_cmp(a::Integer, b::String ) = isempty(b) ? +1 : -1$/;"	f
ident_cmp	base/version.jl	/^ident_cmp(a::String,  b::Integer) = isempty(a) ? -1 : +1$/;"	f
ident_cmp	base/version.jl	/^ident_cmp(a::String,  b::String ) = cmp(a, b)$/;"	f
identifier-name	src/ast.scm	/^(define (identifier-name e)$/;"	f
identify_package	base/loading.jl	/^function identify_package(name::String)::Union{Nothing,PkgId}$/;"	f
identify_package	base/loading.jl	/^function identify_package(name::String, names::String...)$/;"	f
identify_package	base/loading.jl	/^function identify_package(where::PkgId, name::String)::Union{Nothing,PkgId}$/;"	f
identify_package	base/loading.jl	/^function identify_package(where::PkgId, name::String, names::String...)$/;"	f
identify_package	base/loading.jl	/^identify_package(where::Module, name::String) = identify_package(PkgId(where), name)$/;"	f
identity	base/operators.jl	/^identity(x) = x$/;"	f
identity23239b	test/core.jl	/^macro identity23239b(x)$/;"	f
identity23239c	test/core.jl	/^macro identity23239c(x)$/;"	f
idf	base/compiler/ssair/slot2ssa.jl	/^function idf(cfg::CFG, liveness::BlockLiveness, domtree::DomTree)$/;"	f
idiom	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "idiom" : "mac",$/;"	s	object:images.0
idiom	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "idiom" : "mac",$/;"	s	object:images.1
idiom	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "idiom" : "mac",$/;"	s	object:images.2
idiom	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "idiom" : "mac",$/;"	s	object:images.3
idiom	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "idiom" : "mac",$/;"	s	object:images.4
idiom	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "idiom" : "mac",$/;"	s	object:images.5
idiom	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "idiom" : "mac",$/;"	s	object:images.6
idiom	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "idiom" : "mac",$/;"	s	object:images.7
idiom	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "idiom" : "mac",$/;"	s	object:images.8
idiom	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "idiom" : "mac",$/;"	s	object:images.9
ids	stdlib/Distributed/test/distributed_exec.jl	/^ids = @distributed((a,b)->[a;b], for i=1:7; myid(); end)$/;"	v
idx	src/llvm-multiversioning.cpp	/^        int idx;$/;"	m	struct:__anond5683ea40111::CloneCtx::Target	typeref:typename:int	file:
idxmask	stdlib/Random/src/RNGs.jl	/^idxmask(::Type{<:Union{Bool,Int8,UInt8}}) = 15$/;"	f
idxmask	stdlib/Random/src/RNGs.jl	/^idxmask(::Type{<:Union{Int128,UInt128}}) = 0$/;"	f
idxmask	stdlib/Random/src/RNGs.jl	/^idxmask(::Type{<:Union{Int16,UInt16}}) = 7$/;"	f
idxmask	stdlib/Random/src/RNGs.jl	/^idxmask(::Type{<:Union{Int32,UInt32}}) = 3$/;"	f
idxmask	stdlib/Random/src/RNGs.jl	/^idxmask(::Type{<:Union{Int64,UInt64}}) = 1$/;"	f
if	base/abstractdict.jl	/^             function if you are looking for a key or value respectively.""")$/;"	f
if-generated?	src/ast.scm	/^(define (if-generated? e)$/;"	f
ifelse_tfunc	base/compiler/tfuncs.jl	/^function ifelse_tfunc(@nospecialize(cnd), @nospecialize(x), @nospecialize(y))$/;"	f
ifs_around_var_capture	test/compiler/inference.jl	/^function ifs_around_var_capture()$/;"	f
ig27907	test/compiler/inference.jl	/^function ig27907(::Type{T}, ::Type, N::Integer, offsets...) where {T}$/;"	f
ig27907	test/compiler/inference.jl	/^ig27907(T::Type, N::Integer, offsets...) = ig27907(T, T, N, offsets...)$/;"	f
ignoreError	src/debuginfo.cpp	/^static inline void ignoreError(T &err)$/;"	f	typeref:typename:void	file:
ignore_free	src/subtype.c	/^    int ignore_free;          \/\/ treat free vars as black boxes; used during intersection$/;"	m	struct:jl_stenv_t	typeref:typename:int	file:
ignorestatus	base/cmd.jl	/^ignorestatus(cmd::Cmd) = Cmd(cmd, ignorestatus=true)$/;"	f
ignorestatus	base/cmd.jl	/^ignorestatus(cmd::Union{OrCmds,AndCmds}) =$/;"	f
ilog2	stdlib/SparseArrays/src/linalg.jl	/^ilog2(n::Integer) = sizeof(n)<<3 - leading_zeros(n)$/;"	f
im	base/complex.jl	/^const im = Complex(false, true)$/;"	v
imag	base/abstractarraymath.jl	/^imag(x::AbstractArray{<:Real}) = zero(x)$/;"	f
imag	base/complex.jl	/^imag(x::Real) = zero(x)$/;"	f
imag	base/complex.jl	/^imag(z::Complex) = z.im$/;"	f
imag	src/ccalltest.c	/^    jint imag;$/;"	m	struct:__anon84ad8c4c0108	typeref:typename:jint	file:
imag	stdlib/LinearAlgebra/src/diagonal.jl	/^imag(D::Diagonal) = Diagonal(imag(D.diag))$/;"	f
imag	stdlib/LinearAlgebra/src/hessenberg.jl	/^imag(H::UpperHessenberg) = UpperHessenberg(triu!(imag(H.data),-1))$/;"	f
imag	stdlib/LinearAlgebra/src/symmetric.jl	/^imag(A::Symmetric) = Symmetric(imag(A.data), sym_uplo(A.uplo))$/;"	f
imag	stdlib/LinearAlgebra/src/triangular.jl	/^imag(A::LowerTriangular) = LowerTriangular(imag(A.data))$/;"	f
imag	stdlib/LinearAlgebra/src/triangular.jl	/^imag(A::UnitLowerTriangular) = LowerTriangular(tril!(imag(A.data),-1))$/;"	f
imag	stdlib/LinearAlgebra/src/triangular.jl	/^imag(A::UnitUpperTriangular) = UpperTriangular(triu!(imag(A.data),1))$/;"	f
imag	stdlib/LinearAlgebra/src/triangular.jl	/^imag(A::UpperTriangular) = UpperTriangular(imag(A.data))$/;"	f
imag	stdlib/SparseArrays/src/sparsematrix.jl	/^imag(A::AbstractSparseMatrixCSC{Tv,Ti}) where {Tv<:Real,Ti} = spzeros(Tv, Ti, size(A, 1), size(A/;"	f
imag	stdlib/SparseArrays/src/sparsevector.jl	/^imag(x::AbstractSparseVector{Tv,Ti}) where {Tv<:Real,Ti<:Integer} = SparseVector(length(x), Ti[]/;"	f
image	stdlib/Markdown/src/Common/inline.jl	/^function image(stream::IO, md::MD)$/;"	f
image_file	src/julia.h	/^    const char *image_file;$/;"	m	struct:__anon055fe4271808	typeref:typename:const char *
image_file_specified	src/julia.h	/^    int8_t image_file_specified;$/;"	m	struct:__anon055fe4271808	typeref:typename:int8_t
images	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^  "images" : [$/;"	a
imaging_mode	src/codegen.cpp	/^bool imaging_mode = false;$/;"	v	typeref:typename:bool
imaging_mode	src/llvm-ptls.cpp	/^    const bool imaging_mode;$/;"	m	struct:__anonf46923380111::LowerPTLS	typeref:typename:const bool	file:
implementer	src/processor_arm.cpp	/^    uint8_t implementer;$/;"	m	struct:ARM::CPUID	typeref:typename:uint8_t	file:
implicit_manifest_deps_get	base/loading.jl	/^function implicit_manifest_deps_get(dir::String, where::PkgId, name::String)::Union{Nothing,PkgI/;"	f
implicit_manifest_uuid_path	base/loading.jl	/^function implicit_manifest_uuid_path(dir::String, pkg::PkgId)::Union{Nothing,String}$/;"	f
implicit_project_deps_get	base/loading.jl	/^function implicit_project_deps_get(dir::String, name::String)::Union{Nothing,PkgId}$/;"	f
import!	base/gmp.jl	/^import!(x::BigInt, a, b, c, d, e, f) = ccall((:__gmpz_import, :libgmp), Cvoid,$/;"	f
import_gc_state	src/gc.c	/^STATIC_INLINE void import_gc_state(jl_ptls_t ptls, jl_gc_mark_sp_t *sp) {$/;"	f	typeref:typename:STATIC_INLINE void
import_module	src/toplevel.c	/^static void import_module(jl_module_t *JL_NONNULL m, jl_module_t *import)$/;"	f	typeref:typename:void	file:
import_sym	src/ast.c	/^jl_sym_t *export_sym;  jl_sym_t *import_sym;$/;"	v	typeref:typename:jl_sym_t *
imported	src/julia.h	/^    uint8_t imported:1;$/;"	m	struct:__anon055fe4271108	typeref:typename:uint8_t:1
improvable_via_constant_propagation	base/compiler/typeutils.jl	/^function improvable_via_constant_propagation(@nospecialize(t))$/;"	f
in	base/abstractdict.jl	/^function in(p, a::AbstractDict)$/;"	f
in	base/abstractdict.jl	/^function in(p::Pair, a::AbstractDict, valcmp=(==))$/;"	f
in	base/abstractdict.jl	/^in(@nospecialize(k), v::KeySet{<:Any,<:IdDict}) = get(v.dict, k, secret_table_token) !== secret_/;"	f
in	base/abstractdict.jl	/^in(@nospecialize(x), s::IdSet) = haskey(s.dict, x)$/;"	f
in	base/abstractdict.jl	/^in(k, v::KeySet) = get(v.dict, k, secret_table_token) !== secret_table_token$/;"	f
in	base/bitset.jl	/^@inline in(n::Int, s::BitSet) = _bits_getindex(s.bits, n, s.offset)$/;"	f
in	base/bitset.jl	/^@inline in(n::Integer, s::BitSet) = _is_convertible_Int(n) ? in(Int(n), s) : false$/;"	f
in	base/char.jl	/^in(x::AbstractChar, y::AbstractChar) = x == y$/;"	f
in	base/complex.jl	/^in(x::Complex, r::AbstractRange{<:Real}) = isreal(x) && real(x) in r$/;"	f
in	base/dict.jl	/^function in(key_value::Pair, dict::ImmutableDict, valcmp=(==))$/;"	f
in	base/dict.jl	/^in(key, v::KeySet{<:Any, <:Dict}) = (ht_keyindex(v.dict, key) >= 0)$/;"	f
in	base/env.jl	/^in(k::AbstractString, ::KeySet{String, EnvDict}) = _hasenv(k)$/;"	f
in	base/multidimensional.jl	/^    @inline function in(i::CartesianIndex{N}, r::CartesianIndices{N}) where {N}$/;"	f
in	base/number.jl	/^in(x::Number, y::Number) = x == y$/;"	f
in	base/operators.jl	/^function in(x, itr)$/;"	f
in	base/operators.jl	/^in(x) = Fix2(in, x)$/;"	f
in	base/range.jl	/^in(x::AbstractChar, r::AbstractRange{<:AbstractChar}) =$/;"	f
in	base/range.jl	/^in(x::Integer, r::AbstractUnitRange{<:Integer}) = (first(r) <= x) & (x <= last(r))$/;"	f
in	base/range.jl	/^in(x::Real, r::AbstractRange{<:Real}) = _in_range(x, r)$/;"	f
in	base/range.jl	/^in(x::Real, r::AbstractRange{T}) where {T<:Integer} =$/;"	f
in	base/range.jl	/^in(x::T, r::AbstractRange{T}) where {T} = _in_range(x, r)$/;"	f
in	base/set.jl	/^in(x, s::Set) = haskey(s.dict, x)$/;"	f
in	base/show.jl	/^in(key_value::Pair, io::IO) = false$/;"	f
in	base/show.jl	/^in(key_value::Pair, io::IOContext) = in(key_value, io.dict, ===)$/;"	f
in	base/stream.jl	/^in(key_value::Pair{Symbol,Bool}, ::TTY) = key_value.first === :color && key_value.second === hav/;"	f
in	base/strings/search.jl	/^in(::AbstractString, ::AbstractString) = error("use occursin(x, y) for string containment")$/;"	f
in	base/strings/search.jl	/^in(c::AbstractChar, s::AbstractString) = (findfirst(isequal(c),s)!==nothing)$/;"	f
in	deps/srccache/patchelf-0.9/configure	/^  alias in your environment" "$LINENO" 5$/;"	a
in	src/jl_uv.c	/^    struct sockaddr in;$/;"	m	union:__anonef7d25cd010a	typeref:struct:sockaddr	file:
in	stdlib/Dates/src/ranges.jl	/^function in(x::T, r::StepRange{T}) where T<:TimeType$/;"	f
in-scope?	src/julia-syntax.scm	/^(define (in-scope? var scope) (not (eq? (var-kind var scope) 'none)))$/;"	f
inInference	src/julia.h	/^    uint8_t inInference; \/\/ flags to tell if inference is running on this object$/;"	m	struct:_jl_method_instance_t	typeref:typename:uint8_t
in_finalizer	src/julia_threads.h	/^    volatile int8_t in_finalizer;$/;"	m	struct:_jl_tls_states_t	typeref:typename:volatile int8_t
in_pure_callback	src/julia_threads.h	/^    int in_pure_callback;$/;"	m	struct:_jl_tls_states_t	typeref:typename:int
in_signal_lock	src/signals-unix.c	/^static pthread_mutex_t in_signal_lock;$/;"	v	typeref:typename:pthread_mutex_t	file:
in_union	src/subtype.c	/^static int in_union(jl_value_t *u, jl_value_t *x)$/;"	f	typeref:typename:int	file:
inbase	base/methodshow.jl	/^function inbase(m::Module)$/;"	f
inbounds	base/essentials.jl	/^macro inbounds(blk)$/;"	f
inbounds_30563	test/compiler/inference.jl	/^function inbounds_30563()$/;"	f
inbounds_isassigned	test/boundscheck_exec.jl	/^inbounds_isassigned(a, i) = @inbounds return isassigned(a, i)$/;"	f
inbounds_option	base/compiler/utilities.jl	/^function inbounds_option()$/;"	f
inbounds_sym	src/ast.c	/^jl_sym_t *boundscheck_sym; jl_sym_t *inbounds_sym;$/;"	v	typeref:typename:jl_sym_t *
inc	base/multidimensional.jl	/^    @inline function inc(state, start, stop)$/;"	f
inc	test/channels.jl	/^        inc() = size += 1$/;"	f
inc	test/core.jl	/^    function inc()$/;"	f
inc_sat	src/gc.c	/^#define inc_sat(/;"	d	file:
include	base/Base.jl	/^function include(mod::Module, path::AbstractString)$/;"	f
include	base/Base.jl	/^function include(path::AbstractString)$/;"	f
include	base/boot.jl	/^include(m::Module, fname::String) = ccall(:jl_load_, Any, (Any, Any), m, fname)$/;"	f
include	base/client.jl	/^function include(fname::AbstractString)$/;"	f
include	base/compiler/compiler.jl	/^include(mod, x) = Core.include(mod, x)$/;"	f
include	base/compiler/compiler.jl	/^include(x) = Core.include(Compiler, x)$/;"	f
includeDir	contrib/julia-config.jl	/^function includeDir()$/;"	f
include_ambiguous	src/gf.c	/^    int include_ambiguous;  \/\/ whether ambiguous matches should be included$/;"	m	struct:ml_matches_env	typeref:typename:int	file:
include_callbacks	base/loading.jl	/^const include_callbacks = Any[]$/;"	v
include_dependency	base/loading.jl	/^function include_dependency(path::AbstractString)$/;"	f
include_ifexists	base/client.jl	/^include_ifexists(mod::Module, path::AbstractString) = isfile(path) && include(mod, path)$/;"	f
include_relative	base/Base.jl	/^function include_relative end$/;"	f
include_relative	base/loading.jl	/^function include_relative(mod::Module, _path::String)$/;"	f
include_relative	base/loading.jl	/^include_relative(mod::Module, path::AbstractString) = include_relative(mod, String(path))$/;"	f
include_string	base/loading.jl	/^include_string(m::Module, txt::AbstractString, fname::AbstractString="string") =$/;"	f
include_string	base/loading.jl	/^include_string(m::Module, txt::String, fname::String) =$/;"	f
include_string_test_func	test/loading.jl	/^include_string_test_func = include_string(@__MODULE__, "include_string_test() = @__FILE__", thef/;"	v
includedir	deps/srccache/patchelf-0.9/Makefile.in	/^includedir = @includedir@$/;"	m
includedir	deps/srccache/patchelf-0.9/src/Makefile.in	/^includedir = @includedir@$/;"	m
includedir	deps/srccache/patchelf-0.9/tests/Makefile.in	/^includedir = @includedir@$/;"	m
incomplete_fname	src/jitlayers.cpp	/^static StringSet<> incomplete_fname;$/;"	v	typeref:typename:StringSet<>	file:
incomplete_tag	base/client.jl	/^function incomplete_tag(ex::Expr)$/;"	f
incomplete_tag	base/client.jl	/^incomplete_tag(ex) = :none$/;"	f
incr5312	test/core.jl	/^    incr5312() = (x+=1; nothing)$/;"	f
increment	stdlib/SuiteSparse/src/SuiteSparse.jl	/^increment(A::AbstractArray{<:Integer}) = increment!(copy(A))$/;"	f
increment!	stdlib/SuiteSparse/src/SuiteSparse.jl	/^function increment!(A::AbstractArray{T}) where T<:Integer$/;"	f
incremental	src/julia.h	/^    int8_t incremental;$/;"	m	struct:__anon055fe4271808	typeref:typename:int8_t
ind2sub_rs	base/reshapedarray.jl	/^@inline ind2sub_rs(ax, ::Tuple{}, i::Int) = (i,)$/;"	f
ind2sub_rs	base/reshapedarray.jl	/^@inline ind2sub_rs(ax, strds, i) = _ind2sub_rs(ax, strds, i - 1)$/;"	f
indcopy	base/array.jl	/^function indcopy(sz::Dims, I::Tuple{Vararg{RangeIndex}})$/;"	f
indcopy	base/array.jl	/^function indcopy(sz::Dims, I::Vector)$/;"	f
indent	base/compiler/ssair/show.jl	/^    indent(s::String) = s^(max(context_depth[], 1) - 1)$/;"	f
indent_width	base/show.jl	/^const indent_width = 4$/;"	v
indentafter2	src/flisp/print.c	/^static int indentafter2(fl_context_t *fl_ctx, value_t head, value_t v)$/;"	f	typeref:typename:int	file:
indentafter3	src/flisp/print.c	/^static int indentafter3(fl_context_t *fl_ctx, value_t head, value_t v)$/;"	f	typeref:typename:int	file:
indentation	base/strings/io.jl	/^function indentation(str::AbstractString; tabwidth=8)$/;"	f
indentcode	stdlib/Markdown/src/Common/block.jl	/^function indentcode(stream::IO, block::MD)$/;"	f
indented-block	src/ast.scm	/^(define (indented-block lst ilvl)$/;"	f
indentevery	src/flisp/print.c	/^static int indentevery(fl_context_t *fl_ctx, value_t v)$/;"	f	typeref:typename:int	file:
independenceday	stdlib/Dates/test/adjusters.jl	/^        independenceday(y) = (y, 7, 4)$/;"	f
index	src/jitlayers.h	/^typedef struct {Value *gv; int32_t index;} jl_value_llvm; \/\/ uses 1-based indexing$/;"	m	struct:__anona49ae9290108	typeref:typename:int32_t
index125	test/subarray.jl	/^index125 = (113, :, 85:121, [99,14,103], reshape([72]), view(1:125,reshape([25,4,102,67], 1, 2, /;"	v
index25	test/subarray.jl	/^index25 = (3, :, 2:11, [19,9,7], reshape([10]), view(1:25,[19 15; 4 24]))$/;"	v
index5	test/subarray.jl	/^index5 = (1, :, 2:5, [4,1,5], reshape([2]), view(1:5,[2 3 4 1]))  # all work with at least size /;"	v
index_dimsum	base/multidimensional.jl	/^@inline function index_dimsum(::AbstractArray{<:Any,N}, I...) where N$/;"	f
index_dimsum	base/multidimensional.jl	/^@inline index_dimsum(::AbstractArray{Bool}, I...) = (true, index_dimsum(I...)...)$/;"	f
index_dimsum	base/multidimensional.jl	/^@inline index_dimsum(::Colon, I...) = (true, index_dimsum(I...)...)$/;"	f
index_dimsum	base/multidimensional.jl	/^@inline index_dimsum(i1, I...) = (index_dimsum(I...)...,)$/;"	f
index_dimsum	base/multidimensional.jl	/^index_dimsum() = ()$/;"	f
index_lengths	base/multidimensional.jl	/^@inline index_lengths(::Real, rest...) = (1, index_lengths(rest...)...)$/;"	f
index_lengths	base/multidimensional.jl	/^@inline index_lengths(A::AbstractArray, rest...) = (length(A), index_lengths(rest...)...)$/;"	f
index_lengths	base/multidimensional.jl	/^index_lengths() = ()$/;"	f
index_ndims	base/multidimensional.jl	/^@inline function index_ndims(i1::AbstractArray{CartesianIndex{N}}, I...) where N$/;"	f
index_ndims	base/multidimensional.jl	/^@inline function index_ndims(i1::CartesianIndex, I...)$/;"	f
index_ndims	base/multidimensional.jl	/^@inline index_ndims(i1, I...) = (true, index_ndims(I...)...)$/;"	f
index_ndims	base/multidimensional.jl	/^index_ndims() = ()$/;"	f
index_ndims	test/subarray.jl	/^index_ndims(t::Tuple) = tup2val(Base.index_ndims(t))$/;"	f
index_shape	base/multidimensional.jl	/^@inline index_shape(::Real, rest...) = index_shape(rest...)$/;"	f
index_shape	base/multidimensional.jl	/^@inline index_shape(A::AbstractArray, rest...) = (axes(A)..., index_shape(rest...)...)$/;"	f
index_shape	base/multidimensional.jl	/^index_shape() = ()$/;"	f
indexed_iterate	base/namedtuple.jl	/^indexed_iterate(t::NamedTuple, i::Int, state=1) = (getfield(t, i), i+1)$/;"	f
indexed_iterate	base/pair.jl	/^indexed_iterate(p::Pair, i::Int, state=1) = (getfield(p, i), i + 1)$/;"	f
indexed_iterate	base/tuple.jl	/^function indexed_iterate(I, i)$/;"	f
indexed_iterate	base/tuple.jl	/^function indexed_iterate(I, i, state)$/;"	f
indexed_iterate	base/tuple.jl	/^indexed_iterate(a::Array, i::Int, state=1) = (@_inline_meta; (a[i], i+1))$/;"	f
indexed_iterate	base/tuple.jl	/^indexed_iterate(t::Tuple, i::Int, state=1) = (@_inline_meta; (getfield(t, i), i+1))$/;"	f
indexforexp	base/ryu/utils.jl	/^indexforexp(e) = div(e + 15, 16)$/;"	f
indexin	base/array.jl	/^function indexin(a, b::AbstractArray)$/;"	f
indexoffset	base/bitarray.jl	/^indexoffset(::Colon) = 0$/;"	f
indexoffset	base/bitarray.jl	/^indexoffset(i) = first(i)-1$/;"	f
indexpids	stdlib/SharedArrays/src/SharedArrays.jl	/^indexpids(S::SharedArray) = S.pidx$/;"	f
indices	src/julia.h	/^    jl_array_t *indices; \/\/ Array{Int{8,16,32}}$/;"	m	struct:jl_ordereddict_t	typeref:typename:jl_array_t *
indices	test/simdloop.jl	/^indices = simd_cartesian_range!(Vector{eltype(crng)}(), crng)$/;"	v
indices_promote_type	base/indices.jl	/^function indices_promote_type(::Type{Tuple{R1,Vararg{R1,N}}}, ::Type{Tuple{R2,Vararg{R2,N}}}) wh/;"	f
indmaxcolumn	stdlib/LinearAlgebra/src/qr.jl	/^function indmaxcolumn(A::StridedMatrix)$/;"	f
inds2string	base/show.jl	/^inds2string(inds) = join(map(_indsstring,inds), '×')$/;"	f
indslength	test/testhelpers/OffsetArrays.jl	/^indslength(i::Integer) = i$/;"	f
indslength	test/testhelpers/OffsetArrays.jl	/^indslength(r::AbstractRange) = length(r)$/;"	f
indsoffset	test/testhelpers/OffsetArrays.jl	/^indsoffset(i::Integer) = 0$/;"	f
indsoffset	test/testhelpers/OffsetArrays.jl	/^indsoffset(r::AbstractRange) = first(r) - 1$/;"	f
indtype	stdlib/SparseArrays/src/abstractsparse.jl	/^indtype(S::AbstractSparseArray{<:Any,Ti}) where {Ti} = Ti$/;"	f
indtype	stdlib/SparseArrays/src/sparsevector.jl	/^indtype(x::SparseColumnView) = indtype(parent(x))$/;"	f
inert_sym	src/ast.c	/^jl_sym_t *meta_sym; jl_sym_t *inert_sym;$/;"	v	typeref:typename:jl_sym_t *
inf_error_21369	test/compiler/inference.jl	/^function inf_error_21369(arg)$/;"	f
inf_for_methodinstance	base/compiler/utilities.jl	/^function inf_for_methodinstance(mi::MethodInstance, min_world::UInt, max_world::UInt=min_world)$/;"	f
inference_test_copy	test/compiler/inference.jl	/^    inference_test_copy(a::T) where {T<:Array} = ccall(:jl_array_copy, Ref{T}, (Any,), a)$/;"	f
inferencebarrier	base/essentials.jl	/^inferencebarrier(@nospecialize(x)) = Ref{Any}(x)[]$/;"	f
inferrable_kwtest	stdlib/Test/test/runtests.jl	/^inferrable_kwtest(x; y=1) = 2x$/;"	f
inferred	src/julia.h	/^    jl_value_t *inferred; \/\/ inferred jl_code_info_t, or jl_nothing, or null$/;"	m	struct:_jl_code_instance_t	typeref:typename:jl_value_t *
inferred	src/julia.h	/^    uint8_t inferred;$/;"	m	struct:_jl_code_info_t	typeref:typename:uint8_t
inferred	stdlib/Test/src/Test.jl	/^macro inferred(allow, ex)$/;"	f
inferred	stdlib/Test/src/Test.jl	/^macro inferred(ex)$/;"	f
inferred_test_function	stdlib/Test/test/runtests.jl	/^function inferred_test_function()$/;"	f
inferred_test_global	stdlib/Test/test/runtests.jl	/^inferred_test_global = 0$/;"	v
inflate_ir	base/compiler/ssair/legacy.jl	/^function inflate_ir(ci::CodeInfo, linfo::MethodInstance)$/;"	f
inflate_ir	base/compiler/ssair/legacy.jl	/^function inflate_ir(ci::CodeInfo, sptypes::Vector{Any}, argtypes::Vector{Any})$/;"	f
inflate_ir	base/compiler/ssair/legacy.jl	/^inflate_ir(ci::CodeInfo) = inflate_ir(ci, Any[], Any[ Any for i = 1:length(ci.slotflags) ])$/;"	f
info	base/logging.jl	/^macro  info(exs...) logmsg_code((@_sourceinfo)..., :Info,  exs...) end$/;"	f
info	base/pcre.jl	/^function info(regex::Ptr{Cvoid}, what::Integer, ::Type{T}) where T$/;"	f
info	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^  "info" : {$/;"	o
info	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/Contents.json	/^  "info" : {$/;"	o
info	deps/srccache/patchelf-0.9/Makefile.in	/^info: info-recursive$/;"	t
info	deps/srccache/patchelf-0.9/src/Makefile.in	/^info: info-am$/;"	t
info	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word info;		\/* Kind-specific information.  *\/$/;"	m	struct:__anonff7a58692708	typeref:typename:Elf32_Word
info	deps/srccache/patchelf-0.9/tests/Makefile.in	/^info: info-am$/;"	t
info-am	deps/srccache/patchelf-0.9/Makefile.in	/^info-am:$/;"	t
info-am	deps/srccache/patchelf-0.9/src/Makefile.in	/^info-am:$/;"	t
info-am	deps/srccache/patchelf-0.9/tests/Makefile.in	/^info-am:$/;"	t
info_color	base/client.jl	/^info_color()  = repl_color("JULIA_INFO_COLOR" , default_color_info)$/;"	f
infodir	deps/srccache/patchelf-0.9/Makefile.in	/^infodir = @infodir@$/;"	m
infodir	deps/srccache/patchelf-0.9/src/Makefile.in	/^infodir = @infodir@$/;"	m
infodir	deps/srccache/patchelf-0.9/tests/Makefile.in	/^infodir = @infodir@$/;"	m
infstr	base/grisu/grisu.jl	/^infstr(x::AbstractFloat) = "Inf"$/;"	f
infstr	base/grisu/grisu.jl	/^infstr(x::Float16) = "Inf16"$/;"	f
infstr	base/grisu/grisu.jl	/^infstr(x::Float32) = "Inf32"$/;"	f
ini_HEX	base/printf.jl	/^function ini_HEX(x::Integer, digits)$/;"	f
ini_HEX	base/printf.jl	/^ini_HEX(out, d, flags::String, width::Int, precision::Int, c::Char, digits) = (true, ini_HEX(d, /;"	f
ini_HEX	base/printf.jl	/^ini_HEX(out, d, ndigits::Int, flags::String, width::Int, precision::Int, c::Char, digits) = (tru/;"	f
ini_HEX	base/printf.jl	/^ini_HEX(out, d::BigFloat, flags::String, width::Int, precision::Int, c::Char, digits) = bigfloat/;"	f
ini_HEX	base/printf.jl	/^ini_HEX(out, d::BigFloat, ndigits::Int, flags::String, width::Int, precision::Int, c::Char, digi/;"	f
ini_HEX	base/printf.jl	/^ini_HEX(x::Real, digits) = ini_hex(x,HEX_symbols,digits)$/;"	f
ini_HEX	base/printf.jl	/^ini_HEX(x::Real, n::Int, digits) = ini_hex(x,n,HEX_symbols,digits)$/;"	f
ini_dec	base/printf.jl	/^function ini_dec(d::Integer, n::Int, digits)$/;"	f
ini_dec	base/printf.jl	/^function ini_dec(x::BigInt, n::Int, digits)$/;"	f
ini_dec	base/printf.jl	/^function ini_dec(x::SmallFloatingPoint, n::Int, digits)$/;"	f
ini_dec	base/printf.jl	/^ini_dec(out, d, ndigits::Int, flags::String, width::Int, precision::Int, c::Char, digits) = (tru/;"	f
ini_dec	base/printf.jl	/^ini_dec(out, d::BigFloat, ndigits::Int, flags::String, width::Int, precision::Int, c::Char, digi/;"	f
ini_dec	base/printf.jl	/^ini_dec(x::Real, n::Int, digits) = ini_dec(float(x),n,digits)$/;"	f
ini_hex	base/printf.jl	/^function ini_hex(x::Integer, digits)$/;"	f
ini_hex	base/printf.jl	/^function ini_hex(x::SmallFloatingPoint, n::Int, symbols::AbstractArray{UInt8,1}, digits)$/;"	f
ini_hex	base/printf.jl	/^function ini_hex(x::SmallFloatingPoint, symbols::AbstractArray{UInt8,1}, digits)$/;"	f
ini_hex	base/printf.jl	/^ini_hex(out, d, flags::String, width::Int, precision::Int, c::Char, digits) = (true, ini_hex(d, /;"	f
ini_hex	base/printf.jl	/^ini_hex(out, d, ndigits::Int, flags::String, width::Int, precision::Int, c::Char, digits) = (tru/;"	f
ini_hex	base/printf.jl	/^ini_hex(out, d::BigFloat, flags::String, width::Int, precision::Int, c::Char, digits) = bigfloat/;"	f
ini_hex	base/printf.jl	/^ini_hex(out, d::BigFloat, ndigits::Int, flags::String, width::Int, precision::Int, c::Char, digi/;"	f
ini_hex	base/printf.jl	/^ini_hex(x::Integer,ndigits::Int,digits) = throw(MethodError(ini_hex,(x,ndigits,digits)))$/;"	f
ini_hex	base/printf.jl	/^ini_hex(x::Real, digits) = ini_hex(x,hex_symbols,digits)$/;"	f
ini_hex	base/printf.jl	/^ini_hex(x::Real, n::Int, digits) = ini_hex(x,n,hex_symbols,digits)$/;"	f
ini_hex	base/printf.jl	/^ini_hex(x::Real, n::Int, symbols::AbstractArray{UInt8,1}, digits) = ini_hex(float(x), n, symbols/;"	f
ini_hex	base/printf.jl	/^ini_hex(x::Real, symbols::AbstractArray{UInt8,1}, digits) = ini_hex(float(x), symbols, digits)$/;"	f
init	contrib/mac/frameworkapp/ExecSandbox/ExecSandbox.m	/^- (instancetype)init {$/;"	m	implementation:ExecSandbox
init	contrib/mac/frameworkapp/JuliaLauncher/AppDelegate.m	/^- (instancetype)init {$/;"	m	implementation:AppDelegate
init	contrib/mac/frameworkapp/JuliaLauncher/AppDelegate.m	/^- (instancetype)init {$/;"	m	implementation:ExecSandboxController
init	deps/gfortblas.c	/^static void init(void) {$/;"	f	typeref:typename:void	file:
init	src/flisp/flisp.h	/^    cvinitfunc_t init;$/;"	m	struct:_fltype_t	typeref:typename:cvinitfunc_t
init	stdlib/LibGit2/src/repository.jl	/^function init(path::AbstractString, bare::Bool=false)$/;"	f
init	stdlib/Profile/src/Profile.jl	/^function init(; n::Union{Nothing,Integer} = nothing, delay::Union{Nothing,Real} = nothing)$/;"	f
init	stdlib/Profile/src/Profile.jl	/^function init(n::Integer, delay::Real)$/;"	f
init!	base/gmp.jl	/^init!(x::BigInt) = (ccall((:__gmpz_init, :libgmp), Cvoid, (mpz_t,), x); x)$/;"	f
init1!	base/grisu/bignum.jl	/^function init1!($/;"	f
init2!	base/gmp.jl	/^init2!(x::BigInt, a) = (ccall((:__gmpz_init2, :libgmp), Cvoid, (mpz_t, bitcnt_t), x, a); x)$/;"	f
init2!	base/grisu/bignum.jl	/^function init2!($/;"	f
init3!	base/grisu/bignum.jl	/^function init3!($/;"	f
initAll	src/llvm-pass-helpers.cpp	/^void JuliaPassContext::initAll(Module &M)$/;"	f	class:JuliaPassContext	typeref:typename:void
initFunctions	src/llvm-pass-helpers.cpp	/^void JuliaPassContext::initFunctions(Module &M)$/;"	f	class:JuliaPassContext	typeref:typename:void
initWithJulia:bundle:	contrib/mac/frameworkapp/JuliaLauncher/AppDelegate.m	/^                       bundle:(NSBundle *_Nullable)b;$/;"	m	interface:JuliaVariant
initWithJulia:bundle:	contrib/mac/frameworkapp/JuliaLauncher/AppDelegate.m	/^- (instancetype)initWithJulia:(NSURL *)exe bundle:(NSBundle *)b {$/;"	m	implementation:JuliaVariant
initWithTask:delegate:cleanup:	contrib/mac/frameworkapp/ExecSandbox/ExecSandbox.m	/^                     cleanup:(dispatch_block_t)onCleanup {$/;"	m	implementation:JuliaTask
init_bind_addr	stdlib/Distributed/src/cluster.jl	/^function init_bind_addr()$/;"	f
init_bits_cgval	src/cgutils.cpp	/^static void init_bits_cgval(jl_codectx_t &ctx, Value *newv, const jl_cgval_t& v, MDNode *tbaa)$/;"	f	typeref:typename:void	file:
init_bits_value	src/cgutils.cpp	/^static void init_bits_value(jl_codectx_t &ctx, Value *newv, Value *v, MDNode *tbaa,$/;"	f	typeref:typename:void	file:
init_depot_path	base/initdefs.jl	/^function init_depot_path()$/;"	f
init_julia_llvm_env	src/codegen.cpp	/^static void init_julia_llvm_env(Module *m)$/;"	f	typeref:typename:void	file:
init_julia_llvm_meta	src/codegen.cpp	/^static void init_julia_llvm_meta(void)$/;"	f	typeref:typename:void	file:
init_load_path	base/initdefs.jl	/^function init_load_path()$/;"	f
init_loc_flds	stdlib/SharedArrays/src/SharedArrays.jl	/^function init_loc_flds(S::SharedArray{T,N}, empty_local=false) where T where N$/;"	f
init_parallel	stdlib/Distributed/src/cluster.jl	/^function init_parallel()$/;"	f
init_regex	base/regex.jl	/^init_regex() = _regex_opts_str[] = foldl(0:15, init=ImmutableDict{UInt32,String}()) do d, o$/;"	f
init_shared_map	src/cgmemmgr.cpp	/^static intptr_t init_shared_map()$/;"	f	namespace:__anon06c686bc0111	typeref:typename:intptr_t	file:
init_state	stdlib/REPL/src/LineEdit.jl	/^function init_state(terminal, m::ModalInterface)$/;"	f
init_state	stdlib/REPL/src/LineEdit.jl	/^init_state(terminal, p::HistoryPrompt) = SearchState(terminal, p, true, IOBuffer(), IOBuffer())$/;"	f
init_state	stdlib/REPL/src/LineEdit.jl	/^init_state(terminal, p::PrefixHistoryPrompt) = PrefixSearchState(terminal, p, "", IOBuffer())$/;"	f
init_state	stdlib/REPL/src/LineEdit.jl	/^init_state(terminal, prompt::Prompt) =$/;"	f
init_stdio	base/stream.jl	/^function init_stdio(handle::Ptr{Cvoid})$/;"	f
init_stdio	src/init.c	/^void init_stdio(void)$/;"	f	typeref:typename:void
init_stdio_handle	src/init.c	/^static void *init_stdio_handle(const char *stdio, uv_os_fd_t fd, int readable)$/;"	f	typeref:typename:void *	file:
init_stenv	src/subtype.c	/^static void init_stenv(jl_stenv_t *e, jl_value_t **env, int envsz)$/;"	f	typeref:typename:void	file:
init_struct_tail	src/datatype.c	/^static void init_struct_tail(jl_datatype_t *type, jl_value_t *jv, size_t na)$/;"	f	typeref:typename:void	file:
init_worker	stdlib/Distributed/src/cluster.jl	/^function init_worker(cookie::AbstractString, manager::ClusterManager=DefaultClusterManager())$/;"	f
initarray!	base/reducedim.jl	/^    @eval initarray!(a::AbstractArray, ::$(Op), init::Bool, src::AbstractArray) = (init && fill!/;"	f
initarray!	base/reducedim.jl	/^    @eval initarray!(a::AbstractArray{T}, ::$(Op), init::Bool, src::AbstractArray) where {T} = (/;"	f
initial-operator?	src/julia-parser.scm	/^(define initial-operator?$/;"	f
initial-reserved-word?	src/julia-parser.scm	/^(define initial-reserved-word? (Set initial-reserved-words))$/;"	f
initial-reserved-words	src/julia-parser.scm	/^(define initial-reserved-words '(begin while if for try return break continue$/;"	f
initialize	src/llvm-alloc-opt.cpp	/^void Optimizer::initialize()$/;"	f	class:__anon0a1571000111::Optimizer	typeref:typename:void
initialize	stdlib/LibGit2/src/LibGit2.jl	/^@noinline function initialize()$/;"	f
initialize_shared_array	stdlib/SharedArrays/src/SharedArrays.jl	/^function initialize_shared_array(S, onlocalhost, init, pids)$/;"	f
initialscaledstartvalues!	base/grisu/bignum.jl	/^function initialscaledstartvalues!(significand,$/;"	f
initmeta	base/docs/Docs.jl	/^function initmeta(m::Module)$/;"	f
initvalue	test/core.jl	/^initvalue(::Type{Char}) = '\\0'$/;"	f
initvalue	test/core.jl	/^initvalue(::Type{Date}) = Date(0, 12, 31)$/;"	f
initvalue	test/core.jl	/^initvalue(::Type{Nothing}) = nothing$/;"	f
initvalue	test/core.jl	/^initvalue(::Type{T}) where {T <: Number} = T(0)$/;"	f
initvalue2	test/core.jl	/^initvalue2(::Type{Char}) = Char(0x01)$/;"	f
initvalue2	test/core.jl	/^initvalue2(::Type{Date}) = Date(1)$/;"	f
initvalue2	test/core.jl	/^initvalue2(::Type{Nothing}) = nothing$/;"	f
initvalue2	test/core.jl	/^initvalue2(::Type{T}) where {T <: Number} = T(1)$/;"	f
inline	base/expr.jl	/^macro inline(ex)$/;"	f
inline_apply!	base/compiler/ssair/inlining.jl	/^function inline_apply!(ir::IRCode, idx::Int, sig::Signature, params::Params)$/;"	f
inline_code	stdlib/Markdown/src/Common/inline.jl	/^function inline_code(stream::IO, md::MD)$/;"	f
inline_depth	src/disasm.cpp	/^    uint32_t inline_depth = 0;$/;"	m	class:DILineInfoPrinter	typeref:typename:uint32_t	file:
inline_into_block!	base/compiler/ssair/inlining.jl	/^function inline_into_block!(state::CFGInliningState, block::Int)$/;"	f
inline_invoke!	base/compiler/ssair/inlining.jl	/^function inline_invoke!(ir::IRCode, idx::Int, sig::Signature, invoke_data::InvokeData, sv::Optim/;"	f
inline_splatnew!	base/compiler/ssair/inlining.jl	/^function inline_splatnew!(ir::IRCode, idx::Int)$/;"	f
inline_sym	src/ast.c	/^jl_sym_t *static_parameter_sym; jl_sym_t *inline_sym;$/;"	v	typeref:typename:jl_sym_t *
inline_worthy	base/compiler/optimize.jl	/^function inline_worthy(body::Array{Any,1}, src::CodeInfo, sptypes::Vector{Any}, slottypes::Vecto/;"	f
inlineable	src/julia.h	/^    uint8_t inlineable;$/;"	m	struct:_jl_code_info_t	typeref:typename:uint8_t
inlineanonymous	base/cartesian.jl	/^function inlineanonymous(ex::Expr, val)$/;"	f
inlineanonymous	base/cartesian.jl	/^inlineanonymous(base::Symbol, ext) = Symbol(base,'_',ext)$/;"	f
inlined	src/julia_internal.h	/^    int inlined;$/;"	m	struct:__anon9dd660c30108	typeref:typename:int
inlined_at	src/codegen.cpp	/^        unsigned inlined_at;$/;"	m	struct:emit_function::DebugLineTable	typeref:typename:unsigned	file:
inlined_test	test/stacktraces.jl	/^module inlined_test$/;"	f
inlining_enabled	base/compiler/utilities.jl	/^inlining_enabled() = (JLOptions().can_inline == 1)$/;"	f
inlining_indent	src/disasm.cpp	/^    struct repeat inlining_indent(const char *c)$/;"	f	class:DILineInfoPrinter	typeref:struct:repeat	file:
inlining_on	test/meta.jl	/^const inlining_on = Base.JLOptions().can_inline != 0$/;"	v
inner	base/essentials.jl	/^    inner() = f(args...; kwargs...)$/;"	f
inner	test/core.jl	/^    function inner()$/;"	f
inner2	test/core.jl	/^    function inner2()$/;"	f
inner_mapslices!	base/abstractarray.jl	/^@noinline function inner_mapslices!(safe_for_reuse, indices, nidx, idx, otherdims, ridx, Aslice,/;"	f
innervars	src/subtype.c	/^    jl_array_t *innervars;$/;"	m	struct:jl_varbinding_t	typeref:typename:jl_array_t *	file:
input	test/asyncmap.jl	/^input = rand(1:1000, 100)$/;"	v
inputText	stdlib/Base64/test/runtests.jl	/^const inputText = "Man is distinguished, not only by his reason, but by this singular passion fr/;"	v
input_color	base/client.jl	/^input_color()  = text_colors[repl_color("JULIA_INPUT_COLOR", default_color_input)]$/;"	f
input_color	stdlib/REPL/src/REPL.jl	/^input_color(r::LineEditREPL) = r.envcolors ? Base.input_color() : r.input_color$/;"	f
input_color	stdlib/REPL/src/REPL.jl	/^input_color(r::StreamREPL) = r.input_color$/;"	f
input_string	stdlib/REPL/src/LineEdit.jl	/^input_string(s::PrefixSearchState) = String(take!(copy(s.response_buffer)))$/;"	f
input_string	stdlib/REPL/src/LineEdit.jl	/^input_string(s::PromptState) = String(take!(copy(s.input_buffer)))$/;"	f
input_string	stdlib/REPL/src/LineEdit.jl	/^input_string(s::SearchState) = String(take!(copy(s.query_buffer)))$/;"	f
input_string_newlines	stdlib/REPL/src/LineEdit.jl	/^input_string_newlines(s::PromptState) = count(c->(c == '\\n'), input_string(s))$/;"	f
input_string_newlines_aftercursor	stdlib/REPL/src/LineEdit.jl	/^function input_string_newlines_aftercursor(s::PromptState)$/;"	f
inputeltypes	stdlib/LinearAlgebra/test/addmul.jl	/^function inputeltypes(celt, alleltypes = alleltypes)$/;"	f
inputmattypes	stdlib/LinearAlgebra/test/addmul.jl	/^function inputmattypes(cmat, mattypes = mattypes)$/;"	f
insert!	base/array.jl	/^function insert!(a::Array{T,1}, i::Integer, item) where T$/;"	f
insert!	base/bitarray.jl	/^function insert!(B::BitVector, i::Integer, item)$/;"	f
insert-after-meta	src/julia-syntax.scm	/^(define (insert-after-meta body stmts)$/;"	f
insertAddress	src/disasm.cpp	/^void SymbolTable::insertAddress(uint64_t addr)$/;"	f	class:__anon2853c92e0211::SymbolTable	typeref:typename:void
insertLifetime	src/llvm-alloc-opt.cpp	/^void Optimizer::insertLifetime(Value *ptr, Constant *sz, Instruction *orig)$/;"	f	class:__anon0a1571000111::Optimizer	typeref:typename:void
insertLifetimeEnd	src/llvm-alloc-opt.cpp	/^void Optimizer::insertLifetimeEnd(Value *ptr, Constant *sz, Instruction *insert)$/;"	f	class:__anon0a1571000111::Optimizer	typeref:typename:void
insert_hlines	stdlib/REPL/src/docview.jl	/^function insert_hlines(io::IO, docs)$/;"	f
insert_node!	base/compiler/ssair/ir.jl	/^function insert_node!(compact::IncrementalCompact, before, @nospecialize(typ), @nospecialize(val/;"	f
insert_node!	base/compiler/ssair/ir.jl	/^function insert_node!(ir::IRCode, pos::Int, @nospecialize(typ), @nospecialize(val), attach_after/;"	f
insert_node_here!	base/compiler/ssair/ir.jl	/^function insert_node_here!(compact::IncrementalCompact, @nospecialize(val), @nospecialize(typ), /;"	f
insertions	stdlib/LibGit2/src/diff.jl	/^function insertions(diff_stat::GitDiffStats)$/;"	f
inside_typedef	src/jltypes.c	/^int inside_typedef = 0;$/;"	v	typeref:typename:int
inst	src/llvm-alloc-opt.cpp	/^        Instruction *inst;$/;"	m	struct:__anon0a1571000111::Optimizer::MemOp	typeref:typename:Instruction *	file:
inst_datatype_env	src/jltypes.c	/^static jl_value_t *inst_datatype_env(jl_value_t *dt, jl_svec_t *p, jl_value_t **iparams, size_t /;"	f	typeref:typename:jl_value_t *	file:
inst_datatype_inner	src/jltypes.c	/^static jl_value_t *inst_datatype_inner(jl_datatype_t *dt, jl_svec_t *p, jl_value_t **iparams, si/;"	f	typeref:typename:jl_value_t *	file:
inst_ftypes	src/jltypes.c	/^static jl_svec_t *inst_ftypes(jl_svec_t *p, jl_typeenv_t *env, jl_typestack_t *stack)$/;"	f	typeref:typename:jl_svec_t *	file:
inst_tuple_w_	src/jltypes.c	/^static jl_value_t *inst_tuple_w_(jl_value_t *t, jl_typeenv_t *env, jl_typestack_t *stack, int ch/;"	f	typeref:typename:jl_value_t *	file:
inst_type_w_	src/jltypes.c	/^static jl_value_t *inst_type_w_(jl_value_t *t, jl_typeenv_t *env, jl_typestack_t *stack, int che/;"	f	typeref:typename:jl_value_t *	file:
install	Makefile	/^install: $(build_depsbindir)\/stringreplace $(BUILDROOT)\/doc\/_build\/html\/en\/index.html$/;"	t
install	deps/Makefile	/^install: $(addprefix install-, $(DEP_LIBS))$/;"	t
install	deps/srccache/patchelf-0.9/Makefile.in	/^install: install-recursive$/;"	t
install	deps/srccache/patchelf-0.9/src/Makefile.in	/^install: install-am$/;"	t
install	deps/srccache/patchelf-0.9/tests/Makefile.in	/^install: install-am$/;"	t
install	stdlib/Makefile	/^install: $(addprefix install-, $(STDLIBS_EXT)) $(STDLIBS_LINK_TARGETS)$/;"	t
install-am	deps/srccache/patchelf-0.9/Makefile.in	/^install-am: all-am$/;"	t
install-am	deps/srccache/patchelf-0.9/src/Makefile.in	/^install-am: all-am$/;"	t
install-am	deps/srccache/patchelf-0.9/tests/Makefile.in	/^install-am: all-am$/;"	t
install-binPROGRAMS	deps/srccache/patchelf-0.9/src/Makefile.in	/^install-binPROGRAMS: $(bin_PROGRAMS)$/;"	t
install-data	deps/srccache/patchelf-0.9/Makefile.in	/^install-data: install-data-recursive$/;"	t
install-data	deps/srccache/patchelf-0.9/src/Makefile.in	/^install-data: install-data-am$/;"	t
install-data	deps/srccache/patchelf-0.9/tests/Makefile.in	/^install-data: install-data-am$/;"	t
install-data-am	deps/srccache/patchelf-0.9/Makefile.in	/^install-data-am: install-docDATA install-man$/;"	t
install-data-am	deps/srccache/patchelf-0.9/src/Makefile.in	/^install-data-am:$/;"	t
install-data-am	deps/srccache/patchelf-0.9/tests/Makefile.in	/^install-data-am:$/;"	t
install-docDATA	deps/srccache/patchelf-0.9/Makefile.in	/^install-docDATA: $(doc_DATA)$/;"	t
install-dvi	deps/srccache/patchelf-0.9/Makefile.in	/^install-dvi: install-dvi-recursive$/;"	t
install-dvi	deps/srccache/patchelf-0.9/src/Makefile.in	/^install-dvi: install-dvi-am$/;"	t
install-dvi	deps/srccache/patchelf-0.9/tests/Makefile.in	/^install-dvi: install-dvi-am$/;"	t
install-dvi-am	deps/srccache/patchelf-0.9/Makefile.in	/^install-dvi-am:$/;"	t
install-dvi-am	deps/srccache/patchelf-0.9/src/Makefile.in	/^install-dvi-am:$/;"	t
install-dvi-am	deps/srccache/patchelf-0.9/tests/Makefile.in	/^install-dvi-am:$/;"	t
install-exec	deps/srccache/patchelf-0.9/Makefile.in	/^install-exec: install-exec-recursive$/;"	t
install-exec	deps/srccache/patchelf-0.9/src/Makefile.in	/^install-exec: install-exec-am$/;"	t
install-exec	deps/srccache/patchelf-0.9/tests/Makefile.in	/^install-exec: install-exec-am$/;"	t
install-exec-am	deps/srccache/patchelf-0.9/Makefile.in	/^install-exec-am:$/;"	t
install-exec-am	deps/srccache/patchelf-0.9/src/Makefile.in	/^install-exec-am: install-binPROGRAMS$/;"	t
install-exec-am	deps/srccache/patchelf-0.9/tests/Makefile.in	/^install-exec-am:$/;"	t
install-html	deps/srccache/patchelf-0.9/Makefile.in	/^install-html: install-html-recursive$/;"	t
install-html	deps/srccache/patchelf-0.9/src/Makefile.in	/^install-html: install-html-am$/;"	t
install-html	deps/srccache/patchelf-0.9/tests/Makefile.in	/^install-html: install-html-am$/;"	t
install-html-am	deps/srccache/patchelf-0.9/Makefile.in	/^install-html-am:$/;"	t
install-html-am	deps/srccache/patchelf-0.9/src/Makefile.in	/^install-html-am:$/;"	t
install-html-am	deps/srccache/patchelf-0.9/tests/Makefile.in	/^install-html-am:$/;"	t
install-info	deps/srccache/patchelf-0.9/Makefile.in	/^install-info: install-info-recursive$/;"	t
install-info	deps/srccache/patchelf-0.9/src/Makefile.in	/^install-info: install-info-am$/;"	t
install-info	deps/srccache/patchelf-0.9/tests/Makefile.in	/^install-info: install-info-am$/;"	t
install-info-am	deps/srccache/patchelf-0.9/Makefile.in	/^install-info-am:$/;"	t
install-info-am	deps/srccache/patchelf-0.9/src/Makefile.in	/^install-info-am:$/;"	t
install-info-am	deps/srccache/patchelf-0.9/tests/Makefile.in	/^install-info-am:$/;"	t
install-lapack	deps/blas.mk	/^install-lapack: install-openblas$/;"	t
install-libcxx	deps/llvm.mk	/^install-libcxx: $(build_libdir)\/libc++.so.1.0$/;"	t
install-libcxxabi	deps/llvm.mk	/^install-libcxxabi: $(build_libdir)\/libc++abi.so.1.0$/;"	t
install-libgit2	deps/libgit2.mk	/^install-libgit2: $(build_datarootdir)\/julia\/cert.pem$/;"	t
install-man	deps/srccache/patchelf-0.9/Makefile.in	/^install-man: install-man1$/;"	t
install-man	deps/srccache/patchelf-0.9/src/Makefile.in	/^install-man:$/;"	t
install-man	deps/srccache/patchelf-0.9/tests/Makefile.in	/^install-man:$/;"	t
install-man1	deps/srccache/patchelf-0.9/Makefile.in	/^install-man1: $(man1_MANS)$/;"	t
install-osxunwind	deps/unwind.mk	/^install-osxunwind: $(build_prefix)\/manifest\/osxunwind$/;"	t
install-pdf	deps/srccache/patchelf-0.9/Makefile.in	/^install-pdf: install-pdf-recursive$/;"	t
install-pdf	deps/srccache/patchelf-0.9/src/Makefile.in	/^install-pdf: install-pdf-am$/;"	t
install-pdf	deps/srccache/patchelf-0.9/tests/Makefile.in	/^install-pdf: install-pdf-am$/;"	t
install-pdf-am	deps/srccache/patchelf-0.9/Makefile.in	/^install-pdf-am:$/;"	t
install-pdf-am	deps/srccache/patchelf-0.9/src/Makefile.in	/^install-pdf-am:$/;"	t
install-pdf-am	deps/srccache/patchelf-0.9/tests/Makefile.in	/^install-pdf-am:$/;"	t
install-ps	deps/srccache/patchelf-0.9/Makefile.in	/^install-ps: install-ps-recursive$/;"	t
install-ps	deps/srccache/patchelf-0.9/src/Makefile.in	/^install-ps: install-ps-am$/;"	t
install-ps	deps/srccache/patchelf-0.9/tests/Makefile.in	/^install-ps: install-ps-am$/;"	t
install-ps-am	deps/srccache/patchelf-0.9/Makefile.in	/^install-ps-am:$/;"	t
install-ps-am	deps/srccache/patchelf-0.9/src/Makefile.in	/^install-ps-am:$/;"	t
install-ps-am	deps/srccache/patchelf-0.9/tests/Makefile.in	/^install-ps-am:$/;"	t
install-strip	deps/srccache/patchelf-0.9/Makefile.in	/^install-strip:$/;"	t
install-strip	deps/srccache/patchelf-0.9/src/Makefile.in	/^install-strip:$/;"	t
install-strip	deps/srccache/patchelf-0.9/tests/Makefile.in	/^install-strip:$/;"	t
install-suitesparse	deps/suitesparse.mk	/^install-suitesparse: $(build_prefix)\/manifest\/suitesparse install-suitesparse-wrapper$/;"	t
install-suitesparse-wrapper	deps/suitesparse.mk	/^install-suitesparse-wrapper: $(build_shlibdir)\/libsuitesparse_wrapper.$(SHLIB_EXT)$/;"	t
install-suitesparse-wrapper	deps/suitesparse.mk	/^install-suitesparse-wrapper: install-suitesparse$/;"	t
install_sh	deps/srccache/patchelf-0.9/Makefile.in	/^install_sh = @install_sh@$/;"	m
install_sh	deps/srccache/patchelf-0.9/src/Makefile.in	/^install_sh = @install_sh@$/;"	m
install_sh	deps/srccache/patchelf-0.9/tests/Makefile.in	/^install_sh = @install_sh@$/;"	m
install_sh_DATA	deps/srccache/patchelf-0.9/Makefile.in	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	deps/srccache/patchelf-0.9/src/Makefile.in	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	deps/srccache/patchelf-0.9/tests/Makefile.in	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	deps/srccache/patchelf-0.9/Makefile.in	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	deps/srccache/patchelf-0.9/src/Makefile.in	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	deps/srccache/patchelf-0.9/tests/Makefile.in	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	deps/srccache/patchelf-0.9/Makefile.in	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	deps/srccache/patchelf-0.9/src/Makefile.in	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	deps/srccache/patchelf-0.9/tests/Makefile.in	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
installcheck	deps/srccache/patchelf-0.9/Makefile.in	/^installcheck: installcheck-recursive$/;"	t
installcheck	deps/srccache/patchelf-0.9/src/Makefile.in	/^installcheck: installcheck-am$/;"	t
installcheck	deps/srccache/patchelf-0.9/tests/Makefile.in	/^installcheck: installcheck-am$/;"	t
installcheck-am	deps/srccache/patchelf-0.9/Makefile.in	/^installcheck-am:$/;"	t
installcheck-am	deps/srccache/patchelf-0.9/src/Makefile.in	/^installcheck-am:$/;"	t
installcheck-am	deps/srccache/patchelf-0.9/tests/Makefile.in	/^installcheck-am:$/;"	t
installdirs	deps/srccache/patchelf-0.9/Makefile.in	/^installdirs: installdirs-recursive$/;"	t
installdirs	deps/srccache/patchelf-0.9/src/Makefile.in	/^installdirs:$/;"	t
installdirs	deps/srccache/patchelf-0.9/tests/Makefile.in	/^installdirs:$/;"	t
installdirs-am	deps/srccache/patchelf-0.9/Makefile.in	/^installdirs-am:$/;"	t
instance	src/julia.h	/^    jl_value_t *instance;  \/\/ for singletons$/;"	m	struct:_jl_datatype_t	typeref:typename:jl_value_t *
instanceof_tfunc	base/compiler/tfuncs.jl	/^function instanceof_tfunc(@nospecialize(t))$/;"	f
instances	base/reflection.jl	/^function instances end$/;"	f
instantiate	base/broadcast.jl	/^@inline function instantiate(bc::Broadcasted{Style}) where {Style}$/;"	f
instantiate	base/broadcast.jl	/^function instantiate(bc::Broadcasted{Style{Tuple}})$/;"	f
instantiate	base/broadcast.jl	/^instantiate(bc::Broadcasted{<:AbstractArrayStyle{0}}) = bc$/;"	f
instantiate	base/broadcast.jl	/^instantiate(bc::Broadcasted{Style{Tuple}, Nothing}) = bc$/;"	f
instantiate	base/broadcast.jl	/^instantiate(x) = x$/;"	f
instantiate_with	src/jltypes.c	/^static jl_value_t *instantiate_with(jl_value_t *t, jl_value_t **env, size_t n, jl_typeenv_t *te)$/;"	f	typeref:typename:jl_value_t *	file:
instead	base/simdloop.jl	/^    function instead of `?:` in the loop if it is safe to do so.$/;"	f
instrsym	src/flisp/flisp.h	/^    value_t instrsym, outstrsym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
instrumentWasmExports	src/jsvm-emscripten/asyncify_setup.js	/^        Asyncify.instrumentWasmExports = function (exports) { return exports; };$/;"	f	function:Asyncify
int128_str	base/boot.jl	/^macro int128_str end$/;"	f
int128_str	base/int.jl	/^macro int128_str(s)$/;"	f
int128_t	src/ccalltest.c	/^#define int128_t /;"	d	file:
int16sym	src/flisp/flisp.h	/^    value_t int8sym, uint8sym, int16sym, uint16sym, int32sym, uint32sym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
int16type	src/flisp/flisp.h	/^    fltype_t *int16type, *uint16type;$/;"	m	struct:_fl_context_t	typeref:typename:fltype_t *
int24363	test/core.jl	/^int24363 = A24363(65535)$/;"	v
int32hash	src/support/hashing.c	/^uint32_t int32hash(uint32_t a)$/;"	f	typeref:typename:uint32_t
int32sym	src/flisp/flisp.h	/^    value_t int8sym, uint8sym, int16sym, uint16sym, int32sym, uint32sym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
int32type	src/flisp/flisp.h	/^    fltype_t *int32type, *uint32type;$/;"	m	struct:_fl_context_t	typeref:typename:fltype_t *
int32x2_t	src/ccalltest.c	/^typedef int32_t int32x2_t __attribute__ ((vector_size (8)));$/;"	t	typeref:typename:int32_t	file:
int32x4_t	src/ccalltest.c	/^typedef int32_t int32x4_t __attribute__ ((vector_size (16)));$/;"	t	typeref:typename:int32_t	file:
int64hash	src/support/hashing.c	/^uint64_t int64hash(uint64_t key)$/;"	f	typeref:typename:uint64_t
int64sym	src/flisp/flisp.h	/^    value_t int64sym, uint64sym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
int64to32hash	src/support/hashing.c	/^uint32_t int64to32hash(uint64_t key)$/;"	f	typeref:typename:uint32_t
int64type	src/flisp/flisp.h	/^    fltype_t *int64type, *uint64type;$/;"	m	struct:_fl_context_t	typeref:typename:fltype_t *
int8_t	src/jlapi.c	/^JL_DLLEXPORT int8_t (jl_gc_safe_enter)(void)$/;"	f	typeref:typename:JL_DLLEXPORT
int8_t	src/jlapi.c	/^JL_DLLEXPORT int8_t (jl_gc_unsafe_enter)(void)$/;"	f	typeref:typename:JL_DLLEXPORT
int8sym	src/flisp/flisp.h	/^    value_t int8sym, uint8sym, int16sym, uint16sym, int32sym, uint32sym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
int8type	src/flisp/flisp.h	/^    fltype_t *int8type, *uint8type;$/;"	m	struct:_fl_context_t	typeref:typename:fltype_t *
int_regs	src/abi_x86_64.cpp	/^uint8_t int_regs, sse_regs;$/;"	m	struct:ABI_x86_64Layout	typeref:typename:uint8_t	file:
int_symdiff!	base/bitset.jl	/^function int_symdiff!(s::BitSet, n::Integer)$/;"	f
int_t	src/support/dtypes.h	/^typedef int32_t int_t;$/;"	t	typeref:typename:int32_t
int_t	src/support/dtypes.h	/^typedef int64_t int_t;$/;"	t	typeref:typename:int64_t
int_types	test/rational.jl	/^int_types = Base.BitInteger64_types$/;"	v
integerPart	src/APInt-C.h	/^using integerPart = llvm::APInt::WordType;$/;"	t	typeref:typename:llvm::APInt::WordType
integerPartWidth	src/APInt-C.cpp	/^const unsigned int integerPartWidth = llvm::APInt::APINT_BITS_PER_WORD;$/;"	v	typeref:typename:const unsigned int
integerpow	stdlib/LinearAlgebra/src/dense.jl	/^function integerpow(A::AbstractMatrix{T}, p) where T$/;"	f
intel_3735d	src/processor_arm.cpp	/^    intel_3735d,$/;"	e	enum:ARM::CPU	file:
intel_3735d	src/processor_arm.cpp	/^constexpr auto intel_3735d = armv7a | get_feature_masks(vfp3, neon);$/;"	v	namespace:ARM::Feature	typeref:typename:auto
intel_atom_bonnell	src/processor_x86.cpp	/^    intel_atom_bonnell,$/;"	e	enum:X86::CPU	file:
intel_atom_goldmont	src/processor_x86.cpp	/^    intel_atom_goldmont,$/;"	e	enum:X86::CPU	file:
intel_atom_silvermont	src/processor_x86.cpp	/^    intel_atom_silvermont,$/;"	e	enum:X86::CPU	file:
intel_core2	src/processor_x86.cpp	/^    intel_core2,$/;"	e	enum:X86::CPU	file:
intel_core2_penryn	src/processor_x86.cpp	/^    intel_core2_penryn,$/;"	e	enum:X86::CPU	file:
intel_corei7_broadwell	src/processor_x86.cpp	/^    intel_corei7_broadwell,$/;"	e	enum:X86::CPU	file:
intel_corei7_cannonlake	src/processor_x86.cpp	/^    intel_corei7_cannonlake,$/;"	e	enum:X86::CPU	file:
intel_corei7_haswell	src/processor_x86.cpp	/^    intel_corei7_haswell,$/;"	e	enum:X86::CPU	file:
intel_corei7_ivybridge	src/processor_x86.cpp	/^    intel_corei7_ivybridge,$/;"	e	enum:X86::CPU	file:
intel_corei7_nehalem	src/processor_x86.cpp	/^    intel_corei7_nehalem,$/;"	e	enum:X86::CPU	file:
intel_corei7_sandybridge	src/processor_x86.cpp	/^    intel_corei7_sandybridge,$/;"	e	enum:X86::CPU	file:
intel_corei7_skylake	src/processor_x86.cpp	/^    intel_corei7_skylake,$/;"	e	enum:X86::CPU	file:
intel_corei7_skylake_avx512	src/processor_x86.cpp	/^    intel_corei7_skylake_avx512,$/;"	e	enum:X86::CPU	file:
intel_corei7_westmere	src/processor_x86.cpp	/^    intel_corei7_westmere,$/;"	e	enum:X86::CPU	file:
intel_knights_landing	src/processor_x86.cpp	/^    intel_knights_landing,$/;"	e	enum:X86::CPU	file:
intel_nocona	src/processor_x86.cpp	/^    intel_nocona,$/;"	e	enum:X86::CPU	file:
intel_prescott	src/processor_x86.cpp	/^    intel_prescott,$/;"	e	enum:X86::CPU	file:
intel_yonah	src/processor_x86.cpp	/^    intel_yonah,$/;"	e	enum:X86::CPU	file:
internal_obj_scan	test/gcext/LocalTest.jl	/^function internal_obj_scan(p :: Any)$/;"	f
internal_obj_scan	test/gcext/gcext.c	/^int internal_obj_scan(jl_value_t *val)$/;"	f	typeref:typename:int
internalfunction	test/staged.jl	/^internalfunction(x) = x+1$/;"	f
interp	stdlib/Markdown/src/Julia/interp.jl	/^function interp(stream::IO, md::MD)$/;"	f
interpinner	stdlib/Markdown/src/Julia/interp.jl	/^function interpinner(stream::IO, greedy = false)$/;"	f
interpret_symbol_arg	src/ccall.cpp	/^static void interpret_symbol_arg(jl_codectx_t &ctx, native_sym_arg_t &out, jl_value_t *arg, cons/;"	f	typeref:typename:void	file:
interpret_toplevel_expr_in_args	src/interpreter.c	/^struct interpret_toplevel_expr_in_args {$/;"	s	file:
interpreter_state	src/interpreter.c	/^} interpreter_state;$/;"	t	typeref:struct:__anonf89725e10108	file:
interrupt	stdlib/Distributed/src/cluster.jl	/^function interrupt(pid::Integer)$/;"	f
interrupt	stdlib/Distributed/src/cluster.jl	/^function interrupt(pids::AbstractVector=workers())$/;"	f
interrupt	stdlib/Distributed/src/cluster.jl	/^interrupt(pids::Integer...) = interrupt([pids...])$/;"	f
intersect	base/abstractset.jl	/^intersect(s) = union(s)$/;"	f
intersect	base/abstractset.jl	/^intersect(s::AbstractSet, itr) = mapfilter(_in(s), push!, itr, emptymutable(s))$/;"	f
intersect	base/abstractset.jl	/^intersect(s::AbstractSet, itr, itrs...) = intersect!(intersect(s, itr), itrs...)$/;"	f
intersect	base/array.jl	/^intersect(itr, itrs...) = _shrink(intersect!, itr, itrs)$/;"	f
intersect	base/bitset.jl	/^intersect(s1::BitSet, s2::BitSet) =$/;"	f
intersect	base/range.jl	/^function intersect(r1::AbstractRange, r2::AbstractRange, r3::AbstractRange, r::AbstractRange...)$/;"	f
intersect	base/range.jl	/^function intersect(r::AbstractUnitRange{<:Integer}, s::StepRange{<:Integer})$/;"	f
intersect	base/range.jl	/^function intersect(r::StepRange, s::StepRange)$/;"	f
intersect	base/range.jl	/^function intersect(r::StepRange{<:Integer}, s::AbstractUnitRange{<:Integer})$/;"	f
intersect	base/range.jl	/^intersect(i::Integer, r::AbstractUnitRange{<:Integer}) =$/;"	f
intersect	base/range.jl	/^intersect(r::AbstractUnitRange{<:Integer}, i::Integer) = intersect(i, r)$/;"	f
intersect	base/range.jl	/^intersect(r::AbstractUnitRange{<:Integer}, s::AbstractUnitRange{<:Integer}) = max(first(r),first/;"	f
intersect	base/range.jl	/^intersect(r::OneTo, s::OneTo) = OneTo(min(r.stop,s.stop))$/;"	f
intersect	base/reinterpretarray.jl	/^function intersect(p1::Padding, p2::Padding)$/;"	f
intersect	src/subtype.c	/^static jl_value_t *intersect(jl_value_t *x, jl_value_t *y, jl_stenv_t *e, int param)$/;"	f	typeref:typename:jl_value_t *	file:
intersect	src/utils.scm	/^(define (intersect s1 s2)$/;"	f
intersect!	base/abstractset.jl	/^function intersect!(s::AbstractSet, itrs...)$/;"	f
intersect!	base/abstractset.jl	/^intersect!(s::AbstractSet, itr) =$/;"	f
intersect!	base/abstractset.jl	/^intersect!(s::AbstractSet, s2::AbstractSet) = filter!(_in(s2), s)$/;"	f
intersect!	base/array.jl	/^intersect!(v::AbstractVector, itrs...) = _shrink!(intersect!, v, itrs)$/;"	f
intersect!	base/bitset.jl	/^intersect!(s1::BitSet, s2::BitSet) = _matched_map!(&, s1, s2)$/;"	f
intersect_all	src/subtype.c	/^static jl_value_t *intersect_all(jl_value_t *x, jl_value_t *y, jl_stenv_t *e)$/;"	f	typeref:typename:jl_value_t *	file:
intersect_aside	src/subtype.c	/^static jl_value_t *intersect_aside(jl_value_t *x, jl_value_t *y, jl_stenv_t *e, int R, int d)$/;"	f	typeref:typename:jl_value_t *	file:
intersect_invariant	src/subtype.c	/^static jl_value_t *intersect_invariant(jl_value_t *x, jl_value_t *y, jl_stenv_t *e)$/;"	f	typeref:typename:jl_value_t *	file:
intersect_sub_datatype	src/subtype.c	/^static jl_value_t *intersect_sub_datatype(jl_datatype_t *xd, jl_datatype_t *yd, jl_stenv_t *e, i/;"	f	typeref:typename:jl_value_t *	file:
intersect_tuple	src/subtype.c	/^static jl_value_t *intersect_tuple(jl_datatype_t *xd, jl_datatype_t *yd, jl_stenv_t *e, int para/;"	f	typeref:typename:jl_value_t *	file:
intersect_type_type	src/subtype.c	/^static jl_value_t *intersect_type_type(jl_value_t *x, jl_value_t *y, jl_stenv_t *e, int8_t R)$/;"	f	typeref:typename:jl_value_t *	file:
intersect_types	src/subtype.c	/^static jl_value_t *intersect_types(jl_value_t *x, jl_value_t *y, int emptiness_only)$/;"	f	typeref:typename:jl_value_t *	file:
intersect_union	src/subtype.c	/^static jl_value_t *intersect_union(jl_value_t *x, jl_uniontype_t *u, jl_stenv_t *e, int8_t R, in/;"	f	typeref:typename:jl_value_t *	file:
intersect_unionall	src/subtype.c	/^static jl_value_t *intersect_unionall(jl_value_t *t, jl_unionall_t *u, jl_stenv_t *e, int8_t R, /;"	f	typeref:typename:jl_value_t *	file:
intersect_unionall_	src/subtype.c	/^static jl_value_t *intersect_unionall_(jl_value_t *t, jl_unionall_t *u, jl_stenv_t *e, int8_t R,/;"	f	typeref:typename:jl_value_t *	file:
intersect_var	src/subtype.c	/^static jl_value_t *intersect_var(jl_tvar_t *b, jl_value_t *a, jl_stenv_t *e, int8_t R, int param/;"	f	typeref:typename:jl_value_t *	file:
intersect_vararg_length	src/subtype.c	/^static int intersect_vararg_length(jl_value_t *v, ssize_t n, jl_stenv_t *e, int8_t R)$/;"	f	typeref:typename:int	file:
intersection	src/subtype.c	/^    int intersection;         \/\/ true iff subtype is being called from intersection$/;"	m	struct:jl_stenv_t	typeref:typename:int	file:
intersection_env	test/subtype.jl	/^intersection_env(@nospecialize(x), @nospecialize(y)) = ccall(:jl_type_intersection_with_env, Any/;"	f
interv	src/gc.h	/^    uint64_t interv;$/;"	m	struct:__anoncf30557c0108	typeref:typename:uint64_t
interval	src/gc.h	/^    size_t      interval;$/;"	m	struct:__anoncf30557c0308	typeref:typename:size_t
inthash	src/support/hashing.h	/^#define inthash /;"	d
intoffset	base/bitset.jl	/^@inline intoffset(s::BitSet) = s.offset << 6$/;"	f
intorfloat_notzeropres	stdlib/SparseArrays/test/higherorderfns.jl	/^    intorfloat_notzeropres(xs...) = all(iszero, xs) ? Int(1) : zero(Float64)$/;"	f
intorfloat_zeropres	stdlib/SparseArrays/test/higherorderfns.jl	/^    intorfloat_zeropres(xs...) = all(iszero, xs) ? zero(Float64) : Int(1)$/;"	f
intrinsic	src/intrinsics.h	/^enum intrinsic {$/;"	g
intrinsic_1_t	src/runtime_intrinsics.c	/^typedef void (*intrinsic_1_t)(unsigned, void*, void*);$/;"	t	typeref:typename:void (*)(unsigned,void *,void *)	file:
intrinsic_2_t	src/runtime_intrinsics.c	/^typedef void (*intrinsic_2_t)(unsigned, void*, void*, void*);$/;"	t	typeref:typename:void (*)(unsigned,void *,void *,void *)	file:
intrinsic_cmp_t	src/runtime_intrinsics.c	/^typedef int (*intrinsic_cmp_t)(unsigned, void*, void*);$/;"	t	typeref:typename:int (*)(unsigned,void *,void *)	file:
intrinsic_cvt_check_t	src/runtime_intrinsics.c	/^typedef unsigned (*intrinsic_cvt_check_t)(unsigned, unsigned, void*);$/;"	t	typeref:typename:unsigned (*)(unsigned,unsigned,void *)	file:
intrinsic_cvt_t	src/runtime_intrinsics.c	/^typedef void (*intrinsic_cvt_t)(unsigned, void*, unsigned, void*);$/;"	t	typeref:typename:void (*)(unsigned,void *,unsigned,void *)	file:
intrinsic_effect_free_if_nothrow	base/compiler/optimize.jl	/^intrinsic_effect_free_if_nothrow(f) = f === Intrinsics.pointerref || is_pure_intrinsic_infer(f)$/;"	f
intrinsic_nothrow	base/compiler/tfuncs.jl	/^function intrinsic_nothrow(f::IntrinsicFunction, argtypes::Array{Any, 1})$/;"	f
intrinsic_nothrow	base/compiler/tfuncs.jl	/^intrinsic_nothrow(f::IntrinsicFunction) = !($/;"	f
intrinsic_u1_t	src/runtime_intrinsics.c	/^typedef unsigned (*intrinsic_u1_t)(unsigned, void*);$/;"	t	typeref:typename:unsigned (*)(unsigned,void *)	file:
intstr	test/staged.jl	/^const intstr = @sprintf("%s", Int)$/;"	v
inttype	base/atomics.jl	/^inttype(::Type{Float16}) = Int16$/;"	f
inttype	base/atomics.jl	/^inttype(::Type{Float32}) = Int32$/;"	f
inttype	base/atomics.jl	/^inttype(::Type{Float64}) = Int64$/;"	f
inttype	base/atomics.jl	/^inttype(::Type{T}) where {T<:Integer} = T$/;"	f
inttypes	stdlib/LinearAlgebra/test/addmul.jl	/^inttypes = [$/;"	v
intvls	stdlib/FileWatching/test/runtests.jl	/^intvls = [2, .2, .1, .005]$/;"	v
inv	base/complex.jl	/^function inv(w::ComplexF64)$/;"	f
inv	base/complex.jl	/^function inv(z::Complex)$/;"	f
inv	base/complex.jl	/^inv(z::Complex{<:Integer}) = inv(float(z))$/;"	f
inv	base/complex.jl	/^inv(z::Complex{<:Union{Float16,Float32}}) =$/;"	f
inv	base/int.jl	/^inv(x::Integer) = float(one(x)) \/ float(x)$/;"	f
inv	base/irrationals.jl	/^inv(x::AbstractIrrational) = 1\/x$/;"	f
inv	base/mpfr.jl	/^inv(x::BigFloat) = one(Clong) \/ x # faster than fallback one(x)\/x$/;"	f
inv	base/number.jl	/^inv(x::Number) = one(x)\/x$/;"	f
inv	base/rational.jl	/^inv(x::Rational) = Rational(x.den, x.num)$/;"	f
inv	stdlib/LinearAlgebra/src/bunchkaufman.jl	/^function inv(B::BunchKaufman{<:BlasComplex})$/;"	f
inv	stdlib/LinearAlgebra/src/bunchkaufman.jl	/^function inv(B::BunchKaufman{<:BlasReal})$/;"	f
inv	stdlib/LinearAlgebra/src/cholesky.jl	/^function inv(C::CholeskyPivoted)$/;"	f
inv	stdlib/LinearAlgebra/src/cholesky.jl	/^inv(C::Cholesky{<:BlasFloat,<:StridedMatrix}) = inv!(copy(C))$/;"	f
inv	stdlib/LinearAlgebra/src/dense.jl	/^function inv(A::StridedMatrix{T}) where T$/;"	f
inv	stdlib/LinearAlgebra/src/diagonal.jl	/^function inv(D::Diagonal{T}) where T$/;"	f
inv	stdlib/LinearAlgebra/src/eigen.jl	/^inv(A::Eigen) = A.vectors * inv(Diagonal(A.values)) \/ A.vectors$/;"	f
inv	stdlib/LinearAlgebra/src/factorization.jl	/^inv(F::Factorization{T}) where {T} = (n = size(F, 1); ldiv!(F, Matrix{T}(I, n, n)))$/;"	f
inv	stdlib/LinearAlgebra/src/generic.jl	/^function inv(A::AbstractMatrix{T}) where T$/;"	f
inv	stdlib/LinearAlgebra/src/generic.jl	/^inv(A::Adjoint) = adjoint(inv(parent(A)))$/;"	f
inv	stdlib/LinearAlgebra/src/generic.jl	/^inv(A::Transpose) = transpose(inv(parent(A)))$/;"	f
inv	stdlib/LinearAlgebra/src/lu.jl	/^inv(A::LU{<:BlasFloat,<:StridedMatrix}) = inv!(copy(A))$/;"	f
inv	stdlib/LinearAlgebra/src/svd.jl	/^function inv(F::SVD{T}) where T$/;"	f
inv	stdlib/LinearAlgebra/src/symmetric.jl	/^inv(A::Hermitian{<:Any,<:StridedMatrix}) = Hermitian(_inv(A), sym_uplo(A.uplo))$/;"	f
inv	stdlib/LinearAlgebra/src/symmetric.jl	/^inv(A::Symmetric{<:Any,<:StridedMatrix}) = Symmetric(_inv(A), sym_uplo(A.uplo))$/;"	f
inv	stdlib/LinearAlgebra/src/triangular.jl	/^function inv(A::LowerTriangular{T}) where T$/;"	f
inv	stdlib/LinearAlgebra/src/triangular.jl	/^function inv(A::UpperTriangular{T}) where T$/;"	f
inv	stdlib/LinearAlgebra/src/triangular.jl	/^inv(A::UnitLowerTriangular{T}) where {T} = UnitLowerTriangular(ldiv!(A, Matrix{T}(I, size(A, 1),/;"	f
inv	stdlib/LinearAlgebra/src/triangular.jl	/^inv(A::UnitUpperTriangular{T}) where {T} = UnitUpperTriangular(ldiv!(A, Matrix{T}(I, size(A, 1),/;"	f
inv	stdlib/LinearAlgebra/src/uniformscaling.jl	/^inv(J::UniformScaling) = UniformScaling(inv(J.λ))$/;"	f
inv	stdlib/SparseArrays/src/linalg.jl	/^inv(A::AbstractSparseMatrixCSC) = error("The inverse of a sparse matrix can often be dense and c/;"	f
inv!	stdlib/LinearAlgebra/src/cholesky.jl	/^inv!(C::Cholesky{<:BlasFloat,<:StridedMatrix}) =$/;"	f
inv!	stdlib/LinearAlgebra/src/lu.jl	/^inv!(A::LU{<:BlasFloat,<:StridedMatrix}) =$/;"	f
inv!	stdlib/LinearAlgebra/src/lu.jl	/^inv!(A::LU{T,<:StridedMatrix}) where {T} =$/;"	f
inv!	stdlib/LinearAlgebra/src/triangular.jl	/^        inv!(A::$t{T,S}) where {T<:BlasFloat,S<:StridedMatrix} =$/;"	f
inv_fast	base/fastmath.jl	/^    inv_fast(x::ComplexTypes) = conj(x) \/ abs2(x)$/;"	f
invalid-identifier?	src/julia-parser.scm	/^(define invalid-identifier? (Set (list* '.... '? '|.'| syntactic-operators)))$/;"	f
invalid_char	base/char.jl	/^@noinline invalid_char(c::AbstractChar) = throw(InvalidCharError(c))$/;"	f
invalid_dlm	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^invalid_dlm(::Type{Char})   = reinterpret(Char, 0xfffffffe)$/;"	f
invalid_dlm	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^invalid_dlm(::Type{UInt16}) = 0xfffe$/;"	f
invalid_dlm	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^invalid_dlm(::Type{UInt32}) = 0xfffffffe$/;"	f
invalid_dlm	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^invalid_dlm(::Type{UInt8})  = 0xfe$/;"	f
invalid_history_message	stdlib/REPL/src/REPL.jl	/^invalid_history_message(path::String) = """$/;"	f
invalid_tupleref	test/core.jl	/^function invalid_tupleref()$/;"	f
invalidate_backedges	src/gf.c	/^static int invalidate_backedges(jl_typemap_entry_t *oldentry, struct typemap_intersection_env *c/;"	f	typeref:typename:int	file:
invalidate_conflicting_env	src/gf.c	/^struct invalidate_conflicting_env {$/;"	s	file:
invalidate_method_instance	src/gf.c	/^static void invalidate_method_instance(jl_method_instance_t *replaced, size_t max_world, int dep/;"	f	typeref:typename:void	file:
invalidate_mt_cache	src/gf.c	/^static int invalidate_mt_cache(jl_typemap_entry_t *oldentry, void *closure0)$/;"	f	typeref:typename:int	file:
invalidate_mt_env	src/gf.c	/^struct invalidate_mt_env {$/;"	s	file:
invalidated	src/gf.c	/^    int invalidated;$/;"	m	struct:invalidate_conflicting_env	typeref:typename:int	file:
invdepth	src/subtype.c	/^    int invdepth;             \/\/ # of invariant constructors we're nested in on the left$/;"	m	struct:jl_stenv_t	typeref:typename:int	file:
invert	base/gmp.jl	/^invert(a::BigInt, b::BigInt) = invert!(BigInt(), a, b)$/;"	f
invert!	base/gmp.jl	/^invert!(x::BigInt, a::BigInt, b::BigInt) =$/;"	f
invert!	base/gmp.jl	/^invert!(x::BigInt, b::BigInt) = invert!(x, x, b)$/;"	f
invmod	base/gmp.jl	/^function invmod(x::BigInt, y::BigInt)$/;"	f
invmod	base/intfuncs.jl	/^function invmod(n::T, m::T) where T<:Integer$/;"	f
invmod	base/intfuncs.jl	/^invmod(n::Integer, m::Integer) = invmod(promote(n,m)...)$/;"	f
invoke	src/julia.h	/^    jl_callptr_t invoke; \/\/ jlcall entry point$/;"	m	struct:_jl_code_instance_t	typeref:typename:jl_callptr_t
invoke_api	base/compiler/utilities.jl	/^function invoke_api(li::CodeInstance)$/;"	f
invoke_g10878	test/compiler/inference.jl	/^invoke_g10878() = invoke(g10878, Tuple{Any}, 1)$/;"	f
invoke_sym	src/ast.c	/^jl_sym_t *call_sym;    jl_sym_t *invoke_sym;$/;"	v	typeref:typename:jl_sym_t *
invoke_tfunc	base/compiler/tfuncs.jl	/^function invoke_tfunc(@nospecialize(ft), @nospecialize(types), @nospecialize(argtype), sv::Infer/;"	f
invokelatest	base/essentials.jl	/^function invokelatest(@nospecialize(f), @nospecialize args...; kwargs...)$/;"	f
invokes	src/julia.h	/^    jl_typemap_t *invokes;$/;"	m	struct:_jl_method_t	typeref:typename:jl_typemap_t *
invperm	base/combinatorics.jl	/^function invperm(a::AbstractVector)$/;"	f
invperm	base/combinatorics.jl	/^function invperm(p::Union{Tuple{},Tuple{Int},Tuple{Int,Int}})$/;"	f
invperm	base/combinatorics.jl	/^invperm(a::Tuple) = (invperm([a...])...,)$/;"	f
invpermute!	base/combinatorics.jl	/^invpermute!(a, p::AbstractVector) = invpermute!!(a, copymutable(p))$/;"	f
invpermute!!	base/combinatorics.jl	/^function invpermute!!(a, p::AbstractVector{<:Integer})$/;"	f
invsquaring	stdlib/LinearAlgebra/src/triangular.jl	/^function invsquaring(A0::UpperTriangular, theta)$/;"	f
io	stdlib/Serialization/test/runtests.jl	/^io = IOBuffer()$/;"	v
io	test/compiler/codegen.jl	/^io = IOBuffer()$/;"	v
io	test/core.jl	/^io = IOBuffer()$/;"	v
io	test/offsetarray.jl	/^io = IOBuffer()$/;"	v
io	test/read.jl	/^io = (text) -> begin$/;"	v
io	test/read.jl	/^io = (text)->IOBuffer(text)$/;"	v
io	test/read.jl	/^io = Base.Filesystem.open(f, Base.Filesystem.JL_O_WRONLY | Base.Filesystem.JL_O_CREAT | Base.Fil/;"	v
io	test/version.jl	/^io = IOBuffer()$/;"	v
ioB	test/meta.jl	/^ioB = IOBuffer()$/;"	v
io_has_tvar_name	base/show.jl	/^function io_has_tvar_name(io::IOContext, name::Symbol, @nospecialize(x))$/;"	f
io_has_tvar_name	base/show.jl	/^io_has_tvar_name(io::IO, name::Symbol, @nospecialize(x)) = false$/;"	f
io_pointer	base/boot.jl	/^io_pointer(::CoreSTDERR) = Intrinsics.pointerref(Intrinsics.cglobal(:jl_uv_stderr, Ptr{Cvoid}), /;"	f
io_pointer	base/boot.jl	/^io_pointer(::CoreSTDOUT) = Intrinsics.pointerref(Intrinsics.cglobal(:jl_uv_stdout, Ptr{Cvoid}), /;"	f
io_wait	src/julia_threads.h	/^    volatile sig_atomic_t io_wait;$/;"	m	struct:_jl_tls_states_t	typeref:typename:volatile sig_atomic_t
iob	stdlib/InteractiveUtils/test/runtests.jl	/^iob = IOBuffer()$/;"	v
iolock_begin	base/libuv.jl	/^iolock_begin() = ccall(:jl_iolock_begin, Cvoid, ())$/;"	f
iolock_end	base/libuv.jl	/^iolock_end() = ccall(:jl_iolock_end, Cvoid, ())$/;"	f
ios_bufmode	src/support/ios.c	/^int ios_bufmode(ios_t *s, bufmode_t mode)$/;"	f	typeref:typename:int
ios_close	src/support/ios.c	/^void ios_close(ios_t *s)$/;"	f	typeref:typename:void
ios_copy	src/support/ios.c	/^size_t ios_copy(ios_t *to, ios_t *from, size_t nbytes)$/;"	f	typeref:typename:size_t
ios_copy_	src/support/ios.c	/^static size_t ios_copy_(ios_t *to, ios_t *from, size_t nbytes, bool_t all)$/;"	f	typeref:typename:size_t	file:
ios_copyall	src/support/ios.c	/^size_t ios_copyall(ios_t *to, ios_t *from)$/;"	f	typeref:typename:size_t
ios_copyuntil	src/support/ios.c	/^size_t ios_copyuntil(ios_t *to, ios_t *from, char delim)$/;"	f	typeref:typename:size_t
ios_ensureroom	src/staticdata.c	/^static void ios_ensureroom(ios_t *s, size_t newsize) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void	file:
ios_eof	src/support/ios.c	/^int ios_eof(ios_t *s)$/;"	f	typeref:typename:int
ios_eof_blocking	src/support/ios.c	/^int ios_eof_blocking(ios_t *s)$/;"	f	typeref:typename:int
ios_fd	src/support/ios.c	/^ios_t *ios_fd(ios_t *s, long fd, int isfile, int own)$/;"	f	typeref:typename:ios_t *
ios_file	src/support/ios.c	/^ios_t *ios_file(ios_t *s, const char *fname, int rd, int wr, int create, int trunc)$/;"	f	typeref:typename:ios_t *
ios_flush	src/support/ios.c	/^int ios_flush(ios_t *s)$/;"	f	typeref:typename:int
ios_get_readable	src/support/ios.c	/^int ios_get_readable(ios_t *s)$/;"	f	typeref:typename:int
ios_get_writable	src/support/ios.c	/^int ios_get_writable(ios_t *s)$/;"	f	typeref:typename:int
ios_getc	src/support/ios.c	/^int ios_getc(ios_t *s)$/;"	f	typeref:typename:int
ios_getutf8	src/support/ios.c	/^int ios_getutf8(ios_t *s, uint32_t *pwc)$/;"	f	typeref:typename:int
ios_init_stdstreams	src/support/ios.c	/^void ios_init_stdstreams(void)$/;"	f	typeref:typename:void
ios_isopen	src/support/ios.c	/^int ios_isopen(ios_t *s)$/;"	f	typeref:typename:int
ios_mem	src/support/ios.c	/^ios_t *ios_mem(ios_t *s, size_t initsize)$/;"	f	typeref:typename:ios_t *
ios_mkstemp	src/support/ios.c	/^ios_t *ios_mkstemp(ios_t *s, char *fname)$/;"	f	typeref:typename:ios_t *
ios_nchomp	src/support/ios.c	/^size_t ios_nchomp(ios_t *from, size_t ntowrite)$/;"	f	typeref:typename:size_t
ios_peekc	src/support/ios.c	/^int ios_peekc(ios_t *s)$/;"	f	typeref:typename:int
ios_peekutf8	src/support/ios.c	/^int ios_peekutf8(ios_t *s, uint32_t *pwc)$/;"	f	typeref:typename:int
ios_pos	src/support/ios.c	/^int64_t ios_pos(ios_t *s)$/;"	f	typeref:typename:int64_t
ios_printf	src/support/ios.c	/^int ios_printf(ios_t *s, const char *format, ...)$/;"	f	typeref:typename:int
ios_purge	src/support/ios.c	/^void ios_purge(ios_t *s)$/;"	f	typeref:typename:void
ios_putc	src/support/ios.c	/^int ios_putc(int c, ios_t *s)$/;"	f	typeref:typename:int
ios_puts	src/support/ios.h	/^#define ios_puts(/;"	d
ios_pututf8	src/support/ios.c	/^int ios_pututf8(ios_t *s, uint32_t wc)$/;"	f	typeref:typename:int
ios_read	src/support/ios.c	/^size_t ios_read(ios_t *s, char *dest, size_t n)$/;"	f	typeref:typename:size_t
ios_readall	src/support/ios.c	/^size_t ios_readall(ios_t *s, char *dest, size_t n)$/;"	f	typeref:typename:size_t
ios_readline	src/support/ios.c	/^char *ios_readline(ios_t *s)$/;"	f	typeref:typename:char *
ios_readprep	src/support/ios.c	/^size_t ios_readprep(ios_t *s, size_t n)$/;"	f	typeref:typename:size_t
ios_seek	src/support/ios.c	/^int64_t ios_seek(ios_t *s, int64_t pos)$/;"	f	typeref:typename:int64_t
ios_seek_end	src/support/ios.c	/^int64_t ios_seek_end(ios_t *s)$/;"	f	typeref:typename:int64_t
ios_set_io_wait_func	src/support/ios.c	/^void (*ios_set_io_wait_func)(int) = NULL;$/;"	v	typeref:typename:void (*)(int)
ios_set_readonly	src/support/ios.c	/^void ios_set_readonly(ios_t *s)$/;"	f	typeref:typename:void
ios_setbuf	src/support/ios.c	/^int ios_setbuf(ios_t *s, char *buf, size_t size, int own)$/;"	f	typeref:typename:int
ios_skip	src/support/ios.c	/^int64_t ios_skip(ios_t *s, int64_t offs)$/;"	f	typeref:typename:int64_t
ios_static_buffer	src/support/ios.c	/^ios_t *ios_static_buffer(ios_t *s, char *buf, size_t sz)$/;"	f	typeref:typename:ios_t *
ios_stderr	src/support/ios.c	/^ios_t *ios_stderr = NULL;$/;"	v	typeref:typename:ios_t *
ios_stdin	src/support/ios.c	/^ios_t *ios_stdin = NULL;$/;"	v	typeref:typename:ios_t *
ios_stdout	src/support/ios.c	/^ios_t *ios_stdout = NULL;$/;"	v	typeref:typename:ios_t *
ios_str	src/support/ios.c	/^ios_t *ios_str(ios_t *s, char *str)$/;"	f	typeref:typename:ios_t *
ios_take_buffer	src/support/ios.c	/^char *ios_take_buffer(ios_t *s, size_t *psize)$/;"	f	typeref:typename:char *
ios_trunc	src/support/ios.c	/^int ios_trunc(ios_t *s, size_t size)$/;"	f	typeref:typename:int
ios_ungetc	src/support/ios.c	/^int ios_ungetc(int c, ios_t *s)$/;"	f	typeref:typename:int
ios_vprintf	src/support/ios.c	/^int ios_vprintf(ios_t *s, const char *format, va_list args)$/;"	f	typeref:typename:int
ios_write	src/support/ios.c	/^size_t ios_write(ios_t *s, const char *data, size_t n)$/;"	f	typeref:typename:size_t
ios_write_direct	src/support/ios.c	/^JL_DLLEXPORT size_t ios_write_direct(ios_t *dest, ios_t *src)$/;"	f	typeref:typename:JL_DLLEXPORT size_t
ioslength	test/iobuffer.jl	/^ioslength(io::IOBuffer) = (io.seekable ? io.size : bytesavailable(io))$/;"	f
iostream_init	src/flisp/iostream.c	/^void iostream_init(fl_context_t *fl_ctx)$/;"	f	typeref:typename:void
iostream_vtable	src/flisp/iostream.c	/^const cvtable_t iostream_vtable = { print_iostream, relocate_iostream,$/;"	v	typeref:typename:const cvtable_t
iostreamfunc_info	src/flisp/iostream.c	/^static const builtinspec_t iostreamfunc_info[] = {$/;"	v	typeref:typename:const builtinspec_t[]	file:
iostreamsym	src/flisp/flisp.h	/^    value_t iostreamsym, rdsym, wrsym, apsym, crsym, truncsym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
iostreamtype	src/flisp/flisp.h	/^    fltype_t *iostreamtype;$/;"	m	struct:_fl_context_t	typeref:typename:fltype_t *
ip	src/disasm.cpp	/^    uint64_t ip; \/\/ virtual instruction pointer of the current instruction$/;"	m	class:__anon2853c92e0211::SymbolTable	typeref:typename:uint64_t	file:
ip	src/flisp/flisp.c	/^    const uint8_t *ip;$/;"	v	typeref:typename:const uint8_t *
ip	src/interpreter.c	/^    size_t ip; \/\/ Leak the currently-evaluating statement index to backtrace capture$/;"	m	struct:__anonf89725e10108	typeref:typename:size_t	file:
ip_has_file_and_func	stdlib/Test/src/Test.jl	/^function ip_has_file_and_func(ip, file, funcs)$/;"	f
ip_matches_func	base/client.jl	/^function ip_matches_func(ip, func::Symbol)$/;"	f
ip_str	stdlib/Sockets/src/IPAddr.jl	/^macro ip_str(str)$/;"	f
ipiv2perm	stdlib/LinearAlgebra/src/lu.jl	/^function ipiv2perm(v::AbstractVector{T}, maxi::Integer) where T$/;"	f
ipv4_leading_zero_error	stdlib/Sockets/src/IPAddr.jl	/^const ipv4_leading_zero_error = """$/;"	v
ipv6_field	stdlib/Sockets/src/IPAddr.jl	/^function ipv6_field(ip::IPv6,i)$/;"	f
ir	test/llvmcall.jl	/^ir = sprint(code_llvm, declared_floor, Tuple{Float64})$/;"	v
ir	test/llvmcall2.jl	/^ir = sprint(code_llvm, declared_floor, Tuple{Float64})$/;"	v
ir_inline_item!	base/compiler/ssair/inlining.jl	/^function ir_inline_item!(compact::IncrementalCompact, idx::Int, argexprs::Vector{Any},$/;"	f
ir_inline_unionsplit!	base/compiler/ssair/inlining.jl	/^function ir_inline_unionsplit!(compact::IncrementalCompact, idx::Int,$/;"	f
irrational	base/irrationals.jl	/^macro irrational(sym, val, def)$/;"	f
is	base/expr.jl	/^function is called. The `@generated` macro should not be used on functions mutating$/;"	f
is	base/task.jl	/^function is still runnable, and will be restarted immediately if there are no other runnable$/;"	f
is	stdlib/Test/src/Test.jl	/^function is to record the testset to the parent's results list, using$/;"	f
is-var-boxed?	src/julia-syntax.scm	/^(define (is-var-boxed? v lam)$/;"	f
is-word-operator?	src/julia-parser.scm	/^(define (is-word-operator? op)$/;"	f
isArgument	src/codegen.cpp	/^    bool isArgument;$/;"	m	struct:jl_varinfo_t	typeref:typename:bool	file:
isBundleOfGCValues	src/clangsa/GCChecker.cpp	/^bool GCChecker::isBundleOfGCValues(QualType QT) const {$/;"	f	class:GCChecker	typeref:typename:bool
isBundleOperand	src/llvm-alloc-opt.cpp	/^static bool isBundleOperand(CallInst *call, unsigned idx)$/;"	f	namespace:__anon0a1571000111	typeref:typename:bool	file:
isChanged	deps/srccache/patchelf-0.9/src/patchelf.cc	/^    bool isChanged()$/;"	f	class:ElfFile	typeref:typename:bool	file:
isExecutable	deps/srccache/patchelf-0.9/src/patchelf.cc	/^    bool isExecutable;$/;"	m	class:ElfFile	typeref:typename:bool	file:
isFDAnnotatedNotSafepoint	src/clangsa/GCChecker.cpp	/^bool GCChecker::isFDAnnotatedNotSafepoint(const clang::FunctionDecl *FD) {$/;"	f	class:GCChecker	typeref:typename:bool
isGCTrackedType	src/clangsa/GCChecker.cpp	/^bool GCChecker::isGCTrackedType(QualType QT) {$/;"	f	class:GCChecker	typeref:typename:bool
isGloballyRootedType	src/clangsa/GCChecker.cpp	/^bool GCChecker::isGloballyRootedType(QualType QT) const {$/;"	f	class:GCChecker	typeref:typename:bool
isHFA	src/abi_ppc64le.cpp	/^unsigned isHFA(jl_datatype_t *ty, jl_datatype_t **ty0, bool *hva) const$/;"	f	struct:ABI_PPC64leLayout	typeref:typename:unsigned	file:
isHFAorHVA	src/abi_aarch64.cpp	/^Type *isHFAorHVA(jl_datatype_t *dt, size_t &nele) const$/;"	f	struct:ABI_AArch64Layout	typeref:typename:Type *	file:
isHFAorHVA	src/abi_aarch64.cpp	/^bool isHFAorHVA(jl_datatype_t *dt, size_t dsz, size_t &nele, ElementType &ele) const$/;"	f	struct:ABI_AArch64Layout	typeref:typename:bool	file:
isInitialized	src/support/libsupportinit.c	/^static int isInitialized = 0;$/;"	v	typeref:typename:int	file:
isIntrinsicFunction	src/jitlayers.h	/^static inline bool isIntrinsicFunction(Function *F)$/;"	f	typeref:typename:bool
isJuliaType	src/clangsa/GCChecker.cpp	/^        static bool isJuliaType(callback f, QualType QT) {$/;"	f	class:__anon9c5a21540111::GCChecker	typeref:typename:bool	file:
isJustAllocated	src/clangsa/GCChecker.cpp	/^            bool isJustAllocated() const { return S == Allocated; }$/;"	f	struct:__anon9c5a21540111::GCChecker::ValueState	typeref:typename:bool	file:
isLegalHA	src/abi_arm.cpp	/^size_t isLegalHA(jl_datatype_t *dt, Type *&base) const$/;"	f	struct:ABI_ARMLayout	typeref:typename:size_t	file:
isLegalHAType	src/abi_arm.cpp	/^Type *isLegalHAType(jl_datatype_t *dt) const$/;"	f	struct:ABI_ARMLayout	typeref:typename:Type *	file:
isLoadFromConstGV	src/llvm-late-gc-lowering.cpp	/^static bool isLoadFromConstGV(LoadInst *LI)$/;"	f	typeref:typename:bool	file:
isLoadFromImmut	src/llvm-late-gc-lowering.cpp	/^static bool isLoadFromImmut(LoadInst *LI)$/;"	f	typeref:typename:bool	file:
isMemory	src/abi_x86_64.cpp	/^    bool isMemory;$/;"	m	struct:ABI_x86_64Layout::Classification	typeref:typename:bool	file:
isPotentiallyFreed	src/clangsa/GCChecker.cpp	/^            bool isPotentiallyFreed() const { return S == PotentiallyFreed; }$/;"	f	struct:__anon9c5a21540111::GCChecker::ValueState	typeref:typename:bool	file:
isRootArray	src/clangsa/GCChecker.cpp	/^            bool isRootArray() const { return K == RootArray; }$/;"	f	struct:__anon9c5a21540111::GCChecker::RootState	typeref:typename:bool	file:
isRooted	src/clangsa/GCChecker.cpp	/^            bool isRooted() const { return S == Rooted; }$/;"	f	struct:__anon9c5a21540111::GCChecker::ValueState	typeref:typename:bool	file:
isRootedBy	src/clangsa/GCChecker.cpp	/^            bool isRootedBy(const MemRegion *R) const {$/;"	f	struct:__anon9c5a21540111::GCChecker::ValueState	typeref:typename:bool	file:
isSA	src/codegen.cpp	/^    bool isSA; \/\/ whether all stores dominate all uses$/;"	m	struct:jl_varinfo_t	typeref:typename:bool	file:
isSafepoint	src/clangsa/GCChecker.cpp	/^bool GCChecker::isSafepoint(const CallEvent &Call) const$/;"	f	class:GCChecker	typeref:typename:bool
isSafepoint	src/llvm-alloc-opt.cpp	/^bool Optimizer::isSafepoint(Instruction *inst)$/;"	f	class:__anon0a1571000111::Optimizer	typeref:typename:bool
isSpecialAS	src/llvm-gc-invariant-verifier.cpp	/^static bool isSpecialAS(unsigned AS) {$/;"	f	typeref:typename:bool	file:
isSpecialAS	src/llvm-propagate-addrspaces.cpp	/^static bool isSpecialAS(unsigned AS) {$/;"	f	typeref:typename:bool	file:
isSpecialPtr	src/llvm-late-gc-lowering.cpp	/^static bool isSpecialPtr(Type *Ty) {$/;"	f	typeref:typename:bool	file:
isSpecialPtrVec	src/llvm-late-gc-lowering.cpp	/^static bool isSpecialPtrVec(Type *Ty) {$/;"	f	typeref:typename:bool	file:
isTBAA	src/llvm-late-gc-lowering.cpp	/^static bool isTBAA(MDNode *TBAA, std::initializer_list<const char*> const strset)$/;"	f	typeref:typename:bool	file:
isType	base/compiler/typeutils.jl	/^isType(@nospecialize t) = isa(t, DataType) && t.name === _TYPE_NAME$/;"	f
isUnionRep	src/llvm-late-gc-lowering.cpp	/^static bool isUnionRep(Type *Ty) {$/;"	f	typeref:typename:bool	file:
isUntracked	src/clangsa/GCChecker.cpp	/^            bool isUntracked() const { return S == Untracked; }$/;"	f	struct:__anon9c5a21540111::GCChecker::ValueState	typeref:typename:bool	file:
isValueCollection	src/clangsa/GCChecker.cpp	/^        static bool isValueCollection(QualType QT) {$/;"	f	class:__anon9c5a21540111::GCChecker	typeref:typename:bool	file:
isVolatile	src/codegen.cpp	/^    bool isVolatile;$/;"	m	struct:jl_varinfo_t	typeref:typename:bool	file:
is_addr_on_sigstack	src/signals-unix.c	/^static int is_addr_on_sigstack(jl_ptls_t ptls, void *ptr)$/;"	f	typeref:typename:int	file:
is_addr_on_stack	src/signals-unix.c	/^static int is_addr_on_stack(jl_ptls_t ptls, void *addr)$/;"	f	typeref:typename:int	file:
is_ancestor_of	stdlib/LibGit2/src/LibGit2.jl	/^function is_ancestor_of(a::AbstractString, b::AbstractString, repo::GitRepo)$/;"	f
is_argtype_match	base/compiler/inferenceresult.jl	/^function is_argtype_match(@nospecialize(given_argtype),$/;"	f
is_ast_node	src/dump.c	/^static int is_ast_node(jl_value_t *v)$/;"	f	typeref:typename:int	file:
is_bom	src/flisp/julia_extensions.c	/^static int is_bom(uint32_t wc)$/;"	f	typeref:typename:int	file:
is_builtin	base/compiler/ssair/inlining.jl	/^is_builtin(s::Signature) =$/;"	f
is_cache_leaf	src/typemap.c	/^int is_cache_leaf(jl_value_t *ty)$/;"	f	typeref:typename:int
is_cacheable	src/jltypes.c	/^static int is_cacheable(jl_datatype_t *type)$/;"	f	typeref:typename:int	file:
is_complex128	src/abi_x86.cpp	/^inline bool is_complex128(jl_datatype_t *dt) const$/;"	f	struct:ABI_x86Layout	typeref:typename:bool	file:
is_complex64	src/abi_x86.cpp	/^inline bool is_complex64(jl_datatype_t *dt) const$/;"	f	struct:ABI_x86Layout	typeref:typename:bool	file:
is_complex_type	src/abi_x86.cpp	/^STATIC_INLINE bool is_complex_type(jl_datatype_t *dt)$/;"	f	struct:ABI_x86Layout	typeref:typename:STATIC_INLINE bool	file:
is_datatype_all_pointers	src/cgutils.cpp	/^static bool is_datatype_all_pointers(jl_datatype_t *dt)$/;"	f	typeref:typename:bool	file:
is_derived_type	base/compiler/typelimits.jl	/^function is_derived_type(@nospecialize(t), @nospecialize(c), mindepth::Int)$/;"	f
is_derived_type_from_any	base/compiler/typelimits.jl	/^function is_derived_type_from_any(@nospecialize(t), sources::SimpleVector, mindepth::Int)$/;"	f
is_dollar_expr	test/meta.jl	/^macro is_dollar_expr(ex)$/;"	f
is_dt_const_field	base/compiler/tfuncs.jl	/^is_dt_const_field(fld::Int) = ($/;"	f
is_expected_union	base/show.jl	/^is_expected_union(u::Union) = u.a == Nothing || u.b == Nothing || u.a == Missing || u.b == Missi/;"	f
is_exported_from_stdlib	base/show.jl	/^function is_exported_from_stdlib(name::Symbol, mod::Module)$/;"	f
is_expr	base/show.jl	/^is_expr(ex, head::Symbol)         = (isa(ex, Expr) && (ex.head == head))$/;"	f
is_expr	base/show.jl	/^is_expr(ex, head::Symbol, n::Int) = is_expr(ex, head) && length(ex.args) == n$/;"	f
is_flag_set	base/compiler/validation.jl	/^is_flag_set(byte::UInt8, flag::UInt8) = (byte & flag) == flag$/;"	f
is_generic_cpu_name	src/processor_arm.cpp	/^static bool is_generic_cpu_name(uint32_t cpu)$/;"	f	namespace:ARM	typeref:typename:bool	file:
is_hermsym	stdlib/SparseArrays/src/sparsematrix.jl	/^function is_hermsym(A::AbstractSparseMatrixCSC, check::Function)$/;"	f
is_id_char	base/show.jl	/^is_id_char(c::AbstractChar) = ccall(:jl_id_char, Cint, (UInt32,), c) != 0$/;"	f
is_id_start_char	base/show.jl	/^is_id_start_char(c::AbstractChar) = ccall(:jl_id_start_char, Cint, (UInt32,), c) != 0$/;"	f
is_in_def_module	test/meta.jl	/^macro is_in_def_module()$/;"	f
is_in_mods	stdlib/Test/src/Test.jl	/^    function is_in_mods(m::Module)$/;"	f
is_inlineable_constant	base/compiler/utilities.jl	/^function is_inlineable_constant(@nospecialize(x))$/;"	f
is_interactive	base/initdefs.jl	/^is_interactive = false$/;"	v
is_known_call	base/compiler/optimize.jl	/^function is_known_call(e::Expr, @nospecialize(func), src, sptypes::Vector{Any}, slottypes::Vecto/;"	f
is_known_call	base/compiler/ssair/queries.jl	/^function is_known_call(e::Expr, @nospecialize(func), src::IncrementalCompact)$/;"	f
is_lattice_equal	base/compiler/typelattice.jl	/^function is_lattice_equal(@nospecialize(a), @nospecialize(b))$/;"	f
is_leaf_bound	src/subtype.c	/^static int is_leaf_bound(jl_value_t *v) JL_NOTSAFEPOINT$/;"	f	typeref:typename:int	file:
is_leaf_typevar	src/subtype.c	/^static int is_leaf_typevar(jl_tvar_t *v) JL_NOTSAFEPOINT$/;"	f	typeref:typename:int	file:
is_libjulia_func	src/ccall.cpp	/^#define is_libjulia_func(/;"	d	file:
is_loc_meta	base/stacktraces.jl	/^is_loc_meta(expr, kind) = isexpr(expr, :meta) && length(expr.args) >= 1 && expr.args[1] === kind$/;"	f
is_lower_stack_frame	test/gcext/gcext.c	/^static int is_lower_stack_frame(volatile char *frame_addr) {$/;"	f	typeref:typename:int	file:
is_lower_stack_frame_ptr	test/gcext/gcext.c	/^static test_frame_func is_lower_stack_frame_ptr =$/;"	v	typeref:typename:test_frame_func	file:
is_meta_expr_head	base/compiler/utilities.jl	/^is_meta_expr_head(head::Symbol) = (head === :inbounds || head === :boundscheck || head === :meta/;"	f
is_meta_expr_head	base/meta.jl	/^is_meta_expr_head(head::Symbol) = (head === :inbounds || head === :boundscheck || head === :meta/;"	f
is_native_simd_type	src/ccall.cpp	/^static bool is_native_simd_type(jl_datatype_t *dt) {$/;"	f	typeref:typename:bool	file:
is_non_word_char	stdlib/REPL/src/LineEdit.jl	/^is_non_word_char(c) = c in """ \\t\\n\\"\\\\'`@\\$><=:;|&{}()[].,+-*\/?%^~"""$/;"	f
is_ntuple_long	src/array.c	/^static inline int is_ntuple_long(jl_value_t *v)$/;"	f	typeref:typename:int	file:
is_old	base/compiler/ssair/passes.jl	/^function is_old(compact, @nospecialize(old_node_ssa))$/;"	f
is_overlong_enc	base/char.jl	/^@inline is_overlong_enc(u::UInt32) = (u >> 24 == 0xc0) | (u >> 24 == 0xc1) | (u >> 21 == 0x0704)/;"	f
is_passphrase_required	stdlib/LibGit2/src/callbacks.jl	/^function is_passphrase_required(private_key::AbstractString)$/;"	f
is_pending	base/compiler/ssair/passes.jl	/^function is_pending(compact::IncrementalCompact, old::OldSSAValue)$/;"	f
is_pop_loc	test/syntax.jl	/^function is_pop_loc(ex::Expr)$/;"	f
is_precompiling	stdlib/REPL/src/Terminals.jl	/^const is_precompiling = Ref(false)$/;"	v
is_primary_base_module	base/Base.jl	/^const is_primary_base_module = ccall(:jl_module_parent, Ref{Module}, (Any,), Base) === Core.Main$/;"	v
is_pure_intrinsic_infer	base/compiler/optimize.jl	/^function is_pure_intrinsic_infer(f::IntrinsicFunction)$/;"	f
is_quoted	base/show.jl	/^is_quoted(ex)            = false$/;"	f
is_quoted	base/show.jl	/^is_quoted(ex::Expr)      = is_expr(ex, :quote, 1) || is_expr(ex, :inert, 1)$/;"	f
is_quoted	base/show.jl	/^is_quoted(ex::QuoteNode) = true$/;"	f
is_region_active	stdlib/REPL/src/LineEdit.jl	/^is_region_active(s::ModeState) = false$/;"	f
is_region_active	stdlib/REPL/src/LineEdit.jl	/^is_region_active(s::PromptState) = s.region_active in (:shift, :mark)$/;"	f
is_relevant_expr	base/compiler/ssair/ir.jl	/^function is_relevant_expr(e::Expr)$/;"	f
is_return_ssavalue	test/syntax.jl	/^function is_return_ssavalue(ex::Expr)$/;"	f
is_return_type	base/compiler/compiler.jl	/^is_return_type(@Core.nospecialize(f)) = f === return_type$/;"	f
is_root_module	base/loading.jl	/^is_root_module(m::Module) = haskey(module_keys, m)$/;"	f
is_running	stdlib/Profile/src/Profile.jl	/^is_running() = ccall(:jl_profile_is_running, Cint, ())!=0$/;"	f
is_self_quoting	base/compiler/utilities.jl	/^function is_self_quoting(@nospecialize(x))$/;"	f
is_shift_move	stdlib/REPL/src/LineEdit.jl	/^    is_shift_move(cmd) = startswith(String(cmd), "shift_")$/;"	f
is_short_function_def	base/expr.jl	/^function is_short_function_def(ex)$/;"	f
is_signature	base/docs/Docs.jl	/^is_signature(@nospecialize x) = isexpr(x, :call) || (isexpr(x, :(::), 2) && isexpr(x.args[1], :c/;"	f
is_specializable_vararg_slot	base/compiler/inferencestate.jl	/^function is_specializable_vararg_slot(@nospecialize(arg), nargs::Int, vargs::Vector{Any})$/;"	f
is_str_expr	base/printf.jl	/^is_str_expr(ex) =$/;"	f
is_supported_sparse_broadcast	stdlib/SparseArrays/src/higherorderfns.jl	/^is_supported_sparse_broadcast() = true$/;"	f
is_supported_sparse_broadcast	stdlib/SparseArrays/src/higherorderfns.jl	/^is_supported_sparse_broadcast(::AbstractArray, rest...) = false$/;"	f
is_supported_sparse_broadcast	stdlib/SparseArrays/src/higherorderfns.jl	/^is_supported_sparse_broadcast(::AbstractSparseArray, rest...) = is_supported_sparse_broadcast(re/;"	f
is_supported_sparse_broadcast	stdlib/SparseArrays/src/higherorderfns.jl	/^is_supported_sparse_broadcast(::Array, rest...) = is_supported_sparse_broadcast(rest...)$/;"	f
is_supported_sparse_broadcast	stdlib/SparseArrays/src/higherorderfns.jl	/^is_supported_sparse_broadcast(::StructuredMatrix, rest...) = is_supported_sparse_broadcast(rest./;"	f
is_supported_sparse_broadcast	stdlib/SparseArrays/src/higherorderfns.jl	/^is_supported_sparse_broadcast(t::Union{Transpose, Adjoint}, rest...) = is_supported_sparse_broad/;"	f
is_supported_sparse_broadcast	stdlib/SparseArrays/src/higherorderfns.jl	/^is_supported_sparse_broadcast(x, rest...) = axes(x) === () && is_supported_sparse_broadcast(rest/;"	f
is_supported_sparse_broadcast	stdlib/SparseArrays/src/higherorderfns.jl	/^is_supported_sparse_broadcast(x::Ref, rest...) = is_supported_sparse_broadcast(rest...)$/;"	f
is_top_bit_set	base/boot.jl	/^function is_top_bit_set(x)$/;"	f
is_top_bit_set	base/boot.jl	/^function is_top_bit_set(x::Union{Int8,UInt8})$/;"	f
is_top_level_frame	base/stacktraces.jl	/^is_top_level_frame(f::StackFrame) = f.linfo isa Core.CodeInfo || (f.linfo === nothing && f.func /;"	f
is_tuple_call	base/compiler/ssair/queries.jl	/^is_tuple_call(compact::IncrementalCompact, @nospecialize(def)) = isa(def, Expr) && is_known_call/;"	f
is_tuple_call	base/compiler/ssair/queries.jl	/^is_tuple_call(ir::IRCode, @nospecialize(def)) = isa(def, Expr) && is_known_call(def, tuple, ir, /;"	f
is_tupletype_homogeneous	src/cgutils.cpp	/^static bool is_tupletype_homogeneous(jl_svec_t *t, bool allow_va = false)$/;"	f	typeref:typename:bool	file:
is_typed_expr	test/compiler/inference.jl	/^function is_typed_expr(e::Expr)$/;"	f
is_typed_expr	test/compiler/inference.jl	/^is_typed_expr(@nospecialize other) = false$/;"	f
is_typekey_ordered	src/jltypes.c	/^static int is_typekey_ordered(jl_value_t **key, size_t n)$/;"	f	typeref:typename:int	file:
is_unary_and_binary_operator	base/show.jl	/^is_unary_and_binary_operator(s::Symbol) = ccall(:jl_is_unary_and_binary_operator, Cint, (Cstring/;"	f
is_user_code	src/codegen.cpp	/^        bool is_user_code;$/;"	m	struct:emit_function::DebugLineTable	typeref:typename:bool	file:
is_valid_argument	base/compiler/validation.jl	/^function is_valid_argument(@nospecialize(x))$/;"	f
is_valid_continuation	base/strings/string.jl	/^is_valid_continuation(c) = c & 0xc0 == 0x80$/;"	f
is_valid_lvalue	base/compiler/validation.jl	/^is_valid_lvalue(@nospecialize(x)) = isa(x, Slot) || isa(x, GlobalRef)$/;"	f
is_valid_return	base/compiler/validation.jl	/^is_valid_return(@nospecialize(x)) = is_valid_argument(x) || (isa(x, Expr) && x.head === :lambda)$/;"	f
is_valid_rvalue	base/compiler/validation.jl	/^function is_valid_rvalue(@nospecialize(x))$/;"	f
is_valid_type_for_apply_rewrite	base/compiler/ssair/inlining.jl	/^function is_valid_type_for_apply_rewrite(@nospecialize(typ), params::Params)$/;"	f
is_vector	src/llvm-multiversioning.cpp	/^bool CloneCtx::is_vector(FunctionType *ty) const$/;"	f	class:__anond5683ea40111::CloneCtx	typeref:typename:bool
is_wc_cat_id_start	src/flisp/julia_extensions.c	/^static int is_wc_cat_id_start(uint32_t wc, utf8proc_category_t cat)$/;"	f	typeref:typename:int	file:
isa	test/core.jl	/^@test isa(@eval(f14758(; $([]...)) = ()), Function)$/;"	f
isa_exception_container	stdlib/Distributed/src/process_messages.jl	/^isa_exception_container(ex) = (isa(ex, RemoteException) ||$/;"	f
isa_tfunc	base/compiler/tfuncs.jl	/^function isa_tfunc(@nospecialize(v), @nospecialize(tt))$/;"	f
isabspath	base/path.jl	/^    isabspath(path::String) = occursin(path_absolute_re, path)$/;"	f
isabspath	base/path.jl	/^    isabspath(path::String) = startswith(path, '\/')$/;"	f
isabspath	src/init.c	/^int isabspath(const char *in)$/;"	f	typeref:typename:int
isabstracttype	base/reflection.jl	/^function isabstracttype(@nospecialize(t))$/;"	f
isaggr	src/llvm-alloc-opt.cpp	/^        bool isaggr:1;$/;"	m	struct:__anon0a1571000111::Optimizer::MemOp	typeref:typename:bool:1	file:
isaligned	src/julia.h	/^    uint16_t isaligned:1; \/\/ data allocated with memalign$/;"	m	struct:__anon055fe4270308	typeref:typename:uint16_t:1
isambiguous	base/reflection.jl	/^function isambiguous(m1::Method, m2::Method; ambiguous_bottom::Bool=false)$/;"	f
isapple	base/sysinfo.jl	/^isapple(os::Symbol) = (os === :Apple || os === :Darwin)$/;"	f
isapprox	base/floatfuncs.jl	/^function isapprox(x::Number, y::Number; atol::Real=0, rtol::Real=rtoldefault(x,y,atol), nans::Bo/;"	f
isapprox	base/missing.jl	/^isapprox(::Any, ::Missing; kwargs...) = missing$/;"	f
isapprox	base/missing.jl	/^isapprox(::Missing, ::Any; kwargs...) = missing$/;"	f
isapprox	base/missing.jl	/^isapprox(::Missing, ::Missing; kwargs...) = missing$/;"	f
isapprox	stdlib/LinearAlgebra/src/generic.jl	/^function isapprox(x::AbstractArray, y::AbstractArray;$/;"	f
isapprox	stdlib/LinearAlgebra/src/uniformscaling.jl	/^function isapprox(J1::UniformScaling{T}, J2::UniformScaling{S};$/;"	f
isapprox	stdlib/LinearAlgebra/src/uniformscaling.jl	/^function isapprox(J::UniformScaling, A::AbstractMatrix;$/;"	f
isapprox	stdlib/LinearAlgebra/src/uniformscaling.jl	/^isapprox(A::AbstractMatrix, J::UniformScaling; kwargs...) = isapprox(J, A; kwargs...)$/;"	f
isarray	src/flisp/cvalues.c	/^static int isarray(value_t v)$/;"	f	typeref:typename:int	file:
isascii	base/strings/basic.jl	/^isascii(c::AbstractChar) = UInt32(c) < 0x80$/;"	f
isascii	base/strings/basic.jl	/^isascii(c::Char) = bswap(reinterpret(UInt32, c)) < 0x80$/;"	f
isascii	base/strings/basic.jl	/^isascii(s::AbstractString) = all(isascii, s)$/;"	f
isascii	base/strings/string.jl	/^function isascii(s::String)$/;"	f
isassigned	base/abstractarray.jl	/^function isassigned(a::AbstractArray, i::Integer...)$/;"	f
isassigned	base/array.jl	/^function isassigned(a::Array, i::Int...)$/;"	f
isassigned	base/bitarray.jl	/^isassigned(B::BitArray, i::Int) = 1 <= i <= length(B)$/;"	f
isassigned	base/essentials.jl	/^function isassigned end$/;"	f
isassigned	base/essentials.jl	/^function isassigned(v::SimpleVector, i::Int)$/;"	f
isassigned	base/multidimensional.jl	/^@generated function isassigned(B::BitArray, I_0::Int, I::Int...)$/;"	f
isassigned	base/refvalue.jl	/^isassigned(x::RefValue) = isdefined(x, :x)$/;"	f
isassigned	base/strings/unicode.jl	/^isassigned(c) = UTF8PROC_CATEGORY_CN < category_code(c) <= UTF8PROC_CATEGORY_CO$/;"	f
isassigned	stdlib/Unicode/src/Unicode.jl	/^isassigned(c) = Base.Unicode.isassigned(c)$/;"	f
isattached	stdlib/LibGit2/src/repository.jl	/^function isattached(repo::GitRepo)$/;"	f
isbadzero	base/reduce.jl	/^isbadzero(::typeof(max), x::AbstractFloat) = (x == zero(x)) & signbit(x)$/;"	f
isbadzero	base/reduce.jl	/^isbadzero(::typeof(min), x::AbstractFloat) = (x == zero(x)) & !signbit(x)$/;"	f
isbadzero	base/reduce.jl	/^isbadzero(op, x) = false$/;"	f
isbanded	stdlib/LinearAlgebra/src/generic.jl	/^isbanded(A::AbstractMatrix, kl::Integer, ku::Integer) = istriu(A, kl) && istril(A, ku)$/;"	f
isbare	stdlib/LibGit2/src/repository.jl	/^function isbare(repo::GitRepo)$/;"	f
isbasicdoc	base/docs/Docs.jl	/^isbasicdoc(@nospecialize x) = isexpr(x, :.) || isa(x, Union{QuoteNode, Symbol})$/;"	f
isbetween	base/twiceprecision.jl	/^isbetween(a, x, b) = a <= x <= b || b <= x <= a$/;"	f
isbinary	stdlib/LibGit2/src/blob.jl	/^function isbinary(blob::GitBlob)$/;"	f
isbinaryoperator	base/show.jl	/^isbinaryoperator(s::Symbol) = isoperator(s) && (!isunaryoperator(s) || is_unary_and_binary_opera/;"	f
isbindingresolved	base/reflection.jl	/^isbindingresolved(m::Module, var::Symbol) = ccall(:jl_binding_resolved_p, Cint, (Any, Any), m, v/;"	f
isbits	base/reflection.jl	/^isbits(@nospecialize x) = (@_pure_meta; typeof(x).isbitstype)$/;"	f
isbits Union Arrays	doc/src/devdocs/isbitsunionarrays.md	/^## isbits Union Arrays$/;"	s
isbits Union Optimizations	doc/src/devdocs/isbitsunionarrays.md	/^# isbits Union Optimizations$/;"	c
isbits Union Structs	doc/src/devdocs/isbitsunionarrays.md	/^## isbits Union Structs$/;"	s
isbitstype	base/reflection.jl	/^isbitstype(@nospecialize(t::Type)) = (@_pure_meta; isa(t, DataType) && t.isbitstype)$/;"	f
isbitstype	src/julia.h	/^    uint8_t isbitstype; \/\/ relevant query for C-api and type-parameters$/;"	m	struct:_jl_datatype_t	typeref:typename:uint8_t
isbitstype	test/compiler/contextual.jl	/^Base.@pure isbitstype(T) = T.isbitstype$/;"	f
isbitsunion	base/array.jl	/^isbitsunion(u::Union) = allocatedinline(u)$/;"	f
isbitsunion	base/array.jl	/^isbitsunion(x) = false$/;"	f
isblockdev	base/stat.jl	/^isblockdev(st::StatStruct) = filemode(st) & 0xf000 == 0x6000$/;"	f
isboxed	src/codegen.cpp	/^    bool isboxed; \/\/ whether this value is a jl_value_t* allocated on the heap with the right /;"	m	struct:jl_cgval_t	typeref:typename:bool	file:
isbranch	stdlib/LibGit2/src/reference.jl	/^function isbranch(ref::GitReference)$/;"	f
isbsd	base/sysinfo.jl	/^isbsd(os::Symbol) = (isfreebsd(os) || isopenbsd(os) || isnetbsd(os) || isdragonfly(os) || isappl/;"	f
isbuffered	base/channels.jl	/^isbuffered(c::Channel) = c.sz_max==0 ? false : true$/;"	f
isbuiltin	src/flisp/flisp.h	/^#define isbuiltin(/;"	d
iscased	base/strings/unicode.jl	/^function iscased(c::AbstractChar)$/;"	f
iscbuiltin	src/flisp/flisp.h	/^#define iscbuiltin(/;"	d
ischardev	base/stat.jl	/^ischardev(st::StatStruct) = filemode(st) & 0xf000 == 0x2000$/;"	f
ischristmas	stdlib/Dates/test/adjusters.jl	/^        ischristmas(dt) = Dates.yearmonthday(dt) == christmas(Dates.year(dt))$/;"	f
ischunkedbroadcast	base/broadcast.jl	/^ischunkedbroadcast(R, args) = false$/;"	f
ischunkedbroadcast	base/broadcast.jl	/^ischunkedbroadcast(R, args::Tuple{<:BitArray,Vararg{Any}}) = size(R) == size(args[1]) && ischunk/;"	f
ischunkedbroadcast	base/broadcast.jl	/^ischunkedbroadcast(R, args::Tuple{<:Bool,Vararg{Any}}) = ischunkedbroadcast(R, tail(args))$/;"	f
ischunkedbroadcast	base/broadcast.jl	/^ischunkedbroadcast(R, args::Tuple{<:BroadcastedChunkableOp,Vararg{Any}}) = ischunkedbroadcast(R,/;"	f
ischunkedbroadcast	base/broadcast.jl	/^ischunkedbroadcast(R, args::Tuple{}) = true$/;"	f
ischunkedbroadcast	base/broadcast.jl	/^ischunkedbroadcast(R, bc::BroadcastedChunkableOp) = ischunkedbroadcast(R, bc.args)$/;"	f
isclamped	base/grisu/bignums.jl	/^isclamped(x::Bignum) = x.used_digits == 0 || x.bigits[x.used_digits] != 0$/;"	f
isclosure	src/flisp/flisp.h	/^#define isclosure(/;"	d
isclusterlazy	stdlib/Distributed/src/cluster.jl	/^isclusterlazy() = something(PGRP.lazy, false)$/;"	f
iscntrl	base/strings/unicode.jl	/^iscntrl(c::AbstractChar) = c <= '\\x1f' || '\\x7f' <= c <= '\\u9f'$/;"	f
iscolumbusday	stdlib/Dates/test/adjusters.jl	/^        iscolumbusday(dt) = Dates.dayofweek(dt) == Dates.Mon &&$/;"	f
iscommit	stdlib/LibGit2/src/LibGit2.jl	/^function iscommit(id::AbstractString, repo::GitRepo)$/;"	f
isconcretedispatch	base/reflection.jl	/^isconcretedispatch(@nospecialize t) = isconcretetype(t) && !iskindtype(t)$/;"	f
isconcretetype	base/reflection.jl	/^isconcretetype(@nospecialize(t)) = (@_pure_meta; isa(t, DataType) && t.isconcretetype)$/;"	f
isconcretetype	src/julia.h	/^    uint8_t isconcretetype; \/\/ whether this type can have instances$/;"	m	struct:_jl_datatype_t	typeref:typename:uint8_t
iscons	src/flisp/flisp.h	/^#define iscons(/;"	d
isconst	base/reflection.jl	/^isconst(m::Module, s::Symbol) =$/;"	f
isconst	src/flisp/flisp.h	/^    value_t isconst;$/;"	m	struct:__anonb455601d0208	typeref:typename:value_t
isconstType	base/compiler/typeutils.jl	/^isconstType(@nospecialize t) = isType(t) && hasuniquerep(t.parameters[1])$/;"	f
isconstant	src/flisp/flisp.h	/^#define isconstant(/;"	d
iscontiguous	base/subarray.jl	/^iscontiguous(::Type{<:FastContiguousSubArray}) = true$/;"	f
iscontiguous	base/subarray.jl	/^iscontiguous(::Type{<:SubArray}) = false$/;"	f
iscontiguous	base/subarray.jl	/^iscontiguous(A::SubArray) = iscontiguous(typeof(A))$/;"	f
iscprim	src/flisp/flisp.h	/^#define iscprim(/;"	d
iscvalue	src/flisp/flisp.h	/^#define iscvalue(/;"	d
isdefined	base/reflection.jl	/^macro isdefined(s::Symbol)$/;"	f
isdefined_22929_1	test/core.jl	/^isdefined_22929_1(x) = isdefined(x, 1)$/;"	f
isdefined_22929_x	test/core.jl	/^isdefined_22929_x(x) = isdefined(x, :x)$/;"	f
isdefined_f3	test/compiler/inference.jl	/^isdefined_f3(x) = isdefined(x, 3)$/;"	f
isdefined_nothrow	base/compiler/tfuncs.jl	/^function isdefined_nothrow(argtypes::Array{Any, 1})$/;"	f
isdefined_sym	src/ast.c	/^jl_sym_t *generated_only_sym; jl_sym_t *isdefined_sym;$/;"	v	typeref:typename:jl_sym_t *
isdefined_tfunc	base/compiler/tfuncs.jl	/^function isdefined_tfunc(@nospecialize(args...))$/;"	f
isdelimited	base/show.jl	/^isdelimited(io::IO, p::Pair) = !(has_tight_type(p) || get(io, :typeinfo, Any) == typeof(p))$/;"	f
isdelimited	base/show.jl	/^isdelimited(io::IO, x) = true$/;"	f
isdelimited	base/show.jl	/^isdelimited(io::IO, x::Function) = !isoperator(Symbol(x))$/;"	f
isdenormal	base/grisu/float.jl	/^isdenormal(d::T) where {T<:AbstractFloat} = (uint_t(d) & ExponentMask(T)) == 0$/;"	f
isdeprecated	base/reflection.jl	/^isdeprecated(m::Module, s::Symbol) = ccall(:jl_is_binding_deprecated, Cint, (Any, Any), m, s) !=/;"	f
isdiag	stdlib/LinearAlgebra/src/bidiag.jl	/^isdiag(M::Bidiagonal) = iszero(M.ev)$/;"	f
isdiag	stdlib/LinearAlgebra/src/diagonal.jl	/^isdiag(D::Diagonal) = all(isdiag, D.diag)$/;"	f
isdiag	stdlib/LinearAlgebra/src/diagonal.jl	/^isdiag(D::Diagonal{<:Number}) = true$/;"	f
isdiag	stdlib/LinearAlgebra/src/generic.jl	/^isdiag(A::AbstractMatrix) = isbanded(A, 0, 0)$/;"	f
isdiag	stdlib/LinearAlgebra/src/generic.jl	/^isdiag(x::Number) = true$/;"	f
isdiag	stdlib/LinearAlgebra/src/tridiag.jl	/^isdiag(M::SymTridiagonal) = iszero(M.ev)$/;"	f
isdiag	stdlib/LinearAlgebra/src/tridiag.jl	/^isdiag(M::Tridiagonal) = iszero(M.dl) && iszero(M.du)$/;"	f
isdiag	stdlib/LinearAlgebra/src/uniformscaling.jl	/^isdiag(::UniformScaling) = true$/;"	f
isdiff	stdlib/LibGit2/src/LibGit2.jl	/^function isdiff(repo::GitRepo, treeish::AbstractString, paths::AbstractString=""; cached::Bool=f/;"	f
isdigit	base/strings/unicode.jl	/^isdigit(c::AbstractChar) = (c >= '0') & (c <= '9')$/;"	f
isdigit_base	src/support/int2str.c	/^int isdigit_base(char c, int base)$/;"	f	typeref:typename:int
isdir	base/stat.jl	/^isdir(st::StatStruct) = filemode(st) & 0xf000 == 0x4000$/;"	f
isdirpath	base/path.jl	/^isdirpath(path::String) = occursin(path_directory_re, splitdrive(path)[2])$/;"	f
isdirty	stdlib/LibGit2/src/LibGit2.jl	/^isdirty(repo::GitRepo, paths::AbstractString=""; cached::Bool=false) =$/;"	f
isdispatchelem	base/reflection.jl	/^function isdispatchelem(@nospecialize v)$/;"	f
isdispatchelem	test/compiler/inference.jl	/^isdispatchelem(@nospecialize x) = !isa(x, Type) || Core.Compiler.isdispatchelem(x)$/;"	f
isdispatchtuple	base/reflection.jl	/^isdispatchtuple(@nospecialize(t)) = (@_pure_meta; isa(t, DataType) && t.isdispatchtuple)$/;"	f
isdispatchtuple	src/julia.h	/^    uint8_t isdispatchtuple; \/\/ aka isleaftupletype$/;"	m	struct:_jl_datatype_t	typeref:typename:uint8_t
isdone	base/essentials.jl	/^isdone(itr, state...) = missing$/;"	f
isdone	base/iterators.jl	/^@inline isdone(P::ProductIterator) = any(isdone, P.iterators)$/;"	f
isdone	base/iterators.jl	/^@inline isdone(P::ProductIterator, states) = _pisdone(P.iterators, states)$/;"	f
isdone	base/iterators.jl	/^@inline isdone(s::Stateful, st=nothing) = s.nextvalstate === nothing$/;"	f
isdone	base/iterators.jl	/^@inline isdone(v::Pairs, state...) = isdone(v.itr, state...)$/;"	f
isdone	base/iterators.jl	/^@inline isdone(z::Zip) = _zip_any_isdone(z.is, map(_ -> (), z.is))$/;"	f
isdone	base/iterators.jl	/^@inline isdone(z::Zip, ss) = _zip_any_isdone(z.is, map(tuple, ss))$/;"	f
isdone	base/iterators.jl	/^isdone(i::Rest, st...) = isdone(i.itr, st...)$/;"	f
isdone	base/iterators.jl	/^isdone(it::Cycle) = isdone(it.xs)$/;"	f
isdone	base/iterators.jl	/^isdone(it::Cycle, state) = false$/;"	f
isdone	base/iterators.jl	/^isdone(it::Drop, state) = isdone(it.xs, state)$/;"	f
isdone	base/iterators.jl	/^isdone(t::Take) = isdone(t.xs)$/;"	f
isdone	base/iterators.jl	/^isdone(t::Take, state) = (state[1] <= 0) | isdone(t.xs, tail(state))$/;"	f
isdragonfly	base/sysinfo.jl	/^isdragonfly(os::Symbol) = (os === :DragonFly)$/;"	f
iseaster	stdlib/Dates/test/adjusters.jl	/^        iseaster(dt) = Dates.yearmonthday(dt) == easter(Dates.year(dt))$/;"	f
isempty	base/abstractarray.jl	/^isempty(a::AbstractArray) = (length(a) == 0)$/;"	f
isempty	base/abstractdict.jl	/^isempty(s::IdSet) = isempty(s.dict)$/;"	f
isempty	base/abstractdict.jl	/^isempty(v::Union{KeySet,ValueIterator}) = isempty(v.dict)$/;"	f
isempty	base/bitset.jl	/^isempty(s::BitSet) = _check0(s.bits, 1, length(s.bits))$/;"	f
isempty	base/char.jl	/^isempty(c::AbstractChar) = false$/;"	f
isempty	base/condition.jl	/^isempty(c::GenericCondition) = isempty(c.waitq)$/;"	f
isempty	base/dict.jl	/^isempty(t::Dict) = (t.count == 0)$/;"	f
isempty	base/dict.jl	/^isempty(t::ImmutableDict) = !isdefined(t, :parent)$/;"	f
isempty	base/essentials.jl	/^function isempty(itr)$/;"	f
isempty	base/essentials.jl	/^isempty(v::SimpleVector) = (length(v) == 0)$/;"	f
isempty	base/linked_list.jl	/^isempty(q::InvasiveLinkedList) = (q.head === nothing)$/;"	f
isempty	base/namedtuple.jl	/^isempty(::NamedTuple) = false$/;"	f
isempty	base/namedtuple.jl	/^isempty(::NamedTuple{()}) = true$/;"	f
isempty	base/number.jl	/^isempty(x::Number) = false$/;"	f
isempty	base/range.jl	/^isempty(r::AbstractUnitRange) = first(r) > last(r)$/;"	f
isempty	base/range.jl	/^isempty(r::LinRange) = length(r) == 0$/;"	f
isempty	base/range.jl	/^isempty(r::StepRange) =$/;"	f
isempty	base/range.jl	/^isempty(r::StepRangeLen) = length(r) == 0$/;"	f
isempty	base/reflection.jl	/^isempty(m::MethodList) = isempty(m.ms)$/;"	f
isempty	base/reflection.jl	/^isempty(mt::Core.MethodTable) = (mt.defs === nothing)$/;"	f
isempty	base/reinterpretarray.jl	/^isempty(cp::CyclePadding) = isempty(cp.padding)$/;"	f
isempty	base/secretbuffer.jl	/^isempty(io::SecretBuffer) = io.size == 0$/;"	f
isempty	base/set.jl	/^isempty(s::Set) = isempty(s.dict)$/;"	f
isempty	base/task.jl	/^isempty(W::InvasiveLinkedListSynchronized) = isempty(W.queue)$/;"	f
isempty	base/task.jl	/^isempty(c::CompositeException) = isempty(c.exceptions)$/;"	f
isempty	base/tuple.jl	/^isempty(@nospecialize x::Tuple) = false$/;"	f
isempty	base/tuple.jl	/^isempty(x::Tuple{}) = true$/;"	f
isempty	base/weakkeydict.jl	/^isempty(wkh::WeakKeyDict) = isempty(wkh.ht)$/;"	f
isequal	base/abstractarray.jl	/^function isequal(A::AbstractArray, B::AbstractArray)$/;"	f
isequal	base/abstractdict.jl	/^function isequal(l::AbstractDict, r::AbstractDict)$/;"	f
isequal	base/complex.jl	/^isequal(z::Complex, w::Complex) = isequal(real(z),real(w)) & isequal(imag(z),imag(w))$/;"	f
isequal	base/float.jl	/^isequal(x::Float32, y::Float32) = fpiseq(x, y)$/;"	f
isequal	base/float.jl	/^isequal(x::Float64, y::Float64) = fpiseq(x, y)$/;"	f
isequal	base/missing.jl	/^isequal(::Any, ::Missing) = false$/;"	f
isequal	base/missing.jl	/^isequal(::Missing, ::Any) = false$/;"	f
isequal	base/missing.jl	/^isequal(::Missing, ::Missing) = true$/;"	f
isequal	base/namedtuple.jl	/^isequal(a::NamedTuple, b::NamedTuple) = false$/;"	f
isequal	base/namedtuple.jl	/^isequal(a::NamedTuple{n}, b::NamedTuple{n}) where {n} = isequal(Tuple(a), Tuple(b))$/;"	f
isequal	base/operators.jl	/^isequal(x) = Fix2(isequal, x)$/;"	f
isequal	base/operators.jl	/^isequal(x, y) = x == y$/;"	f
isequal	base/operators.jl	/^isequal(x::AbstractFloat, y::AbstractFloat) = (isnan(x) & isnan(y)) | signequal(x, y) & (x == y)$/;"	f
isequal	base/operators.jl	/^isequal(x::AbstractFloat, y::Real         ) = (isnan(x) & isnan(y)) | signequal(x, y) & (x == y)$/;"	f
isequal	base/operators.jl	/^isequal(x::Real,          y::AbstractFloat) = (isnan(x) & isnan(y)) | signequal(x, y) & (x == y)$/;"	f
isequal	base/pair.jl	/^isequal(p::Pair, q::Pair) = isequal(p.first,q.first) & isequal(p.second,q.second)$/;"	f
isequal	base/pointer.jl	/^isequal(x::Ptr, y::Ptr) = (x === y)$/;"	f
isequal	base/tuple.jl	/^isequal(t1::Tuple, t2::Tuple) = (length(t1) == length(t2)) && _isequal(t1, t2)$/;"	f
isequal_type	test/subtype.jl	/^isequal_type(@nospecialize(x),@nospecialize(y)) = issub(x,y) && issub(y,x)$/;"	f
isequaldlm	stdlib/DelimitedFiles/test/runtests.jl	/^isequaldlm(m1, m2, t) = isequal(m1, m2) && (eltype(m1) == eltype(m2) == t)$/;"	f
iseven	base/int.jl	/^iseven(n::Integer) = !isodd(n)$/;"	f
isexecutable	base/sysinfo.jl	/^function isexecutable(path::String)$/;"	f
isexecutable	base/sysinfo.jl	/^isexecutable(path::AbstractString) = isexecutable(String(path))$/;"	f
isexported	base/reflection.jl	/^isexported(m::Module, s::Symbol) = ccall(:jl_module_exports_p, Cint, (Any, Any), m, s) != 0$/;"	f
isexpr	base/compiler/ssair/ir.jl	/^@inline isexpr(@nospecialize(stmt), head::Symbol) = isa(stmt, Expr) && stmt.head === head$/;"	f
isexpr	base/docs/core.jl	/^isexpr(x, h::Symbol) = isa(x, Expr) && x.head === h$/;"	f
isexpr	base/meta.jl	/^isexpr(@nospecialize(ex), head::Symbol) = isa(ex, Expr) && ex.head === head$/;"	f
isexpr	base/meta.jl	/^isexpr(@nospecialize(ex), heads, n::Int) = isexpr(ex, heads) && length(ex.args) == n$/;"	f
isexpr	base/meta.jl	/^isexpr(@nospecialize(ex), heads::Union{Set,Vector,Tuple}) = isa(ex, Expr) && in(ex.head, heads)$/;"	f
isexpr	stdlib/Markdown/src/parse/config.jl	/^isexpr(x::Expr, ts...) = x.head in ts$/;"	f
isexpr	stdlib/Markdown/src/parse/config.jl	/^isexpr(x::T, ts...) where {T} = T in ts$/;"	f
isfield	base/docs/Docs.jl	/^isfield(@nospecialize x) = isexpr(x, :.) &&$/;"	f
isfifo	base/stat.jl	/^isfifo(st::StatStruct) = filemode(st) & 0xf000 == 0x1000$/;"	f
isfile	base/stat.jl	/^isfile(st::StatStruct) = filemode(st) & 0xf000 == 0x8000$/;"	f
isfile_casesensitive	base/loading.jl	/^    function isfile_casesensitive(path)$/;"	f
isfile_casesensitive	base/loading.jl	/^    isfile_casesensitive(path) = isfile(path)$/;"	f
isfiles	test/runtests.jl	/^isfiles = isfile.(test_path.(tests) .* ".jl")$/;"	v
isfilled	stdlib/LibGit2/src/gitcredential.jl	/^function isfilled(cred::GitCredential)$/;"	f
isfilled	stdlib/LibGit2/src/types.jl	/^function isfilled(cred::SSHCredential)$/;"	f
isfilled	stdlib/LibGit2/src/types.jl	/^function isfilled(cred::UserPasswordCredential)$/;"	f
isfinite	base/complex.jl	/^isfinite(z::Complex) = isfinite(real(z)) & isfinite(imag(z))$/;"	f
isfinite	base/float.jl	/^isfinite(x::AbstractFloat) = x - x == 0$/;"	f
isfinite	base/float.jl	/^isfinite(x::Float16) = reinterpret(UInt16,x)&0x7c00 != 0x7c00$/;"	f
isfinite	base/float.jl	/^isfinite(x::Integer) = true$/;"	f
isfinite	base/float.jl	/^isfinite(x::Real) = decompose(x)[3] != 0$/;"	f
isfinite	base/irrationals.jl	/^isfinite(::AbstractIrrational) = true$/;"	f
isfinite	base/mpfr.jl	/^isfinite(x::BigFloat) = !isinf(x) && !isnan(x)$/;"	f
isfinite_fast	base/fastmath.jl	/^isfinite_fast(x) = true$/;"	f
isfixnum	src/flisp/flisp.h	/^#define isfixnum(/;"	d
isflat	base/broadcast.jl	/^isflat(bc::Broadcasted) = _isflat(bc.args)$/;"	f
isforwarded	src/flisp/flisp.h	/^#define isforwarded(/;"	d
isfreebsd	base/sysinfo.jl	/^isfreebsd(os::Symbol) = (os === :FreeBSD)$/;"	f
isfriday	stdlib/Dates/src/query.jl	/^isfriday(dt::TimeType) = dayofweek(dt) == Fri$/;"	f
isfunction	src/flisp/flisp.h	/^#define isfunction(/;"	d
isgenerated	base/reflection.jl	/^isgenerated(m::Core.MethodInstance) = isgenerated(m.def)$/;"	f
isgenerated	base/reflection.jl	/^isgenerated(m::Method) = isdefined(m, :generator)$/;"	f
isgensym	src/flisp/flisp.h	/^#define isgensym(/;"	d
isghost	src/codegen.cpp	/^    bool isghost; \/\/ whether this value is "ghost"$/;"	m	struct:jl_cgval_t	typeref:typename:bool	file:
isgoodzero	base/reduce.jl	/^isgoodzero(::typeof(max), x) = isbadzero(min, x)$/;"	f
isgoodzero	base/reduce.jl	/^isgoodzero(::typeof(min), x) = isbadzero(max, x)$/;"	f
isgraphemebreak	base/strings/unicode.jl	/^isgraphemebreak(c1::AbstractChar, c2::AbstractChar) =$/;"	f
isgraphemebreak!	base/strings/unicode.jl	/^function isgraphemebreak!(state::Ref{Int32}, c1::AbstractChar, c2::AbstractChar)$/;"	f
isgreater	base/reducedim.jl	/^isgreater(a, b) = isless(b,a)$/;"	f
ishashtable	src/flisp/table.c	/^static int ishashtable(fl_context_t *fl_ctx, value_t v)$/;"	f	typeref:typename:int	file:
ishead	stdlib/LibGit2/src/reference.jl	/^function ishead(ref::GitReference)$/;"	f
ishermitian	stdlib/LinearAlgebra/src/bitarray.jl	/^ishermitian(A::BitMatrix) = issymmetric(A)$/;"	f
ishermitian	stdlib/LinearAlgebra/src/bunchkaufman.jl	/^ishermitian(B::BunchKaufman) = !B.symmetric$/;"	f
ishermitian	stdlib/LinearAlgebra/src/diagonal.jl	/^ishermitian(D::Diagonal) = all(ishermitian, D.diag)$/;"	f
ishermitian	stdlib/LinearAlgebra/src/diagonal.jl	/^ishermitian(D::Diagonal{<:Number}) = isreal(D.diag)$/;"	f
ishermitian	stdlib/LinearAlgebra/src/diagonal.jl	/^ishermitian(D::Diagonal{<:Real}) = true$/;"	f
ishermitian	stdlib/LinearAlgebra/src/generic.jl	/^function ishermitian(A::AbstractMatrix)$/;"	f
ishermitian	stdlib/LinearAlgebra/src/generic.jl	/^ishermitian(x::Number) = (x == conj(x))$/;"	f
ishermitian	stdlib/LinearAlgebra/src/symmetric.jl	/^ishermitian(A::Hermitian) = true$/;"	f
ishermitian	stdlib/LinearAlgebra/src/symmetric.jl	/^ishermitian(A::Symmetric{<:Complex}) = isreal(A)$/;"	f
ishermitian	stdlib/LinearAlgebra/src/symmetric.jl	/^ishermitian(A::Symmetric{<:Real}) = true$/;"	f
ishermitian	stdlib/LinearAlgebra/src/uniformscaling.jl	/^ishermitian(J::UniformScaling) = isreal(J.λ)$/;"	f
ishermitian	stdlib/SparseArrays/src/sparsematrix.jl	/^ishermitian(A::AbstractSparseMatrixCSC) = is_hermsym(A, conj)$/;"	f
ishermitian	stdlib/SuiteSparse/src/cholmod.jl	/^function ishermitian(A::Sparse{Complex{Float64}})$/;"	f
ishermitian	stdlib/SuiteSparse/src/cholmod.jl	/^function ishermitian(A::Sparse{Float64})$/;"	f
ishexchar	src/jl_uv.c	/^static inline int ishexchar(char c)$/;"	f	typeref:typename:int	file:
isidentifier	base/show.jl	/^function isidentifier(s::AbstractString)$/;"	f
isidentifier	base/show.jl	/^isidentifier(s::Symbol) = isidentifier(string(s))$/;"	f
isimmutable	base/reflection.jl	/^isimmutable(@nospecialize(x)) = (@_pure_meta; !typeof(x).mutable)$/;"	f
isindependenceday	stdlib/Dates/test/adjusters.jl	/^        isindependenceday(dt) = Dates.yearmonthday(dt) == independenceday(Dates.year(dt))$/;"	f
isinf	base/complex.jl	/^isinf(z::Complex) = isinf(real(z)) | isinf(imag(z))$/;"	f
isinf	base/float.jl	/^isinf(x::Real) = !isnan(x) & !isfinite(x)$/;"	f
isinf	base/mpfr.jl	/^function isinf(x::BigFloat)$/;"	f
isinf_fast	base/fastmath.jl	/^isinf_fast(x) = false$/;"	f
isinlineable	base/compiler/optimize.jl	/^function isinlineable(m::Method, me::OptimizationState, bonus::Int=0)$/;"	f
isinlinealloc	src/julia.h	/^    uint8_t isinlinealloc; \/\/ if this is allocated inline$/;"	m	struct:_jl_datatype_t	typeref:typename:uint8_t
isinlined	src/flisp/flisp.h	/^#define isinlined(/;"	d
isinteger	base/complex.jl	/^isinteger(z::Complex) = isreal(z) & isinteger(real(z))$/;"	f
isinteger	base/floatfuncs.jl	/^isinteger(x::AbstractFloat) = (x - trunc(x) == 0)$/;"	f
isinteger	base/irrationals.jl	/^isinteger(::AbstractIrrational) = false$/;"	f
isinteger	base/mpfr.jl	/^function isinteger(x::BigFloat)$/;"	f
isinteger	base/number.jl	/^isinteger(x::Integer) = true$/;"	f
isinteger	base/rational.jl	/^isinteger(x::Rational) = x.den == 1$/;"	f
isinteractive	base/initdefs.jl	/^isinteractive() = (is_interactive::Bool)$/;"	f
isinteractive	src/julia.h	/^    int8_t isinteractive;$/;"	m	struct:__anon055fe4271808	typeref:typename:int8_t
isinvoke	base/compiler/ssair/inlining.jl	/^isinvoke(inl::InliningTodo) = inl.isinvoke$/;"	f
isinvoke	base/compiler/ssair/inlining.jl	/^isinvoke(inl::UnionSplit) = false$/;"	f
isiterable	base/essentials.jl	/^function isiterable(T)::Bool$/;"	f
isjsvm	base/sysinfo.jl	/^isjsvm(os::Symbol) = (os === :Emscripten)$/;"	f
iskeyword	src/flisp/flisp.h	/^#define iskeyword(/;"	d
iskindtype	base/reflection.jl	/^iskindtype(@nospecialize t) = (t === DataType || t === UnionAll || t === Union || t === typeof(B/;"	f
isknownlength	base/compiler/typeutils.jl	/^function isknownlength(t::DataType)$/;"	f
isknowntype	base/compiler/optimize.jl	/^isknowntype(@nospecialize T) = (T === Union{}) || isconcretetype(T)$/;"	f
islaborday	stdlib/Dates/test/adjusters.jl	/^        islaborday(dt) = Dates.dayofweek(dt) == Dates.Mon &&$/;"	f
isleafsig	src/julia.h	/^    int8_t isleafsig; \/\/ isleaftype(sig) & !any(isType, sig) : unsorted and very fast$/;"	m	struct:_jl_typemap_entry_t	typeref:typename:int8_t
isleap	src/support/tzfile.h	/^#define isleap(/;"	d
isleap_sum	src/support/tzfile.h	/^#define isleap_sum(/;"	d
isleapyear	stdlib/Dates/src/query.jl	/^isleapyear(dt::TimeType) = isleapyear(year(dt))$/;"	f
isleapyear	stdlib/Dates/src/types.jl	/^isleapyear(y) = ((y % 4 == 0) && (y % 100 != 0)) || (y % 400 == 0)$/;"	f
isless	base/abstractarray.jl	/^isless(A::AbstractVector, B::AbstractVector) = cmp(A, B) < 0$/;"	f
isless	base/char.jl	/^isless(x::AbstractChar, y::AbstractChar) = isless(Char(x), Char(y))$/;"	f
isless	base/char.jl	/^isless(x::Char, y::Char) = reinterpret(UInt32, x) < reinterpret(UInt32, y)$/;"	f
isless	base/float.jl	/^isless( x::Float32, y::Float32) = fpislt(x, y)$/;"	f
isless	base/float.jl	/^isless( x::Float64, y::Float64) = fpislt(x, y)$/;"	f
isless	base/loading.jl	/^isless(a::SHA1, b::SHA1) = isless(a.bytes, b.bytes)$/;"	f
isless	base/logging.jl	/^isless(a::LogLevel, b::LogLevel) = isless(a.level, b.level)$/;"	f
isless	base/missing.jl	/^isless(::Any, ::Missing) = true$/;"	f
isless	base/missing.jl	/^isless(::Missing, ::Any) = false$/;"	f
isless	base/missing.jl	/^isless(::Missing, ::Missing) = false$/;"	f
isless	base/multidimensional.jl	/^    @inline isless(I1::CartesianIndex{N}, I2::CartesianIndex{N}) where {N} = _isless(0, I1.I, I2/;"	f
isless	base/namedtuple.jl	/^isless(a::NamedTuple{n}, b::NamedTuple{n}) where {n} = isless(Tuple(a), Tuple(b))$/;"	f
isless	base/operators.jl	/^function isless end$/;"	f
isless	base/operators.jl	/^isless(x::AbstractFloat, y::AbstractFloat) = (!isnan(x) & (isnan(y) | signless(x, y))) | (x < y)$/;"	f
isless	base/operators.jl	/^isless(x::AbstractFloat, y::Real         ) = (!isnan(x) & (isnan(y) | signless(x, y))) | (x < y)$/;"	f
isless	base/operators.jl	/^isless(x::Real,          y::AbstractFloat) = (!isnan(x) & (isnan(y) | signless(x, y))) | (x < y)$/;"	f
isless	base/operators.jl	/^isless(x::Real, y::Real) = x<y$/;"	f
isless	base/pair.jl	/^isless(p::Pair, q::Pair) = ifelse(!isequal(p.first,q.first), isless(p.first,q.first),$/;"	f
isless	base/pointer.jl	/^isless(x::Ptr{T}, y::Ptr{T}) where {T} = x < y$/;"	f
isless	base/strings/basic.jl	/^isless(a::AbstractString, b::AbstractString) = cmp(a, b) < 0$/;"	f
isless	base/strings/basic.jl	/^isless(a::Symbol, b::Symbol) = cmp(a, b) < 0$/;"	f
isless	base/strings/unicode.jl	/^isless(g1::GraphemeIterator, g2::GraphemeIterator) = isless(g1.s, g2.s)$/;"	f
isless	base/tuple.jl	/^function isless(t1::Any16, t2::Any16)$/;"	f
isless	base/tuple.jl	/^function isless(t1::Tuple, t2::Tuple)$/;"	f
isless	base/tuple.jl	/^isless(::Tuple, ::Tuple{}) = false$/;"	f
isless	base/tuple.jl	/^isless(::Tuple{}, ::Tuple) = true$/;"	f
isless	base/tuple.jl	/^isless(::Tuple{}, ::Tuple{}) = false$/;"	f
isless	base/uuid.jl	/^isless(a::UUID, b::UUID) = isless(a.value, b.value)$/;"	f
isless	base/version.jl	/^function isless(a::VersionNumber, b::VersionNumber)$/;"	f
isletter	base/strings/unicode.jl	/^isletter(c::AbstractChar) = UTF8PROC_CATEGORY_LU <= category_code(c) <= UTF8PROC_CATEGORY_LO$/;"	f
isline	test/syntax.jl	/^isline(x) = isa(x, LineNumberNode)$/;"	f
islink	base/stat.jl	/^islink(path...) = islink(lstat(path...))$/;"	f
islink	base/stat.jl	/^islink(st::StatStruct) = filemode(st) & 0xf000 == 0xa000$/;"	f
islinux	base/sysinfo.jl	/^islinux(os::Symbol) = (os === :Linux)$/;"	f
islocked	base/condition.jl	/^function islocked end$/;"	f
islocked	base/condition.jl	/^islocked(::AlwaysLockedST) = true$/;"	f
islocked	base/condition.jl	/^islocked(c::GenericCondition) = islocked(c.lock)$/;"	f
islocked	base/lock.jl	/^function islocked(rl::ReentrantLock)$/;"	f
islocked	base/locks-mt.jl	/^function islocked(l::SpinLock)$/;"	f
islocked	base/weakkeydict.jl	/^islocked(wkh::WeakKeyDict) = islocked(wkh.lock)$/;"	f
islowercase	base/strings/unicode.jl	/^islowercase(c::AbstractChar) = category_code(c) == UTF8PROC_CATEGORY_LL$/;"	f
ismalformed	base/char.jl	/^function ismalformed(c::Char)$/;"	f
ismalformed	base/char.jl	/^ismalformed(c::AbstractChar) = false$/;"	f
ismanaged	src/flisp/flisp.h	/^#define ismanaged(/;"	d
ismarked	base/io.jl	/^ismarked(io::IO) = io.mark >= 0$/;"	f
ismarked	base/stream.jl	/^ismarked(x::LibuvStream) = ismarked(x.buffer)$/;"	f
ismarked	src/flisp/flisp.c	/^#define ismarked(/;"	d	file:
ismartinlutherking	stdlib/Dates/test/adjusters.jl	/^        ismartinlutherking(dt) = Dates.dayofweek(dt) == Dates.Mon &&$/;"	f
ismatch	stdlib/LibGit2/src/gitcredential.jl	/^function ismatch(url::AbstractString, git_cred::GitCredential)$/;"	f
ismemorialday	stdlib/Dates/test/adjusters.jl	/^        ismemorialday(dt) = Dates.dayofweek(dt) == Dates.Mon &&$/;"	f
ismissing	base/essentials.jl	/^ismissing(::Any) = false$/;"	f
ismissing	base/essentials.jl	/^ismissing(::Missing) = true$/;"	f
ismodulecall	base/show.jl	/^function ismodulecall(ex::Expr)$/;"	f
ismonday	stdlib/Dates/src/query.jl	/^ismonday(dt::TimeType) = dayofweek(dt) == Mon$/;"	f
ismount	base/stat.jl	/^function ismount(path...)$/;"	f
isnan	base/complex.jl	/^isnan(z::Complex) = isnan(real(z)) | isnan(imag(z))$/;"	f
isnan	base/float.jl	/^isnan(x::AbstractFloat) = x != x$/;"	f
isnan	base/float.jl	/^isnan(x::Float16) = reinterpret(UInt16,x)&0x7fff > 0x7c00$/;"	f
isnan	base/float.jl	/^isnan(x::Real) = false$/;"	f
isnan	base/mpfr.jl	/^function isnan(x::BigFloat)$/;"	f
isnan	base/sort.jl	/^isnan(o::DirectOrdering, x::Floats) = (x!=x)$/;"	f
isnan	base/sort.jl	/^isnan(o::Perm, i::Int) = isnan(o.order,o.data[i])$/;"	f
isnan_fast	base/fastmath.jl	/^isnan_fast(x) = false$/;"	f
isnan_type	test/math.jl	/^function isnan_type(::Type{T}, x) where T$/;"	f
isnanfillable	stdlib/LinearAlgebra/test/addmul.jl	/^isnanfillable(::AbstractArray) = false$/;"	f
isnanfillable	stdlib/LinearAlgebra/test/addmul.jl	/^isnanfillable(::Array{<:AbstractFloat}) = true$/;"	f
isnanfillable	stdlib/LinearAlgebra/test/addmul.jl	/^isnanfillable(A::AbstractArray{<:AbstractFloat}) = parent(A) isa Array$/;"	f
isneg	base/gmp.jl	/^isneg(x::BigInt) = x.size < 0$/;"	f
isnetbsd	base/sysinfo.jl	/^isnetbsd(os::Symbol) = (os === :NetBSD)$/;"	f
isnewyears	stdlib/Dates/test/adjusters.jl	/^        isnewyears(dt) = Dates.yearmonthday(dt) == newyears(Dates.year(dt))$/;"	f
isnotbrokensubtype	base/compiler/typeutils.jl	/^isnotbrokensubtype(@nospecialize(a), @nospecialize(b)) = (!iskindtype(b) || !isType(a) || hasuni/;"	f
isnothing	base/some.jl	/^isnothing(::Any) = false$/;"	f
isnothing	base/some.jl	/^isnothing(::Nothing) = true$/;"	f
isnumeric	base/strings/unicode.jl	/^isnumeric(c::AbstractChar) = UTF8PROC_CATEGORY_ND <= category_code(c) <= UTF8PROC_CATEGORY_NO$/;"	f
isnumtok	src/flisp/read.c	/^static int isnumtok(fl_context_t *fl_ctx, char *tok, value_t *pval)$/;"	f	typeref:typename:int	file:
isnumtok_base	src/flisp/read.c	/^int isnumtok_base(fl_context_t *fl_ctx, char *tok, value_t *pval, int base)$/;"	f	typeref:typename:int
isobjref	src/llvm-alloc-opt.cpp	/^        bool isobjref:1;$/;"	m	struct:__anon0a1571000111::Optimizer::MemOp	typeref:typename:bool:1	file:
isodd	base/int.jl	/^isodd(n::Integer) = rem(n, 2) != 0$/;"	f
isok	stdlib/SuiteSparse/src/cholmod_h.jl	/^macro isok(A)$/;"	f
isok	stdlib/SuiteSparse/src/umfpack.jl	/^macro isok(A)$/;"	f
isone	base/bool.jl	/^isone(x::Bool) = x$/;"	f
isone	base/complex.jl	/^isone(z::Complex) = isone(real(z)) & iszero(imag(z))$/;"	f
isone	base/gmp.jl	/^isone(x::BigInt) = x == Culong(1)$/;"	f
isone	base/irrationals.jl	/^isone(::AbstractIrrational) = false$/;"	f
isone	base/mpfr.jl	/^isone(x::BigFloat) = x == Clong(1)$/;"	f
isone	base/number.jl	/^isone(x) = x == one(x) # fallback method$/;"	f
isone	base/rational.jl	/^isone(x::Rational) = isone(numerator(x)) & isone(denominator(x))$/;"	f
isone	stdlib/LinearAlgebra/src/bidiag.jl	/^isone(M::Bidiagonal) = all(isone, M.dv) && iszero(M.ev)$/;"	f
isone	stdlib/LinearAlgebra/src/dense.jl	/^function isone(A::StridedMatrix)$/;"	f
isone	stdlib/LinearAlgebra/src/diagonal.jl	/^isone(D::Diagonal) = all(isone, D.diag)$/;"	f
isone	stdlib/LinearAlgebra/src/tridiag.jl	/^isone(M::SymTridiagonal) = iszero(M.ev) && all(isone, M.dv)$/;"	f
isone	stdlib/LinearAlgebra/src/tridiag.jl	/^isone(M::Tridiagonal) = iszero(M.dl) && all(isone, M.d) && iszero(M.du)$/;"	f
isopen	base/asyncevent.jl	/^isopen(t::Union{Timer, AsyncCondition}) = t.isopen$/;"	f
isopen	base/channels.jl	/^isopen(c::Channel) = (c.state == :open)$/;"	f
isopen	base/coreio.jl	/^isopen(::DevNull) = true$/;"	f
isopen	base/filesystem.jl	/^isopen(f::File) = f.open$/;"	f
isopen	base/io.jl	/^function isopen end$/;"	f
isopen	base/io.jl	/^isopen(io::AbstractPipe) = isopen(pipe_writer(io)) || isopen(pipe_reader(io))$/;"	f
isopen	base/iobuffer.jl	/^isopen(io::GenericIOBuffer) = io.readable || io.writable || io.seekable || bytesavailable(io) > /;"	f
isopen	base/iostream.jl	/^isopen(s::IOStream) = ccall(:ios_isopen, Cint, (Ptr{Cvoid},), s.ios) != 0$/;"	f
isopen	base/stream.jl	/^function isopen(x::Union{LibuvStream, LibuvServer})$/;"	f
isopen	base/stream.jl	/^isopen(s::BufferStream) = s.is_open$/;"	f
isopen	stdlib/Distributed/src/remotecall.jl	/^isopen(rr::RemoteChannel) = call_on_owner(isopen_ref, rr)$/;"	f
isopen_ref	stdlib/Distributed/src/remotecall.jl	/^isopen_ref(rid) = isopen(lookup_ref(rid).c)$/;"	f
isopenbsd	base/sysinfo.jl	/^isopenbsd(os::Symbol) = (os === :OpenBSD)$/;"	f
isoperator	base/show.jl	/^isoperator(s::Union{Symbol,AbstractString}) = ccall(:jl_is_operator, Cint, (Cstring,), s) != 0$/;"	f
isordered	stdlib/Markdown/src/Common/block.jl	/^isordered(list::List) = list.ordered >= 0$/;"	f
isorphan	stdlib/LibGit2/src/reference.jl	/^function isorphan(repo::GitRepo)$/;"	f
isoverlong	base/char.jl	/^function isoverlong(c::Char)$/;"	f
isoverlong	base/char.jl	/^isoverlong(c::AbstractChar) = false$/;"	f
ispath	base/stat.jl	/^ispath(st::StatStruct) = filemode(st) & 0xf000 != 0x0000$/;"	f
isperm	base/combinatorics.jl	/^function isperm(A)$/;"	f
isperm	base/combinatorics.jl	/^isperm(p::Tuple{Int,Int}) = ((p[1] == 1) & (p[2] == 2)) | ((p[1] == 2) & (p[2] == 1))$/;"	f
isperm	base/combinatorics.jl	/^isperm(p::Tuple{Int}) = p[1] == 1$/;"	f
isperm	base/combinatorics.jl	/^isperm(p::Tuple{}) = true$/;"	f
ispointer	src/codegen.cpp	/^    bool ispointer() const$/;"	f	struct:jl_cgval_t	typeref:typename:bool	file:
ispos	base/gmp.jl	/^ispos(x::BigInt) = x.size > 0$/;"	f
isposdef	stdlib/LinearAlgebra/src/cholesky.jl	/^isposdef(C::Union{Cholesky,CholeskyPivoted}) = C.info == 0$/;"	f
isposdef	stdlib/LinearAlgebra/src/dense.jl	/^isposdef(A::AbstractMatrix) =$/;"	f
isposdef	stdlib/LinearAlgebra/src/dense.jl	/^isposdef(x::Number) = imag(x)==0 && real(x) > 0$/;"	f
isposdef	stdlib/LinearAlgebra/src/diagonal.jl	/^isposdef(D::Diagonal) = all(isposdef, D.diag)$/;"	f
isposdef	stdlib/LinearAlgebra/src/eigen.jl	/^isposdef(A::Union{Eigen,GeneralizedEigen}) = isreal(A.values) && all(x -> x > 0, A.values)$/;"	f
isposdef	stdlib/LinearAlgebra/src/uniformscaling.jl	/^isposdef(J::UniformScaling) = isposdef(J.λ)$/;"	f
isposdef	stdlib/SuiteSparse/src/cholmod.jl	/^function isposdef(F::Factor)$/;"	f
isposdef!	stdlib/LinearAlgebra/src/dense.jl	/^isposdef!(A::AbstractMatrix) =$/;"	f
ispow2	base/intfuncs.jl	/^ispow2(x::Integer) = x > 0 && count_ones(x) == 1$/;"	f
ispresidentsday	stdlib/Dates/test/adjusters.jl	/^        ispresidentsday(dt) = Dates.dayofweek(dt) == Dates.Mon &&$/;"	f
isprimitivetype	base/reflection.jl	/^function isprimitivetype(@nospecialize(t::Type))$/;"	f
isprint	base/strings/unicode.jl	/^isprint(c::AbstractChar) = UTF8PROC_CATEGORY_LU <= category_code(c) <= UTF8PROC_CATEGORY_ZS$/;"	f
isptr	src/julia.h	/^    uint16_t isptr:1;$/;"	m	struct:__anon055fe4270d08	typeref:typename:uint16_t:1
isptr	src/julia.h	/^    uint32_t isptr:1;$/;"	m	struct:__anon055fe4270e08	typeref:typename:uint32_t:1
isptr	src/julia.h	/^    uint8_t isptr:1;$/;"	m	struct:__anon055fe4270c08	typeref:typename:uint8_t:1
ispty	base/stream.jl	/^    ispty(s::IO) = false$/;"	f
ispty	base/stream.jl	/^    ispty(s::TTY) = s.ispty$/;"	f
ispunct	base/strings/unicode.jl	/^ispunct(c::AbstractChar) = UTF8PROC_CATEGORY_PC <= category_code(c) <= UTF8PROC_CATEGORY_PO$/;"	f
ispuretopfunction	base/compiler/ssair/inlining.jl	/^function ispuretopfunction(@nospecialize(f))$/;"	f
isqrt	base/gmp.jl	/^isqrt(x::BigInt) = MPZ.sqrt(x)$/;"	f
isqrt	base/intfuncs.jl	/^function isqrt(x::Union{Int64,UInt64,Int128,UInt128})$/;"	f
isqrt	base/intfuncs.jl	/^isqrt(x::Integer) = oftype(x, trunc(sqrt(x)))$/;"	f
isquotedmacrocall	base/docs/Docs.jl	/^isquotedmacrocall(@nospecialize x) =$/;"	f
isreadable	base/coreio.jl	/^isreadable(::DevNull) = false$/;"	f
isreadable	base/io.jl	/^function isreadable end$/;"	f
isreadable	base/iobuffer.jl	/^isreadable(io::GenericIOBuffer) = io.readable$/;"	f
isreadable	base/iostream.jl	/^isreadable(s::IOStream) = ccall(:ios_get_readable, Cint, (Ptr{Cvoid},), s.ios)!=0$/;"	f
isreadable	base/stream.jl	/^function isreadable(io::LibuvStream)$/;"	f
isreadable	base/stream.jl	/^isreadable(s::BufferStream) = s.buffer.readable$/;"	f
isreadable	stdlib/FileWatching/src/FileWatching.jl	/^isreadable(f::FDEvent) = f.readable$/;"	f
isreadable	stdlib/Sockets/src/Sockets.jl	/^isreadable(io::TCPSocket) = isopen(io) || bytesavailable(io) > 0$/;"	f
isreadonly	base/io.jl	/^isreadonly(s) = isreadable(s) && !iswritable(s)$/;"	f
isready	base/channels.jl	/^isready(c::Channel) = n_avail(c) > 0$/;"	f
isready	stdlib/Distributed/src/remotecall.jl	/^function isready(rr::Future)$/;"	f
isready	stdlib/Distributed/src/remotecall.jl	/^function isready(rr::RemoteChannel, args...)$/;"	f
isready	stdlib/Distributed/src/remotecall.jl	/^isready(rv::RemoteValue, args...) = isready(rv.c, args...)$/;"	f
isreal	base/abstractarraymath.jl	/^isreal(x::AbstractArray) = all(isreal,x)$/;"	f
isreal	base/abstractarraymath.jl	/^isreal(x::AbstractArray{<:Real}) = true$/;"	f
isreal	base/complex.jl	/^isreal(x::Real) = true$/;"	f
isreal	base/complex.jl	/^isreal(z::Complex) = iszero(imag(z))$/;"	f
isref	src/llvm-alloc-opt.cpp	/^        bool isref;$/;"	m	struct:__anon0a1571000111::Optimizer::splitOnStack::SplitSlot	typeref:typename:bool	file:
isregex	stdlib/REPL/src/docview.jl	/^isregex(x) = isexpr(x, :macrocall, 3) && x.args[1] === Symbol("@r_str") && !isempty(x.args[3])$/;"	f
isremote	stdlib/LibGit2/src/reference.jl	/^function isremote(ref::GitReference)$/;"	f
issaturday	stdlib/Dates/src/query.jl	/^issaturday(dt::TimeType) = dayofweek(dt) == Sat$/;"	f
isset	stdlib/LibGit2/src/utils.jl	/^isset(val::Integer, flag::Integer) = (val & flag == flag)$/;"	f
issetequal	base/abstractset.jl	/^function issetequal(l, r)$/;"	f
issetequal	base/abstractset.jl	/^function issetequal(l, r::AbstractSet)$/;"	f
issetequal	base/abstractset.jl	/^issetequal(l::AbstractSet, r) = issetequal(l, Set(r))$/;"	f
issetequal	base/abstractset.jl	/^issetequal(l::AbstractSet, r::AbstractSet) = l == r$/;"	f
issetgid	base/stat.jl	/^issetgid(st::StatStruct) = (filemode(st) & 0o2000) > 0$/;"	f
issetuid	base/stat.jl	/^issetuid(st::StatStruct) = (filemode(st) & 0o4000) > 0$/;"	f
isshared	src/julia.h	/^    uint16_t isshared:1;  \/\/ data is shared by multiple Arrays$/;"	m	struct:__anon055fe4270308	typeref:typename:uint16_t:1
isshredded	base/secretbuffer.jl	/^isshredded(s::SecretBuffer) = all(iszero, s.data)$/;"	f
issignleft	base/sort.jl	/^issignleft(o::ForwardOrdering, x::Floats) = lt(o, x, zero(x))$/;"	f
issignleft	base/sort.jl	/^issignleft(o::Perm, i::Int) = issignleft(o.order, o.data[i])$/;"	f
issignleft	base/sort.jl	/^issignleft(o::ReverseOrdering, x::Floats) = lt(o, x, -zero(x))$/;"	f
issimplesig	src/julia.h	/^    int8_t issimplesig; \/\/ all(isleaftype | isAny | isType | isVararg, sig) : sorted and fast$/;"	m	struct:_jl_typemap_entry_t	typeref:typename:int8_t
issingletontype	base/reflection.jl	/^issingletontype(@nospecialize(t)) = (@_pure_meta; isa(t, DataType) && isdefined(t, :instance))$/;"	f
isslotempty	base/dict.jl	/^@propagate_inbounds isslotempty(h::Dict, i::Int) = h.slots[i] == 0x0$/;"	f
isslotfilled	base/dict.jl	/^@propagate_inbounds isslotfilled(h::Dict, i::Int) = h.slots[i] == 0x1$/;"	f
isslotmissing	base/dict.jl	/^@propagate_inbounds isslotmissing(h::Dict, i::Int) = h.slots[i] == 0x2$/;"	f
issocket	base/stat.jl	/^issocket(st::StatStruct) = filemode(st) & 0xf000 == 0xc000$/;"	f
issorted	base/bitset.jl	/^issorted(s::BitSet) = true$/;"	f
issorted	base/compiler/compiler.jl	/^function issorted end$/;"	f
issorted	base/range.jl	/^issorted(r::AbstractRange) = length(r) <= 1 || step(r) >= zero(step(r))$/;"	f
issorted	base/range.jl	/^issorted(r::AbstractUnitRange) = true$/;"	f
issorted	base/sort.jl	/^function issorted(itr, order::Ordering)$/;"	f
isspace	base/strings/unicode.jl	/^@inline isspace(c::AbstractChar) =$/;"	f
issparse	stdlib/SparseArrays/src/abstractsparse.jl	/^issparse(A::AbstractArray) = false$/;"	f
issparse	stdlib/SparseArrays/src/abstractsparse.jl	/^issparse(S::AbstractSparseArray) = true$/;"	f
issparse	stdlib/SparseArrays/src/abstractsparse.jl	/^issparse(S::LinearAlgebra.Hermitian{<:Any,<:AbstractSparseMatrix}) = true$/;"	f
issparse	stdlib/SparseArrays/src/abstractsparse.jl	/^issparse(S::LinearAlgebra.LowerTriangular{<:Any,<:AbstractSparseMatrix}) = true$/;"	f
issparse	stdlib/SparseArrays/src/abstractsparse.jl	/^issparse(S::LinearAlgebra.Symmetric{<:Any,<:AbstractSparseMatrix}) = true$/;"	f
issparse	stdlib/SparseArrays/src/abstractsparse.jl	/^issparse(S::LinearAlgebra.UnitLowerTriangular{<:Any,<:AbstractSparseMatrix}) = true$/;"	f
issparse	stdlib/SparseArrays/src/abstractsparse.jl	/^issparse(S::LinearAlgebra.UnitUpperTriangular{<:Any,<:AbstractSparseMatrix}) = true$/;"	f
issparse	stdlib/SparseArrays/src/abstractsparse.jl	/^issparse(S::LinearAlgebra.UpperTriangular{<:Any,<:AbstractSparseMatrix}) = true$/;"	f
issticky	base/stat.jl	/^issticky(st::StatStruct) = (filemode(st) & 0o1000) > 0$/;"	f
isstring	src/flisp/flisp.c	/^#define isstring(/;"	d	file:
isstructtype	base/reflection.jl	/^function isstructtype(@nospecialize(t::Type))$/;"	f
isstructurepreserving	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^isstructurepreserving(::TypeFuncs, ::Ref{<:Type}, ::StructuredMatrix) = true$/;"	f
isstructurepreserving	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^isstructurepreserving(::TypeFuncs, ::StructuredMatrix) = true$/;"	f
isstructurepreserving	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^isstructurepreserving(::Union{typeof(abs),typeof(big)}, ::StructuredMatrix) = true$/;"	f
isstructurepreserving	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^isstructurepreserving(bc::Broadcasted) = isstructurepreserving(bc.f, bc.args...)$/;"	f
isstructurepreserving	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^isstructurepreserving(f, args...) = false$/;"	f
issub	test/subtype.jl	/^const issub = (<:)$/;"	v
issub_strict	test/subtype.jl	/^issub_strict(@nospecialize(x),@nospecialize(y)) = issub(x,y) && !issub(y,x)$/;"	f
issubconditional	base/compiler/typelattice.jl	/^function issubconditional(a::Conditional, b::Conditional)$/;"	f
issubnormal	base/float.jl	/^function issubnormal(x::T) where {T<:IEEEFloat}$/;"	f
issubnormal_fast	base/fastmath.jl	/^issubnormal_fast(x) = false$/;"	f
issubset	base/abstractset.jl	/^function issubset(l, r)$/;"	f
issubset	base/bitset.jl	/^issubset(a::BitSet, b::BitSet) = a == intersect(a,b)$/;"	f
issubset	base/range.jl	/^issubset(r::AbstractUnitRange{<:Integer}, s::AbstractUnitRange{<:Integer}) =$/;"	f
issubset	base/range.jl	/^issubset(r::OneTo, s::OneTo) = r.stop <= s.stop$/;"	f
issubstate	base/compiler/typelattice.jl	/^issubstate(a::VarState, b::VarState) = (a.typ ⊑ b.typ && a.undef <= b.undef)$/;"	f
issubty	src/julia_internal.h	/^    int issubty;    \/\/ if `a <: b` is true in `intersect(a,b)`$/;"	m	struct:typemap_intersection_env	typeref:typename:int
issuccess	stdlib/LinearAlgebra/src/bunchkaufman.jl	/^issuccess(B::BunchKaufman) = B.info == 0$/;"	f
issuccess	stdlib/LinearAlgebra/src/cholesky.jl	/^issuccess(C::Cholesky) = C.info == 0$/;"	f
issuccess	stdlib/LinearAlgebra/src/lu.jl	/^issuccess(F::LU) = F.info == 0$/;"	f
issuccess	stdlib/SuiteSparse/src/cholmod.jl	/^function issuccess(F::Factor)$/;"	f
issue22582!	test/compiler/codegen.jl	/^function issue22582!(a::AbstractArray, b)$/;"	f
issue2403func	test/core.jl	/^issue2403func(f) = f(7)$/;"	f
issue7897!	test/core.jl	/^function issue7897!(data, arr)$/;"	f
issunday	stdlib/Dates/src/query.jl	/^issunday(dt::TimeType) = dayofweek(dt) == Sun$/;"	f
issupbuild	base/version.jl	/^issupbuild(v::VersionNumber) = length(v.build)==1 && isempty(v.build[1])$/;"	f
issymbol	src/flisp/flisp.h	/^#define issymbol(/;"	d
issymmetric	stdlib/LinearAlgebra/src/bitarray.jl	/^issymmetric(A::BitMatrix) = size(A, 1)==size(A, 2) && count(!iszero, A - copy(A'))==0$/;"	f
issymmetric	stdlib/LinearAlgebra/src/bunchkaufman.jl	/^issymmetric(B::BunchKaufman) = B.symmetric$/;"	f
issymmetric	stdlib/LinearAlgebra/src/diagonal.jl	/^issymmetric(D::Diagonal) = all(issymmetric, D.diag)$/;"	f
issymmetric	stdlib/LinearAlgebra/src/diagonal.jl	/^issymmetric(D::Diagonal{<:Number}) = true$/;"	f
issymmetric	stdlib/LinearAlgebra/src/generic.jl	/^function issymmetric(A::AbstractMatrix)$/;"	f
issymmetric	stdlib/LinearAlgebra/src/generic.jl	/^issymmetric(A::AbstractMatrix{<:Real}) = ishermitian(A)$/;"	f
issymmetric	stdlib/LinearAlgebra/src/generic.jl	/^issymmetric(x::Number) = x == x$/;"	f
issymmetric	stdlib/LinearAlgebra/src/symmetric.jl	/^issymmetric(A::Hermitian{<:Complex}) = isreal(A)$/;"	f
issymmetric	stdlib/LinearAlgebra/src/symmetric.jl	/^issymmetric(A::Hermitian{<:Real}) = true$/;"	f
issymmetric	stdlib/LinearAlgebra/src/symmetric.jl	/^issymmetric(A::Symmetric) = true$/;"	f
issymmetric	stdlib/LinearAlgebra/src/uniformscaling.jl	/^issymmetric(::UniformScaling) = true$/;"	f
issymmetric	stdlib/SparseArrays/src/sparsematrix.jl	/^issymmetric(A::AbstractSparseMatrixCSC) = is_hermsym(A, identity)$/;"	f
istag	stdlib/LibGit2/src/reference.jl	/^function istag(ref::GitReference)$/;"	f
istaskdone	base/task.jl	/^istaskdone(t::Task) = ((t.state == :done) | istaskfailed(t))$/;"	f
istaskfailed	base/task.jl	/^istaskfailed(t::Task) = (t.state == :failed)$/;"	f
istaskstarted	base/task.jl	/^istaskstarted(t::Task) = ccall(:jl_is_task_started, Cint, (Any,), t) != 0$/;"	f
istextmime	base/multimedia.jl	/^istextmime(m::AbstractString) = istextmime(MIME(m))$/;"	f
istextmime	base/multimedia.jl	/^istextmime(m::MIME) = startswith(string(m), "text\/")$/;"	f
isthanksgiving	stdlib/Dates/test/adjusters.jl	/^        isthanksgiving(dt) = Dates.dayofweek(dt) == Dates.Thu &&$/;"	f
isthursday	stdlib/Dates/src/query.jl	/^isthursday(dt::TimeType) = dayofweek(dt) == Thu$/;"	f
istopfunction	base/compiler/utilities.jl	/^function istopfunction(@nospecialize(f), name::Symbol)$/;"	f
istopmod	src/julia.h	/^    uint8_t istopmod;$/;"	m	struct:_jl_module_t	typeref:typename:uint8_t
istril	stdlib/LinearAlgebra/src/bidiag.jl	/^istril(M::Bidiagonal) = M.uplo == 'L' || iszero(M.ev)$/;"	f
istril	stdlib/LinearAlgebra/src/bitarray.jl	/^function istril(A::BitMatrix)$/;"	f
istril	stdlib/LinearAlgebra/src/diagonal.jl	/^istril(D::Diagonal) = true$/;"	f
istril	stdlib/LinearAlgebra/src/generic.jl	/^function istril(A::AbstractMatrix, k::Integer = 0)$/;"	f
istril	stdlib/LinearAlgebra/src/generic.jl	/^istril(x::Number) = true$/;"	f
istril	stdlib/LinearAlgebra/src/triangular.jl	/^istril(A::Adjoint) = istriu(A.parent)$/;"	f
istril	stdlib/LinearAlgebra/src/triangular.jl	/^istril(A::LowerTriangular) = true$/;"	f
istril	stdlib/LinearAlgebra/src/triangular.jl	/^istril(A::Transpose) = istriu(A.parent)$/;"	f
istril	stdlib/LinearAlgebra/src/triangular.jl	/^istril(A::UnitLowerTriangular) = true$/;"	f
istril	stdlib/LinearAlgebra/src/tridiag.jl	/^istril(M::SymTridiagonal) = iszero(M.ev)$/;"	f
istril	stdlib/LinearAlgebra/src/tridiag.jl	/^istril(M::Tridiagonal) = iszero(M.du)$/;"	f
istril	stdlib/LinearAlgebra/src/uniformscaling.jl	/^istril(::UniformScaling) = true$/;"	f
istril	stdlib/SparseArrays/src/sparsematrix.jl	/^function istril(A::AbstractSparseMatrixCSC)$/;"	f
istriu	stdlib/LinearAlgebra/src/bidiag.jl	/^istriu(M::Bidiagonal) = M.uplo == 'U' || iszero(M.ev)$/;"	f
istriu	stdlib/LinearAlgebra/src/bitarray.jl	/^function istriu(A::BitMatrix)$/;"	f
istriu	stdlib/LinearAlgebra/src/diagonal.jl	/^istriu(D::Diagonal) = true$/;"	f
istriu	stdlib/LinearAlgebra/src/generic.jl	/^function istriu(A::AbstractMatrix, k::Integer = 0)$/;"	f
istriu	stdlib/LinearAlgebra/src/generic.jl	/^istriu(x::Number) = true$/;"	f
istriu	stdlib/LinearAlgebra/src/triangular.jl	/^istriu(A::Adjoint) = istril(A.parent)$/;"	f
istriu	stdlib/LinearAlgebra/src/triangular.jl	/^istriu(A::Transpose) = istril(A.parent)$/;"	f
istriu	stdlib/LinearAlgebra/src/triangular.jl	/^istriu(A::UnitUpperTriangular) = true$/;"	f
istriu	stdlib/LinearAlgebra/src/triangular.jl	/^istriu(A::UpperTriangular) = true$/;"	f
istriu	stdlib/LinearAlgebra/src/tridiag.jl	/^istriu(M::SymTridiagonal) = iszero(M.ev)$/;"	f
istriu	stdlib/LinearAlgebra/src/tridiag.jl	/^istriu(M::Tridiagonal) = iszero(M.dl)$/;"	f
istriu	stdlib/LinearAlgebra/src/uniformscaling.jl	/^istriu(::UniformScaling) = true$/;"	f
istriu	stdlib/SparseArrays/src/sparsematrix.jl	/^function istriu(A::AbstractSparseMatrixCSC)$/;"	f
istuesday	stdlib/Dates/src/query.jl	/^istuesday(dt::TimeType) = dayofweek(dt) == Tue$/;"	f
isunaryoperator	base/show.jl	/^isunaryoperator(s::Symbol) = ccall(:jl_is_unary_operator, Cint, (Cstring,), s) != 0$/;"	f
isunix	base/sysinfo.jl	/^function isunix(os::Symbol)$/;"	f
isuppercase	base/strings/unicode.jl	/^function isuppercase(c::AbstractChar)$/;"	f
isutf	src/support/utf8.h	/^#define isutf(/;"	d
isva	src/julia.h	/^    uint8_t isva;$/;"	m	struct:_jl_method_t	typeref:typename:uint8_t
isvalid	base/regex.jl	/^isvalid(s::SubstitutionString, i::Integer) = isvalid(s.string, i)$/;"	f
isvalid	base/strings/basic.jl	/^@propagate_inbounds isvalid(s::AbstractString, i::Integer) = typeof(i) === Int ?$/;"	f
isvalid	base/strings/string.jl	/^isvalid(::Type{String}, s::Union{Vector{UInt8},String}) = byte_string_classify(s) ≠ 0$/;"	f
isvalid	base/strings/string.jl	/^isvalid(s::String) = isvalid(String, s)$/;"	f
isvalid	base/strings/string.jl	/^isvalid(s::String, i::Int) = checkbounds(Bool, s, i) && thisind(s, i) == i$/;"	f
isvalid	base/strings/substring.jl	/^function isvalid(s::SubString, i::Integer)$/;"	f
isvalid	base/strings/substring.jl	/^isvalid(::Type{String}, s::SubString{String}) = byte_string_classify(s) ≠ 0$/;"	f
isvalid	base/strings/substring.jl	/^isvalid(s::SubString{String}) = isvalid(String, s)$/;"	f
isvalid	base/strings/unicode.jl	/^isvalid(::Type{<:AbstractChar}, c::AbstractChar)     = isvalid(c)$/;"	f
isvalid	base/strings/unicode.jl	/^isvalid(::Type{<:AbstractChar}, c::Unsigned) = ((c ≤  0xd7ff ) | ( 0xe000  ≤ c) & (c ≤  0x/;"	f
isvalid	base/strings/unicode.jl	/^isvalid(::Type{T}, c::Integer) where {T<:AbstractChar}  = isvalid(T, Unsigned(c))$/;"	f
isvalid	base/strings/unicode.jl	/^isvalid(c::AbstractChar) = !ismalformed(c) & !isoverlong(c) & ((c ≤ '\\ud7ff') | ('\\ue000' ≤/;"	f
isvalid	stdlib/SuiteSparse/src/cholmod.jl	/^isvalid(A::Dense) = check_dense(A)$/;"	f
isvalid	stdlib/SuiteSparse/src/cholmod.jl	/^isvalid(A::Factor) = check_factor(A)$/;"	f
isvalid	stdlib/SuiteSparse/src/cholmod.jl	/^isvalid(A::Sparse) = check_sparse(A)$/;"	f
isvalid_cache_header	base/loading.jl	/^isvalid_cache_header(f::IOStream) = (0 != ccall(:jl_read_verify_header, Cint, (Ptr{Cvoid},), f.i/;"	f
isvalid_file_crc	base/loading.jl	/^isvalid_file_crc(f::IOStream) = (_crc32c(seekstart(f), filesize(f) - 4) == read(f, UInt32))$/;"	f
isvalid_unsafe	stdlib/Random/src/generation.jl	/^isvalid_unsafe(s::AbstractString, i) = isvalid(s, i)$/;"	f
isvalid_unsafe	stdlib/Random/src/generation.jl	/^isvalid_unsafe(s::String, i) = !Base.is_valid_continuation(GC.@preserve s unsafe_load(pointer(s)/;"	f
isvarargtype	base/essentials.jl	/^function isvarargtype(@nospecialize(t))$/;"	f
isvatuple	base/essentials.jl	/^function isvatuple(@nospecialize(t))$/;"	f
isvector	src/flisp/flisp.h	/^#define isvector(/;"	d
isveteransday	stdlib/Dates/test/adjusters.jl	/^        isveteransday(dt) = Dates.yearmonthday(dt) == veteransday(Dates.year(dt))$/;"	f
isvisible	base/show.jl	/^function isvisible(sym::Symbol, parent::Module, from::Module)$/;"	f
iswednesday	stdlib/Dates/src/query.jl	/^iswednesday(dt::TimeType) = dayofweek(dt) == Wed$/;"	f
iswindows	base/sysinfo.jl	/^iswindows(os::Symbol) = (os === :Windows || os === :NT)$/;"	f
isword	base/shell.jl	/^        function isword(c::AbstractChar)$/;"	f
iswritable	base/coreio.jl	/^iswritable(::DevNull) = true$/;"	f
iswritable	base/io.jl	/^function iswritable end$/;"	f
iswritable	base/io.jl	/^iswritable(io::AbstractPipe) = iswritable(pipe_writer(io))$/;"	f
iswritable	base/iobuffer.jl	/^iswritable(io::GenericIOBuffer) = io.writable$/;"	f
iswritable	base/iostream.jl	/^iswritable(s::IOStream) = ccall(:ios_get_writable, Cint, (Ptr{Cvoid},), s.ios)!=0$/;"	f
iswritable	base/stream.jl	/^function iswritable(io::LibuvStream)$/;"	f
iswritable	base/stream.jl	/^iswritable(s::BufferStream) = s.buffer.writable$/;"	f
iswritable	stdlib/FileWatching/src/FileWatching.jl	/^iswritable(f::FDEvent) = f.writable$/;"	f
iswritable	stdlib/Sockets/src/Sockets.jl	/^iswritable(io::TCPSocket) = isopen(io) && io.status != StatusClosing$/;"	f
iswrsparse	stdlib/SparseArrays/src/sparseconvert.jl	/^iswrsparse(::Type) = false$/;"	f
isxdigit	base/strings/unicode.jl	/^isxdigit(c::AbstractChar) = '0'<=c<='9' || 'a'<=c<='f' || 'A'<=c<='F'$/;"	f
isz	test/llvmpasses/alloc-opt.jl	/^isz = sizeof(UInt) == 8 ? "i64" : "i32"$/;"	v
isz	test/llvmpasses/alloc-opt2.jl	/^isz = sizeof(UInt) == 8 ? "i64" : "i32"$/;"	v
iszero	base/abstractarraymath.jl	/^iszero(x::AbstractArray) = all(iszero,x)$/;"	f
iszero	base/bool.jl	/^iszero(x::Bool) = !x$/;"	f
iszero	base/complex.jl	/^iszero(z::Complex) = iszero(real(z)) & iszero(imag(z))$/;"	f
iszero	base/gmp.jl	/^iszero(x::BigInt) = x.size == 0$/;"	f
iszero	base/irrationals.jl	/^iszero(::AbstractIrrational) = false$/;"	f
iszero	base/mpfr.jl	/^iszero(x::BigFloat) = x == Clong(0)$/;"	f
iszero	base/number.jl	/^iszero(x) = x == zero(x) # fallback method$/;"	f
iszero	base/rational.jl	/^iszero(x::Rational) = iszero(numerator(x))$/;"	f
iszero	stdlib/LibGit2/src/oid.jl	/^function iszero(id::GitHash)$/;"	f
iszero	stdlib/LinearAlgebra/src/bidiag.jl	/^iszero(M::Bidiagonal) = iszero(M.dv) && iszero(M.ev)$/;"	f
iszero	stdlib/LinearAlgebra/src/diagonal.jl	/^iszero(D::Diagonal) = all(iszero, D.diag)$/;"	f
iszero	stdlib/LinearAlgebra/src/tridiag.jl	/^iszero(M::SymTridiagonal) = iszero(M.ev) && iszero(M.dv)$/;"	f
iszero	stdlib/LinearAlgebra/src/tridiag.jl	/^iszero(M::Tridiagonal) = iszero(M.dl) && iszero(M.d) && iszero(M.du)$/;"	f
italic	stdlib/REPL/src/latex_symbols.jl	/^const italic = "\\\\it"$/;"	v
italicblackboard	stdlib/REPL/src/latex_symbols.jl	/^const italicblackboard = "\\\\bbi"$/;"	v
italicsans	stdlib/REPL/src/latex_symbols.jl	/^const italicsans = "\\\\isans"$/;"	v
items	src/support/arraylist.h	/^    void **items;$/;"	m	struct:__anon1f859bb90108	typeref:typename:void **
iter	test/syntax.jl	/^macro iter()$/;"	f
iter31113	test/simdloop.jl	/^struct iter31113{T}$/;"	f
iterate	base/abstractarray.jl	/^function iterate(A::AbstractArray, state=(eachindex(A),))$/;"	f
iterate	base/abstractdict.jl	/^function iterate(d::IdDict{K,V}, idx=0) where {K, V}$/;"	f
iterate	base/abstractdict.jl	/^function iterate(s::IdSet, state...)$/;"	f
iterate	base/abstractdict.jl	/^function iterate(v::Union{KeySet,ValueIterator}, state...)$/;"	f
iterate	base/array.jl	/^iterate(A::Array, i=1) = (@_inline_meta; (i % UInt) - 1 < length(A) ? (@inbounds A[i], i + 1) : /;"	f
iterate	base/asyncmap.jl	/^function iterate(itr::AsyncCollector)$/;"	f
iterate	base/asyncmap.jl	/^function iterate(itr::AsyncCollector, state::AsyncCollectorState)$/;"	f
iterate	base/asyncmap.jl	/^function iterate(itr::AsyncGenerator, state::AsyncGeneratorState=AsyncGeneratorState(0))$/;"	f
iterate	base/bitarray.jl	/^function iterate(B::BitArray, i::Int=0)$/;"	f
iterate	base/bitset.jl	/^function iterate(s::BitSet, idx=0)$/;"	f
iterate	base/channels.jl	/^function iterate(c::Channel, state=nothing)$/;"	f
iterate	base/char.jl	/^iterate(c::AbstractChar, done=false) = done ? nothing : (c, true)$/;"	f
iterate	base/compiler/ssair/domtree.jl	/^function iterate(doms::DominatedBlocks, state::Nothing=nothing)$/;"	f
iterate	base/compiler/ssair/inlining.jl	/^function iterate(s::SimpleCartesian, state::Vector{Int}=Int[1 for _ in 1:length(s.ranges)])$/;"	f
iterate	base/compiler/ssair/inlining.jl	/^function iterate(split::UnionSplitSignature, state::Vector{Int}...)$/;"	f
iterate	base/compiler/ssair/ir.jl	/^@noinline function iterate(it::UseRefIterator, ::Nothing)$/;"	f
iterate	base/compiler/ssair/ir.jl	/^function iterate(compact::IncrementalCompact, (idx, active_bb)::Tuple{Int, Int}=(compact.idx, 1)/;"	f
iterate	base/compiler/ssair/ir.jl	/^function iterate(it::CompactPeekIterator, (idx, aidx, bidx)::NTuple{3, Int}=(it.start_idx,it.com/;"	f
iterate	base/compiler/ssair/ir.jl	/^function iterate(x::BBIdxIter, (idx, bb)::Tuple{Int, Int}=(1, 1))$/;"	f
iterate	base/compiler/ssair/ir.jl	/^iterate(it::UseRefIterator) = (it.use[1].op = 0; iterate(it, nothing))$/;"	f
iterate	base/compiler/ssair/ir.jl	/^iterate(r::StmtRange, state=0) = (last(r) - first(r) < state) ? nothing : (first(r) + state, sta/;"	f
iterate	base/dict.jl	/^@propagate_inbounds function iterate(t::Dict)$/;"	f
iterate	base/dict.jl	/^@propagate_inbounds iterate(t::Dict, i) = _iterate(t, skip_deleted(t, i))$/;"	f
iterate	base/dict.jl	/^function iterate(d::ImmutableDict{K,V}, t=d) where {K, V}$/;"	f
iterate	base/env.jl	/^    function iterate(::EnvDict, i=0)$/;"	f
iterate	base/env.jl	/^    function iterate(hash::EnvDict, block::Tuple{Ptr{UInt16},Ptr{UInt16}} = GESW())$/;"	f
iterate	base/error.jl	/^function iterate(ebo::ExponentialBackOff, state= (ebo.n, min(ebo.first_delay, ebo.max_delay)))$/;"	f
iterate	base/essentials.jl	/^function iterate end$/;"	f
iterate	base/essentials.jl	/^iterate(v::SimpleVector, i=1) = (length(v) < i ? nothing : (v[i], i + 1))$/;"	f
iterate	base/generator.jl	/^function iterate(g::Generator, s...)$/;"	f
iterate	base/indices.jl	/^iterate(S::IdentityUnitRange, s...) = iterate(S.indices, s...)$/;"	f
iterate	base/indices.jl	/^iterate(S::Slice, s...) = iterate(S.indices, s...)$/;"	f
iterate	base/indices.jl	/^iterate(iter::LinearIndices, i=1) = i > length(iter) ? nothing : (i, i+1)$/;"	f
iterate	base/indices.jl	/^iterate(iter::LinearIndices{1}, s...) = iterate(axes1(iter.indices[1]), s...)$/;"	f
iterate	base/io.jl	/^function iterate(itr::EachLine, state=nothing)$/;"	f
iterate	base/iterators.jl	/^@inline function iterate(P::ProductIterator)$/;"	f
iterate	base/iterators.jl	/^@inline function iterate(P::ProductIterator, states)$/;"	f
iterate	base/iterators.jl	/^@inline function iterate(r::Reverse{<:Enumerate})$/;"	f
iterate	base/iterators.jl	/^@inline function iterate(r::Reverse{<:Enumerate}, state)$/;"	f
iterate	base/iterators.jl	/^@inline iterate(s::Stateful, state=nothing) = s.nextvalstate === nothing ? nothing : (popfirst!(/;"	f
iterate	base/iterators.jl	/^@propagate_inbounds function iterate(A::Reverse{<:AbstractArray}, state=(reverse(eachindex(A.itr/;"	f
iterate	base/iterators.jl	/^@propagate_inbounds function iterate(e::Enumerate, state=(1,))$/;"	f
iterate	base/iterators.jl	/^@propagate_inbounds function iterate(f::Flatten, state=())$/;"	f
iterate	base/iterators.jl	/^@propagate_inbounds function iterate(it::Take, state=(it.n,))$/;"	f
iterate	base/iterators.jl	/^@propagate_inbounds function iterate(v::Pairs{K, V}, state...) where {K, V}$/;"	f
iterate	base/iterators.jl	/^@propagate_inbounds iterate(i::Rest, st=i.st) = iterate(i.itr, st)$/;"	f
iterate	base/iterators.jl	/^@propagate_inbounds iterate(z::Zip) = _zip_iterate_all(z.is, map(_ -> (), z.is))$/;"	f
iterate	base/iterators.jl	/^@propagate_inbounds iterate(z::Zip, ss) = _zip_iterate_all(z.is, map(tuple, ss))$/;"	f
iterate	base/iterators.jl	/^function iterate(f::Filter, state...)$/;"	f
iterate	base/iterators.jl	/^function iterate(it::Cycle, state)$/;"	f
iterate	base/iterators.jl	/^function iterate(it::Drop)$/;"	f
iterate	base/iterators.jl	/^function iterate(itr::PartitionIterator, state...)$/;"	f
iterate	base/iterators.jl	/^function iterate(itr::PartitionIterator{<:Vector}, state=1)$/;"	f
iterate	base/iterators.jl	/^iterate(::ProductIterator{Tuple{}}) = (), true$/;"	f
iterate	base/iterators.jl	/^iterate(::ProductIterator{Tuple{}}, state) = nothing$/;"	f
iterate	base/iterators.jl	/^iterate(it::Count, state=it.start) = (state, state + it.step)$/;"	f
iterate	base/iterators.jl	/^iterate(it::Cycle) = iterate(it.xs)$/;"	f
iterate	base/iterators.jl	/^iterate(it::Drop, state) = iterate(it.xs, state)$/;"	f
iterate	base/iterators.jl	/^iterate(it::Repeated, state...) = (it.x, nothing)$/;"	f
iterate	base/iterators.jl	/^iterate(r::Reverse{<:Tuple}, i::Int = length(r.itr)) = i < 1 ? nothing : (r.itr[i], i-1)$/;"	f
iterate	base/linked_list.jl	/^iterate(q::InvasiveLinkedList) = (h = q.head; h === nothing ? nothing : (h, h))$/;"	f
iterate	base/linked_list.jl	/^iterate(q::InvasiveLinkedList{LLT}, v::LLT) where {LLT<:LinkedListItem} = (h = v.next; h === not/;"	f
iterate	base/linked_list.jl	/^iterate(q::InvasiveLinkedList{T}, v::T) where {T} = (h = v.next; h === nothing ? nothing : (h, h/;"	f
iterate	base/linked_list.jl	/^iterate(q::LinkedList) = (h = q.head; h === nothing ? nothing : (h.value, h))$/;"	f
iterate	base/missing.jl	/^function iterate(itr::SkipMissing, state...)$/;"	f
iterate	base/multidimensional.jl	/^    @inline function iterate(iter::CartesianIndices)$/;"	f
iterate	base/multidimensional.jl	/^    @inline function iterate(iter::CartesianIndices, state)$/;"	f
iterate	base/multidimensional.jl	/^    @inline function iterate(r::Reverse{<:CartesianIndices})$/;"	f
iterate	base/multidimensional.jl	/^    @inline function iterate(r::Reverse{<:CartesianIndices}, state)$/;"	f
iterate	base/multidimensional.jl	/^    iterate(iter::CartesianIndices{0}, done=false) = done ? nothing : (CartesianIndex(), true)$/;"	f
iterate	base/multidimensional.jl	/^    iterate(iter::Reverse{<:CartesianIndices{0}}, state=false) = state ? nothing : (CartesianInd/;"	f
iterate	base/multidimensional.jl	/^@inline function iterate(L::Base.LogicalIndex{Int,<:BitArray})$/;"	f
iterate	base/multidimensional.jl	/^@inline function iterate(L::Base.LogicalIndex{Int,<:BitArray}, s)$/;"	f
iterate	base/multidimensional.jl	/^@inline function iterate(L::LogicalIndex{<:CartesianIndex})$/;"	f
iterate	base/multidimensional.jl	/^@inline function iterate(L::LogicalIndex{Int})$/;"	f
iterate	base/multidimensional.jl	/^@propagate_inbounds function iterate(L::LogicalIndex, s)$/;"	f
iterate	base/namedtuple.jl	/^iterate(t::NamedTuple, iter=1) = iter > nfields(t) ? nothing : (getfield(t, iter), iter + 1)$/;"	f
iterate	base/number.jl	/^iterate(x::Number) = (x, nothing)$/;"	f
iterate	base/number.jl	/^iterate(x::Number, ::Any) = nothing$/;"	f
iterate	base/pair.jl	/^iterate(p::Pair, i=1) = i > 2 ? nothing : (getfield(p, i), i + 1)$/;"	f
iterate	base/range.jl	/^function iterate(r::OrdinalRange{T}, i) where {T}$/;"	f
iterate	base/range.jl	/^function iterate(r::Union{LinRange,StepRangeLen}, i::Int=1)$/;"	f
iterate	base/range.jl	/^iterate(r::OrdinalRange) = isempty(r) ? nothing : (first(r), first(r))$/;"	f
iterate	base/reflection.jl	/^iterate(m::MethodList, s...) = iterate(m.ms, s...)$/;"	f
iterate	base/refpointer.jl	/^iterate(r::Ref) = (r[], nothing)$/;"	f
iterate	base/refpointer.jl	/^iterate(r::Ref, s) = nothing$/;"	f
iterate	base/regex.jl	/^function iterate(itr::RegexMatchIterator, (offset,prevempty)=(1,false))$/;"	f
iterate	base/regex.jl	/^iterate(s::SubstitutionString, i::Integer...) = iterate(s.string, i...)$/;"	f
iterate	base/reinterpretarray.jl	/^function iterate(cp::CyclePadding)$/;"	f
iterate	base/reinterpretarray.jl	/^function iterate(cp::CyclePadding, state::Tuple)$/;"	f
iterate	base/reshapedarray.jl	/^@inline function iterate(R::ReshapedArrayIterator, i...)$/;"	f
iterate	base/set.jl	/^iterate(s::Set, i...)       = iterate(KeySet(s.dict), i...)$/;"	f
iterate	base/strings/basic.jl	/^@propagate_inbounds iterate(s::AbstractString, i::Integer) = typeof(i) === Int ?$/;"	f
iterate	base/strings/basic.jl	/^iterate(e::EachStringIndex, state=firstindex(e.s)) = state > ncodeunits(e.s) ? nothing : (state,/;"	f
iterate	base/strings/basic.jl	/^iterate(r::Iterators.Reverse{<:AbstractString}, i=lastindex(r.itr)) = i < firstindex(r.itr) ? no/;"	f
iterate	base/strings/basic.jl	/^iterate(r::Iterators.Reverse{<:EachStringIndex}, i=lastindex(r.itr.s)) = i < firstindex(r.itr.s)/;"	f
iterate	base/strings/basic.jl	/^iterate(s::CodeUnits, i=1) = (@_propagate_inbounds_meta; i == length(s)+1 ? nothing : (s[i], i+1/;"	f
iterate	base/strings/string.jl	/^@propagate_inbounds function iterate(s::String, i::Int=firstindex(s))$/;"	f
iterate	base/strings/substring.jl	/^function iterate(s::SubString, i::Integer=firstindex(s))$/;"	f
iterate	base/strings/unicode.jl	/^function iterate(g::GraphemeIterator, i_=(Int32(0),firstindex(g.s)))$/;"	f
iterate	base/task.jl	/^iterate(c::CompositeException, state...) = iterate(c.exceptions, state...)$/;"	f
iterate	base/tuple.jl	/^function iterate(@nospecialize(t::Tuple), i::Int=1)$/;"	f
iterate	base/weakkeydict.jl	/^function iterate(t::WeakKeyDict{K,V}) where V where K$/;"	f
iterate	base/weakkeydict.jl	/^function iterate(t::WeakKeyDict{K,V}, state) where V where K$/;"	f
iterate_continued	base/strings/string.jl	/^function iterate_continued(s::String, i::Int, u::UInt32)$/;"	f
iteration	test/llvmpasses/loopinfo.jl	/^@noinline iteration(i) = (@show(i); return nothing)$/;"	f
ith_all	base/abstractarray.jl	/^@inline ith_all(i, ::Tuple{}) = ()$/;"	f
ith_all	base/abstractarray.jl	/^function ith_all(i, as)$/;"	f
ithchunk	base/broadcast.jl	/^Base.@propagate_inbounds ithchunk(i, b::UInt64, args...) = (b, ithchunk(i, args...)...)$/;"	f
ithchunk	base/broadcast.jl	/^Base.@propagate_inbounds ithchunk(i, c::Vector{UInt64}, args...) = (c[i], ithchunk(i, args...)../;"	f
ithchunk	base/broadcast.jl	/^ithchunk(i) = ()$/;"	f
itr	src/gc.h	/^    size_t itr;        \/\/ Iterator into exception stack$/;"	m	struct:__anoncf30557c0b08	typeref:typename:size_t
itself	base/compiler/ssair/passes.jl	/^    struct itself is live (or even allocated) at a ccall site. If there are no other places$/;"	f
itsprof	src/signals-unix.c	/^static struct itimerspec itsprof;$/;"	v	typeref:struct:itimerspec	file:
ityp	stdlib/SuiteSparse/src/cholmod_h.jl	/^ityp(::Type{SuiteSparse_long}) = LONG$/;"	f
ivybridge	src/processor_x86.cpp	/^constexpr auto ivybridge = sandybridge | get_feature_masks(rdrnd, f16c, fsgsbase);$/;"	v	namespace:X86::Feature	typeref:typename:auto
ix86	stdlib/InteractiveUtils/test/runtests.jl	/^ix86 = r"i[356]86"$/;"	v
j	src/subtype.c	/^    size_t i, j;$/;"	m	struct:subtype_tuple_env	typeref:typename:size_t	file:
j	test/core.jl	/^    j(j) = j$/;"	f
j11840	test/core.jl	/^j11840(::DataType) = '1'$/;"	f
j11840	test/core.jl	/^j11840(::Union{Type{T}, T}) where {T} = '2' # force cache to contain leaftypes$/;"	f
j15283	test/core.jl	/^j15283 = 0$/;"	v
j30385	test/compiler/inference.jl	/^j30385(T, y) = k30385(f30385(T, y))$/;"	f
jint	src/ccalltest.c	/^#define jint /;"	d	file:
jit	src/jitlayers.h	/^        JuliaOJIT &jit;$/;"	m	struct:JuliaOJIT::CompilerT	typeref:typename:JuliaOJIT &
jit_compile	base/pcre.jl	/^function jit_compile(regex::Ptr{Cvoid})$/;"	f
jit_targets	src/processor_arm.cpp	/^static std::vector<TargetData<feature_sz>> jit_targets;$/;"	v	namespace:ARM	typeref:typename:std::vector<TargetData<feature_sz>>	file:
jit_targets	src/processor_fallback.cpp	/^static std::vector<TargetData<1>> jit_targets;$/;"	v	namespace:Fallback	typeref:typename:std::vector<TargetData<1>>	file:
jit_targets	src/processor_x86.cpp	/^static std::vector<TargetData<feature_sz>> jit_targets;$/;"	v	namespace:X86	typeref:typename:std::vector<TargetData<feature_sz>>	file:
jl-expand-macroscope	src/jlfrontend.scm	/^(define (jl-expand-macroscope expr)$/;"	f
jl-expand-to-thunk	src/jlfrontend.scm	/^(define (jl-expand-to-thunk expr file line)$/;"	f
jl-expand-to-thunk-stmt	src/jlfrontend.scm	/^(define (jl-expand-to-thunk-stmt expr file line)$/;"	f
jl-parse-all	src/jlfrontend.scm	/^(define (jl-parse-all str filename)$/;"	f
jl-parse-file	src/jlfrontend.scm	/^(define (jl-parse-file filename)$/;"	f
jl-parse-one	src/jlfrontend.scm	/^(define (jl-parse-one s pos0 greedy)$/;"	f
jlRTLD_DEFAULT_var	src/codegen.cpp	/^static GlobalVariable *jlRTLD_DEFAULT_var;$/;"	v	typeref:typename:GlobalVariable *	file:
jl_	src/rtutils.c	/^JL_DLLEXPORT void jl_(void *jl_value) JL_NOTSAFEPOINT$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_DI_for_fptr	src/debuginfo.cpp	/^int jl_DI_for_fptr(uint64_t fptr, uint64_t *symsize, int64_t *slide, int64_t *section_slide,$/;"	f	typeref:typename:int
jl_EnumerateLoadedModulesProc64	src/sys.c	/^static BOOL CALLBACK jl_EnumerateLoadedModulesProc64($/;"	f	typeref:typename:BOOL CALLBACK	file:
jl_ExecutionEngine	src/jitlayers.cpp	/^JuliaOJIT *jl_ExecutionEngine;$/;"	v	typeref:typename:JuliaOJIT *
jl_LLVMContext	src/codegen.cpp	/^JL_DLLEXPORT LLVMContext &jl_LLVMContext = *(new LLVMContext());$/;"	v	typeref:typename:JL_DLLEXPORT LLVMContext &
jl_LLVMCreateDisasm	src/disasm.cpp	/^LLVMDisasmContextRef jl_LLVMCreateDisasm($/;"	f	typeref:typename:JL_DLLEXPORT LLVMDisasmContextRef
jl_LLVMDisasmInstruction	src/disasm.cpp	/^JL_DLLEXPORT size_t jl_LLVMDisasmInstruction($/;"	f	typeref:typename:JL_DLLEXPORT JL_DLLEXPORT size_t
jl_LLVMFlipSign	src/APInt-C.cpp	/^void jl_LLVMFlipSign(unsigned numbits, integerPart *pa, integerPart *pb, integerPart *pr) {$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_LLVMSMod	src/APInt-C.cpp	/^void jl_LLVMSMod(unsigned numbits, integerPart *pa, integerPart *pb, integerPart *pr) {$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_Module	src/codegen.cpp	/^#define jl_Module /;"	d	file:
jl_RTLD_DEFAULT_handle	src/init.c	/^void *jl_RTLD_DEFAULT_handle;$/;"	v	typeref:typename:void *
jl_SC_CLK_TCK	src/sys.c	/^JL_DLLEXPORT long jl_SC_CLK_TCK(void)$/;"	f	typeref:typename:JL_DLLEXPORT long
jl_TargetMachine	src/codegen.cpp	/^TargetMachine *jl_TargetMachine;$/;"	v	typeref:typename:TargetMachine *
jl_abstractarray_type	src/jltypes.c	/^jl_unionall_t *jl_abstractarray_type;$/;"	v	typeref:typename:jl_unionall_t *
jl_abstractslot_type	src/jltypes.c	/^jl_datatype_t *jl_abstractslot_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_abstractstring_type	src/jltypes.c	/^jl_datatype_t *jl_abstractstring_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_add_code_in_flight	src/debuginfo.cpp	/^void jl_add_code_in_flight(StringRef name, jl_code_instance_t *codeinst, const DataLayout &DL)$/;"	f	typeref:typename:void
jl_add_method_root	src/codegen.cpp	/^static void jl_add_method_root(jl_codectx_t &ctx, jl_value_t *val)$/;"	f	typeref:typename:void	file:
jl_add_optimization_passes	src/jitlayers.cpp	/^void jl_add_optimization_passes(LLVMPassManagerRef PM, int opt_level, int lower_intrinsics) {$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_add_standard_imports	src/toplevel.c	/^JL_DLLEXPORT void jl_add_standard_imports(jl_module_t *m)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_add_tls_size	src/threading.c	/^static inline size_t jl_add_tls_size(size_t orig_size, size_t size, size_t align)$/;"	f	typeref:typename:size_t	file:
jl_add_to_ee	src/jitlayers.cpp	/^static void jl_add_to_ee(std::unique_ptr<Module> m)$/;"	f	typeref:typename:void	file:
jl_add_to_shadow	src/jitlayers.cpp	/^void jl_add_to_shadow(Module *m)$/;"	f	typeref:typename:void
jl_addr_is_safepoint	src/julia_internal.h	/^STATIC_INLINE int jl_addr_is_safepoint(uintptr_t addr)$/;"	f	typeref:typename:STATIC_INLINE int
jl_alignment	src/threading.c	/^JL_DLLEXPORT int jl_alignment(size_t sz)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_alloc_array_1d	src/array.c	/^JL_DLLEXPORT jl_array_t *jl_alloc_array_1d(jl_value_t *atype, size_t nr)$/;"	f	typeref:typename:JL_DLLEXPORT jl_array_t *
jl_alloc_array_2d	src/array.c	/^JL_DLLEXPORT jl_array_t *jl_alloc_array_2d(jl_value_t *atype, size_t nr,$/;"	f	typeref:typename:JL_DLLEXPORT jl_array_t *
jl_alloc_array_3d	src/array.c	/^JL_DLLEXPORT jl_array_t *jl_alloc_array_3d(jl_value_t *atype, size_t nr,$/;"	f	typeref:typename:JL_DLLEXPORT jl_array_t *
jl_alloc_fiber	src/task.c	/^static char *jl_alloc_fiber(jl_ucontext_t *t, size_t *ssize, jl_task_t *owner) JL_NOTSAFEPOINT$/;"	f	typeref:typename:char *	file:
jl_alloc_fiber	src/task.c	/^static char *jl_alloc_fiber(jl_ucontext_t *t, size_t *ssize, jl_task_t *owner)$/;"	f	typeref:typename:char *	file:
jl_alloc_fiber	src/task.c	/^static char *jl_alloc_fiber(unw_context_t *t, size_t *ssize, jl_task_t *owner)$/;"	f	typeref:typename:char *	file:
jl_alloc_int_1d	src/typemap.c	/^static jl_array_t *jl_alloc_int_1d(size_t np, size_t len)$/;"	f	typeref:typename:jl_array_t *	file:
jl_alloc_num_t	src/gc.h	/^} jl_alloc_num_t;$/;"	t	typeref:struct:__anoncf30557c0108
jl_alloc_obj_func	src/codegen.cpp	/^static Function *jl_alloc_obj_func;$/;"	v	typeref:typename:Function *	file:
jl_alloc_string	src/array.c	/^JL_DLLEXPORT jl_value_t *jl_alloc_string(size_t len)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_alloc_svec	src/simplevector.c	/^JL_DLLEXPORT jl_svec_t *jl_alloc_svec(size_t n)$/;"	f	typeref:typename:JL_DLLEXPORT jl_svec_t *
jl_alloc_svec_uninit	src/simplevector.c	/^JL_DLLEXPORT jl_svec_t *jl_alloc_svec_uninit(size_t n)$/;"	f	typeref:typename:JL_DLLEXPORT jl_svec_t *
jl_alloc_vec_any	src/array.c	/^JL_DLLEXPORT jl_array_t *jl_alloc_vec_any(size_t n)$/;"	f	typeref:typename:JL_DLLEXPORT jl_array_t *
jl_allocate_singleton_instance	src/datatype.c	/^STATIC_INLINE void jl_allocate_singleton_instance(jl_datatype_t *st)$/;"	f	typeref:typename:STATIC_INLINE void
jl_an_empty_string	src/jltypes.c	/^jl_value_t *jl_an_empty_string;$/;"	v	typeref:typename:jl_value_t *
jl_an_empty_vec_any	src/jltypes.c	/^jl_value_t *jl_an_empty_vec_any;$/;"	v	typeref:typename:jl_value_t *
jl_any_type	src/jltypes.c	/^jl_datatype_t *jl_any_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_anytuple_type	src/jltypes.c	/^jl_datatype_t *jl_anytuple_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_anytuple_type_type	src/jltypes.c	/^jl_unionall_t *jl_anytuple_type_type;$/;"	v	typeref:typename:jl_unionall_t *
jl_apply	src/julia.h	/^jl_value_t *jl_apply(jl_value_t **args, uint32_t nargs)$/;"	f	typeref:typename:STATIC_INLINE jl_value_t *
jl_apply_array_type	src/array.c	/^JL_DLLEXPORT jl_value_t *jl_apply_array_type(jl_value_t *type, size_t dim)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_apply_generic	src/gf.c	/^JL_DLLEXPORT jl_value_t *jl_apply_generic(jl_value_t *F, jl_value_t **args, uint32_t nargs)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_apply_tuple_type	src/jltypes.c	/^JL_DLLEXPORT jl_tupletype_t *jl_apply_tuple_type(jl_svec_t *params)$/;"	f	typeref:typename:JL_DLLEXPORT jl_tupletype_t *
jl_apply_tuple_type_v	src/jltypes.c	/^JL_DLLEXPORT jl_tupletype_t *jl_apply_tuple_type_v(jl_value_t **p, size_t np)$/;"	f	typeref:typename:JL_DLLEXPORT jl_tupletype_t *
jl_apply_tuple_type_v_	src/jltypes.c	/^static jl_tupletype_t *jl_apply_tuple_type_v_(jl_value_t **p, size_t np, jl_svec_t *params)$/;"	f	typeref:typename:jl_tupletype_t *	file:
jl_apply_type	src/jltypes.c	/^jl_value_t *jl_apply_type(jl_value_t *tc, jl_value_t **params, size_t n)$/;"	f	typeref:typename:jl_value_t *
jl_apply_type1	src/jltypes.c	/^JL_DLLEXPORT jl_value_t *jl_apply_type1(jl_value_t *tc, jl_value_t *p1)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_apply_type2	src/jltypes.c	/^JL_DLLEXPORT jl_value_t *jl_apply_type2(jl_value_t *tc, jl_value_t *p1, jl_value_t *p2)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_argtype_with_function	src/gf.c	/^jl_value_t *jl_argtype_with_function(jl_function_t *f, jl_value_t *types0)$/;"	f	typeref:typename:jl_value_t *
jl_argument_datatype	src/rtutils.c	/^JL_DLLEXPORT jl_value_t *jl_argument_datatype(jl_value_t *argt JL_PROPAGATES_ROOT) JL_NOTSAFEPOI/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_argument_method_table	src/method.c	/^JL_DLLEXPORT jl_methtable_t *jl_argument_method_table(jl_value_t *argt JL_PROPAGATES_ROOT) JL_NO/;"	f	typeref:typename:JL_DLLEXPORT jl_methtable_t *
jl_argumenterror_type	src/jltypes.c	/^jl_datatype_t *jl_argumenterror_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_arr_xtralloc_limit	src/array.c	/^size_t jl_arr_xtralloc_limit = 0;$/;"	v	typeref:typename:size_t
jl_array_any_type	src/jltypes.c	/^jl_value_t *jl_array_any_type;$/;"	v	typeref:typename:jl_value_t *
jl_array_cconvert_cstring	src/array.c	/^JL_DLLEXPORT jl_array_t *jl_array_cconvert_cstring(jl_array_t *a)$/;"	f	typeref:typename:JL_DLLEXPORT jl_array_t *
jl_array_copy	src/array.c	/^JL_DLLEXPORT jl_array_t *jl_array_copy(jl_array_t *ary)$/;"	f	typeref:typename:JL_DLLEXPORT jl_array_t *
jl_array_data	src/julia.h	/^#define jl_array_data(/;"	d
jl_array_data_owner	src/julia.h	/^#define jl_array_data_owner(/;"	d
jl_array_data_owner	src/julia_internal.h	/^JL_DLLEXPORT jl_value_t *(jl_array_data_owner)(jl_array_t *a);$/;"	v	typeref:typename:JL_DLLEXPORT jl_value_t * ()(jl_array_t * a)
jl_array_data_owner_offset	src/julia.h	/^#define jl_array_data_owner_offset(/;"	d
jl_array_del_at	src/array.c	/^JL_DLLEXPORT void jl_array_del_at(jl_array_t *a, ssize_t idx, size_t dec)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_array_del_at_beg	src/array.c	/^STATIC_INLINE void jl_array_del_at_beg(jl_array_t *a, size_t idx, size_t dec,$/;"	f	typeref:typename:STATIC_INLINE void
jl_array_del_at_end	src/array.c	/^STATIC_INLINE void jl_array_del_at_end(jl_array_t *a, size_t idx, size_t dec,$/;"	f	typeref:typename:STATIC_INLINE void
jl_array_del_beg	src/array.c	/^JL_DLLEXPORT void jl_array_del_beg(jl_array_t *a, size_t dec)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_array_del_end	src/array.c	/^JL_DLLEXPORT void jl_array_del_end(jl_array_t *a, size_t dec)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_array_dim	src/julia.h	/^#define jl_array_dim(/;"	d
jl_array_dim0	src/julia.h	/^#define jl_array_dim0(/;"	d
jl_array_eltype	src/jlapi.c	/^JL_DLLEXPORT void *jl_array_eltype(jl_value_t *a)$/;"	f	typeref:typename:JL_DLLEXPORT void *
jl_array_flags_t	src/julia.h	/^} jl_array_flags_t;$/;"	t	typeref:struct:__anon055fe4270308
jl_array_grow_at	src/array.c	/^JL_DLLEXPORT void jl_array_grow_at(jl_array_t *a, ssize_t idx, size_t inc)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_array_grow_at_beg	src/array.c	/^STATIC_INLINE void jl_array_grow_at_beg(jl_array_t *a, size_t idx, size_t inc,$/;"	f	typeref:typename:STATIC_INLINE void
jl_array_grow_at_end	src/array.c	/^STATIC_INLINE void jl_array_grow_at_end(jl_array_t *a, size_t idx,$/;"	f	typeref:typename:STATIC_INLINE void
jl_array_grow_beg	src/array.c	/^JL_DLLEXPORT void jl_array_grow_beg(jl_array_t *a, size_t inc)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_array_grow_end	src/array.c	/^JL_DLLEXPORT void jl_array_grow_end(jl_array_t *a, size_t inc)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_array_int32_type	src/jltypes.c	/^jl_value_t *jl_array_int32_type;$/;"	v	typeref:typename:jl_value_t *
jl_array_isassigned	src/array.c	/^JL_DLLEXPORT int jl_array_isassigned(jl_array_t *a, size_t i)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_array_isbitsunion	src/julia.h	/^#define jl_array_isbitsunion(/;"	d
jl_array_len	src/julia.h	/^#define jl_array_len(/;"	d
jl_array_len_	src/array.c	/^JL_DLLEXPORT size_t jl_array_len_(jl_array_t *a)$/;"	f	typeref:typename:JL_DLLEXPORT size_t
jl_array_limit_offset	src/array.c	/^static size_t jl_array_limit_offset(jl_array_t *a, size_t offset)$/;"	f	typeref:typename:size_t	file:
jl_array_llvmt	src/codegen.cpp	/^static Type *jl_array_llvmt;$/;"	v	typeref:typename:Type *	file:
jl_array_ndims	src/julia.h	/^#define jl_array_ndims(/;"	d
jl_array_ndimwords	src/julia.h	/^STATIC_INLINE int jl_array_ndimwords(uint32_t ndims) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE int
jl_array_nrows	src/julia.h	/^#define jl_array_nrows(/;"	d
jl_array_owner	src/array.c	/^STATIC_INLINE jl_value_t *jl_array_owner(jl_array_t *a JL_PROPAGATES_ROOT) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE jl_value_t *
jl_array_ptr	src/rtutils.c	/^JL_DLLEXPORT void *jl_array_ptr(jl_array_t *a)$/;"	f	typeref:typename:JL_DLLEXPORT void *
jl_array_ptr_1d_append	src/array.c	/^JL_DLLEXPORT void jl_array_ptr_1d_append(jl_array_t *a, jl_array_t *a2)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_array_ptr_1d_push	src/array.c	/^JL_DLLEXPORT void jl_array_ptr_1d_push(jl_array_t *a, jl_value_t *item)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_array_ptr_copy	src/array.c	/^JL_DLLEXPORT void jl_array_ptr_copy(jl_array_t *dest, void **dest_p,$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_array_ptr_copy_backward	src/array.c	/^static NOINLINE ssize_t jl_array_ptr_copy_backward(jl_value_t *owner,$/;"	f	typeref:typename:NOINLINE ssize_t	file:
jl_array_ptr_copy_forward	src/array.c	/^static NOINLINE ssize_t jl_array_ptr_copy_forward(jl_value_t *owner,$/;"	f	typeref:typename:NOINLINE ssize_t	file:
jl_array_ptr_data	src/julia.h	/^#define jl_array_ptr_data(/;"	d
jl_array_ptr_ref	src/julia.h	/^STATIC_INLINE jl_value_t *jl_array_ptr_ref(void *a JL_PROPAGATES_ROOT, size_t i) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE jl_value_t *
jl_array_ptr_set	src/julia.h	/^STATIC_INLINE jl_value_t *jl_array_ptr_set($/;"	f	typeref:typename:STATIC_INLINE jl_value_t *
jl_array_rank	src/jlapi.c	/^JL_DLLEXPORT int jl_array_rank(jl_value_t *a)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_array_shrink	src/array.c	/^STATIC_INLINE void jl_array_shrink(jl_array_t *a, size_t dec)$/;"	f	typeref:typename:STATIC_INLINE void
jl_array_size	src/jlapi.c	/^JL_DLLEXPORT size_t jl_array_size(jl_value_t *a, int d)$/;"	f	typeref:typename:JL_DLLEXPORT size_t
jl_array_sizehint	src/array.c	/^JL_DLLEXPORT void jl_array_sizehint(jl_array_t *a, size_t sz)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_array_store_unboxed	src/array.c	/^JL_DLLEXPORT int jl_array_store_unboxed(jl_value_t *eltype) JL_NOTSAFEPOINT$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_array_symbol_type	src/jltypes.c	/^jl_value_t *jl_array_symbol_type;$/;"	v	typeref:typename:jl_value_t *
jl_array_t	src/julia.h	/^} jl_array_t;$/;"	t	typeref:struct:__anon055fe4270408
jl_array_to_string	src/array.c	/^JL_DLLEXPORT jl_value_t *jl_array_to_string(jl_array_t *a)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_array_type	src/jltypes.c	/^jl_unionall_t *jl_array_type;$/;"	v	typeref:typename:jl_unionall_t *
jl_array_typename	src/jltypes.c	/^jl_typename_t *jl_array_typename;$/;"	v	typeref:typename:jl_typename_t *
jl_array_typetagdata	src/array.c	/^char *jl_array_typetagdata(jl_array_t *a) JL_NOTSAFEPOINT$/;"	f	typeref:typename:char *
jl_array_uint8_ref	src/julia.h	/^STATIC_INLINE uint8_t jl_array_uint8_ref(void *a, size_t i) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE uint8_t
jl_array_uint8_set	src/julia.h	/^STATIC_INLINE void jl_array_uint8_set(void *a, size_t i, uint8_t x) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE void
jl_array_uint8_type	src/jltypes.c	/^jl_value_t *jl_array_uint8_type;$/;"	v	typeref:typename:jl_value_t *
jl_arrayref	src/array.c	/^JL_DLLEXPORT jl_value_t *jl_arrayref(jl_array_t *a, size_t i)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_arrayset	src/array.c	/^JL_DLLEXPORT void jl_arrayset(jl_array_t *a JL_ROOTING_ARGUMENT, jl_value_t *rhs JL_ROOTED_ARGUM/;"	f	typeref:typename:JL_DLLEXPORT void
jl_arrayunset	src/array.c	/^JL_DLLEXPORT void jl_arrayunset(jl_array_t *a, size_t i)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_assign_bits	src/datatype.c	/^void jl_assign_bits(void *dest, jl_value_t *bits)$/;"	f	typeref:typename:void
jl_assign_functionID	src/jitlayers.cpp	/^extern "C" int32_t jl_assign_functionID(const char *fname)$/;"	f	typeref:typename:int32_t
jl_assign_type_uid	src/jltypes.c	/^int jl_assign_type_uid(void)$/;"	f	typeref:typename:int
jl_assume	src/support/dtypes.h	/^#define jl_assume(/;"	d
jl_assume	src/support/dtypes.h	/^jl_assume(T v)$/;"	f	typeref:typename:T
jl_assume_	src/support/dtypes.h	/^static inline void jl_assume_(int cond)$/;"	f	typeref:typename:void
jl_assume_aligned	src/support/dtypes.h	/^#define jl_assume_aligned(/;"	d
jl_assume_aligned	src/support/dtypes.h	/^jl_assume_aligned(T ptr, unsigned align)$/;"	f	typeref:typename:T
jl_ast_context_list_delete	src/ast.c	/^STATIC_INLINE void jl_ast_context_list_delete(jl_ast_context_list_t *node) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE void
jl_ast_context_list_insert	src/ast.c	/^STATIC_INLINE void jl_ast_context_list_insert(jl_ast_context_list_t **head,$/;"	f	typeref:typename:STATIC_INLINE void
jl_ast_context_list_item	src/ast.c	/^#define jl_ast_context_list_item(/;"	d	file:
jl_ast_context_list_t	src/ast.c	/^} jl_ast_context_list_t;$/;"	t	typeref:struct:_jl_ast_context_list_t	file:
jl_ast_context_t	src/ast.c	/^} jl_ast_context_t;$/;"	t	typeref:struct:_jl_ast_context_t	file:
jl_ast_ctx	src/ast.c	/^#define jl_ast_ctx(/;"	d	file:
jl_ast_ctx_enter	src/ast.c	/^static jl_ast_context_t *jl_ast_ctx_enter(void) JL_GLOBALLY_ROOTED JL_NOTSAFEPOINT$/;"	f	typeref:typename:jl_ast_context_t *	file:
jl_ast_ctx_freed	src/ast.c	/^static jl_ast_context_list_t *jl_ast_ctx_freed = NULL;$/;"	v	typeref:typename:jl_ast_context_list_t *	file:
jl_ast_ctx_leave	src/ast.c	/^static void jl_ast_ctx_leave(jl_ast_context_t *ctx) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void	file:
jl_ast_ctx_using	src/ast.c	/^static jl_ast_context_list_t *jl_ast_ctx_using = NULL;$/;"	v	typeref:typename:jl_ast_context_list_t *	file:
jl_ast_flag_inferred	src/dump.c	/^JL_DLLEXPORT uint8_t jl_ast_flag_inferred(jl_array_t *data)$/;"	f	typeref:typename:JL_DLLEXPORT uint8_t
jl_ast_flag_inlineable	src/dump.c	/^JL_DLLEXPORT uint8_t jl_ast_flag_inlineable(jl_array_t *data)$/;"	f	typeref:typename:JL_DLLEXPORT uint8_t
jl_ast_flag_pure	src/dump.c	/^JL_DLLEXPORT uint8_t jl_ast_flag_pure(jl_array_t *data)$/;"	f	typeref:typename:JL_DLLEXPORT uint8_t
jl_ast_main_ctx	src/ast.c	/^static jl_ast_context_t jl_ast_main_ctx;$/;"	v	typeref:typename:jl_ast_context_t	file:
jl_ast_nslots	src/dump.c	/^JL_DLLEXPORT ssize_t jl_ast_nslots(jl_array_t *data)$/;"	f	typeref:typename:JL_DLLEXPORT ssize_t
jl_ast_slotflag	src/dump.c	/^JL_DLLEXPORT uint8_t jl_ast_slotflag(jl_array_t *data, size_t i)$/;"	f	typeref:typename:JL_DLLEXPORT uint8_t
jl_astaggedvalue	src/julia.h	/^#define jl_astaggedvalue(/;"	d
jl_atexit_hook	src/init.c	/^JL_DLLEXPORT void jl_atexit_hook(int exitcode)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_atomic_add_fetch	src/atomics.h	/^#  define jl_atomic_add_fetch(/;"	d
jl_atomic_bool_compare_exchange	src/atomics.h	/^#  define jl_atomic_bool_compare_exchange(/;"	d
jl_atomic_compare_exchange	src/atomics.h	/^#  define jl_atomic_compare_exchange(/;"	d
jl_atomic_compare_exchange	src/atomics.h	/^jl_atomic_compare_exchange(volatile T *obj, T2 expected, T3 desired)$/;"	f	typeref:typename:std::enable_if<sizeof (T)==1,T>::type
jl_atomic_compare_exchange	src/atomics.h	/^jl_atomic_compare_exchange(volatile T *obj, T2 expected, T3 desired)$/;"	f	typeref:typename:std::enable_if<sizeof (T)==2,T>::type
jl_atomic_compare_exchange	src/atomics.h	/^jl_atomic_compare_exchange(volatile T *obj, T2 expected, T3 desired)$/;"	f	typeref:typename:std::enable_if<sizeof (T)==4,T>::type
jl_atomic_compare_exchange	src/atomics.h	/^jl_atomic_compare_exchange(volatile T *obj, T2 expected, T3 desired)$/;"	f	typeref:typename:std::enable_if<sizeof (T)==8,T>::type
jl_atomic_exchange	src/atomics.h	/^#  define jl_atomic_exchange(/;"	d
jl_atomic_exchange	src/atomics.h	/^jl_atomic_exchange(volatile T *obj, T2 val)$/;"	f	typeref:typename:std::enable_if<sizeof (T)==1,T>::type
jl_atomic_exchange	src/atomics.h	/^jl_atomic_exchange(volatile T *obj, T2 val)$/;"	f	typeref:typename:std::enable_if<sizeof (T)==2,T>::type
jl_atomic_exchange	src/atomics.h	/^jl_atomic_exchange(volatile T *obj, T2 val)$/;"	f	typeref:typename:std::enable_if<sizeof (T)==4,T>::type
jl_atomic_exchange	src/atomics.h	/^jl_atomic_exchange(volatile T *obj, T2 val)$/;"	f	typeref:typename:std::enable_if<sizeof (T)==8,T>::type
jl_atomic_exchange_generic	src/atomics.h	/^#  define jl_atomic_exchange_generic(/;"	d
jl_atomic_exchange_relaxed	src/atomics.h	/^#  define jl_atomic_exchange_relaxed(/;"	d
jl_atomic_exchange_relaxed	src/atomics.h	/^#define jl_atomic_exchange_relaxed(/;"	d
jl_atomic_fetch_add	src/atomics.h	/^#  define jl_atomic_fetch_add(/;"	d
jl_atomic_fetch_add	src/atomics.h	/^jl_atomic_fetch_add(T *obj, T2 arg)$/;"	f	typeref:typename:std::enable_if<sizeof (T)==1,T>::type
jl_atomic_fetch_add	src/atomics.h	/^jl_atomic_fetch_add(T *obj, T2 arg)$/;"	f	typeref:typename:std::enable_if<sizeof (T)==2,T>::type
jl_atomic_fetch_add	src/atomics.h	/^jl_atomic_fetch_add(T *obj, T2 arg)$/;"	f	typeref:typename:std::enable_if<sizeof (T)==4,T>::type
jl_atomic_fetch_add	src/atomics.h	/^jl_atomic_fetch_add(T *obj, T2 arg)$/;"	f	typeref:typename:std::enable_if<sizeof (T)==8,T>::type
jl_atomic_fetch_add_relaxed	src/atomics.h	/^#  define jl_atomic_fetch_add_relaxed(/;"	d
jl_atomic_fetch_add_relaxed	src/atomics.h	/^#define jl_atomic_fetch_add_relaxed(/;"	d
jl_atomic_fetch_and	src/atomics.h	/^#  define jl_atomic_fetch_and(/;"	d
jl_atomic_fetch_and	src/atomics.h	/^jl_atomic_fetch_and(T *obj, T2 arg)$/;"	f	typeref:typename:std::enable_if<sizeof (T)==1,T>::type
jl_atomic_fetch_and	src/atomics.h	/^jl_atomic_fetch_and(T *obj, T2 arg)$/;"	f	typeref:typename:std::enable_if<sizeof (T)==2,T>::type
jl_atomic_fetch_and	src/atomics.h	/^jl_atomic_fetch_and(T *obj, T2 arg)$/;"	f	typeref:typename:std::enable_if<sizeof (T)==4,T>::type
jl_atomic_fetch_and	src/atomics.h	/^jl_atomic_fetch_and(T *obj, T2 arg)$/;"	f	typeref:typename:std::enable_if<sizeof (T)==8,T>::type
jl_atomic_fetch_and_relaxed	src/atomics.h	/^#  define jl_atomic_fetch_and_relaxed(/;"	d
jl_atomic_fetch_and_relaxed	src/atomics.h	/^#define jl_atomic_fetch_and_relaxed(/;"	d
jl_atomic_fetch_or	src/atomics.h	/^#  define jl_atomic_fetch_or(/;"	d
jl_atomic_fetch_or	src/atomics.h	/^jl_atomic_fetch_or(T *obj, T2 arg)$/;"	f	typeref:typename:std::enable_if<sizeof (T)==1,T>::type
jl_atomic_fetch_or	src/atomics.h	/^jl_atomic_fetch_or(T *obj, T2 arg)$/;"	f	typeref:typename:std::enable_if<sizeof (T)==2,T>::type
jl_atomic_fetch_or	src/atomics.h	/^jl_atomic_fetch_or(T *obj, T2 arg)$/;"	f	typeref:typename:std::enable_if<sizeof (T)==4,T>::type
jl_atomic_fetch_or	src/atomics.h	/^jl_atomic_fetch_or(T *obj, T2 arg)$/;"	f	typeref:typename:std::enable_if<sizeof (T)==8,T>::type
jl_atomic_fetch_or_relaxed	src/atomics.h	/^#  define jl_atomic_fetch_or_relaxed(/;"	d
jl_atomic_fetch_or_relaxed	src/atomics.h	/^#define jl_atomic_fetch_or_relaxed(/;"	d
jl_atomic_load	src/atomics.h	/^#  define jl_atomic_load(/;"	d
jl_atomic_load	src/atomics.h	/^static inline T jl_atomic_load(volatile T *obj)$/;"	f	typeref:typename:T
jl_atomic_load_acquire	src/atomics.h	/^#  define jl_atomic_load_acquire(/;"	d
jl_atomic_load_acquire	src/atomics.h	/^static inline T jl_atomic_load_acquire(volatile T *obj)$/;"	f	typeref:typename:T
jl_atomic_load_relaxed	src/atomics.h	/^#  define jl_atomic_load_relaxed(/;"	d
jl_atomic_store	src/atomics.h	/^#  define jl_atomic_store(/;"	d
jl_atomic_store	src/atomics.h	/^jl_atomic_store(volatile T *obj, T2 val)$/;"	f	typeref:typename:std::enable_if<sizeof (T)==1>::type
jl_atomic_store	src/atomics.h	/^jl_atomic_store(volatile T *obj, T2 val)$/;"	f	typeref:typename:std::enable_if<sizeof (T)==2>::type
jl_atomic_store	src/atomics.h	/^jl_atomic_store(volatile T *obj, T2 val)$/;"	f	typeref:typename:std::enable_if<sizeof (T)==4>::type
jl_atomic_store	src/atomics.h	/^jl_atomic_store(volatile T *obj, T2 val)$/;"	f	typeref:typename:std::enable_if<sizeof (T)==8>::type
jl_atomic_store_release	src/atomics.h	/^#    define jl_atomic_store_release(/;"	d
jl_atomic_store_release	src/atomics.h	/^static inline void jl_atomic_store_release(volatile T *obj, T2 val)$/;"	f	typeref:typename:void
jl_backtrace_from_here	src/stackwalk.c	/^JL_DLLEXPORT jl_value_t *jl_backtrace_from_here(int returnsp)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_base_module	src/module.c	/^jl_module_t *jl_base_module = NULL;$/;"	v	typeref:typename:jl_module_t *
jl_base_relative_to	src/toplevel.c	/^JL_DLLEXPORT jl_module_t *jl_base_relative_to(jl_module_t *m)$/;"	f	typeref:typename:JL_DLLEXPORT jl_module_t *
jl_basecursor	src/task.c	/^static JL_THREAD_LOCAL unw_cursor_t jl_basecursor;$/;"	v	typeref:typename:JL_THREAD_LOCAL unw_cursor_t	file:
jl_bigint_type	src/dump.c	/^static jl_value_t *jl_bigint_type = NULL;$/;"	v	typeref:typename:jl_value_t *	file:
jl_bigint_type	src/staticdata.c	/^static jl_value_t *jl_bigint_type = NULL;$/;"	v	typeref:typename:jl_value_t *	file:
jl_binding_deprecation_warning	src/module.c	/^void jl_binding_deprecation_warning(jl_module_t *m, jl_binding_t *b)$/;"	f	typeref:typename:void
jl_binding_owner	src/module.c	/^JL_DLLEXPORT jl_value_t *jl_binding_owner(jl_module_t *m, jl_sym_t *var)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_binding_resolved_p	src/module.c	/^JL_DLLEXPORT int jl_binding_resolved_p(jl_module_t *m, jl_sym_t *var) JL_NOTSAFEPOINT$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_binding_t	src/julia.h	/^} jl_binding_t;$/;"	t	typeref:struct:__anon055fe4271108
jl_bitcast	src/runtime_intrinsics.c	/^JL_DLLEXPORT jl_value_t *jl_bitcast(jl_value_t *ty, jl_value_t *v)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_bool_type	src/jltypes.c	/^jl_datatype_t *jl_bool_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_bottom_type	src/jltypes.c	/^jl_value_t *jl_bottom_type;$/;"	v	typeref:typename:jl_value_t *
jl_boundp	src/module.c	/^JL_DLLEXPORT int jl_boundp(jl_module_t *m, jl_sym_t *var)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_bounds_error	src/rtutils.c	/^JL_DLLEXPORT void JL_NORETURN jl_bounds_error(jl_value_t *v, jl_value_t *t)$/;"	f	typeref:typename:JL_DLLEXPORT void JL_NORETURN
jl_bounds_error_int	src/rtutils.c	/^JL_DLLEXPORT void JL_NORETURN jl_bounds_error_int(jl_value_t *v, size_t i)$/;"	f	typeref:typename:JL_DLLEXPORT void JL_NORETURN
jl_bounds_error_ints	src/rtutils.c	/^JL_DLLEXPORT void JL_NORETURN jl_bounds_error_ints(jl_value_t *v, size_t *idxs, size_t nidxs)$/;"	f	typeref:typename:JL_DLLEXPORT void JL_NORETURN
jl_bounds_error_tuple_int	src/rtutils.c	/^JL_DLLEXPORT void JL_NORETURN jl_bounds_error_tuple_int(jl_value_t **v, size_t nv, size_t i)$/;"	f	typeref:typename:JL_DLLEXPORT void JL_NORETURN
jl_bounds_error_unboxed_int	src/rtutils.c	/^JL_DLLEXPORT void JL_NORETURN jl_bounds_error_unboxed_int(void *data, jl_value_t *vt, size_t i)$/;"	f	typeref:typename:JL_DLLEXPORT void JL_NORETURN
jl_bounds_error_v	src/rtutils.c	/^JL_DLLEXPORT void JL_NORETURN jl_bounds_error_v(jl_value_t *v, jl_value_t **idxs, size_t nidxs)$/;"	f	typeref:typename:JL_DLLEXPORT void JL_NORETURN
jl_boundserror_type	src/jltypes.c	/^jl_datatype_t *jl_boundserror_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_box_bool	src/datatype.c	/^JL_DLLEXPORT jl_value_t *jl_box_bool(int8_t x)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_box_char	src/datatype.c	/^JL_DLLEXPORT jl_value_t *jl_box_char(uint32_t x)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_box_int8	src/datatype.c	/^JL_DLLEXPORT jl_value_t *jl_box_int8(int8_t x)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_box_long	src/julia.h	/^#define jl_box_long(/;"	d
jl_box_uint8	src/datatype.c	/^JL_DLLEXPORT jl_value_t *jl_box_uint8(uint8_t x)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_box_ulong	src/julia.h	/^#define jl_box_ulong(/;"	d
jl_breakpoint	src/rtutils.c	/^JL_DLLEXPORT void jl_breakpoint(jl_value_t *v)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_buff_tag	src/julia_internal.h	/^#define jl_buff_tag /;"	d
jl_builderModule	src/codegen.cpp	/^#define jl_builderModule(/;"	d	file:
jl_builtin_type	src/jltypes.c	/^jl_datatype_t *jl_builtin_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_cache_type_	src/jltypes.c	/^jl_value_t *jl_cache_type_(jl_datatype_t *type)$/;"	f	typeref:typename:jl_value_t *
jl_cachearg_offset	src/gf.c	/^static int8_t jl_cachearg_offset(jl_methtable_t *mt)$/;"	f	typeref:typename:int8_t	file:
jl_call	src/jlapi.c	/^JL_DLLEXPORT jl_value_t *jl_call(jl_function_t *f, jl_value_t **args, int32_t nargs)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_call0	src/jlapi.c	/^JL_DLLEXPORT jl_value_t *jl_call0(jl_function_t *f)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_call1	src/jlapi.c	/^JL_DLLEXPORT jl_value_t *jl_call1(jl_function_t *f, jl_value_t *a)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_call2	src/jlapi.c	/^JL_DLLEXPORT jl_value_t *jl_call2(jl_function_t *f, jl_value_t *a, jl_value_t *b)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_call3	src/jlapi.c	/^JL_DLLEXPORT jl_value_t *jl_call3(jl_function_t *f, jl_value_t *a,$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_call_in_ctx	src/signals-unix.c	/^static void jl_call_in_ctx(jl_ptls_t ptls, void (*fptr)(void), int sig, void *_ctx)$/;"	f	typeref:typename:void	file:
jl_call_in_state	src/signals-mach.c	/^static void jl_call_in_state(jl_ptls_t ptls2, x86_thread_state64_t *state,$/;"	f	typeref:typename:void	file:
jl_call_in_typeinf_world	src/gf.c	/^JL_DLLEXPORT jl_value_t *jl_call_in_typeinf_world(jl_value_t **args, int nargs)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_call_scm_on_ast	src/ast.c	/^jl_value_t *jl_call_scm_on_ast(const char *funcname, jl_value_t *expr, jl_module_t *inmodule)$/;"	f	typeref:typename:jl_value_t *
jl_call_scm_on_ast_and_loc	src/ast.c	/^jl_value_t *jl_call_scm_on_ast_and_loc(const char *funcname, jl_value_t *expr, jl_module_t *inmo/;"	f	typeref:typename:jl_value_t *
jl_call_staged	src/method.c	/^STATIC_INLINE jl_value_t *jl_call_staged(jl_method_t *def, jl_value_t *generator, jl_svec_t *spa/;"	f	typeref:typename:STATIC_INLINE jl_value_t *
jl_call_t	src/julia.h	/^typedef jl_value_t *(jl_call_t)(jl_value_t*, jl_value_t**, uint32_t, struct _jl_code_instance_t*/;"	t	typeref:typename:jl_value_t * ()(jl_value_t *,jl_value_t **,uint32_t,struct _jl_code_instance_t *)
jl_call_tracer	src/gf.c	/^void jl_call_tracer(tracer_cb callback, jl_value_t *tracee)$/;"	f	typeref:typename:void
jl_callingconv_t	src/staticdata.c	/^} jl_callingconv_t;$/;"	t	typeref:enum:__anonc3a2e68f0203	file:
jl_calloc	src/gc.c	/^JL_DLLEXPORT void *jl_calloc(size_t nm, size_t sz)$/;"	f	typeref:typename:JL_DLLEXPORT void *
jl_callptr_t	src/julia.h	/^typedef jl_call_t *jl_callptr_t;$/;"	t	typeref:typename:jl_call_t *
jl_can_finalize_function	src/jitlayers.cpp	/^bool jl_can_finalize_function(StringRef F)$/;"	f	typeref:typename:bool
jl_capture_interp_frame	src/interpreter-stacktrace.c	/^JL_DLLEXPORT size_t jl_capture_interp_frame(uintptr_t *data, uintptr_t sp, uintptr_t fp, size_t /;"	f	typeref:typename:JL_DLLEXPORT size_t
jl_cfunction_list	src/anticodegen.c	/^jl_array_t *jl_cfunction_list;$/;"	v	typeref:typename:jl_array_t *
jl_cfunction_list	src/codegen.cpp	/^jl_array_t *jl_cfunction_list;$/;"	v	typeref:typename:jl_array_t *
jl_cfunction_object	src/codegen.cpp	/^static Function *jl_cfunction_object(jl_value_t *ff, jl_value_t *declrt, jl_tupletype_t *argt)$/;"	f	typeref:typename:Function *	file:
jl_cglobal	src/runtime_intrinsics.c	/^JL_DLLEXPORT jl_value_t *jl_cglobal(jl_value_t *v, jl_value_t *ty)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_cglobal_auto	src/runtime_intrinsics.c	/^JL_DLLEXPORT jl_value_t *jl_cglobal_auto(jl_value_t *v) {$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_cgparams_t	src/julia.h	/^} jl_cgparams_t;$/;"	t	typeref:struct:__anon055fe4271b08
jl_cgval_t	src/codegen.cpp	/^    explicit jl_cgval_t(jl_value_t *typ) : \/\/ ghost value constructor$/;"	f	struct:jl_cgval_t	file:
jl_cgval_t	src/codegen.cpp	/^    jl_cgval_t() : \/\/ undef \/ unreachable \/ default constructor$/;"	f	struct:jl_cgval_t	file:
jl_cgval_t	src/codegen.cpp	/^    jl_cgval_t(Value *V, Value *gcroot, bool isboxed, jl_value_t *typ, Value *tindex) : \/\/ gen/;"	f	struct:jl_cgval_t	file:
jl_cgval_t	src/codegen.cpp	/^    jl_cgval_t(const jl_cgval_t &v, jl_value_t *typ, Value *tindex) : \/\/ copy constructor with/;"	f	struct:jl_cgval_t	file:
jl_cgval_t	src/codegen.cpp	/^struct jl_cgval_t {$/;"	s	file:
jl_char_type	src/jltypes.c	/^jl_datatype_t *jl_char_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_charmap_map	src/flisp/julia_extensions.c	/^utf8proc_int32_t jl_charmap_map(utf8proc_int32_t c, void *ctx)$/;"	f	typeref:typename:utf8proc_int32_t
jl_check_force_sigint	src/signal-handling.c	/^static int jl_check_force_sigint(void)$/;"	f	typeref:typename:int	file:
jl_check_tls	src/threading.c	/^static void jl_check_tls(void)$/;"	f	typeref:typename:void	file:
jl_check_tls_bound	src/threading.c	/^static inline ssize_t jl_check_tls_bound(void *tp, void *ptls, size_t tls_size)$/;"	f	typeref:typename:ssize_t	file:
jl_checked_assignment	src/module.c	/^JL_DLLEXPORT void jl_checked_assignment(jl_binding_t *b, jl_value_t *rhs)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_cholmod_common_offsets	deps/SuiteSparse_wrapper.c	/^extern void jl_cholmod_common_offsets(size_t *vv) {$/;"	f	typeref:typename:void
jl_cholmod_common_size	deps/SuiteSparse_wrapper.c	/^extern size_t jl_cholmod_common_size(void) {$/;"	f	typeref:typename:size_t
jl_cholmod_sizeof_long	deps/SuiteSparse_wrapper.c	/^extern size_t jl_cholmod_sizeof_long(void) {$/;"	f	typeref:typename:size_t
jl_cholmod_version	deps/SuiteSparse_wrapper.c	/^extern int jl_cholmod_version(int *ver) {$/;"	f	typeref:typename:int
jl_cleanup_serializer2	src/staticdata.c	/^static void jl_cleanup_serializer2(void)$/;"	f	typeref:typename:void	file:
jl_clear_force_sigint	src/signal-handling.c	/^static void jl_clear_force_sigint(void)$/;"	f	typeref:typename:void	file:
jl_clear_malloc_data	src/codegen.cpp	/^extern "C" JL_DLLEXPORT void jl_clear_malloc_data(void)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_clock_now	src/support/timefuncs.c	/^JL_DLLEXPORT double jl_clock_now(void)$/;"	f	typeref:typename:JL_DLLEXPORT double
jl_close_item_atexit	src/init.c	/^static void jl_close_item_atexit(uv_handle_t *handle)$/;"	f	typeref:typename:void	file:
jl_close_uv	src/jl_uv.c	/^JL_DLLEXPORT void jl_close_uv(uv_handle_t *handle)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_code_for_interpreter	src/interpreter.c	/^jl_code_info_t *jl_code_for_interpreter(jl_method_instance_t *mi)$/;"	f	typeref:typename:jl_code_info_t *
jl_code_for_staged	src/method.c	/^JL_DLLEXPORT jl_code_info_t *jl_code_for_staged(jl_method_instance_t *linfo)$/;"	f	typeref:typename:JL_DLLEXPORT jl_code_info_t *
jl_code_info_set_ast	src/method.c	/^static void jl_code_info_set_ast(jl_code_info_t *li, jl_expr_t *ast)$/;"	f	typeref:typename:void	file:
jl_code_info_t	src/julia.h	/^} jl_code_info_t;$/;"	t	typeref:struct:_jl_code_info_t
jl_code_info_type	src/jltypes.c	/^jl_datatype_t *jl_code_info_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_code_instance_t	src/julia.h	/^} jl_code_instance_t;$/;"	t	typeref:struct:_jl_code_instance_t
jl_code_instance_type	src/jltypes.c	/^jl_datatype_t *jl_code_instance_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_code_requires_compiler	src/toplevel.c	/^int jl_code_requires_compiler(jl_code_info_t *src)$/;"	f	typeref:typename:int
jl_codectx_t	src/codegen.cpp	/^    jl_codectx_t(LLVMContext &llvmctx)$/;"	f	class:jl_codectx_t	file:
jl_codectx_t	src/codegen.cpp	/^class jl_codectx_t {$/;"	c	file:
jl_collect_backedges	src/dump.c	/^static void jl_collect_backedges(jl_array_t *s)$/;"	f	typeref:typename:void	file:
jl_collect_backedges_to	src/dump.c	/^static void jl_collect_backedges_to(jl_method_instance_t *caller, htable_t *all_callees) JL_GC_D/;"	f	typeref:typename:void	file:
jl_collect_backedges_to_mod	src/dump.c	/^static int jl_collect_backedges_to_mod(jl_typemap_entry_t *ml, void *closure) JL_GC_DISABLED$/;"	f	typeref:typename:int	file:
jl_collect_lambdas_from_mod	src/dump.c	/^static void jl_collect_lambdas_from_mod(jl_array_t *s, jl_module_t *m) JL_GC_DISABLED$/;"	f	typeref:typename:void	file:
jl_collect_methcache_from_mod	src/dump.c	/^static int jl_collect_methcache_from_mod(jl_typemap_entry_t *ml, void *closure) JL_GC_DISABLED$/;"	f	typeref:typename:int	file:
jl_collect_methtable_from_mod	src/dump.c	/^static void jl_collect_methtable_from_mod(jl_array_t *s, jl_methtable_t *mt) JL_GC_DISABLED$/;"	f	typeref:typename:void	file:
jl_collect_missing_backedges_to_mod	src/dump.c	/^static void jl_collect_missing_backedges_to_mod(jl_methtable_t *mt)$/;"	f	typeref:typename:void	file:
jl_compilation_sig	src/gf.c	/^static void jl_compilation_sig($/;"	f	typeref:typename:void	file:
jl_compile_all_defs	src/precompile.c	/^static void jl_compile_all_defs(void)$/;"	f	typeref:typename:void	file:
jl_compile_hint	src/gf.c	/^JL_DLLEXPORT int jl_compile_hint(jl_tupletype_t *types)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_compile_linfo	src/anticodegen.c	/^jl_llvm_functions_t jl_compile_linfo(jl_method_instance_t **pli, jl_code_info_t *src, size_t wor/;"	f	typeref:typename:jl_llvm_functions_t
jl_compile_linfo	src/codegen.cpp	/^jl_code_instance_t *jl_compile_linfo(jl_method_instance_t *mi, jl_code_info_t *src, size_t world/;"	f	typeref:typename:jl_code_instance_t *
jl_compile_method_internal	src/gf.c	/^jl_code_instance_t *jl_compile_method_internal(jl_method_instance_t *mi, size_t world)$/;"	f	typeref:typename:jl_code_instance_t *
jl_compile_now	src/gf.c	/^void jl_compile_now(jl_method_instance_t *mi)$/;"	f	typeref:typename:void
jl_compile_specializations	src/precompile.c	/^static void jl_compile_specializations(void)$/;"	f	typeref:typename:void	file:
jl_compress_argnames	src/dump.c	/^JL_DLLEXPORT jl_value_t *jl_compress_argnames(jl_array_t *syms)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_compress_ast	src/dump.c	/^JL_DLLEXPORT jl_array_t *jl_compress_ast(jl_method_t *m, jl_code_info_t *code)$/;"	f	typeref:typename:JL_DLLEXPORT jl_array_t *
jl_compute_field_offsets	src/datatype.c	/^void jl_compute_field_offsets(jl_datatype_t *st)$/;"	f	typeref:typename:void
jl_compute_fieldtypes	src/jltypes.c	/^JL_DLLEXPORT jl_svec_t *jl_compute_fieldtypes(jl_datatype_t *st JL_PROPAGATES_ROOT)$/;"	f	typeref:typename:JL_DLLEXPORT jl_svec_t *
jl_contains	src/julia_internal.h	/^    jl_datatype_t **jl_contains; \/\/ the type that is being put in this$/;"	m	struct:jl_typemap_info	typeref:typename:jl_datatype_t **
jl_copy_ast	src/ast.c	/^JL_DLLEXPORT jl_value_t *jl_copy_ast(jl_value_t *expr)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_copy_code_info	src/method.c	/^JL_DLLEXPORT jl_code_info_t *jl_copy_code_info(jl_code_info_t *src)$/;"	f	typeref:typename:JL_DLLEXPORT jl_code_info_t *
jl_copy_excstack	src/rtutils.c	/^void jl_copy_excstack(jl_excstack_t *dest, jl_excstack_t *src) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void
jl_copy_str	src/julia_internal.h	/^STATIC_INLINE char *jl_copy_str(char **to, const char *from)$/;"	f	typeref:typename:STATIC_INLINE char *
jl_core_module	src/module.c	/^jl_module_t *jl_core_module = NULL;$/;"	v	typeref:typename:jl_module_t *
jl_count_union_components	src/jltypes.c	/^int jl_count_union_components(jl_value_t *v)$/;"	f	typeref:typename:int
jl_cpu_feature_t	src/processor.h	/^} jl_cpu_feature_t;$/;"	t	typeref:enum:__anon7b4d3ed20203
jl_cpu_pause	src/julia_threads.h	/^#  define jl_cpu_pause(/;"	d
jl_cpu_pause	src/julia_threads.h	/^JL_DLLEXPORT void (jl_cpu_pause)(void);$/;"	v	typeref:typename:JL_DLLEXPORT void ()(void)
jl_cpu_threads	src/sys.c	/^JL_DLLEXPORT int jl_cpu_threads(void)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_cpu_wake	src/julia_threads.h	/^#  define jl_cpu_wake(/;"	d
jl_cpu_wake	src/julia_threads.h	/^JL_DLLEXPORT void (jl_cpu_wake)(void);$/;"	v	typeref:typename:JL_DLLEXPORT void ()(void)
jl_cpuid	src/processor_x86.cpp	/^extern "C" JL_DLLEXPORT void jl_cpuid(int32_t CPUInfo[4], int32_t InfoType)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_cpuidex	src/processor_x86.cpp	/^extern "C" JL_DLLEXPORT void jl_cpuidex(int32_t CPUInfo[4], int32_t InfoType, int32_t subInfoTyp/;"	f	typeref:typename:JL_DLLEXPORT void
jl_crc32c	src/crc32c.c	/^JL_DLLEXPORT uint32_t jl_crc32c(uint32_t crc, const char *buf, size_t len)$/;"	f	typeref:typename:JL_DLLEXPORT uint32_t
jl_crc32c_sw	src/crc32c.c	/^#define jl_crc32c_sw /;"	d	file:
jl_crc32c_sw	src/crc32c.c	/^JL_DLLEXPORT uint32_t jl_crc32c_sw(uint32_t crc, const char *buf, size_t len)$/;"	f	typeref:typename:JL_DLLEXPORT uint32_t
jl_crc32c_sw	src/crc32c.c	/^JL_DLLEXPORT uint32_t jl_crc32c_sw(uint32_t crci, const char *buf, size_t len)$/;"	f	typeref:typename:JL_DLLEXPORT uint32_t
jl_create_system_image	src/staticdata.c	/^JL_DLLEXPORT ios_t *jl_create_system_image(void)$/;"	f	typeref:typename:JL_DLLEXPORT ios_t *
jl_critical_error	src/signal-handling.c	/^void jl_critical_error(int sig, bt_context_t *context, uintptr_t *bt_data, size_t *bt_size)$/;"	f	typeref:typename:void
jl_crtdll_handle	src/init.c	/^void *jl_crtdll_handle;$/;"	v	typeref:typename:void *
jl_cstr_to_string	src/array.c	/^JL_DLLEXPORT jl_value_t *jl_cstr_to_string(const char *str)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_current_exception	src/jlapi.c	/^JL_DLLEXPORT jl_value_t *jl_current_exception(void) JL_GLOBALLY_ROOTED$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_current_exception_func	src/codegen.cpp	/^static Function *jl_current_exception_func;$/;"	v	typeref:typename:Function *	file:
jl_current_modules	src/toplevel.c	/^htable_t jl_current_modules;$/;"	v	typeref:typename:htable_t
jl_current_task	src/julia.h	/^#define jl_current_task /;"	d
jl_data_layout	src/codegen.cpp	/^static DataLayout &jl_data_layout = *(new DataLayout(""));$/;"	v	typeref:typename:DataLayout &	file:
jl_data_ptr	src/julia.h	/^#define jl_data_ptr(/;"	d
jl_datatype_align	src/julia.h	/^#define jl_datatype_align(/;"	d
jl_datatype_isinlinealloc	src/julia.h	/^#define jl_datatype_isinlinealloc(/;"	d
jl_datatype_layout_n_nonptr	src/julia_internal.h	/^#define jl_datatype_layout_n_nonptr(/;"	d
jl_datatype_layout_t	src/julia.h	/^} jl_datatype_layout_t;$/;"	t	typeref:struct:__anon055fe4270f08
jl_datatype_nbits	src/julia.h	/^#define jl_datatype_nbits(/;"	d
jl_datatype_nfields	src/julia.h	/^#define jl_datatype_nfields(/;"	d
jl_datatype_size	src/julia.h	/^#define jl_datatype_size(/;"	d
jl_datatype_t	src/julia.h	/^} jl_datatype_t;$/;"	t	typeref:struct:_jl_datatype_t
jl_datatype_type	src/jltypes.c	/^jl_datatype_t *jl_datatype_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_declare_constant	src/module.c	/^JL_DLLEXPORT void jl_declare_constant(jl_binding_t *b)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_default_cgparams	src/codegen.cpp	/^    jl_cgparams_t jl_default_cgparams = {1, 1, 1, 1, 0, 1, jl_default_debug_info_kind, NULL, NUL/;"	v	typeref:typename:jl_cgparams_t
jl_default_debug_info_kind	src/codegen.cpp	/^    int jl_default_debug_info_kind = (int) DICompileUnit::DebugEmissionKind::FullDebug;$/;"	v	typeref:typename:int
jl_defines_or_exports_p	src/module.c	/^JL_DLLEXPORT int jl_defines_or_exports_p(jl_module_t *m, jl_sym_t *var)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_demangle	src/debuginfo.cpp	/^static std::pair<char *, bool> jl_demangle(const char *name)$/;"	f	typeref:typename:std::pair<char *,bool>	file:
jl_demangle_typename	src/datatype.c	/^jl_sym_t *jl_demangle_typename(jl_sym_t *s) JL_NOTSAFEPOINT$/;"	f	typeref:typename:jl_sym_t *
jl_densearray_type	src/jltypes.c	/^jl_unionall_t *jl_densearray_type;$/;"	v	typeref:typename:jl_unionall_t *
jl_deprecate_binding	src/module.c	/^JL_DLLEXPORT void jl_deprecate_binding(jl_module_t *m, jl_sym_t *var, int flag)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_depwarn	src/rtutils.c	/^void jl_depwarn(const char *msg, jl_value_t *sym)$/;"	f	typeref:typename:void
jl_deserialize_datatype	src/dump.c	/^static jl_value_t *jl_deserialize_datatype(jl_serializer_state *s, int pos, jl_value_t **loc) JL/;"	f	typeref:typename:jl_value_t *	file:
jl_deserialize_struct	src/dump.c	/^static void jl_deserialize_struct(jl_serializer_state *s, jl_value_t *v, size_t startfield) JL_G/;"	f	typeref:typename:void	file:
jl_deserialize_typemap_entry	src/dump.c	/^static jl_value_t *jl_deserialize_typemap_entry(jl_serializer_state *s) JL_GC_DISABLED$/;"	f	typeref:typename:jl_value_t *	file:
jl_deserialize_value	src/dump.c	/^static jl_value_t *jl_deserialize_value(jl_serializer_state *s, jl_value_t **loc) JL_GC_DISABLED$/;"	f	typeref:typename:jl_value_t *	file:
jl_deserialize_value_any	src/dump.c	/^static jl_value_t *jl_deserialize_value_any(jl_serializer_state *s, uint8_t tag, jl_value_t **lo/;"	f	typeref:typename:jl_value_t *	file:
jl_deserialize_value_array	src/dump.c	/^static jl_value_t *jl_deserialize_value_array(jl_serializer_state *s, uint8_t tag) JL_GC_DISABLE/;"	f	typeref:typename:jl_value_t *	file:
jl_deserialize_value_code_instance	src/dump.c	/^static jl_value_t *jl_deserialize_value_code_instance(jl_serializer_state *s, jl_value_t **loc) /;"	f	typeref:typename:jl_value_t *	file:
jl_deserialize_value_cstring	src/dump.c	/^static char *jl_deserialize_value_cstring(jl_serializer_state *s) JL_GC_DISABLED$/;"	f	typeref:typename:char *	file:
jl_deserialize_value_expr	src/dump.c	/^static jl_value_t *jl_deserialize_value_expr(jl_serializer_state *s, uint8_t tag) JL_GC_DISABLED$/;"	f	typeref:typename:jl_value_t *	file:
jl_deserialize_value_globalref	src/dump.c	/^static jl_value_t *jl_deserialize_value_globalref(jl_serializer_state *s) JL_GC_DISABLED$/;"	f	typeref:typename:jl_value_t *	file:
jl_deserialize_value_method	src/dump.c	/^static jl_value_t *jl_deserialize_value_method(jl_serializer_state *s, jl_value_t **loc) JL_GC_D/;"	f	typeref:typename:jl_value_t *	file:
jl_deserialize_value_method_instance	src/dump.c	/^static jl_value_t *jl_deserialize_value_method_instance(jl_serializer_state *s, jl_value_t **loc/;"	f	typeref:typename:jl_value_t *	file:
jl_deserialize_value_module	src/dump.c	/^static jl_value_t *jl_deserialize_value_module(jl_serializer_state *s) JL_GC_DISABLED$/;"	f	typeref:typename:jl_value_t *	file:
jl_deserialize_value_phi	src/dump.c	/^static jl_value_t *jl_deserialize_value_phi(jl_serializer_state *s, uint8_t tag) JL_GC_DISABLED$/;"	f	typeref:typename:jl_value_t *	file:
jl_deserialize_value_phic	src/dump.c	/^static jl_value_t *jl_deserialize_value_phic(jl_serializer_state *s, uint8_t tag) JL_GC_DISABLED$/;"	f	typeref:typename:jl_value_t *	file:
jl_deserialize_value_singleton	src/dump.c	/^static jl_value_t *jl_deserialize_value_singleton(jl_serializer_state *s, jl_value_t **loc) JL_G/;"	f	typeref:typename:jl_value_t *	file:
jl_deserialize_value_svec	src/dump.c	/^static jl_value_t *jl_deserialize_value_svec(jl_serializer_state *s, uint8_t tag) JL_GC_DISABLED$/;"	f	typeref:typename:jl_value_t *	file:
jl_deserialize_value_symbol	src/dump.c	/^static jl_value_t *jl_deserialize_value_symbol(jl_serializer_state *s, uint8_t tag) JL_GC_DISABL/;"	f	typeref:typename:jl_value_t *	file:
jl_destroy_timing	src/timing.c	/^void jl_destroy_timing(void)$/;"	f	typeref:typename:void
jl_di_func_null_sig	src/codegen.cpp	/^static DISubroutineType *jl_di_func_null_sig;$/;"	v	typeref:typename:DISubroutineType *	file:
jl_di_func_sig	src/codegen.cpp	/^static DISubroutineType *jl_di_func_sig;$/;"	v	typeref:typename:DISubroutineType *	file:
jl_disable_sigint_time	src/signal-handling.c	/^static uint64_t jl_disable_sigint_time = 0;$/;"	v	typeref:typename:uint64_t	file:
jl_diverror_exception	src/jltypes.c	/^JL_DLLEXPORT jl_value_t *jl_diverror_exception;$/;"	v	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_dl_handle	src/init.c	/^JL_DLLEXPORT void *jl_dl_handle;$/;"	v	typeref:typename:JL_DLLEXPORT void *
jl_dlclose	src/dlload.c	/^JL_DLLEXPORT int jl_dlclose(void *handle)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_dlerror	src/dlload.c	/^static const char * jl_dlerror(void)$/;"	f	typeref:typename:const char *	file:
jl_dlfind_win32	src/dlload.c	/^const char *jl_dlfind_win32(const char *f_name)$/;"	f	typeref:typename:const char *
jl_dllist	src/sys.c	/^JL_DLLEXPORT int jl_dllist(jl_array_t *list)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_dlopen	src/dlload.c	/^JL_DLLEXPORT void *jl_dlopen(const char *filename, unsigned flags)$/;"	f	typeref:typename:JL_DLLEXPORT void *
jl_dlsym	src/dlload.c	/^JL_DLLEXPORT int jl_dlsym(void *handle, const char *symbol, void ** value, int throw_err)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_dt_layout_fields	src/julia.h	/^#define jl_dt_layout_fields(/;"	d
jl_dump_asm_internal	src/disasm.cpp	/^static void jl_dump_asm_internal($/;"	f	typeref:typename:void	file:
jl_dump_compiles	src/codegen.cpp	/^void jl_dump_compiles(void *s)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_dump_fptr_asm	src/disasm.cpp	/^jl_value_t *jl_dump_fptr_asm(uint64_t fptr, int raw_mc, const char* asm_variant, const char *deb/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_dump_function_asm	src/codegen.cpp	/^const jl_value_t *jl_dump_function_asm(void *f, int raw_mc, const char* asm_variant, const char /;"	f	typeref:typename:JL_DLLEXPORT const jl_value_t *
jl_dump_function_ir	src/disasm.cpp	/^jl_value_t *jl_dump_function_ir(void *f, bool strip_ir_metadata, bool dump_module, const char *d/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_dump_host_cpu	src/processor_arm.cpp	/^JL_DLLEXPORT void jl_dump_host_cpu(void)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_dump_host_cpu	src/processor_fallback.cpp	/^JL_DLLEXPORT void jl_dump_host_cpu(void)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_dump_host_cpu	src/processor_x86.cpp	/^JL_DLLEXPORT void jl_dump_host_cpu(void)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_dump_llvm_debugloc	src/codegen.cpp	/^extern "C" void jl_dump_llvm_debugloc(void *v)$/;"	f	typeref:typename:void
jl_dump_llvm_inst_function	src/codegen.cpp	/^extern "C" void jl_dump_llvm_inst_function(void *v)$/;"	f	typeref:typename:void
jl_dump_llvm_metadata	src/codegen.cpp	/^extern "C" void jl_dump_llvm_metadata(void *v)$/;"	f	typeref:typename:void
jl_dump_llvm_module	src/codegen.cpp	/^extern "C" void jl_dump_llvm_module(void *v)$/;"	f	typeref:typename:void
jl_dump_llvm_type	src/codegen.cpp	/^extern "C" void jl_dump_llvm_type(void *v)$/;"	f	typeref:typename:void
jl_dump_llvm_value	src/codegen.cpp	/^extern "C" void jl_dump_llvm_value(void *v)$/;"	f	typeref:typename:void
jl_dump_native	src/anticodegen.c	/^void jl_dump_native(const char *bc_fname, const char *unopt_bc_fname, const char *obj_fname, con/;"	f	typeref:typename:void
jl_dump_native	src/jitlayers.cpp	/^void jl_dump_native(const char *bc_fname, const char *unopt_bc_fname, const char *obj_fname, con/;"	f	typeref:typename:void
jl_dylib_DI_for_fptr	src/debuginfo.cpp	/^bool jl_dylib_DI_for_fptr(size_t pointer, const llvm::object::ObjectFile **obj, llvm::DIContext /;"	f	typeref:typename:bool
jl_egal	src/builtins.c	/^JL_DLLEXPORT int jl_egal(jl_value_t *a JL_MAYBE_UNROOTED, jl_value_t *b JL_MAYBE_UNROOTED) JL_NO/;"	f	typeref:typename:JL_DLLEXPORT int
jl_eh_restore_state	src/rtutils.c	/^JL_DLLEXPORT void jl_eh_restore_state(jl_handler_t *eh)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_emit_and_add_to_shadow	src/jitlayers.cpp	/^void** jl_emit_and_add_to_shadow(GlobalVariable *gv, void *gvarinit)$/;"	f	typeref:typename:void **
jl_emptysvec	src/jltypes.c	/^jl_svec_t *jl_emptysvec;$/;"	v	typeref:typename:jl_svec_t *
jl_emptytuple	src/jltypes.c	/^JL_DLLEXPORT jl_value_t *jl_emptytuple;$/;"	v	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_emptytuple_type	src/jltypes.c	/^jl_datatype_t *jl_emptytuple_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_enqueue_task	src/partr.c	/^JL_DLLEXPORT int jl_enqueue_task(jl_task_t *task)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_enter_handler	src/rtutils.c	/^JL_DLLEXPORT void jl_enter_handler(jl_handler_t *eh)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_environ	src/sys.c	/^JL_DLLEXPORT jl_value_t *jl_environ(int i)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_eof_error	src/rtutils.c	/^JL_DLLEXPORT void JL_NORETURN jl_eof_error(void)$/;"	f	typeref:typename:JL_DLLEXPORT void JL_NORETURN
jl_eqtable_get	src/table.c	/^jl_value_t *jl_eqtable_get(jl_array_t *h, jl_value_t *key, jl_value_t *deflt)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_eqtable_nextind	src/table.c	/^size_t jl_eqtable_nextind(jl_array_t *t, size_t i)$/;"	f	typeref:typename:JL_DLLEXPORT size_t
jl_eqtable_pop	src/table.c	/^jl_value_t *jl_eqtable_pop(jl_array_t *h, jl_value_t *key, jl_value_t *deflt, int *found)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_eqtable_put	src/table.c	/^jl_array_t *jl_eqtable_put(jl_array_t *h, jl_value_t *key, jl_value_t *val, int *p_inserted)$/;"	f	typeref:typename:JL_DLLEXPORT jl_array_t *
jl_errno	src/sys.c	/^JL_DLLEXPORT int jl_errno(void) { return errno; }$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_error	src/rtutils.c	/^JL_DLLEXPORT void JL_NORETURN jl_error(const char *str)$/;"	f	typeref:typename:JL_DLLEXPORT void JL_NORETURN
jl_errorexception_type	src/jltypes.c	/^jl_datatype_t *jl_errorexception_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_errorf	src/rtutils.c	/^JL_DLLEXPORT void JL_NORETURN jl_errorf(const char *fmt, ...)$/;"	f	typeref:typename:JL_DLLEXPORT void JL_NORETURN
jl_eval_dot_expr	src/toplevel.c	/^static jl_value_t *jl_eval_dot_expr(jl_module_t *m, jl_value_t *x, jl_value_t *f, int fast)$/;"	f	typeref:typename:jl_value_t *	file:
jl_eval_errorf	src/toplevel.c	/^static void jl_eval_errorf(jl_module_t *m, const char* fmt, ...)$/;"	f	typeref:typename:void	file:
jl_eval_global_var	src/interpreter.c	/^SECT_INTERP jl_value_t *jl_eval_global_var(jl_module_t *m, jl_sym_t *e)$/;"	f	typeref:typename:SECT_INTERP jl_value_t *
jl_eval_module_expr	src/toplevel.c	/^jl_value_t *jl_eval_module_expr(jl_module_t *parent_module, jl_expr_t *ex)$/;"	f	typeref:typename:jl_value_t *
jl_eval_string	src/jlapi.c	/^JL_DLLEXPORT jl_value_t *jl_eval_string(const char *str)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_exception_clear	src/jlapi.c	/^JL_DLLEXPORT void jl_exception_clear(void)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_exception_handler	src/signals-win.c	/^LONG WINAPI jl_exception_handler(struct _EXCEPTION_POINTERS *ExceptionInfo)$/;"	f	typeref:typename:LONG WINAPI
jl_exception_occurred	src/jlapi.c	/^JL_DLLEXPORT jl_value_t *jl_exception_occurred(void)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_exceptionf	src/rtutils.c	/^JL_DLLEXPORT void JL_NORETURN jl_exceptionf(jl_datatype_t *exception_type,$/;"	f	typeref:typename:JL_DLLEXPORT void JL_NORETURN
jl_excstack_bt_data	src/julia_internal.h	/^STATIC_INLINE uintptr_t *jl_excstack_bt_data(jl_excstack_t *stack, size_t itr) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE uintptr_t *
jl_excstack_bt_size	src/julia_internal.h	/^STATIC_INLINE size_t jl_excstack_bt_size(jl_excstack_t *stack, size_t itr) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE size_t
jl_excstack_exception	src/julia_internal.h	/^STATIC_INLINE jl_value_t *jl_excstack_exception(jl_excstack_t *stack JL_PROPAGATES_ROOT,$/;"	f	typeref:typename:STATIC_INLINE jl_value_t *
jl_excstack_next	src/julia_internal.h	/^STATIC_INLINE size_t jl_excstack_next(jl_excstack_t *stack, size_t itr) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE size_t
jl_excstack_raw	src/julia_internal.h	/^STATIC_INLINE uintptr_t *jl_excstack_raw(jl_excstack_t *stack) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE uintptr_t *
jl_excstack_state	src/rtutils.c	/^JL_DLLEXPORT size_t jl_excstack_state(void)$/;"	f	typeref:typename:JL_DLLEXPORT size_t
jl_excstack_state_func	src/codegen.cpp	/^static Function *jl_excstack_state_func;$/;"	v	typeref:typename:Function *	file:
jl_excstack_t	src/julia_internal.h	/^} jl_excstack_t;$/;"	t	typeref:struct:_jl_excstack_t
jl_excstack_t	src/julia_threads.h	/^typedef struct _jl_excstack_t jl_excstack_t;$/;"	t	typeref:struct:_jl_excstack_t
jl_exe_handle	src/init.c	/^JL_DLLEXPORT void *jl_exe_handle;$/;"	v	typeref:typename:JL_DLLEXPORT void *
jl_exit	src/jl_uv.c	/^JL_DLLEXPORT void jl_exit(int exitcode)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_exit_on_sigint	src/signal-handling.c	/^JL_DLLEXPORT void jl_exit_on_sigint(int on)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_exit_thread0	src/signals-mach.c	/^static void jl_exit_thread0(int exitstate)$/;"	f	typeref:typename:void	file:
jl_exit_thread0	src/signals-unix.c	/^static void jl_exit_thread0(int state)$/;"	f	typeref:typename:void	file:
jl_exit_thread0_cb	src/signals-unix.c	/^static void jl_exit_thread0_cb(void)$/;"	f	typeref:typename:void	file:
jl_expand	src/ast.c	/^JL_DLLEXPORT jl_value_t *jl_expand(jl_value_t *expr, jl_module_t *inmodule)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_expand_macros	src/ast.c	/^static jl_value_t *jl_expand_macros(jl_value_t *expr, jl_module_t *inmodule, struct macroctx_sta/;"	f	typeref:typename:jl_value_t *	file:
jl_expand_stmt	src/ast.c	/^JL_DLLEXPORT jl_value_t *jl_expand_stmt(jl_value_t *expr, jl_module_t *inmodule)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_expand_stmt_with_loc	src/ast.c	/^JL_DLLEXPORT jl_value_t *jl_expand_stmt_with_loc(jl_value_t *expr, jl_module_t *inmodule,$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_expand_with_loc	src/ast.c	/^JL_DLLEXPORT jl_value_t *jl_expand_with_loc(jl_value_t *expr, jl_module_t *inmodule,$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_expr_nargs	src/julia.h	/^#define jl_expr_nargs(/;"	d
jl_expr_t	src/julia.h	/^} jl_expr_t;$/;"	t	typeref:struct:__anon055fe4271408
jl_expr_type	src/jltypes.c	/^jl_datatype_t *jl_expr_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_exprarg	src/julia.h	/^#define jl_exprarg(/;"	d
jl_exprargset	src/julia.h	/^#define jl_exprargset(/;"	d
jl_extern_c	src/codegen.cpp	/^void jl_extern_c(jl_function_t *f, jl_value_t *rt, jl_value_t *argt, char *name)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_f_new_module	src/module.c	/^JL_DLLEXPORT jl_value_t *jl_f_new_module(jl_sym_t *name, uint8_t std_imports)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_false	src/jltypes.c	/^JL_DLLEXPORT jl_value_t *jl_false;$/;"	v	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_field_align	src/cgutils.cpp	/^static unsigned jl_field_align(jl_datatype_t *dt, size_t i)$/;"	f	typeref:typename:unsigned	file:
jl_field_index	src/datatype.c	/^JL_DLLEXPORT int jl_field_index(jl_datatype_t *t, jl_sym_t *fld, int err)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_field_isdefined	src/datatype.c	/^JL_DLLEXPORT int jl_field_isdefined(jl_value_t *v, size_t i)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_field_name	src/julia.h	/^STATIC_INLINE jl_sym_t *jl_field_name(jl_datatype_t *st, size_t i) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE jl_sym_t *
jl_field_names	src/julia.h	/^STATIC_INLINE jl_svec_t *jl_field_names(jl_datatype_t *st) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE jl_svec_t *
jl_field_type	src/julia.h	/^STATIC_INLINE jl_value_t *jl_field_type(jl_datatype_t *st JL_PROPAGATES_ROOT, size_t i)$/;"	f	typeref:typename:STATIC_INLINE jl_value_t *
jl_field_type_concrete	src/julia.h	/^STATIC_INLINE jl_value_t *jl_field_type_concrete(jl_datatype_t *st JL_PROPAGATES_ROOT, size_t i)/;"	f	typeref:typename:STATIC_INLINE jl_value_t *
jl_fielddesc16_t	src/julia.h	/^} jl_fielddesc16_t;$/;"	t	typeref:struct:__anon055fe4270d08
jl_fielddesc32_t	src/julia.h	/^} jl_fielddesc32_t;$/;"	t	typeref:struct:__anon055fe4270e08
jl_fielddesc8_t	src/julia.h	/^} jl_fielddesc8_t;$/;"	t	typeref:struct:__anon055fe4270c08
jl_fielddesc_size	src/julia.h	/^static inline uint32_t jl_fielddesc_size(int8_t fielddesc_type) JL_NOTSAFEPOINT$/;"	f	typeref:typename:uint32_t
jl_fielddescdyn_t	src/julia_gcext.h	/^} jl_fielddescdyn_t;$/;"	t	typeref:struct:__anonc2cfca210108
jl_fieldref	src/julia.h	/^#define jl_fieldref(/;"	d
jl_fieldref_noalloc	src/julia.h	/^#define jl_fieldref_noalloc(/;"	d
jl_filename	src/toplevel.c	/^JL_DLLEXPORT const char *jl_filename = "none"; \/\/ need to update jl_critical_error if this is /;"	v	typeref:typename:JL_DLLEXPORT const char *
jl_finalize	src/gc.c	/^JL_DLLEXPORT void jl_finalize(jl_value_t *o)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_finalize_deserializer	src/dump.c	/^static jl_array_t *jl_finalize_deserializer(jl_serializer_state *s, arraylist_t *tracee_list)$/;"	f	typeref:typename:jl_array_t *	file:
jl_finalize_deserializer	src/staticdata.c	/^static void jl_finalize_deserializer(jl_serializer_state *s)$/;"	f	typeref:typename:void	file:
jl_finalize_function	src/jitlayers.cpp	/^static void jl_finalize_function(const std::string &F, Module *collector)$/;"	f	typeref:typename:void	file:
jl_finalize_function	src/jitlayers.cpp	/^void jl_finalize_function(StringRef F)$/;"	f	typeref:typename:void
jl_finalize_module	src/jitlayers.cpp	/^void jl_finalize_module(Module *m, bool shadow)$/;"	f	typeref:typename:void
jl_finalize_serializer	src/dump.c	/^static void jl_finalize_serializer(jl_serializer_state *s)$/;"	f	typeref:typename:void	file:
jl_finalize_serializer	src/staticdata.c	/^static void jl_finalize_serializer(jl_serializer_state *s)$/;"	f	typeref:typename:void	file:
jl_finalize_th	src/gc.c	/^JL_DLLEXPORT void jl_finalize_th(jl_ptls_t ptls, jl_value_t *o)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_find_free_typevars	src/jltypes.c	/^JL_DLLEXPORT jl_array_t *jl_find_free_typevars(jl_value_t *v)$/;"	f	typeref:typename:JL_DLLEXPORT jl_array_t *
jl_find_ptr	src/staticdata.c	/^jl_value_t *jl_find_ptr = NULL;$/;"	v	typeref:typename:jl_value_t *
jl_find_union_component	src/jltypes.c	/^int jl_find_union_component(jl_value_t *haystack, jl_value_t *needle, unsigned *nth) JL_NOTSAFEP/;"	f	typeref:typename:int
jl_finish_task	src/task.c	/^void JL_NORETURN jl_finish_task(jl_task_t *t, jl_value_t *resultval JL_MAYBE_UNROOTED)$/;"	f	typeref:typename:void JL_NORETURN
jl_fintrinsic_1	src/runtime_intrinsics.c	/^static inline jl_value_t *jl_fintrinsic_1(jl_value_t *ty, jl_value_t *a, const char *name, fintr/;"	f	typeref:typename:jl_value_t *	file:
jl_first_argument_datatype	src/rtutils.c	/^JL_DLLEXPORT jl_datatype_t *jl_first_argument_datatype(jl_value_t *argtypes JL_PROPAGATES_ROOT) /;"	f	typeref:typename:JL_DLLEXPORT jl_datatype_t *
jl_float16_type	src/jltypes.c	/^jl_datatype_t *jl_float16_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_float32_type	src/jltypes.c	/^jl_datatype_t *jl_float32_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_float64_type	src/jltypes.c	/^jl_datatype_t *jl_float64_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_floatingpoint_type	src/jltypes.c	/^jl_datatype_t *jl_floatingpoint_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_flush_cstdio	src/rtutils.c	/^JL_DLLEXPORT void jl_flush_cstdio(void) JL_NOTSAFEPOINT$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_forceclose_uv	src/jl_uv.c	/^JL_DLLEXPORT void jl_forceclose_uv(uv_handle_t *handle)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_foreach_reachable_mtable	src/gf.c	/^void jl_foreach_reachable_mtable(void (*visit)(jl_methtable_t *mt, void *env), void *env)$/;"	f	typeref:typename:void
jl_format_filename	src/runtime_ccall.cpp	/^extern "C" JL_DLLEXPORT char *jl_format_filename(const char *output_pattern)$/;"	f	typeref:typename:JL_DLLEXPORT char *
jl_format_filename	src/runtime_ccall.cpp	/^std::string jl_format_filename(StringRef output_pattern)$/;"	f	typeref:typename:std::string
jl_fptr_args	src/gf.c	/^JL_DLLEXPORT jl_value_t *jl_fptr_args(jl_value_t *f, jl_value_t **args, uint32_t nargs, jl_code_/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_fptr_args_t	src/julia.h	/^typedef jl_value_t *(*jl_fptr_args_t)(jl_value_t*, jl_value_t**, uint32_t);$/;"	t	typeref:typename:jl_value_t * (*)(jl_value_t *,jl_value_t **,uint32_t)
jl_fptr_const_return	src/gf.c	/^JL_DLLEXPORT jl_value_t *jl_fptr_const_return(jl_value_t *f, jl_value_t **args, uint32_t nargs, /;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_fptr_id	src/staticdata.c	/^static uintptr_t jl_fptr_id(void *fptr)$/;"	f	typeref:typename:uintptr_t	file:
jl_fptr_interpret_call	src/interpreter.c	/^SECT_INTERP jl_value_t *jl_fptr_interpret_call(jl_value_t *f, jl_value_t **args, uint32_t nargs,/;"	f	typeref:typename:SECT_INTERP jl_value_t *
jl_fptr_sparam	src/gf.c	/^JL_DLLEXPORT jl_value_t *jl_fptr_sparam(jl_value_t *f, jl_value_t **args, uint32_t nargs, jl_cod/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_fptr_sparam_t	src/julia.h	/^typedef jl_value_t *(*jl_fptr_sparam_t)(jl_value_t*, jl_value_t**, uint32_t, jl_svec_t*);$/;"	t	typeref:typename:jl_value_t * (*)(jl_value_t *,jl_value_t **,uint32_t,jl_svec_t *)
jl_fptr_to_llvm	src/anticodegen.c	/^void jl_fptr_to_llvm(void *fptr, jl_method_instance_t *lam, int specsig) { }$/;"	f	typeref:typename:void
jl_fptr_to_llvm	src/codegen.cpp	/^extern "C" void jl_fptr_to_llvm(void *fptr, jl_code_instance_t *lam, int specsig)$/;"	f	typeref:typename:void
jl_frame_t	src/julia_internal.h	/^} jl_frame_t;$/;"	t	typeref:struct:__anon9dd660c30108
jl_free	src/gc.c	/^JL_DLLEXPORT void jl_free(void *p)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_free_aligned	src/julia_internal.h	/^STATIC_INLINE void jl_free_aligned(void *p) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE void
jl_free_stack	src/gc-stacks.c	/^JL_DLLEXPORT void jl_free_stack(void *stkbuf, size_t bufsz)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_fs_chmod	src/jl_uv.c	/^JL_DLLEXPORT int jl_fs_chmod(char *path, int mode)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_fs_chown	src/jl_uv.c	/^JL_DLLEXPORT int jl_fs_chown(char *path, int uid, int gid)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_fs_close	src/jl_uv.c	/^JL_DLLEXPORT int jl_fs_close(uv_os_fd_t handle)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_fs_read	src/jl_uv.c	/^JL_DLLEXPORT int jl_fs_read(uv_os_fd_t handle, char *data, size_t len)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_fs_read_byte	src/jl_uv.c	/^JL_DLLEXPORT int jl_fs_read_byte(uv_os_fd_t handle)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_fs_rename	src/jl_uv.c	/^JL_DLLEXPORT int jl_fs_rename(const char *src_path, const char *dst_path)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_fs_sendfile	src/jl_uv.c	/^JL_DLLEXPORT int jl_fs_sendfile(uv_os_fd_t src_fd, uv_os_fd_t dst_fd,$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_fs_symlink	src/jl_uv.c	/^JL_DLLEXPORT int jl_fs_symlink(char *path, char *new_path, int flags)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_fs_unlink	src/jl_uv.c	/^JL_DLLEXPORT int jl_fs_unlink(char *path)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_fs_write	src/jl_uv.c	/^JL_DLLEXPORT int jl_fs_write(uv_os_fd_t handle, const char *data, size_t len,$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_fstat	src/sys.c	/^JL_DLLEXPORT int32_t jl_fstat(uv_os_fd_t fd, char *statbuf)$/;"	f	typeref:typename:JL_DLLEXPORT int32_t
jl_ftruncate	src/sys.c	/^JL_DLLEXPORT int jl_ftruncate(int fd, int64_t length)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_func_sig	src/codegen.cpp	/^static FunctionType *jl_func_sig;$/;"	v	typeref:typename:FunctionType *	file:
jl_func_sig_sparams	src/codegen.cpp	/^static FunctionType *jl_func_sig_sparams;$/;"	v	typeref:typename:FunctionType *	file:
jl_function_ptr	src/codegen.cpp	/^void *jl_function_ptr(jl_function_t *f, jl_value_t *rt, jl_value_t *argt)$/;"	f	typeref:typename:JL_DLLEXPORT void *
jl_function_ptr_by_llvm_name	src/codegen.cpp	/^void *jl_function_ptr_by_llvm_name(char *name) {$/;"	f	typeref:typename:JL_DLLEXPORT void *
jl_function_t	src/julia.h	/^typedef jl_value_t jl_function_t;$/;"	t	typeref:typename:jl_value_t
jl_function_type	src/jltypes.c	/^jl_datatype_t *jl_function_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_gc_add_finalizer	src/gc.c	/^JL_DLLEXPORT void jl_gc_add_finalizer(jl_value_t *v, jl_function_t *f)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_gc_add_finalizer_th	src/gc.c	/^JL_DLLEXPORT void jl_gc_add_finalizer_th(jl_ptls_t ptls, jl_value_t *v, jl_function_t *f)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_gc_add_ptr_finalizer	src/gc.c	/^JL_DLLEXPORT void jl_gc_add_ptr_finalizer(jl_ptls_t ptls, jl_value_t *v, void *f)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_gc_alignment	src/julia_internal.h	/^STATIC_INLINE int jl_gc_alignment(size_t sz)$/;"	f	typeref:typename:STATIC_INLINE int
jl_gc_alloc	src/julia_internal.h	/^#  define jl_gc_alloc(/;"	d
jl_gc_alloc_	src/julia_internal.h	/^STATIC_INLINE jl_value_t *jl_gc_alloc_(jl_ptls_t ptls, size_t sz, void *ty)$/;"	f	typeref:typename:STATIC_INLINE jl_value_t *
jl_gc_alloc_0w	src/gc.c	/^JL_DLLEXPORT jl_value_t *jl_gc_alloc_0w(void)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_gc_alloc_1w	src/gc.c	/^JL_DLLEXPORT jl_value_t *jl_gc_alloc_1w(void)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_gc_alloc_2w	src/gc.c	/^JL_DLLEXPORT jl_value_t *jl_gc_alloc_2w(void)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_gc_alloc_3w	src/gc.c	/^JL_DLLEXPORT jl_value_t *jl_gc_alloc_3w(void)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_gc_alloc_buf	src/julia_internal.h	/^STATIC_INLINE jl_gc_tracked_buffer_t *jl_gc_alloc_buf(jl_ptls_t ptls, size_t sz)$/;"	f	typeref:typename:STATIC_INLINE jl_gc_tracked_buffer_t *
jl_gc_alloc_new_page	src/gc-pages.c	/^static jl_gc_pagemeta_t *jl_gc_alloc_new_page(void) JL_NOTSAFEPOINT$/;"	f	typeref:typename:jl_gc_pagemeta_t *	file:
jl_gc_alloc_page	src/gc-pages.c	/^NOINLINE jl_gc_pagemeta_t *jl_gc_alloc_page(void) JL_NOTSAFEPOINT$/;"	f	typeref:typename:NOINLINE jl_gc_pagemeta_t *
jl_gc_alloc_typed	src/gc.c	/^JL_DLLEXPORT void * jl_gc_alloc_typed(jl_ptls_t ptls, size_t sz, void *ty)$/;"	f	typeref:typename:JL_DLLEXPORT void *
jl_gc_allocobj	src/gc.c	/^JL_DLLEXPORT jl_value_t *jl_gc_allocobj(size_t sz)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_gc_big_alloc	src/gc.c	/^JL_DLLEXPORT jl_value_t *jl_gc_big_alloc(jl_ptls_t ptls, size_t sz)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_gc_callback_list_t	src/gc.c	/^typedef struct jl_gc_callback_list_t {$/;"	s	file:
jl_gc_callback_list_t	src/gc.c	/^} jl_gc_callback_list_t;$/;"	t	typeref:struct:jl_gc_callback_list_t	file:
jl_gc_cb_func_t	src/gc.c	/^typedef void (*jl_gc_cb_func_t)(void);$/;"	t	typeref:typename:void (*)(void)	file:
jl_gc_cb_notify_external_alloc_t	src/julia_gcext.h	/^typedef void (*jl_gc_cb_notify_external_alloc_t)(void *addr, size_t size);$/;"	t	typeref:typename:void (*)(void * addr,size_t size)
jl_gc_cb_notify_external_free_t	src/julia_gcext.h	/^typedef void (*jl_gc_cb_notify_external_free_t)(void *addr);$/;"	t	typeref:typename:void (*)(void * addr)
jl_gc_cb_post_gc_t	src/julia_gcext.h	/^typedef void (*jl_gc_cb_post_gc_t)(int full);$/;"	t	typeref:typename:void (*)(int full)
jl_gc_cb_pre_gc_t	src/julia_gcext.h	/^typedef void (*jl_gc_cb_pre_gc_t)(int full);$/;"	t	typeref:typename:void (*)(int full)
jl_gc_cb_root_scanner_t	src/julia_gcext.h	/^typedef void (*jl_gc_cb_root_scanner_t)(int full);$/;"	t	typeref:typename:void (*)(int full)
jl_gc_cb_task_scanner_t	src/julia_gcext.h	/^typedef void (*jl_gc_cb_task_scanner_t)(jl_task_t *task, int full);$/;"	t	typeref:typename:void (*)(jl_task_t * task,int full)
jl_gc_classify_pools	src/gc.c	/^int jl_gc_classify_pools(size_t sz, int *osize)$/;"	f	typeref:typename:int
jl_gc_collect	src/gc.c	/^JL_DLLEXPORT void jl_gc_collect(int full)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_gc_conservative_gc_support_enabled	src/gc.c	/^JL_DLLEXPORT int jl_gc_conservative_gc_support_enabled(void)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_gc_count_allocd	src/gc.c	/^void jl_gc_count_allocd(size_t sz) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void
jl_gc_counted_calloc	src/gc.c	/^JL_DLLEXPORT void *jl_gc_counted_calloc(size_t nm, size_t sz)$/;"	f	typeref:typename:JL_DLLEXPORT void *
jl_gc_counted_free	src/gc.c	/^JL_DLLEXPORT void jl_gc_counted_free(void *p, size_t sz)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_gc_counted_free_with_size	src/gc.c	/^JL_DLLEXPORT void jl_gc_counted_free_with_size(void *p, size_t sz)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_gc_counted_malloc	src/gc.c	/^JL_DLLEXPORT void *jl_gc_counted_malloc(size_t sz)$/;"	f	typeref:typename:JL_DLLEXPORT void *
jl_gc_counted_realloc_with_old_size	src/gc.c	/^JL_DLLEXPORT void *jl_gc_counted_realloc_with_old_size(void *p, size_t old, size_t sz)$/;"	f	typeref:typename:JL_DLLEXPORT void *
jl_gc_debug_env	src/gc-debug.c	/^JL_DLLEXPORT jl_gc_debug_env_t jl_gc_debug_env = {$/;"	v	typeref:typename:JL_DLLEXPORT jl_gc_debug_env_t
jl_gc_debug_env_t	src/gc.h	/^} jl_gc_debug_env_t;$/;"	t	typeref:struct:__anoncf30557c0208
jl_gc_debug_tasks	src/gc-debug.c	/^static arraylist_t jl_gc_debug_tasks;$/;"	v	typeref:typename:arraylist_t	file:
jl_gc_deregister_callback	src/gc.c	/^static void jl_gc_deregister_callback(jl_gc_callback_list_t **list,$/;"	f	typeref:typename:void	file:
jl_gc_diff_total_bytes	src/gc.c	/^JL_DLLEXPORT int64_t jl_gc_diff_total_bytes(void)$/;"	f	typeref:typename:JL_DLLEXPORT int64_t
jl_gc_disable_counter	src/gc.c	/^static volatile uint32_t jl_gc_disable_counter = 0;$/;"	v	typeref:typename:volatile uint32_t	file:
jl_gc_enable	src/gc.c	/^JL_DLLEXPORT int jl_gc_enable(int on)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_gc_enable_conservative_gc_support	src/gc.c	/^JL_DLLEXPORT int jl_gc_enable_conservative_gc_support(void)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_gc_enable_finalizers	src/gc.c	/^JL_DLLEXPORT void jl_gc_enable_finalizers(jl_ptls_t ptls, int on)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_gc_external_obj_hdr_size	src/gc.c	/^JL_DLLEXPORT size_t jl_gc_external_obj_hdr_size(void)$/;"	f	typeref:typename:JL_DLLEXPORT size_t
jl_gc_find_taggedvalue_pool	src/gc-debug.c	/^JL_DLLEXPORT jl_taggedvalue_t *jl_gc_find_taggedvalue_pool(char *p, size_t *osize_p)$/;"	f	typeref:typename:JL_DLLEXPORT jl_taggedvalue_t *
jl_gc_force_mark_old	src/gc.c	/^void jl_gc_force_mark_old(jl_ptls_t ptls, jl_value_t *v) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void
jl_gc_free_array	src/gc.c	/^static void jl_gc_free_array(jl_array_t *a) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void	file:
jl_gc_free_page	src/gc-pages.c	/^void jl_gc_free_page(void *p) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void
jl_gc_init	src/gc.c	/^void jl_gc_init(void)$/;"	f	typeref:typename:void
jl_gc_init_page	src/gc-pages.c	/^void jl_gc_init_page(void)$/;"	f	typeref:typename:void
jl_gc_internal_obj_base_ptr	src/gc.c	/^JL_DLLEXPORT jl_value_t *jl_gc_internal_obj_base_ptr(void *p)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_gc_is_enabled	src/gc.c	/^JL_DLLEXPORT int jl_gc_is_enabled(void)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_gc_managed_malloc	src/gc.c	/^JL_DLLEXPORT void *jl_gc_managed_malloc(size_t sz)$/;"	f	typeref:typename:JL_DLLEXPORT void *
jl_gc_managed_realloc	src/gc.c	/^JL_DLLEXPORT void *jl_gc_managed_realloc(void *d, size_t sz, size_t oldsz,$/;"	f	typeref:typename:JL_DLLEXPORT void *
jl_gc_mark_cache_t	src/julia_threads.h	/^} jl_gc_mark_cache_t;$/;"	t	typeref:struct:__anonf8aecdb10808
jl_gc_mark_data_t	src/julia_threads.h	/^typedef union _jl_gc_mark_data jl_gc_mark_data_t;$/;"	t	typeref:union:_jl_gc_mark_data
jl_gc_mark_enqueued_tasks	src/partr.c	/^void jl_gc_mark_enqueued_tasks(jl_gc_mark_cache_t *gc_cache, jl_gc_mark_sp_t *sp)$/;"	f	typeref:typename:void
jl_gc_mark_queue_obj	src/gc.c	/^JL_DLLEXPORT int jl_gc_mark_queue_obj(jl_ptls_t ptls, jl_value_t *obj)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_gc_mark_queue_obj_explicit	src/gc.c	/^int jl_gc_mark_queue_obj_explicit(jl_gc_mark_cache_t *gc_cache, jl_gc_mark_sp_t *sp, jl_value_t /;"	f	typeref:typename:int
jl_gc_mark_queue_objarray	src/gc.c	/^JL_DLLEXPORT void jl_gc_mark_queue_objarray(jl_ptls_t ptls, jl_value_t *parent,$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_gc_mark_sp_t	src/julia_threads.h	/^} jl_gc_mark_sp_t;$/;"	t	typeref:struct:__anonf8aecdb10708
jl_gc_max_internal_obj_size	src/gc.c	/^JL_DLLEXPORT size_t jl_gc_max_internal_obj_size(void)$/;"	f	typeref:typename:JL_DLLEXPORT size_t
jl_gc_metadata_ext	src/gc.h	/^struct jl_gc_metadata_ext {$/;"	s
jl_gc_new_weakref	src/gc.c	/^JL_DLLEXPORT jl_weakref_t *jl_gc_new_weakref(jl_value_t *value)$/;"	f	typeref:typename:JL_DLLEXPORT jl_weakref_t *
jl_gc_new_weakref_th	src/gc.c	/^JL_DLLEXPORT jl_weakref_t *jl_gc_new_weakref_th(jl_ptls_t ptls,$/;"	f	typeref:typename:JL_DLLEXPORT jl_weakref_t *
jl_gc_num	src/gc.c	/^JL_DLLEXPORT jl_gc_num_t jl_gc_num(void)$/;"	f	typeref:typename:JL_DLLEXPORT jl_gc_num_t
jl_gc_num_t	src/gc.h	/^} jl_gc_num_t;$/;"	t	typeref:struct:__anoncf30557c0308
jl_gc_page_metadata	src/gc-debug.c	/^jl_gc_pagemeta_t *jl_gc_page_metadata(void *data)$/;"	f	typeref:typename:jl_gc_pagemeta_t *
jl_gc_pagemeta_t	src/gc.h	/^} jl_gc_pagemeta_t;$/;"	t	typeref:struct:__anoncf30557c1108
jl_gc_perm_alloc	src/gc.c	/^void *jl_gc_perm_alloc(size_t sz, int zero, unsigned align, unsigned offset)$/;"	f	typeref:typename:void *
jl_gc_perm_alloc_nolock	src/gc.c	/^void *jl_gc_perm_alloc_nolock(size_t sz, int zero, unsigned align, unsigned offset)$/;"	f	typeref:typename:void *
jl_gc_permobj	src/julia_internal.h	/^STATIC_INLINE jl_value_t *jl_gc_permobj(size_t sz, void *ty)$/;"	f	typeref:typename:STATIC_INLINE jl_value_t *
jl_gc_pool_alloc	src/gc.c	/^JL_DLLEXPORT jl_value_t *jl_gc_pool_alloc(jl_ptls_t ptls, int pool_offset,$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_gc_pool_t	src/julia_threads.h	/^} jl_gc_pool_t;$/;"	t	typeref:struct:__anonf8aecdb10408
jl_gc_premark	src/gc.c	/^static void jl_gc_premark(jl_ptls_t ptls2)$/;"	f	typeref:typename:void	file:
jl_gc_push_arraylist	src/gc.c	/^static void jl_gc_push_arraylist(jl_ptls_t ptls, arraylist_t *list)$/;"	f	typeref:typename:void	file:
jl_gc_queue_bt_buf	src/gc.c	/^static void jl_gc_queue_bt_buf(jl_gc_mark_cache_t *gc_cache, jl_gc_mark_sp_t *sp, jl_ptls_t ptls/;"	f	typeref:typename:void	file:
jl_gc_queue_remset	src/gc.c	/^static void jl_gc_queue_remset(jl_gc_mark_cache_t *gc_cache, jl_gc_mark_sp_t *sp, jl_ptls_t ptls/;"	f	typeref:typename:void	file:
jl_gc_queue_root	src/gc.c	/^JL_DLLEXPORT void jl_gc_queue_root(jl_value_t *ptr)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_gc_queue_thread_local	src/gc.c	/^static void jl_gc_queue_thread_local(jl_gc_mark_cache_t *gc_cache, jl_gc_mark_sp_t *sp,$/;"	f	typeref:typename:void	file:
jl_gc_realloc_string	src/gc.c	/^jl_value_t *jl_gc_realloc_string(jl_value_t *s, size_t sz)$/;"	f	typeref:typename:jl_value_t *
jl_gc_register_callback	src/gc.c	/^static void jl_gc_register_callback(jl_gc_callback_list_t **list,$/;"	f	typeref:typename:void	file:
jl_gc_reset_alloc_count	src/gc.c	/^void jl_gc_reset_alloc_count(void) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void
jl_gc_run_all_finalizers	src/gc.c	/^void jl_gc_run_all_finalizers(jl_ptls_t ptls)$/;"	f	typeref:typename:void
jl_gc_run_finalizers_in_list	src/gc.c	/^static void jl_gc_run_finalizers_in_list(jl_ptls_t ptls, arraylist_t *list)$/;"	f	typeref:typename:void	file:
jl_gc_run_finalizers_in_list	test/clangsa/GCPushPop.cpp	/^void jl_gc_run_finalizers_in_list(jl_ptls_t ptls, arraylist_t *list)$/;"	f	typeref:typename:void
jl_gc_running	src/safepoint.c	/^volatile uint32_t jl_gc_running = 0;$/;"	v	typeref:typename:volatile uint32_t
jl_gc_safe_enter	src/julia_threads.h	/^#define jl_gc_safe_enter(/;"	d
jl_gc_safe_leave	src/julia_threads.h	/^#define jl_gc_safe_leave(/;"	d
jl_gc_safepoint	src/julia_threads.h	/^JL_DLLEXPORT void (jl_gc_safepoint)(void);$/;"	v	typeref:typename:JL_DLLEXPORT void ()(void)
jl_gc_safepoint_	src/julia_threads.h	/^#define jl_gc_safepoint_(/;"	d
jl_gc_schedule_foreign_sweepfunc	src/gc.c	/^JL_DLLEXPORT void jl_gc_schedule_foreign_sweepfunc(jl_ptls_t ptls, jl_value_t *obj)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_gc_set_cb_notify_external_alloc	src/gc.c	/^JL_DLLEXPORT void jl_gc_set_cb_notify_external_alloc(jl_gc_cb_notify_external_alloc_t cb, int en/;"	f	typeref:typename:JL_DLLEXPORT void
jl_gc_set_cb_notify_external_free	src/gc.c	/^JL_DLLEXPORT void jl_gc_set_cb_notify_external_free(jl_gc_cb_notify_external_free_t cb, int enab/;"	f	typeref:typename:JL_DLLEXPORT void
jl_gc_set_cb_post_gc	src/gc.c	/^JL_DLLEXPORT void jl_gc_set_cb_post_gc(jl_gc_cb_post_gc_t cb, int enable)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_gc_set_cb_pre_gc	src/gc.c	/^JL_DLLEXPORT void jl_gc_set_cb_pre_gc(jl_gc_cb_pre_gc_t cb, int enable)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_gc_set_cb_root_scanner	src/gc.c	/^JL_DLLEXPORT void jl_gc_set_cb_root_scanner(jl_gc_cb_root_scanner_t cb, int enable)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_gc_set_cb_task_scanner	src/gc.c	/^JL_DLLEXPORT void jl_gc_set_cb_task_scanner(jl_gc_cb_task_scanner_t cb, int enable)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_gc_set_permalloc_region	src/gc.c	/^void jl_gc_set_permalloc_region(void *start, void *end)$/;"	f	typeref:typename:void
jl_gc_sizeclasses	src/julia_internal.h	/^static const int jl_gc_sizeclasses[] = {$/;"	v	typeref:typename:const int[]
jl_gc_state	src/julia_threads.h	/^#define jl_gc_state(/;"	d
jl_gc_state_save_and_set	src/julia_threads.h	/^STATIC_INLINE int8_t jl_gc_state_save_and_set(jl_ptls_t ptls,$/;"	f	typeref:typename:STATIC_INLINE int8_t
jl_gc_state_set	src/julia_threads.h	/^STATIC_INLINE int8_t jl_gc_state_set(jl_ptls_t ptls, int8_t state,$/;"	f	typeref:typename:STATIC_INLINE int8_t
jl_gc_sync_total_bytes	src/gc.c	/^void jl_gc_sync_total_bytes(void) {last_gc_total_bytes = jl_gc_total_bytes();}$/;"	f	typeref:typename:void
jl_gc_szclass	src/julia_internal.h	/^STATIC_INLINE uint8_t JL_CONST_FUNC jl_gc_szclass(unsigned sz)$/;"	f	typeref:typename:STATIC_INLINE uint8_t JL_CONST_FUNC
jl_gc_total_bytes	src/gc.c	/^JL_DLLEXPORT int64_t jl_gc_total_bytes(void)$/;"	f	typeref:typename:JL_DLLEXPORT int64_t
jl_gc_total_hrtime	src/gc.c	/^JL_DLLEXPORT uint64_t jl_gc_total_hrtime(void)$/;"	f	typeref:typename:JL_DLLEXPORT uint64_t
jl_gc_track_malloced_array	src/gc.c	/^void jl_gc_track_malloced_array(jl_ptls_t ptls, jl_array_t *a) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void
jl_gc_tracked_buffer_t	src/julia_internal.h	/^typedef void jl_gc_tracked_buffer_t; \/\/ For the benefit of the static analyzer$/;"	t	typeref:typename:void
jl_gc_try_alloc_pages	src/gc-pages.c	/^static char *jl_gc_try_alloc_pages(int pg_cnt) JL_NOTSAFEPOINT$/;"	f	typeref:typename:char *	file:
jl_gc_unsafe_enter	src/julia_threads.h	/^#define jl_gc_unsafe_enter(/;"	d
jl_gc_unsafe_leave	src/julia_threads.h	/^#define jl_gc_unsafe_leave(/;"	d
jl_gc_wait_for_the_world	src/gc.c	/^static void jl_gc_wait_for_the_world(void)$/;"	f	typeref:typename:void	file:
jl_gc_wb	src/julia.h	/^STATIC_INLINE void jl_gc_wb(void *parent, void *ptr) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE void
jl_gc_wb_back	src/julia.h	/^STATIC_INLINE void jl_gc_wb_back(void *ptr) JL_NOTSAFEPOINT \/\/ ptr isa jl_value_t*$/;"	f	typeref:typename:STATIC_INLINE void
jl_gc_wb_binding	src/julia_internal.h	/^STATIC_INLINE void jl_gc_wb_binding(jl_binding_t *bnd, void *val) JL_NOTSAFEPOINT \/\/ val isa j/;"	f	typeref:typename:STATIC_INLINE void
jl_gc_wb_buf	src/julia_internal.h	/^STATIC_INLINE void jl_gc_wb_buf(void *parent, void *bufptr, size_t minsz) JL_NOTSAFEPOINT \/\/ p/;"	f	typeref:typename:STATIC_INLINE void
jl_gcframe_t	src/julia.h	/^} jl_gcframe_t;$/;"	t	typeref:struct:_jl_gcframe_t
jl_gdb_dump_threadinfo	src/task.c	/^JL_DLLEXPORT void jl_gdb_dump_threadinfo(void)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_gdblookup	src/stackwalk.c	/^JL_DLLEXPORT void jl_gdblookup(uintptr_t ip)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_gdblookuplinfo	src/debuginfo.cpp	/^extern "C" jl_method_instance_t *jl_gdblookuplinfo(void *p) JL_NOTSAFEPOINT$/;"	f	typeref:typename:jl_method_instance_t *
jl_generate_fptr	src/anticodegen.c	/^jl_callptr_t jl_generate_fptr(jl_method_instance_t **pli, jl_llvm_functions_t decls, size_t worl/;"	f	typeref:typename:jl_callptr_t
jl_generate_fptr	src/codegen.cpp	/^void jl_generate_fptr(jl_code_instance_t *output)$/;"	f	typeref:typename:void
jl_generating_output	src/precompile.c	/^JL_DLLEXPORT int jl_generating_output(void)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_generic_function_def	src/method.c	/^JL_DLLEXPORT jl_value_t *jl_generic_function_def(jl_sym_t *name,$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_generic_specptr_t	src/julia.h	/^} jl_generic_specptr_t;$/;"	t	typeref:union:__anon055fe427060a
jl_gensym	src/symbol.c	/^JL_DLLEXPORT jl_sym_t *jl_gensym(void)$/;"	f	typeref:typename:JL_DLLEXPORT jl_sym_t *
jl_getDylibFunctionInfo	src/debuginfo.cpp	/^static int jl_getDylibFunctionInfo(jl_frame_t **frames, size_t pointer, int skipC, int noInline)$/;"	f	typeref:typename:int	file:
jl_getFunctionInfo	src/anticodegen.c	/^int jl_getFunctionInfo(jl_frame_t **frames, uintptr_t pointer, int skipC, int noInline)$/;"	f	typeref:typename:int
jl_getFunctionInfo	src/debuginfo.cpp	/^int jl_getFunctionInfo(jl_frame_t **frames_out, size_t pointer, int skipC, int noInline) JL_NOTS/;"	f	typeref:typename:int
jl_getUnwindInfo	src/debuginfo.cpp	/^uint64_t jl_getUnwindInfo(uint64_t dwAddr)$/;"	f	typeref:typename:uint64_t
jl_get_ARCH	src/sys.c	/^JL_DLLEXPORT jl_sym_t *jl_get_ARCH(void)$/;"	f	typeref:typename:JL_DLLEXPORT jl_sym_t *
jl_get_JIT	src/runtime_ccall.cpp	/^jl_value_t *jl_get_JIT(void)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_get_LLVM_VERSION	src/anticodegen.c	/^JL_DLLEXPORT uint32_t jl_get_LLVM_VERSION(void)$/;"	f	typeref:typename:JL_DLLEXPORT uint32_t
jl_get_LLVM_VERSION	src/intrinsics.cpp	/^JL_DLLEXPORT uint32_t jl_get_LLVM_VERSION(void)$/;"	f	typeref:typename:JL_DLLEXPORT uint32_t
jl_get_UNAME	src/sys.c	/^JL_DLLEXPORT jl_sym_t *jl_get_UNAME(void)$/;"	f	typeref:typename:JL_DLLEXPORT jl_sym_t *
jl_get_backtrace	src/stackwalk.c	/^JL_DLLEXPORT void jl_get_backtrace(jl_array_t **btout, jl_array_t **bt2out)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_get_binding	src/module.c	/^JL_DLLEXPORT jl_binding_t *jl_get_binding(jl_module_t *m, jl_sym_t *var)$/;"	f	typeref:typename:JL_DLLEXPORT jl_binding_t *
jl_get_binding_	src/module.c	/^static jl_binding_t *jl_get_binding_(jl_module_t *m, jl_sym_t *var, modstack_t *st)$/;"	f	typeref:typename:jl_binding_t *	file:
jl_get_binding_for_method_def	src/module.c	/^JL_DLLEXPORT jl_binding_t *jl_get_binding_for_method_def(jl_module_t *m, jl_sym_t *var)$/;"	f	typeref:typename:JL_DLLEXPORT jl_binding_t *
jl_get_binding_or_error	src/module.c	/^JL_DLLEXPORT jl_binding_t *jl_get_binding_or_error(jl_module_t *m, jl_sym_t *var)$/;"	f	typeref:typename:JL_DLLEXPORT jl_binding_t *
jl_get_binding_wr	src/module.c	/^JL_DLLEXPORT jl_binding_t *jl_get_binding_wr(jl_module_t *m, jl_sym_t *var, int error)$/;"	f	typeref:typename:JL_DLLEXPORT jl_binding_t *
jl_get_cfunction_trampoline	src/runtime_ccall.cpp	/^jl_value_t *jl_get_cfunction_trampoline($/;"	f
jl_get_cpu_features_llvm	src/runtime_ccall.cpp	/^std::string jl_get_cpu_features_llvm(void)$/;"	f	typeref:typename:std::string
jl_get_cpu_name	src/processor_arm.cpp	/^JL_DLLEXPORT jl_value_t *jl_get_cpu_name(void)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_get_cpu_name	src/processor_fallback.cpp	/^JL_DLLEXPORT jl_value_t *jl_get_cpu_name(void)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_get_cpu_name	src/processor_x86.cpp	/^JL_DLLEXPORT jl_value_t *jl_get_cpu_name(void)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_get_cpu_name_llvm	src/runtime_ccall.cpp	/^std::string jl_get_cpu_name_llvm(void)$/;"	f	typeref:typename:std::string
jl_get_current_task	src/task.c	/^JL_DLLEXPORT jl_value_t *jl_get_current_task(void)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_get_default_sysimg_path	src/jloptions.c	/^JL_DLLEXPORT const char *jl_get_default_sysimg_path(void)$/;"	f	typeref:typename:JL_DLLEXPORT const char *
jl_get_dep_message_binding	src/module.c	/^jl_binding_t *jl_get_dep_message_binding(jl_module_t *m, jl_binding_t *deprecated_binding)$/;"	f	typeref:typename:jl_binding_t *
jl_get_dobj_data	src/debuginfo.cpp	/^JL_DLLEXPORT jl_value_t *jl_get_dobj_data(uint64_t fptr)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_get_exceptionf	src/rtutils.c	/^jl_value_t *jl_get_exceptionf(jl_datatype_t *exception_type,$/;"	f	typeref:typename:jl_value_t *
jl_get_excstack	src/stackwalk.c	/^JL_DLLEXPORT jl_value_t *jl_get_excstack(jl_task_t* task, int include_bt, int max_entries)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_get_fenv_consts	src/jlapi.c	/^JL_DLLEXPORT void jl_get_fenv_consts(int *ret)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_get_field	src/jlapi.c	/^JL_DLLEXPORT jl_value_t *jl_get_field(jl_value_t *o, const char *fld)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_get_field_offset	src/datatype.c	/^JL_DLLEXPORT size_t jl_get_field_offset(jl_datatype_t *ty, int field)$/;"	f	typeref:typename:JL_DLLEXPORT size_t
jl_get_fieldtypes	src/julia.h	/^#define jl_get_fieldtypes(/;"	d
jl_get_frame_addr	src/julia_internal.h	/^STATIC_INLINE void *jl_get_frame_addr(void)$/;"	f	typeref:typename:STATIC_INLINE void *
jl_get_function	src/julia.h	/^STATIC_INLINE jl_function_t *jl_get_function(jl_module_t *m, const char *name)$/;"	f	typeref:typename:STATIC_INLINE jl_function_t *
jl_get_global	src/module.c	/^JL_DLLEXPORT jl_value_t *jl_get_global(jl_module_t *m, jl_sym_t *var)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_get_global_for	src/jitlayers.cpp	/^GlobalVariable *jl_get_global_for(const char *cname, void *addr, Module *M)$/;"	f	typeref:typename:GlobalVariable *
jl_get_globalvar	src/jitlayers.cpp	/^void* jl_get_globalvar(GlobalVariable *gv)$/;"	f	typeref:typename:void *
jl_get_gs_ctr	src/symbol.c	/^uint32_t jl_get_gs_ctr(void) { return gs_ctr; }$/;"	f	typeref:typename:uint32_t
jl_get_image_file	src/jlapi.c	/^JL_DLLEXPORT jl_value_t *jl_get_image_file(void)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_get_invoke_lambda	src/gf.c	/^JL_DLLEXPORT jl_value_t *jl_get_invoke_lambda(jl_typemap_entry_t *entry, jl_value_t *tt)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_get_julia_bin	src/jlapi.c	/^JL_DLLEXPORT jl_value_t *jl_get_julia_bin(void)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_get_julia_bindir	src/jlapi.c	/^JL_DLLEXPORT jl_value_t *jl_get_julia_bindir(void)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_get_keyword_sorter	src/rtutils.c	/^JL_DLLEXPORT jl_value_t *jl_get_keyword_sorter(jl_value_t *f)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_get_kwsorter	src/gf.c	/^JL_DLLEXPORT jl_function_t *jl_get_kwsorter(jl_value_t *ty)$/;"	f	typeref:typename:JL_DLLEXPORT jl_function_t *
jl_get_layout	src/datatype.c	/^static jl_datatype_layout_t *jl_get_layout(uint32_t nfields,$/;"	f	typeref:typename:jl_datatype_layout_t *	file:
jl_get_library	src/runtime_ccall.cpp	/^void *jl_get_library(const char *f_lib)$/;"	f	typeref:typename:void *
jl_get_llvm_clone_targets	src/processor_arm.cpp	/^std::vector<jl_target_spec_t> jl_get_llvm_clone_targets(void)$/;"	f	typeref:typename:std::vector<jl_target_spec_t>
jl_get_llvm_clone_targets	src/processor_fallback.cpp	/^std::vector<jl_target_spec_t> jl_get_llvm_clone_targets(void)$/;"	f	typeref:typename:std::vector<jl_target_spec_t>
jl_get_llvm_clone_targets	src/processor_x86.cpp	/^std::vector<jl_target_spec_t> jl_get_llvm_clone_targets(void)$/;"	f	typeref:typename:std::vector<jl_target_spec_t>
jl_get_llvm_disasm_target	src/processor_arm.cpp	/^const std::pair<std::string,std::string> &jl_get_llvm_disasm_target(void)$/;"	f	typeref:typename:const std::pair<std::string,std::string> &
jl_get_llvm_disasm_target	src/processor_fallback.cpp	/^const std::pair<std::string,std::string> &jl_get_llvm_disasm_target(void)$/;"	f	typeref:typename:const std::pair<std::string,std::string> &
jl_get_llvm_disasm_target	src/processor_x86.cpp	/^const std::pair<std::string,std::string> &jl_get_llvm_disasm_target(void)$/;"	f	typeref:typename:const std::pair<std::string,std::string> &
jl_get_llvm_fptr	src/codegen.cpp	/^uint64_t jl_get_llvm_fptr(void *function)$/;"	f	typeref:typename:JL_DLLEXPORT uint64_t
jl_get_llvm_gv	src/jitlayers.cpp	/^extern "C" int32_t jl_get_llvm_gv(jl_value_t *p)$/;"	f	typeref:typename:int32_t
jl_get_llvm_target	src/processor_arm.cpp	/^std::pair<std::string,std::vector<std::string>> jl_get_llvm_target(bool imaging, uint32_t &flags/;"	f	typeref:typename:std::pair<std::string,std::vector<std::string>>
jl_get_llvm_target	src/processor_fallback.cpp	/^std::pair<std::string,std::vector<std::string>> jl_get_llvm_target(bool imaging, uint32_t &flags/;"	f	typeref:typename:std::pair<std::string,std::vector<std::string>>
jl_get_llvm_target	src/processor_x86.cpp	/^std::pair<std::string,std::vector<std::string>> jl_get_llvm_target(bool imaging, uint32_t &flags/;"	f	typeref:typename:std::pair<std::string,std::vector<std::string>>
jl_get_llvmf_decl	src/codegen.cpp	/^void *jl_get_llvmf_decl(jl_method_instance_t *mi, size_t world, bool getwrapper, const jl_cgpara/;"	f	typeref:typename:JL_DLLEXPORT void *
jl_get_llvmf_defn	src/codegen.cpp	/^void *jl_get_llvmf_defn(jl_method_instance_t *mi, size_t world, bool getwrapper, bool optimize, /;"	f	typeref:typename:JL_DLLEXPORT void *
jl_get_loaded_modules	src/toplevel.c	/^jl_array_t *jl_get_loaded_modules(void)$/;"	f	typeref:typename:jl_array_t *
jl_get_method_inferred	src/gf.c	/^JL_DLLEXPORT jl_code_instance_t *jl_get_method_inferred($/;"	f	typeref:typename:JL_DLLEXPORT jl_code_instance_t *
jl_get_module_binding	src/module.c	/^JL_DLLEXPORT jl_binding_t *jl_get_module_binding(jl_module_t *m JL_PROPAGATES_ROOT, jl_sym_t *va/;"	f	typeref:typename:JL_DLLEXPORT jl_binding_t *
jl_get_module_of_binding	src/module.c	/^JL_DLLEXPORT jl_module_t *jl_get_module_of_binding(jl_module_t *m, jl_sym_t *var)$/;"	f	typeref:typename:JL_DLLEXPORT jl_module_t *
jl_get_nth_field	src/datatype.c	/^JL_DLLEXPORT jl_value_t *jl_get_nth_field(jl_value_t *v, size_t i)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_get_nth_field_checked	src/datatype.c	/^JL_DLLEXPORT jl_value_t *jl_get_nth_field_checked(jl_value_t *v, size_t i)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_get_nth_field_noalloc	src/datatype.c	/^JL_DLLEXPORT jl_value_t *jl_get_nth_field_noalloc(jl_value_t *v JL_PROPAGATES_ROOT, size_t i) JL/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_get_pc_from_ctx	src/signal-handling.c	/^static uintptr_t jl_get_pc_from_ctx(const void *_ctx)$/;"	f	typeref:typename:uintptr_t	file:
jl_get_ptls_states_fast	src/threading.c	/^static JL_CONST_FUNC jl_ptls_t jl_get_ptls_states_fast(void)$/;"	f	typeref:typename:JL_CONST_FUNC jl_ptls_t	file:
jl_get_ptls_states_func	src/tls.h	/^typedef jl_ptls_t (*jl_get_ptls_states_func)(void);$/;"	t	typeref:typename:jl_ptls_t (*)(void)
jl_get_ptls_states_getter	src/threading.c	/^jl_get_ptls_states_func jl_get_ptls_states_getter(void)$/;"	f	typeref:typename:jl_get_ptls_states_func
jl_get_root_symbol	src/symbol.c	/^JL_DLLEXPORT jl_sym_t *jl_get_root_symbol(void)$/;"	f	typeref:typename:JL_DLLEXPORT jl_sym_t *
jl_get_root_task	src/task.c	/^JL_DLLEXPORT jl_value_t *jl_get_root_task(void)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_get_rsp_from_ctx	src/signals-unix.c	/^static inline __attribute__((unused)) uintptr_t jl_get_rsp_from_ctx(const void *_ctx)$/;"	f	typeref:typename:uintptr_t	file:
jl_get_section_start	src/debuginfo.cpp	/^JL_DLLEXPORT uint64_t jl_get_section_start(uint64_t fptr)$/;"	f	typeref:typename:JL_DLLEXPORT uint64_t
jl_get_size	src/jltypes.c	/^JL_DLLEXPORT int jl_get_size(jl_value_t *val, size_t *pnt)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_get_spec_lambda	src/gf.c	/^JL_DLLEXPORT jl_value_t *jl_get_spec_lambda(jl_tupletype_t *types, size_t world, size_t *min_val/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_get_specialization1	src/gf.c	/^jl_method_instance_t *jl_get_specialization1(jl_tupletype_t *types JL_PROPAGATES_ROOT, size_t wo/;"	f	typeref:typename:jl_method_instance_t *
jl_get_specialized	src/method.c	/^jl_method_instance_t *jl_get_specialized(jl_method_t *m, jl_value_t *types, jl_svec_t *sp)$/;"	f	typeref:typename:jl_method_instance_t *
jl_get_t_uid_ctr	src/jltypes.c	/^int  jl_get_t_uid_ctr(void) { return t_uid_ctr; }$/;"	f	typeref:typename:int
jl_get_task_tid	src/task.c	/^JL_DLLEXPORT int16_t jl_get_task_tid(jl_task_t *t)$/;"	f	typeref:typename:JL_DLLEXPORT int16_t
jl_get_tls_world_age	src/gf.c	/^JL_DLLEXPORT size_t jl_get_tls_world_age(void)$/;"	f	typeref:typename:JL_DLLEXPORT size_t
jl_get_unspecialized	src/gf.c	/^jl_method_instance_t *jl_get_unspecialized(jl_method_instance_t *method JL_PROPAGATES_ROOT)$/;"	f	typeref:typename:jl_method_instance_t *
jl_get_world_counter	src/gf.c	/^JL_DLLEXPORT size_t jl_get_world_counter(void)$/;"	f	typeref:typename:JL_DLLEXPORT size_t
jl_get_zero_subnormals	src/processor_arm.cpp	/^extern "C" JL_DLLEXPORT int32_t jl_get_zero_subnormals(void)$/;"	f	typeref:typename:JL_DLLEXPORT int32_t
jl_get_zero_subnormals	src/processor_fallback.cpp	/^extern "C" JL_DLLEXPORT int32_t jl_get_zero_subnormals(void)$/;"	f	typeref:typename:JL_DLLEXPORT int32_t
jl_get_zero_subnormals	src/processor_x86.cpp	/^extern "C" JL_DLLEXPORT int32_t jl_get_zero_subnormals(void)$/;"	f	typeref:typename:JL_DLLEXPORT int32_t
jl_getaddrinfo	src/jl_uv.c	/^JL_DLLEXPORT int jl_getaddrinfo(uv_loop_t *loop, uv_getaddrinfo_t *req,$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_getallocationgranularity	src/sys.c	/^JL_DLLEXPORT long jl_getallocationgranularity(void)$/;"	f	typeref:typename:JL_DLLEXPORT long
jl_getauxval	src/processor_arm.cpp	/^static inline unsigned long jl_getauxval(unsigned long type)$/;"	f	namespace:ARM	typeref:typename:unsigned long	file:
jl_getnameinfo	src/jl_uv.c	/^JL_DLLEXPORT int jl_getnameinfo(uv_loop_t *loop, uv_getnameinfo_t *req,$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_getpagesize	src/sys.c	/^JL_DLLEXPORT long jl_getpagesize(void)$/;"	f	typeref:typename:JL_DLLEXPORT long
jl_getpid	src/jl_uv.c	/^JL_DLLEXPORT int jl_getpid(void)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_gettimeofday	src/support/timefuncs.c	/^JL_DLLEXPORT int jl_gettimeofday(struct jl_timeval *jtv)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_getutf8	src/sys.c	/^JL_DLLEXPORT uint32_t jl_getutf8(ios_t *s)$/;"	f	typeref:typename:JL_DLLEXPORT uint32_t
jl_gf_invoke	src/gf.c	/^jl_value_t *jl_gf_invoke(jl_value_t *types0, jl_value_t *gf, jl_value_t **args, size_t nargs)$/;"	f	typeref:typename:jl_value_t *
jl_gf_invoke_by_method	src/gf.c	/^static jl_value_t *jl_gf_invoke_by_method(jl_method_t *method, jl_value_t *gf, jl_value_t **args/;"	f	typeref:typename:jl_value_t *	file:
jl_gf_invoke_lookup	src/gf.c	/^JL_DLLEXPORT jl_value_t *jl_gf_invoke_lookup(jl_value_t *types JL_PROPAGATES_ROOT, size_t world)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_gf_mtable	src/julia.h	/^#define jl_gf_mtable(/;"	d
jl_gf_name	src/julia.h	/^#define jl_gf_name(/;"	d
jl_git_branch	src/jlapi.c	/^JL_DLLEXPORT const char *jl_git_branch(void)$/;"	f	typeref:typename:JL_DLLEXPORT const char *
jl_git_commit	src/jlapi.c	/^JL_DLLEXPORT const char *jl_git_commit(void)$/;"	f	typeref:typename:JL_DLLEXPORT const char *
jl_globalPM	src/codegen.cpp	/^legacy::PassManager *jl_globalPM;$/;"	v	typeref:typename:legacy::PassManager *
jl_global_event_loop	src/jl_uv.c	/^JL_DLLEXPORT uv_loop_t *jl_global_event_loop(void)$/;"	f	typeref:typename:JL_DLLEXPORT uv_loop_t *
jl_globalref_mod	src/julia.h	/^#define jl_globalref_mod(/;"	d
jl_globalref_name	src/julia.h	/^#define jl_globalref_name(/;"	d
jl_globalref_type	src/jltypes.c	/^jl_datatype_t *jl_globalref_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_gotonode_label	src/julia.h	/^#define jl_gotonode_label(/;"	d
jl_gotonode_type	src/jltypes.c	/^jl_datatype_t *jl_gotonode_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_guard_size	src/gc-stacks.c	/^const size_t jl_guard_size = (4096 * 8);$/;"	v	typeref:typename:const size_t
jl_handler_t	src/julia.h	/^} jl_handler_t;$/;"	t	typeref:struct:_jl_handler_t
jl_has_bound_typevars	src/jltypes.c	/^static int jl_has_bound_typevars(jl_value_t *v, jl_typeenv_t *env) JL_NOTSAFEPOINT$/;"	f	typeref:typename:int	file:
jl_has_builtin	src/support/dtypes.h	/^#  define jl_has_builtin(/;"	d
jl_has_call_ambiguities	src/gf.c	/^static int jl_has_call_ambiguities(jl_value_t *types, jl_method_t *m, size_t world)$/;"	f	typeref:typename:int	file:
jl_has_concrete_subtype	src/gf.c	/^int jl_has_concrete_subtype(jl_value_t *typ)$/;"	f	typeref:typename:int
jl_has_empty_intersection	src/subtype.c	/^JL_DLLEXPORT int jl_has_empty_intersection(jl_value_t *x, jl_value_t *y)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_has_free_typevars	src/jltypes.c	/^JL_DLLEXPORT int jl_has_free_typevars(jl_value_t *v) JL_NOTSAFEPOINT$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_has_implicit_byte	src/array.c	/^STATIC_INLINE int jl_has_implicit_byte(jl_array_t *a)$/;"	f	typeref:typename:STATIC_INLINE int
jl_has_implicit_byte_owned	src/array.c	/^STATIC_INLINE int jl_has_implicit_byte_owned(jl_array_t *a)$/;"	f	typeref:typename:STATIC_INLINE int
jl_has_intersect_type_not_kind	src/subtype.c	/^int jl_has_intersect_type_not_kind(jl_value_t *t)$/;"	f	typeref:typename:int
jl_has_meta	src/ast.c	/^int jl_has_meta(jl_array_t *body, jl_sym_t *sym)$/;"	f	typeref:typename:int
jl_has_so_reuseport	src/jl_uv.c	/^JL_DLLEXPORT int jl_has_so_reuseport(void)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_has_typevar	src/jltypes.c	/^JL_DLLEXPORT int jl_has_typevar(jl_value_t *t, jl_tvar_t *v) JL_NOTSAFEPOINT$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_has_typevar_from_unionall	src/jltypes.c	/^JL_DLLEXPORT int jl_has_typevar_from_unionall(jl_value_t *t, jl_unionall_t *ua)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_hrtime	src/sys.c	/^JL_DLLEXPORT uint64_t jl_hrtime(void)$/;"	f	typeref:typename:JL_DLLEXPORT uint64_t
jl_id_char	src/flisp/julia_extensions.c	/^JL_DLLEXPORT int jl_id_char(uint32_t wc)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_id_start_char	src/flisp/julia_extensions.c	/^JL_DLLEXPORT int jl_id_start_char(uint32_t wc)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_idtable_rehash	src/table.c	/^JL_DLLEXPORT jl_array_t *jl_idtable_rehash(jl_array_t *a, size_t newsz)$/;"	f	typeref:typename:JL_DLLEXPORT jl_array_t *
jl_idtable_type	src/dump.c	/^static jl_value_t *jl_idtable_type = NULL;$/;"	v	typeref:typename:jl_value_t *	file:
jl_idtable_type	src/staticdata.c	/^static jl_value_t *jl_idtable_type = NULL;$/;"	v	typeref:typename:jl_value_t *	file:
jl_idtable_typename	src/dump.c	/^static jl_typename_t *jl_idtable_typename = NULL;$/;"	v	typeref:typename:jl_typename_t *	file:
jl_idtable_typename	src/staticdata.c	/^static jl_typename_t *jl_idtable_typename = NULL;$/;"	v	typeref:typename:jl_typename_t *	file:
jl_ignore_sigint	src/signal-handling.c	/^static int jl_ignore_sigint(void)$/;"	f	typeref:typename:int	file:
jl_in_stackwalk	src/task.c	/^volatile int jl_in_stackwalk = 0;$/;"	v	typeref:typename:volatile int
jl_incomplete_sym	src/ast.c	/^jl_sym_t *line_sym;    jl_sym_t *jl_incomplete_sym;$/;"	v	typeref:typename:jl_sym_t *
jl_infer_thunk	src/toplevel.c	/^JL_DLLEXPORT jl_value_t *jl_infer_thunk(jl_code_info_t *thk, jl_module_t *m)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_init	src/jlapi.c	/^JL_DLLEXPORT void jl_init(void)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_init	src/julia.h	/^#define jl_init /;"	d
jl_init_ast_ctx	src/ast.c	/^static void jl_init_ast_ctx(jl_ast_context_t *ast_ctx) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void	file:
jl_init_basefiber	src/task.c	/^static void jl_init_basefiber(size_t ssize)$/;"	f	typeref:typename:void	file:
jl_init_box_caches	src/datatype.c	/^void jl_init_box_caches(void)$/;"	f	typeref:typename:void
jl_init_codegen	src/codegen.cpp	/^extern "C" void jl_init_codegen(void)$/;"	f	typeref:typename:void
jl_init_debuginfo	src/debuginfo.cpp	/^extern "C" void jl_init_debuginfo()$/;"	f	typeref:typename:void
jl_init_frontend	src/ast.c	/^void jl_init_frontend(void)$/;"	f	typeref:typename:void
jl_init_function	src/jitlayers.cpp	/^void jl_init_function(Function *F)$/;"	f	typeref:typename:void
jl_init_int32_int64_cache	src/datatype.c	/^void jl_init_int32_int64_cache(void)$/;"	f	typeref:typename:void
jl_init_intrinsic_functions_codegen	src/intrinsics.cpp	/^static void jl_init_intrinsic_functions_codegen(Module *m)$/;"	f	typeref:typename:void	file:
jl_init_jit	src/jitlayers.cpp	/^void jl_init_jit(Type *T_pjlvalue_)$/;"	f	typeref:typename:void
jl_init_llvm	src/codegen.cpp	/^extern "C" void *jl_init_llvm(void)$/;"	f	typeref:typename:void *
jl_init_main_module	src/toplevel.c	/^void jl_init_main_module(void)$/;"	f	typeref:typename:void
jl_init_processor_sysimg	src/processor_arm.cpp	/^jl_sysimg_fptrs_t jl_init_processor_sysimg(void *hdl)$/;"	f	typeref:typename:jl_sysimg_fptrs_t
jl_init_processor_sysimg	src/processor_fallback.cpp	/^jl_sysimg_fptrs_t jl_init_processor_sysimg(void *hdl)$/;"	f	typeref:typename:jl_sysimg_fptrs_t
jl_init_processor_sysimg	src/processor_x86.cpp	/^jl_sysimg_fptrs_t jl_init_processor_sysimg(void *hdl)$/;"	f	typeref:typename:jl_sysimg_fptrs_t
jl_init_restored_modules	src/dump.c	/^JL_DLLEXPORT void jl_init_restored_modules(jl_array_t *init_order)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_init_root_task	src/task.c	/^void jl_init_root_task(void *stack_lo, void *stack_hi)$/;"	f	typeref:typename:void
jl_init_serializer	src/dump.c	/^void jl_init_serializer(void)$/;"	f	typeref:typename:void
jl_init_serializer2	src/staticdata.c	/^static void jl_init_serializer2(int for_serialize)$/;"	f	typeref:typename:void	file:
jl_init_stack_limits	src/init.c	/^void jl_init_stack_limits(int ismaster, void **stack_lo, void **stack_hi)$/;"	f	typeref:typename:void
jl_init_tasks	src/task.c	/^void jl_init_tasks(void) JL_GC_DISABLED$/;"	f	typeref:typename:void
jl_init_thread_heap	src/gc.c	/^void jl_init_thread_heap(jl_ptls_t ptls)$/;"	f	typeref:typename:void
jl_init_threading	src/threading.c	/^void jl_init_threading(void)$/;"	f	typeref:typename:void
jl_init_threadinginfra	src/partr.c	/^void jl_init_threadinginfra(void)$/;"	f	typeref:typename:void
jl_init_threadtls	src/threading.c	/^void jl_init_threadtls(int16_t tid)$/;"	f	typeref:typename:void
jl_init_timing	src/timing.c	/^void jl_init_timing(void)$/;"	f	typeref:typename:void
jl_init_types	src/jltypes.c	/^void jl_init_types(void) JL_GC_DISABLED$/;"	f	typeref:typename:void
jl_init_uv	src/jl_uv.c	/^void jl_init_uv(void)$/;"	f	typeref:typename:void
jl_init_with_image	src/jlapi.c	/^JL_DLLEXPORT void jl_init_with_image(const char *julia_bindir,$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_init_with_image	src/julia.h	/^#define jl_init_with_image /;"	d
jl_initerror_type	src/jltypes.c	/^jl_datatype_t *jl_initerror_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_insert_backedges	src/dump.c	/^static void jl_insert_backedges(jl_array_t *list, arraylist_t *dependent_worlds)$/;"	f	typeref:typename:void	file:
jl_insert_methods	src/dump.c	/^static void jl_insert_methods(jl_array_t *list)$/;"	f	typeref:typename:void	file:
jl_inst_concrete_tupletype	src/jltypes.c	/^jl_datatype_t *jl_inst_concrete_tupletype(jl_svec_t *p)$/;"	f	typeref:typename:jl_datatype_t *
jl_inst_concrete_tupletype_v	src/jltypes.c	/^jl_datatype_t *jl_inst_concrete_tupletype_v(jl_value_t **p, size_t np)$/;"	f	typeref:typename:jl_datatype_t *
jl_install_default_signal_handlers	src/signals-unix.c	/^void jl_install_default_signal_handlers(void)$/;"	f	typeref:typename:void
jl_install_default_signal_handlers	src/signals-win.c	/^void jl_install_default_signal_handlers(void)$/;"	f	typeref:typename:void
jl_install_sigint_handler	src/signals-unix.c	/^JL_DLLEXPORT void jl_install_sigint_handler(void)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_install_sigint_handler	src/signals-win.c	/^JL_DLLEXPORT void jl_install_sigint_handler(void)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_install_thread_signal_handler	src/signals-unix.c	/^void jl_install_thread_signal_handler(jl_ptls_t ptls)$/;"	f	typeref:typename:void
jl_install_thread_signal_handler	src/signals-win.c	/^void jl_install_thread_signal_handler(jl_ptls_t ptls)$/;"	f	typeref:typename:void
jl_instantiate_type_in_env	src/jltypes.c	/^JL_DLLEXPORT jl_value_t *jl_instantiate_type_in_env(jl_value_t *ty, jl_unionall_t *env, jl_value/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_instantiate_type_with	src/jltypes.c	/^jl_value_t *jl_instantiate_type_with(jl_value_t *t, jl_value_t **env, size_t n)$/;"	f	typeref:typename:jl_value_t *
jl_instantiate_unionall	src/jltypes.c	/^JL_DLLEXPORT jl_value_t *jl_instantiate_unionall(jl_unionall_t *u, jl_value_t *p)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_int16_type	src/jltypes.c	/^jl_datatype_t *jl_int16_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_int32_type	src/jltypes.c	/^jl_datatype_t *jl_int32_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_int32hash_fast	src/julia_internal.h	/^STATIC_INLINE uint32_t jl_int32hash_fast(uint32_t a)$/;"	f	typeref:typename:STATIC_INLINE uint32_t
jl_int64_type	src/jltypes.c	/^jl_datatype_t *jl_int64_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_int8_type	src/jltypes.c	/^jl_datatype_t *jl_int8_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_interpret_call_args	src/interpreter.c	/^struct jl_interpret_call_args {$/;"	s	file:
jl_interpret_call_callback	src/interpreter.c	/^SECT_INTERP CALLBACK_ABI void *jl_interpret_call_callback(interpreter_state *s, void *vargs)$/;"	f	typeref:typename:SECT_INTERP CALLBACK_ABI void *
jl_interpret_toplevel_expr_in	src/interpreter.c	/^SECT_INTERP jl_value_t *jl_interpret_toplevel_expr_in(jl_module_t *m, jl_value_t *e, jl_code_inf/;"	f	typeref:typename:SECT_INTERP jl_value_t *
jl_interpret_toplevel_expr_in_callback	src/interpreter.c	/^SECT_INTERP CALLBACK_ABI void *jl_interpret_toplevel_expr_in_callback(interpreter_state *s, void/;"	f	typeref:typename:SECT_INTERP CALLBACK_ABI void *
jl_interpret_toplevel_thunk	src/interpreter.c	/^SECT_INTERP jl_value_t *jl_interpret_toplevel_thunk(jl_module_t *m, jl_code_info_t *src)$/;"	f	typeref:typename:SECT_INTERP jl_value_t *
jl_interpret_toplevel_thunk_args	src/interpreter.c	/^struct jl_interpret_toplevel_thunk_args {$/;"	s	file:
jl_interpret_toplevel_thunk_callback	src/interpreter.c	/^SECT_INTERP CALLBACK_ABI void *jl_interpret_toplevel_thunk_callback(interpreter_state *s, void */;"	f	typeref:typename:SECT_INTERP CALLBACK_ABI void *
jl_interrupt_exception	src/jltypes.c	/^jl_value_t *jl_interrupt_exception;$/;"	v	typeref:typename:jl_value_t *
jl_intersect_types	src/subtype.c	/^JL_DLLEXPORT jl_value_t *jl_intersect_types(jl_value_t *x, jl_value_t *y)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_intref	src/typemap.c	/^static inline size_t jl_intref(const jl_array_t *arr, size_t idx) JL_NOTSAFEPOINT$/;"	f	typeref:typename:size_t	file:
jl_intrinsic_cvt	src/runtime_intrinsics.c	/^static inline jl_value_t *jl_intrinsic_cvt(jl_value_t *ty, jl_value_t *a, const char *name, intr/;"	f	typeref:typename:jl_value_t *	file:
jl_intrinsic_type	src/jltypes.c	/^jl_datatype_t *jl_intrinsic_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_intrinsiclambda_2	src/runtime_intrinsics.c	/^static inline jl_value_t *jl_intrinsiclambda_2(jl_value_t *ty, void *pa, void *pb, unsigned sz, /;"	f	typeref:typename:jl_value_t *	file:
jl_intrinsiclambda_checked	src/runtime_intrinsics.c	/^static inline jl_value_t *jl_intrinsiclambda_checked(jl_value_t *ty, void *pa, void *pb, unsigne/;"	f	typeref:typename:jl_value_t *	file:
jl_intrinsiclambda_checkeddiv	src/runtime_intrinsics.c	/^static inline jl_value_t *jl_intrinsiclambda_checkeddiv(jl_value_t *ty, void *pa, void *pb, unsi/;"	f	typeref:typename:jl_value_t *	file:
jl_intrinsiclambda_cmp	src/runtime_intrinsics.c	/^static inline jl_value_t *jl_intrinsiclambda_cmp(jl_value_t *ty, void *pa, void *pb, unsigned sz/;"	f	typeref:typename:jl_value_t *	file:
jl_intrinsiclambda_ty1	src/runtime_intrinsics.c	/^static inline jl_value_t *jl_intrinsiclambda_ty1(jl_value_t *ty, void *pa, unsigned osize, unsig/;"	f	typeref:typename:jl_value_t *	file:
jl_intrinsiclambda_u1	src/runtime_intrinsics.c	/^static inline jl_value_t *jl_intrinsiclambda_u1(jl_value_t *ty, void *pa, unsigned osize, unsign/;"	f	typeref:typename:jl_value_t *	file:
jl_intrinsics	src/llvm-pass-helpers.cpp	/^namespace jl_intrinsics {$/;"	n	file:
jl_intrinsics	src/llvm-pass-helpers.h	/^namespace jl_intrinsics {$/;"	n
jl_intset	src/typemap.c	/^static inline void jl_intset(const jl_array_t *arr, size_t idx, size_t val) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void	file:
jl_invalid_types_equal	src/dump.c	/^static int jl_invalid_types_equal(jl_datatype_t *a, jl_datatype_t *b)$/;"	f	typeref:typename:int	file:
jl_invoke	src/gf.c	/^JL_DLLEXPORT jl_value_t *jl_invoke(jl_value_t *F, jl_value_t **args, uint32_t nargs, jl_method_i/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_invoke_api	src/gf.c	/^JL_DLLEXPORT int32_t jl_invoke_api(jl_code_instance_t *codeinst)$/;"	f	typeref:typename:JL_DLLEXPORT int32_t
jl_invoke_julia_macro	src/ast.c	/^static jl_value_t *jl_invoke_julia_macro(jl_array_t *args, jl_module_t *inmodule, jl_module_t **/;"	f	typeref:typename:jl_value_t *	file:
jl_io_loop	src/init.c	/^uv_loop_t *jl_io_loop;$/;"	v	typeref:typename:uv_loop_t *
jl_iolock_begin	src/jl_uv.c	/^JL_DLLEXPORT void jl_iolock_begin(void)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_iolock_end	src/jl_uv.c	/^JL_DLLEXPORT void jl_iolock_end(void)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_ios_buffer_n	src/sys.c	/^JL_DLLEXPORT int jl_ios_buffer_n(ios_t *s, const size_t n)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_ios_fd	src/sys.c	/^JL_DLLEXPORT long jl_ios_fd(ios_t *s) { return s->fd; }$/;"	f	typeref:typename:JL_DLLEXPORT long
jl_ios_get_nbyte_int	src/sys.c	/^JL_DLLEXPORT uint64_t jl_ios_get_nbyte_int(ios_t *s, const size_t n)$/;"	f	typeref:typename:JL_DLLEXPORT uint64_t
jl_is_abstract_ref_type	src/julia.h	/^STATIC_INLINE int jl_is_abstract_ref_type(jl_value_t *t) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE int
jl_is_abstracttype	src/julia.h	/^STATIC_INLINE int jl_is_abstracttype(void *v) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE int
jl_is_any	src/typemap.c	/^static int jl_is_any(jl_value_t *t1)$/;"	f	typeref:typename:int	file:
jl_is_array	src/julia.h	/^STATIC_INLINE int jl_is_array(void *v) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE int
jl_is_array_type	src/julia.h	/^STATIC_INLINE int jl_is_array_type(void *t) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE int
jl_is_binding_deprecated	src/module.c	/^JL_DLLEXPORT int jl_is_binding_deprecated(jl_module_t *m, jl_sym_t *var)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_is_bool	src/julia.h	/^#define jl_is_bool(/;"	d
jl_is_char_signed	src/sys.c	/^JL_DLLEXPORT jl_value_t *jl_is_char_signed(void)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_is_code_info	src/julia.h	/^#define jl_is_code_info(/;"	d
jl_is_code_instance	src/julia.h	/^#define jl_is_code_instance(/;"	d
jl_is_concrete_type	src/julia.h	/^STATIC_INLINE int jl_is_concrete_type(jl_value_t *v) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE int
jl_is_const	src/module.c	/^JL_DLLEXPORT int jl_is_const(jl_module_t *m, jl_sym_t *var)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_is_cpointer	src/julia.h	/^#define jl_is_cpointer(/;"	d
jl_is_cpointer_type	src/julia.h	/^STATIC_INLINE int jl_is_cpointer_type(jl_value_t *t) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE int
jl_is_datatype	src/julia.h	/^#define jl_is_datatype(/;"	d
jl_is_datatype_make_singleton	src/datatype.c	/^STATIC_INLINE int jl_is_datatype_make_singleton(jl_datatype_t *d)$/;"	f	typeref:typename:STATIC_INLINE int
jl_is_datatype_singleton	src/julia.h	/^STATIC_INLINE int jl_is_datatype_singleton(jl_datatype_t *d) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE int
jl_is_debugbuild	src/jlapi.c	/^JL_DLLEXPORT int jl_is_debugbuild(void)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_is_dispatch_tupletype	src/julia.h	/^STATIC_INLINE int jl_is_dispatch_tupletype(jl_value_t *v) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE int
jl_is_enter_interpreter_frame	src/interpreter-stacktrace.c	/^JL_DLLEXPORT int jl_is_enter_interpreter_frame(uintptr_t ip)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_is_expr	src/julia.h	/^#define jl_is_expr(/;"	d
jl_is_floattype	src/abi_aarch64.cpp	/^#define jl_is_floattype(/;"	d	file:
jl_is_floattype	src/abi_arm.cpp	/^#define jl_is_floattype(/;"	d	file:
jl_is_globalref	src/julia.h	/^#define jl_is_globalref(/;"	d
jl_is_gotonode	src/julia.h	/^#define jl_is_gotonode(/;"	d
jl_is_identifier	src/rtutils.c	/^JL_DLLEXPORT int jl_is_identifier(char *str) JL_NOTSAFEPOINT$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_is_immutable	src/julia.h	/^#define jl_is_immutable(/;"	d
jl_is_immutable_datatype	src/julia.h	/^#define jl_is_immutable_datatype(/;"	d
jl_is_imported	src/module.c	/^JL_DLLEXPORT int jl_is_imported(jl_module_t *m, jl_sym_t *s)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_is_in_pure_context	src/gf.c	/^JL_DLLEXPORT int8_t jl_is_in_pure_context(void)$/;"	f	typeref:typename:JL_DLLEXPORT int8_t
jl_is_initialized	src/jlapi.c	/^JL_DLLEXPORT int jl_is_initialized(void)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_is_int16	src/julia.h	/^#define jl_is_int16(/;"	d
jl_is_int32	src/julia.h	/^#define jl_is_int32(/;"	d
jl_is_int64	src/julia.h	/^#define jl_is_int64(/;"	d
jl_is_int8	src/julia.h	/^#define jl_is_int8(/;"	d
jl_is_interpreter_frame	src/interpreter-stacktrace.c	/^JL_DLLEXPORT int jl_is_interpreter_frame(uintptr_t ip)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_is_intrinsic	src/julia.h	/^#define jl_is_intrinsic(/;"	d
jl_is_kind	src/julia.h	/^STATIC_INLINE int jl_is_kind(jl_value_t *v) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE int
jl_is_layout_opaque	src/julia.h	/^static inline int jl_is_layout_opaque(const jl_datatype_layout_t *l) JL_NOTSAFEPOINT$/;"	f	typeref:typename:int
jl_is_linenode	src/julia.h	/^#define jl_is_linenode(/;"	d
jl_is_long	src/julia.h	/^#define jl_is_long(/;"	d
jl_is_memdebug	src/jlapi.c	/^JL_DLLEXPORT int8_t jl_is_memdebug(void) {$/;"	f	typeref:typename:JL_DLLEXPORT int8_t
jl_is_method	src/julia.h	/^#define jl_is_method(/;"	d
jl_is_method_instance	src/julia.h	/^#define jl_is_method_instance(/;"	d
jl_is_module	src/julia.h	/^#define jl_is_module(/;"	d
jl_is_mtable	src/julia.h	/^#define jl_is_mtable(/;"	d
jl_is_mutable	src/julia.h	/^#define jl_is_mutable(/;"	d
jl_is_mutable_datatype	src/julia.h	/^#define jl_is_mutable_datatype(/;"	d
jl_is_namedtuple	src/julia.h	/^#define jl_is_namedtuple(/;"	d
jl_is_namedtuple_type	src/julia.h	/^STATIC_INLINE int jl_is_namedtuple_type(void *t) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE int
jl_is_newvarnode	src/julia.h	/^#define jl_is_newvarnode(/;"	d
jl_is_not_broken_subtype	src/subtype.c	/^JL_DLLEXPORT int jl_is_not_broken_subtype(jl_value_t *a, jl_value_t *b)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_is_nothing	src/julia.h	/^#define jl_is_nothing(/;"	d
jl_is_on_sigstack	src/signals-unix.c	/^static int jl_is_on_sigstack(jl_ptls_t ptls, void *ptr, void *context)$/;"	f	typeref:typename:int	file:
jl_is_operator	src/ast.c	/^JL_DLLEXPORT int jl_is_operator(char *sym)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_is_phicnode	src/julia.h	/^#define jl_is_phicnode(/;"	d
jl_is_phinode	src/julia.h	/^#define jl_is_phinode(/;"	d
jl_is_pinode	src/julia.h	/^#define jl_is_pinode(/;"	d
jl_is_pointer	src/julia.h	/^#define jl_is_pointer(/;"	d
jl_is_primitivetype	src/julia.h	/^STATIC_INLINE int jl_is_primitivetype(void *v) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE int
jl_is_quotenode	src/julia.h	/^#define jl_is_quotenode(/;"	d
jl_is_simplevector	src/julia.h	/^#define jl_is_simplevector(/;"	d
jl_is_slot	src/julia.h	/^#define jl_is_slot(/;"	d
jl_is_ssavalue	src/julia.h	/^#define jl_is_ssavalue(/;"	d
jl_is_string	src/julia.h	/^#define jl_is_string(/;"	d
jl_is_structtype	src/julia.h	/^STATIC_INLINE int jl_is_structtype(void *v) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE int
jl_is_submodule	src/module.c	/^int jl_is_submodule(jl_module_t *child, jl_module_t *parent) JL_NOTSAFEPOINT$/;"	f	typeref:typename:int
jl_is_svec	src/julia.h	/^#define jl_is_svec(/;"	d
jl_is_symbol	src/julia.h	/^#define jl_is_symbol(/;"	d
jl_is_task	src/julia.h	/^#define jl_is_task(/;"	d
jl_is_task_started	src/task.c	/^JL_DLLEXPORT int jl_is_task_started(jl_task_t *t)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_is_toplevel_only_expr	src/toplevel.c	/^int jl_is_toplevel_only_expr(jl_value_t *e) JL_NOTSAFEPOINT$/;"	f	typeref:typename:int
jl_is_tuple	src/julia.h	/^#define jl_is_tuple(/;"	d
jl_is_tuple_type	src/julia.h	/^STATIC_INLINE int jl_is_tuple_type(void *t) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE int
jl_is_type	src/julia.h	/^STATIC_INLINE int jl_is_type(jl_value_t *v) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE int
jl_is_type_type	src/julia.h	/^STATIC_INLINE int jl_is_type_type(jl_value_t *v) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE int
jl_is_typename	src/julia.h	/^#define jl_is_typename(/;"	d
jl_is_typevar	src/julia.h	/^#define jl_is_typevar(/;"	d
jl_is_uint16	src/julia.h	/^#define jl_is_uint16(/;"	d
jl_is_uint32	src/julia.h	/^#define jl_is_uint32(/;"	d
jl_is_uint64	src/julia.h	/^#define jl_is_uint64(/;"	d
jl_is_uint8	src/julia.h	/^#define jl_is_uint8(/;"	d
jl_is_unary_and_binary_operator	src/ast.c	/^JL_DLLEXPORT int jl_is_unary_and_binary_operator(char *sym)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_is_unary_operator	src/ast.c	/^JL_DLLEXPORT int jl_is_unary_operator(char *sym)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_is_unionall	src/julia.h	/^#define jl_is_unionall(/;"	d
jl_is_uniontype	src/julia.h	/^#define jl_is_uniontype(/;"	d
jl_is_upsilonnode	src/julia.h	/^#define jl_is_upsilonnode(/;"	d
jl_is_va_tuple	src/julia.h	/^STATIC_INLINE int jl_is_va_tuple(jl_datatype_t *t) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE int
jl_is_vararg_type	src/julia.h	/^STATIC_INLINE int jl_is_vararg_type(jl_value_t *v) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE int
jl_is_vecelement_type	src/julia.h	/^STATIC_INLINE int jl_is_vecelement_type(jl_value_t* t) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE int
jl_isa	src/subtype.c	/^JL_DLLEXPORT int jl_isa(jl_value_t *x, jl_value_t *t)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_isa_compileable_sig	src/gf.c	/^JL_DLLEXPORT int jl_isa_compileable_sig($/;"	f	typeref:typename:JL_DLLEXPORT int
jl_isbits	src/julia.h	/^STATIC_INLINE int jl_isbits(void *t) JL_NOTSAFEPOINT \/\/ corresponding to isbits() in julia$/;"	f	typeref:typename:STATIC_INLINE int
jl_islayout_inline	src/datatype.c	/^JL_DLLEXPORT int jl_islayout_inline(jl_value_t *eltype, size_t *fsz, size_t *al) JL_NOTSAFEPOINT$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_ispty	src/jl_uv.c	/^JL_DLLEXPORT int jl_ispty(uv_pipe_t *pipe)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_istopmod	src/module.c	/^JL_DLLEXPORT uint8_t jl_istopmod(jl_module_t *mod)$/;"	f	typeref:typename:JL_DLLEXPORT uint8_t
jl_jit_events	src/debuginfo.cpp	/^static JuliaJITEventListener *jl_jit_events;$/;"	v	typeref:typename:JuliaJITEventListener *	file:
jl_jmp_buf	src/julia.h	/^#  define jl_jmp_buf /;"	d
jl_justbits	src/codegen.cpp	/^static bool jl_justbits(jl_value_t* t)$/;"	f	typeref:typename:bool	file:
jl_kernel32_handle	src/init.c	/^void *jl_kernel32_handle;$/;"	v	typeref:typename:void *
jl_last_sigint_trigger	src/signal-handling.c	/^static uint64_t jl_last_sigint_trigger = 0;$/;"	v	typeref:typename:uint64_t	file:
jl_lineinfonode_type	src/jltypes.c	/^jl_datatype_t *jl_lineinfonode_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_lineno	src/toplevel.c	/^JL_DLLEXPORT int jl_lineno = 0; \/\/ need to update jl_critical_error if this is TLS$/;"	v	typeref:typename:JL_DLLEXPORT int
jl_linenode_file	src/julia.h	/^#define jl_linenode_file(/;"	d
jl_linenode_line	src/julia.h	/^#define jl_linenode_line(/;"	d
jl_linenumber_to_lineinfo	src/method.c	/^void jl_linenumber_to_lineinfo(jl_code_info_t *ci, jl_value_t *name)$/;"	f	typeref:typename:void
jl_linenumbernode_type	src/jltypes.c	/^jl_datatype_t *jl_linenumbernode_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_link_shared_lib	src/dump.c	/^static void jl_link_shared_lib(const char *libpath)$/;"	f	typeref:typename:void	file:
jl_lisp_prompt	src/ast.c	/^JL_DLLEXPORT void jl_lisp_prompt(void)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_llvm_functions_t	src/julia.h	/^} jl_llvm_functions_t;$/;"	t	typeref:struct:_jl_llvm_functions_t
jl_load	src/toplevel.c	/^JL_DLLEXPORT jl_value_t *jl_load(jl_module_t *module, const char *fname)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_load_	src/toplevel.c	/^JL_DLLEXPORT jl_value_t *jl_load_(jl_module_t *module, jl_value_t *str)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_load_and_lookup	src/runtime_ccall.cpp	/^void *jl_load_and_lookup(const char *f_lib, const char *f_name, void **hnd)$/;"	f	typeref:typename:JL_DLLEXPORT void *
jl_load_dynamic_library	src/dlload.c	/^JL_DLLEXPORT void *jl_load_dynamic_library(const char *modname, unsigned flags, int throw_err)$/;"	f	typeref:typename:JL_DLLEXPORT void *
jl_load_file_string	src/ast.c	/^JL_DLLEXPORT jl_value_t *jl_load_file_string(const char *text, size_t len,$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_load_ptraligned_f64	src/support/dtypes.h	/^STATIC_INLINE double jl_load_ptraligned_f64(const void *ptr) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE double
jl_load_ptraligned_i64	src/support/dtypes.h	/^STATIC_INLINE uint64_t jl_load_ptraligned_i64(const void *ptr) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE uint64_t
jl_load_sysimg_so	src/staticdata.c	/^static void jl_load_sysimg_so(void)$/;"	f	typeref:typename:void	file:
jl_load_unaligned_f64	src/support/dtypes.h	/^STATIC_INLINE double jl_load_unaligned_f64(const void *ptr) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE double
jl_load_unaligned_i16	src/support/dtypes.h	/^STATIC_INLINE uint16_t jl_load_unaligned_i16(const void *ptr) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE uint16_t
jl_load_unaligned_i32	src/support/dtypes.h	/^STATIC_INLINE uint32_t jl_load_unaligned_i32(const void *ptr) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE uint32_t
jl_load_unaligned_i64	src/support/dtypes.h	/^STATIC_INLINE uint64_t jl_load_unaligned_i64(const void *ptr) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE uint64_t
jl_loaderror_type	src/jltypes.c	/^jl_datatype_t *jl_loaderror_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_lock_frame_pop	src/locks.h	/^static inline void jl_lock_frame_pop(void)$/;"	f	typeref:typename:void
jl_lock_frame_push	src/locks.h	/^static inline void jl_lock_frame_push(jl_mutex_t *lock)$/;"	f	typeref:typename:void
jl_log	src/rtutils.c	/^void jl_log(int level, jl_value_t *module, jl_value_t *group, jl_value_t *id,$/;"	f	typeref:typename:void
jl_long_type	src/julia.h	/^#define jl_long_type /;"	d
jl_longjmp	src/flisp/flisp.h	/^void (jl_longjmp)(jmp_buf _Buf, int _Value);$/;"	v	typeref:typename:void ()(jmp_buf _Buf,int _Value)
jl_longjmp	src/julia.h	/^#define jl_longjmp(/;"	d
jl_longjmp	src/julia.h	/^void (jl_longjmp)(jmp_buf _Buf, int _Value);$/;"	v	typeref:typename:void ()(jmp_buf _Buf,int _Value)
jl_lookup_code_address	src/stackwalk.c	/^JL_DLLEXPORT jl_value_t *jl_lookup_code_address(void *ip, int skipC)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_lookup_generic	src/gf.c	/^jl_method_instance_t *jl_lookup_generic(jl_value_t **args, uint32_t nargs, uint32_t callsite,$/;"	f	typeref:typename:jl_method_instance_t *
jl_lookup_generic_	src/gf.c	/^STATIC_INLINE jl_method_instance_t *jl_lookup_generic_(jl_value_t *F, jl_value_t **args, uint32_/;"	f	typeref:typename:STATIC_INLINE jl_method_instance_t *
jl_lookup_method_worldset	src/dump.c	/^static jl_method_t *jl_lookup_method_worldset(jl_methtable_t *mt, jl_datatype_t *sig, arraylist_/;"	f	typeref:typename:jl_method_t *	file:
jl_loopinfo_marker_func	src/codegen.cpp	/^static Function *jl_loopinfo_marker_func;$/;"	v	typeref:typename:Function *	file:
jl_lseek	src/sys.c	/^JL_DLLEXPORT int64_t jl_lseek(HANDLE fd, int64_t offset, int whence)$/;"	f	typeref:typename:JL_DLLEXPORT int64_t
jl_lseek	src/sys.c	/^JL_DLLEXPORT int64_t jl_lseek(int fd, int64_t offset, int whence)$/;"	f	typeref:typename:JL_DLLEXPORT int64_t
jl_lstat	src/sys.c	/^JL_DLLEXPORT int32_t jl_lstat(const char *path, char *statbuf)$/;"	f	typeref:typename:JL_DLLEXPORT int32_t
jl_mac_init_tls	src/threading.c	/^__attribute__((constructor)) void jl_mac_init_tls(void)$/;"	f	typeref:typename:void
jl_mach_gc_end	src/signals-mach.c	/^void jl_mach_gc_end(void)$/;"	f	typeref:typename:void
jl_mach_gc_wait	src/signals-mach.c	/^static int jl_mach_gc_wait(jl_ptls_t ptls2,$/;"	f	typeref:typename:int	file:
jl_macroexpand	src/ast.c	/^JL_DLLEXPORT jl_value_t *jl_macroexpand(jl_value_t *expr, jl_module_t *inmodule)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_macroexpand1	src/ast.c	/^JL_DLLEXPORT jl_value_t *jl_macroexpand1(jl_value_t *expr, jl_module_t *inmodule)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_main_module	src/module.c	/^jl_module_t *jl_main_module = NULL;$/;"	v	typeref:typename:jl_module_t *
jl_makecontext	src/support/win32_ucontext.c	/^void jl_makecontext(win32_ucontext_t *ucp, void (*func)(void))$/;"	f	typeref:typename:void
jl_malloc	src/gc.c	/^JL_DLLEXPORT void *jl_malloc(size_t sz)$/;"	f	typeref:typename:JL_DLLEXPORT void *
jl_malloc_aligned	src/julia_internal.h	/^STATIC_INLINE void *jl_malloc_aligned(size_t sz, size_t align)$/;"	f	typeref:typename:STATIC_INLINE void *
jl_malloc_stack	src/gc-stacks.c	/^JL_DLLEXPORT void *jl_malloc_stack(size_t *bufsz, jl_task_t *owner) JL_NOTSAFEPOINT$/;"	f	typeref:typename:JL_DLLEXPORT void *
jl_malloc_tag	src/gc.h	/^#define jl_malloc_tag /;"	d
jl_markfunc_t	src/julia_gcext.h	/^typedef uintptr_t (*jl_markfunc_t)(jl_ptls_t, jl_value_t *obj);$/;"	t	typeref:typename:uintptr_t (*)(jl_ptls_t,jl_value_t * obj)
jl_matching_methods	src/gf.c	/^JL_DLLEXPORT jl_value_t *jl_matching_methods(jl_tupletype_t *types, int lim, int include_ambiguo/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_max_int	src/typemap.c	/^static inline size_t jl_max_int(const jl_array_t *arr)$/;"	f	typeref:typename:size_t	file:
jl_maxrss	src/sys.c	/^JL_DLLEXPORT size_t jl_maxrss(void)$/;"	f	typeref:typename:JL_DLLEXPORT size_t
jl_may_leak	src/support/analyzer_annotations.h	/^#define jl_may_leak(/;"	d
jl_memory_exception	src/jltypes.c	/^jl_value_t *jl_memory_exception;$/;"	v	typeref:typename:jl_value_t *
jl_merge_module	src/jitlayers.cpp	/^static void jl_merge_module(Module *dest, std::unique_ptr<Module> src)$/;"	f	typeref:typename:void	file:
jl_merge_recursive	src/jitlayers.cpp	/^static void jl_merge_recursive(Module *m, Module *collector)$/;"	f	typeref:typename:void	file:
jl_method_convert_list_to_cache	src/typemap.c	/^static jl_typemap_level_t *jl_method_convert_list_to_cache($/;"	f	typeref:typename:jl_typemap_level_t *	file:
jl_method_def	src/method.c	/^JL_DLLEXPORT void jl_method_def(jl_svec_t *argdata,$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_method_error	src/gf.c	/^        struct jl_method_error {$/;"	s	function:jl_method_error_bare	file:
jl_method_error	src/gf.c	/^void JL_NORETURN jl_method_error(jl_function_t *f, jl_value_t **args, size_t na, size_t world)$/;"	f	typeref:typename:void JL_NORETURN
jl_method_error_bare	src/gf.c	/^static void JL_NORETURN jl_method_error_bare(jl_function_t *f, jl_value_t *args, size_t world)$/;"	f	typeref:typename:void JL_NORETURN	file:
jl_method_instance_add_backedge	src/gf.c	/^JL_DLLEXPORT void jl_method_instance_add_backedge(jl_method_instance_t *callee, jl_method_instan/;"	f	typeref:typename:JL_DLLEXPORT void
jl_method_instance_t	src/julia.h	/^typedef struct _jl_method_instance_t jl_method_instance_t;$/;"	t	typeref:struct:_jl_method_instance_t
jl_method_instance_type	src/jltypes.c	/^jl_datatype_t *jl_method_instance_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_method_lookup	src/gf.c	/^jl_method_instance_t *jl_method_lookup(jl_value_t **args, size_t nargs, int cache, size_t world)$/;"	f	typeref:typename:jl_method_instance_t *
jl_method_set_source	src/method.c	/^static void jl_method_set_source(jl_method_t *m, jl_code_info_t *src)$/;"	f	typeref:typename:void	file:
jl_method_t	src/julia.h	/^} jl_method_t;$/;"	t	typeref:struct:_jl_method_t
jl_method_table_add_backedge	src/gf.c	/^JL_DLLEXPORT void jl_method_table_add_backedge(jl_methtable_t *mt, jl_value_t *typ, jl_value_t */;"	f	typeref:typename:JL_DLLEXPORT void
jl_method_table_disable	src/gf.c	/^JL_DLLEXPORT void jl_method_table_disable(jl_methtable_t *mt, jl_method_t *method)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_method_table_for	src/method.c	/^JL_DLLEXPORT jl_methtable_t *jl_method_table_for(jl_value_t *argtypes JL_PROPAGATES_ROOT) JL_NOT/;"	f	typeref:typename:JL_DLLEXPORT jl_methtable_t *
jl_method_table_insert	src/gf.c	/^JL_DLLEXPORT void jl_method_table_insert(jl_methtable_t *mt, jl_method_t *method, jl_tupletype_t/;"	f	typeref:typename:JL_DLLEXPORT void
jl_method_type	src/jltypes.c	/^jl_datatype_t *jl_method_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_methoderror_type	src/jltypes.c	/^jl_datatype_t *jl_methoderror_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_methtable_lookup	src/gf.c	/^JL_DLLEXPORT jl_value_t *jl_methtable_lookup(jl_methtable_t *mt, jl_value_t *type, size_t world)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_methtable_t	src/julia.h	/^} jl_methtable_t;$/;"	t	typeref:struct:_jl_methtable_t
jl_methtable_type	src/jltypes.c	/^jl_datatype_t *jl_methtable_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_mk_builtin_func	src/gf.c	/^jl_datatype_t *jl_mk_builtin_func(jl_datatype_t *dt, const char *name, jl_fptr_args_t fptr) JL_G/;"	f	typeref:typename:jl_datatype_t *
jl_mmap	src/sys.c	/^JL_DLLEXPORT void *jl_mmap(void *addr, size_t length, int prot, int flags,$/;"	f	typeref:typename:JL_DLLEXPORT void *
jl_module_build_id	src/module.c	/^JL_DLLEXPORT uint64_t jl_module_build_id(jl_module_t *m) { return m->build_id; }$/;"	f	typeref:typename:JL_DLLEXPORT uint64_t
jl_module_export	src/module.c	/^JL_DLLEXPORT void jl_module_export(jl_module_t *from, jl_sym_t *s)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_module_exports_p	src/module.c	/^JL_DLLEXPORT int jl_module_exports_p(jl_module_t *m, jl_sym_t *var) JL_NOTSAFEPOINT$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_module_get_initializer	src/toplevel.c	/^static jl_function_t *jl_module_get_initializer(jl_module_t *m JL_PROPAGATES_ROOT)$/;"	f	typeref:typename:jl_function_t *	file:
jl_module_globalref	src/module.c	/^JL_DLLEXPORT jl_value_t *jl_module_globalref(jl_module_t *m, jl_sym_t *var)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_module_import	src/module.c	/^JL_DLLEXPORT void jl_module_import(jl_module_t *to, jl_module_t *from, jl_sym_t *s)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_module_init_order	src/init.c	/^jl_array_t *jl_module_init_order;$/;"	v	typeref:typename:jl_array_t *
jl_module_name	src/module.c	/^JL_DLLEXPORT jl_sym_t *jl_module_name(jl_module_t *m) { return m->name; }$/;"	f	typeref:typename:JL_DLLEXPORT jl_sym_t *
jl_module_names	src/module.c	/^JL_DLLEXPORT jl_value_t *jl_module_names(jl_module_t *m, int all, int imported)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_module_next_counter	src/module.c	/^uint32_t jl_module_next_counter(jl_module_t *m)$/;"	f	typeref:typename:uint32_t
jl_module_parent	src/module.c	/^JL_DLLEXPORT jl_module_t *jl_module_parent(jl_module_t *m) { return m->parent; }$/;"	f	typeref:typename:JL_DLLEXPORT jl_module_t *
jl_module_run_initializer	src/toplevel.c	/^void jl_module_run_initializer(jl_module_t *m)$/;"	f	typeref:typename:void
jl_module_t	src/julia.h	/^} jl_module_t;$/;"	t	typeref:struct:_jl_module_t
jl_module_type	src/jltypes.c	/^jl_datatype_t *jl_module_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_module_use	src/module.c	/^JL_DLLEXPORT void jl_module_use(jl_module_t *to, jl_module_t *from, jl_sym_t *s)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_module_using	src/module.c	/^JL_DLLEXPORT void jl_module_using(jl_module_t *to, jl_module_t *from)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_module_usings	src/module.c	/^JL_DLLEXPORT jl_value_t *jl_module_usings(jl_module_t *m)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_module_uuid	src/module.c	/^JL_DLLEXPORT jl_uuid_t jl_module_uuid(jl_module_t* m) { return m->uuid; }$/;"	f	typeref:typename:JL_DLLEXPORT jl_uuid_t
jl_mt_assoc_by_type	src/gf.c	/^static jl_method_instance_t *jl_mt_assoc_by_type(jl_methtable_t *mt, jl_datatype_t *tt, int mt_c/;"	f	typeref:typename:jl_method_instance_t *	file:
jl_mutex_init	src/locks.h	/^static inline void jl_mutex_init(jl_mutex_t *lock) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void
jl_mutex_lock	src/locks.h	/^static inline void jl_mutex_lock(jl_mutex_t *lock)$/;"	f	typeref:typename:void
jl_mutex_lock_maybe_nogc	src/locks.h	/^static inline void jl_mutex_lock_maybe_nogc(jl_mutex_t *lock)$/;"	f	typeref:typename:void
jl_mutex_lock_nogc	src/locks.h	/^static inline void jl_mutex_lock_nogc(jl_mutex_t *lock) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void
jl_mutex_t	src/julia_threads.h	/^} jl_mutex_t;$/;"	t	typeref:struct:__anonf8aecdb10308
jl_mutex_trylock	src/locks.h	/^static inline int jl_mutex_trylock(jl_mutex_t *lock)$/;"	f	typeref:typename:int
jl_mutex_trylock_nogc	src/locks.h	/^static inline int jl_mutex_trylock_nogc(jl_mutex_t *lock)$/;"	f	typeref:typename:int
jl_mutex_unlock	src/locks.h	/^static inline void jl_mutex_unlock(jl_mutex_t *lock)$/;"	f	typeref:typename:void
jl_mutex_unlock_maybe_nogc	src/locks.h	/^static inline void jl_mutex_unlock_maybe_nogc(jl_mutex_t *lock) {$/;"	f	typeref:typename:void
jl_mutex_unlock_nogc	src/locks.h	/^static inline void jl_mutex_unlock_nogc(jl_mutex_t *lock) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void
jl_mutex_wait	src/locks.h	/^static inline void jl_mutex_wait(jl_mutex_t *lock, int safepoint)$/;"	f	typeref:typename:void
jl_n_threads	src/threading.c	/^JL_DLLEXPORT int jl_n_threads;$/;"	v	typeref:typename:JL_DLLEXPORT int
jl_namedtuple_type	src/jltypes.c	/^jl_unionall_t *jl_namedtuple_type;$/;"	v	typeref:typename:jl_unionall_t *
jl_namedtuple_typename	src/jltypes.c	/^jl_typename_t *jl_namedtuple_typename;$/;"	v	typeref:typename:jl_typename_t *
jl_native_alignment	src/sys.c	/^JL_DLLEXPORT void jl_native_alignment(uint_t *int8align, uint_t *int16align, uint_t *int32align,$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_nb_available	src/sys.c	/^JL_DLLEXPORT int32_t jl_nb_available(ios_t *s)$/;"	f	typeref:typename:JL_DLLEXPORT int32_t
jl_needs_lowering	src/toplevel.c	/^int jl_needs_lowering(jl_value_t *e) JL_NOTSAFEPOINT$/;"	f	typeref:typename:int
jl_new_abstracttype	src/datatype.c	/^jl_datatype_t *jl_new_abstracttype(jl_value_t *name, jl_module_t *module, jl_datatype_t *super, /;"	f	typeref:typename:jl_datatype_t *
jl_new_array	src/array.c	/^JL_DLLEXPORT jl_array_t *jl_new_array(jl_value_t *atype, jl_value_t *_dims)$/;"	f	typeref:typename:JL_DLLEXPORT jl_array_t *
jl_new_array_for_deserialization	src/array.c	/^jl_array_t *jl_new_array_for_deserialization(jl_value_t *atype, uint32_t ndims, size_t *dims,$/;"	f	typeref:typename:jl_array_t *
jl_new_bits	src/datatype.c	/^JL_DLLEXPORT jl_value_t *jl_new_bits(jl_value_t *dt, void *data)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_new_code_info_from_ast	src/method.c	/^jl_code_info_t *jl_new_code_info_from_ast(jl_expr_t *ast)$/;"	f	typeref:typename:jl_code_info_t *
jl_new_code_info_uninit	src/method.c	/^JL_DLLEXPORT jl_code_info_t *jl_new_code_info_uninit(void)$/;"	f	typeref:typename:JL_DLLEXPORT jl_code_info_t *
jl_new_datatype	src/datatype.c	/^JL_DLLEXPORT jl_datatype_t *jl_new_datatype($/;"	f	typeref:typename:JL_DLLEXPORT jl_datatype_t *
jl_new_foreign_type	src/datatype.c	/^JL_DLLEXPORT jl_datatype_t * jl_new_foreign_type(jl_sym_t *name,$/;"	f	typeref:typename:JL_DLLEXPORT jl_datatype_t *
jl_new_generic_function	src/gf.c	/^jl_function_t *jl_new_generic_function(jl_sym_t *name, jl_module_t *module)$/;"	f	typeref:typename:jl_function_t *
jl_new_generic_function_with_supertype	src/gf.c	/^jl_function_t *jl_new_generic_function_with_supertype(jl_sym_t *name, jl_module_t *module, jl_da/;"	f	typeref:typename:jl_function_t *
jl_new_method_instance_uninit	src/method.c	/^JL_DLLEXPORT jl_method_instance_t *jl_new_method_instance_uninit(void)$/;"	f	typeref:typename:JL_DLLEXPORT jl_method_instance_t *
jl_new_method_table	src/datatype.c	/^JL_DLLEXPORT jl_methtable_t *jl_new_method_table(jl_sym_t *name, jl_module_t *module)$/;"	f	typeref:typename:JL_DLLEXPORT jl_methtable_t *
jl_new_method_uninit	src/method.c	/^JL_DLLEXPORT jl_method_t *jl_new_method_uninit(jl_module_t *module)$/;"	f	typeref:typename:JL_DLLEXPORT jl_method_t *
jl_new_module	src/module.c	/^JL_DLLEXPORT jl_module_t *jl_new_module(jl_sym_t *name)$/;"	f	typeref:typename:JL_DLLEXPORT jl_module_t *
jl_new_primitivetype	src/datatype.c	/^JL_DLLEXPORT jl_datatype_t *jl_new_primitivetype(jl_value_t *name, jl_module_t *module,$/;"	f	typeref:typename:JL_DLLEXPORT jl_datatype_t *
jl_new_struct	src/datatype.c	/^JL_DLLEXPORT jl_value_t *jl_new_struct(jl_datatype_t *type, ...)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_new_struct_uninit	src/datatype.c	/^JL_DLLEXPORT jl_value_t *jl_new_struct_uninit(jl_datatype_t *type)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_new_structt	src/datatype.c	/^JL_DLLEXPORT jl_value_t *jl_new_structt(jl_datatype_t *type, jl_value_t *tup)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_new_structv	src/datatype.c	/^JL_DLLEXPORT jl_value_t *jl_new_structv(jl_datatype_t *type, jl_value_t **args, uint32_t na)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_new_task	src/task.c	/^JL_DLLEXPORT jl_task_t *jl_new_task(jl_function_t *start, jl_value_t *completion_future, size_t /;"	f	typeref:typename:JL_DLLEXPORT jl_task_t *
jl_new_typemap_level	src/typemap.c	/^static jl_typemap_level_t *jl_new_typemap_level(void)$/;"	f	typeref:typename:jl_typemap_level_t *	file:
jl_new_typename_in	src/datatype.c	/^JL_DLLEXPORT jl_typename_t *jl_new_typename_in(jl_sym_t *name, jl_module_t *module)$/;"	f	typeref:typename:JL_DLLEXPORT jl_typename_t *
jl_new_uninitialized_datatype	src/datatype.c	/^jl_datatype_t *jl_new_uninitialized_datatype(void)$/;"	f	typeref:typename:jl_datatype_t *
jl_newbits_func	src/codegen.cpp	/^static Function *jl_newbits_func;$/;"	v	typeref:typename:Function *	file:
jl_newmeth_tracer	src/gf.c	/^tracer_cb jl_newmeth_tracer = NULL;$/;"	v	typeref:typename:tracer_cb
jl_newvarnode_type	src/jltypes.c	/^jl_datatype_t *jl_newvarnode_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_next_from_addrinfo	src/jl_uv.c	/^JL_DLLEXPORT struct addrinfo *jl_next_from_addrinfo(struct addrinfo *addrinfo)$/;"	f	typeref:typename:JL_DLLEXPORT struct addrinfo *
jl_nfields	src/julia.h	/^#define jl_nfields(/;"	d
jl_no_exc_handler	src/task.c	/^JL_DLLEXPORT JL_NORETURN void jl_no_exc_handler(jl_value_t *e)$/;"	f	typeref:typename:JL_DLLEXPORT JL_NORETURN void
jl_nonfunction_mt	src/jltypes.c	/^jl_methtable_t *jl_nonfunction_mt;$/;"	v	typeref:typename:jl_methtable_t *
jl_nothing	src/jltypes.c	/^jl_value_t *jl_nothing;$/;"	v	typeref:typename:jl_value_t *
jl_nparams	src/julia.h	/^#define jl_nparams(/;"	d
jl_ns2ms	src/gc-debug.c	/^STATIC_INLINE double jl_ns2ms(int64_t t)$/;"	f	typeref:typename:STATIC_INLINE double
jl_ns2s	src/gc-debug.c	/^STATIC_INLINE double jl_ns2s(int64_t t)$/;"	f	typeref:typename:STATIC_INLINE double
jl_ntdll_handle	src/init.c	/^void *jl_ntdll_handle;$/;"	v	typeref:typename:void *
jl_nth_slot_type	src/gf.c	/^jl_value_t *jl_nth_slot_type(jl_value_t *sig, size_t i)$/;"	f	typeref:typename:jl_value_t *
jl_nth_union_component	src/jltypes.c	/^jl_value_t *jl_nth_union_component(jl_value_t *v, int i) JL_NOTSAFEPOINT$/;"	f	typeref:typename:jl_value_t *
jl_nullable_float32_t	src/julia.h	/^} jl_nullable_float32_t;$/;"	t	typeref:struct:__anon055fe4271a08
jl_nullable_float64_t	src/julia.h	/^} jl_nullable_float64_t;$/;"	t	typeref:struct:__anon055fe4271908
jl_number_type	src/jltypes.c	/^jl_datatype_t *jl_number_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_object_id	src/builtins.c	/^JL_DLLEXPORT uintptr_t jl_object_id(jl_value_t *v) JL_NOTSAFEPOINT$/;"	f	typeref:typename:JL_DLLEXPORT uintptr_t
jl_object_id_	src/builtins.c	/^JL_DLLEXPORT uintptr_t jl_object_id_(jl_value_t *tv, jl_value_t *v) JL_NOTSAFEPOINT$/;"	f	typeref:typename:JL_DLLEXPORT uintptr_t
jl_object_id__func	src/codegen.cpp	/^static Function *jl_object_id__func;$/;"	v	typeref:typename:Function *	file:
jl_obvious_subtype	src/subtype.c	/^JL_DLLEXPORT int jl_obvious_subtype(jl_value_t *x, jl_value_t *y, int *subtype)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_obviously_unequal	src/subtype.c	/^int jl_obviously_unequal(jl_value_t *a, jl_value_t *b)$/;"	f	typeref:typename:int
jl_op_suffix_char	src/flisp/julia_extensions.c	/^int jl_op_suffix_char(uint32_t wc)$/;"	f	typeref:typename:int
jl_operator_precedence	src/ast.c	/^JL_DLLEXPORT int jl_operator_precedence(char *sym)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_options	src/jloptions.c	/^jl_options_t jl_options = { 0,    \/\/ quiet$/;"	v	typeref:typename:jl_options_t
jl_options_t	src/julia.h	/^} jl_options_t;$/;"	t	typeref:struct:__anon055fe4271808
jl_ordereddict_t	src/julia.h	/^struct jl_ordereddict_t {$/;"	s
jl_outer_unionall_vars	src/subtype.c	/^jl_svec_t *jl_outer_unionall_vars(jl_value_t *u)$/;"	f	typeref:typename:jl_svec_t *
jl_page_size	src/init.c	/^size_t jl_page_size;$/;"	v	typeref:typename:size_t
jl_parray_llvmt	src/codegen.cpp	/^static Type *jl_parray_llvmt;$/;"	v	typeref:typename:Type *	file:
jl_parse_all	src/ast.c	/^JL_DLLEXPORT jl_value_t *jl_parse_all(const char *str, size_t len, const char *filename, size_t /;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_parse_eval_all	src/ast.c	/^jl_value_t *jl_parse_eval_all(const char *fname,$/;"	f	typeref:typename:jl_value_t *
jl_parse_input_line	src/ast.c	/^JL_DLLEXPORT jl_value_t *jl_parse_input_line(const char *str, size_t len, const char *filename, /;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_parse_opts	src/jloptions.c	/^JL_DLLEXPORT void jl_parse_opts(int *argcp, char ***argvp)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_parse_string	src/ast.c	/^JL_DLLEXPORT jl_value_t *jl_parse_string(const char *str, size_t len,$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_pathname_for_handle	src/sys.c	/^JL_DLLEXPORT const char *jl_pathname_for_handle(void *handle)$/;"	f	typeref:typename:JL_DLLEXPORT const char *
jl_pchar_to_array	src/array.c	/^JL_DLLEXPORT jl_array_t *jl_pchar_to_array(const char *str, size_t len)$/;"	f	typeref:typename:JL_DLLEXPORT jl_array_t *
jl_pchar_to_string	src/array.c	/^JL_DLLEXPORT jl_value_t *jl_pchar_to_string(const char *str, size_t len)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_perm_symsvec	src/julia_internal.h	/^#define jl_perm_symsvec(/;"	d
jl_pgcstack	src/julia.h	/^#define jl_pgcstack /;"	d
jl_phicnode_type	src/jltypes.c	/^jl_datatype_t *jl_phicnode_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_phinode_type	src/jltypes.c	/^jl_datatype_t *jl_phinode_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_pinode_type	src/jltypes.c	/^jl_datatype_t *jl_pinode_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_pointer_type	src/jltypes.c	/^jl_unionall_t *jl_pointer_type;$/;"	v	typeref:typename:jl_unionall_t *
jl_pointer_typename	src/jltypes.c	/^jl_typename_t *jl_pointer_typename;$/;"	v	typeref:typename:jl_typename_t *
jl_pointerref	src/runtime_intrinsics.c	/^JL_DLLEXPORT jl_value_t *jl_pointerref(jl_value_t *p, jl_value_t *i, jl_value_t *align)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_pointerset	src/runtime_intrinsics.c	/^JL_DLLEXPORT jl_value_t *jl_pointerset(jl_value_t *p, jl_value_t *x, jl_value_t *i, jl_value_t */;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_pop_handler	src/rtutils.c	/^JL_DLLEXPORT void jl_pop_handler(int n)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_pop_timing_block	src/timing.c	/^jl_timing_block_t *jl_pop_timing_block(jl_timing_block_t *cur_block)$/;"	f	typeref:typename:jl_timing_block_t *
jl_ppvalue_dillvmt	src/codegen.cpp	/^static DIDerivedType *jl_ppvalue_dillvmt;$/;"	v	typeref:typename:DIDerivedType *	file:
jl_precompile	src/precompile.c	/^void jl_precompile(int all)$/;"	f	typeref:typename:void
jl_precompute_memoized_dt	src/jltypes.c	/^void jl_precompute_memoized_dt(jl_datatype_t *dt)$/;"	f	typeref:typename:void
jl_preload_sysimg_so	src/staticdata.c	/^JL_DLLEXPORT void jl_preload_sysimg_so(const char *fname)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_prep_sanitizers	src/init.c	/^static void jl_prep_sanitizers(void)$/;"	f	typeref:typename:void	file:
jl_prepend_cwd	src/toplevel.c	/^JL_DLLEXPORT jl_value_t *jl_prepend_cwd(jl_value_t *str)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_print_gc_stats	src/gc-debug.c	/^void jl_print_gc_stats(JL_STREAM *s)$/;"	f	typeref:typename:void
jl_print_timings	src/timing.c	/^void jl_print_timings(void)$/;"	f	typeref:typename:void
jl_printf	src/jl_uv.c	/^JL_DLLEXPORT int jl_printf(uv_stream_t *s, const char *format, ...)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_proc_exit_cleanup_cb	src/jl_uv.c	/^static void jl_proc_exit_cleanup_cb(uv_process_t *process, int64_t exit_status, int term_signal)$/;"	f	typeref:typename:void	file:
jl_process_events	src/jl_uv.c	/^JL_DLLEXPORT int jl_process_events(uv_loop_t *loop)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_process_exit_status	src/sys.c	/^int jl_process_exit_status(int status) { return WEXITSTATUS(status); }$/;"	f	typeref:typename:int
jl_process_exited	src/sys.c	/^int jl_process_exited(int status)      { return WIFEXITED(status); }$/;"	f	typeref:typename:int
jl_process_signaled	src/sys.c	/^int jl_process_signaled(int status)    { return WIFSIGNALED(status); }$/;"	f	typeref:typename:int
jl_process_stop_signal	src/sys.c	/^int jl_process_stop_signal(int status) { return WSTOPSIG(status); }$/;"	f	typeref:typename:int
jl_process_stopped	src/sys.c	/^int jl_process_stopped(int status)     { return WIFSTOPPED(status); }$/;"	f	typeref:typename:int
jl_process_term_signal	src/sys.c	/^int jl_process_term_signal(int status) { return WTERMSIG(status); }$/;"	f	typeref:typename:int
jl_processor_print_help	src/processor.cpp	/^bool jl_processor_print_help = false;$/;"	v	typeref:typename:bool
jl_profile_clear_data	src/signal-handling.c	/^JL_DLLEXPORT void jl_profile_clear_data(void)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_profile_delay_nsec	src/signal-handling.c	/^JL_DLLEXPORT uint64_t jl_profile_delay_nsec(void)$/;"	f	typeref:typename:JL_DLLEXPORT uint64_t
jl_profile_get_data	src/signal-handling.c	/^JL_DLLEXPORT uint8_t *jl_profile_get_data(void)$/;"	f	typeref:typename:JL_DLLEXPORT uint8_t *
jl_profile_init	src/signal-handling.c	/^JL_DLLEXPORT int jl_profile_init(size_t maxsize, uint64_t delay_nsec)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_profile_is_running	src/signal-handling.c	/^JL_DLLEXPORT int jl_profile_is_running(void)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_profile_len_data	src/signal-handling.c	/^JL_DLLEXPORT size_t jl_profile_len_data(void)$/;"	f	typeref:typename:JL_DLLEXPORT size_t
jl_profile_maxlen_data	src/signal-handling.c	/^JL_DLLEXPORT size_t jl_profile_maxlen_data(void)$/;"	f	typeref:typename:JL_DLLEXPORT size_t
jl_profile_start_timer	src/signals-mach.c	/^JL_DLLEXPORT int jl_profile_start_timer(void)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_profile_start_timer	src/signals-unix.c	/^JL_DLLEXPORT int jl_profile_start_timer(void)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_profile_start_timer	src/signals-win.c	/^JL_DLLEXPORT int jl_profile_start_timer(void)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_profile_stop_timer	src/signals-mach.c	/^JL_DLLEXPORT void jl_profile_stop_timer(void)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_profile_stop_timer	src/signals-unix.c	/^JL_DLLEXPORT void jl_profile_stop_timer(void)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_profile_stop_timer	src/signals-win.c	/^JL_DLLEXPORT void jl_profile_stop_timer(void)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_prune_type_cache	src/staticdata.c	/^static void jl_prune_type_cache(jl_svec_t *cache)$/;"	f	typeref:typename:void	file:
jl_ptls_t	src/threading.c	/^JL_DLLEXPORT JL_CONST_FUNC jl_ptls_t (jl_get_ptls_states)(void) JL_GLOBALLY_ROOTED$/;"	f	typeref:typename:JL_DLLEXPORT JL_CONST_FUNC
jl_ptls_t	src/tls.h	/^typedef jl_tls_states_t *jl_ptls_t;$/;"	t	typeref:typename:jl_tls_states_t *
jl_ptr	src/ccall.cpp	/^    Value *jl_ptr;  \/\/ if the argument is a run-time computed pointer$/;"	m	struct:__anonc9e75fcc0208	typeref:typename:Value *	file:
jl_ptr_to_array	src/array.c	/^JL_DLLEXPORT jl_array_t *jl_ptr_to_array(jl_value_t *atype, void *data,$/;"	f	typeref:typename:JL_DLLEXPORT jl_array_t *
jl_ptr_to_array_1d	src/array.c	/^JL_DLLEXPORT jl_array_t *jl_ptr_to_array_1d(jl_value_t *atype, void *data,$/;"	f	typeref:typename:JL_DLLEXPORT jl_array_t *
jl_ptrarrayref	src/array.c	/^JL_DLLEXPORT jl_value_t *jl_ptrarrayref(jl_array_t *a JL_PROPAGATES_ROOT, size_t i) JL_NOTSAFEPO/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_push_excstack	src/rtutils.c	/^void jl_push_excstack(jl_excstack_t **stack JL_REQUIRE_ROOTED_SLOT JL_ROOTING_ARGUMENT,$/;"	f	typeref:typename:void
jl_pvalue_dillvmt	src/codegen.cpp	/^static DIDerivedType *jl_pvalue_dillvmt;$/;"	v	typeref:typename:DIDerivedType *	file:
jl_pwrite	src/sys.c	/^JL_DLLEXPORT ssize_t jl_pwrite(int fd, const void *buf, size_t count, int64_t offset)$/;"	f	typeref:typename:JL_DLLEXPORT ssize_t
jl_queue_work	src/jl_uv.c	/^JL_DLLEXPORT int jl_queue_work(work_cb_t work_func, void *work_args, void *work_retval,$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_quotenode_type	src/jltypes.c	/^jl_datatype_t *jl_quotenode_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_quotenode_value	src/julia.h	/^#define jl_quotenode_value(/;"	d
jl_raise_debugger	src/sys.c	/^JL_DLLEXPORT void jl_raise_debugger(void)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_read_relocations	src/staticdata.c	/^static void jl_read_relocations(jl_serializer_state *s, uint8_t bits)$/;"	f	typeref:typename:void	file:
jl_read_symbols	src/staticdata.c	/^static void jl_read_symbols(jl_serializer_state *s)$/;"	f	typeref:typename:void	file:
jl_read_value	src/staticdata.c	/^static jl_value_t *jl_read_value(jl_serializer_state *s)$/;"	f	typeref:typename:jl_value_t *	file:
jl_read_verify_header	src/dump.c	/^JL_DLLEXPORT int jl_read_verify_header(ios_t *s)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_readonlymemory_exception	src/jltypes.c	/^jl_value_t *jl_readonlymemory_exception;$/;"	v	typeref:typename:jl_value_t *
jl_readuntil	src/sys.c	/^JL_DLLEXPORT jl_value_t *jl_readuntil(ios_t *s, uint8_t delim, uint8_t str, uint8_t chomp)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_realloc	src/gc.c	/^JL_DLLEXPORT void *jl_realloc(void *p, size_t sz)$/;"	f	typeref:typename:JL_DLLEXPORT void *
jl_realloc_aligned	src/julia_internal.h	/^STATIC_INLINE void *jl_realloc_aligned(void *d, size_t sz, size_t oldsz,$/;"	f	typeref:typename:STATIC_INLINE void *
jl_realloc_aligned	src/julia_internal.h	/^STATIC_INLINE void *jl_realloc_aligned(void *p, size_t sz, size_t oldsz,$/;"	f	typeref:typename:STATIC_INLINE void *
jl_recache_method	src/dump.c	/^static jl_method_t *jl_recache_method(jl_method_t *m, size_t start, arraylist_t *dependent_world/;"	f	typeref:typename:jl_method_t *	file:
jl_recache_method_instance	src/dump.c	/^static jl_method_instance_t *jl_recache_method_instance(jl_method_instance_t *mi, size_t start, /;"	f	typeref:typename:jl_method_instance_t *	file:
jl_recache_other	src/dump.c	/^static void jl_recache_other(arraylist_t *dependent_worlds)$/;"	f	typeref:typename:void	file:
jl_recache_type	src/dump.c	/^static jl_datatype_t *jl_recache_type(jl_datatype_t *dt, size_t start, jl_value_t *v) JL_GC_DISA/;"	f	typeref:typename:jl_datatype_t *	file:
jl_recache_types	src/dump.c	/^static void jl_recache_types(void) JL_GC_DISABLED$/;"	f	typeref:typename:void	file:
jl_ref_type	src/jltypes.c	/^jl_unionall_t *jl_ref_type;$/;"	v	typeref:typename:jl_unionall_t *
jl_refresh_dbg_module_list	src/stackwalk.c	/^void jl_refresh_dbg_module_list(void)$/;"	f	typeref:typename:void
jl_register_fptrs	src/anticodegen.c	/^void jl_register_fptrs(uint64_t sysimage_base, const struct _jl_sysimg_fptrs_t *fptrs,$/;"	f	typeref:typename:void
jl_register_fptrs	src/debuginfo.cpp	/^void jl_register_fptrs(uint64_t sysimage_base, const jl_sysimg_fptrs_t *fptrs,$/;"	f	typeref:typename:void
jl_register_newmeth_tracer	src/gf.c	/^JL_DLLEXPORT void jl_register_newmeth_tracer(void (*callback)(jl_method_t *tracee))$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_register_root_module	src/toplevel.c	/^void jl_register_root_module(jl_module_t *m)$/;"	f	typeref:typename:void
jl_reinit_item	src/dump.c	/^static void jl_reinit_item(jl_value_t *v, int how, arraylist_t *tracee_list)$/;"	f	typeref:typename:void	file:
jl_reinit_item	src/staticdata.c	/^static void jl_reinit_item(jl_value_t *v, int how)$/;"	f	typeref:typename:void	file:
jl_reinstantiate_inner_types	src/jltypes.c	/^void jl_reinstantiate_inner_types(jl_datatype_t *t) \/\/ can throw!$/;"	f	typeref:typename:void
jl_release_task_stack	src/gc-stacks.c	/^void jl_release_task_stack(jl_ptls_t ptls, jl_task_t *task)$/;"	f	typeref:typename:void
jl_repl_raise_sigtstp	src/signals-unix.c	/^JL_DLLEXPORT int jl_repl_raise_sigtstp(void)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_reserve_excstack	src/rtutils.c	/^void jl_reserve_excstack(jl_excstack_t **stack JL_REQUIRE_ROOTED_SLOT,$/;"	f	typeref:typename:void
jl_reset_instantiate_inner_types	src/jltypes.c	/^void jl_reset_instantiate_inner_types(jl_datatype_t *t)$/;"	f	typeref:typename:void
jl_reshape_array	src/array.c	/^JL_DLLEXPORT jl_array_t *jl_reshape_array(jl_value_t *atype, jl_array_t *data,$/;"	f	typeref:typename:JL_DLLEXPORT jl_array_t *
jl_resolve_globals_in_ir	src/method.c	/^void jl_resolve_globals_in_ir(jl_array_t *stmts, jl_module_t *m, jl_svec_t *sparam_vals,$/;"	f	typeref:typename:void
jl_resolve_sysimg_location	src/init.c	/^static void jl_resolve_sysimg_location(JL_IMAGE_SEARCH rel)$/;"	f	typeref:typename:void	file:
jl_restore_excstack	src/rtutils.c	/^JL_DLLEXPORT void jl_restore_excstack(size_t state)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_restore_excstack_func	src/codegen.cpp	/^static Function *jl_restore_excstack_func;$/;"	v	typeref:typename:Function *	file:
jl_restore_incremental	src/dump.c	/^JL_DLLEXPORT jl_value_t *jl_restore_incremental(const char *fname, jl_array_t *mod_array)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_restore_incremental_from_buf	src/dump.c	/^JL_DLLEXPORT jl_value_t *jl_restore_incremental_from_buf(const char *buf, size_t sz, jl_array_t /;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_restore_system_image	src/staticdata.c	/^JL_DLLEXPORT void jl_restore_system_image(const char *fname)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_restore_system_image_data	src/staticdata.c	/^JL_DLLEXPORT void jl_restore_system_image_data(const char *buf, size_t len)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_restore_system_image_from_stream	src/staticdata.c	/^static void jl_restore_system_image_from_stream(ios_t *f)$/;"	f	typeref:typename:void	file:
jl_rethrow	src/task.c	/^JL_DLLEXPORT void jl_rethrow(void)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_rethrow_other	src/task.c	/^JL_DLLEXPORT void jl_rethrow_other(jl_value_t *e JL_MAYBE_UNROOTED)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_rethrow_with_add	src/codegen.cpp	/^static void jl_rethrow_with_add(const char *fmt, ...)$/;"	f	typeref:typename:void	file:
jl_rettype_inferred	src/gf.c	/^JL_DLLEXPORT jl_value_t *jl_rettype_inferred(jl_method_instance_t *mi, size_t min_world, size_t /;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_return_address	src/julia_internal.h	/^#  define jl_return_address(/;"	d
jl_returninfo_t	src/codegen.cpp	/^struct jl_returninfo_t {$/;"	s	file:
jl_rewrap_unionall	src/jltypes.c	/^jl_value_t *jl_rewrap_unionall(jl_value_t *t, jl_value_t *u)$/;"	f	typeref:typename:jl_value_t *
jl_root_task	src/julia.h	/^#define jl_root_task /;"	d
jl_root_timing	src/timing.c	/^jl_timing_block_t *jl_root_timing;$/;"	v	typeref:typename:jl_timing_block_t *
jl_run_once	src/jl_uv.c	/^JL_DLLEXPORT int jl_run_once(uv_loop_t *loop)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_running_on_valgrind	src/staticdata.c	/^JL_DLLEXPORT int jl_running_on_valgrind(void)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_safe_printf	src/jl_uv.c	/^JL_DLLEXPORT void jl_safe_printf(const char *fmt, ...) JL_NOTSAFEPOINT$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_safe_read_mem	src/signal-handling.c	/^static size_t jl_safe_read_mem(const volatile char *ptr, char *out, size_t len)$/;"	f	typeref:typename:size_t	file:
jl_safepoint_consume_sigint	src/safepoint.c	/^int jl_safepoint_consume_sigint(void)$/;"	f	typeref:typename:int
jl_safepoint_defer_sigint	src/safepoint.c	/^void jl_safepoint_defer_sigint(void)$/;"	f	typeref:typename:void
jl_safepoint_disable	src/safepoint.c	/^static void jl_safepoint_disable(int idx)$/;"	f	typeref:typename:void	file:
jl_safepoint_enable	src/safepoint.c	/^static void jl_safepoint_enable(int idx)$/;"	f	typeref:typename:void	file:
jl_safepoint_enable_cnt	src/safepoint.c	/^uint8_t jl_safepoint_enable_cnt[3] = {0, 0, 0};$/;"	v	typeref:typename:uint8_t[3]
jl_safepoint_enable_sigint	src/safepoint.c	/^void jl_safepoint_enable_sigint(void)$/;"	f	typeref:typename:void
jl_safepoint_end_gc	src/safepoint.c	/^void jl_safepoint_end_gc(void)$/;"	f	typeref:typename:void
jl_safepoint_init	src/safepoint.c	/^void jl_safepoint_init(void)$/;"	f	typeref:typename:void
jl_safepoint_pages	src/safepoint.c	/^char *jl_safepoint_pages = NULL;$/;"	v	typeref:typename:char *
jl_safepoint_start_gc	src/safepoint.c	/^int jl_safepoint_start_gc(void)$/;"	f	typeref:typename:int
jl_safepoint_wait_gc	src/safepoint.c	/^void jl_safepoint_wait_gc(void)$/;"	f	typeref:typename:void
jl_save_incremental	src/dump.c	/^JL_DLLEXPORT int jl_save_incremental(const char *fname, jl_array_t *worklist)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_save_system_image	src/staticdata.c	/^JL_DLLEXPORT void jl_save_system_image(const char *fname)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_save_system_image_to_stream	src/staticdata.c	/^static void jl_save_system_image_to_stream(ios_t *f)$/;"	f	typeref:typename:void	file:
jl_savedenv_t	src/subtype.c	/^} jl_savedenv_t;$/;"	t	typeref:struct:__anon0f0258f90208	file:
jl_schedule_task	src/task.c	/^void JL_DLLEXPORT jl_schedule_task(jl_task_t *task)$/;"	f	typeref:typename:void JL_DLLEXPORT
jl_segv_exception	src/jltypes.c	/^jl_value_t *jl_segv_exception;$/;"	v	typeref:typename:jl_value_t *
jl_serialize_datatype	src/dump.c	/^static void jl_serialize_datatype(jl_serializer_state *s, jl_datatype_t *dt) JL_GC_DISABLED$/;"	f	typeref:typename:void	file:
jl_serialize_module	src/dump.c	/^static void jl_serialize_module(jl_serializer_state *s, jl_module_t *m)$/;"	f	typeref:typename:void	file:
jl_serialize_module	src/staticdata.c	/^static void jl_serialize_module(jl_serializer_state *s, jl_module_t *m)$/;"	f	typeref:typename:void	file:
jl_serialize_value	src/dump.c	/^#define jl_serialize_value(/;"	d	file:
jl_serialize_value	src/staticdata.c	/^#define jl_serialize_value(/;"	d	file:
jl_serialize_value_	src/dump.c	/^static void jl_serialize_value_(jl_serializer_state *s, jl_value_t *v, int as_literal) JL_GC_DIS/;"	f	typeref:typename:void	file:
jl_serialize_value_	src/staticdata.c	/^static void jl_serialize_value_(jl_serializer_state *s, jl_value_t *v)$/;"	f	typeref:typename:void	file:
jl_serialize_value_cstring	src/dump.c	/^static void jl_serialize_value_cstring(jl_serializer_state *s, char *cstring) JL_GC_DISABLED$/;"	f	typeref:typename:void	file:
jl_serializer_state	src/dump.c	/^} jl_serializer_state;$/;"	t	typeref:struct:__anon570497e30108	file:
jl_serializer_state	src/staticdata.c	/^} jl_serializer_state;$/;"	t	typeref:struct:__anonc3a2e68f0108	file:
jl_set_ARGS	src/jloptions.c	/^JL_DLLEXPORT void jl_set_ARGS(int argc, char **argv)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_set_const	src/module.c	/^JL_DLLEXPORT void jl_set_const(jl_module_t *m JL_ROOTING_ARGUMENT, jl_sym_t *var, jl_value_t *va/;"	f	typeref:typename:JL_DLLEXPORT void
jl_set_datatype_super	src/interpreter.c	/^SECT_INTERP void jl_set_datatype_super(jl_datatype_t *tt, jl_value_t *super)$/;"	f	typeref:typename:SECT_INTERP void
jl_set_errno	src/sys.c	/^JL_DLLEXPORT void jl_set_errno(int e) { errno = e; }$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_set_fiber	src/task.c	/^static void jl_set_fiber(jl_ucontext_t *t)$/;"	f	typeref:typename:void	file:
jl_set_fiber	src/task.c	/^static void jl_set_fiber(unw_context_t *t)$/;"	f	typeref:typename:void	file:
jl_set_gc_and_wait	src/julia_internal.h	/^static inline void jl_set_gc_and_wait(void)$/;"	f	typeref:typename:void
jl_set_global	src/module.c	/^JL_DLLEXPORT void jl_set_global(jl_module_t *m JL_ROOTING_ARGUMENT, jl_sym_t *var, jl_value_t *v/;"	f	typeref:typename:JL_DLLEXPORT void
jl_set_gs_ctr	src/symbol.c	/^void jl_set_gs_ctr(uint32_t ctr) { gs_ctr = ctr; }$/;"	f	typeref:typename:void
jl_set_io_wait	src/init.c	/^static void jl_set_io_wait(int v)$/;"	f	typeref:typename:void	file:
jl_set_istopmod	src/module.c	/^JL_DLLEXPORT void jl_set_istopmod(jl_module_t *self, uint8_t isprimary)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_set_method_inferred	src/gf.c	/^JL_DLLEXPORT jl_code_instance_t *jl_set_method_inferred($/;"	f	typeref:typename:JL_DLLEXPORT jl_code_instance_t *
jl_set_module_nospecialize	src/module.c	/^JL_DLLEXPORT void jl_set_module_nospecialize(jl_module_t *self, int on)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_set_module_uuid	src/module.c	/^JL_DLLEXPORT void jl_set_module_uuid(jl_module_t *m, jl_uuid_t uuid) { m->uuid = uuid; }$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_set_nth_field	src/datatype.c	/^JL_DLLEXPORT void jl_set_nth_field(jl_value_t *v, size_t i, jl_value_t *rhs) JL_NOTSAFEPOINT$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_set_sysimg_so	src/staticdata.c	/^JL_DLLEXPORT void jl_set_sysimg_so(void *handle)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_set_t_uid_ctr	src/jltypes.c	/^void jl_set_t_uid_ctr(int i) { t_uid_ctr=i; }$/;"	f	typeref:typename:void
jl_set_task_tid	src/partr.c	/^JL_DLLEXPORT void jl_set_task_tid(jl_task_t *task, int tid) JL_NOTSAFEPOINT$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_set_typeinf_func	src/gf.c	/^JL_DLLEXPORT void jl_set_typeinf_func(jl_value_t *f)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_set_typeof	src/julia.h	/^static inline void jl_set_typeof(void *v, void *t) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void
jl_set_zero_subnormals	src/processor_arm.cpp	/^extern "C" JL_DLLEXPORT int32_t jl_set_zero_subnormals(int8_t isZero)$/;"	f	typeref:typename:JL_DLLEXPORT int32_t
jl_set_zero_subnormals	src/processor_fallback.cpp	/^extern "C" JL_DLLEXPORT int32_t jl_set_zero_subnormals(int8_t isZero)$/;"	f	typeref:typename:JL_DLLEXPORT int32_t
jl_set_zero_subnormals	src/processor_x86.cpp	/^extern "C" JL_DLLEXPORT int32_t jl_set_zero_subnormals(int8_t isZero)$/;"	f	typeref:typename:JL_DLLEXPORT int32_t
jl_setjmp	src/flisp/flisp.h	/^int (jl_setjmp)(jmp_buf _Buf);$/;"	v	typeref:typename:int ()(jmp_buf _Buf)
jl_setjmp	src/flisp/flisp.h	/^int __attribute__ ((__nothrow__,__returns_twice__)) (jl_setjmp)(jmp_buf _Buf);$/;"	v	typeref:typename:int ()(jmp_buf _Buf)
jl_setjmp	src/julia.h	/^#define jl_setjmp(/;"	d
jl_setjmp	src/julia.h	/^int (jl_setjmp)(jmp_buf _Buf);$/;"	v	typeref:typename:int ()(jmp_buf _Buf)
jl_setjmp	src/julia.h	/^int __attribute__ ((__nothrow__,__returns_twice__)) (jl_setjmp)(jmp_buf _Buf);$/;"	v	typeref:typename:int ()(jmp_buf _Buf)
jl_setjmp_f	src/julia.h	/^#define jl_setjmp_f /;"	d
jl_setjmp_name	src/julia.h	/^#define jl_setjmp_name /;"	d
jl_setup_module	src/codegen.cpp	/^static void jl_setup_module(Module *m, const jl_cgparams_t *params = &jl_default_cgparams)$/;"	f	typeref:typename:void	file:
jl_shadow_output_to_bc	src/precompile.c	/^JL_DLLEXPORT int jl_shadow_output_to_bc(const char *jipath)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_show_sigill	src/signal-handling.c	/^void jl_show_sigill(void *_ctx)$/;"	f	typeref:typename:void
jl_show_svec	src/rtutils.c	/^static size_t jl_show_svec(JL_STREAM *out, jl_svec_t *t, const char *head, const char *opn, cons/;"	f	typeref:typename:size_t	file:
jl_sig_throw	src/task.c	/^JL_DLLEXPORT void jl_sig_throw(void)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_sigatomic_begin	src/jlapi.c	/^JL_DLLEXPORT void jl_sigatomic_begin(void)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_sigatomic_end	src/jlapi.c	/^JL_DLLEXPORT void jl_sigatomic_end(void)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_sigint_passed	src/signal-handling.c	/^static volatile int jl_sigint_passed = 0;$/;"	v	typeref:typename:volatile int	file:
jl_sigint_safepoint	src/julia_threads.h	/^#define jl_sigint_safepoint(/;"	d
jl_sigint_sset	src/signal-handling.c	/^static sigset_t jl_sigint_sset;$/;"	v	typeref:typename:sigset_t	file:
jl_signal_async_cb	src/jl_uv.c	/^static void jl_signal_async_cb(uv_async_t *hdl)$/;"	f	typeref:typename:void	file:
jl_signal_fence	src/atomics.h	/^#  define jl_signal_fence(/;"	d
jl_signal_pending	src/safepoint.c	/^JL_DLLEXPORT sig_atomic_t jl_signal_pending = 0;$/;"	v	typeref:typename:JL_DLLEXPORT sig_atomic_t
jl_signed_type	src/jltypes.c	/^jl_datatype_t *jl_signed_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_sigsetset	src/signals-unix.c	/^static void jl_sigsetset(sigset_t *sset)$/;"	f	typeref:typename:void	file:
jl_simplevector_type	src/jltypes.c	/^jl_datatype_t *jl_simplevector_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_singleton_tag	src/gc.h	/^#define jl_singleton_tag /;"	d
jl_sizeof_ios_t	src/sys.c	/^JL_DLLEXPORT int jl_sizeof_ios_t(void) { return sizeof(ios_t); }$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_sizeof_jl_options	src/jloptions.c	/^JL_DLLEXPORT ssize_t jl_sizeof_jl_options(void)$/;"	f	typeref:typename:JL_DLLEXPORT ssize_t
jl_sizeof_mode_t	src/sys.c	/^JL_DLLEXPORT int jl_sizeof_mode_t(void) { return sizeof(mode_t); }$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_sizeof_off_t	src/sys.c	/^JL_DLLEXPORT int jl_sizeof_off_t(void) { return sizeof(off_t); }$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_sizeof_stat	src/sys.c	/^JL_DLLEXPORT int jl_sizeof_stat(void) { return sizeof(uv_stat_t); }$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_sizeof_uv_fs_t	src/sys.c	/^JL_DLLEXPORT int jl_sizeof_uv_fs_t(void) { return sizeof(uv_fs_t); }$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_slot_number	src/julia.h	/^#define jl_slot_number(/;"	d
jl_slotnumber_type	src/jltypes.c	/^jl_datatype_t *jl_slotnumber_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_sockaddr_fill	src/jl_uv.c	/^static void jl_sockaddr_fill(uv_sockaddr_in *addr, uint16_t port, void *host, int ipv6)$/;"	f	typeref:typename:void	file:
jl_sockaddr_from_addrinfo	src/jl_uv.c	/^JL_DLLEXPORT struct sockaddr *jl_sockaddr_from_addrinfo(struct addrinfo *addrinfo)$/;"	f	typeref:typename:JL_DLLEXPORT struct sockaddr *
jl_sockaddr_host4	src/jl_uv.c	/^JL_DLLEXPORT uint32_t jl_sockaddr_host4(struct sockaddr_in *addr)$/;"	f	typeref:typename:JL_DLLEXPORT uint32_t
jl_sockaddr_host6	src/jl_uv.c	/^JL_DLLEXPORT unsigned jl_sockaddr_host6(struct sockaddr_in6 *addr, char *host)$/;"	f	typeref:typename:JL_DLLEXPORT unsigned
jl_sockaddr_is_ip4	src/jl_uv.c	/^JL_DLLEXPORT int jl_sockaddr_is_ip4(struct sockaddr *addr)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_sockaddr_is_ip6	src/jl_uv.c	/^JL_DLLEXPORT int jl_sockaddr_is_ip6(struct sockaddr *addr)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_sockaddr_port4	src/jl_uv.c	/^JL_DLLEXPORT uint16_t jl_sockaddr_port4(struct sockaddr_in *addr)$/;"	f	typeref:typename:JL_DLLEXPORT uint16_t
jl_sockaddr_port6	src/jl_uv.c	/^JL_DLLEXPORT uint16_t jl_sockaddr_port6(struct sockaddr_in6 *addr)$/;"	f	typeref:typename:JL_DLLEXPORT uint16_t
jl_sockaddr_set_port	src/jl_uv.c	/^JL_DLLEXPORT void jl_sockaddr_set_port(uv_sockaddr_in *addr, uint16_t port)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_sort_types	src/jltypes.c	/^void jl_sort_types(jl_value_t **types, size_t length)$/;"	f	typeref:typename:void
jl_source_nslots	src/interpreter.c	/^SECT_INTERP static int jl_source_nslots(jl_code_info_t *src) JL_NOTSAFEPOINT$/;"	f	typeref:typename:SECT_INTERP int	file:
jl_source_nssavalues	src/interpreter.c	/^SECT_INTERP static int jl_source_nssavalues(jl_code_info_t *src) JL_NOTSAFEPOINT$/;"	f	typeref:typename:SECT_INTERP int	file:
jl_spawn	src/jl_uv.c	/^JL_DLLEXPORT int jl_spawn(char *name, char **argv,$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_special_vector_alignment	src/datatype.c	/^unsigned jl_special_vector_alignment(size_t nfields, jl_value_t *t)$/;"	f	typeref:typename:unsigned
jl_specializations_get_linfo	src/gf.c	/^JL_DLLEXPORT jl_method_instance_t *jl_specializations_get_linfo(jl_method_t *m JL_PROPAGATES_ROO/;"	f	typeref:typename:JL_DLLEXPORT jl_method_instance_t *
jl_specializations_lookup	src/gf.c	/^JL_DLLEXPORT jl_value_t *jl_specializations_lookup(jl_method_t *m, jl_value_t *type)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_ssavalue_t	src/julia.h	/^} jl_ssavalue_t;$/;"	t	typeref:struct:_jl_ssavalue_t
jl_ssavalue_type	src/jltypes.c	/^jl_datatype_t *jl_ssavalue_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_stackovf_exception	src/jltypes.c	/^jl_value_t *jl_stackovf_exception;$/;"	v	typeref:typename:jl_value_t *
jl_start_fiber	src/task.c	/^static void jl_start_fiber(jl_ucontext_t *lastt, jl_ucontext_t *t)$/;"	f	typeref:typename:void	file:
jl_start_fiber	src/task.c	/^static void jl_start_fiber(unw_context_t *lastt, unw_context_t *t)$/;"	f	typeref:typename:void	file:
jl_start_threads	src/threading.c	/^void jl_start_threads(void)$/;"	f	typeref:typename:void
jl_stat	src/sys.c	/^JL_DLLEXPORT int32_t jl_stat(const char *path, char *statbuf)$/;"	f	typeref:typename:JL_DLLEXPORT int32_t
jl_stat_blksize	src/sys.c	/^JL_DLLEXPORT uint64_t jl_stat_blksize(char *statbuf)$/;"	f	typeref:typename:JL_DLLEXPORT uint64_t
jl_stat_blocks	src/sys.c	/^JL_DLLEXPORT uint64_t jl_stat_blocks(char *statbuf)$/;"	f	typeref:typename:JL_DLLEXPORT uint64_t
jl_stat_ctime	src/sys.c	/^JL_DLLEXPORT double jl_stat_ctime(char *statbuf)$/;"	f	typeref:typename:JL_DLLEXPORT double
jl_stat_dev	src/sys.c	/^JL_DLLEXPORT unsigned int jl_stat_dev(char *statbuf)$/;"	f	typeref:typename:JL_DLLEXPORT unsigned int
jl_stat_gid	src/sys.c	/^JL_DLLEXPORT unsigned int jl_stat_gid(char *statbuf)$/;"	f	typeref:typename:JL_DLLEXPORT unsigned int
jl_stat_ino	src/sys.c	/^JL_DLLEXPORT unsigned int jl_stat_ino(char *statbuf)$/;"	f	typeref:typename:JL_DLLEXPORT unsigned int
jl_stat_mode	src/sys.c	/^JL_DLLEXPORT unsigned int jl_stat_mode(char *statbuf)$/;"	f	typeref:typename:JL_DLLEXPORT unsigned int
jl_stat_mtime	src/sys.c	/^JL_DLLEXPORT double jl_stat_mtime(char *statbuf)$/;"	f	typeref:typename:JL_DLLEXPORT double
jl_stat_nlink	src/sys.c	/^JL_DLLEXPORT unsigned int jl_stat_nlink(char *statbuf)$/;"	f	typeref:typename:JL_DLLEXPORT unsigned int
jl_stat_rdev	src/sys.c	/^JL_DLLEXPORT unsigned int jl_stat_rdev(char *statbuf)$/;"	f	typeref:typename:JL_DLLEXPORT unsigned int
jl_stat_size	src/sys.c	/^JL_DLLEXPORT uint64_t jl_stat_size(char *statbuf)$/;"	f	typeref:typename:JL_DLLEXPORT uint64_t
jl_stat_uid	src/sys.c	/^JL_DLLEXPORT unsigned int jl_stat_uid(char *statbuf)$/;"	f	typeref:typename:JL_DLLEXPORT unsigned int
jl_static_show	src/rtutils.c	/^JL_DLLEXPORT size_t jl_static_show(JL_STREAM *out, jl_value_t *v) JL_NOTSAFEPOINT$/;"	f	typeref:typename:JL_DLLEXPORT size_t
jl_static_show_func_sig	src/rtutils.c	/^JL_DLLEXPORT size_t jl_static_show_func_sig(JL_STREAM *s, jl_value_t *type) JL_NOTSAFEPOINT$/;"	f	typeref:typename:JL_DLLEXPORT size_t
jl_static_show_next_	src/rtutils.c	/^static size_t jl_static_show_next_(JL_STREAM *out, jl_value_t *v, jl_value_t *prev, struct recur/;"	f	typeref:typename:size_t	file:
jl_static_show_x	src/rtutils.c	/^static size_t jl_static_show_x(JL_STREAM *out, jl_value_t *v, struct recur_list *depth) JL_NOTSA/;"	f	typeref:typename:size_t	file:
jl_static_show_x_	src/rtutils.c	/^static size_t jl_static_show_x_(JL_STREAM *out, jl_value_t *v, jl_datatype_t *vt,$/;"	f	typeref:typename:size_t	file:
jl_stderr_obj	src/rtutils.c	/^JL_DLLEXPORT jl_value_t *jl_stderr_obj(void) JL_NOTSAFEPOINT$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_stderr_stream	src/sys.c	/^JL_DLLEXPORT JL_STREAM *jl_stderr_stream(void) { return JL_STDERR; }$/;"	f	typeref:typename:JL_DLLEXPORT JL_STREAM *
jl_stdin_stream	src/sys.c	/^JL_DLLEXPORT JL_STREAM *jl_stdin_stream(void)  { return JL_STDIN; }$/;"	f	typeref:typename:JL_DLLEXPORT JL_STREAM *
jl_stdout_obj	src/rtutils.c	/^JL_DLLEXPORT jl_value_t *jl_stdout_obj(void) JL_NOTSAFEPOINT$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_stdout_stream	src/sys.c	/^JL_DLLEXPORT JL_STREAM *jl_stdout_stream(void) { return JL_STDOUT; }$/;"	f	typeref:typename:JL_DLLEXPORT JL_STREAM *
jl_stenv_t	src/subtype.c	/^typedef struct jl_stenv_t {$/;"	s	file:
jl_stenv_t	src/subtype.c	/^} jl_stenv_t;$/;"	t	typeref:struct:jl_stenv_t	file:
jl_store_unaligned_i16	src/support/dtypes.h	/^STATIC_INLINE void jl_store_unaligned_i16(void *ptr, uint16_t val) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE void
jl_store_unaligned_i32	src/support/dtypes.h	/^STATIC_INLINE void jl_store_unaligned_i32(void *ptr, uint32_t val) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE void
jl_store_unaligned_i64	src/support/dtypes.h	/^STATIC_INLINE void jl_store_unaligned_i64(void *ptr, uint64_t val) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE void
jl_string_data	src/julia.h	/^#define jl_string_data(/;"	d
jl_string_len	src/julia.h	/^#define jl_string_len(/;"	d
jl_string_ptr	src/jlapi.c	/^JL_DLLEXPORT const char *jl_string_ptr(jl_value_t *s)$/;"	f	typeref:typename:JL_DLLEXPORT const char *
jl_string_ptr	test/compiler/codegen.jl	/^jl_string_ptr(s::String) = ccall(:jl_string_ptr, Ptr{UInt8}, (Any,), s)$/;"	f
jl_string_to_array	src/array.c	/^JL_DLLEXPORT jl_array_t *jl_string_to_array(jl_value_t *str)$/;"	f	typeref:typename:JL_DLLEXPORT jl_array_t *
jl_string_type	src/jltypes.c	/^jl_datatype_t *jl_string_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_strtod_c	src/support/strtod.c	/^JL_DLLEXPORT double jl_strtod_c(const char *nptr, char **endptr)$/;"	f	typeref:typename:JL_DLLEXPORT double
jl_strtof_c	src/support/strtod.c	/^JL_DLLEXPORT float jl_strtof_c(const char *nptr, char **endptr)$/;"	f	typeref:typename:JL_DLLEXPORT float
jl_substitute_var	src/jltypes.c	/^jl_value_t *jl_substitute_var(jl_value_t *t, jl_tvar_t *var, jl_value_t *val)$/;"	f	typeref:typename:jl_value_t *
jl_substrtod	src/rtutils.c	/^JL_DLLEXPORT int jl_substrtod(char *str, size_t offset, size_t len, double *out)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_substrtof	src/rtutils.c	/^JL_DLLEXPORT int jl_substrtof(char *str, int offset, size_t len, float *out)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_subtype	src/subtype.c	/^JL_DLLEXPORT int jl_subtype(jl_value_t *x, jl_value_t *y)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_subtype_env	src/subtype.c	/^JL_DLLEXPORT int jl_subtype_env(jl_value_t *x, jl_value_t *y, jl_value_t **env, int envsz)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_subtype_env_size	src/subtype.c	/^JL_DLLEXPORT int jl_subtype_env_size(jl_value_t *t)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_subtype_matching	src/subtype.c	/^int jl_subtype_matching(jl_value_t *a, jl_value_t *b, jl_svec_t **penv)$/;"	f	typeref:typename:int
jl_svec	src/julia_internal.h	/^#define jl_svec(/;"	d
jl_svec1	src/simplevector.c	/^JL_DLLEXPORT jl_svec_t *jl_svec1(void *a)$/;"	f	typeref:typename:JL_DLLEXPORT jl_svec_t *
jl_svec2	src/simplevector.c	/^JL_DLLEXPORT jl_svec_t *jl_svec2(void *a, void *b)$/;"	f	typeref:typename:JL_DLLEXPORT jl_svec_t *
jl_svec_copy	src/simplevector.c	/^JL_DLLEXPORT jl_svec_t *jl_svec_copy(jl_svec_t *a)$/;"	f	typeref:typename:JL_DLLEXPORT jl_svec_t *
jl_svec_data	src/julia.h	/^#define jl_svec_data(/;"	d
jl_svec_fill	src/simplevector.c	/^JL_DLLEXPORT jl_svec_t *jl_svec_fill(size_t n, jl_value_t *x)$/;"	f	typeref:typename:JL_DLLEXPORT jl_svec_t *
jl_svec_len	src/julia.h	/^#define jl_svec_len(/;"	d
jl_svec_set_len_unsafe	src/julia.h	/^#define jl_svec_set_len_unsafe(/;"	d
jl_svec_t	src/julia.h	/^} jl_svec_t;$/;"	t	typeref:struct:__anon055fe4270208
jl_svecref	src/julia.h	/^STATIC_INLINE jl_value_t *jl_svecref(void *t JL_PROPAGATES_ROOT, size_t i) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE jl_value_t *
jl_svecset	src/julia.h	/^STATIC_INLINE jl_value_t *jl_svecset($/;"	f	typeref:typename:STATIC_INLINE jl_value_t *
jl_swap_fiber	src/task.c	/^static void jl_swap_fiber(jl_ucontext_t *lastt, jl_ucontext_t *t)$/;"	f	typeref:typename:void	file:
jl_swap_fiber	src/task.c	/^static void jl_swap_fiber(unw_context_t *lastt, unw_context_t *t)$/;"	f	typeref:typename:void	file:
jl_sweepfunc_t	src/julia_gcext.h	/^typedef void (*jl_sweepfunc_t)(jl_value_t *obj);$/;"	t	typeref:typename:void (*)(jl_value_t * obj)
jl_switchto	src/task.c	/^JL_DLLEXPORT void jl_switchto(jl_task_t **pt)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_sym	src/flisp/flisp.h	/^    value_t jl_sym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
jl_sym_t	src/julia.h	/^} jl_sym_t;$/;"	t	typeref:struct:_jl_sym_t
jl_symbol	src/symbol.c	/^JL_DLLEXPORT jl_sym_t *jl_symbol(const char *str)$/;"	f	typeref:typename:JL_DLLEXPORT jl_sym_t *
jl_symbol_lookup	src/symbol.c	/^JL_DLLEXPORT jl_sym_t *jl_symbol_lookup(const char *str)$/;"	f	typeref:typename:JL_DLLEXPORT jl_sym_t *
jl_symbol_n	src/symbol.c	/^JL_DLLEXPORT jl_sym_t *jl_symbol_n(const char *str, size_t len)$/;"	f	typeref:typename:JL_DLLEXPORT jl_sym_t *
jl_symbol_name	src/julia.h	/^#define jl_symbol_name(/;"	d
jl_symbol_name_	src/julia.h	/^STATIC_INLINE char *jl_symbol_name_(jl_sym_t *s) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE char *
jl_symbol_type	src/jltypes.c	/^jl_datatype_t *jl_symbol_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_sysimage_base	src/debuginfo.cpp	/^static uint64_t jl_sysimage_base;$/;"	v	typeref:typename:uint64_t	file:
jl_sysimg_fptrs_t	src/processor.h	/^} jl_sysimg_fptrs_t;$/;"	t	typeref:struct:_jl_sysimg_fptrs_t
jl_sysimg_fvars	src/jitlayers.cpp	/^static std::vector<GlobalValue*> jl_sysimg_fvars;$/;"	v	typeref:typename:std::vector<GlobalValue * >	file:
jl_sysimg_gvars	src/jitlayers.cpp	/^static std::vector<GlobalValue*> jl_sysimg_gvars;$/;"	v	typeref:typename:std::vector<GlobalValue * >	file:
jl_sysimg_handle	src/staticdata.c	/^static void *jl_sysimg_handle = NULL;$/;"	v	typeref:typename:void *	file:
jl_sysimg_tag_mask	src/processor.h	/^static const uint32_t jl_sysimg_tag_mask = 0x80000000u;$/;"	v	typeref:typename:const uint32_t
jl_sysimg_val_mask	src/processor.h	/^static const uint32_t jl_sysimg_val_mask = ~((uint32_t)0x80000000u);$/;"	v	typeref:typename:const uint32_t
jl_table_assign_bp	src/table.c	/^static int jl_table_assign_bp(jl_array_t **pa, jl_value_t *key, jl_value_t *val)$/;"	f	typeref:typename:int	file:
jl_table_peek_bp	src/table.c	/^static void **jl_table_peek_bp(jl_array_t *a, jl_value_t *key)$/;"	f	typeref:typename:void **	file:
jl_tagged_gensym	src/symbol.c	/^JL_DLLEXPORT jl_sym_t *jl_tagged_gensym(const char *str, int32_t len)$/;"	f	typeref:typename:JL_DLLEXPORT jl_sym_t *
jl_taggedvalue_t	src/julia.h	/^typedef struct _jl_taggedvalue_t jl_taggedvalue_t;$/;"	t	typeref:struct:_jl_taggedvalue_t
jl_take_buffer	src/sys.c	/^JL_DLLEXPORT jl_array_t *jl_take_buffer(ios_t *s)$/;"	f	typeref:typename:JL_DLLEXPORT jl_array_t *
jl_target_spec_t	src/processor.h	/^struct jl_target_spec_t {$/;"	s
jl_task_get_next	src/partr.c	/^JL_DLLEXPORT jl_task_t *jl_task_get_next(jl_value_t *getsticky)$/;"	f	typeref:typename:JL_DLLEXPORT jl_task_t *
jl_task_stack_buffer	src/task.c	/^JL_DLLEXPORT void *jl_task_stack_buffer(jl_task_t *task, size_t *size, int *tid)$/;"	f	typeref:typename:JL_DLLEXPORT void *
jl_task_t	src/julia.h	/^} jl_task_t;$/;"	t	typeref:struct:_jl_task_t
jl_task_type	src/jltypes.c	/^jl_datatype_t *jl_task_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_task_wait	src/task.c	/^void JL_DLLEXPORT jl_task_wait()$/;"	f	typeref:typename:void JL_DLLEXPORT
jl_tcp_bind	src/jl_uv.c	/^JL_DLLEXPORT int jl_tcp_bind(uv_tcp_t *handle, uint16_t port, void *host,$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_tcp_connect	src/jl_uv.c	/^JL_DLLEXPORT int jl_tcp_connect(uv_tcp_t *handle, void *host, uint16_t port,$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_tcp_getpeername	src/jl_uv.c	/^JL_DLLEXPORT int jl_tcp_getpeername(uv_tcp_t *handle, uint16_t *port,$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_tcp_getsockname	src/jl_uv.c	/^JL_DLLEXPORT int jl_tcp_getsockname(uv_tcp_t *handle, uint16_t *port,$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_tcp_quickack	src/jl_uv.c	/^JL_DLLEXPORT int jl_tcp_quickack(uv_tcp_t *handle, int on)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_tcp_reuseport	src/jl_uv.c	/^JL_DLLEXPORT int jl_tcp_reuseport(uv_tcp_t *handle)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_test_cpu_feature	src/processor_arm.cpp	/^extern "C" int jl_test_cpu_feature(jl_cpu_feature_t feature)$/;"	f	typeref:typename:int
jl_test_cpu_feature	src/processor_fallback.cpp	/^extern "C" int jl_test_cpu_feature(jl_cpu_feature_t)$/;"	f	typeref:typename:int
jl_test_cpu_feature	src/processor_x86.cpp	/^extern "C" int jl_test_cpu_feature(jl_cpu_feature_t feature)$/;"	f	typeref:typename:int
jl_test_returns_float	test/llvmcall.jl	/^    @ccallable function jl_test_returns_float()::Float64$/;"	f
jl_thread_gc_num_t	src/julia_threads.h	/^} jl_thread_gc_num_t;$/;"	t	typeref:struct:__anonf8aecdb10508
jl_thread_heap_t	src/julia_threads.h	/^} jl_thread_heap_t;$/;"	t	typeref:struct:__anonf8aecdb10608
jl_thread_resume	src/signals-mach.c	/^static void jl_thread_resume(int tid, int sig)$/;"	f	typeref:typename:void	file:
jl_thread_resume	src/signals-unix.c	/^static void jl_thread_resume(int tid, int sig)$/;"	f	typeref:typename:void	file:
jl_thread_self	src/tls.h	/^static inline unsigned long JL_CONST_FUNC jl_thread_self(void)$/;"	f	typeref:typename:unsigned long JL_CONST_FUNC
jl_thread_suspend_and_get_state	src/signals-mach.c	/^static void jl_thread_suspend_and_get_state(int tid, unw_context_t **ctx)$/;"	f	typeref:typename:void	file:
jl_thread_suspend_and_get_state	src/signals-unix.c	/^static void jl_thread_suspend_and_get_state(int tid, unw_context_t **ctx)$/;"	f	typeref:typename:void	file:
jl_threadarg_t	src/threading.h	/^} jl_threadarg_t;$/;"	t	typeref:struct:_jl_threadarg_t
jl_threadfun	src/partr.c	/^void jl_threadfun(void *arg)$/;"	f	typeref:typename:void
jl_threadid	src/threading.c	/^JL_DLLEXPORT int16_t jl_threadid(void)$/;"	f	typeref:typename:JL_DLLEXPORT int16_t
jl_threading_enabled	src/sys.c	/^JL_DLLEXPORT int jl_threading_enabled(void)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_threading_run	src/threading.c	/^JL_DLLEXPORT void jl_threading_run(jl_value_t *func)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_throw	src/task.c	/^JL_DLLEXPORT void jl_throw(jl_value_t *e JL_MAYBE_UNROOTED)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_throw_in_ctx	src/signals-unix.c	/^static void jl_throw_in_ctx(jl_ptls_t ptls, jl_value_t *e, int sig, void *sigctx)$/;"	f	typeref:typename:void	file:
jl_throw_in_ctx	src/signals-win.c	/^void jl_throw_in_ctx(jl_value_t *excpt, PCONTEXT ctxThread)$/;"	f	typeref:typename:void
jl_throw_in_thread	src/signals-mach.c	/^static void jl_throw_in_thread(int tid, mach_port_t thread, jl_value_t *exception)$/;"	f	typeref:typename:void	file:
jl_throw_out_of_memory_error	src/gc.c	/^JL_DLLEXPORT void jl_throw_out_of_memory_error(void)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_timeval	src/support/timefuncs.h	/^struct jl_timeval {$/;"	s
jl_timing_block_cpp_t	src/timing.h	/^    jl_timing_block_cpp_t(int owner) {$/;"	f	struct:jl_timing_block_cpp_t
jl_timing_block_cpp_t	src/timing.h	/^struct jl_timing_block_cpp_t {$/;"	s
jl_timing_block_start	src/timing.c	/^void jl_timing_block_start(jl_timing_block_t *cur_block)$/;"	f	typeref:typename:void
jl_timing_block_stop	src/timing.c	/^void jl_timing_block_stop(jl_timing_block_t *cur_block)$/;"	f	typeref:typename:void
jl_timing_block_t	src/julia.h	/^typedef struct _jl_timing_block_t jl_timing_block_t;$/;"	t	typeref:struct:_jl_timing_block_t
jl_timing_data	src/timing.c	/^uint64_t jl_timing_data[(int)JL_TIMING_LAST] = {0};$/;"	v	typeref:typename:uint64_t[]
jl_timing_names	src/timing.c	/^const char *jl_timing_names[(int)JL_TIMING_LAST] =$/;"	v	typeref:typename:const char * []
jl_timing_owners	src/timing.h	/^enum jl_timing_owners {$/;"	g
jl_tls_elf_support	src/threading.c	/^const int jl_tls_elf_support = 0;$/;"	v	typeref:typename:const int
jl_tls_elf_support	src/threading.c	/^const int jl_tls_elf_support = 1;$/;"	v	typeref:typename:const int
jl_tls_key	src/threading.c	/^static pthread_key_t jl_tls_key;$/;"	v	typeref:typename:pthread_key_t	file:
jl_tls_offset	src/threading.c	/^ssize_t jl_tls_offset = -1;$/;"	v	typeref:typename:ssize_t
jl_tls_states_t	src/tls.h	/^typedef struct _jl_tls_states_t jl_tls_states_t;$/;"	t	typeref:struct:_jl_tls_states_t
jl_to_bt_context	src/signals-unix.c	/^static bt_context_t *jl_to_bt_context(void *sigctx)$/;"	f	typeref:typename:bt_context_t *	file:
jl_too_few_args	src/rtutils.c	/^JL_DLLEXPORT void JL_NORETURN jl_too_few_args(const char *fname, int min)$/;"	f	typeref:typename:JL_DLLEXPORT void JL_NORETURN
jl_too_many_args	src/rtutils.c	/^JL_DLLEXPORT void JL_NORETURN jl_too_many_args(const char *fname, int max)$/;"	f	typeref:typename:JL_DLLEXPORT void JL_NORETURN
jl_top_module	src/module.c	/^jl_module_t *jl_top_module = NULL;$/;"	v	typeref:typename:jl_module_t *
jl_toplevel_eval	src/toplevel.c	/^JL_DLLEXPORT jl_value_t *jl_toplevel_eval(jl_module_t *m, jl_value_t *v)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_toplevel_eval_flex	src/toplevel.c	/^jl_value_t *jl_toplevel_eval_flex(jl_module_t *JL_NONNULL m, jl_value_t *e, int fast, int expand/;"	f	typeref:typename:jl_value_t *
jl_toplevel_eval_in	src/toplevel.c	/^JL_DLLEXPORT jl_value_t *jl_toplevel_eval_in(jl_module_t *m, jl_value_t *ex)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_tparam	src/julia.h	/^#define jl_tparam(/;"	d
jl_tparam0	src/julia.h	/^#define jl_tparam0(/;"	d
jl_tparam1	src/julia.h	/^#define jl_tparam1(/;"	d
jl_true	src/jltypes.c	/^JL_DLLEXPORT jl_value_t *jl_true;$/;"	v	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_try_deliver_sigint	src/signals-mach.c	/^static void jl_try_deliver_sigint(void)$/;"	f	typeref:typename:void	file:
jl_try_deliver_sigint	src/signals-unix.c	/^static void jl_try_deliver_sigint(void)$/;"	f	typeref:typename:void	file:
jl_try_deliver_sigint	src/signals-win.c	/^static void jl_try_deliver_sigint(void)$/;"	f	typeref:typename:void	file:
jl_try_substrtod	src/rtutils.c	/^JL_DLLEXPORT jl_nullable_float64_t jl_try_substrtod(char *str, size_t offset, size_t len)$/;"	f	typeref:typename:JL_DLLEXPORT jl_nullable_float64_t
jl_try_substrtof	src/rtutils.c	/^JL_DLLEXPORT jl_nullable_float32_t jl_try_substrtof(char *str, size_t offset, size_t len)$/;"	f	typeref:typename:JL_DLLEXPORT jl_nullable_float32_t
jl_try_throw_sigint	src/signals-win.c	/^static void jl_try_throw_sigint(void)$/;"	f	typeref:typename:void	file:
jl_tty_set_mode	src/jl_uv.c	/^JL_DLLEXPORT int jl_tty_set_mode(uv_tty_t *handle, int mode)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_tuple1_isa	src/subtype.c	/^int jl_tuple1_isa(jl_value_t *child1, jl_value_t **child, size_t cl, jl_datatype_t *pdt)$/;"	f	typeref:typename:int
jl_tuple_isa	src/subtype.c	/^int jl_tuple_isa(jl_value_t **child, size_t cl, jl_datatype_t *pdt)$/;"	f	typeref:typename:int
jl_tuple_type	src/julia.h	/^#define jl_tuple_type /;"	d
jl_tuple_typename	src/jltypes.c	/^jl_typename_t *jl_tuple_typename;$/;"	v	typeref:typename:jl_typename_t *
jl_tupletype_fill	src/jltypes.c	/^JL_DLLEXPORT jl_value_t *jl_tupletype_fill(size_t n, jl_value_t *v)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_tupletype_t	src/julia.h	/^typedef struct _jl_datatype_t jl_tupletype_t;$/;"	t	typeref:struct:_jl_datatype_t
jl_tvar_t	src/julia.h	/^} jl_tvar_t;$/;"	t	typeref:struct:__anon055fe4270808
jl_tvar_type	src/jltypes.c	/^jl_datatype_t *jl_tvar_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_type_error	src/rtutils.c	/^JL_DLLEXPORT void JL_NORETURN jl_type_error(const char *fname, jl_value_t *expected,$/;"	f	typeref:typename:JL_DLLEXPORT void JL_NORETURN
jl_type_error_rt	src/rtutils.c	/^JL_DLLEXPORT void JL_NORETURN jl_type_error_rt(const char *fname, const char *context,$/;"	f	typeref:typename:JL_DLLEXPORT void JL_NORETURN
jl_type_infer	src/gf.c	/^jl_code_info_t *jl_type_infer(jl_method_instance_t *mi, size_t world, int force)$/;"	f	typeref:typename:jl_code_info_t *
jl_type_intersection	src/subtype.c	/^JL_DLLEXPORT jl_value_t *jl_type_intersection(jl_value_t *a, jl_value_t *b)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_type_intersection_env	src/subtype.c	/^jl_value_t *jl_type_intersection_env(jl_value_t *a, jl_value_t *b, jl_svec_t **penv)$/;"	f	typeref:typename:jl_value_t *
jl_type_intersection_env_s	src/subtype.c	/^jl_value_t *jl_type_intersection_env_s(jl_value_t *a, jl_value_t *b, jl_svec_t **penv, int *issu/;"	f	typeref:typename:jl_value_t *
jl_type_intersection_with_env	src/subtype.c	/^JL_DLLEXPORT jl_svec_t *jl_type_intersection_with_env(jl_value_t *a, jl_value_t *b)$/;"	f	typeref:typename:JL_DLLEXPORT jl_svec_t *
jl_type_morespecific	src/subtype.c	/^JL_DLLEXPORT int jl_type_morespecific(jl_value_t *a, jl_value_t *b)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_type_morespecific_no_subtype	src/subtype.c	/^JL_DLLEXPORT int jl_type_morespecific_no_subtype(jl_value_t *a, jl_value_t *b)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_type_type	src/jltypes.c	/^jl_unionall_t *jl_type_type;$/;"	v	typeref:typename:jl_unionall_t *
jl_type_type_mt	src/jltypes.c	/^jl_methtable_t *jl_type_type_mt;$/;"	v	typeref:typename:jl_methtable_t *
jl_type_typename	src/jltypes.c	/^jl_typename_t *jl_type_typename;$/;"	v	typeref:typename:jl_typename_t *
jl_type_union	src/jltypes.c	/^JL_DLLEXPORT jl_value_t *jl_type_union(jl_value_t **ts, size_t n)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_type_unionall	src/jltypes.c	/^JL_DLLEXPORT jl_value_t *jl_type_unionall(jl_tvar_t *v, jl_value_t *body)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_typeassert	src/rtutils.c	/^JL_DLLEXPORT void jl_typeassert(jl_value_t *x, jl_value_t *t)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_typedslot_get_type	src/julia.h	/^#define jl_typedslot_get_type(/;"	d
jl_typedslot_type	src/jltypes.c	/^jl_datatype_t *jl_typedslot_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_typeenv_t	src/julia_internal.h	/^typedef struct jl_typeenv_t {$/;"	s
jl_typeenv_t	src/julia_internal.h	/^} jl_typeenv_t;$/;"	t	typeref:struct:jl_typeenv_t
jl_typeerror_type	src/jltypes.c	/^jl_datatype_t *jl_typeerror_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_typeinf_begin	src/gf.c	/^JL_DLLEXPORT void jl_typeinf_begin(void)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_typeinf_end	src/gf.c	/^JL_DLLEXPORT void jl_typeinf_end(void)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_typeinf_func	src/gf.c	/^jl_function_t *jl_typeinf_func = NULL;$/;"	v	typeref:typename:jl_function_t *
jl_typeinf_world	src/gf.c	/^size_t jl_typeinf_world = 0;$/;"	v	typeref:typename:size_t
jl_typeis	src/julia.h	/^#define jl_typeis(/;"	d
jl_typemap_array_insert_	src/typemap.c	/^static int jl_typemap_array_insert_($/;"	f	typeref:typename:int	file:
jl_typemap_array_visitor	src/typemap.c	/^static int jl_typemap_array_visitor(struct jl_ordereddict_t *a, jl_typemap_visitor_fptr fptr, vo/;"	f	typeref:typename:int	file:
jl_typemap_assoc_by_type	src/typemap.c	/^jl_typemap_entry_t *jl_typemap_assoc_by_type($/;"	f	typeref:typename:jl_typemap_entry_t *
jl_typemap_assoc_exact	src/julia_internal.h	/^STATIC_INLINE jl_typemap_entry_t *jl_typemap_assoc_exact($/;"	f	typeref:typename:STATIC_INLINE jl_typemap_entry_t *
jl_typemap_entry_assoc_by_type	src/typemap.c	/^static jl_typemap_entry_t *jl_typemap_entry_assoc_by_type($/;"	f	typeref:typename:jl_typemap_entry_t *	file:
jl_typemap_entry_assoc_exact	src/typemap.c	/^jl_typemap_entry_t *jl_typemap_entry_assoc_exact(jl_typemap_entry_t *ml, jl_value_t *arg1, jl_va/;"	f	typeref:typename:jl_typemap_entry_t *
jl_typemap_entry_lookup_by_type	src/typemap.c	/^static jl_typemap_entry_t *jl_typemap_entry_lookup_by_type($/;"	f	typeref:typename:jl_typemap_entry_t *	file:
jl_typemap_entry_sig	src/julia.h	/^STATIC_INLINE jl_value_t *jl_typemap_entry_sig(jl_typemap_t *tmap JL_PROPAGATES_ROOT) JL_NOTSAFE/;"	f	typeref:typename:STATIC_INLINE jl_value_t *
jl_typemap_entry_t	src/julia.h	/^} jl_typemap_entry_t;$/;"	t	typeref:struct:_jl_typemap_entry_t
jl_typemap_entry_type	src/jltypes.c	/^jl_datatype_t *jl_typemap_entry_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_typemap_info	src/julia_internal.h	/^struct jl_typemap_info {$/;"	s
jl_typemap_insert	src/typemap.c	/^jl_typemap_entry_t *jl_typemap_insert(jl_typemap_t **cache, jl_value_t *parent,$/;"	f	typeref:typename:jl_typemap_entry_t *
jl_typemap_insert_generic	src/typemap.c	/^static void jl_typemap_insert_generic($/;"	f	typeref:typename:void	file:
jl_typemap_intersection_array_visitor	src/typemap.c	/^static int jl_typemap_intersection_array_visitor(struct jl_ordereddict_t *a, jl_value_t *ty, int/;"	f	typeref:typename:int	file:
jl_typemap_intersection_node_visitor	src/typemap.c	/^static int jl_typemap_intersection_node_visitor(jl_typemap_entry_t *ml, struct typemap_intersect/;"	f	typeref:typename:int	file:
jl_typemap_intersection_visitor	src/typemap.c	/^int jl_typemap_intersection_visitor(jl_typemap_t *map, int offs,$/;"	f	typeref:typename:int
jl_typemap_intersection_visitor_fptr	src/julia_internal.h	/^typedef int (*jl_typemap_intersection_visitor_fptr)(jl_typemap_entry_t *l, struct typemap_inters/;"	t	typeref:typename:int (*)(jl_typemap_entry_t * l,struct typemap_intersection_env * closure)
jl_typemap_level_assoc_exact	src/typemap.c	/^jl_typemap_entry_t *jl_typemap_level_assoc_exact(jl_typemap_level_t *cache, jl_value_t *arg1, jl/;"	f	typeref:typename:jl_typemap_entry_t *
jl_typemap_level_insert_	src/typemap.c	/^static void jl_typemap_level_insert_($/;"	f	typeref:typename:void	file:
jl_typemap_level_t	src/julia.h	/^} jl_typemap_level_t;$/;"	t	typeref:struct:_jl_typemap_level_t
jl_typemap_level_type	src/jltypes.c	/^jl_datatype_t *jl_typemap_level_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_typemap_list_count	src/typemap.c	/^static unsigned jl_typemap_list_count(jl_typemap_entry_t *ml) JL_NOTSAFEPOINT$/;"	f	typeref:typename:unsigned	file:
jl_typemap_list_insert_	src/typemap.c	/^static void jl_typemap_list_insert_($/;"	f	typeref:typename:void	file:
jl_typemap_list_insert_sorted	src/typemap.c	/^static void jl_typemap_list_insert_sorted($/;"	f	typeref:typename:void	file:
jl_typemap_morespecific_by_type	src/gf.c	/^static jl_typemap_entry_t *jl_typemap_morespecific_by_type(jl_typemap_entry_t *first JL_PROPAGAT/;"	f	typeref:typename:jl_typemap_entry_t *	file:
jl_typemap_node_visitor	src/typemap.c	/^static int jl_typemap_node_visitor(jl_typemap_entry_t *ml, jl_typemap_visitor_fptr fptr, void *c/;"	f	typeref:typename:int	file:
jl_typemap_rehash	src/typemap.c	/^void jl_typemap_rehash(jl_typemap_t *ml, int8_t offs)$/;"	f	typeref:typename:void
jl_typemap_rehash_array	src/typemap.c	/^void jl_typemap_rehash_array(struct jl_ordereddict_t *pa, jl_value_t *parent, int8_t tparam, int/;"	f	typeref:typename:void
jl_typemap_t	src/julia.h	/^typedef jl_value_t jl_typemap_t;$/;"	t	typeref:typename:jl_value_t
jl_typemap_visitor	src/typemap.c	/^int jl_typemap_visitor(jl_typemap_t *cache, jl_typemap_visitor_fptr fptr, void *closure)$/;"	f	typeref:typename:int
jl_typemap_visitor_fptr	src/julia_internal.h	/^typedef int (*jl_typemap_visitor_fptr)(jl_typemap_entry_t *l, void *closure);$/;"	t	typeref:typename:int (*)(jl_typemap_entry_t * l,void * closure)
jl_typemax_uint	src/datatype.c	/^JL_DLLEXPORT jl_value_t *jl_typemax_uint(jl_value_t *bt)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_typename_str	src/jlapi.c	/^JL_DLLEXPORT const char *jl_typename_str(jl_value_t *v)$/;"	f	typeref:typename:JL_DLLEXPORT const char *
jl_typename_t	src/julia.h	/^} jl_typename_t;$/;"	t	typeref:struct:__anon055fe4270a08
jl_typename_type	src/jltypes.c	/^jl_datatype_t *jl_typename_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_typeof	src/julia.h	/^#define jl_typeof(/;"	d
jl_typeof_func	src/codegen.cpp	/^static Function *jl_typeof_func;$/;"	v	typeref:typename:Function *	file:
jl_typeof_str	src/jlapi.c	/^JL_DLLEXPORT const char *jl_typeof_str(jl_value_t *v)$/;"	f	typeref:typename:JL_DLLEXPORT const char *
jl_typeofbottom_type	src/jltypes.c	/^jl_datatype_t *jl_typeofbottom_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_types_equal	src/subtype.c	/^JL_DLLEXPORT int jl_types_equal(jl_value_t *a, jl_value_t *b)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_typestack_t	src/jltypes.c	/^typedef struct _jl_typestack_t jl_typestack_t;$/;"	t	typeref:struct:_jl_typestack_t	file:
jl_typetype_type	src/jltypes.c	/^jl_unionall_t *jl_typetype_type;$/;"	v	typeref:typename:jl_unionall_t *
jl_ucontext_t	src/julia_threads.h	/^typedef ucontext_t jl_ucontext_t;$/;"	t	typeref:typename:ucontext_t
jl_ucontext_t	src/julia_threads.h	/^typedef win32_ucontext_t jl_ucontext_t;$/;"	t	typeref:typename:win32_ucontext_t
jl_ucontext_t	src/julia_threads.h	/^} jl_ucontext_t;$/;"	t	typeref:struct:__anonf8aecdb10108
jl_ucontext_t	src/julia_threads.h	/^} jl_ucontext_t;$/;"	t	typeref:struct:__anonf8aecdb10208
jl_udp_bind	src/jl_uv.c	/^JL_DLLEXPORT int jl_udp_bind(uv_udp_t *handle, uint16_t port, void *host,$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_udp_send	src/jl_uv.c	/^JL_DLLEXPORT int jl_udp_send(uv_udp_send_t *req, uv_udp_t *handle, uint16_t port, void *host,$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_uint16_type	src/jltypes.c	/^jl_datatype_t *jl_uint16_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_uint32_type	src/jltypes.c	/^jl_datatype_t *jl_uint32_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_uint64_type	src/jltypes.c	/^jl_datatype_t *jl_uint64_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_uint8_type	src/jltypes.c	/^jl_datatype_t *jl_uint8_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_ulong_type	src/julia.h	/^#define jl_ulong_type /;"	d
jl_unbox_long	src/julia.h	/^#define jl_unbox_long(/;"	d
jl_unbox_ulong	src/julia.h	/^#define jl_unbox_ulong(/;"	d
jl_uncompress_argname_n	src/dump.c	/^JL_DLLEXPORT jl_value_t *jl_uncompress_argname_n(jl_value_t *syms, size_t i)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_uncompress_argnames	src/dump.c	/^JL_DLLEXPORT jl_array_t *jl_uncompress_argnames(jl_value_t *syms)$/;"	f	typeref:typename:JL_DLLEXPORT jl_array_t *
jl_uncompress_ast	src/dump.c	/^JL_DLLEXPORT jl_code_info_t *jl_uncompress_ast(jl_method_t *m, jl_code_instance_t *metadata, jl_/;"	f	typeref:typename:JL_DLLEXPORT jl_code_info_t *
jl_undefined_var_error	src/rtutils.c	/^JL_DLLEXPORT void JL_NORETURN jl_undefined_var_error(jl_sym_t *var)$/;"	f	typeref:typename:JL_DLLEXPORT void JL_NORETURN
jl_undefref_exception	src/jltypes.c	/^JL_DLLEXPORT jl_value_t *jl_undefref_exception;$/;"	v	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_undefvarerror_type	src/jltypes.c	/^jl_datatype_t *jl_undefvarerror_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_unionall_t	src/julia.h	/^} jl_unionall_t;$/;"	t	typeref:struct:__anon055fe4270908
jl_unionall_type	src/jltypes.c	/^jl_datatype_t *jl_unionall_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_unionstate_t	src/subtype.c	/^} jl_unionstate_t;$/;"	t	typeref:struct:__anon0f0258f90108	file:
jl_uniontype_t	src/julia.h	/^} jl_uniontype_t;$/;"	t	typeref:struct:__anon055fe4270b08
jl_uniontype_type	src/jltypes.c	/^jl_datatype_t *jl_uniontype_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_unreachable	src/julia_internal.h	/^#  define jl_unreachable(/;"	d
jl_unw_get	src/stackwalk.c	/^#define jl_unw_get(/;"	d	file:
jl_unw_get	src/stackwalk.c	/^void jl_unw_get(void *context) {};$/;"	f	typeref:typename:void
jl_unw_init	src/stackwalk.c	/^static int jl_unw_init(bt_cursor_t *cursor, bt_context_t *Context)$/;"	f	typeref:typename:int	file:
jl_unw_init	src/stackwalk.c	/^static int jl_unw_init(bt_cursor_t *cursor, bt_context_t *context)$/;"	f	typeref:typename:int	file:
jl_unw_init_dwarf	src/stackwalk.c	/^int jl_unw_init_dwarf(bt_cursor_t *cursor, bt_context_t *uc)$/;"	f	typeref:typename:int
jl_unw_step	src/stackwalk.c	/^static int jl_unw_step(bt_cursor_t *cursor, uintptr_t *ip, uintptr_t *sp, uintptr_t *fp)$/;"	f	typeref:typename:int	file:
jl_unw_stepn	src/stackwalk.c	/^size_t jl_unw_stepn(bt_cursor_t *cursor, uintptr_t *ip, uintptr_t *sp, size_t maxsize, int add_i/;"	f	typeref:typename:size_t
jl_unwrap_unionall	src/jltypes.c	/^jl_value_t *jl_unwrap_unionall(jl_value_t *v)$/;"	f	typeref:typename:jl_value_t *
jl_unwrap_vararg	src/julia.h	/^STATIC_INLINE jl_value_t *jl_unwrap_vararg(jl_value_t *v) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE jl_value_t *
jl_update_all_fptrs	src/staticdata.c	/^static void jl_update_all_fptrs(jl_serializer_state *s)$/;"	f	typeref:typename:void	file:
jl_update_all_gvars	src/staticdata.c	/^static void jl_update_all_gvars(jl_serializer_state *s)$/;"	f	typeref:typename:void	file:
jl_update_backref_list	src/dump.c	/^static void jl_update_backref_list(jl_value_t *old, jl_value_t *_new, size_t start)$/;"	f	typeref:typename:void	file:
jl_upsilonnode_type	src/jltypes.c	/^jl_datatype_t *jl_upsilonnode_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_using_intel_jitevents	src/init.c	/^char jl_using_intel_jitevents; \/\/ Non-zero if running under Intel VTune Amplifier$/;"	v	typeref:typename:char
jl_using_oprofile_jitevents	src/init.c	/^char jl_using_oprofile_jitevents = 0; \/\/ Non-zero if running under OProfile$/;"	v	typeref:typename:char
jl_using_perf_jitevents	src/init.c	/^char jl_using_perf_jitevents = 0;$/;"	v	typeref:typename:char
jl_uuid_t	src/julia.h	/^} jl_uuid_t;$/;"	t	typeref:struct:__anon055fe4271208
jl_uv_associate_julia_struct	src/jl_uv.c	/^JL_DLLEXPORT void jl_uv_associate_julia_struct(uv_handle_t *handle,$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_uv_buf_base	src/jl_uv.c	/^JL_DLLEXPORT void *jl_uv_buf_base(const uv_buf_t *buf) { return buf->base; }$/;"	f	typeref:typename:JL_DLLEXPORT void *
jl_uv_buf_len	src/jl_uv.c	/^JL_DLLEXPORT size_t jl_uv_buf_len(const uv_buf_t *buf) { return buf->len; }$/;"	f	typeref:typename:JL_DLLEXPORT size_t
jl_uv_buf_set_base	src/jl_uv.c	/^JL_DLLEXPORT void jl_uv_buf_set_base(uv_buf_t *buf, char *b) { buf->base = b; }$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_uv_buf_set_len	src/jl_uv.c	/^JL_DLLEXPORT void jl_uv_buf_set_len(uv_buf_t *buf, size_t n) { buf->len = n; }$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_uv_call_close_callback	src/jl_uv.c	/^void jl_uv_call_close_callback(jl_value_t *val)$/;"	f	typeref:typename:void
jl_uv_closeHandle	src/jl_uv.c	/^static void jl_uv_closeHandle(uv_handle_t *handle)$/;"	f	typeref:typename:void	file:
jl_uv_connect_handle	src/jl_uv.c	/^JL_DLLEXPORT void *jl_uv_connect_handle(uv_connect_t *connect) { return connect->handle; }$/;"	f	typeref:typename:JL_DLLEXPORT void *
jl_uv_disassociate_julia_struct	src/jl_uv.c	/^JL_DLLEXPORT void jl_uv_disassociate_julia_struct(uv_handle_t *handle)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_uv_exitcleanup_add	src/init.c	/^static void jl_uv_exitcleanup_add(uv_handle_t *handle, struct uv_shutdown_queue *queue)$/;"	f	typeref:typename:void	file:
jl_uv_exitcleanup_walk	src/init.c	/^static void jl_uv_exitcleanup_walk(uv_handle_t *handle, void *arg)$/;"	f	typeref:typename:void	file:
jl_uv_file_handle	src/jl_uv.c	/^JL_DLLEXPORT uv_os_fd_t jl_uv_file_handle(jl_uv_file_t *f) { return f->file; }$/;"	f	typeref:typename:JL_DLLEXPORT uv_os_fd_t
jl_uv_file_t	src/julia.h	/^} jl_uv_file_t;$/;"	t	typeref:struct:__anon055fe4271708
jl_uv_flush	src/jl_uv.c	/^void jl_uv_flush(uv_stream_t *stream)$/;"	f	typeref:typename:void
jl_uv_flush_close_callback	src/jl_uv.c	/^static void jl_uv_flush_close_callback(uv_write_t *req, int status)$/;"	f	typeref:typename:void	file:
jl_uv_fs_t_path	src/sys.c	/^JL_DLLEXPORT char *jl_uv_fs_t_path(uv_fs_t *req) { return (char*)req->path; }$/;"	f	typeref:typename:JL_DLLEXPORT char *
jl_uv_fs_t_ptr	src/sys.c	/^JL_DLLEXPORT char *jl_uv_fs_t_ptr(uv_fs_t *req) { return (char*)req->ptr; }$/;"	f	typeref:typename:JL_DLLEXPORT char *
jl_uv_handle	src/jl_uv.c	/^JL_DLLEXPORT HANDLE jl_uv_handle(uv_stream_t *handle)$/;"	f	typeref:typename:JL_DLLEXPORT HANDLE
jl_uv_handle	src/jl_uv.c	/^JL_DLLEXPORT int jl_uv_handle(uv_stream_t *handle)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_uv_handle_data	src/jl_uv.c	/^JL_DLLEXPORT void *jl_uv_handle_data(uv_handle_t *handle) { return handle->data; }$/;"	f	typeref:typename:JL_DLLEXPORT void *
jl_uv_handle_type	src/jl_uv.c	/^JL_DLLEXPORT uv_handle_type jl_uv_handle_type(uv_handle_t *handle)$/;"	f	typeref:typename:JL_DLLEXPORT uv_handle_type
jl_uv_interface_address_is_internal	src/jl_uv.c	/^JL_DLLEXPORT int jl_uv_interface_address_is_internal(uv_interface_address_t *addr)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_uv_interface_address_sockaddr	src/jl_uv.c	/^JL_DLLEXPORT struct sockaddr_in *jl_uv_interface_address_sockaddr(uv_interface_address_t *ifa)$/;"	f	typeref:typename:JL_DLLEXPORT struct sockaddr_in *
jl_uv_interface_addresses	src/jl_uv.c	/^JL_DLLEXPORT int jl_uv_interface_addresses(uv_interface_address_t **ifAddrStruct,$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_uv_libhandle	src/julia.h	/^typedef void *jl_uv_libhandle; \/\/ compatible with dlopen (void*) \/ LoadLibrary (HMODULE)$/;"	t	typeref:typename:void *
jl_uv_mutex	src/jl_uv.c	/^jl_mutex_t jl_uv_mutex;$/;"	v	typeref:typename:jl_mutex_t
jl_uv_n_waiters	src/jl_uv.c	/^int jl_uv_n_waiters = 0;$/;"	v	typeref:typename:int
jl_uv_process_data	src/jl_uv.c	/^JL_DLLEXPORT void *jl_uv_process_data(uv_process_t *p) { return p->data; }$/;"	f	typeref:typename:JL_DLLEXPORT void *
jl_uv_process_pid	src/jl_uv.c	/^JL_DLLEXPORT int jl_uv_process_pid(uv_process_t *p) { return p->pid; }$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_uv_putb	src/jl_uv.c	/^JL_DLLEXPORT void jl_uv_putb(uv_stream_t *stream, uint8_t b)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_uv_putc	src/jl_uv.c	/^JL_DLLEXPORT void jl_uv_putc(uv_stream_t *stream, uint32_t c)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_uv_puts	src/jl_uv.c	/^JL_DLLEXPORT void jl_uv_puts(uv_stream_t *stream, const char *str, size_t n)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_uv_req_data	src/jl_uv.c	/^JL_DLLEXPORT void *jl_uv_req_data(uv_req_t *req) { return req->data; }$/;"	f	typeref:typename:JL_DLLEXPORT void *
jl_uv_req_set_data	src/jl_uv.c	/^JL_DLLEXPORT void jl_uv_req_set_data(uv_req_t *req, void *data) { req->data = data; }$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_uv_sizeof_interface_address	src/jl_uv.c	/^JL_DLLEXPORT int jl_uv_sizeof_interface_address(void)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_uv_unix_fd_is_watched	src/jl_uv.c	/^JL_DLLEXPORT int jl_uv_unix_fd_is_watched(int fd, uv_poll_t *handle,$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_uv_write	src/jl_uv.c	/^JL_DLLEXPORT int jl_uv_write(uv_stream_t *stream, const char *data, size_t n,$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_uv_write_handle	src/jl_uv.c	/^JL_DLLEXPORT void *jl_uv_write_handle(uv_write_t *req) { return req->handle; }$/;"	f	typeref:typename:JL_DLLEXPORT void *
jl_uv_writecb	src/jl_uv.c	/^JL_DLLEXPORT void jl_uv_writecb(uv_write_t *req, int status)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_va_tuple_kind	src/julia.h	/^STATIC_INLINE jl_vararg_kind_t jl_va_tuple_kind(jl_datatype_t *t) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE jl_vararg_kind_t
jl_value_dillvmt	src/codegen.cpp	/^static DICompositeType *jl_value_dillvmt;$/;"	v	typeref:typename:DICompositeType *	file:
jl_value_llvm	src/jitlayers.h	/^typedef struct {Value *gv; int32_t index;} jl_value_llvm; \/\/ uses 1-based indexing$/;"	t	typeref:struct:__anona49ae9290108
jl_value_ptr	src/rtutils.c	/^JL_DLLEXPORT jl_value_t *jl_value_ptr(jl_value_t *a)$/;"	f	typeref:typename:JL_DLLEXPORT jl_value_t *
jl_value_t	src/julia.h	/^typedef struct _jl_value_t jl_value_t;$/;"	t	typeref:struct:_jl_value_t
jl_value_to_llvm	src/jitlayers.cpp	/^static std::map<void*, jl_value_llvm> jl_value_to_llvm;$/;"	v	typeref:typename:std::map<void *,jl_value_llvm>	file:
jl_valueof	src/julia.h	/^#define jl_valueof(/;"	d
jl_vararg_kind	src/julia.h	/^STATIC_INLINE jl_vararg_kind_t jl_vararg_kind(jl_value_t *v) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE jl_vararg_kind_t
jl_vararg_kind_t	src/julia.h	/^} jl_vararg_kind_t;$/;"	t	typeref:enum:__anon055fe4271503
jl_vararg_length	src/julia.h	/^STATIC_INLINE size_t jl_vararg_length(jl_value_t *v) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE size_t
jl_vararg_type	src/jltypes.c	/^jl_unionall_t *jl_vararg_type;$/;"	v	typeref:typename:jl_unionall_t *
jl_vararg_typename	src/jltypes.c	/^jl_typename_t *jl_vararg_typename;$/;"	v	typeref:typename:jl_typename_t *
jl_varbinding_t	src/subtype.c	/^typedef struct jl_varbinding_t {$/;"	s	file:
jl_varbinding_t	src/subtype.c	/^} jl_varbinding_t;$/;"	t	typeref:struct:jl_varbinding_t	file:
jl_varbinding_t	test/clangsa/MissingRoots.c	/^} jl_varbinding_t;$/;"	t	typeref:struct:_varbinding	file:
jl_varidx_t	src/builtins.c	/^} jl_varidx_t;$/;"	t	typeref:struct:_varidx	file:
jl_varinfo_t	src/codegen.cpp	/^    jl_varinfo_t() : boxroot(NULL),$/;"	f	struct:jl_varinfo_t	file:
jl_varinfo_t	src/codegen.cpp	/^struct jl_varinfo_t {$/;"	s	file:
jl_vecelement_typename	src/jltypes.c	/^jl_typename_t *jl_vecelement_typename;$/;"	v	typeref:typename:jl_typename_t *
jl_ver_is_release	src/jlapi.c	/^JL_DLLEXPORT int jl_ver_is_release(void)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_ver_major	src/jlapi.c	/^JL_DLLEXPORT int jl_ver_major(void)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_ver_minor	src/jlapi.c	/^JL_DLLEXPORT int jl_ver_minor(void)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_ver_patch	src/jlapi.c	/^JL_DLLEXPORT int jl_ver_patch(void)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_ver_string	src/jlapi.c	/^JL_DLLEXPORT const char *jl_ver_string(void)$/;"	f	typeref:typename:JL_DLLEXPORT const char *
jl_vexceptionf	src/rtutils.c	/^jl_value_t *jl_vexceptionf(jl_datatype_t *exception_type,$/;"	f	typeref:typename:jl_value_t *
jl_vinfo_sa	src/julia.h	/^STATIC_INLINE int jl_vinfo_sa(uint8_t vi)$/;"	f	typeref:typename:STATIC_INLINE int
jl_vinfo_usedundef	src/julia.h	/^STATIC_INLINE int jl_vinfo_usedundef(uint8_t vi)$/;"	f	typeref:typename:STATIC_INLINE int
jl_void_type	src/jltypes.c	/^jl_datatype_t *jl_void_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_voidpointer_type	src/jltypes.c	/^jl_datatype_t *jl_voidpointer_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_vprintf	src/jl_uv.c	/^JL_DLLEXPORT int jl_vprintf(uv_stream_t *s, const char *format, va_list args)$/;"	f	typeref:typename:JL_DLLEXPORT int
jl_wake_libuv	src/jl_uv.c	/^void jl_wake_libuv(void)$/;"	f	typeref:typename:void
jl_wakeup_thread	src/partr.c	/^JL_DLLEXPORT void jl_wakeup_thread(int16_t tid)$/;"	f	typeref:typename:JL_DLLEXPORT void
jl_weakref_t	src/julia.h	/^} jl_weakref_t;$/;"	t	typeref:struct:__anon055fe4271008
jl_weakref_type	src/jltypes.c	/^jl_datatype_t *jl_weakref_type;$/;"	v	typeref:typename:jl_datatype_t *
jl_well_known	src/llvm-pass-helpers.cpp	/^namespace jl_well_known {$/;"	n	file:
jl_well_known	src/llvm-pass-helpers.h	/^namespace jl_well_known {$/;"	n
jl_winsock_handle	src/init.c	/^void *jl_winsock_handle;$/;"	v	typeref:typename:void *
jl_work_notifier	src/jl_uv.c	/^void jl_work_notifier(uv_work_t *req, int status)$/;"	f	typeref:typename:void
jl_work_wrapper	src/jl_uv.c	/^void jl_work_wrapper(uv_work_t *req)$/;"	f	typeref:typename:void
jl_world_counter	src/gf.c	/^JL_DLLEXPORT size_t jl_world_counter = 1;$/;"	v	typeref:typename:JL_DLLEXPORT size_t
jl_wrap_Type	src/jltypes.c	/^jl_datatype_t *jl_wrap_Type(jl_value_t *t)$/;"	f	typeref:typename:jl_datatype_t *
jl_wrap_vararg	src/jltypes.c	/^jl_value_t *jl_wrap_vararg(jl_value_t *t, jl_value_t *n)$/;"	f	typeref:typename:jl_value_t *
jl_write_barrier_func	src/codegen.cpp	/^static Function *jl_write_barrier_func;$/;"	v	typeref:typename:Function *	file:
jl_write_bitcode_func	src/codegen.cpp	/^extern void jl_write_bitcode_func(void *F, char *fname) {$/;"	f	typeref:typename:void
jl_write_bitcode_module	src/codegen.cpp	/^extern void jl_write_bitcode_module(void *M, char *fname) {$/;"	f	typeref:typename:void
jl_write_compiler_output	src/precompile.c	/^void jl_write_compiler_output(void)$/;"	f	typeref:typename:void
jl_write_coverage_data	src/codegen.cpp	/^extern "C" void jl_write_coverage_data(const char *output)$/;"	f	typeref:typename:void
jl_write_gv_int	src/staticdata.c	/^static void jl_write_gv_int(jl_serializer_state *s, jl_value_t *v)$/;"	f	typeref:typename:void	file:
jl_write_gv_ints	src/staticdata.c	/^static void jl_write_gv_ints(jl_serializer_state *s)$/;"	f	typeref:typename:void	file:
jl_write_gv_syms	src/staticdata.c	/^static void jl_write_gv_syms(jl_serializer_state *s, jl_sym_t *v)$/;"	f	typeref:typename:void	file:
jl_write_malloc_log	src/codegen.cpp	/^extern "C" void jl_write_malloc_log(void)$/;"	f	typeref:typename:void
jl_write_module	src/staticdata.c	/^static void jl_write_module(jl_serializer_state *s, uintptr_t item, jl_module_t *m)$/;"	f	typeref:typename:void	file:
jl_write_relocations	src/staticdata.c	/^static void jl_write_relocations(jl_serializer_state *s)$/;"	f	typeref:typename:void	file:
jl_write_skiplist	src/staticdata.c	/^static void jl_write_skiplist(ios_t *s, char *base, size_t size, arraylist_t *list)$/;"	f	typeref:typename:void	file:
jl_write_value	src/staticdata.c	/^#define jl_write_value(/;"	d	file:
jl_write_values	src/staticdata.c	/^static void jl_write_values(jl_serializer_state *s)$/;"	f	typeref:typename:void	file:
jl_yield	src/jlapi.c	/^JL_DLLEXPORT void jl_yield(void)$/;"	f	typeref:typename:JL_DLLEXPORT void
jlapplygeneric_func	src/codegen.cpp	/^static Function *jlapplygeneric_func;$/;"	v	typeref:typename:Function *	file:
jlapplytype_func	src/codegen.cpp	/^static Function *jlapplytype_func;$/;"	v	typeref:typename:Function *	file:
jlarray_data_owner_func	src/codegen.cpp	/^static Function *jlarray_data_owner_func;$/;"	v	typeref:typename:Function *	file:
jlbacktrace	src/stackwalk.c	/^JL_DLLEXPORT void jlbacktrace(void) JL_NOTSAFEPOINT$/;"	f	typeref:typename:JL_DLLEXPORT void
jlboundp_func	src/codegen.cpp	/^static Function *jlboundp_func;$/;"	v	typeref:typename:Function *	file:
jlboundserror_func	src/codegen.cpp	/^static Function *jlboundserror_func;$/;"	v	typeref:typename:Function *	file:
jlboundserrorv_func	src/codegen.cpp	/^static Function *jlboundserrorv_func;$/;"	v	typeref:typename:Function *	file:
jlbuf	src/flisp/flisp.h	/^    void *jlbuf;$/;"	m	struct:_fl_context_t	typeref:typename:void *
jlbuflen	src/flisp/flisp.h	/^    size_t jlbuflen;$/;"	m	struct:_fl_context_t	typeref:typename:size_t
jlcall_func_to_llvm	src/codegen.cpp	/^static Function *jlcall_func_to_llvm(const std::string &cname, jl_fptr_args_t addr, Module *m)$/;"	f	typeref:typename:Function *	file:
jlcheckassign_func	src/codegen.cpp	/^static Function *jlcheckassign_func;$/;"	v	typeref:typename:Function *	file:
jlcopyast_func	src/codegen.cpp	/^static Function *jlcopyast_func;$/;"	v	typeref:typename:Function *	file:
jldeclareconst_func	src/codegen.cpp	/^static Function *jldeclareconst_func;$/;"	v	typeref:typename:Function *	file:
jldll_var	src/codegen.cpp	/^static GlobalVariable *jldll_var;$/;"	v	typeref:typename:GlobalVariable *	file:
jldlsym_func	src/codegen.cpp	/^static Function *jldlsym_func;$/;"	v	typeref:typename:Function *	file:
jlegal_func	src/codegen.cpp	/^static Function *jlegal_func;$/;"	v	typeref:typename:Function *	file:
jlenter_func	src/codegen.cpp	/^static Function *jlenter_func;$/;"	v	typeref:typename:Function *	file:
jlenter_func	src/llvm-lower-handlers.cpp	/^    Function *jlenter_func;$/;"	m	struct:LowerExcHandlers	typeref:typename:Function *	file:
jlerror_func	src/codegen.cpp	/^static Function *jlerror_func;$/;"	v	typeref:typename:Function *	file:
jlexe_var	src/codegen.cpp	/^static GlobalVariable *jlexe_var;$/;"	v	typeref:typename:GlobalVariable *	file:
jlgenericfunction_func	src/codegen.cpp	/^static Function *jlgenericfunction_func;$/;"	v	typeref:typename:Function *	file:
jlgetbindingorerror_func	src/codegen.cpp	/^static Function *jlgetbindingorerror_func;$/;"	v	typeref:typename:Function *	file:
jlgetcfunctiontrampoline_func	src/codegen.cpp	/^static Function *jlgetcfunctiontrampoline_func;$/;"	v	typeref:typename:Function *	file:
jlgetfield_func	src/codegen.cpp	/^static Function *jlgetfield_func;$/;"	v	typeref:typename:Function *	file:
jlgetnthfieldchecked_func	src/codegen.cpp	/^static Function *jlgetnthfieldchecked_func;$/;"	v	typeref:typename:Function *	file:
jlgetworld_global	src/codegen.cpp	/^static GlobalVariable *jlgetworld_global;$/;"	v	typeref:typename:GlobalVariable *	file:
jlinvoke_func	src/codegen.cpp	/^static Function *jlinvoke_func;$/;"	v	typeref:typename:Function *	file:
jlisa_func	src/codegen.cpp	/^static Function *jlisa_func;$/;"	v	typeref:typename:Function *	file:
jlleave_func	src/codegen.cpp	/^static Function *jlleave_func;$/;"	v	typeref:typename:Function *	file:
jlmethod_func	src/codegen.cpp	/^static Function *jlmethod_func;$/;"	v	typeref:typename:Function *	file:
jlnew_func	src/codegen.cpp	/^static Function *jlnew_func;$/;"	v	typeref:typename:Function *	file:
jlnsvec_func	src/codegen.cpp	/^static Function *jlnsvec_func;$/;"	v	typeref:typename:Function *	file:
jlsplatnew_func	src/codegen.cpp	/^static Function *jlsplatnew_func;$/;"	v	typeref:typename:Function *	file:
jlsubtype_func	src/codegen.cpp	/^static Function *jlsubtype_func;$/;"	v	typeref:typename:Function *	file:
jlthrow_func	src/codegen.cpp	/^static Function *jlthrow_func;$/;"	v	typeref:typename:Function *	file:
jltls_states_func	src/codegen.cpp	/^static Function *jltls_states_func;$/;"	v	typeref:typename:Function *	file:
jltopeval_func	src/codegen.cpp	/^static Function *jltopeval_func;$/;"	v	typeref:typename:Function *	file:
jltuple_func	src/codegen.cpp	/^static Function *jltuple_func;$/;"	v	typeref:typename:Function *	file:
jltypeassert_func	src/codegen.cpp	/^static Function *jltypeassert_func;$/;"	v	typeref:typename:Function *	file:
jltypeerror_func	src/codegen.cpp	/^static Function *jltypeerror_func;$/;"	v	typeref:typename:Function *	file:
jluboundserror_func	src/codegen.cpp	/^static Function *jluboundserror_func;$/;"	v	typeref:typename:Function *	file:
jlundefvarerror_func	src/codegen.cpp	/^static Function *jlundefvarerror_func;$/;"	v	typeref:typename:Function *	file:
jlvboundserror_func	src/codegen.cpp	/^static Function *jlvboundserror_func;$/;"	v	typeref:typename:Function *	file:
join	base/strings/io.jl	/^function join(io::IO, strings, delim, last)$/;"	f
join	base/strings/io.jl	/^function join(io::IO, strings, delim="")$/;"	f
join	base/strings/io.jl	/^join(strings) = sprint(join, strings)$/;"	f
join	base/strings/io.jl	/^join(strings, delim) = sprint(join, strings, delim)$/;"	f
join	base/strings/io.jl	/^join(strings, delim, last) = sprint(join, strings, delim, last)$/;"	f
join_feature_strs	src/processor.cpp	/^static inline std::string join_feature_strs(const std::vector<std::string> &strs)$/;"	f	namespace:__anon839834ed0111	typeref:typename:std::string	file:
joinpath	base/path.jl	/^function joinpath(a::String, b::String)$/;"	f
joinpath	base/path.jl	/^joinpath(a::AbstractString) = a$/;"	f
joinpath	base/path.jl	/^joinpath(a::AbstractString, b::AbstractString) = joinpath(String(a), String(b))$/;"	f
joinpath	base/path.jl	/^joinpath(a::AbstractString, b::AbstractString, c::AbstractString...) = joinpath(joinpath(a,b), c/;"	f
julia-%	Makefile	/^julia-debug julia-release : julia-% : julia-sysimg-% julia-symlink julia-libccalltest julia-libl/;"	t
julia-base	Makefile	/^julia-base: $(build_libdir)\/libgfortran*.$(SHLIB_EXT)*$/;"	t
julia-base	Makefile	/^julia-base: julia-deps $(build_sysconfdir)\/julia\/startup.jl $(build_man1dir)\/julia.1 $(build_/;"	t
julia-base-cache	Makefile	/^julia-base-cache: julia-sysimg-$(JULIA_BUILD_MODE) | $(DIRS) $(build_datarootdir)\/julia$/;"	t
julia-bq-expand	src/macroexpand.scm	/^(define (julia-bq-expand x d)$/;"	f
julia-bq-expand-	src/macroexpand.scm	/^(define (julia-bq-expand- x d)$/;"	f
julia-bq-macro	src/macroexpand.scm	/^(define (julia-bq-macro x)$/;"	f
julia-debug	Makefile	/^julia-debug julia-release : julia-% : julia-sysimg-% julia-symlink julia-libccalltest julia-libl/;"	t
julia-debug	ui/Makefile	/^julia-debug: $(build_bindir)\/julia-debug$(EXE)$/;"	t
julia-deps	Makefile	/^julia-deps: julia-deps-libs$/;"	t
julia-deps	Makefile	/^julia-deps: | $(BUILDDIRMAKE)$/;"	t
julia-deps	Makefile	/^julia-deps: | $(DIRS) $(build_datarootdir)\/julia\/base $(build_datarootdir)\/julia\/test$/;"	t
julia-expand	src/julia-syntax.scm	/^(define (julia-expand ex (file 'none) (line 0))$/;"	f
julia-expand-macroscope	src/macroexpand.scm	/^(define (julia-expand-macroscope e)$/;"	f
julia-expand-macroscopes-	src/macroexpand.scm	/^(define (julia-expand-macroscopes- e)$/;"	f
julia-expand-quotes	src/macroexpand.scm	/^(define (julia-expand-quotes e)$/;"	f
julia-expand0	src/julia-syntax.scm	/^(define julia-expand0 expand-forms)$/;"	f
julia-expand1	src/julia-syntax.scm	/^(define (julia-expand1 ex file line)$/;"	f
julia-libccalltest	Makefile	/^julia-libccalltest: julia-deps$/;"	t
julia-libllvmcalltest	Makefile	/^julia-libllvmcalltest: julia-deps$/;"	t
julia-parse	src/julia-parser.scm	/^(define (julia-parse s . production)$/;"	f
julia-release	Makefile	/^julia-debug julia-release : julia-% : julia-sysimg-% julia-symlink julia-libccalltest julia-libl/;"	t
julia-release	ui/Makefile	/^julia-release: $(build_bindir)\/julia$(EXE)$/;"	t
julia-src-%	Makefile	/^julia-src-release julia-src-debug : julia-src-% : julia-deps julia_flisp.boot.inc.phony$/;"	t
julia-src-debug	Makefile	/^julia-src-release julia-src-debug : julia-src-% : julia-deps julia_flisp.boot.inc.phony$/;"	t
julia-src-release	Makefile	/^julia-src-release julia-src-debug : julia-src-% : julia-deps julia_flisp.boot.inc.phony$/;"	t
julia-stdlib	Makefile	/^julia-stdlib: | $(DIRS)$/;"	t
julia-symlink	Makefile	/^julia-symlink: julia-ui-$(JULIA_BUILD_MODE)$/;"	t
julia-sysimg-%	Makefile	/^julia-sysimg-release julia-sysimg-debug : julia-sysimg-% : julia-sysimg-ji julia-ui-%$/;"	t
julia-sysimg-debug	Makefile	/^julia-sysimg-release julia-sysimg-debug : julia-sysimg-% : julia-sysimg-ji julia-ui-%$/;"	t
julia-sysimg-ji	Makefile	/^julia-sysimg-ji : julia-stdlib julia-base julia-ui-$(JULIA_BUILD_MODE) | $(build_private_libdir)$/;"	t
julia-sysimg-release	Makefile	/^julia-sysimg-release julia-sysimg-debug : julia-sysimg-% : julia-sysimg-ji julia-ui-%$/;"	t
julia-ui-%	Makefile	/^julia-ui-release julia-ui-debug : julia-ui-% : julia-src-%$/;"	t
julia-ui-debug	Makefile	/^julia-ui-release julia-ui-debug : julia-ui-% : julia-src-%$/;"	t
julia-ui-release	Makefile	/^julia-ui-release julia-ui-debug : julia-ui-% : julia-src-%$/;"	t
julia>	base/file.jl	/^julia> (root, dirs, files) = first(itr)$/;"	f
julia>	base/iterators.jl	/^julia> (a, rest) = Iterators.peel("abc");$/;"	f
juliaVariants	contrib/mac/frameworkapp/JuliaLauncher/AppDelegate.m	/^@property NSMutableDictionary<NSURL *, JuliaVariant *> *_Nonnull juliaVariants;$/;"	p	interface:AppDelegate
julia_alignment	src/cgutils.cpp	/^static unsigned julia_alignment(jl_value_t *jt)$/;"	f	typeref:typename:unsigned	file:
julia_bin	src/julia.h	/^    const char *julia_bin;$/;"	m	struct:__anon055fe4271808	typeref:typename:const char *
julia_binding_gv	src/cgutils.cpp	/^static Value *julia_binding_gv(jl_codectx_t &ctx, Value *bv)$/;"	f	typeref:typename:Value *	file:
julia_binding_gv	src/cgutils.cpp	/^static Value *julia_binding_gv(jl_codectx_t &ctx, jl_binding_t *b)$/;"	f	typeref:typename:Value *	file:
julia_bindir	src/julia.h	/^    const char *julia_bindir;$/;"	m	struct:__anon055fe4271808	typeref:typename:const char *
julia_bool	src/cgutils.cpp	/^static Value *julia_bool(jl_codectx_t &ctx, Value *cond)$/;"	f	typeref:typename:Value *	file:
julia_cmd	base/util.jl	/^function julia_cmd(julia=joinpath(Sys.BINDIR::String, julia_exename()))$/;"	f
julia_cmd	test/syntax.jl	/^macro julia_cmd(s)$/;"	f
julia_const_gv	src/codegen.cpp	/^static GlobalVariable *julia_const_gv(jl_value_t *val)$/;"	f	typeref:typename:GlobalVariable *	file:
julia_const_to_llvm	src/intrinsics.cpp	/^static Constant *julia_const_to_llvm(const void *ptr, jl_datatype_t *bt)$/;"	f	typeref:typename:Constant *	file:
julia_const_to_llvm	src/intrinsics.cpp	/^static Constant *julia_const_to_llvm(jl_value_t *e)$/;"	f	typeref:typename:Constant *	file:
julia_exename	base/util.jl	/^function julia_exename()$/;"	f
julia_exepath	contrib/generate_precompile.jl	/^julia_exepath() = joinpath(Sys.BINDIR, Base.julia_exename())$/;"	f
julia_flisp.boot.inc.phony	Makefile	/^julia_flisp.boot.inc.phony: julia-deps$/;"	t
julia_flisp.boot.inc.phony	src/Makefile	/^julia_flisp.boot.inc.phony: $(BUILDDIR)\/julia_flisp.boot.inc$/;"	t
julia_flisp_ast_ext	src/ast.c	/^static const builtinspec_t julia_flisp_ast_ext[] = {$/;"	v	typeref:typename:const builtinspec_t[]	file:
julia_flisp_func_info	src/flisp/julia_extensions.c	/^static const builtinspec_t julia_flisp_func_info[] = {$/;"	v	typeref:typename:const builtinspec_t[]	file:
julia_init	src/julia.h	/^#define julia_init /;"	d
julia_init	src/task.c	/^JL_DLLEXPORT void julia_init(JL_IMAGE_SEARCH rel)$/;"	f	typeref:typename:JL_DLLEXPORT void
julia_pgv	src/cgutils.cpp	/^static Value *julia_pgv(jl_codectx_t &ctx, const char *cname, void *addr)$/;"	f	typeref:typename:Value *	file:
julia_pgv	src/cgutils.cpp	/^static Value *julia_pgv(jl_codectx_t &ctx, const char *prefix, jl_sym_t *name, jl_module_t *mod,/;"	f	typeref:typename:Value *	file:
julia_repo	stdlib/LibGit2/src/LibGit2.jl	/^julia_repo = LibGit2.clone(julia_url, "julia_path", branch="release-0.6")$/;"	v
julia_struct_has_layout	src/cgutils.cpp	/^static bool julia_struct_has_layout(jl_datatype_t *dt, jl_unionall_t *ua)$/;"	f	typeref:typename:bool	file:
julia_struct_to_llvm	src/cgutils.cpp	/^static Type *julia_struct_to_llvm(jl_value_t *jt, jl_unionall_t *ua, bool *isboxed)$/;"	f	typeref:typename:Type *	file:
julia_to_list2	src/ast.c	/^static value_t julia_to_list2(fl_context_t *fl_ctx, jl_value_t *a, jl_value_t *b)$/;"	f	typeref:typename:value_t	file:
julia_to_list2_noalloc	src/ast.c	/^static value_t julia_to_list2_noalloc(fl_context_t *fl_ctx, jl_value_t *a, jl_value_t *b) JL_NOT/;"	f	typeref:typename:value_t	file:
julia_to_llvm	test/llvmcall.jl	/^    function julia_to_llvm(@nospecialize x)$/;"	f
julia_to_native	src/ccall.cpp	/^static Value *julia_to_native($/;"	f	typeref:typename:Value *	file:
julia_to_scm	src/ast.c	/^static value_t julia_to_scm(fl_context_t *fl_ctx, jl_value_t *v)$/;"	f	typeref:typename:value_t	file:
julia_to_scm_	src/ast.c	/^static value_t julia_to_scm_(fl_context_t *fl_ctx, jl_value_t *v)$/;"	f	typeref:typename:value_t	file:
julia_to_scm_noalloc	src/ast.c	/^static value_t julia_to_scm_noalloc(fl_context_t *fl_ctx, jl_value_t *v) JL_NOTSAFEPOINT$/;"	f	typeref:typename:value_t	file:
julia_to_scm_noalloc1	src/ast.c	/^static int julia_to_scm_noalloc1(fl_context_t *fl_ctx, jl_value_t *v, value_t *retval) JL_NOTSAF/;"	f	typeref:typename:int	file:
julia_to_scm_noalloc2	src/ast.c	/^static value_t julia_to_scm_noalloc2(fl_context_t *fl_ctx, jl_value_t *v) JL_NOTSAFEPOINT$/;"	f	typeref:typename:value_t	file:
julia_type_to_di	src/cgutils.cpp	/^static DIType *julia_type_to_di(jl_value_t *jt, DIBuilder *dbuilder, bool isboxed = false)$/;"	f	typeref:typename:DIType *	file:
julia_type_to_llvm	src/cgutils.cpp	/^JL_DLLEXPORT Type *julia_type_to_llvm(jl_value_t *jt, bool *isboxed)$/;"	f	typeref:typename:JL_DLLEXPORT Type *
julia_url	stdlib/LibGit2/src/LibGit2.jl	/^julia_url = "https:\/\/github.com\/JuliaLang\/julia"$/;"	v
juliaexe	contrib/mac/frameworkapp/JuliaLauncher/AppDelegate.m	/^@property(readonly, nonnull) NSURL *juliaexe;$/;"	p	interface:JuliaVariant
julian2datetime	stdlib/Dates/src/conversions.jl	/^function julian2datetime(f)$/;"	f
juliapersonality_func	src/codegen.cpp	/^Function *juliapersonality_func;$/;"	v	typeref:typename:Function *
just_construct_ssa	base/compiler/ssair/driver.jl	/^function just_construct_ssa(ci::CodeInfo, code::Vector{Any}, nargs::Int, sv::OptimizationState)$/;"	f
just_emit_error	src/cgutils.cpp	/^static void just_emit_error(jl_codectx_t &ctx, const std::string &txt)$/;"	f	typeref:typename:void	file:
just_fixup!	base/compiler/ssair/ir.jl	/^function just_fixup!(compact::IncrementalCompact)$/;"	f
juxtapose?	src/julia-parser.scm	/^(define (juxtapose? s expr t)$/;"	f
jv	src/simplevector.c	/^    jl_svec_t *jv = (jl_svec_t*)jl_gc_permobj((n + 1) * sizeof(void*), jl_simplevector_type);$/;"	v	typeref:typename:jl_svec_t *
jvtype	src/ast.c	/^    fltype_t *jvtype;$/;"	m	struct:_jl_ast_context_t	typeref:typename:fltype_t *	file:
k	test/core.jl	/^    k(x) = (k = x; k)$/;"	f
k	test/core.jl	/^@noinline k(a) = a$/;"	f
k1	test/boundscheck_exec.jl	/^function k1(a)$/;"	f
k11840	test/core.jl	/^k11840(::Type{Union{Tuple{Int32}, Tuple{Int64}}}) = '2'$/;"	f
k17449	test/core.jl	/^@noinline function k17449(r, v)$/;"	f
k1Log10	base/grisu/bignum.jl	/^const k1Log10 = 0.30102999566398114$/;"	v
k30385	test/compiler/inference.jl	/^k30385(::Type{AbstractFloat}) = 1$/;"	f
k30385	test/compiler/inference.jl	/^k30385(x) = "dummy"$/;"	f
k8_sse3	src/processor_x86.cpp	/^constexpr auto k8_sse3 = get_feature_masks(sse3, cx16);$/;"	v	namespace:X86::Feature	typeref:typename:auto
kBigitCapacity	base/grisu/bignums.jl	/^const kBigitCapacity = div(kMaxSignificantBits, kBigitSize)$/;"	v
kBigitMask	base/grisu/bignums.jl	/^const kBigitMask = Chunk((1 << kBigitSize) - 1)$/;"	v
kBigitSize	base/grisu/bignums.jl	/^const kBigitSize = 28$/;"	v
kChunkSize	base/grisu/bignums.jl	/^const kChunkSize = sizeof(Chunk) * 8$/;"	v
kDoubleChunkSize	base/grisu/bignums.jl	/^const kDoubleChunkSize = sizeof(DoubleChunk) * 8$/;"	v
kDoubleSignificandSize	base/grisu/fastfixed.jl	/^const kDoubleSignificandSize = 53$/;"	v
kFive1	base/grisu/bignums.jl	/^const kFive1 = UInt16(5)$/;"	v
kFive10	base/grisu/bignums.jl	/^const kFive10 = UInt32(kFive9 * 5)$/;"	v
kFive11	base/grisu/bignums.jl	/^const kFive11 = UInt32(kFive10 * 5)$/;"	v
kFive12	base/grisu/bignums.jl	/^const kFive12 = UInt32(kFive11 * 5)$/;"	v
kFive13	base/grisu/bignums.jl	/^const kFive13 = UInt32(kFive12 * 5)$/;"	v
kFive1_to_12	base/grisu/bignums.jl	/^const kFive1_to_12 = UInt32[kFive1, kFive2, kFive3, kFive4, kFive5, kFive6,$/;"	v
kFive2	base/grisu/bignums.jl	/^const kFive2 = UInt16(kFive1 * 5)$/;"	v
kFive27	base/grisu/bignums.jl	/^const kFive27 = UInt64(0x6765c793fa10079d)$/;"	v
kFive3	base/grisu/bignums.jl	/^const kFive3 = UInt16(kFive2 * 5)$/;"	v
kFive4	base/grisu/bignums.jl	/^const kFive4 = UInt16(kFive3 * 5)$/;"	v
kFive5	base/grisu/bignums.jl	/^const kFive5 = UInt16(kFive4 * 5)$/;"	v
kFive6	base/grisu/bignums.jl	/^const kFive6 = UInt16(kFive5 * 5)$/;"	v
kFive7	base/grisu/bignums.jl	/^const kFive7 = UInt32(kFive6 * 5)$/;"	v
kFive8	base/grisu/bignums.jl	/^const kFive8 = UInt32(kFive7 * 5)$/;"	v
kFive9	base/grisu/bignums.jl	/^const kFive9 = UInt32(kFive8 * 5)$/;"	v
kMaxExp	base/grisu/fastshortest.jl	/^const kMaxExp = -32$/;"	v
kMaxSignificantBits	base/grisu/bignums.jl	/^const kMaxSignificantBits = 3584$/;"	v
kMinExp	base/grisu/fastshortest.jl	/^const kMinExp = -60$/;"	v
kOne64	test/grisu.jl	/^kOne64 = UInt64(1)$/;"	v
kSignificandSize	base/grisu/bignum.jl	/^const kSignificandSize = SignificandSize(Float64)$/;"	v
kUInt64Size	base/grisu/bignums.jl	/^const kUInt64Size = 64$/;"	v
ke	stdlib/Random/src/normal.jl	/^const ke =$/;"	v
ke	stdlib/Random/test/runtests.jl	/^ke = Vector{UInt64}(undef, ziggurat_table_size)$/;"	v
key	src/julia.h	/^    jl_value_t *key; \/\/ [nullable]$/;"	m	struct:_jl_typemap_level_t	typeref:typename:jl_value_t *
key_error	src/flisp/table.c	/^static void key_error(fl_context_t *fl_ctx, char *fname, value_t key)$/;"	f	typeref:typename:void	file:
keyhash	src/table.c	/^#define keyhash(/;"	d	file:
keymap	stdlib/REPL/src/LineEdit.jl	/^function keymap(keymaps::Array{<:Dict})$/;"	f
keymap	stdlib/REPL/src/LineEdit.jl	/^keymap(ms::MIState, m::ModalInterface) = keymap(state(ms), mode(ms))$/;"	f
keymap	stdlib/REPL/src/LineEdit.jl	/^keymap(s::PromptState, prompt::Prompt) = prompt.keymap_dict$/;"	f
keymap	stdlib/REPL/src/LineEdit.jl	/^keymap(state, p::Union{HistoryPrompt,PrefixHistoryPrompt}) = p.keymap_dict$/;"	f
keymap_data	stdlib/REPL/src/LineEdit.jl	/^keymap_data(ms::MIState, m::ModalInterface) = keymap_data(state(ms), mode(ms))$/;"	f
keymap_data	stdlib/REPL/src/LineEdit.jl	/^keymap_data(s::PromptState, prompt::Prompt) = prompt.repl$/;"	f
keymap_data	stdlib/REPL/src/LineEdit.jl	/^keymap_data(state, ::Union{HistoryPrompt, PrefixHistoryPrompt}) = state$/;"	f
keymap_fcn	stdlib/REPL/src/LineEdit.jl	/^function keymap_fcn(f::Function, c)$/;"	f
keymap_fcn	stdlib/REPL/src/LineEdit.jl	/^keymap_fcn(f::Nothing, c) = (s, p) -> return :ok$/;"	f
keymap_fcn	stdlib/REPL/test/lineedit.jl	/^function keymap_fcn(keymaps)$/;"	f
keymap_merge	stdlib/REPL/src/LineEdit.jl	/^function keymap_merge(target,source)$/;"	f
keymap_merge!	stdlib/REPL/src/LineEdit.jl	/^function keymap_merge!(target::Dict, source::Dict)$/;"	f
keymap_unify	stdlib/REPL/src/LineEdit.jl	/^function keymap_unify(keymaps)$/;"	f
keypress	stdlib/REPL/src/TerminalMenus/AbstractMenu.jl	/^keypress(m::AbstractMenu, i::UInt32) = false$/;"	f
keypress	stdlib/REPL/src/TerminalMenus/MultiSelectMenu.jl	/^function keypress(menu::MultiSelectMenu, key::UInt32)$/;"	f
keys	base/abstractarray.jl	/^keys(a::AbstractArray) = CartesianIndices(axes(a))$/;"	f
keys	base/abstractarray.jl	/^keys(a::AbstractVector) = LinearIndices(a)$/;"	f
keys	base/abstractarray.jl	/^keys(s::IndexStyle, A::AbstractArray, B::AbstractArray...) = eachindex(s, A, B...)$/;"	f
keys	base/abstractdict.jl	/^function keys end$/;"	f
keys	base/abstractdict.jl	/^keys(a::AbstractDict) = KeySet(a)$/;"	f
keys	base/essentials.jl	/^keys(v::SimpleVector) = OneTo(length(v))$/;"	f
keys	base/iterators.jl	/^keys(v::Pairs) = v.itr$/;"	f
keys	base/missing.jl	/^keys(itr::SkipMissing) =$/;"	f
keys	base/namedtuple.jl	/^keys(nt::NamedTuple{names}) where {names} = names$/;"	f
keys	base/number.jl	/^keys(::Number) = OneTo(1)$/;"	f
keys	base/strings/basic.jl	/^keys(s::AbstractString) = EachStringIndex(s)$/;"	f
keys	base/tuple.jl	/^function keys(t::Tuple, t2::Tuple...)$/;"	f
keys	base/tuple.jl	/^keys(@nospecialize t::Tuple) = OneTo(length(t))$/;"	f
keytype	base/abstractarray.jl	/^keytype(A::Type{<:AbstractArray}) = CartesianIndex{ndims(A)}$/;"	f
keytype	base/abstractarray.jl	/^keytype(A::Type{<:AbstractVector}) = Int$/;"	f
keytype	base/abstractarray.jl	/^keytype(a::AbstractArray) = keytype(typeof(a))$/;"	f
keytype	base/abstractdict.jl	/^keytype(::Type{<:AbstractDict{K,V}}) where {K,V} = K$/;"	f
keytype	base/abstractdict.jl	/^keytype(a::AbstractDict) = keytype(typeof(a))$/;"	f
keytype_is_correct	test/ranges.jl	/^        keytype_is_correct(r) = keytype(r) == eltype(keys(r))$/;"	f
keyworddoc	base/docs/Docs.jl	/^function keyworddoc(__source__, __module__, str, def::Base.BaseDocs.Keyword)$/;"	f
keywords	base/docs/Docs.jl	/^const keywords = Dict{Symbol, DocStr}()$/;"	v
keywords-introduced-by	src/macroexpand.scm	/^(define (keywords-introduced-by e)$/;"	f
keywords-introduced-by-patterns	src/macroexpand.scm	/^(define keywords-introduced-by-patterns$/;"	f
keywords-method-def-expr	src/julia-syntax.scm	/^(define (keywords-method-def-expr name sparams argl body rett)$/;"	f
ki	stdlib/Random/src/normal.jl	/^const ki =$/;"	v
ki	stdlib/Random/test/runtests.jl	/^ki = Vector{UInt64}(undef, ziggurat_table_size)$/;"	v
kill	base/process.jl	/^function kill(p::Process, signum::Integer)$/;"	f
kill	base/process.jl	/^kill(p::Process) = kill(p, SIGTERM)$/;"	f
kill	base/process.jl	/^kill(ps::ProcessChain) = foreach(kill, ps.processes)$/;"	f
kill	base/process.jl	/^kill(ps::Vector{Process}) = foreach(kill, ps)$/;"	f
kill	stdlib/Distributed/src/managers.jl	/^function kill(manager::ClusterManager, pid::Int, config::WorkerConfig)$/;"	f
kill_edge!	base/compiler/ssair/ir.jl	/^function kill_edge!(bbs::Vector{BasicBlock}, from::Int, to::Int)$/;"	f
kill_edge!	base/compiler/ssair/ir.jl	/^function kill_edge!(compact::IncrementalCompact, active_bb::Int, from::Int, to::Int)$/;"	f
kill_test	stdlib/REPL/test/repl.jl	/^    function kill_test(t)$/;"	f
kill_timer	stdlib/REPL/test/repl.jl	/^function kill_timer(delay)$/;"	f
kind	deps/srccache/patchelf-0.9/src/elf.h	/^  unsigned char kind;		\/* Determines interpretation of the$/;"	m	struct:__anonff7a58692708	typeref:typename:unsigned char
knl	src/processor_x86.cpp	/^constexpr auto knl = broadwell | get_feature_masks(avx512f, avx512er, avx512cd, avx512pf,$/;"	v	namespace:X86::Feature	typeref:typename:auto
known_object_data	stdlib/Distributed/src/clusterserialize.jl	/^const known_object_data = Dict{UInt64,Any}()$/;"	v
kqueue_signal	src/signals-unix.c	/^static void kqueue_signal(int *sigqueue, struct kevent *ev, int sig)$/;"	f	typeref:typename:void	file:
kron	stdlib/LinearAlgebra/src/bitarray.jl	/^function kron(a::BitMatrix, b::BitMatrix)$/;"	f
kron	stdlib/LinearAlgebra/src/bitarray.jl	/^function kron(a::BitVector, b::BitVector)$/;"	f
kron	stdlib/LinearAlgebra/src/dense.jl	/^function kron(a::AbstractMatrix{T}, b::AbstractMatrix{S}) where {T,S}$/;"	f
kron	stdlib/LinearAlgebra/src/dense.jl	/^kron(a::AbstractMatrix, b::AbstractVector) = kron(a, reshape(b, length(b), 1))$/;"	f
kron	stdlib/LinearAlgebra/src/dense.jl	/^kron(a::AbstractVecOrMat, b::Number) = a * b$/;"	f
kron	stdlib/LinearAlgebra/src/dense.jl	/^kron(a::AbstractVector, b::AbstractMatrix) = kron(reshape(a, length(a), 1), b)$/;"	f
kron	stdlib/LinearAlgebra/src/dense.jl	/^kron(a::AbstractVector, b::AbstractVector) = vec(kron(reshape(a ,length(a), 1), reshape(b, lengt/;"	f
kron	stdlib/LinearAlgebra/src/dense.jl	/^kron(a::Number, b::Union{Number, AbstractVecOrMat}) = a * b$/;"	f
kron	stdlib/LinearAlgebra/src/diagonal.jl	/^function kron(A::AbstractMatrix{T}, B::Diagonal{S}) where {T<:Number, S<:Number}$/;"	f
kron	stdlib/LinearAlgebra/src/diagonal.jl	/^function kron(A::Diagonal{T1}, B::Diagonal{T2}) where {T1<:Number, T2<:Number}$/;"	f
kron	stdlib/LinearAlgebra/src/diagonal.jl	/^function kron(A::Diagonal{T}, B::AbstractMatrix{S}) where {T<:Number, S<:Number}$/;"	f
kron	stdlib/SparseArrays/src/linalg.jl	/^function kron(A::AbstractSparseMatrixCSC{T1,S1}, B::AbstractSparseMatrixCSC{T2,S2}) where {T1,S1/;"	f
kron	stdlib/SparseArrays/src/linalg.jl	/^function kron(x::SparseVector{T1,S1}, y::SparseVector{T2,S2}) where {T1,S1,T2,S2}$/;"	f
kron	stdlib/SparseArrays/src/linalg.jl	/^kron(A::AbstractSparseMatrixCSC, x::SparseVector) = kron(A, SparseMatrixCSC(x))$/;"	f
kron	stdlib/SparseArrays/src/linalg.jl	/^kron(A::Diagonal{T}, B::Union{SparseVector{S}, AbstractSparseMatrixCSC{S}}) where {T<:Number, S</;"	f
kron	stdlib/SparseArrays/src/linalg.jl	/^kron(A::SparseVectorUnion, B::AdjOrTransSparseVectorUnion) = A .* B$/;"	f
kron	stdlib/SparseArrays/src/linalg.jl	/^kron(A::Union{SparseVector,AbstractSparseMatrixCSC}, B::VecOrMat) = kron(A, sparse(B))$/;"	f
kron	stdlib/SparseArrays/src/linalg.jl	/^kron(A::Union{SparseVector{T}, AbstractSparseMatrixCSC{T}}, B::Diagonal{S}) where {T<:Number, S</;"	f
kron	stdlib/SparseArrays/src/linalg.jl	/^kron(A::VecOrMat, B::Union{SparseVector,AbstractSparseMatrixCSC}) = kron(sparse(A), B)$/;"	f
kron	stdlib/SparseArrays/src/linalg.jl	/^kron(x::SparseVector, A::AbstractSparseMatrixCSC) = kron(SparseMatrixCSC(x), A)$/;"	f
kw"	base/docs/basedocs.jl	/^kw"="$/;"	v
kw-to-=	src/julia-parser.scm	/^(define (kw-to-= e) (if (kwarg? e) (cons '= (cdr e)) e))$/;"	f
kw_str	base/docs/basedocs.jl	/^macro kw_str(text)$/;"	f
kwarg?	src/ast.scm	/^(define (kwarg? e)$/;"	f
kwarg_decl	base/methodshow.jl	/^function kwarg_decl(m::Method, kwtype::DataType)$/;"	f
kwdef	base/util.jl	/^macro kwdef(expr)$/;"	f
kwdelegator	test/keywordargs.jl	/^kwdelegator(ones;kw...) = kwf1(ones;kw...)$/;"	f
kwdict	stdlib/Distributed/test/distributed_exec.jl	/^kwdict = Dict()$/;"	v
kwerr	base/error.jl	/^function kwerr(kw, args::Vararg{Any,N}) where {N}$/;"	f
kwf1	test/keywordargs.jl	/^kwf1(ones; tens=0, hundreds=0) = ones + 10*tens + 100*hundreds$/;"	f
kwf2	test/keywordargs.jl	/^kwf2(x, rest...; y=1) = (x, y, rest)$/;"	f
kwf3	test/keywordargs.jl	/^    kwf3(x; y::Float64 = 1.0) = x + y$/;"	f
kwf4	test/keywordargs.jl	/^    kwf4(;a=1,b=2) = (a,b)$/;"	f
kwf6	test/keywordargs.jl	/^    kwf6(x; k::T=1) where {T} = T$/;"	f
kwf7	test/keywordargs.jl	/^    kwf7(x::T; k::T=1) where {T} = T$/;"	f
kwf8	test/keywordargs.jl	/^kwf8(x::MIME{:T};k::T=0) where {T} = 0$/;"	f
kwf9	test/keywordargs.jl	/^    kwf9(;read=true,write=!read) = (read,write)$/;"	f
kwf_maker	test/keywordargs.jl	/^    function kwf_maker()$/;"	f
kwftype	base/boot.jl	/^kwftype(@nospecialize(t)) = typeof(ccall(:jl_get_kwsorter, Any, (Any,), t))$/;"	f
kwfunc	base/boot.jl	/^kwfunc(@nospecialize(f)) = ccall(:jl_get_keyword_sorter, Any, (Any,), f)$/;"	f
kwsorter	src/julia.h	/^    jl_value_t *kwsorter;  \/\/ keyword argument sorter function$/;"	m	struct:_jl_methtable_t	typeref:typename:jl_value_t *
kwtest	stdlib/REPL/test/replcompletions.jl	/^        kwtest(; x=1, y=2, w...) = pass$/;"	f
l	test/read.jl	/^l = Vector{Tuple{AbstractString,Function}}()$/;"	v
l_checksum	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word l_checksum;	\/* Checksum *\/$/;"	m	struct:__anonff7a58692908	typeref:typename:Elf32_Word
l_checksum	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Word l_checksum;	\/* Checksum *\/$/;"	m	struct:__anonff7a58692a08	typeref:typename:Elf64_Word
l_flags	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word l_flags;		\/* Flags *\/$/;"	m	struct:__anonff7a58692908	typeref:typename:Elf32_Word
l_flags	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Word l_flags;		\/* Flags *\/$/;"	m	struct:__anonff7a58692a08	typeref:typename:Elf64_Word
l_name	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word l_name;		\/* Name (string table index) *\/$/;"	m	struct:__anonff7a58692908	typeref:typename:Elf32_Word
l_name	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Word l_name;		\/* Name (string table index) *\/$/;"	m	struct:__anonff7a58692a08	typeref:typename:Elf64_Word
l_time_stamp	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word l_time_stamp;	\/* Timestamp *\/$/;"	m	struct:__anonff7a58692908	typeref:typename:Elf32_Word
l_time_stamp	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Word l_time_stamp;	\/* Timestamp *\/$/;"	m	struct:__anonff7a58692a08	typeref:typename:Elf64_Word
l_version	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word l_version;		\/* Interface version *\/$/;"	m	struct:__anonff7a58692908	typeref:typename:Elf32_Word
l_version	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Word l_version;		\/* Interface version *\/$/;"	m	struct:__anonff7a58692a08	typeref:typename:Elf64_Word
label	base/essentials.jl	/^macro label(name::Symbol)$/;"	f
labelchangemap	test/compiler/inference.jl	/^labelchangemap = fill(0, length(code28279))$/;"	v
labs	src/flisp/flisp.h	/^#define labs /;"	d
laic1!	stdlib/LinearAlgebra/src/lapack.jl	/^        function laic1!(job::Integer, x::AbstractVector{$elty},$/;"	f
lam:args	src/ast.scm	/^(define (lam:args x) (cadr x))$/;"	f
lam:body	src/ast.scm	/^(define (lam:body x) (cadddr x))$/;"	f
lam:sp	src/ast.scm	/^(define (lam:sp x) (cadddr (lam:vinfo x)))$/;"	f
lam:vars	src/ast.scm	/^(define (lam:vars x) (llist-vars (lam:args x)))$/;"	f
lam:vinfo	src/ast.scm	/^(define (lam:vinfo x) (caddr x))$/;"	f
lambda-all-vars	src/julia-syntax.scm	/^(define (lambda-all-vars e)$/;"	f
lambda-opt-ignored-exprs	src/julia-syntax.scm	/^(define lambda-opt-ignored-exprs$/;"	f
lambda-optimize-vars!	src/julia-syntax.scm	/^(define (lambda-optimize-vars! lam)$/;"	f
lambda_cache	src/gf.c	/^const struct jl_typemap_info lambda_cache = {$/;"	v	typeref:typename:const struct jl_typemap_info
lambda_sym	src/ast.c	/^jl_sym_t *lambda_sym;  jl_sym_t *assign_sym;$/;"	v	typeref:typename:jl_sym_t *
lapack_size	stdlib/LinearAlgebra/src/matmul.jl	/^lapack_size(t::AbstractChar, M::AbstractVecOrMat) = (size(M, t=='N' ? 1 : 2), size(M, t=='N' ? 2/;"	f
larf!	stdlib/LinearAlgebra/src/lapack.jl	/^        function larf!(side::AbstractChar, v::AbstractVector{$elty},$/;"	f
larfg!	stdlib/LinearAlgebra/src/lapack.jl	/^        function larfg!(x::AbstractVector{$elty})$/;"	f
large-number?	src/julia-parser.scm	/^(define (large-number? t)$/;"	f
large_struct	test/compiler/codegen.jl	/^const large_struct = LargeStruct()$/;"	v
largest_denormal32	test/grisu.jl	/^largest_denormal32 = 0x007FFFFF$/;"	v
largest_denormal64	test/grisu.jl	/^largest_denormal64 = 0x000FFFFFFFFFFFFF$/;"	v
last	base/abstractarray.jl	/^last(a) = a[end]$/;"	f
last	base/bitset.jl	/^function last(s::BitSet)$/;"	f
last	base/char.jl	/^last(c::AbstractChar) = c$/;"	f
last	base/compiler/ssair/ir.jl	/^last(r::StmtRange) = r.stop$/;"	f
last	base/indices.jl	/^last(S::IdentityUnitRange) = last(S.indices)$/;"	f
last	base/indices.jl	/^last(S::Slice) = last(S.indices)$/;"	f
last	base/indices.jl	/^last(iter::LinearIndices) = (@_inline_meta; length(iter))$/;"	f
last	base/indices.jl	/^last(iter::LinearIndices{1}) = (@_inline_meta; last(axes1(iter.indices[1])))$/;"	f
last	base/iterators.jl	/^last(r::Reverse) = first(r.itr) # the first shall be last$/;"	f
last	base/multidimensional.jl	/^    last(iter::CartesianIndices)  = CartesianIndex(map(last, iter.indices))$/;"	f
last	base/number.jl	/^last(x::Number) = x$/;"	f
last	base/pair.jl	/^last(p::Pair) = p.second$/;"	f
last	base/range.jl	/^last(r::LinRange) = r.stop$/;"	f
last	base/range.jl	/^last(r::OrdinalRange{T}) where {T} = convert(T, r.stop)$/;"	f
last	base/range.jl	/^last(r::StepRangeLen) = unsafe_getindex(r, length(r))$/;"	f
last	base/strings/basic.jl	/^last(e::EachStringIndex) = lastindex(e.s)$/;"	f
last	base/strings/basic.jl	/^last(s::AbstractString, n::Integer) = @inbounds s[max(1, prevind(s, ncodeunits(s)+1, n)):end]$/;"	f
last	src/init.c	/^struct uv_shutdown_queue { struct uv_shutdown_queue_item *first; struct uv_shutdown_queue_item */;"	m	struct:uv_shutdown_queue	typeref:struct:uv_shutdown_queue_item *	file:
last	src/utils.scm	/^(define (last lst)$/;"	f
last_error	stdlib/LibGit2/src/error.jl	/^function last_error()$/;"	f
last_full_live	src/gc.c	/^static int64_t last_full_live = 0;  \/\/ live_bytes after last full collection$/;"	v	typeref:typename:int64_t	file:
last_gc_total_bytes	src/gc.c	/^static int64_t last_gc_total_bytes = 0;$/;"	v	typeref:typename:int64_t	file:
last_live_bytes	src/gc.c	/^static int64_t last_live_bytes = 0; \/\/ live_bytes at last collection$/;"	v	typeref:typename:int64_t	file:
last_long_collect_interval	src/gc.c	/^static size_t last_long_collect_interval;$/;"	v	typeref:typename:size_t	file:
last_remset	src/julia_threads.h	/^    arraylist_t *last_remset;$/;"	m	struct:__anonf8aecdb10608	typeref:typename:arraylist_t *
last_time	src/codegen.cpp	/^static uint64_t last_time = 0;$/;"	v	typeref:typename:uint64_t	file:
last_trim_maxrss	src/gc.c	/^static int64_t last_trim_maxrss = 0;$/;"	v	typeref:typename:int64_t	file:
lastdayofmonth	stdlib/Dates/src/adjusters.jl	/^function lastdayofmonth end$/;"	f
lastdayofmonth	stdlib/Dates/src/adjusters.jl	/^function lastdayofmonth(dt::Date)$/;"	f
lastdayofmonth	stdlib/Dates/src/adjusters.jl	/^lastdayofmonth(dt::DateTime) = DateTime(lastdayofmonth(Date(dt)))$/;"	f
lastdayofquarter	stdlib/Dates/src/adjusters.jl	/^function lastdayofquarter end$/;"	f
lastdayofquarter	stdlib/Dates/src/adjusters.jl	/^function lastdayofquarter(dt::Date)$/;"	f
lastdayofquarter	stdlib/Dates/src/adjusters.jl	/^lastdayofquarter(dt::DateTime) = DateTime(lastdayofquarter(Date(dt)))$/;"	f
lastdayofweek	stdlib/Dates/src/adjusters.jl	/^function lastdayofweek end$/;"	f
lastdayofweek	stdlib/Dates/src/adjusters.jl	/^lastdayofweek(dt::Date) = Date(UTD(value(dt) + (7 - dayofweek(dt))))$/;"	f
lastdayofweek	stdlib/Dates/src/adjusters.jl	/^lastdayofweek(dt::DateTime) = DateTime(lastdayofweek(Date(dt)))$/;"	f
lastdayofyear	stdlib/Dates/src/adjusters.jl	/^function lastdayofyear end$/;"	f
lastdayofyear	stdlib/Dates/src/adjusters.jl	/^function lastdayofyear(dt::Date)$/;"	f
lastdayofyear	stdlib/Dates/src/adjusters.jl	/^lastdayofyear(dt::DateTime) = DateTime(lastdayofyear(Date(dt)))$/;"	f
lastdaysofmonth	stdlib/Dates/test/ranges.jl	/^lastdaysofmonth = [Dates.Date(2014, i, Dates.daysinmonth(2014, i)) for i=1:12]$/;"	v
lasterror	src/flisp/flisp.h	/^    value_t lasterror;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
lastindex	base/abstractarray.jl	/^lastindex(a::AbstractArray) = (@_inline_meta; last(eachindex(IndexLinear(), a)))$/;"	f
lastindex	base/abstractarray.jl	/^lastindex(a::AbstractArray, d) = (@_inline_meta; last(axes(a, d)))$/;"	f
lastindex	base/char.jl	/^lastindex(c::AbstractChar) = 1$/;"	f
lastindex	base/essentials.jl	/^lastindex(v::SimpleVector) = length(v)$/;"	f
lastindex	base/namedtuple.jl	/^lastindex(t::NamedTuple) = nfields(t)$/;"	f
lastindex	base/number.jl	/^lastindex(x::Number) = 1$/;"	f
lastindex	base/pair.jl	/^lastindex(p::Pair) = 2$/;"	f
lastindex	base/strings/basic.jl	/^lastindex(s::AbstractString) = thisind(s, ncodeunits(s))$/;"	f
lastindex	base/tuple.jl	/^lastindex(@nospecialize t::Tuple) = length(t)$/;"	f
lastpwd	src/mk_julia_flisp_boot.scm	/^(set! lastpwd (path.cwd))$/;"	s
lastx	src/subtype.c	/^    jl_value_t *lastx, *lasty;$/;"	m	struct:subtype_tuple_env	typeref:typename:jl_value_t *	file:
lasty	src/subtype.c	/^    jl_value_t *lastx, *lasty;$/;"	m	struct:subtype_tuple_env	typeref:typename:jl_value_t **	file:
late_inline_special_case!	base/compiler/ssair/inlining.jl	/^function late_inline_special_case!(ir::IRCode, sig::Signature, idx::Int, stmt::Expr)$/;"	f
late_root	test/clangsa/MissingRoots.c	/^jl_value_t *late_root() {$/;"	f	typeref:typename:jl_value_t *
late_root2	test/clangsa/MissingRoots.c	/^jl_value_t *late_root2() {$/;"	f	typeref:typename:jl_value_t *
latestKnownTaggedJulia	contrib/mac/frameworkapp/JuliaLauncher/AppDelegate.m	/^@property JuliaVariant *_Nullable latestKnownTaggedJulia;$/;"	p	interface:AppDelegate
latex	stdlib/Markdown/src/GitHub/table.jl	/^function latex(io::IO, md::Table)$/;"	f
latex	stdlib/Markdown/src/IPython/IPython.jl	/^latex(io::IO, tex::LaTeX) =$/;"	f
latex	stdlib/Markdown/src/render/latex.jl	/^function latex(io::IO, code::Code)$/;"	f
latex	stdlib/Markdown/src/render/latex.jl	/^function latex(io::IO, content::Vector)$/;"	f
latex	stdlib/Markdown/src/render/latex.jl	/^function latex(io::IO, f::Footnote)$/;"	f
latex	stdlib/Markdown/src/render/latex.jl	/^function latex(io::IO, header::Header{l}) where l$/;"	f
latex	stdlib/Markdown/src/render/latex.jl	/^function latex(io::IO, md::Admonition)$/;"	f
latex	stdlib/Markdown/src/render/latex.jl	/^function latex(io::IO, md::BlockQuote)$/;"	f
latex	stdlib/Markdown/src/render/latex.jl	/^function latex(io::IO, md::HorizontalRule)$/;"	f
latex	stdlib/Markdown/src/render/latex.jl	/^function latex(io::IO, md::List)$/;"	f
latex	stdlib/Markdown/src/render/latex.jl	/^function latex(io::IO, md::Paragraph)$/;"	f
latex	stdlib/Markdown/src/render/latex.jl	/^latex(io::IO, md::MD) = latex(io, md.content)$/;"	f
latex	stdlib/Markdown/src/render/latex.jl	/^latex(md) = sprint(latex, md)$/;"	f
latex_strings	stdlib/REPL/src/latex_symbols.jl	/^const latex_strings = Set(values(REPL.REPLCompletions.latex_symbols))$/;"	v
latex_symbols	stdlib/REPL/src/latex_symbols.jl	/^const latex_symbols = Dict($/;"	v
latexesc	stdlib/Markdown/src/render/latex.jl	/^function latexesc(io, s::AbstractString)$/;"	f
latexesc	stdlib/Markdown/src/render/latex.jl	/^latexesc(s) = sprint(latexesc, s)$/;"	f
latexinline	stdlib/Markdown/src/IPython/IPython.jl	/^latexinline(io::IO, tex::LaTeX) =$/;"	f
latexinline	stdlib/Markdown/src/render/latex.jl	/^function latexinline(io::IO, code::Code)$/;"	f
latexinline	stdlib/Markdown/src/render/latex.jl	/^function latexinline(io::IO, md::AbstractString)$/;"	f
latexinline	stdlib/Markdown/src/render/latex.jl	/^function latexinline(io::IO, md::Bold)$/;"	f
latexinline	stdlib/Markdown/src/render/latex.jl	/^function latexinline(io::IO, md::Image)$/;"	f
latexinline	stdlib/Markdown/src/render/latex.jl	/^function latexinline(io::IO, md::Italic)$/;"	f
latexinline	stdlib/Markdown/src/render/latex.jl	/^function latexinline(io::IO, md::Link)$/;"	f
latexinline	stdlib/Markdown/src/render/latex.jl	/^function latexinline(io::IO, md::Vector)$/;"	f
latexinline	stdlib/Markdown/src/render/latex.jl	/^latexinline(io::IO, f::Footnote) = print(io, "\\\\footnotemark[", f.id, "]")$/;"	f
latexinline	stdlib/Markdown/src/render/latex.jl	/^latexinline(md) = sprint(latexinline, md)$/;"	f
latexsym	stdlib/REPL/src/latex_symbols.jl	/^latexsym = []$/;"	v
launch	stdlib/Distributed/src/managers.jl	/^function launch(manager::LocalManager, params::Dict, launched::Array, c::Condition)$/;"	f
launch	stdlib/Distributed/src/managers.jl	/^function launch(manager::SSHManager, params::Dict, launched::Array, launch_ntfy::Condition)$/;"	f
launch	stdlib/Distributed/test/distributed_exec.jl	/^function launch(manager::ErrorSimulator, params::Dict, launched::Array, c::Condition)$/;"	f
launch	stdlib/Distributed/test/distributed_exec.jl	/^function launch(manager::RetainStdioTester, params::Dict, launched::Array, c::Condition)$/;"	f
launch	stdlib/Distributed/test/distributed_exec.jl	/^function launch(manager::WorkerArgTester, params::Dict, launched::Array, c::Condition)$/;"	f
launch	stdlib/Distributed/test/topology.jl	/^function launch(manager::TopoTestManager, params::Dict, launched::Array, c::Condition)$/;"	f
launch:	contrib/mac/frameworkapp/ExecSandbox/ExecSandbox.m	/^- (void)launch:(void (^_Nullable)(int status))onTermination {$/;"	m	implementation:JuliaTask
launch:	contrib/mac/frameworkapp/ExecSandbox/ExecSandboxProtocol.h	/^- (void)launch:(void (^_Nullable)(int status))onTermination;$/;"	m	protocol:TaskProtocol
launchTerminalApp	contrib/mac/frameworkapp/JuliaLauncher/AppDelegate.m	/^bool launchTerminalApp(void) {$/;"	f
launchTerminalApp	contrib/mac/frameworkapp/JuliaLauncher/AppDelegate.m	/^static bool launchTerminalApp(void);$/;"	f
launch_additional	stdlib/Distributed/src/cluster.jl	/^function launch_additional(np::Integer, cmd::Cmd)$/;"	f
launch_n_additional_processes	stdlib/Distributed/src/cluster.jl	/^function launch_n_additional_processes(manager, frompid, fromconfig, cnt, launched_q)$/;"	f
launch_on_machine	stdlib/Distributed/src/managers.jl	/^function launch_on_machine(manager::SSHManager, machine, cnt, params, launched, launch_ntfy::Con/;"	f
layer1	contrib/julia.svg	/^<svg xmlns="http:\/\/www.w3.org\/2000\/svg" viewBox="0 0 153.14 98.64"><defs><style>.cls-1{fill:/;"	i
layout	src/dump.c	/^                jl_datatype_layout_t layout;$/;"	m	union:jl_deserialize_datatype::__anon570497e3020a	typeref:typename:jl_datatype_layout_t	file:
layout	src/julia.h	/^    const jl_datatype_layout_t *layout;$/;"	m	struct:_jl_datatype_t	typeref:typename:const jl_datatype_layout_t *
layout_table	src/staticdata.c	/^static arraylist_t layout_table;$/;"	v	typeref:typename:arraylist_t	file:
lazyModule	src/ccall.cpp	/^lazyModule(Func &&func)$/;"	f	typeref:typename:LazyModule<typename std::remove_reference<Func>::type>	file:
lazy_freed_pages	src/gc.c	/^int64_t lazy_freed_pages = 0;$/;"	v	typeref:typename:int64_t
lazy_iterpolate	base/docs/core.jl	/^lazy_iterpolate(s::AbstractString) = Expr(:call, Core.svec, s)$/;"	f
lazy_iterpolate	base/docs/core.jl	/^lazy_iterpolate(x) = isexpr(x, :string) ? Expr(:call, Core.svec, x.args...) : x$/;"	f
lb	src/gc.h	/^    int lb;$/;"	m	struct:__anoncf30557c1208	typeref:typename:int
lb	src/gc.h	/^    int lb;$/;"	m	struct:__anoncf30557c1308	typeref:typename:int
lb	src/gc.h	/^    int lb;$/;"	m	struct:__anoncf30557c1408	typeref:typename:int
lb	src/gc.h	/^    uintptr_t lb;$/;"	m	struct:__anoncf30557c0a08	typeref:typename:uintptr_t
lb	src/julia.h	/^    jl_value_t *lb;   \/\/ lower bound$/;"	m	struct:__anon055fe4270808	typeref:typename:jl_value_t *
lb	src/subtype.c	/^    jl_value_t *lb;$/;"	m	struct:jl_varbinding_t	typeref:typename:jl_value_t *	file:
lb	test/clangsa/MissingRoots.c	/^    jl_value_t *lb;$/;"	m	struct:_varbinding	typeref:typename:jl_value_t *	file:
lcm	base/intfuncs.jl	/^function lcm(a::T, b::T) where T<:Integer$/;"	f
lcm	base/intfuncs.jl	/^lcm(a::Integer) = a$/;"	f
lcm	base/intfuncs.jl	/^lcm(a::Integer, b::Integer) = lcm(promote(a,b)...)$/;"	f
lcm	base/intfuncs.jl	/^lcm(a::Integer, b::Integer...) = lcm(a, lcm(b...))$/;"	f
lcm	base/intfuncs.jl	/^lcm(abc::AbstractArray{<:Integer}) = reduce(lcm, abc; init=one(eltype(abc)))$/;"	f
ldexp	base/math.jl	/^function ldexp(x::T, e::Integer) where T<:IEEEFloat$/;"	f
ldexp	base/math.jl	/^ldexp(x::Float16, q::Integer) = Float16(ldexp(Float32(x), q))$/;"	f
ldexp	base/mpfr.jl	/^function ldexp(x::BigFloat, n::Clong)$/;"	f
ldexp	base/mpfr.jl	/^function ldexp(x::BigFloat, n::Culong)$/;"	f
ldexp	base/mpfr.jl	/^ldexp(x::BigFloat, n::ClongMax) = ldexp(x, convert(Clong, n))$/;"	f
ldexp	base/mpfr.jl	/^ldexp(x::BigFloat, n::CulongMax) = ldexp(x, convert(Culong, n))$/;"	f
ldexp	base/mpfr.jl	/^ldexp(x::BigFloat, n::Integer) = x * exp2(BigFloat(n))$/;"	f
ldflags	contrib/julia-config.jl	/^function ldflags(doframework)$/;"	f
ldiv!	stdlib/LinearAlgebra/src/bidiag.jl	/^function ldiv!(A::Union{Bidiagonal,AbstractTriangular}, B::AbstractMatrix)$/;"	f
ldiv!	stdlib/LinearAlgebra/src/bidiag.jl	/^function ldiv!(adjA::Adjoint{<:Any,<:Union{Bidiagonal,AbstractTriangular}}, B::AbstractMatrix)$/;"	f
ldiv!	stdlib/LinearAlgebra/src/bidiag.jl	/^function ldiv!(transA::Transpose{<:Any,<:Union{Bidiagonal,AbstractTriangular}}, B::AbstractMatri/;"	f
ldiv!	stdlib/LinearAlgebra/src/bidiag.jl	/^ldiv!(A::Adjoint{<:Any,<:Bidiagonal}, b::AbstractVector) = ldiv!(copy(A), b)$/;"	f
ldiv!	stdlib/LinearAlgebra/src/bidiag.jl	/^ldiv!(A::Transpose{<:Any,<:Bidiagonal}, b::AbstractVector) = ldiv!(copy(A), b)$/;"	f
ldiv!	stdlib/LinearAlgebra/src/bidiag.jl	/^ldiv!(A::Union{Bidiagonal, AbstractTriangular}, b::AbstractVector) = naivesub!(A, b)$/;"	f
ldiv!	stdlib/LinearAlgebra/src/bunchkaufman.jl	/^function ldiv!(B::BunchKaufman{T}, R::StridedVecOrMat{S}) where {T,S}$/;"	f
ldiv!	stdlib/LinearAlgebra/src/bunchkaufman.jl	/^function ldiv!(B::BunchKaufman{T}, R::StridedVecOrMat{T}) where T<:BlasComplex$/;"	f
ldiv!	stdlib/LinearAlgebra/src/bunchkaufman.jl	/^function ldiv!(B::BunchKaufman{T}, R::StridedVecOrMat{T}) where T<:BlasReal$/;"	f
ldiv!	stdlib/LinearAlgebra/src/cholesky.jl	/^function ldiv!(C::CholeskyPivoted, B::StridedMatrix)$/;"	f
ldiv!	stdlib/LinearAlgebra/src/cholesky.jl	/^function ldiv!(C::CholeskyPivoted, B::StridedVector)$/;"	f
ldiv!	stdlib/LinearAlgebra/src/cholesky.jl	/^function ldiv!(C::CholeskyPivoted{T}, B::StridedMatrix{T}) where T<:BlasFloat$/;"	f
ldiv!	stdlib/LinearAlgebra/src/cholesky.jl	/^function ldiv!(C::CholeskyPivoted{T}, B::StridedVector{T}) where T<:BlasFloat$/;"	f
ldiv!	stdlib/LinearAlgebra/src/cholesky.jl	/^function ldiv!(C::Cholesky{<:Any,<:AbstractMatrix}, B::StridedVecOrMat)$/;"	f
ldiv!	stdlib/LinearAlgebra/src/cholesky.jl	/^ldiv!(C::Cholesky{T,<:AbstractMatrix}, B::StridedVecOrMat{T}) where {T<:BlasFloat} =$/;"	f
ldiv!	stdlib/LinearAlgebra/src/diagonal.jl	/^function ldiv!(D::Diagonal, A::Union{LowerTriangular,UpperTriangular})$/;"	f
ldiv!	stdlib/LinearAlgebra/src/diagonal.jl	/^function ldiv!(D::Diagonal, B::StridedVecOrMat)$/;"	f
ldiv!	stdlib/LinearAlgebra/src/diagonal.jl	/^function ldiv!(D::Diagonal{T}, V::AbstractMatrix{T}) where {T}$/;"	f
ldiv!	stdlib/LinearAlgebra/src/diagonal.jl	/^function ldiv!(D::Diagonal{T}, v::AbstractVector{T}) where {T}$/;"	f
ldiv!	stdlib/LinearAlgebra/src/diagonal.jl	/^ldiv!(adjD::Adjoint{<:Any,<:Diagonal{T}}, B::AbstractVecOrMat{T}) where {T} =$/;"	f
ldiv!	stdlib/LinearAlgebra/src/diagonal.jl	/^ldiv!(transD::Transpose{<:Any,<:Diagonal{T}}, B::AbstractVecOrMat{T}) where {T} =$/;"	f
ldiv!	stdlib/LinearAlgebra/src/factorization.jl	/^function ldiv!(Y::AbstractVecOrMat, A::Factorization, B::AbstractVecOrMat)$/;"	f
ldiv!	stdlib/LinearAlgebra/src/factorization.jl	/^function ldiv!(Y::AbstractVecOrMat, adjA::Adjoint{<:Any,<:Factorization}, B::AbstractVecOrMat)$/;"	f
ldiv!	stdlib/LinearAlgebra/src/factorization.jl	/^function ldiv!(Y::AbstractVecOrMat, transA::Transpose{<:Any,<:Factorization}, B::AbstractVecOrMa/;"	f
ldiv!	stdlib/LinearAlgebra/src/generic.jl	/^function ldiv!(s::Number, X::AbstractArray)$/;"	f
ldiv!	stdlib/LinearAlgebra/src/hessenberg.jl	/^function ldiv!(F::Hessenberg, B::AbstractVecOrMat)$/;"	f
ldiv!	stdlib/LinearAlgebra/src/hessenberg.jl	/^function ldiv!(F::Hessenberg{<:Complex,<:Any,<:AbstractMatrix{<:Real}}, B::AbstractVecOrMat{<:Co/;"	f
ldiv!	stdlib/LinearAlgebra/src/hessenberg.jl	/^function ldiv!(F::UpperHessenberg, B::AbstractVecOrMat; shift::Number=false)$/;"	f
ldiv!	stdlib/LinearAlgebra/src/hessenberg.jl	/^ldiv!(F::Adjoint{<:Any,<:Hessenberg}, B::AbstractVecOrMat) = rdiv!(B', F')'$/;"	f
ldiv!	stdlib/LinearAlgebra/src/ldlt.jl	/^function ldiv!(S::LDLt{<:Any,<:SymTridiagonal}, B::AbstractVecOrMat)$/;"	f
ldiv!	stdlib/LinearAlgebra/src/lq.jl	/^function ldiv!(A::LQ{T}, B::StridedVecOrMat{T}) where T$/;"	f
ldiv!	stdlib/LinearAlgebra/src/lu.jl	/^function ldiv!(A::LU{<:Any,<:StridedMatrix}, B::StridedVecOrMat)$/;"	f
ldiv!	stdlib/LinearAlgebra/src/lu.jl	/^function ldiv!(A::LU{T,Tridiagonal{T,V}}, B::AbstractVecOrMat) where {T,V}$/;"	f
ldiv!	stdlib/LinearAlgebra/src/lu.jl	/^function ldiv!(adjA::Adjoint{<:Any,<:LU{<:Any,<:StridedMatrix}}, B::StridedVecOrMat)$/;"	f
ldiv!	stdlib/LinearAlgebra/src/lu.jl	/^function ldiv!(adjA::Adjoint{<:Any,LU{T,Tridiagonal{T,V}}}, B::AbstractVecOrMat) where {T,V}$/;"	f
ldiv!	stdlib/LinearAlgebra/src/lu.jl	/^function ldiv!(transA::Transpose{<:Any,<:LU{<:Any,<:StridedMatrix}}, B::StridedVecOrMat)$/;"	f
ldiv!	stdlib/LinearAlgebra/src/lu.jl	/^function ldiv!(transA::Transpose{<:Any,<:LU{T,Tridiagonal{T,V}}}, B::AbstractVecOrMat) where {T,/;"	f
ldiv!	stdlib/LinearAlgebra/src/lu.jl	/^ldiv!(A::LU{T,<:StridedMatrix}, B::StridedVecOrMat{T}) where {T<:BlasFloat} =$/;"	f
ldiv!	stdlib/LinearAlgebra/src/lu.jl	/^ldiv!(adjA::Adjoint{T,<:LU{T,<:StridedMatrix}}, B::StridedVecOrMat{T}) where {T<:BlasComplex} =$/;"	f
ldiv!	stdlib/LinearAlgebra/src/lu.jl	/^ldiv!(adjF::Adjoint{T,<:LU{T,<:StridedMatrix}}, B::StridedVecOrMat{T}) where {T<:Real} =$/;"	f
ldiv!	stdlib/LinearAlgebra/src/lu.jl	/^ldiv!(transA::Transpose{T,<:LU{T,<:StridedMatrix}}, B::StridedVecOrMat{T}) where {T<:BlasFloat} /;"	f
ldiv!	stdlib/LinearAlgebra/src/qr.jl	/^function ldiv!(A::QRPivoted, B::StridedMatrix)$/;"	f
ldiv!	stdlib/LinearAlgebra/src/qr.jl	/^function ldiv!(A::QRPivoted, b::StridedVector)$/;"	f
ldiv!	stdlib/LinearAlgebra/src/qr.jl	/^function ldiv!(A::QRPivoted{T}, B::StridedMatrix{T}, rcond::Real) where T<:BlasFloat$/;"	f
ldiv!	stdlib/LinearAlgebra/src/qr.jl	/^function ldiv!(A::QR{T}, B::StridedMatrix{T}) where T$/;"	f
ldiv!	stdlib/LinearAlgebra/src/qr.jl	/^ldiv!(A::QR, B::StridedVector) = ldiv!(A, reshape(B, length(B), 1))[:]$/;"	f
ldiv!	stdlib/LinearAlgebra/src/qr.jl	/^ldiv!(A::QRCompactWY{T}, B::StridedMatrix{T}) where {T<:BlasFloat} =$/;"	f
ldiv!	stdlib/LinearAlgebra/src/qr.jl	/^ldiv!(A::QRCompactWY{T}, b::StridedVector{T}) where {T<:BlasFloat} =$/;"	f
ldiv!	stdlib/LinearAlgebra/src/qr.jl	/^ldiv!(A::QRPivoted{T}, B::StridedVecOrMat{T}) where {T<:BlasFloat} =$/;"	f
ldiv!	stdlib/LinearAlgebra/src/qr.jl	/^ldiv!(A::QRPivoted{T}, B::StridedVector{T}) where {T<:BlasFloat} =$/;"	f
ldiv!	stdlib/LinearAlgebra/src/svd.jl	/^function ldiv!(A::SVD{T}, B::StridedVecOrMat) where T$/;"	f
ldiv!	stdlib/LinearAlgebra/src/triangular.jl	/^        ldiv!(A::$t{T,<:StridedMatrix}, B::StridedVecOrMat{T}) where {T<:BlasFloat} =$/;"	f
ldiv!	stdlib/LinearAlgebra/src/triangular.jl	/^        ldiv!(adjA::Adjoint{<:Any,<:$t{T,<:StridedMatrix}}, B::StridedVecOrMat{T}) where {T<:Bla/;"	f
ldiv!	stdlib/LinearAlgebra/src/triangular.jl	/^        ldiv!(transA::Transpose{<:Any,<:$t{T,<:StridedMatrix}}, B::StridedVecOrMat{T}) where {T</;"	f
ldiv!	stdlib/LinearAlgebra/src/triangular.jl	/^function ldiv!(adjA::Adjoint{<:Any,<:LowerTriangular}, b::AbstractVector, x::AbstractVector)$/;"	f
ldiv!	stdlib/LinearAlgebra/src/triangular.jl	/^function ldiv!(adjA::Adjoint{<:Any,<:UnitLowerTriangular}, b::AbstractVector, x::AbstractVector)$/;"	f
ldiv!	stdlib/LinearAlgebra/src/triangular.jl	/^function ldiv!(adjA::Adjoint{<:Any,<:UnitUpperTriangular}, b::AbstractVector, x::AbstractVector)$/;"	f
ldiv!	stdlib/LinearAlgebra/src/triangular.jl	/^function ldiv!(adjA::Adjoint{<:Any,<:UpperTriangular}, b::AbstractVector, x::AbstractVector)$/;"	f
ldiv!	stdlib/LinearAlgebra/src/triangular.jl	/^function ldiv!(transA::Transpose{<:Any,<:LowerTriangular}, b::AbstractVector, x::AbstractVector)$/;"	f
ldiv!	stdlib/LinearAlgebra/src/triangular.jl	/^function ldiv!(transA::Transpose{<:Any,<:UnitLowerTriangular}, b::AbstractVector, x::AbstractVec/;"	f
ldiv!	stdlib/LinearAlgebra/src/triangular.jl	/^function ldiv!(transA::Transpose{<:Any,<:UnitUpperTriangular}, b::AbstractVector, x::AbstractVec/;"	f
ldiv!	stdlib/LinearAlgebra/src/triangular.jl	/^function ldiv!(transA::Transpose{<:Any,<:UpperTriangular}, b::AbstractVector, x::AbstractVector)$/;"	f
ldiv!	stdlib/LinearAlgebra/src/triangular.jl	/^ldiv!(adjA::Adjoint{<:Any,<:LowerTriangular}, b::AbstractVector) = ldiv!(adjA, b, b)$/;"	f
ldiv!	stdlib/LinearAlgebra/src/triangular.jl	/^ldiv!(adjA::Adjoint{<:Any,<:Union{LowerTriangular,UnitLowerTriangular}}, B::UpperTriangular) =$/;"	f
ldiv!	stdlib/LinearAlgebra/src/triangular.jl	/^ldiv!(adjA::Adjoint{<:Any,<:Union{UpperTriangular,UnitUpperTriangular}}, B::LowerTriangular) =$/;"	f
ldiv!	stdlib/LinearAlgebra/src/triangular.jl	/^ldiv!(adjA::Adjoint{<:Any,<:UnitLowerTriangular}, b::AbstractVector) = ldiv!(adjA, b, b)$/;"	f
ldiv!	stdlib/LinearAlgebra/src/triangular.jl	/^ldiv!(adjA::Adjoint{<:Any,<:UnitUpperTriangular}, b::AbstractVector) = ldiv!(adjA, b, b)$/;"	f
ldiv!	stdlib/LinearAlgebra/src/triangular.jl	/^ldiv!(adjA::Adjoint{<:Any,<:UpperTriangular}, b::AbstractVector) = ldiv!(adjA, b, b)$/;"	f
ldiv!	stdlib/LinearAlgebra/src/triangular.jl	/^ldiv!(transA::Transpose{<:Any,<:LowerTriangular}, b::AbstractVector) = ldiv!(transA, b, b)$/;"	f
ldiv!	stdlib/LinearAlgebra/src/triangular.jl	/^ldiv!(transA::Transpose{<:Any,<:Union{LowerTriangular,UnitLowerTriangular}}, B::UpperTriangular)/;"	f
ldiv!	stdlib/LinearAlgebra/src/triangular.jl	/^ldiv!(transA::Transpose{<:Any,<:Union{UpperTriangular,UnitUpperTriangular}}, B::LowerTriangular)/;"	f
ldiv!	stdlib/LinearAlgebra/src/triangular.jl	/^ldiv!(transA::Transpose{<:Any,<:UnitLowerTriangular}, b::AbstractVector) = ldiv!(transA, b, b)$/;"	f
ldiv!	stdlib/LinearAlgebra/src/triangular.jl	/^ldiv!(transA::Transpose{<:Any,<:UnitUpperTriangular}, b::AbstractVector) = ldiv!(transA, b, b)$/;"	f
ldiv!	stdlib/LinearAlgebra/src/triangular.jl	/^ldiv!(transA::Transpose{<:Any,<:UpperTriangular}, b::AbstractVector) = ldiv!(transA, b, b)$/;"	f
ldiv!	stdlib/LinearAlgebra/src/tridiag.jl	/^ldiv!(A::SymTridiagonal, B::AbstractVecOrMat; shift::Number=false) = ldiv!(ldlt(A, shift=shift),/;"	f
ldiv!	stdlib/LinearAlgebra/src/uniformscaling.jl	/^ldiv!(J::UniformScaling, B::AbstractVecOrMat) = ldiv!(J.λ, B)$/;"	f
ldiv!	stdlib/SparseArrays/src/linalg.jl	/^function ldiv!(A::TriangularSparse{T}, B::StridedVecOrMat{T}) where T$/;"	f
ldiv!	stdlib/SparseArrays/src/linalg.jl	/^function ldiv!(D::Diagonal{T}, A::AbstractSparseMatrixCSC{T}) where {T}$/;"	f
ldiv!	stdlib/SparseArrays/src/linalg.jl	/^ldiv!(adjD::Adjoint{<:Any,<:Diagonal{T}}, A::AbstractSparseMatrixCSC{T}) where {T} =$/;"	f
ldiv!	stdlib/SparseArrays/src/linalg.jl	/^ldiv!(transD::Transpose{<:Any,<:Diagonal{T}}, A::AbstractSparseMatrixCSC{T}) where {T} =$/;"	f
ldiv!	stdlib/SparseArrays/src/sparsevector.jl	/^        @eval function ldiv!(xformA::$xformtritype, b::SparseVector)$/;"	f
ldiv!	stdlib/SuiteSparse/src/umfpack.jl	/^ldiv!(X::StridedVecOrMat{Tb}, adjlu::Adjoint{Float64,<:UmfpackLU{Float64}}, B::StridedVecOrMat{T/;"	f
ldiv!	stdlib/SuiteSparse/src/umfpack.jl	/^ldiv!(X::StridedVecOrMat{Tb}, lu::UmfpackLU{Float64}, B::StridedVecOrMat{Tb}) where {Tb<:Complex/;"	f
ldiv!	stdlib/SuiteSparse/src/umfpack.jl	/^ldiv!(X::StridedVecOrMat{Tb}, translu::Transpose{Float64,<:UmfpackLU{Float64}}, B::StridedVecOrM/;"	f
ldiv!	stdlib/SuiteSparse/src/umfpack.jl	/^ldiv!(X::StridedVecOrMat{T}, adjlu::Adjoint{T,<:UmfpackLU{T}}, B::StridedVecOrMat{T}) where {T<:/;"	f
ldiv!	stdlib/SuiteSparse/src/umfpack.jl	/^ldiv!(X::StridedVecOrMat{T}, lu::UmfpackLU{T}, B::StridedVecOrMat{T}) where {T<:UMFVTypes} =$/;"	f
ldiv!	stdlib/SuiteSparse/src/umfpack.jl	/^ldiv!(X::StridedVecOrMat{T}, translu::Transpose{T,<:UmfpackLU{T}}, B::StridedVecOrMat{T}) where /;"	f
ldiv!	stdlib/SuiteSparse/src/umfpack.jl	/^ldiv!(adjlu::Adjoint{Float64,<:UmfpackLU{Float64}}, B::StridedVecOrMat{<:Complex}) =$/;"	f
ldiv!	stdlib/SuiteSparse/src/umfpack.jl	/^ldiv!(adjlu::Adjoint{T,<:UmfpackLU{T}}, B::StridedVecOrMat{T}) where {T<:UMFVTypes} =$/;"	f
ldiv!	stdlib/SuiteSparse/src/umfpack.jl	/^ldiv!(lu::UmfpackLU{Float64}, B::StridedVecOrMat{<:Complex}) =$/;"	f
ldiv!	stdlib/SuiteSparse/src/umfpack.jl	/^ldiv!(lu::UmfpackLU{T}, B::StridedVecOrMat{T}) where {T<:UMFVTypes} =$/;"	f
ldiv!	stdlib/SuiteSparse/src/umfpack.jl	/^ldiv!(translu::Transpose{Float64,<:UmfpackLU{Float64}}, B::StridedVecOrMat{<:Complex}) =$/;"	f
ldiv!	stdlib/SuiteSparse/src/umfpack.jl	/^ldiv!(translu::Transpose{T,<:UmfpackLU{T}}, B::StridedVecOrMat{T}) where {T<:UMFVTypes} =$/;"	f
ldlibs	contrib/julia-config.jl	/^function ldlibs(doframework)$/;"	f
ldlt	stdlib/LinearAlgebra/src/ldlt.jl	/^function ldlt(M::SymTridiagonal{T}; shift::Number=false) where T$/;"	f
ldlt	stdlib/SuiteSparse/src/cholmod.jl	/^function ldlt(A::Sparse; shift::Real=0.0, check::Bool = true,$/;"	f
ldlt!	stdlib/LinearAlgebra/src/ldlt.jl	/^function ldlt!(S::SymTridiagonal{T,V}) where {T,V}$/;"	f
ldlt!	stdlib/SuiteSparse/src/cholmod.jl	/^function ldlt!(F::Factor{Tv}, A::Sparse{Tv};$/;"	f
le	src/runtime_intrinsics.c	/^#define le(/;"	d	file:
le_fast	base/fastmath.jl	/^le_fast(x::T, y::T) where {T<:FloatTypes} = le_float_fast(x, y)$/;"	f
leading_ones	base/int.jl	/^leading_ones(x::Integer) = leading_zeros(~x)$/;"	f
leading_zeros	base/int.jl	/^leading_zeros(x::BitInteger) = Int(ctlz_int(x))$/;"	f
leadingspaces	stdlib/REPL/src/LineEdit.jl	/^function leadingspaces(buf::IOBuffer, b::Int)::Int$/;"	f
leaffunc	test/show.jl	/^@noinline leaffunc() = print()$/;"	f
leafp	src/flisp/flisp.h	/^#define leafp(/;"	d
leave_func	src/llvm-lower-handlers.cpp	/^    Function *leave_func;$/;"	m	struct:LowerExcHandlers	typeref:typename:Function *	file:
leave_sym	src/ast.c	/^jl_sym_t *enter_sym;   jl_sym_t *leave_sym;$/;"	v	typeref:typename:jl_sym_t *
left	base/sort.jl	/^left(::DirectOrdering) = Left()$/;"	f
left	base/sort.jl	/^left(o::Perm) = Perm(left(o.order), o.data)$/;"	f
left	src/flisp/flisp.h	/^    struct _symbol_t *left;$/;"	m	struct:_symbol_t	typeref:struct:_symbol_t *
left	src/julia.h	/^    struct _jl_sym_t *left;$/;"	m	struct:_jl_sym_t	typeref:struct:_jl_sym_t *
left	test/gcext/gcext.c	/^    struct treap_t *left, *right;$/;"	m	struct:treap_t	typeref:struct:treap_t *	file:
len	src/flisp/flisp.h	/^    size_t len;            \/\/ length of *data in bytes$/;"	m	struct:__anonb455601d0408	typeref:typename:size_t
len	src/support/arraylist.h	/^    size_t len;$/;"	m	struct:__anon1f859bb90108	typeref:typename:size_t
len	stdlib/Dates/src/ranges.jl	/^function len(a, b, c)$/;"	f
len	stdlib/Dates/src/ranges.jl	/^len(a::Time, b::Time, c) = Int64(div(value(b - a), tons(c)))$/;"	f
len	stdlib/SharedArrays/test/runtests.jl	/^len = prod(sz)+4$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(-0.0, Grisu.FIXED, 1, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(-0.0, Grisu.PRECISION, 1, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(-0.0, Grisu.SHORTEST, 0, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(-1.0, Grisu.FIXED, 1, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(-1.0, Grisu.PRECISION, 1, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(-1.0, Grisu.SHORTEST, 0, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(-2147483648.0, Grisu.FIXED, 2, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(-2147483648.0, Grisu.PRECISION, 5, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(-2147483648.0, Grisu.SHORTEST, 0, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(-3.5844466002796428e+298, Grisu.PRECISION, 10, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(-3.5844466002796428e+298, Grisu.SHORTEST, 0, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(-Float32(0.0), Grisu.SHORTEST, 0, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(-Float32(1.0), Grisu.SHORTEST, 0, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(0.0, Grisu.FIXED, 0, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(0.0, Grisu.FIXED, 1, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(0.0, Grisu.FIXED, 2, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(0.0, Grisu.PRECISION, 0, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(0.0, Grisu.PRECISION, 1, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(0.0, Grisu.PRECISION, 3, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(0.0, Grisu.SHORTEST, 0, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(1.0, Grisu.FIXED, 0, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(1.0, Grisu.FIXED, 1, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(1.0, Grisu.FIXED, 3, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(1.0, Grisu.PRECISION, 0, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(1.0, Grisu.PRECISION, 1, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(1.0, Grisu.PRECISION, 3, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(1.0, Grisu.SHORTEST, 0, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(1.5, Grisu.FIXED, 10, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(1.5, Grisu.PRECISION, 10, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(1.5, Grisu.SHORTEST, 0, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(4.1855804968213567e298, Grisu.PRECISION, 20, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(4.1855804968213567e298, Grisu.SHORTEST, 0, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(4128420500802942e-24, Grisu.SHORTEST, 0, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(4294967272.0, Grisu.FIXED, 5, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(4294967272.0, Grisu.PRECISION, 14, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(4294967272.0, Grisu.SHORTEST, 0, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(5.5626846462680035e-309, Grisu.PRECISION, 1, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(5.5626846462680035e-309, Grisu.SHORTEST, 0, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(Float32(-2147483648.), Grisu.SHORTEST, 0, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(Float32(0.0), Grisu.SHORTEST, 0, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(Float32(1.0), Grisu.SHORTEST, 0, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(Float32(1.5), Grisu.SHORTEST, 0, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(Float32(4294967272.0), Grisu.SHORTEST, 0, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(Float32(max_float), Grisu.SHORTEST, 0, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(Float32(min_float), Grisu.SHORTEST, 0, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(f, Grisu.SHORTEST, 0, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(max_double, Grisu.PRECISION, 7, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(max_double, Grisu.SHORTEST, 0, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(min_double, Grisu.FIXED, 5, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(min_double, Grisu.PRECISION, 5, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(min_double, Grisu.SHORTEST, 0, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(v, Grisu.FIXED, 5, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(v, Grisu.PRECISION, 19, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(v, Grisu.PRECISION, 20, buffer)$/;"	v
len,point,neg	test/grisu.jl	/^len,point,neg = Grisu.grisu(v, Grisu.SHORTEST, 0, buffer)$/;"	v
len_data	stdlib/Profile/src/Profile.jl	/^len_data() = convert(Int, ccall(:jl_profile_len_data, Csize_t, ()))$/;"	f
len_only_iterable	test/asyncmap.jl	/^len_only_iterable = (1,2,3,4,5)$/;"	v
len_u8str	test/strings/types.jl	/^len_u8str = length(u8str)$/;"	v
len_u8str2	test/strings/types.jl	/^len_u8str2 = length(u8str2)$/;"	v
length	base/abstractarray.jl	/^length(t::AbstractArray) = (@_inline_meta; prod(size(t)))$/;"	f
length	base/abstractdict.jl	/^length(d::IdDict) = d.count$/;"	f
length	base/abstractdict.jl	/^length(s::IdSet)  = length(s.dict)$/;"	f
length	base/abstractdict.jl	/^length(v::Union{KeySet,ValueIterator}) = length(v.dict)$/;"	f
length	base/array.jl	/^length(a::Array) = arraylen(a)$/;"	f
length	base/asyncmap.jl	/^length(itr::AsyncGenerator) = length(itr.collector.enumerator)$/;"	f
length	base/bitarray.jl	/^length(B::BitArray) = B.len$/;"	f
length	base/bitset.jl	/^length(s::BitSet) = bitcount(s.bits) # = mapreduce(count_ones, +, s.bits; init=0)$/;"	f
length	base/char.jl	/^length(c::AbstractChar) = 1$/;"	f
length	base/compiler/ssair/domtree.jl	/^    length(D::DFSTree) = length(D.numbering)$/;"	f
length	base/compiler/ssair/show.jl	/^length(s::String) = Base.length(s)$/;"	f
length	base/dict.jl	/^length(t::Dict) = t.count$/;"	f
length	base/dict.jl	/^length(t::ImmutableDict) = count(x->true, t)$/;"	f
length	base/env.jl	/^function length(::EnvDict)$/;"	f
length	base/error.jl	/^length(ebo::ExponentialBackOff) = ebo.n$/;"	f
length	base/essentials.jl	/^function length(v::SimpleVector)$/;"	f
length	base/generator.jl	/^length(g::Generator) = length(g.iter)$/;"	f
length	base/indices.jl	/^length(S::IdentityUnitRange) = length(S.indices)$/;"	f
length	base/indices.jl	/^length(S::Slice) = length(S.indices)$/;"	f
length	base/iterators.jl	/^function length(itr::PartitionIterator)$/;"	f
length	base/iterators.jl	/^function length(z::Zip)$/;"	f
length	base/iterators.jl	/^length(P::ProductIterator) = prod(size(P))$/;"	f
length	base/iterators.jl	/^length(d::Drop) = _diff_length(d.xs, 1:d.n, IteratorSize(d.xs), HasLength())$/;"	f
length	base/iterators.jl	/^length(e::Enumerate) = length(e.itr)$/;"	f
length	base/iterators.jl	/^length(f::Flatten{I}) where {I} = flatten_length(f, eltype(I))$/;"	f
length	base/iterators.jl	/^length(f::Flatten{Tuple{}}) = 0$/;"	f
length	base/iterators.jl	/^length(r::Reverse) = length(r.itr)$/;"	f
length	base/iterators.jl	/^length(s::Stateful) = length(s.itr) - s.taken$/;"	f
length	base/iterators.jl	/^length(t::Take) = _min_length(t.xs, 1:t.n, IteratorSize(t.xs), HasLength())$/;"	f
length	base/iterators.jl	/^length(v::Pairs) = length(v.itr)$/;"	f
length	base/linked_list.jl	/^function length(q::InvasiveLinkedList)$/;"	f
length	base/multidimensional.jl	/^    length(::CartesianIndex{N}) where {N} = N$/;"	f
length	base/multidimensional.jl	/^    length(::Type{CartesianIndex{N}}) where {N} = N$/;"	f
length	base/multidimensional.jl	/^    length(iter::CartesianIndices) = prod(size(iter))$/;"	f
length	base/multidimensional.jl	/^    length(perm) == N || throw(ArgumentError("expected permutation of size $N, but length(perm)=/;"	f
length	base/multidimensional.jl	/^length(L::LogicalIndex) = L.sum$/;"	f
length	base/namedtuple.jl	/^length(t::NamedTuple) = nfields(t)$/;"	f
length	base/number.jl	/^length(x::Number) = 1$/;"	f
length	base/pair.jl	/^length(p::Pair) = 2$/;"	f
length	base/range.jl	/^    function length(r::StepRange{<:smallint})$/;"	f
length	base/range.jl	/^    length(r::AbstractUnitRange{<:smallint}) = Int(last(r)) - Int(first(r)) + 1$/;"	f
length	base/range.jl	/^    length(r::OneTo{<:smallint}) = Int(r.stop)$/;"	f
length	base/range.jl	/^function length(r::AbstractUnitRange{T}) where T<:Union{Int,Int64,Int128}$/;"	f
length	base/range.jl	/^function length(r::StepRange{T}) where T<:Union{Int,UInt,Int64,UInt64,Int128,UInt128}$/;"	f
length	base/range.jl	/^length(r::AbstractUnitRange) = unsafe_length(r)$/;"	f
length	base/range.jl	/^length(r::AbstractUnitRange{T}) where {T<:Union{UInt,UInt64,UInt128}} =$/;"	f
length	base/range.jl	/^length(r::LinRange) = r.len$/;"	f
length	base/range.jl	/^length(r::OneTo) = unsafe_length(r)$/;"	f
length	base/range.jl	/^length(r::OneTo{T}) where {T<:Union{Int,Int64}} = T(r.stop)$/;"	f
length	base/range.jl	/^length(r::StepRange) = unsafe_length(r)$/;"	f
length	base/range.jl	/^length(r::StepRangeLen) = r.len$/;"	f
length	base/reflection.jl	/^function length(mt::Core.MethodTable)$/;"	f
length	base/reflection.jl	/^length(m::MethodList) = length(m.ms)$/;"	f
length	base/refpointer.jl	/^length(x::Ref) = 1$/;"	f
length	base/reshapedarray.jl	/^length(R::ReshapedArrayIterator) = length(R.iter)$/;"	f
length	base/set.jl	/^length(s::Set)  = length(s.dict)$/;"	f
length	base/strings/basic.jl	/^@propagate_inbounds length(s::AbstractString, i::Integer, j::Integer) =$/;"	f
length	base/strings/basic.jl	/^function length(s::AbstractString, i::Int, j::Int)$/;"	f
length	base/strings/basic.jl	/^length(e::EachStringIndex) = length(e.s)$/;"	f
length	base/strings/basic.jl	/^length(s::AbstractString) = @inbounds return length(s, 1, ncodeunits(s))$/;"	f
length	base/strings/basic.jl	/^length(s::CodeUnits) = ncodeunits(s.s)$/;"	f
length	base/strings/string.jl	/^@inline function length(s::String, i::Int, j::Int)$/;"	f
length	base/strings/string.jl	/^length(s::String) = length_continued(s, 1, ncodeunits(s), ncodeunits(s))$/;"	f
length	base/strings/substring.jl	/^length(s::SubString) = length(s.string, s.offset+1, s.offset+s.ncodeunits)$/;"	f
length	base/strings/unicode.jl	/^function length(g::GraphemeIterator{S}) where {S}$/;"	f
length	base/task.jl	/^length(W::InvasiveLinkedListSynchronized) = length(W.queue)$/;"	f
length	base/task.jl	/^length(c::CompositeException) = length(c.exceptions)$/;"	f
length	base/tuple.jl	/^length(@nospecialize t::Tuple) = nfields(t)$/;"	f
length	base/weakkeydict.jl	/^length(t::WeakKeyDict) = length(t.ht)$/;"	f
length	src/julia.h	/^    size_t length;$/;"	m	struct:__anon055fe4270208	typeref:typename:JL_DATA_TYPE size_t
length	src/julia.h	/^    size_t length;$/;"	m	struct:__anon055fe4270408	typeref:typename:size_t
length	stdlib/LinearAlgebra/src/adjtrans.jl	/^length(A::AdjOrTrans) = length(A.parent)$/;"	f
length_continued	base/strings/string.jl	/^@inline function length_continued(s::String, i::Int, n::Int, c::Int)$/;"	f
lengthestimate	src/flisp/print.c	/^static int lengthestimate(fl_context_t *fl_ctx, value_t v)$/;"	f	typeref:typename:int	file:
lengthforindex	base/ryu/utils.jl	/^lengthforindex(idx) = div(((Int64(16 * idx) * 1292913986) >> 32) + 1 + 16 + 8, 9)$/;"	f
lerpi	base/range.jl	/^function lerpi(j::Integer, d::Integer, a::T, b::T) where T$/;"	f
lerpi	base/rational.jl	/^function lerpi(j::Integer, d::Integer, a::Rational, b::Rational)$/;"	f
lerror	src/flisp/flisp.c	/^void lerror(fl_context_t *fl_ctx, value_t e, const char *msg)$/;"	f	typeref:typename:void
lerrorf	src/flisp/flisp.c	/^void lerrorf(fl_context_t *fl_ctx, value_t e, const char *format, ...)$/;"	f	typeref:typename:void
less	base/grisu/bignums.jl	/^less(a::Bignum,b::Bignum) = compare(a,b) < 0$/;"	f
less	stdlib/InteractiveUtils/src/editless.jl	/^    function less(file::AbstractString, line::Integer)$/;"	f
less	stdlib/InteractiveUtils/src/editless.jl	/^less(f)                   = less(functionloc(f)...)$/;"	f
less	stdlib/InteractiveUtils/src/editless.jl	/^less(f, @nospecialize t)  = less(functionloc(f,t)...)$/;"	f
less	stdlib/InteractiveUtils/src/editless.jl	/^less(file, line::Integer) = error("could not find source file for function")$/;"	f
less	stdlib/InteractiveUtils/src/editless.jl	/^less(file::AbstractString) = less(file, 1)$/;"	f
lessequal	base/grisu/bignums.jl	/^lessequal(a::Bignum,b::Bignum) = compare(a,b) <= 0$/;"	f
lessrational	base/irrationals.jl	/^@pure function lessrational(rx::Rational{<:Integer}, x::AbstractIrrational)$/;"	f
let	stdlib/Distributed/test/distributed_exec.jl	/^let (h, t) = Distributed.head_and_tail(1:10, 0)$/;"	f
let	stdlib/Distributed/test/distributed_exec.jl	/^let (h, t) = Distributed.head_and_tail(1:10, 3)$/;"	f
let	stdlib/Distributed/test/distributed_exec.jl	/^let (h, t) = Distributed.head_and_tail(1:3, 3)$/;"	f
let	stdlib/Distributed/test/distributed_exec.jl	/^let (h, t) = Distributed.head_and_tail(1:3, 5)$/;"	f
let	stdlib/Distributed/test/distributed_exec.jl	/^let (h, t) = Distributed.head_and_tail(Int[], 0)$/;"	f
let	stdlib/Distributed/test/distributed_exec.jl	/^let (h, t) = Distributed.head_and_tail(Int[], 3)$/;"	f
let	stdlib/Distributed/test/distributed_exec.jl	/^let (p, p2) = filter!(p -> p != myid(), procs())$/;"	f
let	stdlib/FileWatching/test/runtests.jl	/^            let (fname, events) = wait(fm)::Pair$/;"	f
let	stdlib/REPL/test/replcompletions.jl	/^let (c, r) = test_complete("cd(\\"folder_do_not_exist_77\/file")$/;"	f
let	stdlib/REPL/test/replcompletions.jl	/^let (c, r, res) = test_complete("\\"~\/julia")$/;"	f
let	stdlib/Sockets/test/runtests.jl	/^                let (inetaddr, data) = recvfrom(a)$/;"	f
let	stdlib/SparseArrays/src/higherorderfns.jl	/^    let (passedsrcargstup, makeargs) = _capturescalars(mixedargs...)$/;"	f
let	stdlib/SparseArrays/src/higherorderfns.jl	/^    let (rest, f) = _capturescalars(mixedargs...)$/;"	f
let	test/compiler/inference.jl	/^    let (==) = (a, b)->(a ⊑ b && b ⊑ a)$/;"	f
let	test/compiler/inline.jl	/^let (src, _) = code_typed(f21074, ())[1]$/;"	f
let	test/compiler/inline.jl	/^let (src, _) = code_typed(g21074, ())[1]$/;"	f
let	test/core.jl	/^    let (a, (b,c,d), e) = z$/;"	f
let	test/core.jl	/^    let (a,b,c) = z$/;"	f
let	test/core.jl	/^    let (a,b::Float64,c::Int8) = z$/;"	f
let	test/core.jl	/^let (f(), x) = (1, 2)$/;"	f
let	test/functional.jl	/^let (:)(a,b) = (i for i in Base.:(:)(1,10) if i%2==0)$/;"	f
let	test/intfuncs.jl	/^    let (n, b) = rand(Int, 2)$/;"	f
let	test/iterators.jl	/^let (a, b) = (1:3, [4 6;$/;"	f
let	test/ranges.jl	/^    let (a, b) = (rand(10), rand(10)),$/;"	f
let	test/stacktraces.jl	/^let (default, with_c, without_c) = (stacktrace(), stacktrace(true), stacktrace(false))$/;"	f
let	test/subtype.jl	/^let (t, e) = intersection_env(Tuple{Union{Int,Int8}}, Tuple{T} where T)$/;"	f
let	test/syntax.jl	/^@test let (f(x::T)::Tuple{Int,Any}) where {T} = (3.0, T)$/;"	f
let-binds	src/julia-syntax.scm	/^(define (let-binds e)$/;"	f
let_Box1	test/core.jl	/^function let_Box1()$/;"	f
let_Box2	test/core.jl	/^function let_Box2()$/;"	f
let_Box3	test/core.jl	/^function let_Box3()$/;"	f
let_Box4	test/core.jl	/^function let_Box4()$/;"	f
let_Box5	test/core.jl	/^function let_Box5()$/;"	f
let_noBox	test/core.jl	/^function let_noBox()$/;"	f
let_undef	test/core.jl	/^function let_undef()$/;"	f
let_undef_cnt	test/core.jl	/^let_undef_cnt = 0$/;"	v
let_with_uninit	test/core.jl	/^macro let_with_uninit()$/;"	f
level1	stdlib/REPL/test/lineedit.jl	/^const level1 = Dict($/;"	v
level2a	stdlib/REPL/test/lineedit.jl	/^const level2a = Dict($/;"	v
level2b	stdlib/REPL/test/lineedit.jl	/^const level2b = Dict($/;"	v
levenshtein	stdlib/REPL/src/docview.jl	/^function levenshtein(s1, s2)$/;"	f
levsort	stdlib/REPL/src/docview.jl	/^function levsort(search, candidates)$/;"	f
lhs-decls	src/julia-syntax.scm	/^(define (lhs-decls e)$/;"	f
lhs-vars	src/julia-syntax.scm	/^(define (lhs-vars e)$/;"	f
libDir	contrib/julia-config.jl	/^function libDir()$/;"	f
libMap	src/runtime_ccall.cpp	/^static std::map<std::string, void*> libMap;$/;"	v	typeref:typename:std::map<std::string,void * >	file:
libMapGV	src/ccall.cpp	/^static StringMap<std::pair<GlobalVariable*,SymMapGV>> libMapGV;$/;"	v	typeref:typename:StringMap<std::pair<GlobalVariable *,SymMapGV>>	file:
libbar-scoped.so$(EXEEXT)	deps/srccache/patchelf-0.9/tests/Makefile.in	/^libbar-scoped.so$(EXEEXT): $(libbar_scoped_so_OBJECTS) $(libbar_scoped_so_DEPENDENCIES) $(EXTRA_/;"	t
libbar.so$(EXEEXT)	deps/srccache/patchelf-0.9/tests/Makefile.in	/^libbar.so$(EXEEXT): $(libbar_so_OBJECTS) $(libbar_so_DEPENDENCIES) $(EXTRA_libbar_so_DEPENDENCIE/;"	t
libbar_scoped_so_LDADD	deps/srccache/patchelf-0.9/tests/Makefile.in	/^libbar_scoped_so_LDADD = $(LDADD)$/;"	m
libbar_scoped_so_LDFLAGS	deps/srccache/patchelf-0.9/tests/Makefile.am	/^libbar_scoped_so_LDFLAGS = $(LDFLAGS_sharedlib)$/;"	m
libbar_scoped_so_LDFLAGS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^libbar_scoped_so_LDFLAGS = $(LDFLAGS_sharedlib)$/;"	m
libbar_scoped_so_LINK	deps/srccache/patchelf-0.9/tests/Makefile.in	/^libbar_scoped_so_LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) \\$/;"	m
libbar_scoped_so_OBJECTS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^libbar_scoped_so_OBJECTS = $(am_libbar_scoped_so_OBJECTS)$/;"	m
libbar_scoped_so_SOURCES	deps/srccache/patchelf-0.9/tests/Makefile.am	/^libbar_scoped_so_SOURCES = bar.c$/;"	m
libbar_scoped_so_SOURCES	deps/srccache/patchelf-0.9/tests/Makefile.in	/^libbar_scoped_so_SOURCES = bar.c$/;"	m
libbar_so_LDADD	deps/srccache/patchelf-0.9/tests/Makefile.in	/^libbar_so_LDADD = $(LDADD)$/;"	m
libbar_so_LDFLAGS	deps/srccache/patchelf-0.9/tests/Makefile.am	/^libbar_so_LDFLAGS = $(LDFLAGS_sharedlib) -Wl,-rpath,`pwd`\/no-such-path$/;"	m
libbar_so_LDFLAGS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^libbar_so_LDFLAGS = $(LDFLAGS_sharedlib) -Wl,-rpath,`pwd`\/no-such-path$/;"	m
libbar_so_LINK	deps/srccache/patchelf-0.9/tests/Makefile.in	/^libbar_so_LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(libbar_so_LDFLAGS) \\$/;"	m
libbar_so_OBJECTS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^libbar_so_OBJECTS = $(am_libbar_so_OBJECTS)$/;"	m
libbar_so_SOURCES	deps/srccache/patchelf-0.9/tests/Makefile.am	/^libbar_so_SOURCES = bar.c$/;"	m
libbar_so_SOURCES	deps/srccache/patchelf-0.9/tests/Makefile.in	/^libbar_so_SOURCES = bar.c$/;"	m
libblas	stdlib/LinearAlgebra/src/blas.jl	/^const libblas = Base.libblas_name$/;"	v
libc	contrib/normalize_triplet.py	/^    libc = "gnu"$/;"	v
libc	contrib/normalize_triplet.py	/^libc = get_field(m, libc_mapping)$/;"	v
libc_deregister_frame	src/debuginfo.cpp	/^static void (*libc_deregister_frame)(void*) = NULL;$/;"	v	typeref:typename:void (*)(void *)	file:
libc_mapping	contrib/normalize_triplet.py	/^libc_mapping = {$/;"	v
libc_register_frame	src/debuginfo.cpp	/^static void (*libc_register_frame)(void*)   = NULL;$/;"	v	typeref:typename:void (*)(void *)	file:
libccalltest	src/Makefile	/^libccalltest: $(build_shlibdir)\/libccalltest.$(SHLIB_EXT)$/;"	t
libccalltest	test/ccall.jl	/^const libccalltest = "libccalltest"$/;"	v
libccalltest	test/ccall.jl	/^const libccalltest = $libccalltest$/;"	v
libdir	deps/srccache/patchelf-0.9/Makefile.in	/^libdir = @libdir@$/;"	m
libdir	deps/srccache/patchelf-0.9/src/Makefile.in	/^libdir = @libdir@$/;"	m
libdir	deps/srccache/patchelf-0.9/tests/Makefile.in	/^libdir = @libdir@$/;"	m
libexecdir	deps/srccache/patchelf-0.9/Makefile.in	/^libexecdir = @libexecdir@$/;"	m
libexecdir	deps/srccache/patchelf-0.9/src/Makefile.in	/^libexecdir = @libexecdir@$/;"	m
libexecdir	deps/srccache/patchelf-0.9/tests/Makefile.in	/^libexecdir = @libexecdir@$/;"	m
libfoo-scoped.so$(EXEEXT)	deps/srccache/patchelf-0.9/tests/Makefile.in	/^libfoo-scoped.so$(EXEEXT): $(libfoo_scoped_so_OBJECTS) $(libfoo_scoped_so_DEPENDENCIES) $(EXTRA_/;"	t
libfoo.so$(EXEEXT)	deps/srccache/patchelf-0.9/tests/Makefile.in	/^libfoo.so$(EXEEXT): $(libfoo_so_OBJECTS) $(libfoo_so_DEPENDENCIES) $(EXTRA_libfoo_so_DEPENDENCIE/;"	t
libfoo_scoped_so_DEPENDENCIES	deps/srccache/patchelf-0.9/tests/Makefile.am	/^libfoo_scoped_so_DEPENDENCIES = libbar-scoped.so$/;"	m
libfoo_scoped_so_DEPENDENCIES	deps/srccache/patchelf-0.9/tests/Makefile.in	/^libfoo_scoped_so_DEPENDENCIES = libbar-scoped.so$/;"	m
libfoo_scoped_so_LDADD	deps/srccache/patchelf-0.9/tests/Makefile.am	/^libfoo_scoped_so_LDADD = -lbar-scoped $(AM_LDADD)$/;"	m
libfoo_scoped_so_LDADD	deps/srccache/patchelf-0.9/tests/Makefile.in	/^libfoo_scoped_so_LDADD = -lbar-scoped $(AM_LDADD)$/;"	m
libfoo_scoped_so_LDFLAGS	deps/srccache/patchelf-0.9/tests/Makefile.am	/^libfoo_scoped_so_LDFLAGS = $(LDFLAGS_sharedlib)$/;"	m
libfoo_scoped_so_LDFLAGS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^libfoo_scoped_so_LDFLAGS = $(LDFLAGS_sharedlib)$/;"	m
libfoo_scoped_so_LINK	deps/srccache/patchelf-0.9/tests/Makefile.in	/^libfoo_scoped_so_LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) \\$/;"	m
libfoo_scoped_so_OBJECTS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^libfoo_scoped_so_OBJECTS = $(am_libfoo_scoped_so_OBJECTS)$/;"	m
libfoo_scoped_so_SOURCES	deps/srccache/patchelf-0.9/tests/Makefile.am	/^libfoo_scoped_so_SOURCES = foo.c$/;"	m
libfoo_scoped_so_SOURCES	deps/srccache/patchelf-0.9/tests/Makefile.in	/^libfoo_scoped_so_SOURCES = foo.c$/;"	m
libfoo_so_DEPENDENCIES	deps/srccache/patchelf-0.9/tests/Makefile.am	/^libfoo_so_DEPENDENCIES = libbar.so$/;"	m
libfoo_so_DEPENDENCIES	deps/srccache/patchelf-0.9/tests/Makefile.in	/^libfoo_so_DEPENDENCIES = libbar.so$/;"	m
libfoo_so_LDADD	deps/srccache/patchelf-0.9/tests/Makefile.am	/^libfoo_so_LDADD = -lbar $(AM_LDADD)$/;"	m
libfoo_so_LDADD	deps/srccache/patchelf-0.9/tests/Makefile.in	/^libfoo_so_LDADD = -lbar $(AM_LDADD)$/;"	m
libfoo_so_LDFLAGS	deps/srccache/patchelf-0.9/tests/Makefile.am	/^libfoo_so_LDFLAGS = $(LDFLAGS_sharedlib)$/;"	m
libfoo_so_LDFLAGS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^libfoo_so_LDFLAGS = $(LDFLAGS_sharedlib)$/;"	m
libfoo_so_LINK	deps/srccache/patchelf-0.9/tests/Makefile.in	/^libfoo_so_LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(libfoo_so_LDFLAGS) \\$/;"	m
libfoo_so_OBJECTS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^libfoo_so_OBJECTS = $(am_libfoo_so_OBJECTS)$/;"	m
libfoo_so_SOURCES	deps/srccache/patchelf-0.9/tests/Makefile.am	/^libfoo_so_SOURCES = foo.c$/;"	m
libfoo_so_SOURCES	deps/srccache/patchelf-0.9/tests/Makefile.in	/^libfoo_so_SOURCES = foo.c$/;"	m
libhandle	src/julia.h	/^    void *libhandle;$/;"	m	struct:_jl_module_t	typeref:typename:void *
libjulia	test/cmdlineargs.jl	/^libjulia = if Base.DARWIN_FRAMEWORK$/;"	v
libjulia-debug	src/Makefile	/^libjulia-debug: $(build_shlibdir)\/libjulia-debug.$(JL_MAJOR_MINOR_SHLIB_EXT) $(PUBLIC_HEADER_TA/;"	t
libjulia-release	src/Makefile	/^libjulia-release: $(build_shlibdir)\/libjulia.$(JL_MAJOR_MINOR_SHLIB_EXT) $(PUBLIC_HEADER_TARGET/;"	t
liblapack	stdlib/LinearAlgebra/src/blas.jl	/^const liblapack = Base.liblapack_name$/;"	v
liblapack	stdlib/LinearAlgebra/src/lapack.jl	/^const liblapack = Base.liblapack_name$/;"	v
libllvm_version	base/version.jl	/^const libllvm_version = VersionNumber(libllvm_version_string)$/;"	v
libllvmcalltest	src/Makefile	/^libllvmcalltest: $(build_shlibdir)\/libllvmcalltest.$(SHLIB_EXT)$/;"	t
libm	base/fastmath.jl	/^const libm = Base.libm_name$/;"	v
libm	base/math.jl	/^const libm = Base.libm_name$/;"	v
libmap_lock	src/runtime_ccall.cpp	/^static jl_mutex_t libmap_lock;$/;"	v	typeref:typename:jl_mutex_t	file:
libpath	src/julia.h	/^    char *libpath;$/;"	m	struct:_jl_module_t	typeref:typename:char *
library_threading_enabled	base/initdefs.jl	/^library_threading_enabled = true$/;"	v
libsimple.so$(EXEEXT)	deps/srccache/patchelf-0.9/tests/Makefile.in	/^libsimple.so$(EXEEXT): $(libsimple_so_OBJECTS) $(libsimple_so_DEPENDENCIES) $(EXTRA_libsimple_so/;"	t
libsimple_so_LDADD	deps/srccache/patchelf-0.9/tests/Makefile.in	/^libsimple_so_LDADD = $(LDADD)$/;"	m
libsimple_so_LDFLAGS	deps/srccache/patchelf-0.9/tests/Makefile.am	/^libsimple_so_LDFLAGS = $(LDFLAGS_sharedlib)$/;"	m
libsimple_so_LDFLAGS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^libsimple_so_LDFLAGS = $(LDFLAGS_sharedlib)$/;"	m
libsimple_so_LINK	deps/srccache/patchelf-0.9/tests/Makefile.in	/^libsimple_so_LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) \\$/;"	m
libsimple_so_OBJECTS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^libsimple_so_OBJECTS = $(am_libsimple_so_OBJECTS)$/;"	m
libsimple_so_SOURCES	deps/srccache/patchelf-0.9/tests/Makefile.am	/^libsimple_so_SOURCES = simple.c$/;"	m
libsimple_so_SOURCES	deps/srccache/patchelf-0.9/tests/Makefile.in	/^libsimple_so_SOURCES = simple.c$/;"	m
libsupport_init	src/support/libsupportinit.c	/^void libsupport_init(void)$/;"	f	typeref:typename:void
libuv	doc/build/build.md	/^### libuv$/;"	S
license_linenum	contrib/add_license_to_files.jl	/^license_linenum(line) = startswith(strip(line), "#!") ? 2 : 1$/;"	f
lifetime_end	src/llvm-alloc-opt.cpp	/^    Function *lifetime_end;$/;"	m	struct:__anon0a1571000111::AllocOpt	typeref:typename:Function *	file:
lifetime_end	src/llvm-lower-handlers.cpp	/^    Function *lifetime_end;$/;"	m	struct:LowerExcHandlers	typeref:typename:Function *	file:
lifetime_stack	src/llvm-alloc-opt.cpp	/^    Lifetime::Stack lifetime_stack;$/;"	m	struct:__anon0a1571000111::Optimizer	typeref:typename:Lifetime::Stack	file:
lifetime_start	src/llvm-alloc-opt.cpp	/^    Function *lifetime_start;$/;"	m	struct:__anon0a1571000111::AllocOpt	typeref:typename:Function *	file:
lifetime_start	src/llvm-lower-handlers.cpp	/^    Function *lifetime_start;$/;"	m	struct:LowerExcHandlers	typeref:typename:Function *	file:
lift-toplevel	src/julia-syntax.scm	/^(define (lift-toplevel e)$/;"	f
lift_comparison!	base/compiler/ssair/passes.jl	/^function lift_comparison!(compact::IncrementalCompact, idx::Int,$/;"	f
lift_defuse	base/compiler/ssair/passes.jl	/^function lift_defuse(cfg::CFG, ssa::SSADefUse)$/;"	f
lift_defuse	base/compiler/ssair/slot2ssa.jl	/^function lift_defuse(cfg::CFG, defuse)$/;"	f
lift_leaves	base/compiler/ssair/passes.jl	/^function lift_leaves(compact::IncrementalCompact, @nospecialize(stmt),$/;"	f
liftchunks	base/broadcast.jl	/^liftchunks(::Tuple{}) = ()$/;"	f
liftchunks	base/broadcast.jl	/^liftchunks(args::Tuple{<:BitArray,Vararg{Any}}) = (args[1].chunks, liftchunks(tail(args))...)$/;"	f
liftchunks	base/broadcast.jl	/^liftchunks(args::Tuple{<:Bool,Vararg{Any}}) = (ifelse(args[1], typemax(UInt64), UInt64(0)), lift/;"	f
liftfuncs	base/broadcast.jl	/^liftfuncs(bc::Broadcasted{Style,<:Any,typeof(!)}) where {Style} = Broadcasted{Style}(~, map(lift/;"	f
liftfuncs	base/broadcast.jl	/^liftfuncs(bc::Broadcasted{Style,<:Any,typeof(*)}) where {Style} = Broadcasted{Style}(&, map(lift/;"	f
liftfuncs	base/broadcast.jl	/^liftfuncs(bc::Broadcasted{Style,<:Any,typeof(==)}) where {Style} = Broadcasted{Style}((~)∘(xor/;"	f
liftfuncs	base/broadcast.jl	/^liftfuncs(bc::Broadcasted{Style,<:Any,typeof(sign)}) where {Style} = Broadcasted{Style}(identity/;"	f
liftfuncs	base/broadcast.jl	/^liftfuncs(bc::Broadcasted{Style}) where {Style} = Broadcasted{Style}(bc.f, map(liftfuncs, bc.arg/;"	f
liftfuncs	base/broadcast.jl	/^liftfuncs(x) = x$/;"	f
light-source-dist	Makefile	/^light-source-dist: light-source-dist.tmp$/;"	t
light-source-dist.tmp	Makefile	/^light-source-dist.tmp: $(BUILDROOT)\/doc\/_build\/html\/en\/index.html$/;"	t
lim	src/flisp/flisp.h	/^    unsigned char *lim;$/;"	m	struct:_fl_context_t	typeref:typename:unsigned char *
lim	src/gf.c	/^    int lim;$/;"	m	struct:ml_matches_env	typeref:typename:int	file:
limbs_finish!	base/gmp.jl	/^limbs_finish!(x::BigInt, a) = ccall((:__gmpz_limbs_finish, :libgmp), Cvoid, (mpz_t, Clong), x, a/;"	f
limbs_write!	base/gmp.jl	/^limbs_write!(x::BigInt, a) = ccall((:__gmpz_limbs_write, :libgmp), Ptr{Limb}, (mpz_t, Clong), x,/;"	f
limit_overallocation	src/array.c	/^static size_t limit_overallocation(jl_array_t *a, size_t alen, size_t newlen, size_t inc)$/;"	f	typeref:typename:size_t	file:
limit_type_size	base/compiler/typelimits.jl	/^function limit_type_size(@nospecialize(t), @nospecialize(compare), @nospecialize(source), allowe/;"	f
limited_worker_rss	test/runtests.jl	/^limited_worker_rss = max_worker_rss != typemax(Csize_t)$/;"	v
limitrepr	base/strings/io.jl	/^limitrepr(x) = repr(x, context = :limit=>true)$/;"	f
line	src/codegen.cpp	/^        ssize_t line;$/;"	m	struct:emit_function::DebugLineTable	typeref:typename:ssize_t	file:
line	src/codegen.cpp	/^    ssize_t *line = NULL;$/;"	m	class:jl_codectx_t	typeref:typename:ssize_t *	file:
line	src/julia.h	/^    int32_t line;$/;"	m	struct:_jl_method_t	typeref:typename:int32_t
line	src/julia_internal.h	/^    int line;$/;"	m	struct:__anon9dd660c30108	typeref:typename:int
line-number-node	src/julia-parser.scm	/^(define (line-number-node s)$/;"	f
line_sym	src/ast.c	/^jl_sym_t *line_sym;    jl_sym_t *jl_incomplete_sym;$/;"	v	typeref:typename:jl_sym_t *
linear	src/julia.h	/^    jl_typemap_entry_t *linear; \/\/ jl_typemap_t * (but no more levels)$/;"	m	struct:_jl_typemap_level_t	typeref:typename:jl_typemap_entry_t *
linear_foo	stdlib/InteractiveUtils/test/runtests.jl	/^    function linear_foo()$/;"	f
linear_inline_eligible	base/compiler/ssair/inlining.jl	/^function linear_inline_eligible(ir::IRCode)$/;"	f
linearcache	src/julia.h	/^    jl_svec_t *linearcache;  \/\/ unsorted array$/;"	m	struct:__anon055fe4270a08	typeref:typename:jl_svec_t *
linearize	src/julia-syntax.scm	/^(define (linearize e)$/;"	f
linebreak	stdlib/Markdown/src/Common/inline.jl	/^function linebreak(stream::IO, md::MD)$/;"	f
linecontains	stdlib/Markdown/src/parse/util.jl	/^function linecontains(io::IO, chars; allow_whitespace = true,$/;"	f
linefeedsym	src/flisp/flisp.h	/^    value_t nulsym, alarmsym, backspacesym, tabsym, linefeedsym, newlinesym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
lineinfo_disabled	base/compiler/ssair/show.jl	/^lineinfo_disabled(io::IO, linestart::String, lineidx::Int32) = ""$/;"	f
linenode-string	src/julia-syntax.scm	/^(define (linenode-string lno)$/;"	f
linenum	test/backtrace.jl	/^linenum = @__LINE__; f12977(; args...) = ()$/;"	v
linenum?	src/ast.scm	/^(define (linenum? x) (and (pair? x) (eq? (car x) 'line)))$/;"	f
lineoffset	test/ambiguous.jl	/^const lineoffset = @__LINE__$/;"	v
lines	base/docs/basedocs.jl	/^lines = try$/;"	v
lines	stdlib/Markdown/src/render/terminal/formatting.jl	/^lines(s) = split(s, "\\n")$/;"	f
linetable	src/julia.h	/^    jl_value_t *linetable; \/\/ Table of locations [TODO: make this volatile like slotnames]$/;"	m	struct:_jl_code_info_t	typeref:typename:jl_value_t *
linfo	src/codegen.cpp	/^    jl_method_instance_t *linfo = NULL;$/;"	m	class:jl_codectx_t	typeref:typename:jl_method_instance_t *	file:
linfo	src/julia.h	/^        jl_method_instance_t *linfo; \/\/ [nullable] for guard entries$/;"	m	union:_jl_typemap_entry_t::__anon055fe427130a	typeref:typename:jl_method_instance_t *
linfo	src/julia_internal.h	/^    jl_method_instance_t *linfo;$/;"	m	struct:__anon9dd660c30108	typeref:typename:jl_method_instance_t *
linfomap	src/debuginfo.cpp	/^    std::map<size_t, std::pair<size_t, jl_method_instance_t *>, revcomp> linfomap;$/;"	m	class:JuliaJITEventListener	typeref:typename:std::map<size_t,std::pair<size_t,jl_method_instance_t * >,revcomp>	file:
link	stdlib/Markdown/src/Common/inline.jl	/^function link(stream::IO, md::MD)$/;"	f
link_pipe	base/stream.jl	/^function link_pipe(reader_supports_async::Bool, writer_supports_async::Bool)$/;"	f
link_pipe!	base/stream.jl	/^function link_pipe!(pipe::Pipe;$/;"	f
link_pipe!	base/stream.jl	/^function link_pipe!(read_end::PipeEndpoint, reader_supports_async::Bool,$/;"	f
liperm	stdlib/Profile/src/Profile.jl	/^function liperm(lilist::Vector{StackFrame})$/;"	f
lisp_init	src/flisp/flisp.c	/^static void lisp_init(fl_context_t *fl_ctx, size_t initial_heapsize)$/;"	f	typeref:typename:void	file:
list	src/ast.c	/^    jl_ast_context_list_t list;$/;"	m	struct:_jl_ast_context_t	typeref:typename:jl_ast_context_list_t	file:
list	src/flisp/flisp.c	/^#define list(/;"	d	file:
list	stdlib/Markdown/src/Common/block.jl	/^function list(stream::IO, block::MD)$/;"	f
list->string	src/flisp/aliases.scm	/^(define (list->string l) (apply string l))$/;"	f
list_append!!	base/linked_list.jl	/^function list_append!!(q::InvasiveLinkedList{T}, q2::InvasiveLinkedList{T}) where T$/;"	f
list_deletefirst!	base/linked_list.jl	/^function list_deletefirst!(q::InvasiveLinkedList{T}, val::T) where T$/;"	f
list_deletefirst!	base/linked_list.jl	/^function list_deletefirst!(q::LinkedList{T}, val::T) where T$/;"	f
list_deletefirst!	base/task.jl	/^function list_deletefirst!(W::InvasiveLinkedListSynchronized{T}, t::T) where T$/;"	f
list_sym	src/ast.c	/^jl_sym_t *global_sym; jl_sym_t *list_sym;$/;"	v	typeref:typename:jl_sym_t *
listen	stdlib/Sockets/src/PipeServer.jl	/^function listen(path::AbstractString)$/;"	f
listen	stdlib/Sockets/src/Sockets.jl	/^function listen(addr; backlog::Integer=BACKLOG_DEFAULT)$/;"	f
listen	stdlib/Sockets/src/Sockets.jl	/^function listen(sock::LibuvServer; backlog::Integer=BACKLOG_DEFAULT)$/;"	f
listen	stdlib/Sockets/src/Sockets.jl	/^listen(host::IPAddr, port::Integer; backlog::Integer=BACKLOG_DEFAULT) = listen(InetAddr(host, po/;"	f
listen	stdlib/Sockets/src/Sockets.jl	/^listen(port::Integer; backlog::Integer=BACKLOG_DEFAULT) = listen(localhost, port; backlog=backlo/;"	f
listenany	stdlib/Sockets/src/Sockets.jl	/^function listenany(host::IPAddr, default_port)$/;"	f
listenany	stdlib/Sockets/src/Sockets.jl	/^listenany(default_port) = listenany(localhost, default_port)$/;"	f
listener:shouldAcceptNewConnection:	contrib/mac/frameworkapp/ExecSandbox/main.m	/^    shouldAcceptNewConnection:(NSXPCConnection *)newConnection {$/;"	m	implementation:ServiceDelegate
listify-lambda	src/julia-syntax.scm	/^(define (listify-lambda lam)$/;"	f
literal_pointer_val	src/cgutils.cpp	/^static Value *literal_pointer_val(jl_codectx_t &ctx, jl_binding_t *p)$/;"	f	typeref:typename:Value *	file:
literal_pointer_val	src/cgutils.cpp	/^static Value *literal_pointer_val(jl_codectx_t &ctx, jl_value_t *p)$/;"	f	typeref:typename:Value *	file:
literal_pointer_val_slot	src/cgutils.cpp	/^static Value *literal_pointer_val_slot(jl_codectx_t &ctx, jl_value_t *p)$/;"	f	typeref:typename:Value *	file:
literal_pow	base/intfuncs.jl	/^@inline @generated function literal_pow(f::typeof(^), x, ::Val{p}) where {p}$/;"	f
literal_pow	base/intfuncs.jl	/^@inline literal_pow(::typeof(^), x::AbstractFloat, ::Val{-1}) = inv(x)$/;"	f
literal_pow	base/intfuncs.jl	/^@inline literal_pow(::typeof(^), x::AbstractFloat, ::Val{p}) where {p} = x^p$/;"	f
literal_pow	base/intfuncs.jl	/^@inline literal_pow(::typeof(^), x::HWNumber, ::Val{0}) = one(x)$/;"	f
literal_pow	base/intfuncs.jl	/^@inline literal_pow(::typeof(^), x::HWNumber, ::Val{1}) = x$/;"	f
literal_pow	base/intfuncs.jl	/^@inline literal_pow(::typeof(^), x::HWNumber, ::Val{2}) = x*x$/;"	f
literal_pow	base/intfuncs.jl	/^@inline literal_pow(::typeof(^), x::HWNumber, ::Val{3}) = x*x*x$/;"	f
literal_pow	base/intfuncs.jl	/^@inline literal_pow(f, x, ::Val{p}) where {p} = f(x,p)$/;"	f
literal_pow	base/math.jl	/^@inline literal_pow(::typeof(^), x::Float16, ::Val{p}) where {p} = Float16(literal_pow(^,Float32/;"	f
literal_static_pointer_val	src/cgutils.cpp	/^static Constant *literal_static_pointer_val(jl_codectx_t &ctx, const void *p, Type *T = T_pjlval/;"	f	typeref:typename:Constant *	file:
literal_val_id	src/dump.c	/^static int literal_val_id(jl_serializer_state *s, jl_value_t *v) JL_GC_DISABLED$/;"	f	typeref:typename:int	file:
littleEndian	deps/srccache/patchelf-0.9/src/patchelf.cc	/^    bool littleEndian;$/;"	m	class:ElfFile	typeref:typename:bool	file:
live_bytes	src/gc.c	/^static int64_t live_bytes = 0;$/;"	v	typeref:typename:int64_t	file:
live_tasks	src/julia_threads.h	/^    arraylist_t live_tasks;$/;"	m	struct:__anonf8aecdb10608	typeref:typename:arraylist_t
lkup	test/backtrace.jl	/^lkup = map(StackTraces.lookup, bt())$/;"	v
lkup	test/backtrace.jl	/^lkup = map(StackTraces.lookup, bt)$/;"	v
lkup	test/backtrace.jl	/^lkup = map(StackTraces.lookup, btmacro())$/;"	v
llength	src/flisp/builtins.c	/^size_t llength(value_t v)$/;"	f	typeref:typename:size_t
llist-types	src/ast.scm	/^(define (llist-types lst) (map arg-type lst))$/;"	f
llist-vars	src/ast.scm	/^(define (llist-vars lst)$/;"	f
llvm	src/jitlayers.cpp	/^namespace llvm {$/;"	n	file:
llvm	src/llvm-api.cpp	/^namespace llvm {$/;"	n	file:
llvm	src/llvm-late-gc-lowering.cpp	/^namespace llvm {$/;"	n	file:
llvm	src/llvm-simdloop.cpp	/^namespace llvm {$/;"	n	file:
llvm_dump	src/codegen_shared.h	/^static inline void llvm_dump(llvm::DebugLoc *dbg)$/;"	f	typeref:typename:void
llvm_dump	src/codegen_shared.h	/^static inline void llvm_dump(llvm::Function *f)$/;"	f	typeref:typename:void
llvm_dump	src/codegen_shared.h	/^static inline void llvm_dump(llvm::Metadata *m)$/;"	f	typeref:typename:void
llvm_dump	src/codegen_shared.h	/^static inline void llvm_dump(llvm::Module *m)$/;"	f	typeref:typename:void
llvm_dump	src/codegen_shared.h	/^static inline void llvm_dump(llvm::Type *v)$/;"	f	typeref:typename:void
llvm_dump	src/codegen_shared.h	/^static inline void llvm_dump(llvm::Value *v)$/;"	f	typeref:typename:void
llvm_file_magic	src/debuginfo.cpp	/^using llvm_file_magic = file_magic;$/;"	t	typeref:typename:file_magic	file:
llvm_python_location	deps/llvm.mk	/^llvm_python_location=$(shell \/usr\/bin\/env python2 -c 'import sys; print(sys.executable)')$/;"	m
llvm_python_workaround	deps/llvm.mk	/^llvm_python_workaround=$(SRCCACHE)\/python2_path$/;"	m
llvm_type_rewrite	src/ccall.cpp	/^static Value *llvm_type_rewrite($/;"	f	typeref:typename:Value *	file:
llvm_version	base/checked.jl	/^const llvm_version = Int(ccall(:jl_get_LLVM_VERSION, UInt32, ()))$/;"	v
llvmcall	src/ccall.cpp	/^    bool llvmcall;$/;"	m	class:function_sig_t	typeref:typename:bool	file:
llvmtypes	base/atomics.jl	/^const llvmtypes = IdDict{Any,String}($/;"	v
llvmver	src/processor.cpp	/^    uint32_t llvmver; \/\/ 0 if it is available on the oldest LLVM version we support$/;"	m	struct:__anon839834ed0111::FeatureName	typeref:typename:uint32_t	file:
llvmver	src/processor.cpp	/^    uint32_t llvmver;$/;"	m	struct:__anon839834ed0111::CPUSpec	typeref:typename:uint32_t	file:
lmul!	stdlib/LinearAlgebra/src/diagonal.jl	/^function lmul!(D::Diagonal, B::AbstractMatrix)$/;"	f
lmul!	stdlib/LinearAlgebra/src/diagonal.jl	/^function lmul!(D::Diagonal, B::UnitLowerTriangular)$/;"	f
lmul!	stdlib/LinearAlgebra/src/diagonal.jl	/^function lmul!(D::Diagonal, B::UnitUpperTriangular)$/;"	f
lmul!	stdlib/LinearAlgebra/src/diagonal.jl	/^function lmul!(adjA::Adjoint{<:Any,<:Diagonal}, B::AbstractMatrix)$/;"	f
lmul!	stdlib/LinearAlgebra/src/diagonal.jl	/^function lmul!(transA::Transpose{<:Any,<:Diagonal}, B::AbstractMatrix)$/;"	f
lmul!	stdlib/LinearAlgebra/src/diagonal.jl	/^lmul!(A::Diagonal, B::Diagonal) = Diagonal(B.diag .= A.diag .* B.diag)$/;"	f
lmul!	stdlib/LinearAlgebra/src/generic.jl	/^function lmul!(s::Number, X::AbstractArray)$/;"	f
lmul!	stdlib/LinearAlgebra/src/givens.jl	/^@inline function lmul!(G::Givens, A::AbstractVecOrMat)$/;"	f
lmul!	stdlib/LinearAlgebra/src/givens.jl	/^function lmul!(G::Givens, R::Rotation)$/;"	f
lmul!	stdlib/LinearAlgebra/src/givens.jl	/^function lmul!(R::Rotation, A::AbstractMatrix)$/;"	f
lmul!	stdlib/LinearAlgebra/src/hessenberg.jl	/^lmul!(Q::BlasHessenbergQ{T,false}, X::StridedVecOrMat{T}) where {T<:BlasFloat} =$/;"	f
lmul!	stdlib/LinearAlgebra/src/hessenberg.jl	/^lmul!(Q::BlasHessenbergQ{T,true}, X::StridedVecOrMat{T}) where {T<:BlasFloat} =$/;"	f
lmul!	stdlib/LinearAlgebra/src/hessenberg.jl	/^lmul!(Q::HessenbergQ{T}, X::Adjoint{T,<:StridedVecOrMat{T}}) where {T} = rmul!(X', Q')'$/;"	f
lmul!	stdlib/LinearAlgebra/src/hessenberg.jl	/^lmul!(adjQ::Adjoint{<:Any,<:BlasHessenbergQ{T,false}}, X::StridedVecOrMat{T}) where {T<:BlasFloa/;"	f
lmul!	stdlib/LinearAlgebra/src/hessenberg.jl	/^lmul!(adjQ::Adjoint{<:Any,<:BlasHessenbergQ{T,true}}, X::StridedVecOrMat{T}) where {T<:BlasFloat/;"	f
lmul!	stdlib/LinearAlgebra/src/hessenberg.jl	/^lmul!(adjQ::Adjoint{<:Any,<:HessenbergQ{T}}, X::Adjoint{T,<:StridedVecOrMat{T}}) where {T}  = rm/;"	f
lmul!	stdlib/LinearAlgebra/src/hessenberg.jl	/^lmul!(x::Number, H::UpperHessenberg) = (lmul!(x, H.data); H)$/;"	f
lmul!	stdlib/LinearAlgebra/src/hessenberg.jl	/^lmul!(x::T, F::Hessenberg{<:Any,<:SymTridiagonal{T}}) where {T<:Number} = Hessenberg(F.factors, /;"	f
lmul!	stdlib/LinearAlgebra/src/hessenberg.jl	/^lmul!(x::T, F::Hessenberg{<:Any,<:UpperHessenberg{T}}) where {T<:Number} = Hessenberg(lmul_triu!/;"	f
lmul!	stdlib/LinearAlgebra/src/lq.jl	/^lmul!(A::LQ, B::StridedVecOrMat) =$/;"	f
lmul!	stdlib/LinearAlgebra/src/lq.jl	/^lmul!(A::LQPackedQ{T}, B::StridedVecOrMat{T}) where {T<:BlasFloat} = LAPACK.ormlq!('L','N',A.fac/;"	f
lmul!	stdlib/LinearAlgebra/src/lq.jl	/^lmul!(adjA::Adjoint{<:Any,<:LQPackedQ{T}}, B::StridedVecOrMat{T}) where {T<:BlasComplex} =$/;"	f
lmul!	stdlib/LinearAlgebra/src/lq.jl	/^lmul!(adjA::Adjoint{<:Any,<:LQPackedQ{T}}, B::StridedVecOrMat{T}) where {T<:BlasReal} =$/;"	f
lmul!	stdlib/LinearAlgebra/src/qr.jl	/^function lmul!(A::QRPackedQ, B::AbstractVecOrMat)$/;"	f
lmul!	stdlib/LinearAlgebra/src/qr.jl	/^function lmul!(adjA::Adjoint{<:Any,<:QRPackedQ}, B::AbstractVecOrMat)$/;"	f
lmul!	stdlib/LinearAlgebra/src/qr.jl	/^lmul!(A::QRCompactWYQ{T,S}, B::StridedVecOrMat{T}) where {T<:BlasFloat, S<:StridedMatrix} =$/;"	f
lmul!	stdlib/LinearAlgebra/src/qr.jl	/^lmul!(A::QRPackedQ{T,S}, B::StridedVecOrMat{T}) where {T<:BlasFloat, S<:StridedMatrix} =$/;"	f
lmul!	stdlib/LinearAlgebra/src/qr.jl	/^lmul!(adjA::Adjoint{<:Any,<:QRCompactWYQ{T,S}}, B::StridedVecOrMat{T}) where {T<:BlasComplex,S<:/;"	f
lmul!	stdlib/LinearAlgebra/src/qr.jl	/^lmul!(adjA::Adjoint{<:Any,<:QRCompactWYQ{T,S}}, B::StridedVecOrMat{T}) where {T<:BlasReal,S<:Str/;"	f
lmul!	stdlib/LinearAlgebra/src/qr.jl	/^lmul!(adjA::Adjoint{<:Any,<:QRPackedQ{T,S}}, B::StridedVecOrMat{T}) where {T<:BlasComplex,S<:Str/;"	f
lmul!	stdlib/LinearAlgebra/src/qr.jl	/^lmul!(adjA::Adjoint{<:Any,<:QRPackedQ{T,S}}, B::StridedVecOrMat{T}) where {T<:BlasReal,S<:Stride/;"	f
lmul!	stdlib/LinearAlgebra/src/triangular.jl	/^        lmul!(A::$t{T,<:StridedMatrix}, B::StridedMatrix{T}) where {T<:BlasFloat} =$/;"	f
lmul!	stdlib/LinearAlgebra/src/triangular.jl	/^        lmul!(A::$t{T,<:StridedMatrix}, b::StridedVector{T}) where {T<:BlasFloat} =$/;"	f
lmul!	stdlib/LinearAlgebra/src/triangular.jl	/^        lmul!(adjA::Adjoint{<:Any,<:$t{T,<:StridedMatrix}}, B::StridedMatrix{T}) where {T<:BlasC/;"	f
lmul!	stdlib/LinearAlgebra/src/triangular.jl	/^        lmul!(adjA::Adjoint{<:Any,<:$t{T,<:StridedMatrix}}, B::StridedMatrix{T}) where {T<:BlasR/;"	f
lmul!	stdlib/LinearAlgebra/src/triangular.jl	/^        lmul!(adjA::Adjoint{<:Any,<:$t{T,<:StridedMatrix}}, b::StridedVector{T}) where {T<:BlasC/;"	f
lmul!	stdlib/LinearAlgebra/src/triangular.jl	/^        lmul!(adjA::Adjoint{<:Any,<:$t{T,<:StridedMatrix}}, b::StridedVector{T}) where {T<:BlasR/;"	f
lmul!	stdlib/LinearAlgebra/src/triangular.jl	/^        lmul!(transA::Transpose{<:Any,<:$t{T,<:StridedMatrix}}, B::StridedMatrix{T}) where {T<:B/;"	f
lmul!	stdlib/LinearAlgebra/src/triangular.jl	/^        lmul!(transA::Transpose{<:Any,<:$t{T,<:StridedMatrix}}, b::StridedVector{T}) where {T<:B/;"	f
lmul!	stdlib/LinearAlgebra/src/triangular.jl	/^function lmul!(A::LowerTriangular, B::StridedVecOrMat)$/;"	f
lmul!	stdlib/LinearAlgebra/src/triangular.jl	/^function lmul!(A::UnitLowerTriangular, B::StridedVecOrMat)$/;"	f
lmul!	stdlib/LinearAlgebra/src/triangular.jl	/^function lmul!(A::UnitUpperTriangular, B::StridedVecOrMat)$/;"	f
lmul!	stdlib/LinearAlgebra/src/triangular.jl	/^function lmul!(A::UpperTriangular, B::StridedVecOrMat)$/;"	f
lmul!	stdlib/LinearAlgebra/src/triangular.jl	/^function lmul!(adjA::Adjoint{<:Any,<:LowerTriangular}, B::StridedVecOrMat)$/;"	f
lmul!	stdlib/LinearAlgebra/src/triangular.jl	/^function lmul!(adjA::Adjoint{<:Any,<:UnitLowerTriangular}, B::StridedVecOrMat)$/;"	f
lmul!	stdlib/LinearAlgebra/src/triangular.jl	/^function lmul!(adjA::Adjoint{<:Any,<:UnitUpperTriangular}, B::StridedVecOrMat)$/;"	f
lmul!	stdlib/LinearAlgebra/src/triangular.jl	/^function lmul!(adjA::Adjoint{<:Any,<:UpperTriangular}, B::StridedVecOrMat)$/;"	f
lmul!	stdlib/LinearAlgebra/src/triangular.jl	/^function lmul!(transA::Transpose{<:Any,<:LowerTriangular}, B::StridedVecOrMat)$/;"	f
lmul!	stdlib/LinearAlgebra/src/triangular.jl	/^function lmul!(transA::Transpose{<:Any,<:UnitLowerTriangular}, B::StridedVecOrMat)$/;"	f
lmul!	stdlib/LinearAlgebra/src/triangular.jl	/^function lmul!(transA::Transpose{<:Any,<:UnitUpperTriangular}, B::StridedVecOrMat)$/;"	f
lmul!	stdlib/LinearAlgebra/src/triangular.jl	/^function lmul!(transA::Transpose{<:Any,<:UpperTriangular}, B::StridedVecOrMat)$/;"	f
lmul!	stdlib/LinearAlgebra/src/triangular.jl	/^lmul!(A::Tridiagonal, B::AbstractTriangular) = A*full!(B) # is this necessary?$/;"	f
lmul!	stdlib/LinearAlgebra/src/triangular.jl	/^lmul!(adjA::Adjoint{<:Any,<:Union{LowerTriangular,UnitLowerTriangular}}, B::UpperTriangular) =$/;"	f
lmul!	stdlib/LinearAlgebra/src/triangular.jl	/^lmul!(adjA::Adjoint{<:Any,<:Union{UpperTriangular,UnitUpperTriangular}}, B::LowerTriangular) =$/;"	f
lmul!	stdlib/LinearAlgebra/src/triangular.jl	/^lmul!(c::Number, A::Union{UpperTriangular,LowerTriangular}) = mul!(A, c, A)$/;"	f
lmul!	stdlib/LinearAlgebra/src/triangular.jl	/^lmul!(transA::Transpose{<:Any,<:Union{LowerTriangular,UnitLowerTriangular}}, B::UpperTriangular)/;"	f
lmul!	stdlib/LinearAlgebra/src/triangular.jl	/^lmul!(transA::Transpose{<:Any,<:Union{UpperTriangular,UnitUpperTriangular}}, B::LowerTriangular)/;"	f
lmul!	stdlib/LinearAlgebra/src/uniformscaling.jl	/^lmul!(J::UniformScaling, B::AbstractVecOrMat) = lmul!(J.λ, B)$/;"	f
lmul!	stdlib/SparseArrays/src/linalg.jl	/^function lmul!(A::TriangularSparse{T}, B::StridedVecOrMat{T}) where T$/;"	f
lmul!	stdlib/SparseArrays/src/linalg.jl	/^function lmul!(D::Diagonal, A::AbstractSparseMatrixCSC)$/;"	f
lmul!	stdlib/SparseArrays/src/linalg.jl	/^function lmul!(b::Number, A::AbstractSparseMatrixCSC)$/;"	f
lmul!	stdlib/SparseArrays/src/sparsevector.jl	/^function lmul!(a::Complex, x::SparseVectorUnion)$/;"	f
lmul!	stdlib/SparseArrays/src/sparsevector.jl	/^function lmul!(a::Real, x::SparseVectorUnion)$/;"	f
lmul_triu!	stdlib/LinearAlgebra/src/hessenberg.jl	/^function lmul_triu!(x, M::AbstractMatrix, k::Integer=0)$/;"	f
lo	src/julia.h	/^    uint64_t lo;$/;"	m	struct:__anon055fe4271208	typeref:typename:uint64_t
load_dummy_ref	test/compiler/codegen.jl	/^function load_dummy_ref(x::Int)$/;"	f
load_julia_startup	base/client.jl	/^function load_julia_startup()$/;"	f
load_machine_file	stdlib/Distributed/src/cluster.jl	/^function load_machine_file(path::AbstractString)$/;"	f
load_path	base/initdefs.jl	/^function load_path()$/;"	f
load_path_expand	base/initdefs.jl	/^function load_path_expand(env::AbstractString)::Union{String, Nothing}$/;"	f
load_path_expand	base/initdefs.jl	/^load_path_expand(::Nothing) = nothing$/;"	f
load_path_setup_code	base/loading.jl	/^function load_path_setup_code(load_path::Bool=true)$/;"	f
load_uint32	src/staticdata.c	/^static inline uint32_t load_uint32(uintptr_t *base)$/;"	f	typeref:typename:uint32_t	file:
loadavg	base/sysinfo.jl	/^function loadavg()$/;"	f
loaddocs	base/docs/Docs.jl	/^function loaddocs(docs)$/;"	f
loaded_files	test/loading.jl	/^loaded_files = String[]$/;"	v
loaded_modules	base/loading.jl	/^const loaded_modules = Dict{PkgId,Module}()$/;"	v
loaded_modules_array	base/loading.jl	/^loaded_modules_array() = collect(values(loaded_modules))$/;"	f
loaded_modules_array	src/dump.c	/^    jl_array_t *loaded_modules_array;$/;"	m	struct:__anon570497e30108	typeref:typename:jl_array_t *	file:
loadtriplet!	stdlib/Base64/src/encode.jl	/^function loadtriplet!(buffer::Buffer, ptr::Ptr{UInt8}, n::UInt)$/;"	f
loc	src/codegen.cpp	/^        DebugLoc loc;$/;"	m	struct:emit_function::DebugLineTable	typeref:typename:DebugLoc	file:
loc	test/backtrace.jl	/^loc = functionloc(f12977)$/;"	v
loc_h265	test/worlds.jl	/^loc_h265 = "$(@__FILE__):$(@__LINE__() - 1)"$/;"	v
local	stdlib/Sockets/test/runtests.jl	/^            local (p, s) = listenany(testport)$/;"	f
local-in?	src/julia-syntax.scm	/^(define (local-in? s lam)$/;"	f
local_remotecall_thunk	stdlib/Distributed/src/remotecall.jl	/^function local_remotecall_thunk(f, args, kwargs)$/;"	f
local_var_occurs	src/codegen.cpp	/^static bool local_var_occurs(jl_value_t *e, int sl)$/;"	f	typeref:typename:bool	file:
locale_dict	stdlib/Dates/src/query.jl	/^function locale_dict(names::Vector{<:AbstractString})$/;"	f
locale_t	src/support/strptime.c	/^typedef _locale_t locale_t;$/;"	t	typeref:typename:_locale_t	file:
localedir	deps/srccache/patchelf-0.9/Makefile.in	/^localedir = @localedir@$/;"	m
localedir	deps/srccache/patchelf-0.9/src/Makefile.in	/^localedir = @localedir@$/;"	m
localedir	deps/srccache/patchelf-0.9/tests/Makefile.in	/^localedir = @localedir@$/;"	m
localhost	stdlib/Sockets/src/Sockets.jl	/^const localhost = ip"127.0.0.1"$/;"	v
localindices	stdlib/SharedArrays/src/SharedArrays.jl	/^localindices(S::SharedArray) = S.pidx > 0 ? range_1dim(S, S.pidx) : 1:0$/;"	f
locals	base/reflection.jl	/^macro locals()$/;"	f
locals	src/interpreter.c	/^    jl_value_t **locals; \/\/ slots for holding local slots and ssavalues$/;"	m	struct:__anonf89725e10108	typeref:typename:jl_value_t **	file:
localstatedir	deps/srccache/patchelf-0.9/Makefile.in	/^localstatedir = @localstatedir@$/;"	m
localstatedir	deps/srccache/patchelf-0.9/src/Makefile.in	/^localstatedir = @localstatedir@$/;"	m
localstatedir	deps/srccache/patchelf-0.9/tests/Makefile.in	/^localstatedir = @localstatedir@$/;"	m
localtime_r	src/jl_uv.c	/^JL_DLLEXPORT struct tm *localtime_r(const time_t *t, struct tm *tm)$/;"	f	typeref:typename:JL_DLLEXPORT struct tm *
localtime_r	src/support/strptime.c	/^#define localtime_r(/;"	d	file:
locate_package	base/loading.jl	/^function locate_package(pkg::PkgId)::Union{Nothing,String}$/;"	f
lock	base/channels.jl	/^lock(c::Channel) = lock(c.cond_take)$/;"	f
lock	base/condition.jl	/^function lock end$/;"	f
lock	base/condition.jl	/^lock(c::GenericCondition) = lock(c.lock)$/;"	f
lock	base/condition.jl	/^lock(f, c::GenericCondition) = lock(f, c.lock)$/;"	f
lock	base/condition.jl	/^lock(l::AlwaysLockedST) = assert_havelock(l)$/;"	f
lock	base/io.jl	/^lock(::IO) = nothing$/;"	f
lock	base/lock.jl	/^function lock(f, l::AbstractLock)$/;"	f
lock	base/lock.jl	/^function lock(rl::ReentrantLock)$/;"	f
lock	base/lock.jl	/^macro lock(l, expr)$/;"	f
lock	base/locks-mt.jl	/^function lock(l::SpinLock)$/;"	f
lock	base/show.jl	/^lock(io::IOContext) = lock(io.io)$/;"	f
lock	base/stream.jl	/^lock(s::LibuvStream) = lock(s.lock)$/;"	f
lock	base/weakkeydict.jl	/^lock(f, wkh::WeakKeyDict) = lock(f, wkh.lock)$/;"	f
lock	src/julia.h	/^    jl_mutex_t lock;$/;"	m	struct:_jl_module_t	typeref:typename:jl_mutex_t
lock	src/partr.c	/^    jl_mutex_t lock;$/;"	m	struct:taskheap_tag	typeref:typename:jl_mutex_t	file:
lock_nofail	base/lock.jl	/^macro lock_nofail(l, expr)$/;"	f
locks	src/julia.h	/^    arraylist_t locks;$/;"	m	struct:_jl_task_t	typeref:typename:arraylist_t
locks_len	src/julia.h	/^    size_t locks_len;$/;"	m	struct:_jl_handler_t	typeref:typename:size_t
log	base/complex.jl	/^function log(z::Complex{T}) where T<:AbstractFloat$/;"	f
log	base/complex.jl	/^log(z::Complex) = log(float(z))$/;"	f
log	base/math.jl	/^log(b::Number, x::Number) = log(promote(b,x)...)$/;"	f
log	base/math.jl	/^log(b::T, x::T) where {T<:Number} = log(x)\/log(b)$/;"	f
log	base/special/log.jl	/^function log(x::Float32)$/;"	f
log	base/special/log.jl	/^function log(x::Float64)$/;"	f
log	stdlib/LinearAlgebra/src/dense.jl	/^function log(A::StridedMatrix)$/;"	f
log	stdlib/LinearAlgebra/src/triangular.jl	/^function log(A0::UpperTriangular{T}) where T<:BlasFloat$/;"	f
log	stdlib/LinearAlgebra/src/triangular.jl	/^log(A::LowerTriangular) = copy(transpose(log(copy(transpose(A)))))$/;"	f
log10	base/complex.jl	/^function log10(z::Complex)$/;"	f
log10_fast	base/fastmath.jl	/^    log10_fast(x::T) where {T<:ComplexTypes} = log(x) \/ log(convert(T,10))$/;"	f
log10pow2	base/ryu/utils.jl	/^log10pow2(e) = (e * 78913) >> 18$/;"	f
log10pow5	base/ryu/utils.jl	/^log10pow5(e) = (e * 732923) >> 20$/;"	f
log1p	base/complex.jl	/^function log1p(z::Complex{T}) where T$/;"	f
log1p	base/mpfr.jl	/^function log1p(x::BigFloat)$/;"	f
log1p	base/special/log.jl	/^function log1p(x::Float32)$/;"	f
log1p	base/special/log.jl	/^function log1p(x::Float64)$/;"	f
log1p_fast	base/fastmath.jl	/^    log1p_fast(x::ComplexTypes) = log(1+x)$/;"	f
log2	base/complex.jl	/^function log2(z::Complex)$/;"	f
log2_fast	base/fastmath.jl	/^    log2_fast(x::T) where {T<:ComplexTypes} = log(x) \/ log(convert(T,2))$/;"	f
log_each_level	test/logging.jl	/^        function log_each_level()$/;"	f
log_fast	base/fastmath.jl	/^    log_fast(b::T, x::T) where {T<:ComplexTypes} = T(log(x)\/log(b))$/;"	f
log_fast	base/fastmath.jl	/^    log_fast(b::T, x::T) where {T<:FloatTypes} = log_fast(x)\/log_fast(b)$/;"	f
log_fast	base/fastmath.jl	/^    log_fast(x::T) where {T<:ComplexTypes} = T(log(abs2(x))\/2, angle(x))$/;"	f
log_proc1	base/special/log.jl	/^@inline function log_proc1(y::Float32,mf::Float32,F::Float32,f::Float32,jp::Int)$/;"	f
log_proc1	base/special/log.jl	/^@inline function log_proc1(y::Float64,mf::Float64,F::Float64,f::Float64,jp::Int)$/;"	f
log_proc2	base/special/log.jl	/^@inline function log_proc2(f::Float32)$/;"	f
log_proc2	base/special/log.jl	/^@inline function log_proc2(f::Float64)$/;"	f
log_record_id	base/logging.jl	/^function log_record_id(_module, level, message, log_kws)$/;"	f
logabsdet	stdlib/LinearAlgebra/src/bunchkaufman.jl	/^function logabsdet(F::BunchKaufman)$/;"	f
logabsdet	stdlib/LinearAlgebra/src/diagonal.jl	/^function logabsdet(A::Diagonal)$/;"	f
logabsdet	stdlib/LinearAlgebra/src/generic.jl	/^logabsdet(A::AbstractMatrix) = logabsdet(lu(A, check=false))$/;"	f
logabsdet	stdlib/LinearAlgebra/src/hessenberg.jl	/^function logabsdet(F::UpperHessenberg; shift::Number=false)$/;"	f
logabsdet	stdlib/LinearAlgebra/src/hessenberg.jl	/^logabsdet(F::Hessenberg) = logabsdet(F.H; shift=F.μ)$/;"	f
logabsdet	stdlib/LinearAlgebra/src/ldlt.jl	/^function logabsdet(F::LDLt{<:Any,<:SymTridiagonal})$/;"	f
logabsdet	stdlib/LinearAlgebra/src/lu.jl	/^function logabsdet(F::LU{T}) where T  # return log(abs(det)) and sign(det)$/;"	f
logabsdet	stdlib/LinearAlgebra/src/triangular.jl	/^function logabsdet(A::Union{UpperTriangular{T},LowerTriangular{T}}) where T$/;"	f
logabsdet	stdlib/LinearAlgebra/src/triangular.jl	/^logabsdet(A::UnitLowerTriangular{T}) where {T} = zero(T), one(T)$/;"	f
logabsdet	stdlib/LinearAlgebra/src/triangular.jl	/^logabsdet(A::UnitUpperTriangular{T}) where {T} = zero(T), one(T)$/;"	f
logabsdet	stdlib/LinearAlgebra/src/tridiag.jl	/^logabsdet(A::SymTridiagonal; shift::Number=false) = logabsdet(ldlt(A; shift=shift))$/;"	f
logacc	test/complex.jl	/^function logacc(x::Float64,expected::Float64)$/;"	f
logdata_block	src/codegen.cpp	/^typedef uint64_t logdata_block[logdata_blocksize];$/;"	t	typeref:typename:uint64_t[logdata_blocksize]	file:
logdata_blocksize	src/codegen.cpp	/^const int logdata_blocksize = 32; \/\/ target getting nearby lines in the same general cache are/;"	v	typeref:typename:const int
logdata_t	src/codegen.cpp	/^typedef StringMap< std::vector<logdata_block*> > logdata_t;$/;"	t	typeref:typename:StringMap<std::vector<logdata_block * >>	file:
logdet	stdlib/LinearAlgebra/src/cholesky.jl	/^function logdet(C::Cholesky)$/;"	f
logdet	stdlib/LinearAlgebra/src/cholesky.jl	/^function logdet(C::CholeskyPivoted)$/;"	f
logdet	stdlib/LinearAlgebra/src/diagonal.jl	/^function logdet(D::Diagonal{<:Complex}) # make sure branch cut is correct$/;"	f
logdet	stdlib/LinearAlgebra/src/diagonal.jl	/^logdet(D::Diagonal{<:Real}) = sum(log, D.diag)$/;"	f
logdet	stdlib/LinearAlgebra/src/factorization.jl	/^function logdet(F::Factorization)$/;"	f
logdet	stdlib/LinearAlgebra/src/generic.jl	/^function logdet(A::AbstractMatrix)$/;"	f
logdet	stdlib/LinearAlgebra/src/generic.jl	/^logdet(A) = log(det(A))$/;"	f
logdet	stdlib/LinearAlgebra/src/hessenberg.jl	/^function logdet(F::Hessenberg)$/;"	f
logdet	stdlib/LinearAlgebra/src/triangular.jl	/^logdet(A::UnitLowerTriangular{T}) where {T} = zero(T)$/;"	f
logdet	stdlib/LinearAlgebra/src/triangular.jl	/^logdet(A::UnitUpperTriangular{T}) where {T} = zero(T)$/;"	f
logdet	stdlib/SuiteSparse/src/cholmod.jl	/^function logdet(F::Factor{Tv}) where Tv<:VTypes$/;"	f
logfield_contains	stdlib/Test/src/logging.jl	/^logfield_contains(a, b) = a == b$/;"	f
logfield_contains	stdlib/Test/src/logging.jl	/^logfield_contains(a, b::Ignored) = true$/;"	f
logfield_contains	stdlib/Test/src/logging.jl	/^logfield_contains(a, r::Regex) = occursin(r, a)$/;"	f
logfield_contains	stdlib/Test/src/logging.jl	/^logfield_contains(a::LogLevel, b::Symbol) = a == parse_level(b)$/;"	f
logfield_contains	stdlib/Test/src/logging.jl	/^logfield_contains(a::Symbol, r::Regex) = occursin(r, String(a))$/;"	f
logging_error	base/logging.jl	/^@noinline function logging_error(logger, level, _module, group, id,$/;"	f
logmsg	base/logging.jl	/^macro logmsg(level, exs...) logmsg_code((@_sourceinfo)..., esc(level), exs...) end$/;"	f
logmsg_code	base/logging.jl	/^function logmsg_code(_module, file, line, level, message, exs...)$/;"	f
logmsg_shim	base/logging.jl	/^function logmsg_shim(level, message, _module, group, id, file, line, kwargs)$/;"	f
logsizeof	stdlib/Random/src/RNGs.jl	/^logsizeof(::Type{<:Union{Bool,Int8,UInt8}}) = 0$/;"	f
logsizeof	stdlib/Random/src/RNGs.jl	/^logsizeof(::Type{<:Union{Int128,UInt128}}) = 4$/;"	f
logsizeof	stdlib/Random/src/RNGs.jl	/^logsizeof(::Type{<:Union{Int16,UInt16}}) = 1$/;"	f
logsizeof	stdlib/Random/src/RNGs.jl	/^logsizeof(::Type{<:Union{Int32,UInt32}}) = 2$/;"	f
logsizeof	stdlib/Random/src/RNGs.jl	/^logsizeof(::Type{<:Union{Int64,UInt64}}) = 3$/;"	f
logstate	src/julia.h	/^    jl_value_t *logstate;$/;"	m	struct:_jl_task_t	typeref:typename:jl_value_t *
longDecodedText	stdlib/Base64/test/runtests.jl	/^const longDecodedText = "name = \\"Genie\\"\\nuuid = \\"c43c736e-a2d1-11e8-161f-af95117fbd1e\\"\\/;"	v
longEncodedText	stdlib/Base64/test/runtests.jl	/^const longEncodedText = "bmFtZSA9ICJHZW5pZSIKdXVpZCA9ICJjNDNjNzM2ZS1hMmQxLTExZTgtMTYx\\nZi1hZjk1/;"	v
longer	stdlib/REPL/src/docview.jl	/^longer(x, y) = length(x) ≥ length(y) ? (x, true) : (y, false)$/;"	f
longest-common-prefix	src/julia-parser.scm	/^(define (longest-common-prefix l)$/;"	f
longest-common-prefix2	src/julia-parser.scm	/^(define (longest-common-prefix2 a b)$/;"	f
longest-common-prefix2-	src/julia-parser.scm	/^(define (longest-common-prefix2- a b p)$/;"	f
longpath	base/path.jl	/^function longpath(path::AbstractString)$/;"	f
look_at_args	test/clangsa/MissingRoots.c	/^static inline void look_at_args(jl_value_t **args) {$/;"	f	typeref:typename:void	file:
look_at_value2	test/clangsa/MissingRoots.c	/^static inline void look_at_value2(jl_value_t *v) {$/;"	f	typeref:typename:void	file:
lookup	base/stacktraces.jl	/^function lookup(ip::Base.InterpreterIP)$/;"	f
lookup	base/stacktraces.jl	/^function lookup(pointer::Ptr{Cvoid})$/;"	f
lookup	base/stacktraces.jl	/^lookup(pointer::UInt) = lookup(convert(Ptr{Cvoid}, pointer))$/;"	f
lookup	base/stacktraces.jl	/^lookup(s::StackFrame) = StackFrame[s]$/;"	f
lookup	base/stacktraces.jl	/^lookup(s::Tuple{StackFrame,Int}) = StackFrame[s[1]]$/;"	f
lookup	src/subtype.c	/^static jl_varbinding_t *lookup(jl_stenv_t *e, jl_tvar_t *v) JL_GLOBALLY_ROOTED JL_NOTSAFEPOINT$/;"	f	typeref:typename:jl_varbinding_t *	file:
lookup	src/utils.scm	/^(define (lookup elt alst default)$/;"	f
lookupLinfo	src/debuginfo.cpp	/^    jl_method_instance_t *lookupLinfo(size_t pointer)$/;"	f	class:JuliaJITEventListener	typeref:typename:jl_method_instance_t *	file:
lookupLocalPC	src/disasm.cpp	/^const char *SymbolTable::lookupLocalPC(size_t addr) {$/;"	f	class:__anon2853c92e0211::SymbolTable	typeref:typename:const char *
lookupSymbol	src/disasm.cpp	/^MCSymbol *SymbolTable::lookupSymbol(uint64_t addr)$/;"	f	class:__anon2853c92e0211::SymbolTable	typeref:typename:MCSymbol *
lookupSymbolName	src/disasm.cpp	/^const char *SymbolTable::lookupSymbolName(uint64_t addr)$/;"	f	class:__anon2853c92e0211::SymbolTable	typeref:typename:const char *
lookupWriteAddressFor	src/cgmemmgr.cpp	/^    void *lookupWriteAddressFor(void *rt_addr)$/;"	f	class:__anon06c686bc0111::RTDyldMemoryManagerJL	typeref:typename:void *	file:
lookupWriteAddressFor	src/cgmemmgr.cpp	/^    void *lookupWriteAddressFor(void *rt_addr, Alloc &&allocator)$/;"	f	class:__anon06c686bc0111::RTDyldMemoryManagerJL	typeref:typename:void *	file:
lookupWriteAddressFor	src/cgmemmgr.cpp	/^void *lookupWriteAddressFor(RTDyldMemoryManager *memmgr, void *rt_addr)$/;"	f	typeref:typename:void *
lookup_branch	stdlib/LibGit2/src/reference.jl	/^function lookup_branch(repo::GitRepo,$/;"	f
lookup_doc	stdlib/REPL/src/docview.jl	/^function lookup_doc(ex)$/;"	f
lookup_object_number	stdlib/Distributed/src/clusterserialize.jl	/^function lookup_object_number(s::ClusterSerializer, n::UInt64)$/;"	f
lookup_object_number	stdlib/Serialization/src/Serialization.jl	/^function lookup_object_number(s::Serializer, n::UInt64)$/;"	f
lookup_object_number	stdlib/Serialization/src/Serialization.jl	/^lookup_object_number(s::AbstractSerializer, n::UInt64) = nothing$/;"	f
lookup_pointer	src/debuginfo.cpp	/^static int lookup_pointer(DIContext *context, jl_frame_t **frames,$/;"	f	typeref:typename:int	file:
lookup_ref	stdlib/Distributed/src/remotecall.jl	/^function lookup_ref(pg, rrid, f)$/;"	f
lookup_ref	stdlib/Distributed/src/remotecall.jl	/^lookup_ref(rrid::RRID, f=def_rv_channel) = lookup_ref(PGRP, rrid, f)$/;"	f
lookup_remote	stdlib/LibGit2/src/remote.jl	/^function lookup_remote(repo::GitRepo, remote_name::AbstractString)$/;"	f
lookup_type	src/jltypes.c	/^static jl_value_t *lookup_type(jl_typename_t *tn, jl_value_t **key, size_t n)$/;"	f	typeref:typename:jl_value_t *	file:
lookup_type_idx	src/jltypes.c	/^static ssize_t lookup_type_idx(jl_typename_t *tn, jl_value_t **key, size_t n, int ordered)$/;"	f	typeref:typename:ssize_t	file:
lookup_type_stack	src/jltypes.c	/^static jl_value_t *lookup_type_stack(jl_typestack_t *stack, jl_datatype_t *tt, size_t ntp,$/;"	f	typeref:typename:jl_value_t *	file:
loop	src/julia.h	/^    uv_loop_t *loop;$/;"	m	struct:__anon055fe4271708	typeref:typename:uv_loop_t *
loop_range_values	test/ranges.jl	/^function loop_range_values(::Type{T}) where T$/;"	f
loop_unroll	test/llvmpasses/loopinfo.jl	/^@eval function loop_unroll(N)$/;"	f
loop_unroll2	test/llvmpasses/loopinfo.jl	/^@eval function loop_unroll2(J, I)$/;"	f
loopinfo_sym	src/ast.c	/^jl_sym_t *pure_sym; jl_sym_t *loopinfo_sym;$/;"	v	typeref:typename:jl_sym_t *
lorem	stdlib/SHA/test/runtests.jl	/^lorem = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incidid/;"	v
lostval	src/gc-debug.c	/^jl_value_t *lostval = NULL;$/;"	v	typeref:typename:jl_value_t *
lostval_parents	src/gc-debug.c	/^static arraylist_t lostval_parents;$/;"	v	typeref:typename:arraylist_t	file:
lostval_parents_done	src/gc-debug.c	/^static arraylist_t lostval_parents_done;$/;"	v	typeref:typename:arraylist_t	file:
low	base/grisu/fastfixed.jl	/^low(x) = UInt64(x&0xffffffffffffffff)$/;"	f
lower	base/meta.jl	/^lower(m::Module, @nospecialize(x)) = ccall(:jl_expand, Any, (Any, Any), x, m)$/;"	f
lower	base/meta.jl	/^macro lower(code)$/;"	f
lower	base/meta.jl	/^macro lower(mod, code)$/;"	f
lower-ccall	src/julia-syntax.scm	/^(define (lower-ccall name RT atypes args cconv)$/;"	f
lower-comprehension	src/julia-syntax.scm	/^(define (lower-comprehension ty expr itrs)$/;"	f
lower-destructuring-args	src/julia-syntax.scm	/^(define (lower-destructuring-args argl)$/;"	f
lower-kw-call	src/julia-syntax.scm	/^(define (lower-kw-call f args)$/;"	f
lower-kw-call-	src/julia-syntax.scm	/^(define (lower-kw-call- fexpr kw pa)$/;"	f
lower-named-tuple	src/julia-syntax.scm	/^(define (lower-named-tuple lst$/;"	f
lower-tuple-assignment	src/julia-syntax.scm	/^(define (lower-tuple-assignment lhss x)$/;"	f
lower-update-op	src/julia-syntax.scm	/^(define (lower-update-op e)$/;"	f
lowerGCAllocBytes	src/llvm-final-gc-lowering.cpp	/^Value *FinalLowerGC::lowerGCAllocBytes(CallInst *target, Function &F)$/;"	f	class:FinalLowerGC	typeref:typename:Value *
lowerGetGCFrameSlot	src/llvm-final-gc-lowering.cpp	/^Value *FinalLowerGC::lowerGetGCFrameSlot(CallInst *target, Function &F)$/;"	f	class:FinalLowerGC	typeref:typename:Value *
lowerNewGCFrame	src/llvm-final-gc-lowering.cpp	/^Value *FinalLowerGC::lowerNewGCFrame(CallInst *target, Function &F)$/;"	f	class:FinalLowerGC	typeref:typename:Value *
lowerPopGCFrame	src/llvm-final-gc-lowering.cpp	/^void FinalLowerGC::lowerPopGCFrame(CallInst *target, Function &F)$/;"	f	class:FinalLowerGC	typeref:typename:void
lowerPushGCFrame	src/llvm-final-gc-lowering.cpp	/^void FinalLowerGC::lowerPushGCFrame(CallInst *target, Function &F)$/;"	f	class:FinalLowerGC	typeref:typename:void
lowerQueueGCRoot	src/llvm-final-gc-lowering.cpp	/^Value *FinalLowerGC::lowerQueueGCRoot(CallInst *target, Function &F)$/;"	f	class:FinalLowerGC	typeref:typename:Value *
lowerbound	base/version.jl	/^lowerbound(v::VersionNumber) = VersionNumber(v.major, v.minor, v.patch, ("",), ())$/;"	f
lowerbound_dependent_world_set	src/dump.c	/^static size_t lowerbound_dependent_world_set(size_t world, arraylist_t *dependent_worlds) JL_NOT/;"	f	typeref:typename:size_t	file:
lowerboundaryiscloser	base/grisu/float.jl	/^function lowerboundaryiscloser(f::T) where T<:AbstractFloat$/;"	f
lowercase	base/strings/unicode.jl	/^lowercase(c::T) where {T<:AbstractChar} = isascii(c) ? ('A' <= c <= 'Z' ? c + 0x20 : c) :$/;"	f
lowercase	base/strings/unicode.jl	/^lowercase(s::AbstractString) = map(lowercase, s)$/;"	f
lowercasefirst	base/strings/unicode.jl	/^function lowercasefirst(s::AbstractString)$/;"	f
lowrank_reorder	stdlib/SuiteSparse/src/cholmod.jl	/^lowrank_reorder(V::AbstractArray,p) = Sparse(sparse(V[p,:]))$/;"	f
lowrank_reorder	stdlib/SuiteSparse/src/cholmod.jl	/^lowrank_reorder(V::AbstractSparseArray,p) = Sparse(V[p,:])$/;"	f
lowrankdowndate	stdlib/LinearAlgebra/src/cholesky.jl	/^lowrankdowndate(C::Cholesky, v::StridedVector) = lowrankdowndate!(copy(C), copy(v))$/;"	f
lowrankdowndate	stdlib/SuiteSparse/src/cholmod.jl	/^lowrankdowndate(F::Factor{Tv}, V::AbstractArray{Tv}) where {Tv<:VTypes} =$/;"	f
lowrankdowndate!	stdlib/LinearAlgebra/src/cholesky.jl	/^function lowrankdowndate!(C::Cholesky, v::StridedVector)$/;"	f
lowrankdowndate!	stdlib/SuiteSparse/src/cholmod.jl	/^function lowrankdowndate!(F::Factor{Tv}, V::AbstractArray{Tv}) where Tv<:VTypes$/;"	f
lowrankupdate	stdlib/LinearAlgebra/src/cholesky.jl	/^lowrankupdate(C::Cholesky, v::StridedVector) = lowrankupdate!(copy(C), copy(v))$/;"	f
lowrankupdate	stdlib/SuiteSparse/src/cholmod.jl	/^lowrankupdate(F::Factor{Tv}, V::AbstractArray{Tv}) where {Tv<:VTypes} =$/;"	f
lowrankupdate!	stdlib/LinearAlgebra/src/cholesky.jl	/^function lowrankupdate!(C::Cholesky, v::StridedVector)$/;"	f
lowrankupdate!	stdlib/SuiteSparse/src/cholmod.jl	/^function lowrankupdate!(F::Factor{Tv}, V::AbstractArray{Tv}) where Tv<:VTypes$/;"	f
lowrankupdowndate!	stdlib/SuiteSparse/src/cholmod.jl	/^function lowrankupdowndate!(F::Factor{Tv}, C::Sparse{Tv}, update::Cint) where Tv<:VTypes$/;"	f
lpad	base/strings/util.jl	/^function lpad($/;"	f
lpad	base/strings/util.jl	/^lpad(s, n::Integer, p::Union{AbstractChar,AbstractString}=' ') = lpad(string(s), n, string(p))$/;"	f
lpad0	stdlib/LibGit2/src/signature.jl	/^lpad0(x) = lpad(x, 2, '0')$/;"	f
lq	stdlib/LinearAlgebra/src/lq.jl	/^lq(A::StridedMatrix{<:BlasFloat})  = lq!(copy(A))$/;"	f
lq	stdlib/LinearAlgebra/src/lq.jl	/^lq(x::Number) = lq(fill(x,1,1))$/;"	f
lq!	stdlib/LinearAlgebra/src/lq.jl	/^lq!(A::StridedMatrix{<:BlasFloat}) = LQ(LAPACK.gelqf!(A)...)$/;"	f
lreplace	base/cartesian.jl	/^lreplace(ex, sym::Symbol, val) = lreplace!(copy(ex), LReplace(sym, val))$/;"	f
lreplace!	base/cartesian.jl	/^function lreplace!(ex::Expr, r::LReplace)$/;"	f
lreplace!	base/cartesian.jl	/^function lreplace!(str::AbstractString, r::LReplace)$/;"	f
lreplace!	base/cartesian.jl	/^function lreplace!(sym::Symbol, r::LReplace)$/;"	f
lreplace!	base/cartesian.jl	/^lreplace!(arg, r::LReplace) = arg$/;"	f
lrot	stdlib/SHA/src/base_functions.jl	/^lrot(b,x,width) = ((x << b) | (x >> (width - b)))$/;"	f
lrt	src/ccall.cpp	/^    Type *lrt; \/\/ input parameter of the llvm return type (from julia_struct_to_llvm)$/;"	m	class:function_sig_t	typeref:typename:Type *	file:
lscmd	test/spawn.jl	/^lscmd = `ls`$/;"	v
lshr_op	src/runtime_intrinsics.c	/^#define lshr_op(/;"	d	file:
lstat	base/stat.jl	/^lstat(path...) = lstat(joinpath(path...))$/;"	f
lstat	base/stat.jl	/^lstat(path::AbstractString) = @stat_call jl_lstat Cstring path$/;"	f
lstrip	base/strings/util.jl	/^function lstrip(f, s::AbstractString)$/;"	f
lstrip	base/strings/util.jl	/^lstrip(s::AbstractString) = lstrip(isspace, s)$/;"	f
lstrip	base/strings/util.jl	/^lstrip(s::AbstractString, chars::Chars) = lstrip(in(chars), s)$/;"	f
lt	base/ordering.jl	/^@propagate_inbounds function lt(p::Perm, a::Integer, b::Integer)$/;"	f
lt	base/ordering.jl	/^lt(o::By,                    a, b) = isless(o.by(a),o.by(b))$/;"	f
lt	base/ordering.jl	/^lt(o::ForwardOrdering,       a, b) = isless(a,b)$/;"	f
lt	base/ordering.jl	/^lt(o::Lt,                    a, b) = o.lt(a,b)$/;"	f
lt	base/ordering.jl	/^lt(o::ReverseOrdering,       a, b) = lt(o.fwd,b,a)$/;"	f
lt	base/sort.jl	/^lt(::Left, x::T, y::T) where {T<:Floats} = slt_int(y, x)$/;"	f
lt	base/sort.jl	/^lt(::Right, x::T, y::T) where {T<:Floats} = slt_int(x, y)$/;"	f
lt	src/runtime_intrinsics.c	/^#define lt(/;"	d	file:
lt	stdlib/Profile/src/Profile.jl	/^    function lt(a::StackFrame, b::StackFrame)$/;"	f
lt_fast	base/fastmath.jl	/^lt_fast(x::T, y::T) where {T<:FloatTypes} = lt_float_fast(x, y)$/;"	f
lt_ptr	test/gcext/gcext.c	/^static inline int lt_ptr(void *a, void *b)$/;"	f	typeref:typename:int	file:
ltm52	stdlib/Random/src/misc.jl	/^ltm52(n::Int, mask::Int=nextpow(2, n)-1) = LessThan(n-1, Masked(mask, UInt52Raw(Int)))$/;"	f
ltoh	base/io.jl	/^        ltoh(x) = bswap(x)$/;"	f
ltoh	base/io.jl	/^        ltoh(x) = x$/;"	f
ltruncto	stdlib/Profile/src/Profile.jl	/^function ltruncto(str::String, w::Int)$/;"	f
lu	stdlib/LinearAlgebra/src/lu.jl	/^function lu(A::AbstractMatrix{T}, pivot::Union{Val{false}, Val{true}}=Val(true);$/;"	f
lu	stdlib/LinearAlgebra/src/lu.jl	/^function lu(x::Number; check::Bool=true)$/;"	f
lu	stdlib/LinearAlgebra/src/lu.jl	/^lu(S::LU) = S$/;"	f
lu	stdlib/SuiteSparse/src/umfpack.jl	/^function lu(S::SparseMatrixCSC{<:UMFVTypes,<:UMFITypes}; check::Bool = true)$/;"	f
lu	stdlib/SuiteSparse/src/umfpack.jl	/^lu(A::SparseMatrixCSC; check::Bool = true) = lu(float(A); check = check)$/;"	f
lu!	stdlib/LinearAlgebra/src/lu.jl	/^function lu!(A::HermOrSym, pivot::Union{Val{false}, Val{true}} = Val(true); check::Bool = true)$/;"	f
lu!	stdlib/LinearAlgebra/src/lu.jl	/^function lu!(A::StridedMatrix{T}, pivot::Union{Val{false}, Val{true}} = Val(true);$/;"	f
lu!	stdlib/LinearAlgebra/src/lu.jl	/^function lu!(A::Tridiagonal{T,V}, pivot::Union{Val{false}, Val{true}} = Val(true);$/;"	f
lu!	stdlib/LinearAlgebra/src/lu.jl	/^lu!(A::StridedMatrix, pivot::Union{Val{false}, Val{true}} = Val(true); check::Bool = true) =$/;"	f
lutype	stdlib/LinearAlgebra/src/lu.jl	/^function lutype(T::Type)$/;"	f
lx	src/subtype.c	/^    size_t lx, ly;$/;"	m	struct:subtype_tuple_env	typeref:typename:size_t	file:
ly	src/subtype.c	/^    size_t lx, ly;$/;"	m	struct:subtype_tuple_env	typeref:typename:size_t	file:
lyap	stdlib/LinearAlgebra/src/dense.jl	/^function lyap(A::StridedMatrix{T}, C::StridedMatrix{T}) where {T<:BlasFloat}$/;"	f
lyap	stdlib/LinearAlgebra/src/dense.jl	/^lyap(A::StridedMatrix{T}, C::StridedMatrix{T}) where {T<:Integer} = lyap(float(A), float(C))$/;"	f
lyap	stdlib/LinearAlgebra/src/dense.jl	/^lyap(a::T, c::T) where {T<:Number} = -c\/(2a)$/;"	f
m	base/expr.jl	/^           macro m()$/;"	f
m	contrib/normalize_triplet.py	/^m = mondo_regex.match(sys.argv[1])$/;"	v
m	doc/NEWS-update.jl	/^m = match(r"\\[#[0-9]+\\]:", s)$/;"	v
m	src/ast.c	/^    jl_module_t *m;$/;"	m	struct:macroctx_stack	typeref:typename:jl_module_t *	file:
m	src/ccall.cpp	/^    Module *m;$/;"	m	struct:LazyModule	typeref:typename:Module *	file:
m	src/ccalltest.c	/^    int64_t m;$/;"	m	struct:__anon84ad8c4c2c08	typeref:typename:int64_t	file:
m	src/interpreter.c	/^    jl_module_t *m;$/;"	m	struct:interpret_toplevel_expr_in_args	typeref:typename:jl_module_t *	file:
m	src/interpreter.c	/^    jl_module_t *m;$/;"	m	struct:jl_interpret_toplevel_thunk_args	typeref:typename:jl_module_t *	file:
m	src/module.c	/^    jl_module_t *m;$/;"	m	struct:_modstack_t	typeref:typename:jl_module_t *	file:
m	stdlib/Dates/test/periods.jl	/^m = Dates.Month(1)$/;"	v
m	stdlib/Dates/test/types.jl	/^m = Dates.Month(1)$/;"	v
m	stdlib/Mmap/src/Mmap.jl	/^m = read(s, Int)$/;"	v
m	stdlib/Mmap/test/runtests.jl	/^m = Mmap.Anonymous()$/;"	v
m	stdlib/Mmap/test/runtests.jl	/^m = Mmap.mmap(Matrix{Int8}, (12,12))$/;"	v
m	stdlib/Mmap/test/runtests.jl	/^m = Mmap.mmap(Vector{Float64}, 12)$/;"	v
m	stdlib/Mmap/test/runtests.jl	/^m = Mmap.mmap(Vector{Int}, 12)$/;"	v
m	stdlib/Mmap/test/runtests.jl	/^m = Mmap.mmap(Vector{UInt8}, 12)$/;"	v
m	stdlib/Mmap/test/runtests.jl	/^m = Mmap.mmap(Vector{UInt8}, 12; shared=false)$/;"	v
m	stdlib/Mmap/test/runtests.jl	/^m = Mmap.mmap(file)$/;"	v
m	stdlib/Mmap/test/runtests.jl	/^m = Mmap.mmap(file, Array{UInt8,3}, (1,2,1))$/;"	v
m	stdlib/Mmap/test/runtests.jl	/^m = Mmap.mmap(file, BitArray, (72,))$/;"	v
m	stdlib/Mmap/test/runtests.jl	/^m = Mmap.mmap(file, BitArray, 72) # len integer instead of dims$/;"	v
m	stdlib/Mmap/test/runtests.jl	/^m = Mmap.mmap(file,Vector{UInt8},2,6)$/;"	v
m	stdlib/Mmap/test/runtests.jl	/^m = Mmap.mmap(file,Vector{UInt8},6)$/;"	v
m	stdlib/Mmap/test/runtests.jl	/^m = Mmap.mmap(s)$/;"	v
m	stdlib/Mmap/test/runtests.jl	/^m = Mmap.mmap(s, BitArray, (72,))$/;"	v
m	stdlib/Mmap/test/runtests.jl	/^m = Mmap.mmap(s, BitArray, 72) # len integer instead of dims$/;"	v
m	stdlib/Mmap/test/runtests.jl	/^m = Mmap.mmap(s, Vector{UInt8}, 1, sz)$/;"	v
m	stdlib/Mmap/test/runtests.jl	/^m = Mmap.mmap(s, Vector{UInt8}, 1, sz+1)$/;"	v
m	stdlib/Mmap/test/runtests.jl	/^m = Mmap.mmap(s, Vector{UInt8}, sz+1)$/;"	v
m	stdlib/Mmap/test/runtests.jl	/^m = Mmap.mmap(s,Vector{UInt8},12)$/;"	v
m	stdlib/Mmap/test/runtests.jl	/^m = read(s, Int)$/;"	v
m	stdlib/Mmap/test/runtests.jl	/^m=nothing; c=nothing; d=nothing; GC.gc()$/;"	v
m	test/broadcast.jl	/^m = [1:2;]'$/;"	v
m	test/core.jl	/^macro m()$/;"	f
m	test/docs.jl	/^    macro m() end$/;"	f
m	test/docs.jl	/^macro m() end$/;"	f
m	test/reflection.jl	/^m = collect(methods(fookw))[2]$/;"	v
m	test/reflection.jl	/^m = first(methods(bar1, Tuple{Int}))$/;"	v
m	test/reflection.jl	/^m = first(methods(bar2, Tuple{Int}))$/;"	v
m	test/reflection.jl	/^m = first(methods(bar3, Tuple{Int}))$/;"	v
m	test/reflection.jl	/^m = first(methods(bar4, Tuple{Int}))$/;"	v
m	test/reflection.jl	/^m = first(methods(convert, Tuple{Type{EmptyType}, Integer}))$/;"	v
m	test/reflection.jl	/^m = first(methods(foomany, Tuple{Int32, String, Float64}))$/;"	v
m	test/reflection.jl	/^m = first(methods(parametric))$/;"	v
m	test/reflection.jl	/^m = which(uambig, Tuple{Int})$/;"	v
m	test/syntax.jl	/^macro m()$/;"	f
m1	base/expr.jl	/^           macro m1()$/;"	f
m1	test/core.jl	/^    m1(i) = (tst+=1;i-1)$/;"	f
m1	test/syntax.jl	/^macro m1()$/;"	f
m14893	test/core.jl	/^macro m14893()$/;"	f
m1_11993	test/docs.jl	/^macro m1_11993()$/;"	f
m1_exprs	test/syntax.jl	/^m1_exprs = get_expr_list(Meta.lower(@__MODULE__, quote @m1 end))$/;"	v
m2	base/expr.jl	/^           macro m2()$/;"	f
m20524	test/core.jl	/^macro m20524(ex)$/;"	f
m20729	test/syntax.jl	/^macro m20729()$/;"	f
m21586	test/syntax.jl	/^macro m21586(x)$/;"	f
m22098	test/core.jl	/^macro m22098 end$/;"	f
m22929_1	test/core.jl	/^m22929_1 = MyStruct22929()$/;"	v
m22929_2	test/core.jl	/^m22929_2 = MyStruct22929()$/;"	v
m22929_2.x	test/core.jl	/^m22929_2.x = m22929_1$/;"	v
m24289	test/syntax.jl	/^macro m24289()$/;"	f
m28833	test/syntax.jl	/^macro m28833(expr)$/;"	f
m2_11993	test/docs.jl	/^macro m2_11993()$/;"	f
m3	test/syntax.jl	/^macro m3()$/;"	f
m6031	test/core.jl	/^macro m6031(x); x; end$/;"	f
m8846	test/core.jl	/^macro m8846(a, b=0)$/;"	f
m_error	test/errorshow.jl	/^m_error = try TestKWError.method_c6_in_module(1, x=1) catch e; e; end$/;"	v
m_error	test/errorshow.jl	/^m_error = try TestKWError.method_c6_in_module(y=1) catch e; e; end$/;"	v
m_error	test/errorshow.jl	/^m_error = try method_c6(1, x=1) catch e; e; end$/;"	v
m_error	test/errorshow.jl	/^m_error = try method_c6(y=1) catch e; e; end$/;"	v
m_info	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word m_info;		\/* Size and index.  *\/$/;"	m	struct:__anonff7a58692108	typeref:typename:Elf32_Word
m_info	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Xword m_info;		\/* Size and index.  *\/$/;"	m	struct:__anonff7a58692208	typeref:typename:Elf64_Xword
m_poffset	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word m_poffset;		\/* Symbol offset.  *\/$/;"	m	struct:__anonff7a58692108	typeref:typename:Elf32_Word
m_poffset	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Xword m_poffset;	\/* Symbol offset.  *\/$/;"	m	struct:__anonff7a58692208	typeref:typename:Elf64_Xword
m_repeat	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Half m_repeat;		\/* Repeat count.  *\/$/;"	m	struct:__anonff7a58692108	typeref:typename:Elf32_Half
m_repeat	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Half m_repeat;		\/* Repeat count.  *\/$/;"	m	struct:__anonff7a58692208	typeref:typename:Elf64_Half
m_stride	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Half m_stride;		\/* Stride info.  *\/$/;"	m	struct:__anonff7a58692108	typeref:typename:Elf32_Half
m_stride	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Half m_stride;		\/* Stride info.  *\/$/;"	m	struct:__anonff7a58692208	typeref:typename:Elf64_Half
m_value	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Xword m_value;		\/* Symbol value.  *\/$/;"	m	struct:__anonff7a58692108	typeref:typename:Elf32_Xword
m_value	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Xword m_value;		\/* Symbol value.  *\/$/;"	m	struct:__anonff7a58692208	typeref:typename:Elf64_Xword
mac	test/core.jl	/^macro mac()$/;"	f
mac	test/docs.jl	/^macro mac() end$/;"	f
mac	test/docs.jl	/^macro mac(x) end$/;"	f
mac	test/docs.jl	/^macro mac(x::Int, y::Expr, z = 0) end$/;"	f
macOS	doc/build/distributing.md	/^### macOS$/;"	S
macOS	doc/build/macos.md	/^## macOS$/;"	s
mach_profile_listener	src/signals-mach.c	/^void *mach_profile_listener(void *arg)$/;"	f	typeref:typename:void *
mach_profiler_thread	src/signals-mach.c	/^volatile mach_port_t mach_profiler_thread = 0;$/;"	v	typeref:typename:volatile mach_port_t
mach_segv_listener	src/signals-mach.c	/^void *mach_segv_listener(void *arg)$/;"	f	typeref:typename:void *
machine_file	src/julia.h	/^    const char *machine_file;$/;"	m	struct:__anon055fe4271808	typeref:typename:const char *
macro_caller_lineno	test/loading.jl	/^macro macro_caller_lineno()$/;"	f
macro_doctest	test/docs.jl	/^macro macro_doctest() end$/;"	f
macrocall	test/testhelpers/MacroCalls.jl	/^macro macrocall(ex)$/;"	f
macrocall-to-atsym	src/julia-parser.scm	/^(define (macrocall-to-atsym e)$/;"	f
macrocall_sym	src/ast.c	/^jl_sym_t *nospecialize_sym; jl_sym_t *macrocall_sym;$/;"	v	typeref:typename:jl_sym_t *
macroctx_stack	src/ast.c	/^struct macroctx_stack {$/;"	s	file:
macroexpand	base/expr.jl	/^function macroexpand(m::Module, @nospecialize(x); recursive=true)$/;"	f
macroexpand	base/expr.jl	/^macro macroexpand(code)$/;"	f
macroexpand1	base/expr.jl	/^macro macroexpand1(code)$/;"	f
macroify-call	src/julia-parser.scm	/^(define (macroify-call s call startloc)$/;"	f
macroify-name	src/julia-parser.scm	/^(define (macroify-name e . suffixes)$/;"	f
macroname	base/docs/Docs.jl	/^macroname(s::Symbol) = Symbol('@', s)$/;"	f
macroname	base/docs/Docs.jl	/^macroname(x::Expr)   = Expr(x.head, x.args[1], macroname(x.args[end].value))$/;"	f
macrotest	stdlib/InteractiveUtils/test/runtests.jl	/^macro macrotest(x::Int, y::Int)$/;"	f
macrotest	stdlib/InteractiveUtils/test/runtests.jl	/^macro macrotest(x::Int, y::Symbol) end$/;"	f
macsuffix	src/julia-parser.scm	/^(define (macsuffix t)$/;"	f
mafreelist	src/julia_threads.h	/^    struct _mallocarray_t *mafreelist;$/;"	m	struct:__anonf8aecdb10608	typeref:struct:_mallocarray_t *
main	contrib/julia-config.jl	/^function main()$/;"	f
main	contrib/mac/frameworkapp/ExecSandbox/main.m	/^int main(int argc, const char *argv[]) {$/;"	f
main	contrib/mac/frameworkapp/JuliaLauncher/main.m	/^int main(int argc, const char *argv[]) {$/;"	f
main	contrib/stringreplace.c	/^int main( int argc, char ** argv ) {$/;"	f	typeref:typename:int
main	deps/srccache/patchelf-0.9/src/patchelf.cc	/^int main(int argc, char * * argv)$/;"	f	typeref:typename:int
main	deps/srccache/patchelf-0.9/tests/main.c	/^int main(int argc, char * * argv)$/;"	f	typeref:typename:int
main	deps/srccache/patchelf-0.9/tests/no-rpath.c	/^int main() {$/;"	f	typeref:typename:int
main	deps/srccache/patchelf-0.9/tests/simple.c	/^int main(int argc, char * * argv)$/;"	f	typeref:typename:int
main	src/crc32c.c	/^int main(void)$/;"	f	typeref:typename:int
main	src/flisp/flmain.c	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	test/embedding/embedding.c	/^int main()$/;"	f	typeref:typename:int
main	test/gcext/gcext.c	/^int main()$/;"	f	typeref:typename:int
main$(EXEEXT)	deps/srccache/patchelf-0.9/tests/Makefile.in	/^main$(EXEEXT): $(main_OBJECTS) $(main_DEPENDENCIES) $(EXTRA_main_DEPENDENCIES) $/;"	t
main-scoped$(EXEEXT)	deps/srccache/patchelf-0.9/tests/Makefile.in	/^main-scoped$(EXEEXT): $(main_scoped_OBJECTS) $(main_scoped_DEPENDENCIES) $(EXTRA_main_scoped_DEP/;"	t
main_DEPENDENCIES	deps/srccache/patchelf-0.9/tests/Makefile.am	/^main_DEPENDENCIES = libfoo.so$/;"	m
main_DEPENDENCIES	deps/srccache/patchelf-0.9/tests/Makefile.in	/^main_DEPENDENCIES = libfoo.so$/;"	m
main_LDADD	deps/srccache/patchelf-0.9/tests/Makefile.am	/^main_LDADD = -lfoo $(AM_LDADD)$/;"	m
main_LDADD	deps/srccache/patchelf-0.9/tests/Makefile.in	/^main_LDADD = -lfoo $(AM_LDADD)$/;"	m
main_LDFLAGS	deps/srccache/patchelf-0.9/tests/Makefile.am	/^main_LDFLAGS = $(LDFLAGS_local)$/;"	m
main_LDFLAGS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^main_LDFLAGS = $(LDFLAGS_local)$/;"	m
main_LINK	deps/srccache/patchelf-0.9/tests/Makefile.in	/^main_LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(main_LDFLAGS) $(LDFLAGS) \\$/;"	m
main_OBJECTS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^main_OBJECTS = $(am_main_OBJECTS)$/;"	m
main_SOURCES	deps/srccache/patchelf-0.9/tests/Makefile.am	/^main_SOURCES = main.c$/;"	m
main_SOURCES	deps/srccache/patchelf-0.9/tests/Makefile.in	/^main_SOURCES = main.c$/;"	m
main_ex	stdlib/Serialization/test/runtests.jl	/^main_ex = quote$/;"	v
main_scoped_DEPENDENCIES	deps/srccache/patchelf-0.9/tests/Makefile.am	/^main_scoped_DEPENDENCIES = libfoo-scoped.so$/;"	m
main_scoped_DEPENDENCIES	deps/srccache/patchelf-0.9/tests/Makefile.in	/^main_scoped_DEPENDENCIES = libfoo-scoped.so$/;"	m
main_scoped_LDADD	deps/srccache/patchelf-0.9/tests/Makefile.am	/^main_scoped_LDADD = -lfoo-scoped $(AM_LDADD)$/;"	m
main_scoped_LDADD	deps/srccache/patchelf-0.9/tests/Makefile.in	/^main_scoped_LDADD = -lfoo-scoped $(AM_LDADD)$/;"	m
main_scoped_LDFLAGS	deps/srccache/patchelf-0.9/tests/Makefile.am	/^main_scoped_LDFLAGS = $(LDFLAGS_local)$/;"	m
main_scoped_LDFLAGS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^main_scoped_LDFLAGS = $(LDFLAGS_local)$/;"	m
main_scoped_LINK	deps/srccache/patchelf-0.9/tests/Makefile.in	/^main_scoped_LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) \\$/;"	m
main_scoped_OBJECTS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^main_scoped_OBJECTS = $(am_main_scoped_OBJECTS)$/;"	m
main_scoped_SOURCES	deps/srccache/patchelf-0.9/tests/Makefile.am	/^main_scoped_SOURCES = main.c$/;"	m
main_scoped_SOURCES	deps/srccache/patchelf-0.9/tests/Makefile.in	/^main_scoped_SOURCES = main.c$/;"	m
main_var14726	test/threads_exec.jl	/^main_var14726 = 1$/;"	v
mainres	test/copy.jl	/^mainres = ([4, 5, 3],$/;"	v
maintainer-clean	deps/srccache/patchelf-0.9/Makefile.in	/^maintainer-clean: maintainer-clean-recursive$/;"	t
maintainer-clean	deps/srccache/patchelf-0.9/src/Makefile.in	/^maintainer-clean: maintainer-clean-am$/;"	t
maintainer-clean	deps/srccache/patchelf-0.9/tests/Makefile.in	/^maintainer-clean: maintainer-clean-am$/;"	t
maintainer-clean-am	deps/srccache/patchelf-0.9/Makefile.in	/^maintainer-clean-am: distclean-am maintainer-clean-generic$/;"	t
maintainer-clean-am	deps/srccache/patchelf-0.9/src/Makefile.in	/^maintainer-clean-am: distclean-am maintainer-clean-generic$/;"	t
maintainer-clean-am	deps/srccache/patchelf-0.9/tests/Makefile.in	/^maintainer-clean-am: distclean-am maintainer-clean-generic$/;"	t
maintainer-clean-generic	deps/srccache/patchelf-0.9/Makefile.in	/^maintainer-clean-generic:$/;"	t
maintainer-clean-generic	deps/srccache/patchelf-0.9/src/Makefile.in	/^maintainer-clean-generic:$/;"	t
maintainer-clean-generic	deps/srccache/patchelf-0.9/tests/Makefile.in	/^maintainer-clean-generic:$/;"	t
make	test/gcext/LocalTest.jl	/^function make()$/;"	f
make-assignment	src/ast.scm	/^(define (make-assignment l r) `(= ,l ,r))$/;"	f
make-decl	src/ast.scm	/^(define (make-decl n t) `(|::| ,n ,t))$/;"	f
make-generator-function	src/julia-syntax.scm	/^(define (make-generator-function name sp-names arg-names body)$/;"	f
make-scope	src/julia-syntax.scm	/^(define (make-scope (lam #f) (args '()) (locals '()) (globals '()) (sp '()) (renames '()) (prev /;"	f
make-ssavalue	src/ast.scm	/^(define make-ssavalue$/;"	f
make-table	src/flisp/aliases.scm	/^(define make-table table)$/;"	f
make-token-stream	src/julia-parser.scm	/^(define (make-token-stream s) (vector #f s #t #f #f))$/;"	f
make-var-info	src/ast.scm	/^(define (make-var-info name) (list name '(core Any) 0))$/;"	f
makeAddress	src/debuginfo.h	/^static object::SectionedAddress makeAddress(uint64_t address)$/;"	f	typeref:typename:object::SectionedAddress
makeAddress	src/debuginfo.h	/^static uint64_t makeAddress(uint64_t address)$/;"	f	typeref:typename:uint64_t
make_MaybeUndef	base/compiler/ssair/passes.jl	/^make_MaybeUndef(@nospecialize(typ)) = isa(typ, MaybeUndef) ? typ : MaybeUndef(typ)$/;"	f
make_bb	test/compiler/ssair.jl	/^make_bb(preds, succs) = BasicBlock(Compiler.StmtRange(0, 0), preds, succs)$/;"	f
make_closure	test/core.jl	/^macro make_closure()$/;"	f
make_dummy_depfile	deps/srccache/patchelf-0.9/build-aux/depcomp	/^make_dummy_depfile ()$/;"	f
make_entry_point	test/loading.jl	/^function make_entry_point(path::String, name::String, uuid::UUID)$/;"	f
make_env	test/loading.jl	/^function make_env(flat, root, roots, graph, paths, dummies)$/;"	f
make_errmsg	src/ccall.cpp	/^static const std::string make_errmsg(const char *fname, int n, const char *err)$/;"	f	typeref:typename:const std::string	file:
make_error28224	test/core.jl	/^@noinline make_error28224(n) = n == 5 ? error() : true$/;"	f
make_error_msg	src/flisp/flisp.c	/^static value_t make_error_msg(fl_context_t *fl_ctx, const char *format, va_list args)$/;"	f	typeref:typename:value_t	file:
make_f21054	test/syntax.jl	/^macro make_f21054(T)$/;"	f
make_fastmath	base/fastmath.jl	/^function make_fastmath(expr::Expr)$/;"	f
make_fastmath	base/fastmath.jl	/^function make_fastmath(symb::Symbol)$/;"	f
make_fastmath	base/fastmath.jl	/^make_fastmath(expr) = expr$/;"	f
make_foo28445	test/core.jl	/^@noinline make_foo28445() = (foo28445(1), foo28445(rand(1:10)), foo28445(rand(1:10)))$/;"	f
make_headargs	base/broadcast.jl	/^@inline function make_headargs(::Tuple{})$/;"	f
make_headargs	base/broadcast.jl	/^@inline function make_headargs(t::Tuple)$/;"	f
make_makeargs	base/broadcast.jl	/^@inline function make_makeargs(makeargs_tail, t::Tuple)$/;"	f
make_makeargs	base/broadcast.jl	/^@inline make_makeargs(makeargs_tail, t::Tuple{}) = makeargs_tail$/;"	f
make_makeargs	base/broadcast.jl	/^function make_makeargs(makeargs_tail, t::Tuple{<:Broadcasted, Vararg{Any}})$/;"	f
make_pfor_body	stdlib/Distributed/src/macros.jl	/^function make_pfor_body(var, body)$/;"	f
make_preduce_body	stdlib/Distributed/src/macros.jl	/^function make_preduce_body(var, body)$/;"	f
make_seed	stdlib/Random/src/RNGs.jl	/^function make_seed()$/;"	f
make_seed	stdlib/Random/src/RNGs.jl	/^function make_seed(n::Integer)$/;"	f
make_ssa!	base/compiler/ssair/slot2ssa.jl	/^function make_ssa!(ci::CodeInfo, code::Vector{Any}, idx, slot, @nospecialize(typ))$/;"	f
make_t	test/core.jl	/^make_t(x::Int64) = Core.Intrinsics.bitcast(T5165{Nothing}, x)$/;"	f
make_tailargs	base/broadcast.jl	/^@inline function make_tailargs(::Tuple{})$/;"	f
make_tailargs	base/broadcast.jl	/^@inline function make_tailargs(t::Tuple)$/;"	f
make_tuple	test/compiler/codegen.jl	/^    @noinline make_tuple(x) = tuple(x)$/;"	f
make_unrooted_timer	test/channels.jl	/^@noinline function make_unrooted_timer(a)$/;"	f
make_value	test/vecelement.jl	/^make_value(::Type{T}, i::Integer) where {T<:Integer} = 3*i%T$/;"	f
make_value	test/vecelement.jl	/^make_value(::Type{T},i::Integer) where {T<:AbstractFloat} = T(3*i)$/;"	f
makecontext	src/task.c	/^#define makecontext /;"	d	file:
makefn	test/core.jl	/^macro makefn(f,g)$/;"	f
makenode2562	test/core.jl	/^makenode2562(value) = Node2562(value)$/;"	f
malloc	base/libc.jl	/^malloc(size::Integer) = ccall(:malloc, Ptr{Cvoid}, (Csize_t,), size)$/;"	f
malloc	src/gc.h	/^    uint64_t    malloc;$/;"	m	struct:__anoncf30557c0308	typeref:typename:uint64_t
malloc	src/julia_threads.h	/^    uint64_t    malloc;$/;"	m	struct:__anonf8aecdb10508	typeref:typename:uint64_t
mallocData	src/codegen.cpp	/^static logdata_t mallocData;$/;"	v	typeref:typename:logdata_t	file:
mallocVisitLine	src/codegen.cpp	/^static void mallocVisitLine(jl_codectx_t &ctx, StringRef filename, int line)$/;"	f	typeref:typename:void	file:
malloc_cache_align	src/gc.c	/^#define malloc_cache_align(/;"	d	file:
malloc_log	src/julia.h	/^    int8_t malloc_log;$/;"	m	struct:__anon055fe4271808	typeref:typename:int8_t
malloc_pressure	src/flisp/flisp.h	/^    size_t malloc_pressure;$/;"	m	struct:_fl_context_t	typeref:typename:size_t
malloc_stack	src/gc-stacks.c	/^static void *malloc_stack(size_t bufsz) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void *	file:
mallocarray_t	src/gc.h	/^} mallocarray_t;$/;"	t	typeref:struct:_mallocarray_t
mallocarrays	src/julia_threads.h	/^    struct _mallocarray_t *mallocarrays;$/;"	m	struct:__anonf8aecdb10608	typeref:struct:_mallocarray_t *
mallocd_array_freed	src/gc-debug.c	/^static int64_t mallocd_array_freed;$/;"	v	typeref:typename:int64_t	file:
mallocd_array_sweep_start	src/gc-debug.c	/^static int64_t mallocd_array_sweep_start;$/;"	v	typeref:typename:int64_t	file:
mallocd_array_total	src/gc-debug.c	/^static int64_t mallocd_array_total;$/;"	v	typeref:typename:int64_t	file:
man1_MANS	deps/srccache/patchelf-0.9/Makefile.am	/^man1_MANS = patchelf.1$/;"	m
man1_MANS	deps/srccache/patchelf-0.9/Makefile.in	/^man1_MANS = patchelf.1$/;"	m
man1dir	deps/srccache/patchelf-0.9/Makefile.in	/^man1dir = $(mandir)\/man1$/;"	m
manage	stdlib/Distributed/src/managers.jl	/^function manage(manager::LocalManager, id::Integer, config::WorkerConfig, op::Symbol)$/;"	f
manage	stdlib/Distributed/src/managers.jl	/^function manage(manager::SSHManager, id::Integer, config::WorkerConfig, op::Symbol)$/;"	f
manage	stdlib/Distributed/test/distributed_exec.jl	/^manage(::RetainStdioTester, ::Integer, ::WorkerConfig, ::Symbol) = nothing$/;"	f
manage	stdlib/Distributed/test/distributed_exec.jl	/^manage(::WorkerArgTester, ::Integer, ::WorkerConfig, ::Symbol) = nothing$/;"	f
manage	stdlib/Distributed/test/topology.jl	/^function manage(manager::TopoTestManager, id::Integer, config::WorkerConfig, op::Symbol)$/;"	f
mandir	deps/srccache/patchelf-0.9/Makefile.in	/^mandir = @mandir@$/;"	m
mandir	deps/srccache/patchelf-0.9/src/Makefile.in	/^mandir = @mandir@$/;"	m
mandir	deps/srccache/patchelf-0.9/tests/Makefile.in	/^mandir = @mandir@$/;"	m
mangle	src/debuginfo.cpp	/^static std::string mangle(const std::string &Name, const DataLayout &DL)$/;"	f	typeref:typename:std::string	file:
manifest_deps_get	base/loading.jl	/^function manifest_deps_get(env::String, where::PkgId, name::String)::Union{Nothing,PkgId}$/;"	f
manifest_file_name_uuid	base/loading.jl	/^function manifest_file_name_uuid(manifest_file::IO, name::String)::Union{Nothing,UUID}$/;"	f
manifest_names	base/loading.jl	/^const manifest_names = ("JuliaManifest.toml", "Manifest.toml")$/;"	v
manifest_uuid_path	base/loading.jl	/^function manifest_uuid_path(env::String, pkg::PkgId)::Union{Nothing,String}$/;"	f
mantissabits	base/ryu/utils.jl	/^mantissabits(::Type{Float16}) = 10$/;"	f
mantissabits	base/ryu/utils.jl	/^mantissabits(::Type{Float32}) = 23$/;"	f
mantissabits	base/ryu/utils.jl	/^mantissabits(::Type{Float64}) = 52$/;"	f
map	base/abstractarray.jl	/^function map(::Type{T}, r::LinRange) where T<:AbstractFloat$/;"	f
map	base/abstractarray.jl	/^map(::Type{T}, r::StepRange) where {T<:Real} = T(r.start):T(r.step):T(last(r))$/;"	f
map	base/abstractarray.jl	/^map(::Type{T}, r::StepRangeLen) where {T<:AbstractFloat} = convert(StepRangeLen{T}, r)$/;"	f
map	base/abstractarray.jl	/^map(::Type{T}, r::UnitRange) where {T<:Real} = T(r.start):T(last(r))$/;"	f
map	base/abstractarray.jl	/^map(f) = f()$/;"	f
map	base/abstractarray.jl	/^map(f, ::AbstractDict) = error("map is not defined on dictionaries")$/;"	f
map	base/abstractarray.jl	/^map(f, ::AbstractSet) = error("map is not defined on sets")$/;"	f
map	base/abstractarray.jl	/^map(f, A) = collect(Generator(f,A))$/;"	f
map	base/abstractarray.jl	/^map(f, A::AbstractArray) = collect_similar(A, Generator(f,A))$/;"	f
map	base/abstractarray.jl	/^map(f, iters...) = collect(Generator(f, iters...))$/;"	f
map	base/bitarray.jl	/^    @eval map(::$T, A::BitArray, B::BitArray) = bit_map!($f, similar(A), A, B)$/;"	f
map	base/bitarray.jl	/^map(::Union{typeof(~), typeof(!)}, A::BitArray) = bit_map!(~, similar(A), A)$/;"	f
map	base/bitarray.jl	/^map(::typeof(identity), A::BitArray) = copy(A)$/;"	f
map	base/bitarray.jl	/^map(::typeof(one), A::BitArray) = fill!(similar(A), true)$/;"	f
map	base/bitarray.jl	/^map(::typeof(zero), A::BitArray) = fill!(similar(A), false)$/;"	f
map	base/essentials.jl	/^map(f, v::SimpleVector) = Any[ f(v[i]) for i = 1:length(v) ]$/;"	f
map	base/namedtuple.jl	/^function map(f, nt::NamedTuple{names}, nts::NamedTuple...) where names$/;"	f
map	base/number.jl	/^map(f, x::Number, ys::Number...) = f(x, ys...)$/;"	f
map	base/strings/basic.jl	/^function map(f, s::AbstractString)$/;"	f
map	base/tuple.jl	/^function map(f, t1::Any16, t2::Any16, ts::Any16...)$/;"	f
map	base/tuple.jl	/^function map(f, t1::Tuple, t2::Tuple, ts::Tuple...)$/;"	f
map	base/tuple.jl	/^function map(f, t::Any16)$/;"	f
map	base/tuple.jl	/^function map(f, t::Any16, s::Any16)$/;"	f
map	base/tuple.jl	/^function map(f, t::Tuple, s::Tuple)$/;"	f
map	base/tuple.jl	/^map(f, ::Tuple{}...) = ()$/;"	f
map	base/tuple.jl	/^map(f, t::Tuple)                = (@_inline_meta; (f(t[1]), map(f,tail(t))...))$/;"	f
map	base/tuple.jl	/^map(f, t::Tuple{Any, Any, Any}) = (f(t[1]), f(t[2]), f(t[3]))$/;"	f
map	base/tuple.jl	/^map(f, t::Tuple{Any, Any})      = (f(t[1]), f(t[2]))$/;"	f
map	base/tuple.jl	/^map(f, t::Tuple{Any,Any}, s::Tuple{Any,Any}) = (f(t[1],s[1]), f(t[2],s[2]))$/;"	f
map	base/tuple.jl	/^map(f, t::Tuple{Any,})          = (f(t[1]),)$/;"	f
map	base/tuple.jl	/^map(f, t::Tuple{Any,},    s::Tuple{Any,})    = (f(t[1],s[1]),)$/;"	f
map	base/tuple.jl	/^map(f, t::Tuple{})              = ()$/;"	f
map	base/tuple.jl	/^map(f, t::Tuple{},        s::Tuple{})        = ()$/;"	f
map	stdlib/LibGit2/src/walker.jl	/^function map(f::Function, walker::GitRevWalker;$/;"	f
map	stdlib/LinearAlgebra/src/adjtrans.jl	/^map(f, avs::AdjointAbsVec...) = adjoint(map((xs...) -> adjoint(f(adjoint.(xs)...)), parent.(avs)/;"	f
map	stdlib/LinearAlgebra/src/adjtrans.jl	/^map(f, tvs::TransposeAbsVec...) = transpose(map((xs...) -> transpose(f(transpose.(xs)...)), pare/;"	f
map	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^function map(f, A::StructuredMatrix, Bs::StructuredMatrix...)$/;"	f
map	stdlib/SparseArrays/src/higherorderfns.jl	/^map(f::Tf, A::AbstractSparseMatrixCSC) where {Tf} = _noshapecheck_map(f, A)$/;"	f
map	stdlib/SparseArrays/src/higherorderfns.jl	/^map(f::Tf, A::AbstractSparseMatrixCSC, Bs::Vararg{SparseMatrixCSC,N}) where {Tf,N} =$/;"	f
map	stdlib/SparseArrays/src/higherorderfns.jl	/^map(f::Tf, A::SparseOrStructuredMatrix, Bs::Vararg{SparseOrStructuredMatrix,N}) where {Tf,N} =$/;"	f
map	stdlib/SparseArrays/src/higherorderfns.jl	/^map(f::Tf, A::SparseVecOrMat, Bs::Vararg{SparseVecOrMat,N}) where {Tf,N} =$/;"	f
map	stdlib/SparseArrays/src/higherorderfns.jl	/^map(f::Tf, A::SparseVector) where {Tf} = _noshapecheck_map(f, A)$/;"	f
map	stdlib/SparseArrays/src/sparsevector.jl	/^        map(::typeof($fun), x::AbstractSparseVector, y::AbstractSparseVector) = _binarymap($fun,/;"	f
map	stdlib/SparseArrays/src/sparsevector.jl	/^        map(::typeof($fun), x::SparseVector, y::SparseVector) = _binarymap($fun, x, y, $mode)$/;"	f
map!	base/abstractarray.jl	/^function map!(f::F, dest::AbstractArray, A::AbstractArray) where F$/;"	f
map!	base/abstractarray.jl	/^function map!(f::F, dest::AbstractArray, A::AbstractArray, B::AbstractArray) where F$/;"	f
map!	base/abstractarray.jl	/^map!(f::F, dest::AbstractArray, As::AbstractArray...) where {F} = map_n!(f, dest, As)$/;"	f
map!	base/abstractdict.jl	/^function map!(f, iter::ValueIterator)$/;"	f
map!	base/bitarray.jl	/^    @eval map!(::$T, dest::BitArray, A::BitArray, B::BitArray) = bit_map!($f, dest, A, B)$/;"	f
map!	base/bitarray.jl	/^map!(::Union{typeof(~), typeof(!)}, dest::BitArray, A::BitArray) = bit_map!(~, dest, A)$/;"	f
map!	base/bitarray.jl	/^map!(::typeof(identity), dest::BitArray, A::BitArray) = copyto!(dest, A)$/;"	f
map!	base/bitarray.jl	/^map!(::typeof(one), dest::BitArray, A::BitArray) = fill!(dest, true)$/;"	f
map!	base/bitarray.jl	/^map!(::typeof(zero), dest::BitArray, A::BitArray) = fill!(dest, false)$/;"	f
map!	base/dict.jl	/^function map!(f, iter::ValueIterator{<:Dict})$/;"	f
map!	base/weakkeydict.jl	/^map!(f,iter::ValueIterator{<:WeakKeyDict})= map!(f, values(iter.dict.ht))$/;"	f
map!	stdlib/SharedArrays/src/SharedArrays.jl	/^function map!(f, S::SharedArray, Q::SharedArray)$/;"	f
map!	stdlib/SparseArrays/src/higherorderfns.jl	/^map!(f::Tf, C::AbstractSparseMatrixCSC, A::AbstractSparseMatrixCSC, Bs::Vararg{SparseMatrixCSC,N/;"	f
map!	stdlib/SparseArrays/src/higherorderfns.jl	/^map!(f::Tf, C::AbstractSparseMatrixCSC, A::SparseOrStructuredMatrix, Bs::Vararg{SparseOrStructur/;"	f
map!	stdlib/SparseArrays/src/higherorderfns.jl	/^map!(f::Tf, C::SparseVecOrMat, A::SparseVecOrMat, Bs::Vararg{SparseVecOrMat,N}) where {Tf,N} =$/;"	f
map-at	src/julia-parser.scm	/^(define (map-at pred f lst)$/;"	f
map-cl-convert	src/julia-syntax.scm	/^(define (map-cl-convert exprs fname lam namemap defined toplevel interp)$/;"	f
map-first	src/julia-parser.scm	/^(define (map-first f lst)$/;"	f
map1	test/ambiguous.jl	/^map1(mapi::ScaleMinMax{To,From}, val::From) where {To<:Union{Float32,Float64},From<:Real} = 1$/;"	f
map1	test/ambiguous.jl	/^map1(mapi::ScaleMinMax{To,From}, val::Union{Real,Complex}) where {To<:Union{Float32,Float64},Fro/;"	f
map21311	test/compiler/inline.jl	/^@inline map21311(t::Tuple) = (update21311!(t[1]), map21311(Base.tail(t))...)$/;"	f
map21311	test/compiler/inline.jl	/^@noinline map21311(t::Tuple{Any}) = (update21311!(t[1]),)$/;"	f
map3_22347	test/compiler/inference.jl	/^@noinline map3_22347(f, t::Tuple) = (f(t[1]), map3_22347(f, Base.tail(t))...)$/;"	f
map3_22347	test/compiler/inference.jl	/^@noinline map3_22347(f, t::Tuple{}) = ()$/;"	f
mapAddresses	src/cgmemmgr.cpp	/^    void mapAddresses(DL &Dyld)$/;"	f	class:__anon06c686bc0111::RTDyldMemoryManagerJL	typeref:typename:void	file:
mapAddresses	src/cgmemmgr.cpp	/^    void mapAddresses(DL &Dyld, Alloc &&allocator)$/;"	f	class:__anon06c686bc0111::RTDyldMemoryManagerJL	typeref:typename:void	file:
map_anon_page	src/cgmemmgr.cpp	/^static void *map_anon_page(size_t size)$/;"	f	namespace:__anon06c686bc0111	typeref:typename:void *	file:
map_completion_text	stdlib/REPL/test/replcompletions.jl	/^function map_completion_text(completions)$/;"	f
map_del_wrkr	stdlib/Distributed/src/cluster.jl	/^const map_del_wrkr = Set{Int}()$/;"	v
map_get	src/llvm-multiversioning.cpp	/^Value *map_get(T &&vmap, Value *key, Value *def=nullptr)$/;"	f	namespace:__anond5683ea40111	typeref:typename:Value *
map_n!	base/abstractarray.jl	/^function map_n!(f::F, dest::AbstractArray, As) where F$/;"	f
map_offset	src/cgmemmgr.cpp	/^static size_t map_offset = 0;$/;"	v	namespace:__anon06c686bc0111	typeref:typename:size_t	file:
map_pid_ident	stdlib/Distributed/test/topology.jl	/^const map_pid_ident=Dict()$/;"	v
map_pid_wrkr	stdlib/Distributed/src/cluster.jl	/^const map_pid_wrkr = Dict{Int, Union{Worker, LocalProcess}}()$/;"	v
map_size	src/cgmemmgr.cpp	/^static size_t map_size = 0;$/;"	v	namespace:__anon06c686bc0111	typeref:typename:size_t	file:
map_size_inc	src/cgmemmgr.cpp	/^static constexpr size_t map_size_inc = 128 * 1024 * 1024;$/;"	v	namespace:__anon06c686bc0111	typeref:typename:size_t	file:
map_slot_number	test/compiler/contextual.jl	/^        function map_slot_number(slot)$/;"	f
map_sock_wrkr	stdlib/Distributed/src/cluster.jl	/^const map_sock_wrkr = IdDict()$/;"	v
map_ssa_value	test/compiler/contextual.jl	/^        map_ssa_value(ssa::SSAValue) = SSAValue(ssa.id + nargs)$/;"	f
mapafoldl	base/tuple.jl	/^function mapafoldl(F,op,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,qs...)$/;"	f
mapafoldl	base/tuple.jl	/^mapafoldl(F,op,a) = a$/;"	f
mapafoldl	base/tuple.jl	/^mapafoldl(F,op,a,b) = op(a,F(b))$/;"	f
mapafoldl	base/tuple.jl	/^mapafoldl(F,op,a,b,c...) = mapafoldl(F, op, op(a,F(b)), c...)$/;"	f
mapfilter	base/abstractset.jl	/^function mapfilter(pred, f, itr, res)$/;"	f
mapfirst!	base/reducedim.jl	/^function mapfirst!(f, R::AbstractArray, A::AbstractArray{<:Any,N}) where {N}$/;"	f
mapfoldl	base/reduce.jl	/^mapfoldl(f, op, itr; kw...) = mapfoldl_impl(f, op, kw.data, itr)$/;"	f
mapfoldl	test/tuple.jl	/^    @test mapfoldl(abs, =>, (-1,-2,-3,-4), init=-10) == ((((-10=>1)=>2)=>3)=>4)$/;"	f
mapfoldl_impl	base/reduce.jl	/^function mapfoldl_impl(f, op, nt::NamedTuple{()}, itr)$/;"	f
mapfoldl_impl	base/reduce.jl	/^function mapfoldl_impl(f, op, nt::NamedTuple{(:init,)}, itr, i...)$/;"	f
mapfoldl_impl	base/tuple.jl	/^mapfoldl_impl(f, op, nt::NamedTuple{()}, t::Tuple) = mapafoldl(f, op, f(t[1]), tail(t)...)$/;"	f
mapfoldl_impl	base/tuple.jl	/^mapfoldl_impl(f, op, nt::NamedTuple{()}, t::Tuple{}) = mapreduce_empty_iter(f, op, t, IteratorEl/;"	f
mapfoldl_impl	base/tuple.jl	/^mapfoldl_impl(f, op, nt::NamedTuple{(:init,)}, t::Tuple) = mapafoldl(f, op, nt.init, t...)$/;"	f
mapfoldr	base/reduce.jl	/^mapfoldr(f, op, itr; kw...) = mapfoldr_impl(f, op, kw.data, itr)$/;"	f
mapfoldr_impl	base/reduce.jl	/^function mapfoldr_impl(f, op, nt::NamedTuple{()}, itr)$/;"	f
mapfoldr_impl	base/reduce.jl	/^mapfoldr_impl(f, op, nt::NamedTuple{(:init,)}, itr) =$/;"	f
mapmap	stdlib/Markdown/src/GitHub/table.jl	/^mapmap(f, xss) = map(xs->map(f, xs), xss)$/;"	f
mapreduce	base/missing.jl	/^mapreduce(f, op, itr::SkipMissing{<:AbstractArray}) =$/;"	f
mapreduce	base/reduce.jl	/^mapreduce(f, op, a::Number) = mapreduce_first(f, op, a)$/;"	f
mapreduce	base/reduce.jl	/^mapreduce(f, op, itr; kw...) = mapfoldl(f, op, itr; kw...)$/;"	f
mapreduce	base/reduce.jl	/^mapreduce(f, op, itrs...; kw...) = reduce(op, Generator(f, itrs...); kw...)$/;"	f
mapreduce	base/reducedim.jl	/^mapreduce(f, op, A::AbstractArray...; kw...) = reduce(op, map(f, A...); kw...)$/;"	f
mapreduce	base/reducedim.jl	/^mapreduce(f, op, A::AbstractArray; dims=:, kw...) = _mapreduce_dim(f, op, kw.data, A, dims)$/;"	f
mapreduce_empty	base/reduce.jl	/^mapreduce_empty(::typeof(abs), op, T)      = abs(reduce_empty(op, T))$/;"	f
mapreduce_empty	base/reduce.jl	/^mapreduce_empty(::typeof(abs2), op, T)     = abs2(reduce_empty(op, T))$/;"	f
mapreduce_empty	base/reduce.jl	/^mapreduce_empty(::typeof(identity), op, T) = reduce_empty(op, T)$/;"	f
mapreduce_empty	base/reduce.jl	/^mapreduce_empty(f, op, T) = _empty_reduce_error()$/;"	f
mapreduce_empty	base/reduce.jl	/^mapreduce_empty(f::typeof(abs),  ::typeof(max), T) = abs(zero(T))$/;"	f
mapreduce_empty	base/reduce.jl	/^mapreduce_empty(f::typeof(abs2), ::typeof(max), T) = abs2(zero(T))$/;"	f
mapreduce_empty_iter	base/reduce.jl	/^mapreduce_empty_iter(f, op, itr, ::EltypeUnknown) = _empty_reduce_error()$/;"	f
mapreduce_empty_iter	base/reduce.jl	/^mapreduce_empty_iter(f, op, itr, ::HasEltype) = mapreduce_empty(f, op, eltype(itr))$/;"	f
mapreduce_empty_iter	base/reduce.jl	/^mapreduce_empty_iter(f, op::typeof(&), itr, ::EltypeUnknown) = true$/;"	f
mapreduce_empty_iter	base/reduce.jl	/^mapreduce_empty_iter(f, op::typeof(|), itr, ::EltypeUnknown) = false$/;"	f
mapreduce_first	base/reduce.jl	/^mapreduce_first(f, op, x) = reduce_first(op, f(x))$/;"	f
mapreduce_impl	base/missing.jl	/^@noinline function mapreduce_impl(f, op, itr::SkipMissing{<:AbstractArray},$/;"	f
mapreduce_impl	base/missing.jl	/^mapreduce_impl(f, op, A::SkipMissing, ifirst::Integer, ilast::Integer) =$/;"	f
mapreduce_impl	base/reduce.jl	/^@noinline function mapreduce_impl(f, op, A::AbstractArray, ifirst::Integer, ilast::Integer, blks/;"	f
mapreduce_impl	base/reduce.jl	/^function mapreduce_impl(f, op::Union{typeof(max), typeof(min)},$/;"	f
mapreduce_impl	base/reduce.jl	/^mapreduce_impl(f, op, A::AbstractArray, ifirst::Integer, ilast::Integer) =$/;"	f
mapreducedim!	base/reducedim.jl	/^mapreducedim!(f, op, R::AbstractArray, A::AbstractArray) =$/;"	f
mapshape_5584	test/core.jl	/^mapshape_5584(s1::NTuple{N,Int}, s2::NTuple{N,Int}) where {N} =$/;"	f
mapslices	base/abstractarray.jl	/^function mapslices(f, A::AbstractArray; dims)$/;"	f
maptwice	base/asyncmap.jl	/^function maptwice(wrapped_f, chnl, worker_tasks, c...)$/;"	f
margin	stdlib/Markdown/src/Markdown.jl	/^const margin = 2$/;"	v
mark	base/io.jl	/^function mark(io::IO)$/;"	f
mark	base/stream.jl	/^mark(x::LibuvStream)     = mark(x.buffer)$/;"	f
markLoopInfo	src/llvm-simdloop.cpp	/^bool LowerSIMDLoop::markLoopInfo(Module &M, Function *marker)$/;"	f	class:llvm::LowerSIMDLoop	typeref:typename:bool
mark_callee_rooted	src/cgutils.cpp	/^#define mark_callee_rooted(/;"	d	file:
mark_callee_rooted	src/cgutils.cpp	/^static Value *mark_callee_rooted(IRBuilder<> &irbuilder, Value *V)$/;"	f	typeref:typename:Value *	file:
mark_cons	src/flisp/flisp.c	/^#define mark_cons(/;"	d	file:
mark_julia_const	src/codegen.cpp	/^static inline jl_cgval_t mark_julia_const(jl_value_t *jv)$/;"	f	typeref:typename:jl_cgval_t	file:
mark_julia_slot	src/codegen.cpp	/^static inline jl_cgval_t mark_julia_slot(Value *v, jl_value_t *typ, Value *tindex, MDNode *tbaa)$/;"	f	typeref:typename:jl_cgval_t	file:
mark_julia_type	src/codegen.cpp	/^static inline jl_cgval_t mark_julia_type(jl_codectx_t &ctx, Value *v, bool isboxed, jl_datatype_/;"	f	typeref:typename:jl_cgval_t	file:
mark_julia_type	src/codegen.cpp	/^static inline jl_cgval_t mark_julia_type(jl_codectx_t &ctx, Value *v, bool isboxed, jl_value_t */;"	f	typeref:typename:jl_cgval_t	file:
mark_or_box_ccall_result	src/ccall.cpp	/^static jl_cgval_t mark_or_box_ccall_result(jl_codectx_t &ctx, Value *result, bool isboxed, jl_va/;"	f	typeref:typename:jl_cgval_t	file:
mark_phi_cycles	base/compiler/ssair/passes.jl	/^function mark_phi_cycles(compact::IncrementalCompact, safe_phis::BitSet, phi::Int)$/;"	f
mark_reset_age	src/gc.c	/^static int mark_reset_age = 0;$/;"	v	typeref:typename:int	file:
mark_roots	src/gc.c	/^static void mark_roots(jl_gc_mark_cache_t *gc_cache, jl_gc_mark_sp_t *sp)$/;"	f	typeref:typename:void	file:
mark_stack	test/gcext/gcext.c	/^uintptr_t mark_stack(jl_ptls_t ptls, jl_value_t *p)$/;"	f	typeref:typename:uintptr_t
mark_stack_data	test/gcext/gcext.c	/^uintptr_t mark_stack_data(jl_ptls_t ptls, jl_value_t *p)$/;"	f	typeref:typename:uintptr_t
mark_volatile_vars	src/codegen.cpp	/^static void mark_volatile_vars(jl_array_t *stmts, std::vector<jl_varinfo_t> &slots)$/;"	f	typeref:typename:void	file:
marked	src/flisp/flisp.h	/^    int marked;$/;"	m	struct:_fltype_t	typeref:typename:int
marked	src/gc.h	/^    gc_mark_marked_obj_t marked;$/;"	m	union:_jl_gc_mark_data	typeref:typename:gc_mark_marked_obj_t
markfunc	src/julia_gcext.h	/^    jl_markfunc_t markfunc;$/;"	m	struct:__anonc2cfca210108	typeref:typename:jl_markfunc_t
marvell_pj4	src/processor_arm.cpp	/^    marvell_pj4,$/;"	e	enum:ARM::CPU	file:
marvell_pj4	src/processor_arm.cpp	/^constexpr auto marvell_pj4 = armv7a | get_feature_masks(vfp3);$/;"	v	namespace:ARM::Feature	typeref:typename:auto
mask128	stdlib/Random/src/RNGs.jl	/^mask128(u::UInt128, ::Type{Float16}) =$/;"	f
mask128	stdlib/Random/src/RNGs.jl	/^mask128(u::UInt128, ::Type{Float32}) =$/;"	f
mask_features	src/processor.cpp	/^static inline void mask_features(const FeatureList<n> masks, uint32_t *features)$/;"	f	namespace:__anon839834ed0111	typeref:typename:void	file:
matc	src/gf.c	/^    jl_svec_t *matc;   \/\/ current working svec$/;"	m	struct:ml_matches_env	typeref:typename:jl_svec_t *	file:
match	base/regex.jl	/^function match end$/;"	f
match	base/regex.jl	/^function match(re::Regex, str::Union{SubString{String}, String}, idx::Integer, add_opts::UInt32=/;"	f
match	base/regex.jl	/^match(r::Regex, s::AbstractString) = match(r, s, firstindex(s))$/;"	f
match	base/regex.jl	/^match(r::Regex, s::AbstractString, i::Integer) = throw(ArgumentError($/;"	f
match	src/gf.c	/^    struct typemap_intersection_env match;$/;"	m	struct:ambiguous_matches_env	typeref:struct:typemap_intersection_env	file:
match	src/gf.c	/^    struct typemap_intersection_env match;$/;"	m	struct:invalidate_conflicting_env	typeref:struct:typemap_intersection_env	file:
match	src/gf.c	/^    struct typemap_intersection_env match;$/;"	m	struct:ml_matches_env	typeref:struct:typemap_intersection_env	file:
match	src/match.scm	/^(define (match p expr) (match- p expr (list (cons '__ expr))))$/;"	f
match-	src/match.scm	/^(define (match- p expr state)$/;"	f
match-alt	src/match.scm	/^(define (match-alt alt prest expr state var L)$/;"	f
match-seq	src/match.scm	/^(define (match-seq p expr state L)$/;"	f
match-star	src/match.scm	/^(define (match-star p prest expr state var min max L)$/;"	f
match-star-	src/match.scm	/^(define (match-star- p prest expr state var min max L sofar)$/;"	f
match_input	stdlib/REPL/src/LineEdit.jl	/^function match_input(k::Dict, s, term=terminal(s), cs=Char[], keymap = k)$/;"	f
match_input	stdlib/REPL/src/LineEdit.jl	/^function match_input(k::Function, s, term, cs, keymap)$/;"	f
match_input	stdlib/REPL/src/LineEdit.jl	/^match_input(k::KeyAlias, s, term, cs, keymap) =$/;"	f
match_input	stdlib/REPL/src/LineEdit.jl	/^match_input(k::Nothing, s, term, cs, keymap) = (s,p) -> return :ok$/;"	f
match_logs	stdlib/Test/src/logging.jl	/^function match_logs(f, patterns...; match_mode::Symbol=:all, kwargs...)$/;"	f
match_sysimg_targets	src/processor.cpp	/^static inline SysimgMatch match_sysimg_targets(S &&sysimg, T &&target, F &&max_vector_size)$/;"	f	namespace:__anon839834ed0111	typeref:typename:SysimgMatch	file:
matchinds	stdlib/REPL/src/docview.jl	/^function matchinds(needle, haystack; acronym = false)$/;"	f
matching_cache_argtypes	base/compiler/inferenceresult.jl	/^function matching_cache_argtypes(linfo::MethodInstance, ::Nothing)$/;"	f
matching_cache_argtypes	base/compiler/inferenceresult.jl	/^function matching_cache_argtypes(linfo::MethodInstance, given_argtypes::Vector)$/;"	f
materialize	base/broadcast.jl	/^@inline materialize(bc::Broadcasted) = copy(instantiate(bc))$/;"	f
materialize	base/broadcast.jl	/^materialize(x) = x$/;"	f
materialize	src/ccall.cpp	/^    Value *materialize(Value *V) override$/;"	f	class:FunctionMover	typeref:typename:Value *	file:
materialize!	base/broadcast.jl	/^@inline function materialize!(dest, bc::Broadcasted{Style}) where {Style}$/;"	f
materialize!	base/broadcast.jl	/^@inline function materialize!(dest, x)$/;"	f
materialize!	base/broadcast.jl	/^@inline materialize!(B::BitMaskedBitArray, bc::Broadcasted{<:Any,<:Any,typeof(identity),Tuple{Bo/;"	f
materialize!	base/broadcast.jl	/^@inline materialize!(B::BitMaskedBitArray, bc::Broadcasted{<:Any}) = materialize!(SubArray(B.par/;"	f
math_builder	src/intrinsics.cpp	/^    math_builder(jl_codectx_t &ctx, bool always_fast = false, bool contract = false)$/;"	f	struct:math_builder	file:
math_builder	src/intrinsics.cpp	/^struct math_builder {$/;"	s	file:
math_tfunc	base/compiler/tfuncs.jl	/^math_tfunc(@nospecialize(x)) = widenconst(x)$/;"	f
math_tfunc	base/compiler/tfuncs.jl	/^math_tfunc(@nospecialize(x), @nospecialize(y)) = widenconst(x)$/;"	f
math_tfunc	base/compiler/tfuncs.jl	/^math_tfunc(@nospecialize(x), @nospecialize(y), @nospecialize(z)) = widenconst(x)$/;"	f
matmul2x2	stdlib/LinearAlgebra/src/matmul.jl	/^function matmul2x2(tA, tB, A::AbstractMatrix{T}, B::AbstractMatrix{S}) where {T,S}$/;"	f
matmul2x2!	stdlib/LinearAlgebra/src/matmul.jl	/^function matmul2x2!(C::AbstractMatrix, tA, tB, A::AbstractMatrix, B::AbstractMatrix,$/;"	f
matmul3x3	stdlib/LinearAlgebra/src/matmul.jl	/^function matmul3x3(tA, tB, A::AbstractMatrix{T}, B::AbstractMatrix{S}) where {T,S}$/;"	f
matmul3x3!	stdlib/LinearAlgebra/src/matmul.jl	/^function matmul3x3!(C::AbstractMatrix, tA, tB, A::AbstractMatrix, B::AbstractMatrix,$/;"	f
matprod	stdlib/LinearAlgebra/src/matmul.jl	/^matprod(x, y) = x*y + x*y$/;"	f
mattypes	stdlib/LinearAlgebra/test/addmul.jl	/^mattypes = [$/;"	v
max	base/math.jl	/^max(x::T, y::T) where {T<:AbstractFloat} = ifelse((y > x) | (signbit(y) < signbit(x)),$/;"	f
max	base/missing.jl	/^max(::Any,     ::Missing) = missing$/;"	f
max	base/missing.jl	/^max(::Missing, ::Any)     = missing$/;"	f
max	base/missing.jl	/^max(::Missing, ::Missing) = missing$/;"	f
max	base/mpfr.jl	/^function max(x::BigFloat, y::BigFloat)$/;"	f
max	base/multidimensional.jl	/^    @inline max(index1::CartesianIndex{N}, index2::CartesianIndex{N}) where {N} =$/;"	f
max	base/operators.jl	/^max(x, y) = ifelse(isless(y, x), x, y)$/;"	f
max	base/promotion.jl	/^max(x::Real) = x$/;"	f
max	base/promotion.jl	/^max(x::Real, y::Real) = max(promote(x,y)...)$/;"	f
max	base/promotion.jl	/^max(x::T, y::T) where {T<:Real} = ifelse(y < x, x, y)$/;"	f
max	src/gc.h	/^    uint64_t max;$/;"	m	struct:__anoncf30557c0108	typeref:typename:uint64_t
max	src/support/arraylist.h	/^    size_t max;$/;"	m	struct:__anon1f859bb90108	typeref:typename:size_t
maxMantissa	test/ryu.jl	/^const maxMantissa = (UInt64(1) << 53) - 1$/;"	v
maxSize	deps/srccache/patchelf-0.9/src/patchelf.cc	/^off_t fileSize, maxSize;$/;"	v	typeref:typename:off_t
max_args	src/julia.h	/^    intptr_t max_args;  \/\/ max # of non-vararg arguments in a signature$/;"	m	struct:_jl_methtable_t	typeref:typename:intptr_t
max_ccall_threads	base/threadcall.jl	/^const max_ccall_threads = parse(Int, get(ENV, "UV_THREADPOOL_SIZE", "4"))$/;"	v
max_collect_interval	src/gc.c	/^static size_t max_collect_interval =  500000000UL;$/;"	v	typeref:typename:size_t	file:
max_collect_interval	src/gc.c	/^static size_t max_collect_interval = 1250000000UL;$/;"	v	typeref:typename:size_t	file:
max_double	test/grisu.jl	/^max_double = 1.7976931348623157e308$/;"	v
max_double	test/grisu.jl	/^max_double = floatmax(Float16)$/;"	v
max_double64	test/grisu.jl	/^max_double64 = 0x7fefffffffffffff$/;"	v
max_fast	base/fastmath.jl	/^    max_fast(x::T, y::T) where {T<:FloatTypes} = ifelse(y > x, y, x)$/;"	f
max_fast	base/fastmath.jl	/^    max_fast(x::T, y::T, z::T...) where {T<:FloatTypes} = max_fast(max_fast(x, y), z...)$/;"	f
max_float	test/grisu.jl	/^max_float = 3.4028234e38$/;"	v
max_float	test/grisu.jl	/^max_float = 3.4028234f38 #Float32(3.4028234e38)$/;"	v
max_float	test/grisu.jl	/^max_float = Float32(3.4028234e38)$/;"	v
max_float32	test/grisu.jl	/^max_float32 = 0x7f7fffff$/;"	v
max_pause	src/gc-debug.c	/^static uint64_t max_pause = 0;$/;"	v	typeref:typename:uint64_t	file:
max_pg_count	src/gc-debug.c	/^static size_t max_pg_count = 0;$/;"	v	typeref:typename:size_t	file:
max_probe	src/table.c	/^#define max_probe(/;"	d	file:
max_valid	src/gf.c	/^    size_t max_valid;$/;"	m	struct:ml_matches_env	typeref:typename:size_t	file:
max_values	base/abstractset.jl	/^max_values(::Type) = typemax(Int)$/;"	f
max_values	base/abstractset.jl	/^max_values(::Type{Bool}) = 2$/;"	f
max_values	base/abstractset.jl	/^max_values(::Type{Nothing}) = 1$/;"	f
max_values	base/abstractset.jl	/^max_values(T::Union) = max(max_values(T.a), max_values(T.b), max_values(T.a) + max_values(T.b))$/;"	f
max_values	base/abstractset.jl	/^max_values(T::Union{map(X -> Type{X}, BitIntegerSmall_types)...}) = 1 << (8*sizeof(T))$/;"	f
max_vector_size	src/processor_arm.cpp	/^static int max_vector_size(const FeatureList<feature_sz> &features)$/;"	f	namespace:ARM	typeref:typename:int	file:
max_vector_size	src/processor_x86.cpp	/^static int max_vector_size(const FeatureList<feature_sz> &features)$/;"	f	namespace:X86	typeref:typename:int	file:
max_width	stdlib/Dates/src/io.jl	/^@inline max_width(d::DatePart) = d.fixed ? d.width : 0$/;"	f
max_worker_rss	test/runtests.jl	/^const max_worker_rss = if haskey(ENV, "JULIA_TEST_MAXRSS_MB")$/;"	v
max_world	base/reflection.jl	/^max_world(m::Core.CodeInfo) = m.max_world$/;"	f
max_world	base/reflection.jl	/^max_world(m::Core.CodeInstance) = m.max_world$/;"	f
max_world	src/gf.c	/^    size_t max_world;$/;"	m	struct:invalidate_conflicting_env	typeref:typename:size_t	file:
max_world	src/gf.c	/^    size_t max_world;$/;"	m	struct:invalidate_mt_env	typeref:typename:size_t	file:
max_world	src/julia.h	/^    size_t max_world;$/;"	m	struct:_jl_code_info_t	typeref:typename:size_t
max_world	src/julia.h	/^    size_t max_world;$/;"	m	struct:_jl_code_instance_t	typeref:typename:size_t
max_world	src/julia.h	/^    size_t max_world;$/;"	m	struct:_jl_typemap_entry_t	typeref:typename:size_t
maxfinalizers	src/flisp/flisp.h	/^    size_t maxfinalizers;$/;"	m	struct:_fl_context_t	typeref:typename:size_t
maximum	base/bitarray.jl	/^maximum(B::BitArray) = isempty(B) ? throw(ArgumentError("argument must be non-empty")) : any(B)$/;"	f
maximum	base/bitset.jl	/^maximum(s::BitSet) = last(s)$/;"	f
maximum	base/range.jl	/^maximum(r::AbstractRange)  = isempty(r) ? throw(ArgumentError("range must be non-empty")) : max(/;"	f
maximum	base/range.jl	/^maximum(r::AbstractUnitRange) = isempty(r) ? throw(ArgumentError("range must be non-empty")) : l/;"	f
maximum	base/reduce.jl	/^maximum(a) = mapreduce(identity, max, a)$/;"	f
maximum	base/reduce.jl	/^maximum(f, a) = mapreduce(f, max, a)$/;"	f
maximum	stdlib/SparseArrays/src/sparsevector.jl	/^function maximum(x::AbstractSparseVector{T}) where T<:Real$/;"	f
maxintfloat	base/floatfuncs.jl	/^maxintfloat() = maxintfloat(Float64)$/;"	f
maxintfloat	base/floatfuncs.jl	/^maxintfloat(::Type{Float16}) = Float16(2048f0)$/;"	f
maxintfloat	base/floatfuncs.jl	/^maxintfloat(::Type{Float32}) = Float32(16777216.)$/;"	f
maxintfloat	base/floatfuncs.jl	/^maxintfloat(::Type{Float64}) = 9007199254740992.$/;"	f
maxintfloat	base/floatfuncs.jl	/^maxintfloat(::Type{S}, ::Type{T}) where {S<:AbstractFloat, T<:Integer} = min(maxintfloat(S), S(t/;"	f
maxintfloat	base/floatfuncs.jl	/^maxintfloat(x::T) where {T<:AbstractFloat} = maxintfloat(T)$/;"	f
maxintfloat	base/mpfr.jl	/^maxintfloat(::Type{BigFloat}) = BigFloat(2)^precision(BigFloat)$/;"	f
maxintfloat	base/mpfr.jl	/^maxintfloat(x::BigFloat) = BigFloat(2)^precision(x)$/;"	f
maxlen_data	stdlib/Profile/src/Profile.jl	/^maxlen_data() = convert(Int, ccall(:jl_profile_maxlen_data, Csize_t, ()))$/;"	f
maxmultiple	stdlib/Random/src/generation.jl	/^maxmultiple(k::T, sup::T=zero(T)) where {T<:Unsigned} =$/;"	f
maxrss	base/sysinfo.jl	/^maxrss() = ccall(:jl_maxrss, Csize_t, ())$/;"	f
maxsize	src/julia.h	/^        size_t maxsize;$/;"	m	union:__anon055fe4270408::__anon055fe427050a	typeref:typename:size_t
may_invoke_generator	base/reflection.jl	/^function may_invoke_generator(method::Method, @nospecialize(atypes), sparams::SimpleVector)$/;"	f
may_invoke_generator	base/reflection.jl	/^function may_invoke_generator(method::MethodInstance)$/;"	f
may_sleep	src/partr.c	/^static int may_sleep(jl_ptls_t ptls)$/;"	f	typeref:typename:int	file:
maybe-docstring	src/julia-parser.scm	/^(define (maybe-docstring s e)$/;"	f
maybe-negate	src/julia-parser.scm	/^(define (maybe-negate op num)$/;"	f
maybe-strip-op-suffix	src/julia-parser.scm	/^(define (maybe-strip-op-suffix op)$/;"	f
maybe_bitcast	src/cgutils.cpp	/^static Value *maybe_bitcast(jl_codectx_t &ctx, Value *V, Type *to) {$/;"	f	typeref:typename:Value *	file:
maybe_collect	src/gc.c	/^static inline void maybe_collect(jl_ptls_t ptls)$/;"	f	typeref:typename:void	file:
maybe_decay_tracked	src/cgutils.cpp	/^#define maybe_decay_tracked(/;"	d	file:
maybe_decay_tracked	src/cgutils.cpp	/^static Value *maybe_decay_tracked(IRBuilder<> &irbuilder, Value *V)$/;"	f	typeref:typename:Value *	file:
maybe_decay_untracked	src/cgutils.cpp	/^#define maybe_decay_untracked(/;"	d	file:
maybe_decay_untracked	src/cgutils.cpp	/^static Constant *maybe_decay_untracked(IRBuilder<> &irbuilder, Constant *C)$/;"	f	typeref:typename:Constant *	file:
maybe_decay_untracked	src/cgutils.cpp	/^static Value *maybe_decay_untracked(IRBuilder<> &irbuilder, Value *V)$/;"	f	typeref:typename:Value *	file:
maybe_erase_unused!	base/compiler/ssair/ir.jl	/^function maybe_erase_unused!(extra_worklist, compact, idx, callback = x->nothing)$/;"	f
maybe_extract_const_bool	base/compiler/typelattice.jl	/^function maybe_extract_const_bool(c::Conditional)$/;"	f
maybe_extract_const_bool	base/compiler/typelattice.jl	/^maybe_extract_const_bool(@nospecialize c) = nothing$/;"	f
maybe_extract_const_bool	base/compiler/typelattice.jl	/^maybe_extract_const_bool(c::Const) = isa(c.val, Bool) ? c.val : nothing$/;"	f
maybe_mark_argument_dereferenceable	src/cgutils.cpp	/^static inline void maybe_mark_argument_dereferenceable(Argument *A, jl_value_t *jt)$/;"	f	typeref:typename:void	file:
maybe_mark_load_dereferenceable	src/cgutils.cpp	/^static inline Instruction *maybe_mark_load_dereferenceable(Instruction *LI, bool can_be_null, jl/;"	f	typeref:typename:Instruction *	file:
maybe_mark_load_dereferenceable	src/cgutils.cpp	/^static inline Instruction *maybe_mark_load_dereferenceable(Instruction *LI, bool can_be_null,$/;"	f	typeref:typename:Instruction *	file:
maybe_schedule_next	src/jsvm-emscripten/asyncify_setup.js	/^function maybe_schedule_next() {$/;"	f
maybe_vararg_tuple_1	test/compiler/inference.jl	/^function maybe_vararg_tuple_1()$/;"	f
maybe_vararg_tuple_2	test/compiler/inference.jl	/^function maybe_vararg_tuple_2()$/;"	f
maybeview	base/sort.jl	/^maybeview(v, k) = view(v, k)$/;"	f
maybeview	base/sort.jl	/^maybeview(v, k::Integer) = v[k]$/;"	f
maybeview	base/views.jl	/^@propagate_inbounds maybeview(A) = getindex(A)$/;"	f
maybeview	base/views.jl	/^@propagate_inbounds maybeview(A, args...) = getindex(A, args...)$/;"	f
maybeview	base/views.jl	/^@propagate_inbounds maybeview(A::AbstractArray) = getindex(A)$/;"	f
maybeview	base/views.jl	/^@propagate_inbounds maybeview(A::AbstractArray, args...) = view(A, args...)$/;"	f
maybeview	base/views.jl	/^@propagate_inbounds maybeview(A::AbstractArray, args::Number...) = getindex(A, args...)$/;"	f
md_str	stdlib/Markdown/src/Markdown.jl	/^macro md_str(s, t...)$/;"	f
mdexpr	stdlib/Markdown/src/Markdown.jl	/^function mdexpr(s, flavor = :julia)$/;"	f
mdoc22098	test/docs.jl	/^macro mdoc22098 end$/;"	f
mdsum	test/arrayops.jl	/^function mdsum(A)$/;"	f
mdsum2	test/arrayops.jl	/^function mdsum2(A)$/;"	f
mean	stdlib/Statistics/src/Statistics.jl	/^function mean(f, itr)$/;"	f
mean	stdlib/Statistics/src/Statistics.jl	/^function mean(r::AbstractRange{<:Real})$/;"	f
mean	stdlib/Statistics/src/Statistics.jl	/^mean(A::AbstractArray; dims=:) = _mean(A, dims)$/;"	f
mean	stdlib/Statistics/src/Statistics.jl	/^mean(f, A::AbstractArray; dims=:) = _mean(f, A, dims)$/;"	f
mean	stdlib/Statistics/src/Statistics.jl	/^mean(itr) = mean(identity, itr)$/;"	f
mean!	stdlib/Statistics/src/Statistics.jl	/^function mean!(R::AbstractArray, A::AbstractArray)$/;"	f
median	stdlib/Statistics/src/Statistics.jl	/^median(itr) = median!(collect(itr))$/;"	f
median	stdlib/Statistics/src/Statistics.jl	/^median(r::AbstractRange{<:Real}) = mean(r)$/;"	f
median	stdlib/Statistics/src/Statistics.jl	/^median(v::AbstractArray; dims=:) = _median(v, dims)$/;"	f
median!	stdlib/Statistics/src/Statistics.jl	/^function median!(v::AbstractVector)$/;"	f
median!	stdlib/Statistics/src/Statistics.jl	/^median!(v::AbstractArray) = median!(vec(v))$/;"	f
mem_find_byte	src/flisp/string.c	/^static value_t mem_find_byte(fl_context_t *fl_ctx, char *s, char c, size_t start, size_t len)$/;"	f	typeref:typename:value_t	file:
member_expr	test/clangsa/MissingRoots.c	/^void member_expr(jl_expr_t *e) {$/;"	f	typeref:typename:void
member_expr2	test/clangsa/MissingRoots.c	/^void member_expr2(jl_typemap_entry_t *tm) {$/;"	f	typeref:typename:void
membershiptest	base/Enums.jl	/^function membershiptest(expr, values)$/;"	f
memcmp_derived_func	src/codegen.cpp	/^static Function *memcmp_derived_func;$/;"	v	typeref:typename:Function *	file:
memcpy	base/ryu/utils.jl	/^memcpy(d, doff, s, soff, n) = ccall(:memcpy, Cvoid, (Ptr{Cvoid}, Ptr{Cvoid}, Int), d + doff - 1,/;"	f
memcpy_a16	src/task.c	/^static void memcpy_a16(uint64_t *to, uint64_t *from, size_t nb)$/;"	f	typeref:typename:void	file:
memhash	base/hashing2.jl	/^const memhash = UInt === UInt64 ? :memhash_seed : :memhash32_seed$/;"	v
memhash	src/support/hashing.c	/^uint64_t memhash(const char *buf, size_t n)$/;"	f	typeref:typename:uint64_t
memhash32	src/support/hashing.c	/^uint32_t memhash32(const char *buf, size_t n)$/;"	f	typeref:typename:uint32_t
memhash32_seed	src/support/hashing.c	/^uint32_t memhash32_seed(const char *buf, size_t n, uint32_t seed)$/;"	f	typeref:typename:uint32_t
memhash_seed	base/hashing2.jl	/^const memhash_seed = UInt === UInt64 ? 0x71e729fd56419c81 : 0x56419c81$/;"	v
memhash_seed	src/support/hashing.c	/^uint64_t memhash_seed(const char *buf, size_t n, uint32_t seed)$/;"	f	typeref:typename:uint64_t
memmove	base/ryu/utils.jl	/^memmove(d, doff, s, soff, n) = ccall(:memmove, Cvoid, (Ptr{Cvoid}, Ptr{Cvoid}, Int), d + doff - /;"	f
memops	src/llvm-alloc-opt.cpp	/^        std::map<uint32_t,Field> memops;$/;"	m	struct:__anon0a1571000111::Optimizer::AllocUseInfo	typeref:typename:std::map<uint32_t,Field>	file:
memory_exception_value	src/flisp/flisp.h	/^    value_t memory_exception_value;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
memory_map	src/gc.c	/^pagetable_t memory_map;$/;"	v	typeref:typename:pagetable_t
memrchr	src/support/ios.c	/^JL_DLLEXPORT void *memrchr(const void *s, int c, size_t n)$/;"	f	typeref:typename:JL_DLLEXPORT void *
menagerie	test/subtype.jl	/^const menagerie =$/;"	v
merge	base/abstractdict.jl	/^merge(combine::Function, d::AbstractDict, others::AbstractDict...) =$/;"	f
merge	base/abstractdict.jl	/^merge(d::AbstractDict, others::AbstractDict...) =$/;"	f
merge	base/namedtuple.jl	/^function merge(a::NamedTuple, itr)$/;"	f
merge	base/namedtuple.jl	/^function merge(a::NamedTuple{an}, b::NamedTuple{bn}) where {an, bn}$/;"	f
merge	base/namedtuple.jl	/^merge(a::NamedTuple) = a$/;"	f
merge	base/namedtuple.jl	/^merge(a::NamedTuple, b::Iterators.Pairs{<:Any,<:Any,<:Any,<:NamedTuple}) = merge(a, b.data)$/;"	f
merge	base/namedtuple.jl	/^merge(a::NamedTuple, b::NamedTuple, cs::NamedTuple...) = merge(merge(a, b), cs...)$/;"	f
merge	base/namedtuple.jl	/^merge(a::NamedTuple{()}, b::NamedTuple) = b$/;"	f
merge	src/abi_x86_64.cpp	/^    static ArgClass merge(ArgClass accum, ArgClass cl)$/;"	f	struct:ABI_x86_64Layout::Classification	typeref:typename:ArgClass	file:
merge!	base/abstractdict.jl	/^function merge!(combine::Function, d::AbstractDict, others::AbstractDict...)$/;"	f
merge!	base/abstractdict.jl	/^function merge!(d::AbstractDict, others::AbstractDict...)$/;"	f
merge!	stdlib/LibGit2/src/LibGit2.jl	/^function merge!(repo::GitRepo;$/;"	f
merge!	stdlib/LibGit2/src/merge.jl	/^function merge!(repo::GitRepo, anns::Vector{GitAnnotated}, fastforward::Bool;$/;"	f
merge!	stdlib/LibGit2/src/merge.jl	/^function merge!(repo::GitRepo, anns::Vector{GitAnnotated};$/;"	f
merge_analysis	stdlib/LibGit2/src/merge.jl	/^function merge_analysis(repo::GitRepo, anns::Vector{GitAnnotated})$/;"	f
merge_base	stdlib/LibGit2/src/merge.jl	/^function merge_base(repo::GitRepo, one::AbstractString, two::AbstractString)$/;"	f
merge_call_chain!	base/compiler/typeinfer.jl	/^function merge_call_chain!(parent::InferenceState, ancestor::InferenceState, child::InferenceSta/;"	f
merge_names	base/namedtuple.jl	/^@pure function merge_names(an::Tuple{Vararg{Symbol}}, bn::Tuple{Vararg{Symbol}})$/;"	f
merge_types	base/namedtuple.jl	/^@pure function merge_types(names::Tuple{Vararg{Symbol}}, a::Type{<:NamedTuple}, b::Type{<:NamedT/;"	f
message	stdlib/LibGit2/src/commit.jl	/^function message(c::GitCommit, raw::Bool=false)$/;"	f
message_handler_loop	stdlib/Distributed/src/process_messages.jl	/^function message_handler_loop(r_stream::IO, w_stream::IO, incoming::Bool)$/;"	f
meta	base/docs/Docs.jl	/^meta(m::Module) = isdefined(m, META) ? getfield(m, META) : IdDict()$/;"	f
meta	src/gc.h	/^    jl_gc_pagemeta_t *meta;$/;"	m	struct:jl_gc_metadata_ext	typeref:typename:jl_gc_pagemeta_t *
meta	src/gc.h	/^    jl_gc_pagemeta_t *meta[REGION0_PG_COUNT];$/;"	m	struct:__anoncf30557c1208	typeref:typename:jl_gc_pagemeta_t * []
meta	stdlib/Markdown/src/parse/config.jl	/^meta(f) = getset(META, f, Dict{Symbol, Any}())$/;"	f
meta0	src/gc.h	/^    pagetable0_t *meta0[REGION1_PG_COUNT];$/;"	m	struct:__anoncf30557c1308	typeref:typename:pagetable0_t * []
meta1	src/gc.h	/^    pagetable1_t *meta1[REGION2_PG_COUNT];$/;"	m	struct:__anoncf30557c1408	typeref:typename:pagetable1_t * []
meta_sym	src/ast.c	/^jl_sym_t *meta_sym; jl_sym_t *inert_sym;$/;"	v	typeref:typename:jl_sym_t *
metadata	base/docs/Docs.jl	/^function metadata(__source__, __module__, expr, ismodule)$/;"	f
metadata_matches	test/core.jl	/^function metadata_matches(ast::Core.CodeInfo)$/;"	f
metasymbols	src/match.scm	/^(define metasymbols '(_ ...))$/;"	f
methloc	test/show.jl	/^methloc = Base.methodloc_callback[]$/;"	v
method	src/dump.c	/^    jl_method_t *method;$/;"	m	struct:__anon570497e30108	typeref:typename:jl_method_t *	file:
method	src/julia.h	/^        jl_method_t *method; \/\/ method this is specialized from$/;"	m	union:_jl_method_instance_t::__anon055fe427070a	typeref:typename:jl_method_t *
method	src/julia.h	/^        jl_method_t *method;$/;"	m	union:_jl_typemap_entry_t::__anon055fe427130a	typeref:typename:jl_method_t *
method-def-expr	src/julia-syntax.scm	/^(define (method-def-expr name sparams argl body rett)$/;"	f
method-def-expr-	src/julia-syntax.scm	/^(define (method-def-expr- name sparams argl body (rett '(core Any)))$/;"	f
method-expr-name	src/julia-syntax.scm	/^(define (method-expr-name m)$/;"	f
method-expr-static-parameters	src/julia-syntax.scm	/^(define (method-expr-static-parameters m)$/;"	f
method-lambda-expr	src/julia-syntax.scm	/^(define (method-lambda-expr argl body rett)$/;"	f
method_argnames	base/methodshow.jl	/^function method_argnames(m::Method)$/;"	f
method_c1	test/errorshow.jl	/^method_c1(x::Float64, s::AbstractString...) = true$/;"	f
method_c2	test/errorshow.jl	/^method_c2(x::Int32, args...) = true$/;"	f
method_c2	test/errorshow.jl	/^method_c2(x::Int32, y::Float64) = true$/;"	f
method_c2	test/errorshow.jl	/^method_c2(x::Int32, y::Float64, args...) = true$/;"	f
method_c2	test/errorshow.jl	/^method_c2(x::Int32, y::Int32, z::Int32) = true$/;"	f
method_c2	test/errorshow.jl	/^method_c2(x::T, y::T, z::T) where {T<:Real} = true$/;"	f
method_c3	test/errorshow.jl	/^method_c3(x::Float64, y::Float64) = true$/;"	f
method_c4	test/errorshow.jl	/^method_c4() = true$/;"	f
method_c4	test/errorshow.jl	/^method_c4(x::AbstractString) = false$/;"	f
method_c5	test/errorshow.jl	/^method_c5(::Type{Float64}) = true$/;"	f
method_c6	test/errorshow.jl	/^method_c6(; x=1) = x$/;"	f
method_c6	test/errorshow.jl	/^method_c6(a; y=1) = y$/;"	f
method_c6_in_module	test/errorshow.jl	/^method_c6_in_module(; x=1) = x$/;"	f
method_c6_in_module	test/errorshow.jl	/^method_c6_in_module(a; y=1) = y$/;"	f
method_c7	test/errorshow.jl	/^method_c7(a, b; kargs...) = a$/;"	f
method_c8	test/errorshow.jl	/^method_c8(a, b; y=1, w=1) = a$/;"	f
method_defs	src/gf.c	/^const struct jl_typemap_info method_defs = {$/;"	v	typeref:typename:const struct jl_typemap_info
method_defs_lineno	test/errorshow.jl	/^method_defs_lineno = @__LINE__() + 1$/;"	v
method_for_inference_heuristics	base/compiler/utilities.jl	/^function method_for_inference_heuristics(method::Method, @nospecialize(sig), sparams::SimpleVect/;"	f
method_for_inference_limit_heuristics	src/julia.h	/^    jl_value_t *method_for_inference_limit_heuristics; \/\/ optional method used during inferenc/;"	m	struct:_jl_code_info_t	typeref:typename:jl_value_t *
method_instance_for_thunk	src/toplevel.c	/^static jl_method_instance_t *method_instance_for_thunk(jl_code_info_t *src, jl_module_t *module)$/;"	f	typeref:typename:jl_method_instance_t *	file:
method_instances	base/reflection.jl	/^function method_instances(@nospecialize(f), @nospecialize(t), world::UInt = typemax(UInt))$/;"	f
method_name	base/compiler/ssair/show.jl	/^@noinline method_name(m::LineInfoNode) = normalize_method_name(m.method)$/;"	f
method_overwrite	src/gf.c	/^static void method_overwrite(jl_typemap_entry_t *newentry, jl_method_t *oldvalue)$/;"	f	typeref:typename:void	file:
method_sym	src/ast.c	/^jl_sym_t *method_sym;  jl_sym_t *core_sym;$/;"	v	typeref:typename:jl_sym_t *
methodloc_callback	base/methodshow.jl	/^const methodloc_callback = Ref{Function}(default_methodloc)$/;"	v
methods	base/reflection.jl	/^function methods(@nospecialize(f))$/;"	f
methods	base/reflection.jl	/^function methods(@nospecialize(f), @nospecialize(t))$/;"	f
methods	base/reflection.jl	/^methods(f::Core.Builtin) = MethodList(Method[], typeof(f).name.mt)$/;"	f
methods_including_ambiguous	base/reflection.jl	/^function methods_including_ambiguous(@nospecialize(f), @nospecialize(t))$/;"	f
methodswith	stdlib/InteractiveUtils/src/InteractiveUtils.jl	/^function methodswith(t::Type, f::Function, meths = Method[]; supertypes::Bool=false)$/;"	f
methodswith	stdlib/InteractiveUtils/src/InteractiveUtils.jl	/^function methodswith(t::Type; supertypes::Bool=false)$/;"	f
methodswith	stdlib/InteractiveUtils/src/InteractiveUtils.jl	/^methodswith(t::Type, m::Module; supertypes::Bool=false) = _methodswith(t, m, supertypes)$/;"	f
methtracer	test/reflection.jl	/^methtracer(x::Ptr{Cvoid}) = (@test isa(unsafe_pointer_to_objref(x), Method); global didtrace = t/;"	f
mi	src/interpreter.c	/^    jl_method_instance_t *mi; \/\/ MethodInstance we're executing, or NULL if toplevel$/;"	m	struct:__anonf89725e10108	typeref:typename:jl_method_instance_t *	file:
mi	src/interpreter.c	/^    jl_method_instance_t *mi;$/;"	m	struct:jl_interpret_call_args	typeref:typename:jl_method_instance_t *	file:
mi	stdlib/Dates/test/periods.jl	/^mi = Dates.Minute(1)$/;"	v
mi	stdlib/Dates/test/types.jl	/^mi = Dates.Minute(1)$/;"	v
mi	test/compiler/validation.jl	/^mi = Core.Compiler.specialize_method(m, msig, msp, false)$/;"	v
micro_ker!	test/llvmpasses/aliasscopes.jl	/^function micro_ker!(AB, Ac, Bc, kc, offSetA, offSetB)$/;"	f
microsecond	stdlib/Dates/src/accessors.jl	/^microsecond(t::Time) = mod(fld(value(t), Int64(1000)), Int64(1000))$/;"	f
middle	stdlib/Statistics/src/Statistics.jl	/^middle(a::AbstractArray) = ((v1, v2) = extrema(a); middle(v1, v2))$/;"	f
middle	stdlib/Statistics/src/Statistics.jl	/^middle(a::AbstractRange) = middle(a[1], a[end])$/;"	f
middle	stdlib/Statistics/src/Statistics.jl	/^middle(x::AbstractFloat) = x$/;"	f
middle	stdlib/Statistics/src/Statistics.jl	/^middle(x::Real) = (x + zero(x)) \/ 1$/;"	f
middle	stdlib/Statistics/src/Statistics.jl	/^middle(x::Real, y::Real) = x\/2 + y\/2$/;"	f
middle	stdlib/Statistics/src/Statistics.jl	/^middle(x::Union{Bool,Int8,Int16,Int32,Int64,Int128,UInt8,UInt16,UInt32,UInt64,UInt128}) = Float6/;"	f
mightalias	base/abstractarray.jl	/^mightalias(A::AbstractArray, B::AbstractArray) = !isbits(A) && !isbits(B) && !_isdisjoint(dataid/;"	f
mightalias	base/abstractarray.jl	/^mightalias(x, y) = false$/;"	f
mightalias	base/multidimensional.jl	/^function mightalias(A::SubArray{T,<:Any,P}, B::SubArray{T,<:Any,P}) where {T,P}$/;"	f
millisecond	stdlib/Dates/src/accessors.jl	/^millisecond(dt::DateTime) = mod(value(dt), 1000)$/;"	f
millisecond	stdlib/Dates/src/accessors.jl	/^millisecond(t::Time) = mod(fld(value(t), Int64(1000000)), Int64(1000))$/;"	f
min	base/math.jl	/^min(x::T, y::T) where {T<:AbstractFloat} = ifelse((y < x) | (signbit(y) > signbit(x)),$/;"	f
min	base/missing.jl	/^min(::Any,     ::Missing) = missing$/;"	f
min	base/missing.jl	/^min(::Missing, ::Any)     = missing$/;"	f
min	base/missing.jl	/^min(::Missing, ::Missing) = missing$/;"	f
min	base/mpfr.jl	/^function min(x::BigFloat, y::BigFloat)$/;"	f
min	base/multidimensional.jl	/^    @inline min(index1::CartesianIndex{N}, index2::CartesianIndex{N}) where {N} =$/;"	f
min	base/operators.jl	/^min(x,y) = ifelse(isless(y, x), y, x)$/;"	f
min	base/promotion.jl	/^min(x::Real) = x$/;"	f
min	base/promotion.jl	/^min(x::Real, y::Real) = min(promote(x,y)...)$/;"	f
min	base/promotion.jl	/^min(x::T, y::T) where {T<:Real} = ifelse(y < x, y, x)$/;"	f
min	src/gc.h	/^    uint64_t min;$/;"	m	struct:__anoncf30557c0108	typeref:typename:uint64_t
min	stdlib/SparseArrays/src/sparsematrix.jl	/^    min(length(J), length(V)) >= coolen || throw(ArgumentError("J and V need length >= length(I)/;"	f
min_double	test/grisu.jl	/^min_double = 5e-324$/;"	v
min_double	test/grisu.jl	/^min_double = floatmin(Float16)$/;"	v
min_double64	test/grisu.jl	/^min_double64 = 0x0000000000000001$/;"	v
min_enabled_level	base/logging.jl	/^function min_enabled_level end$/;"	f
min_enabled_level	base/logging.jl	/^min_enabled_level(::NullLogger) = AboveMaxLevel$/;"	f
min_enabled_level	base/logging.jl	/^min_enabled_level(logger::SimpleLogger) = logger.min_level$/;"	f
min_enabled_level	stdlib/Logging/src/ConsoleLogger.jl	/^min_enabled_level(logger::ConsoleLogger) = logger.min_level$/;"	f
min_enabled_level	stdlib/Test/src/logging.jl	/^min_enabled_level(logger::TestLogger) = logger.min_level$/;"	f
min_fast	base/fastmath.jl	/^    min_fast(x::T, y::T) where {T<:FloatTypes} = ifelse(y > x, x, y)$/;"	f
min_fast	base/fastmath.jl	/^    min_fast(x::T, y::T, z::T...) where {T<:FloatTypes} = min_fast(min_fast(x, y), z...)$/;"	f
min_float	test/grisu.jl	/^min_float = 1e-45$/;"	v
min_float	test/grisu.jl	/^min_float = Float32(1e-45)$/;"	v
min_float32	test/grisu.jl	/^min_float32 = 0x00000001$/;"	v
min_valid	src/gf.c	/^    size_t min_valid;$/;"	m	struct:ml_matches_env	typeref:typename:size_t	file:
min_width	stdlib/Dates/src/io.jl	/^@inline min_width(d::DatePart) = d.fixed ? d.width : 1$/;"	f
min_world	base/reflection.jl	/^min_world(m::Core.CodeInfo) = m.min_world$/;"	f
min_world	base/reflection.jl	/^min_world(m::Core.CodeInstance) = m.min_world$/;"	f
min_world	src/julia.h	/^    size_t min_world;$/;"	m	struct:_jl_code_info_t	typeref:typename:size_t
min_world	src/julia.h	/^    size_t min_world;$/;"	m	struct:_jl_code_instance_t	typeref:typename:size_t
min_world	src/julia.h	/^    size_t min_world;$/;"	m	struct:_jl_typemap_entry_t	typeref:typename:size_t
minimum	base/bitarray.jl	/^minimum(B::BitArray) = isempty(B) ? throw(ArgumentError("argument must be non-empty")) : all(B)$/;"	f
minimum	base/bitset.jl	/^minimum(s::BitSet) = first(s)$/;"	f
minimum	base/range.jl	/^minimum(r::AbstractRange)  = isempty(r) ? throw(ArgumentError("range must be non-empty")) : min(/;"	f
minimum	base/range.jl	/^minimum(r::AbstractUnitRange) = isempty(r) ? throw(ArgumentError("range must be non-empty")) : f/;"	f
minimum	base/reduce.jl	/^minimum(a) = mapreduce(identity, min, a)$/;"	f
minimum	base/reduce.jl	/^minimum(f, a) = mapreduce(f, min, a)$/;"	f
minimum	stdlib/SparseArrays/src/sparsevector.jl	/^function minimum(x::AbstractSparseVector{T}) where T<:Real$/;"	f
minmax	base/math.jl	/^minmax(x::T, y::T) where {T<:AbstractFloat} =$/;"	f
minmax	base/operators.jl	/^minmax(x,y) = isless(y, x) ? (y, x) : (x, y)$/;"	f
minmax	base/promotion.jl	/^minmax(x::Real) = (x, x)$/;"	f
minmax	base/promotion.jl	/^minmax(x::Real, y::Real) = minmax(promote(x, y)...)$/;"	f
minmax	base/promotion.jl	/^minmax(x::T, y::T) where {T<:Real} = y < x ? (y, x) : (x, y)$/;"	f
minmax_fast	base/fastmath.jl	/^    minmax_fast(x::T, y::T) where {T<:FloatTypes} = ifelse(y > x, (x,y), (y,x))$/;"	f
minsubf16	test/float16.jl	/^const minsubf16 = nextfloat(Float16(0.0))$/;"	v
minsubf16_32	test/float16.jl	/^const minsubf16_32 = Float32(minsubf16)$/;"	v
minute	stdlib/Dates/src/accessors.jl	/^minute(dt::DateTime) = mod(fld(value(dt), 60000), 60)$/;"	f
minute	stdlib/Dates/src/accessors.jl	/^minute(t::Time) = mod(fld(value(t), 60000000000), Int64(60))$/;"	f
mirror_callback	stdlib/LibGit2/src/callbacks.jl	/^function mirror_callback(remote::Ptr{Ptr{Cvoid}}, repo_ptr::Ptr{Cvoid},$/;"	f
mirror_cb	stdlib/LibGit2/src/callbacks.jl	/^mirror_cb() = @cfunction(mirror_callback, Cint, (Ptr{Ptr{Cvoid}}, Ptr{Cvoid}, Cstring, Cstring, /;"	f
missing	base/essentials.jl	/^const missing = Missing()$/;"	v
missingPop	test/clangsa/GCPushPop.cpp	/^void missingPop() {$/;"	f	typeref:typename:void
missingPop2	test/clangsa/GCPushPop.cpp	/^void missingPop2() {$/;"	f	typeref:typename:void
missing_tvar	test/core.jl	/^missing_tvar(::T...) where {T} = T$/;"	f
mk_cons	src/flisp/flisp.c	/^static value_t mk_cons(fl_context_t *fl_ctx)$/;"	f	typeref:typename:value_t	file:
mk_primtype	src/flisp/cvalues.c	/^#define mk_primtype(/;"	d	file:
mk_primtype_	src/flisp/cvalues.c	/^#define mk_primtype_(/;"	d	file:
mk_symbol	src/flisp/flisp.c	/^static symbol_t *mk_symbol(const char *str)$/;"	f	typeref:typename:symbol_t *	file:
mk_symbol	src/symbol.c	/^static jl_sym_t *mk_symbol(const char *str, size_t len) JL_NOTSAFEPOINT$/;"	f	typeref:typename:jl_sym_t *	file:
mk_tuplecall!	base/compiler/ssair/inlining.jl	/^function mk_tuplecall!(compact::IncrementalCompact, args::Vector{Any}, line_idx::Int32)$/;"	f
mk_wr	test/core.jl	/^    @noinline function mk_wr(r, wr)$/;"	f
mk_wr	test/missing.jl	/^    @noinline function mk_wr(r, wr)$/;"	f
mkdir	base/file.jl	/^function mkdir(path::AbstractString; mode::Integer = 0o777)$/;"	f
mkdir_p	deps/srccache/patchelf-0.9/Makefile.in	/^mkdir_p = @mkdir_p@$/;"	m
mkdir_p	deps/srccache/patchelf-0.9/src/Makefile.in	/^mkdir_p = @mkdir_p@$/;"	m
mkdir_p	deps/srccache/patchelf-0.9/tests/Makefile.in	/^mkdir_p = @mkdir_p@$/;"	m
mkinstalldirs	deps/srccache/patchelf-0.9/Makefile.in	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	deps/srccache/patchelf-0.9/src/Makefile.in	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	deps/srccache/patchelf-0.9/tests/Makefile.in	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkpath	base/file.jl	/^function mkpath(path::AbstractString; mode::Integer = 0o777)$/;"	f
mktemp	base/file.jl	/^function mktemp(fn::Function, parent::AbstractString=tempdir())$/;"	f
mktemp	base/file.jl	/^function mktemp(parent::AbstractString=tempdir(); cleanup::Bool=true)$/;"	f
mktempdir	base/file.jl	/^function mktempdir(fn::Function, parent::AbstractString=tempdir();$/;"	f
mktempdir	base/file.jl	/^function mktempdir(parent::AbstractString=tempdir();$/;"	f
mktempfile	test/file.jl	/^function mktempfile(; cleanup=true)$/;"	f
ml_matches	src/gf.c	/^static jl_value_t *ml_matches(jl_typemap_t *defs, int offs,$/;"	f	typeref:typename:jl_value_t *	file:
ml_matches_env	src/gf.c	/^struct ml_matches_env {$/;"	s	file:
ml_matches_visitor	src/gf.c	/^static int ml_matches_visitor(jl_typemap_entry_t *ml, struct typemap_intersection_env *closure0)$/;"	f	typeref:typename:int	file:
mmap	stdlib/Mmap/src/Mmap.jl	/^function mmap(io::IO,$/;"	f
mmap	stdlib/Mmap/src/Mmap.jl	/^function mmap(io::IOStream, ::Type{<:BitArray}, dims::NTuple{N,Integer},$/;"	f
mmap	stdlib/Mmap/src/Mmap.jl	/^mmap(::Type{T}, dims::NTuple{N,Integer}; shared::Bool=true) where {T<:Array,N} = mmap(Anonymous(/;"	f
mmap	stdlib/Mmap/src/Mmap.jl	/^mmap(::Type{T}, dims::NTuple{N,Integer}; shared::Bool=true) where {T<:BitArray,N} = mmap(Anonymo/;"	f
mmap	stdlib/Mmap/src/Mmap.jl	/^mmap(::Type{T}, i::Integer...; shared::Bool=true) where {T<:Array} = mmap(Anonymous(), T, conver/;"	f
mmap	stdlib/Mmap/src/Mmap.jl	/^mmap(::Type{T}, i::Integer...; shared::Bool=true) where {T<:BitArray} = mmap(Anonymous(), T, con/;"	f
mmap	stdlib/Mmap/src/Mmap.jl	/^mmap(file::AbstractString, ::Type{T}, dims::NTuple{N,Integer}, offset::Integer=Int64(0);grow::Bo/;"	f
mmap	stdlib/Mmap/src/Mmap.jl	/^mmap(file::AbstractString, ::Type{T}, len::Integer, offset::Integer=Int64(0); grow::Bool=true, s/;"	f
mmap	stdlib/Mmap/src/Mmap.jl	/^mmap(io::IO, ::Type{T}, len::Integer, offset::Integer=position(io); grow::Bool=true, shared::Boo/;"	f
mod	base/bool.jl	/^mod(x::Bool, y::Bool) = rem(x,y)$/;"	f
mod	base/float.jl	/^function mod(x::T, y::T) where T<:AbstractFloat$/;"	f
mod	base/int.jl	/^    function mod(x::Int128, y::Int128)$/;"	f
mod	base/int.jl	/^function mod(x::T, y::T) where T<:Integer$/;"	f
mod	base/int.jl	/^mod(x::BitSigned, y::Unsigned) = rem(y + unsigned(rem(x, y)), y)$/;"	f
mod	base/int.jl	/^mod(x::Integer, ::Type{T}) where {T<:Integer} = rem(x, T)$/;"	f
mod	base/int.jl	/^mod(x::T, y::T) where {T<:Unsigned} = rem(x, y)$/;"	f
mod	base/int.jl	/^mod(x::Unsigned, y::Signed) = rem(y + signed(rem(x, y)), y)$/;"	f
mod	base/promotion.jl	/^mod(x::Real, y::Real) = mod(promote(x,y)...)$/;"	f
mod	base/promotion.jl	/^mod(x::T, y::T) where {T<:Real} = no_op_err("mod", T)$/;"	f
mod	base/range.jl	/^mod(i::Integer, r::AbstractUnitRange{<:Integer}) = mod(i-first(r), length(r)) + first(r)$/;"	f
mod	base/range.jl	/^mod(i::Integer, r::OneTo) = mod1(i, last(r))$/;"	f
mod1	base/operators.jl	/^mod1(x::T, y::T) where {T<:Real} = (m = mod(x, y); ifelse(m == 0, y, m))$/;"	f
mod1	base/promotion.jl	/^mod1(x::Real, y::Real) = mod1(promote(x,y)...)$/;"	f
mod1	test/core.jl	/^    mod1(x::T) where {T} = x < 1 ? x : mod1(x-1)$/;"	f
mod2pi	base/math.jl	/^mod2pi(x) = rem2pi(x,RoundDown)$/;"	f
modCeil	base/operators.jl	/^modCeil(x::T, y::T) where {T<:Real} = convert(T,x-y*ceil(x\/y))$/;"	f
mode	src/dump.c	/^    DUMP_MODES mode;$/;"	m	struct:__anon570497e30108	typeref:typename:DUMP_MODES	file:
mode	stdlib/LibGit2/src/LibGit2.jl	/^mode = LibGit2.Consts.RESET_HARD$/;"	v
mode	stdlib/REPL/src/LineEdit.jl	/^mode(s::MIState) = s.current_mode$/;"	f
mode	stdlib/REPL/src/LineEdit.jl	/^mode(s::PrefixSearchState) = s.histprompt.parent_prompt$/;"	f
mode	stdlib/REPL/src/LineEdit.jl	/^mode(s::PromptState) = s.p$/;"	f
mode	stdlib/REPL/src/LineEdit.jl	/^mode(s::SearchState) = @assert false$/;"	f
mode_idx	stdlib/REPL/src/REPL.jl	/^function mode_idx(hist::REPLHistoryProvider, mode)$/;"	f
mode_keymap	stdlib/REPL/src/REPL.jl	/^function mode_keymap(julia_prompt::Prompt)$/;"	f
modestr	base/libc.jl	/^modestr(r::Bool, w::Bool) = r ? (w ? "r+" : "r") : (w ? "w" : throw(ArgumentError("neither reada/;"	f
modestr	base/libc.jl	/^modestr(s::IO) = modestr(isreadable(s), iswritable(s))$/;"	f
modf	base/math.jl	/^function modf(x::Float32)$/;"	f
modf	base/math.jl	/^function modf(x::Float64)$/;"	f
modf	base/math.jl	/^modf(x) = rem(x,one(x)), trunc(x)$/;"	f
modf	base/mpfr.jl	/^function modf(x::BigFloat)$/;"	f
modifyRPath	deps/srccache/patchelf-0.9/src/patchelf.cc	/^void ElfFile<ElfFileParamNames>::modifyRPath(RPathOp op, string newRPath)$/;"	f	class:ElfFile	typeref:typename:void
modifySoname	deps/srccache/patchelf-0.9/src/patchelf.cc	/^void ElfFile<ElfFileParamNames>::modifySoname(sonameMode op, const string & newSoname)$/;"	f	class:ElfFile	typeref:typename:void
modify_exponent	base/special/ldexp_exp.jl	/^function modify_exponent(x::T, expnt_x) where T <: Union{Float32, Float64}$/;"	f
modify_highword	base/special/ldexp_exp.jl	/^modify_highword(x::Float32, hw) = reinterpret(Float32, hw)$/;"	f
modify_highword	base/special/ldexp_exp.jl	/^modify_highword(x::Float64, hw) = reinterpret(Float64, (UInt64(hw)<<32)|(reinterpret(UInt64, x)</;"	f
modstack_t	src/module.c	/^} modstack_t;$/;"	t	typeref:struct:_modstack_t	file:
module	src/ast.c	/^    jl_module_t *module; \/\/ context module for `current-julia-module-counter`$/;"	m	struct:_jl_ast_context_t	typeref:typename:jl_module_t *	file:
module	src/codegen.cpp	/^    jl_module_t *module = NULL;$/;"	m	class:jl_codectx_t	typeref:typename:jl_module_t *	file:
module	src/interpreter.c	/^    jl_module_t *module; \/\/ context for globals$/;"	m	struct:__anonf89725e10108	typeref:typename:jl_module_t *	file:
module	src/julia.h	/^        struct _jl_module_t *module; \/\/ this is a toplevel thunk$/;"	m	union:_jl_method_instance_t::__anon055fe427070a	typeref:struct:_jl_module_t *
module	src/julia.h	/^    jl_module_t *module; \/\/ used for incremental serialization to locate original binding$/;"	m	struct:_jl_methtable_t	typeref:typename:jl_module_t *
module	src/julia.h	/^    struct _jl_module_t *module;$/;"	m	struct:__anon055fe4270a08	typeref:struct:_jl_module_t *
module	src/julia.h	/^    struct _jl_module_t *module;$/;"	m	struct:_jl_method_t	typeref:struct:_jl_module_t *
module	src/llvm-pass-helpers.h	/^    llvm::Module *module;$/;"	m	struct:JuliaPassContext	typeref:typename:llvm::Module *
module	test/gcext/gcext.c	/^static jl_module_t *module;$/;"	v	typeref:typename:jl_module_t *	file:
module-default-defs	src/jlfrontend.scm	/^(define (module-default-defs e)$/;"	f
module_activation	src/julia.h	/^    jl_value_t *module_activation;$/;"	m	struct:__anon055fe4271b08	typeref:typename:jl_value_t *
module_build_id	base/loading.jl	/^module_build_id(m::Module) = ccall(:jl_module_build_id, UInt64, (Any,), m)$/;"	f
module_depth	test/reflection.jl	/^function module_depth(from::Module, to::Module)$/;"	f
module_for_fname	src/jitlayers.cpp	/^static StringMap<Module*> module_for_fname;$/;"	v	typeref:typename:StringMap<Module * >	file:
module_import_	src/module.c	/^static void module_import_(jl_module_t *to, jl_module_t *from, jl_sym_t *s, int explici)$/;"	f	typeref:typename:void	file:
module_in_worklist	src/dump.c	/^static int module_in_worklist(jl_module_t *mod) JL_NOTSAFEPOINT$/;"	f	typeref:typename:int	file:
module_keys	base/loading.jl	/^const module_keys = IdDict{Module,PkgId}() # the reverse$/;"	v
module_member	test/clangsa/MissingRoots.c	/^void module_member(jl_module_t *m)$/;"	f	typeref:typename:void
module_setup	src/julia.h	/^    jl_value_t *module_setup;$/;"	m	struct:__anon055fe4271b08	typeref:typename:jl_value_t *
module_sym	src/ast.c	/^jl_sym_t *module_sym;  jl_sym_t *slot_sym;$/;"	v	typeref:typename:jl_sym_t *
module_var14726	test/threads_exec.jl	/^module_var14726 = 1$/;"	v
moduledoc	base/docs/Docs.jl	/^function moduledoc(__source__, __module__, meta, def, def′::Expr)$/;"	f
moduleroot	base/reflection.jl	/^function moduleroot(m::Module)$/;"	f
modules	base/docs/Docs.jl	/^const modules = Module[]$/;"	v
modules	test/ambiguous.jl	/^modules = [mod for (pkg, mod) in Base.loaded_modules if pkg.uuid !== nothing]$/;"	v
modules_warned_for	base/loading.jl	/^const modules_warned_for = Set{PkgId}()$/;"	v
moduleusings	stdlib/REPL/src/docview.jl	/^moduleusings(mod) = ccall(:jl_module_usings, Any, (Any,), mod)$/;"	f
modulo	src/bin2hex.scm	/^(define modulo mod)$/;"	f
mon	src/support/strptime.c	/^	const char* mon[12];$/;"	m	struct:__anon732973510108	typeref:typename:const char * [12]	file:
mondo_regex	contrib/normalize_triplet.py	/^mondo_regex = re.compile($/;"	v
mono	stdlib/REPL/src/latex_symbols.jl	/^const mono = "\\\\tt"$/;"	v
month	stdlib/Dates/src/accessors.jl	/^function month(days)$/;"	f
month	stdlib/Dates/src/accessors.jl	/^month(dt::TimeType) = month(days(dt))$/;"	f
monthabbr	stdlib/Dates/src/query.jl	/^function monthabbr(dt::TimeType; locale::AbstractString="english")$/;"	f
monthabbr	stdlib/Dates/src/query.jl	/^monthabbr(month::Integer, locale::DateLocale) = locale.months_abbr[month]$/;"	f
monthabbr	stdlib/Dates/src/query.jl	/^monthabbr(month::Integer; locale::AbstractString="english") = monthabbr(month, LOCALES[locale])$/;"	f
monthday	stdlib/Dates/src/accessors.jl	/^function monthday(days)$/;"	f
monthday	stdlib/Dates/src/accessors.jl	/^monthday(dt::TimeType) = monthday(days(dt))$/;"	f
monthname	stdlib/Dates/src/query.jl	/^function monthname(dt::TimeType; locale::AbstractString="english")$/;"	f
monthname	stdlib/Dates/src/query.jl	/^monthname(month::Integer, locale::DateLocale) = locale.months[month]$/;"	f
monthname	stdlib/Dates/src/query.jl	/^monthname(month::Integer; locale::AbstractString="english") = monthname(month, LOCALES[locale])$/;"	f
monthnames	stdlib/Dates/test/query.jl	/^monthnames = ["January", "February", "March", "April",$/;"	v
monthwrap	stdlib/Dates/src/arithmetic.jl	/^monthwrap(m1, m2) = (v = mod1(m1 + m2, 12); return v < 0 ? 12 + v : v)$/;"	f
more	src/subtype.c	/^    int more;$/;"	m	struct:__anon0f0258f90108	typeref:typename:int	file:
mostlyclean	deps/srccache/patchelf-0.9/Makefile.in	/^mostlyclean: mostlyclean-recursive$/;"	t
mostlyclean	deps/srccache/patchelf-0.9/src/Makefile.in	/^mostlyclean: mostlyclean-am$/;"	t
mostlyclean	deps/srccache/patchelf-0.9/tests/Makefile.in	/^mostlyclean: mostlyclean-am$/;"	t
mostlyclean-am	deps/srccache/patchelf-0.9/Makefile.in	/^mostlyclean-am: mostlyclean-generic$/;"	t
mostlyclean-am	deps/srccache/patchelf-0.9/src/Makefile.in	/^mostlyclean-am: mostlyclean-compile mostlyclean-generic$/;"	t
mostlyclean-am	deps/srccache/patchelf-0.9/tests/Makefile.in	/^mostlyclean-am: mostlyclean-compile mostlyclean-generic$/;"	t
mostlyclean-compile	deps/srccache/patchelf-0.9/src/Makefile.in	/^mostlyclean-compile:$/;"	t
mostlyclean-compile	deps/srccache/patchelf-0.9/tests/Makefile.in	/^mostlyclean-compile:$/;"	t
mostlyclean-generic	deps/srccache/patchelf-0.9/Makefile.in	/^mostlyclean-generic:$/;"	t
mostlyclean-generic	deps/srccache/patchelf-0.9/src/Makefile.in	/^mostlyclean-generic:$/;"	t
mostlyclean-generic	deps/srccache/patchelf-0.9/tests/Makefile.in	/^mostlyclean-generic:$/;"	t
moveToStack	src/llvm-alloc-opt.cpp	/^void Optimizer::moveToStack(CallInst *orig_inst, size_t sz, bool has_ref)$/;"	f	class:__anon0a1571000111::Optimizer	typeref:typename:void
move_input_end	stdlib/REPL/src/LineEdit.jl	/^move_input_end(buf::IOBuffer) = (seekend(buf); nothing)$/;"	f
move_input_end	stdlib/REPL/src/LineEdit.jl	/^move_input_end(s) = (move_input_end(buffer(s)); nothing)$/;"	f
move_input_start	stdlib/REPL/src/LineEdit.jl	/^move_input_start(s) = (seek(buffer(s), 0); nothing)$/;"	f
move_left	stdlib/REPL/test/lineedit.jl	/^    move_left(s, n) = for x = 1:n$/;"	f
move_line_end	stdlib/REPL/src/LineEdit.jl	/^function move_line_end(buf::IOBuffer)$/;"	f
move_line_end	stdlib/REPL/src/LineEdit.jl	/^function move_line_end(s::MIState)$/;"	f
move_line_start	stdlib/REPL/src/LineEdit.jl	/^function move_line_start(s::MIState)$/;"	f
move_to_node1	test/runtests.jl	/^function move_to_node1(t)$/;"	f
mpn_cmp	base/gmp.jl	/^mpn_cmp(a::BigInt, b::BigInt, c) = mpn_cmp(a.d, b.d, c)$/;"	f
mpn_cmp	base/gmp.jl	/^mpn_cmp(a::Ptr{Limb}, b::Ptr{Limb}, c) = ccall((:__gmpn_cmp, :libgmp), Cint, (Ptr{Limb}, Ptr{Lim/;"	f
mpn_popcount	base/gmp.jl	/^mpn_popcount(a::BigInt) = mpn_popcount(a.d, abs(a.size))$/;"	f
mpn_popcount	base/gmp.jl	/^mpn_popcount(d::Ptr{Limb}, s::Integer) = Int(ccall((:__gmpn_popcount, :libgmp), Culong, (Ptr{Lim/;"	f
mpz_t	base/gmp.jl	/^const mpz_t = Ref{BigInt}$/;"	v
ms	stdlib/Dates/test/periods.jl	/^ms = Dates.Millisecond(1)$/;"	v
ms	stdlib/Dates/test/types.jl	/^ms = Dates.Millisecond(1)$/;"	v
msgtypes	stdlib/Distributed/src/messages.jl	/^const msgtypes = Any[CallWaitMsg, IdentifySocketAckMsg, IdentifySocketMsg,$/;"	v
msig	test/compiler/validation.jl	/^msig = Tuple{typeof(f22938),Int,Int,Int,Int}$/;"	v
msk	test/subarray.jl	/^msk = fill(true, 2, 2)$/;"	v
mt	src/julia.h	/^    struct _jl_methtable_t *mt;$/;"	m	struct:__anon055fe4270a08	typeref:struct:_jl_methtable_t *
mt_avail	stdlib/Random/src/RNGs.jl	/^mt_avail(r::MersenneTwister) = MT_CACHE_F - r.idxF$/;"	f
mt_avail	stdlib/Random/src/RNGs.jl	/^mt_avail(r::MersenneTwister, ::Type{T}) where {T<:BitInteger} =$/;"	f
mt_empty	stdlib/Random/src/RNGs.jl	/^mt_empty(r::MersenneTwister) = r.idxF == MT_CACHE_F$/;"	f
mt_pop!	stdlib/Random/src/RNGs.jl	/^function mt_pop!(r::MersenneTwister, ::Type{T}) where T<:BitInteger$/;"	f
mt_pop!	stdlib/Random/src/RNGs.jl	/^function mt_pop!(r::MersenneTwister, ::Type{T}) where {T<:Union{Int128,UInt128}}$/;"	f
mt_pop!	stdlib/Random/src/RNGs.jl	/^mt_pop!(r::MersenneTwister) = @inbounds return r.vals[r.idxF+=1]$/;"	f
mt_setempty!	stdlib/Random/src/RNGs.jl	/^mt_setempty!(r::MersenneTwister) = r.idxF = MT_CACHE_F$/;"	f
mt_setempty!	stdlib/Random/src/RNGs.jl	/^mt_setempty!(r::MersenneTwister, ::Type{<:BitInteger}) = r.idxI = 0$/;"	f
mt_setfull!	stdlib/Random/src/RNGs.jl	/^function mt_setfull!(r::MersenneTwister, ::Type{<:BitInteger})$/;"	f
mt_setfull!	stdlib/Random/src/RNGs.jl	/^mt_setfull!(r::MersenneTwister) = r.idxF = 0$/;"	f
mtable	test/clangsa/MissingRoots.c	/^void mtable(jl_value_t *f) {$/;"	f	typeref:typename:void
mtable2	test/clangsa/MissingRoots.c	/^void mtable2(jl_value_t **v) {$/;"	f	typeref:typename:void
mtcache_hash_bp	src/typemap.c	/^static jl_typemap_t **mtcache_hash_bp(struct jl_ordereddict_t *pa JL_PROPAGATES_ROOT, jl_value_t/;"	f	typeref:typename:jl_typemap_t **	file:
mtcache_hash_lookup	src/typemap.c	/^jl_typemap_t *mtcache_hash_lookup(const struct jl_ordereddict_t *a JL_PROPAGATES_ROOT, jl_value_/;"	f	typeref:typename:jl_typemap_t *	file:
mtcache_rehash	src/typemap.c	/^static void mtcache_rehash(struct jl_ordereddict_t *pa, size_t newlen, jl_value_t *parent, int8_/;"	f	typeref:typename:void	file:
mtest_create_strings	test/netload/memtest.jl	/^function mtest_create_strings()$/;"	f
mtest_remotecall_fetch	test/netload/memtest.jl	/^function mtest_remotecall_fetch()$/;"	f
mtime	base/stat.jl	/^mtime(st::StatStruct) = st.mtime$/;"	f
mul	src/runtime_intrinsics.c	/^#define mul(/;"	d	file:
mul	test/bigint.jl	/^function mul(a::Vector{BigInt}, b::Vector{BigInt})$/;"	f
mul!	stdlib/LinearAlgebra/src/bidiag.jl	/^@inline mul!(C::AbstractMatrix,   A::AbstractMatrix,     B::BiTriSym, alpha::Number, beta::Numbe/;"	f
mul!	stdlib/LinearAlgebra/src/bidiag.jl	/^@inline mul!(C::AbstractMatrix,   A::AbstractTriangular, B::BiTriSym, alpha::Number, beta::Numbe/;"	f
mul!	stdlib/LinearAlgebra/src/bidiag.jl	/^@inline mul!(C::AbstractMatrix,   A::BiTriSym,              B::AbstractVecOrMat, alpha::Number, /;"	f
mul!	stdlib/LinearAlgebra/src/bidiag.jl	/^@inline mul!(C::AbstractMatrix,   A::BiTriSym,           B::BiTriSym, alpha::Number, beta::Numbe/;"	f
mul!	stdlib/LinearAlgebra/src/bidiag.jl	/^@inline mul!(C::AbstractMatrix,   A::Diagonal,           B::BiTriSym, alpha::Number, beta::Numbe/;"	f
mul!	stdlib/LinearAlgebra/src/bidiag.jl	/^@inline mul!(C::AbstractMatrix,   A::SymTridiagonal,     B::BiTriSym, alpha::Number, beta::Numbe/;"	f
mul!	stdlib/LinearAlgebra/src/bidiag.jl	/^@inline mul!(C::AbstractMatrix, A::Adjoint{<:Any,<:AbstractTriangular}, B::BiTriSym, alpha::Numb/;"	f
mul!	stdlib/LinearAlgebra/src/bidiag.jl	/^@inline mul!(C::AbstractMatrix, A::Adjoint{<:Any,<:AbstractVecOrMat}, B::BiTriSym, alpha::Number/;"	f
mul!	stdlib/LinearAlgebra/src/bidiag.jl	/^@inline mul!(C::AbstractMatrix, A::Adjoint{<:Any,<:Diagonal}, B::BiTriSym, alpha::Number, beta::/;"	f
mul!	stdlib/LinearAlgebra/src/bidiag.jl	/^@inline mul!(C::AbstractMatrix, A::BiTriSym, B::Adjoint{<:Any,<:AbstractVecOrMat}, alpha::Number/;"	f
mul!	stdlib/LinearAlgebra/src/bidiag.jl	/^@inline mul!(C::AbstractMatrix, A::BiTriSym, B::Transpose{<:Any,<:AbstractVecOrMat}, alpha::Numb/;"	f
mul!	stdlib/LinearAlgebra/src/bidiag.jl	/^@inline mul!(C::AbstractMatrix, A::Transpose{<:Any,<:AbstractTriangular}, B::BiTriSym, alpha::Nu/;"	f
mul!	stdlib/LinearAlgebra/src/bidiag.jl	/^@inline mul!(C::AbstractMatrix, A::Transpose{<:Any,<:AbstractVecOrMat}, B::BiTriSym, alpha::Numb/;"	f
mul!	stdlib/LinearAlgebra/src/bidiag.jl	/^@inline mul!(C::AbstractMatrix, A::Transpose{<:Any,<:Diagonal}, B::BiTriSym, alpha::Number, beta/;"	f
mul!	stdlib/LinearAlgebra/src/bidiag.jl	/^@inline mul!(C::AbstractVecOrMat, A::BiTriSym,              B::AbstractVecOrMat, alpha::Number, /;"	f
mul!	stdlib/LinearAlgebra/src/bidiag.jl	/^@inline mul!(C::AbstractVector,   A::BiTriSym,              B::AbstractVector, alpha::Number, be/;"	f
mul!	stdlib/LinearAlgebra/src/bidiag.jl	/^@inline mul!(C::AbstractVector, A::BiTriSym, B::Transpose{<:Any,<:AbstractVecOrMat}, alpha::Numb/;"	f
mul!	stdlib/LinearAlgebra/src/diagonal.jl	/^mul!(C::AbstractMatrix, A::Adjoint{<:Any,<:Diagonal}, B::Adjoint{<:Any,<:RealHermSymComplexSym})/;"	f
mul!	stdlib/LinearAlgebra/src/diagonal.jl	/^mul!(C::AbstractMatrix, A::Transpose{<:Any,<:Diagonal}, B::Transpose{<:Any,<:RealHermSymComplexH/;"	f
mul!	stdlib/LinearAlgebra/src/generic.jl	/^@inline mul!(C::AbstractArray, X::AbstractArray, s::Number, alpha::Number, beta::Number) =$/;"	f
mul!	stdlib/LinearAlgebra/src/generic.jl	/^@inline mul!(C::AbstractArray, s::Number, X::AbstractArray, alpha::Number, beta::Number) =$/;"	f
mul!	stdlib/LinearAlgebra/src/matmul.jl	/^        @inline function mul!(C::StridedMatrix{Complex{$elty}}, A::StridedVecOrMat{Complex{$elty/;"	f
mul!	stdlib/LinearAlgebra/src/matmul.jl	/^        @inline function mul!(y::StridedVector{Complex{$elty}}, A::StridedVecOrMat{Complex{$elty/;"	f
mul!	stdlib/LinearAlgebra/src/matmul.jl	/^@inline function mul!(C, A, B)$/;"	f
mul!	stdlib/LinearAlgebra/src/matmul.jl	/^@inline function mul!(C::AbstractMatrix, A::AbstractVecOrMat, adjB::Adjoint{<:Any,<:AbstractVecO/;"	f
mul!	stdlib/LinearAlgebra/src/matmul.jl	/^@inline function mul!(C::AbstractMatrix, adjA::Adjoint{<:Any,<:AbstractVecOrMat}, B::AbstractVec/;"	f
mul!	stdlib/LinearAlgebra/src/matmul.jl	/^@inline function mul!(C::AbstractMatrix, adjA::Adjoint{<:Any,<:AbstractVecOrMat}, adjB::Adjoint{/;"	f
mul!	stdlib/LinearAlgebra/src/matmul.jl	/^@inline function mul!(C::AbstractMatrix, adjA::Adjoint{<:Any,<:AbstractVecOrMat}, transB::Transp/;"	f
mul!	stdlib/LinearAlgebra/src/matmul.jl	/^@inline function mul!(C::AbstractMatrix, transA::Transpose{<:Any,<:AbstractVecOrMat}, B::Abstrac/;"	f
mul!	stdlib/LinearAlgebra/src/matmul.jl	/^@inline function mul!(C::AbstractMatrix, transA::Transpose{<:Any,<:AbstractVecOrMat}, transB::Ad/;"	f
mul!	stdlib/LinearAlgebra/src/matmul.jl	/^@inline function mul!(C::AbstractMatrix, transA::Transpose{<:Any,<:AbstractVecOrMat}, transB::Tr/;"	f
mul!	stdlib/LinearAlgebra/src/matmul.jl	/^@inline function mul!(C::StridedMatrix{T}, A::StridedVecOrMat{T}, adjB::Adjoint{<:Any,<:StridedV/;"	f
mul!	stdlib/LinearAlgebra/src/matmul.jl	/^@inline function mul!(C::StridedMatrix{T}, A::StridedVecOrMat{T}, transB::Transpose{<:Any,<:Stri/;"	f
mul!	stdlib/LinearAlgebra/src/matmul.jl	/^@inline function mul!(C::StridedMatrix{T}, adjA::Adjoint{<:Any,<:StridedVecOrMat{T}}, B::Strided/;"	f
mul!	stdlib/LinearAlgebra/src/matmul.jl	/^@inline function mul!(C::StridedMatrix{T}, adjA::Adjoint{<:Any,<:StridedVecOrMat{T}}, adjB::Adjo/;"	f
mul!	stdlib/LinearAlgebra/src/matmul.jl	/^@inline function mul!(C::StridedMatrix{T}, transA::Transpose{<:Any,<:StridedVecOrMat{T}}, B::Str/;"	f
mul!	stdlib/LinearAlgebra/src/matmul.jl	/^@inline function mul!(C::StridedMatrix{T}, transA::Transpose{<:Any,<:StridedVecOrMat{T}}, transB/;"	f
mul!	stdlib/LinearAlgebra/src/matmul.jl	/^@inline function mul!(y::AbstractVector, adjA::Adjoint{<:Any,<:AbstractVecOrMat}, x::AbstractVec/;"	f
mul!	stdlib/LinearAlgebra/src/matmul.jl	/^@inline function mul!(y::AbstractVector, transA::Transpose{<:Any,<:AbstractVecOrMat}, x::Abstrac/;"	f
mul!	stdlib/LinearAlgebra/src/matmul.jl	/^@inline function mul!(y::StridedVector{T}, adjA::Adjoint{<:Any,<:StridedVecOrMat{T}}, x::Strided/;"	f
mul!	stdlib/LinearAlgebra/src/matmul.jl	/^@inline function mul!(y::StridedVector{T}, transA::Transpose{<:Any,<:StridedVecOrMat{T}}, x::Str/;"	f
mul!	stdlib/LinearAlgebra/src/qr.jl	/^mul!(C::StridedVecOrMat{T}, A::StridedVecOrMat{T}, Q::AbstractQ{T}) where {T} = rmul!(copyto!(C,/;"	f
mul!	stdlib/LinearAlgebra/src/qr.jl	/^mul!(C::StridedVecOrMat{T}, A::StridedVecOrMat{T}, adjQ::Adjoint{<:Any,<:AbstractQ{T}}) where {T/;"	f
mul!	stdlib/LinearAlgebra/src/qr.jl	/^mul!(C::StridedVecOrMat{T}, Q::AbstractQ{T}, B::StridedVecOrMat{T}) where {T} = lmul!(Q, copyto!/;"	f
mul!	stdlib/LinearAlgebra/src/qr.jl	/^mul!(C::StridedVecOrMat{T}, adjQ::Adjoint{<:Any,<:AbstractQ{T}}, B::StridedVecOrMat{T}) where {T/;"	f
mul!	stdlib/LinearAlgebra/src/triangular.jl	/^        @eval @inline mul!(A::$Trig, B::$TB, C::$TC, alpha::Number, beta::Number) =$/;"	f
mul!	stdlib/LinearAlgebra/src/triangular.jl	/^@inline mul!(C::AbstractMatrix, A::AbstractTriangular, B::Tridiagonal, alpha::Number, beta::Numb/;"	f
mul!	stdlib/LinearAlgebra/src/triangular.jl	/^@inline mul!(C::AbstractMatrix, A::Adjoint{<:Any,<:AbstractTriangular}, B::Adjoint{<:Any,<:Abstr/;"	f
mul!	stdlib/LinearAlgebra/src/triangular.jl	/^@inline mul!(C::AbstractMatrix, A::Adjoint{<:Any,<:AbstractTriangular}, B::Transpose{<:Any,<:Abs/;"	f
mul!	stdlib/LinearAlgebra/src/triangular.jl	/^@inline mul!(C::AbstractMatrix, A::Transpose{<:Any,<:AbstractTriangular}, B::Adjoint{<:Any,<:Abs/;"	f
mul!	stdlib/LinearAlgebra/src/triangular.jl	/^@inline mul!(C::AbstractMatrix, A::Transpose{<:Any,<:AbstractTriangular}, B::Transpose{<:Any,<:A/;"	f
mul!	stdlib/LinearAlgebra/src/triangular.jl	/^@inline mul!(C::AbstractMatrix, A::Tridiagonal, B::AbstractTriangular, alpha::Number, beta::Numb/;"	f
mul!	stdlib/LinearAlgebra/src/triangular.jl	/^mul!(C::AbstractMatrix  , A::AbstractTriangular, B::AbstractVecOrMat) = lmul!(A, copyto!(C, B))$/;"	f
mul!	stdlib/LinearAlgebra/src/triangular.jl	/^mul!(C::AbstractMatrix  , adjA::Adjoint{<:Any,<:AbstractTriangular}, B::AbstractVecOrMat) =$/;"	f
mul!	stdlib/LinearAlgebra/src/triangular.jl	/^mul!(C::AbstractMatrix  , transA::Transpose{<:Any,<:AbstractTriangular}, B::AbstractVecOrMat) =$/;"	f
mul!	stdlib/LinearAlgebra/src/triangular.jl	/^mul!(C::AbstractMatrix, A::AbstractTriangular, adjB::Adjoint{<:Any,<:AbstractVecOrMat}) =$/;"	f
mul!	stdlib/LinearAlgebra/src/triangular.jl	/^mul!(C::AbstractMatrix, A::AbstractTriangular, transB::Transpose{<:Any,<:AbstractVecOrMat}) =$/;"	f
mul!	stdlib/LinearAlgebra/src/triangular.jl	/^mul!(C::AbstractVecOrMat, A::AbstractTriangular, B::AbstractVecOrMat) = lmul!(A, copyto!(C, B))$/;"	f
mul!	stdlib/LinearAlgebra/src/triangular.jl	/^mul!(C::AbstractVecOrMat, A::AbstractTriangular, adjB::Adjoint{<:Any,<:AbstractVecOrMat}) =$/;"	f
mul!	stdlib/LinearAlgebra/src/triangular.jl	/^mul!(C::AbstractVecOrMat, adjA::Adjoint{<:Any,<:AbstractTriangular}, B::AbstractVecOrMat) =$/;"	f
mul!	stdlib/LinearAlgebra/src/triangular.jl	/^mul!(C::AbstractVecOrMat, transA::Transpose{<:Any,<:AbstractTriangular}, B::AbstractVecOrMat) =$/;"	f
mul!	stdlib/LinearAlgebra/src/triangular.jl	/^mul!(C::AbstractVector  , A::AbstractTriangular, B::AbstractVector)   = lmul!(A, copyto!(C, B))$/;"	f
mul!	stdlib/LinearAlgebra/src/triangular.jl	/^mul!(C::AbstractVector  , adjA::Adjoint{<:Any,<:AbstractTriangular}, B::AbstractVector) =$/;"	f
mul!	stdlib/LinearAlgebra/src/triangular.jl	/^mul!(C::AbstractVector  , transA::Transpose{<:Any,<:AbstractTriangular}, B::AbstractVector) =$/;"	f
mul!	stdlib/LinearAlgebra/src/triangular.jl	/^mul!(C::AbstractVector, A::AbstractTriangular, transB::Transpose{<:Any,<:AbstractVecOrMat}) =$/;"	f
mul!	stdlib/LinearAlgebra/src/triangular.jl	/^mul!(C::AbstractVector, A::Adjoint{<:Any,<:AbstractTriangular}, B::Transpose{<:Any,<:AbstractVec/;"	f
mul!	stdlib/LinearAlgebra/src/triangular.jl	/^mul!(C::AbstractVector, A::Transpose{<:Any,<:AbstractTriangular}, B::Transpose{<:Any,<:AbstractV/;"	f
mul!	stdlib/LinearAlgebra/src/uniformscaling.jl	/^@inline mul!(C::AbstractMatrix, A::AbstractMatrix, J::UniformScaling, alpha::Number, beta::Numbe/;"	f
mul!	stdlib/LinearAlgebra/src/uniformscaling.jl	/^@inline mul!(C::AbstractVecOrMat, J::UniformScaling, B::AbstractVecOrMat, alpha::Number, beta::N/;"	f
mul!	stdlib/SparseArrays/src/linalg.jl	/^function mul!(C::AbstractSparseMatrixCSC, A::AbstractSparseMatrixCSC, D::Diagonal{T, <:Vector}) /;"	f
mul!	stdlib/SparseArrays/src/linalg.jl	/^function mul!(C::AbstractSparseMatrixCSC, A::AbstractSparseMatrixCSC, b::Number)$/;"	f
mul!	stdlib/SparseArrays/src/linalg.jl	/^function mul!(C::AbstractSparseMatrixCSC, D::Diagonal{T, <:Vector}, A::AbstractSparseMatrixCSC) /;"	f
mul!	stdlib/SparseArrays/src/linalg.jl	/^function mul!(C::AbstractSparseMatrixCSC, b::Number, A::AbstractSparseMatrixCSC)$/;"	f
mul!	stdlib/SparseArrays/src/linalg.jl	/^function mul!(C::StridedVecOrMat, A::AbstractSparseMatrixCSC, B::Union{StridedVector,AdjOrTransS/;"	f
mul!	stdlib/SparseArrays/src/linalg.jl	/^function mul!(C::StridedVecOrMat, X::AdjOrTransStridedMatrix, A::AbstractSparseMatrixCSC, α::Nu/;"	f
mul!	stdlib/SparseArrays/src/linalg.jl	/^function mul!(C::StridedVecOrMat, X::AdjOrTransStridedMatrix, adjA::Adjoint{<:Any,<:AbstractSpar/;"	f
mul!	stdlib/SparseArrays/src/linalg.jl	/^function mul!(C::StridedVecOrMat, X::AdjOrTransStridedMatrix, transA::Transpose{<:Any,<:Abstract/;"	f
mul!	stdlib/SparseArrays/src/linalg.jl	/^function mul!(C::StridedVecOrMat, adjA::Adjoint{<:Any,<:AbstractSparseMatrixCSC}, B::Union{Strid/;"	f
mul!	stdlib/SparseArrays/src/linalg.jl	/^function mul!(C::StridedVecOrMat, transA::Transpose{<:Any,<:AbstractSparseMatrixCSC}, B::Union{S/;"	f
mul!	stdlib/SparseArrays/src/linalg.jl	/^function mul!(C::StridedVecOrMat{T}, sA::SparseMatrixCSCSymmHerm, B::StridedVecOrMat,$/;"	f
mul!	stdlib/SparseArrays/src/linalg.jl	/^mul!(C::StridedVecOrMat, A::AbstractSparseMatrixCSC, B::Union{StridedVector,AdjOrTransStridedMat/;"	f
mul!	stdlib/SparseArrays/src/linalg.jl	/^mul!(C::StridedVecOrMat, adjA::Adjoint{<:Any,<:AbstractSparseMatrixCSC}, B::Union{StridedVector,/;"	f
mul!	stdlib/SparseArrays/src/linalg.jl	/^mul!(C::StridedVecOrMat, transA::Transpose{<:Any,<:AbstractSparseMatrixCSC}, B::Union{StridedVec/;"	f
mul!	stdlib/SparseArrays/src/linalg.jl	/^mul!(y::StridedVecOrMat, A::SparseMatrixCSCSymmHerm, x::StridedVecOrMat) = mul!(y,A,x,1,0)$/;"	f
mul!	stdlib/SparseArrays/src/sparsevector.jl	/^function mul!(y::AbstractVector, A::AbstractSparseMatrixCSC, x::AbstractSparseVector, α::Number/;"	f
mul!	stdlib/SparseArrays/src/sparsevector.jl	/^function mul!(y::AbstractVector, A::StridedMatrix, x::AbstractSparseVector, α::Number, β::Numb/;"	f
mul!	stdlib/SparseArrays/src/sparsevector.jl	/^function mul!(y::AbstractVector, adjA::Adjoint{<:Any,<:StridedMatrix}, x::AbstractSparseVector, /;"	f
mul!	stdlib/SparseArrays/src/sparsevector.jl	/^function mul!(y::AbstractVector, transA::Transpose{<:Any,<:StridedMatrix}, x::AbstractSparseVect/;"	f
mul!	stdlib/SparseArrays/src/sparsevector.jl	/^mul!(y::AbstractVector, adjA::Adjoint{<:Any,<:AbstractSparseMatrixCSC}, x::AbstractSparseVector,/;"	f
mul!	stdlib/SparseArrays/src/sparsevector.jl	/^mul!(y::AbstractVector, transA::Transpose{<:Any,<:AbstractSparseMatrixCSC}, x::AbstractSparseVec/;"	f
mul!	stdlib/SparseArrays/src/sparsevector.jl	/^mul!(y::AbstractVector{Ty}, A::AbstractSparseMatrixCSC, x::AbstractSparseVector{Tx}) where {Tx,T/;"	f
mul!	stdlib/SparseArrays/src/sparsevector.jl	/^mul!(y::AbstractVector{Ty}, A::StridedMatrix, x::AbstractSparseVector{Tx}) where {Tx,Ty} =$/;"	f
mul!	stdlib/SparseArrays/src/sparsevector.jl	/^mul!(y::AbstractVector{Ty}, adjA::Adjoint{<:Any,<:AbstractSparseMatrixCSC}, x::AbstractSparseVec/;"	f
mul!	stdlib/SparseArrays/src/sparsevector.jl	/^mul!(y::AbstractVector{Ty}, adjA::Adjoint{<:Any,<:StridedMatrix}, x::AbstractSparseVector{Tx}) w/;"	f
mul!	stdlib/SparseArrays/src/sparsevector.jl	/^mul!(y::AbstractVector{Ty}, transA::Transpose{<:Any,<:AbstractSparseMatrixCSC}, x::AbstractSpars/;"	f
mul!	stdlib/SparseArrays/src/sparsevector.jl	/^mul!(y::AbstractVector{Ty}, transA::Transpose{<:Any,<:StridedMatrix}, x::AbstractSparseVector{Tx/;"	f
mul12	base/twiceprecision.jl	/^function mul12(x::T, y::T) where {T<:AbstractFloat}$/;"	f
mul12	base/twiceprecision.jl	/^mul12(x, y) = mul12(promote(x, y)...)$/;"	f
mul12	base/twiceprecision.jl	/^mul12(x::T, y::T) where {T} = (p = x * y; (p, zero(p)))$/;"	f
mul_fast	base/fastmath.jl	/^    mul_fast(a::T, y::Complex{T}) where {T<:FloatTypes} =$/;"	f
mul_fast	base/fastmath.jl	/^    mul_fast(x::Complex{T}, b::T) where {T<:FloatTypes} =$/;"	f
mul_fast	base/fastmath.jl	/^    mul_fast(x::T, y::T) where {T<:ComplexTypes} =$/;"	f
mul_fast	base/fastmath.jl	/^mul_fast(x::T, y::T) where {T<:FloatTypes} = mul_float_fast(x, y)$/;"	f
mul_fast	base/fastmath.jl	/^mul_fast(x::T, y::T, zs::T...) where {T<:FloatTypes} =$/;"	f
mul_prod	base/reduce.jl	/^mul_prod(x, y) = x * y$/;"	f
mul_prod	base/reduce.jl	/^mul_prod(x::SmallSigned, y::SmallSigned) = Int(x) * Int(y)$/;"	f
mul_prod	base/reduce.jl	/^mul_prod(x::SmallUnsigned, y::SmallUnsigned) = UInt(x) * UInt(y)$/;"	f
mul_si	base/gmp.jl	/^mul_si(a::BigInt, b) = mul_si!(BigInt(), a, b)$/;"	f
mul_si!	base/gmp.jl	/^mul_si!(x::BigInt, a::BigInt, b) = (ccall((:__gmpz_mul_si, :libgmp), Cvoid, (mpz_t, mpz_t, Clong/;"	f
mul_si!	base/gmp.jl	/^mul_si!(x::BigInt, b) = mul_si!(x, x, b)$/;"	f
mul_with_overflow	base/checked.jl	/^    function mul_with_overflow(x::T, y::T) where T<:Int128$/;"	f
mul_with_overflow	base/checked.jl	/^    function mul_with_overflow(x::T, y::T) where T<:UInt128$/;"	f
mul_with_overflow	base/checked.jl	/^function mul_with_overflow end$/;"	f
mul_with_overflow	base/checked.jl	/^function mul_with_overflow(x::T, y::T) where T<:BrokenSignedIntMul$/;"	f
mul_with_overflow	base/checked.jl	/^function mul_with_overflow(x::T, y::T) where T<:BrokenUnsignedIntMul$/;"	f
mul_with_overflow	base/checked.jl	/^mul_with_overflow(x::Bool, y::Bool) = (x*y, false)$/;"	f
mul_with_overflow	base/checked.jl	/^mul_with_overflow(x::T, y::T) where {T<:SignedInt}   = checked_smul_int(x, y)$/;"	f
mul_with_overflow	base/checked.jl	/^mul_with_overflow(x::T, y::T) where {T<:UnsignedInt} = checked_umul_int(x, y)$/;"	f
muladd	base/complex.jl	/^muladd(x::Real, y::Real, z::Complex) = Complex(muladd(x,y,real(z)), imag(z))$/;"	f
muladd	base/complex.jl	/^muladd(x::Real, z::Complex, y::Number) = muladd(z, x, y)$/;"	f
muladd	base/complex.jl	/^muladd(z::Complex, w::Complex, x::Complex) =$/;"	f
muladd	base/complex.jl	/^muladd(z::Complex, w::Complex, x::Real) =$/;"	f
muladd	base/complex.jl	/^muladd(z::Complex, x::Real, w::Complex) =$/;"	f
muladd	base/complex.jl	/^muladd(z::Complex, x::Real, y::Real) = Complex(muladd(real(z),x,y), imag(z)*x)$/;"	f
muladd	base/float.jl	/^function muladd(a::Float16, b::Float16, c::Float16)$/;"	f
muladd	base/float.jl	/^muladd(x::Float32, y::Float32, z::Float32) = muladd_float(x, y, z)$/;"	f
muladd	base/float.jl	/^muladd(x::Float64, y::Float64, z::Float64) = muladd_float(x, y, z)$/;"	f
muladd	base/math.jl	/^muladd(x,y,z) = x*y+z$/;"	f
muladd	base/promotion.jl	/^muladd(x::Number, y::Number, z::Number) = muladd(promote(x,y,z)...)$/;"	f
muladd	base/promotion.jl	/^muladd(x::T, y::T, z::T) where {T<:Number} = x*y+z$/;"	f
muladd	src/runtime_intrinsics.c	/^#define muladd(/;"	d	file:
mulpi_ext	base/special/trig.jl	/^function mulpi_ext(x::Float64)$/;"	f
mulpi_ext	base/special/trig.jl	/^mulpi_ext(x::Float32) = DoubleFloat32(pi*Float64(x))$/;"	f
mulpi_ext	base/special/trig.jl	/^mulpi_ext(x::Rational) = mulpi_ext(float(x))$/;"	f
mulpi_ext	base/special/trig.jl	/^mulpi_ext(x::Real) = pi*x # Fallback$/;"	f
mulshift	base/ryu/utils.jl	/^@inline mulshift(m::UInt16, mul, j) = ((((UInt32(m) * (mul % UInt16)) >> 16) + (UInt32(m) * (mul/;"	f
mulshift	base/ryu/utils.jl	/^@inline mulshift(m::UInt32, mul, j) = ((((UInt64(m) * (mul % UInt32)) >> 32) + (UInt64(m) * (mul/;"	f
mulshift	base/ryu/utils.jl	/^@inline mulshift(m::UInt64, mula, mulb, j) = ((((UInt128(m) * mula) >> 64) + UInt128(m) * mulb) /;"	f
mulshiftinvsplit	base/ryu/utils.jl	/^@inline function mulshiftinvsplit(::Type{Float16}, mv, mp, mm, i, j)$/;"	f
mulshiftinvsplit	base/ryu/utils.jl	/^@inline function mulshiftinvsplit(::Type{Float32}, mv, mp, mm, i, j)$/;"	f
mulshiftinvsplit	base/ryu/utils.jl	/^@inline function mulshiftinvsplit(::Type{Float64}, mv, mp, mm, i, j)$/;"	f
mulshiftmod1e9	base/ryu/utils.jl	/^@inline function mulshiftmod1e9(m, mula, mulb, mulc, j)$/;"	f
mulshiftsplit	base/ryu/utils.jl	/^@inline function mulshiftsplit(::Type{Float16}, mv, mp, mm, i, j)$/;"	f
mulshiftsplit	base/ryu/utils.jl	/^@inline function mulshiftsplit(::Type{Float32}, mv, mp, mm, i, j)$/;"	f
mulshiftsplit	base/ryu/utils.jl	/^@inline function mulshiftsplit(::Type{Float64}, mv, mp, mm, i, j)$/;"	f
multi_menu	stdlib/REPL/test/TerminalMenus/multiselect_menu.jl	/^multi_menu = MultiSelectMenu(string.(1:10))$/;"	v
multi_menu	stdlib/REPL/test/TerminalMenus/multiselect_menu.jl	/^multi_menu = MultiSelectMenu(string.(1:20))$/;"	v
multi_meta	test/meta.jl	/^multi_meta = quote$/;"	v
multidoc	base/docs/Docs.jl	/^function multidoc(__source__, __module__, meta, ex::Expr, define::Bool)$/;"	f
multidoc	test/docs.jl	/^function multidoc  end,$/;"	f
multidoc!	test/docs.jl	/^function multidoc! end$/;"	f
multiloc	src/llvm-alloc-opt.cpp	/^        bool multiloc:1;$/;"	m	struct:__anon0a1571000111::Optimizer::Field	typeref:typename:bool:1	file:
multiplicativeinverse	base/multinverses.jl	/^multiplicativeinverse(x::Signed) = SignedMultiplicativeInverse(x)$/;"	f
multiplicativeinverse	base/multinverses.jl	/^multiplicativeinverse(x::Unsigned) = UnsignedMultiplicativeInverse(x)$/;"	f
multiplybypoweroften!	base/grisu/bignums.jl	/^function multiplybypoweroften!(x::Bignum,exponent)$/;"	f
multiplybyuint32!	base/grisu/bignums.jl	/^function multiplybyuint32!(x::Bignum,factor::UInt32)$/;"	f
multiplybyuint64!	base/grisu/bignums.jl	/^function multiplybyuint64!(x::Bignum,factor::UInt64)$/;"	f
multiq_check_empty	src/partr.c	/^static int multiq_check_empty(void)$/;"	f	typeref:typename:int	file:
multiq_deletemin	src/partr.c	/^static inline jl_task_t *multiq_deletemin(void)$/;"	f	typeref:typename:jl_task_t *	file:
multiq_init	src/partr.c	/^static inline void multiq_init(void)$/;"	f	typeref:typename:void	file:
multiq_insert	src/partr.c	/^static inline int multiq_insert(jl_task_t *task, int16_t priority)$/;"	f	typeref:typename:int	file:
mulx!	stdlib/Random/src/DSFMT.jl	/^mulx!(f::GF2X, c::Int=1) = (MPZ.mul_2exp!(f.z, c), f)$/;"	f
mulxmod!	stdlib/Random/src/DSFMT.jl	/^function mulxmod!(f::GF2X, m::GF2X, deg=degree(m))::GF2X$/;"	f
munged_history_message	stdlib/REPL/src/REPL.jl	/^munged_history_message(path::String) = """$/;"	f
mutabl	src/julia.h	/^    uint8_t mutabl;$/;"	m	struct:_jl_datatype_t	typeref:typename:uint8_t
mv	base/file.jl	/^function mv(src::AbstractString, dst::AbstractString; force::Bool=false)$/;"	f
mv_check	test/file.jl	/^    function mv_check(s, d, d_mv, file_txt; force=true)$/;"	f
mv_check	test/file.jl	/^    function mv_check(s, d, d_mv; force=true)$/;"	f
my_func	test/core.jl	/^    my_func(A::MatOrNot{T}, B::MatOrNot{T}, C::MatOrNot{T}) where {T<:Real} = 0$/;"	f
my_func	test/core.jl	/^    my_func(P::Vector{T}, Q::Vector{T}) where {T} = 0$/;"	f
my_func	test/core.jl	/^    my_func(P::Vector{T}, x::T) where {T} = 2$/;"	f
my_func	test/core.jl	/^    my_func(x::T, P::Vector{T}) where {T} = 1$/;"	f
my_intmap	stdlib/SparseArrays/test/sparsevector.jl	/^        function my_intmap(x)$/;"	f
my_ntuple	test/compiler/inference.jl	/^@inline function my_ntuple(f::F, ::Val{N}) where {F,N}$/;"	f
my_sortperm	base/compiler/ssair/ir.jl	/^function my_sortperm(v)$/;"	f
my_tail_const_prop	test/compiler/inference.jl	/^my_tail_const_prop(i, tail...) = tail$/;"	f
myapp	test/embedding/LocalModule.jl	/^function myapp()$/;"	f
myassert4873	test/core.jl	/^macro myassert4873(ex)$/;"	f
mycompare	test/ccall.jl	/^    function mycompare(a, b)::Cint$/;"	f
myeltype	test/compiler/inference.jl	/^myeltype(::Type{Any}) = Any$/;"	f
myeltype	test/compiler/inference.jl	/^myeltype(::Type{Paint{T}}) where {T} = T$/;"	f
myeltype	test/compiler/inference.jl	/^myeltype(::Type{P}) where {P<:Paint} = myeltype(supertype(P))$/;"	f
mygetindex	test/staged.jl	/^@generated function mygetindex(S::SubArray, indices::Real...)$/;"	f
myid	stdlib/Distributed/src/cluster.jl	/^myid() = LPROC.id$/;"	f
myio	test/strings/io.jl	/^myio = IOBuffer()$/;"	v
myrole	stdlib/Distributed/src/cluster.jl	/^myrole() = LPROCROLE[]$/;"	f
myrole!	stdlib/Distributed/src/cluster.jl	/^function myrole!(proctype::Symbol)$/;"	f
mytype	test/core.jl	/^    function mytype(vec)$/;"	f
n	src/flisp/flisp.c	/^    uint32_t n=0;$/;"	v	typeref:typename:uint32_t
n	stdlib/Distributed/test/distributed_exec.jl	/^n = 10$/;"	v
n	stdlib/Distributed/test/distributed_exec.jl	/^n = DoFullTest ? 6 : 5$/;"	v
n	stdlib/Distributed/test/distributed_exec.jl	/^n=5$/;"	v
n	stdlib/FileWatching/test/runtests.jl	/^n = 20$/;"	v
n	stdlib/LinearAlgebra/test/bidiag.jl	/^n = 10 #Size of test matrix$/;"	v
n	stdlib/LinearAlgebra/test/bunchkaufman.jl	/^n = 10$/;"	v
n	stdlib/LinearAlgebra/test/dense.jl	/^n = 10$/;"	v
n	stdlib/LinearAlgebra/test/diagonal.jl	/^n=12 #Size of matrix problem to test$/;"	v
n	stdlib/LinearAlgebra/test/eigen.jl	/^n = 10$/;"	v
n	stdlib/LinearAlgebra/test/generic.jl	/^n = 5 # should be odd$/;"	v
n	stdlib/LinearAlgebra/test/lq.jl	/^n = 10$/;"	v
n	stdlib/LinearAlgebra/test/lu.jl	/^n = 10$/;"	v
n	stdlib/LinearAlgebra/test/qr.jl	/^n = 10$/;"	v
n	stdlib/LinearAlgebra/test/schur.jl	/^n = 10$/;"	v
n	stdlib/LinearAlgebra/test/special.jl	/^n= 10 #Size of matrix to test$/;"	v
n	stdlib/LinearAlgebra/test/svd.jl	/^n = 10$/;"	v
n	stdlib/LinearAlgebra/test/triangular.jl	/^n = 9$/;"	v
n	stdlib/Mmap/src/Mmap.jl	/^n = read(s, Int)$/;"	v
n	stdlib/Mmap/test/runtests.jl	/^n = read(s, Int)$/;"	v
n	stdlib/Mmap/test/runtests.jl	/^n = similar(m)$/;"	v
n	stdlib/Mmap/test/runtests.jl	/^n = similar(m, (2,2))$/;"	v
n	stdlib/Mmap/test/runtests.jl	/^n = similar(m, 12)$/;"	v
n	test/triplequote.jl	/^n = 3$/;"	v
n1	stdlib/LinearAlgebra/test/bunchkaufman.jl	/^n1 = div(n, 2)$/;"	v
n1	stdlib/LinearAlgebra/test/dense.jl	/^n1 = div(n, 2)$/;"	v
n1	stdlib/LinearAlgebra/test/eigen.jl	/^n1 = div(n, 2)$/;"	v
n1	stdlib/LinearAlgebra/test/lq.jl	/^n1 = div(n, 2)$/;"	v
n1	stdlib/LinearAlgebra/test/lu.jl	/^n1 = div(n, 2)$/;"	v
n1	stdlib/LinearAlgebra/test/qr.jl	/^n1 = div(n, 2)$/;"	v
n1	stdlib/LinearAlgebra/test/schur.jl	/^n1 = div(n, 2)$/;"	v
n1	test/broadcast.jl	/^n1 = 21$/;"	v
n2	stdlib/LinearAlgebra/test/bunchkaufman.jl	/^n2 = 2*n1$/;"	v
n2	stdlib/LinearAlgebra/test/dense.jl	/^n2 = 2*n1$/;"	v
n2	stdlib/LinearAlgebra/test/eigen.jl	/^n2 = 2*n1$/;"	v
n2	stdlib/LinearAlgebra/test/lq.jl	/^n2 = 2*n1$/;"	v
n2	stdlib/LinearAlgebra/test/lu.jl	/^n2 = 2*n1$/;"	v
n2	stdlib/LinearAlgebra/test/qr.jl	/^n2 = 2*n1$/;"	v
n2	stdlib/LinearAlgebra/test/schur.jl	/^n2 = 2*n1$/;"	v
n2	test/broadcast.jl	/^n2 = 32$/;"	v
n3	test/broadcast.jl	/^n3 = 17$/;"	v
nReqArgs	src/codegen.cpp	/^    int nReqArgs = 0;$/;"	m	class:jl_codectx_t	typeref:typename:int	file:
nVidia Jetson TX2	doc/build/arm.md	/^### nVidia Jetson TX2$/;"	S
n_allocd	src/flisp/flisp.h	/^    long long n_allocd;$/;"	m	struct:_fl_context_t	typeref:typename:long long
n_avail	base/channels.jl	/^n_avail(c::Channel) = isbuffered(c) ? length(c.data) : length(c.cond_put.waitq)$/;"	f
n_descsz	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word n_descsz;			\/* Length of the note's descriptor.  *\/$/;"	m	struct:__anonff7a58691f08	typeref:typename:Elf32_Word
n_descsz	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Word n_descsz;			\/* Length of the note's descriptor.  *\/$/;"	m	struct:__anonff7a58692008	typeref:typename:Elf64_Word
n_int_literals	stdlib/Serialization/src/Serialization.jl	/^const n_int_literals = 33$/;"	v
n_namesz	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word n_namesz;			\/* Length of the note's name.  *\/$/;"	m	struct:__anonff7a58691f08	typeref:typename:Elf32_Word
n_namesz	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Word n_namesz;			\/* Length of the note's name.  *\/$/;"	m	struct:__anonff7a58692008	typeref:typename:Elf64_Word
n_reserved_slots	stdlib/Serialization/src/Serialization.jl	/^const n_reserved_slots = 24$/;"	v
n_reserved_tags	stdlib/Serialization/src/Serialization.jl	/^const n_reserved_tags = 12$/;"	v
n_samples	stdlib/LinearAlgebra/test/addmul.jl	/^n_samples = 1.5$/;"	v
n_type	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word n_type;			\/* Type of the note.  *\/$/;"	m	struct:__anonff7a58691f08	typeref:typename:Elf32_Word
n_type	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Word n_type;			\/* Type of the note.  *\/$/;"	m	struct:__anonff7a58692008	typeref:typename:Elf64_Word
n_waiters	base/condition.jl	/^n_waiters(c::GenericCondition) = length(c.waitq)$/;"	f
nadt	src/support/strptime.c	/^static const char * const nadt[5] = {$/;"	v	typeref:typename:const char * const[5]	file:
nagle	stdlib/Sockets/src/Sockets.jl	/^function nagle(sock::Union{TCPServer, TCPSocket}, enable::Bool)$/;"	f
naive_idoms	base/compiler/ssair/domtree.jl	/^function naive_idoms(cfg::CFG)$/;"	f
naivesub!	stdlib/LinearAlgebra/src/bidiag.jl	/^function naivesub!(A::Bidiagonal{T}, b::AbstractVector, x::AbstractVector = b) where T$/;"	f
naivesub!	stdlib/LinearAlgebra/src/triangular.jl	/^function naivesub!(A::LowerTriangular, b::AbstractVector, x::AbstractVector = b)$/;"	f
naivesub!	stdlib/LinearAlgebra/src/triangular.jl	/^function naivesub!(A::UnitLowerTriangular, b::AbstractVector, x::AbstractVector = b)$/;"	f
naivesub!	stdlib/LinearAlgebra/src/triangular.jl	/^function naivesub!(A::UnitUpperTriangular, b::AbstractVector, x::AbstractVector = b)$/;"	f
naivesub!	stdlib/LinearAlgebra/src/triangular.jl	/^function naivesub!(A::UpperTriangular, b::AbstractVector, x::AbstractVector = b)$/;"	f
nall	base/cartesian.jl	/^macro nall(N::Int, criterion::Expr)$/;"	f
name	src/codegen.cpp	/^    const char *name = NULL;$/;"	m	class:jl_codectx_t	typeref:typename:const char *	file:
name	src/flisp/flisp.h	/^    const char *name;$/;"	m	struct:__anonb455601d0808	typeref:typename:const char *
name	src/flisp/flisp.h	/^    value_t name;$/;"	m	struct:__anonb455601d0708	typeref:typename:value_t
name	src/getopt.h	/^  const char *name;$/;"	m	struct:option	typeref:typename:const char *
name	src/julia.h	/^    jl_sym_t *name;  \/\/ for error reporting$/;"	m	struct:_jl_method_t	typeref:typename:JL_DATA_TYPE jl_sym_t *
name	src/julia.h	/^    jl_sym_t *name; \/\/ sometimes a hack used by serialization to handle kwsorter$/;"	m	struct:_jl_methtable_t	typeref:typename:JL_DATA_TYPE jl_sym_t *
name	src/julia.h	/^    jl_sym_t *name;$/;"	m	struct:__anon055fe4270808	typeref:typename:JL_DATA_TYPE jl_sym_t *
name	src/julia.h	/^    jl_sym_t *name;$/;"	m	struct:__anon055fe4270a08	typeref:typename:JL_DATA_TYPE jl_sym_t *
name	src/julia.h	/^    jl_sym_t *name;$/;"	m	struct:__anon055fe4271108	typeref:typename:jl_sym_t *
name	src/julia.h	/^    jl_sym_t *name;$/;"	m	struct:_jl_module_t	typeref:typename:JL_DATA_TYPE jl_sym_t *
name	src/julia.h	/^    jl_typename_t *name;$/;"	m	struct:_jl_datatype_t	typeref:typename:JL_DATA_TYPE jl_typename_t *
name	src/llvm-pass-helpers.h	/^        llvm::StringRef name;$/;"	m	struct:jl_intrinsics::IntrinsicDescription	typeref:typename:llvm::StringRef
name	src/processor.cpp	/^    const char *name;$/;"	m	struct:__anon839834ed0111::CPUSpec	typeref:typename:const char *	file:
name	src/processor.cpp	/^    const char *name;$/;"	m	struct:__anon839834ed0111::FeatureName	typeref:typename:const char *	file:
name	src/processor.cpp	/^    std::string name;$/;"	m	struct:__anon839834ed0111::TargetData	typeref:typename:std::string	file:
name	stdlib/LibGit2/src/reference.jl	/^function name(ref::GitReference)$/;"	f
name	stdlib/LibGit2/src/remote.jl	/^function name(rmt::GitRemote)$/;"	f
name	stdlib/LibGit2/src/tag.jl	/^function name(tag::GitTag)$/;"	f
name_from_method_instance	src/codegen.cpp	/^const char *name_from_method_instance(jl_method_instance_t *mi)$/;"	f	typeref:typename:const char *
named-gensy	src/ast.scm	/^(define (named-gensy name)$/;"	f
named-tuple-expr	src/julia-syntax.scm	/^(define (named-tuple-expr names values)$/;"	f
namedtuple_fieldtype__	test/namedtuple.jl	/^namedtuple_fieldtype__(x, y) = fieldtype(typeof(x), y)$/;"	f
namedtuple_fieldtype_a	test/namedtuple.jl	/^namedtuple_fieldtype_a(x) = fieldtype(typeof(x), :a)$/;"	f
namedtuple_get_a	test/namedtuple.jl	/^namedtuple_get_a(x) = x.a$/;"	f
namedtuple_nfields	test/namedtuple.jl	/^namedtuple_nfields(x) = nfields(x) === 0 ? 1 : ""$/;"	f
namemap	base/Enums.jl	/^function namemap end$/;"	f
nameof	base/reflection.jl	/^function nameof(f::Function)$/;"	f
nameof	base/reflection.jl	/^nameof(m::Module) = ccall(:jl_module_name, Ref{Symbol}, (Any,), m)$/;"	f
nameof	base/reflection.jl	/^nameof(t::DataType) = t.name.name$/;"	f
nameof	base/reflection.jl	/^nameof(t::UnionAll) = nameof(unwrap_unionall(t))::Symbol$/;"	f
names	base/reflection.jl	/^names(m::Module; all::Bool = false, imported::Bool = false) =$/;"	f
names	src/julia.h	/^    jl_svec_t *names;  \/\/ field names$/;"	m	struct:__anon055fe4270a08	typeref:typename:jl_svec_t *
names	src/julia.h	/^    jl_svec_t *names;$/;"	m	struct:_jl_datatype_t	typeref:typename:jl_svec_t *
names_before_timing	test/misc.jl	/^names_before_timing = names(@__MODULE__, all = true)$/;"	v
namespace_dns	stdlib/UUIDs/src/UUIDs.jl	/^const namespace_dns  = UUID(0x6ba7b8109dad11d180b400c04fd430c8) # 6ba7b810-9dad-11d1-80b4-00c04f/;"	v
namespace_oid	stdlib/UUIDs/src/UUIDs.jl	/^const namespace_oid  = UUID(0x6ba7b8129dad11d180b400c04fd430c8) # 6ba7b812-9dad-11d1-80b4-00c04f/;"	v
namespace_url	stdlib/UUIDs/src/UUIDs.jl	/^const namespace_url  = UUID(0x6ba7b8119dad11d180b400c04fd430c8) # 6ba7b811-9dad-11d1-80b4-00c04f/;"	v
namespace_x500	stdlib/UUIDs/src/UUIDs.jl	/^const namespace_x500 = UUID(0x6ba7b8149dad11d180b400c04fd430c8) # 6ba7b814-9dad-11d1-80b4-00c04f/;"	v
namify	base/docs/Docs.jl	/^namify(@nospecialize x) = astname(x, isexpr(x, :macro))$/;"	f
nan_dom_err	base/math.jl	/^@inline nan_dom_err(out, x) = isnan(out) & !isnan(x) ? throw(DomainError(x, "NaN result for non-/;"	f
nanosecond	stdlib/Dates/src/accessors.jl	/^nanosecond(t::Time) = mod(value(t), Int64(1000))$/;"	f
nans2end!	base/sort.jl	/^nans2end!(v::AbstractVector, o::ForwardOrdering) = nans2right!(v,o)$/;"	f
nans2end!	base/sort.jl	/^nans2end!(v::AbstractVector, o::ReverseOrdering) = nans2left!(v,o)$/;"	f
nans2end!	base/sort.jl	/^nans2end!(v::AbstractVector{Int}, o::Perm{<:ForwardOrdering}) = nans2right!(v,o)$/;"	f
nans2end!	base/sort.jl	/^nans2end!(v::AbstractVector{Int}, o::Perm{<:ReverseOrdering}) = nans2left!(v,o)$/;"	f
nans2left!	base/sort.jl	/^function nans2left!(v::AbstractVector, o::Ordering, lo::Int=first(axes(v,1)), hi::Int=last(axes(/;"	f
nans2right!	base/sort.jl	/^function nans2right!(v::AbstractVector, o::Ordering, lo::Int=first(axes(v,1)), hi::Int=last(axes/;"	f
nanstr	base/grisu/grisu.jl	/^nanstr(x::AbstractFloat) = "NaN"$/;"	f
nanstr	base/grisu/grisu.jl	/^nanstr(x::Float16) = "NaN16"$/;"	f
nanstr	base/grisu/grisu.jl	/^nanstr(x::Float32) = "NaN32"$/;"	f
nany	base/cartesian.jl	/^macro nany(N::Int, criterion::Expr)$/;"	f
nargs	src/abi_win64.cpp	/^int nargs;$/;"	m	struct:ABI_Win64Layout	typeref:typename:int	file:
nargs	src/codegen.cpp	/^    int nargs = 0;$/;"	m	class:jl_codectx_t	typeref:typename:int	file:
nargs	src/interpreter.c	/^    uint32_t nargs;$/;"	m	struct:jl_interpret_call_args	typeref:typename:uint32_t	file:
nargs	src/julia.h	/^    int32_t nargs;$/;"	m	struct:_jl_method_t	typeref:typename:int32_t
narrow	base/twiceprecision.jl	/^narrow(::Type{Float16}) = Float16$/;"	f
narrow	base/twiceprecision.jl	/^narrow(::Type{Float32}) = Float16$/;"	f
narrow	base/twiceprecision.jl	/^narrow(::Type{Float64}) = Float32$/;"	f
narrow	base/twiceprecision.jl	/^narrow(::Type{T}) where {T<:AbstractFloat} = Float64$/;"	f
nast	src/support/strptime.c	/^static const char * const nast[5] = {$/;"	v	typeref:typename:const char * const[5]	file:
native_sym_arg_t	src/ccall.cpp	/^} native_sym_arg_t;$/;"	t	typeref:struct:__anonc9e75fcc0208	file:
natived	src/julia.h	/^    uint8_t natived;$/;"	m	struct:_jl_code_instance_t	typeref:typename:uint8_t
natived_list	src/dump.c	/^static arraylist_t natived_list;$/;"	v	typeref:typename:arraylist_t	file:
nav.toc h1	doc/src/assets/julia-manual.css	/^nav.toc h1 {$/;"	s
nbig_obj	src/julia_threads.h	/^    size_t nbig_obj;$/;"	m	struct:__anonf8aecdb10808	typeref:typename:size_t
nbits	src/processor.cpp	/^    inline int nbits() const$/;"	f	struct:__anon839834ed0111::FeatureList	typeref:typename:int	file:
nbitslen	base/twiceprecision.jl	/^nbitslen(::Type{T}, len, offset) where {T<:IEEEFloat} =$/;"	f
nbitslen	base/twiceprecision.jl	/^nbitslen(len, offset) = len < 2 ? 0 : ceil(Int, log2(max(offset-1, len-offset))) + 1$/;"	f
nbitslen	base/twiceprecision.jl	/^nbitslen(r::StepRangeLen) = nbitslen(eltype(r), length(r), r.offset)$/;"	f
nblocks	src/cgmemmgr.cpp	/^    static constexpr int nblocks = 8;$/;"	m	class:__anon06c686bc0111::ROAllocator	typeref:typename:int	file:
nblocks	src/cgmemmgr.cpp	/^    static constexpr int nblocks = 8;$/;"	m	class:__anon06c686bc0111::RWAllocator	typeref:typename:int	file:
ncall	base/cartesian.jl	/^macro ncall(N::Int, f, args...)$/;"	f
ncalls	src/gf.c	/^size_t ncalls;$/;"	v	typeref:typename:size_t
nccallargs	src/ccall.cpp	/^    size_t nccallargs; \/\/ number of actual arguments$/;"	m	class:function_sig_t	typeref:typename:size_t	file:
nclones	src/processor.h	/^    uint32_t nclones;$/;"	m	struct:_jl_sysimg_fptrs_t	typeref:typename:uint32_t
ncode_in_flight	src/debuginfo.cpp	/^static StringMap<jl_code_instance_t*> ncode_in_flight;$/;"	v	typeref:typename:StringMap<jl_code_instance_t * >	file:
ncodeunits	base/char.jl	/^ncodeunits(c::Char) = write(devnull, c) # this is surprisingly efficient$/;"	f
ncodeunits	base/regex.jl	/^ncodeunits(s::SubstitutionString) = ncodeunits(s.string)$/;"	f
ncodeunits	base/strings/string.jl	/^ncodeunits(s::String) = Core.sizeof(s)$/;"	f
ncodeunits	base/strings/substring.jl	/^ncodeunits(s::SubString) = s.ncodeunits$/;"	f
ncols	src/julia.h	/^        size_t ncols;$/;"	m	union:__anon055fe4270408::__anon055fe427050a	typeref:typename:size_t
ncpu_names	src/processor_arm.cpp	/^static constexpr size_t ncpu_names = sizeof(cpus) \/ sizeof(cpus[0]);$/;"	v	namespace:ARM	typeref:typename:size_t	file:
ncpu_names	src/processor_x86.cpp	/^static constexpr size_t ncpu_names = sizeof(cpus) \/ sizeof(cpus[0]);$/;"	v	namespace:X86	typeref:typename:size_t	file:
ndigf	test/numbers.jl	/^ndigf(n) = Float64(log(Float32(n)))$/;"	f
ndigits	base/intfuncs.jl	/^ndigits(x::Integer; base::Integer=10, pad::Integer=1) = max(pad, ndigits0z(x, base))$/;"	f
ndigits0z	base/intfuncs.jl	/^function ndigits0z(x::Integer, b::Integer)$/;"	f
ndigits0z	base/intfuncs.jl	/^ndigits0z(x::BitSigned) = bit_ndigits0z(unsigned(abs(x)))$/;"	f
ndigits0z	base/intfuncs.jl	/^ndigits0z(x::BitUnsigned) = bit_ndigits0z(x)$/;"	f
ndigits0z	base/intfuncs.jl	/^ndigits0z(x::Integer) = ndigits0zpb(x, 10)$/;"	f
ndigits0znb	base/intfuncs.jl	/^function ndigits0znb(x::Integer, b::Integer)$/;"	f
ndigits0znb	base/intfuncs.jl	/^ndigits0znb(x::Bool, b::Integer) = x % Int$/;"	f
ndigits0zpb	base/gmp.jl	/^function ndigits0zpb(x::BigInt, b::Integer)$/;"	f
ndigits0zpb	base/intfuncs.jl	/^function ndigits0zpb(x::Integer, b::Integer)$/;"	f
ndigits0zpb	base/intfuncs.jl	/^ndigits0zpb(x::Bool, b::Integer) = x % Int$/;"	f
ndigits_mismatch	test/bigint.jl	/^    ndigits_mismatch(n) = ndigits(n) != ndigits(BigInt(n))$/;"	f
ndims	base/abstractarray.jl	/^ndims(::AbstractArray{T,N}) where {T,N} = N$/;"	f
ndims	base/abstractarray.jl	/^ndims(::Type{<:AbstractArray{T,N}}) where {T,N} = N$/;"	f
ndims	base/char.jl	/^ndims(::Type{<:AbstractChar}) = 0$/;"	f
ndims	base/char.jl	/^ndims(c::AbstractChar) = 0$/;"	f
ndims	base/generator.jl	/^ndims(g::Generator) = ndims(g.iter)$/;"	f
ndims	base/iterators.jl	/^ndims(p::ProductIterator) = length(axes(p))$/;"	f
ndims	base/multidimensional.jl	/^    ndims(::Type{CartesianIndices{N,TT}}) where {N,TT} = N$/;"	f
ndims	base/multidimensional.jl	/^    ndims(::Type{CartesianIndices{N}}) where {N} = N$/;"	f
ndims	base/multidimensional.jl	/^    ndims(R::CartesianIndices) = ndims(typeof(R))$/;"	f
ndims	base/number.jl	/^ndims(::Type{<:Number}) = 0$/;"	f
ndims	base/number.jl	/^ndims(x::Number) = 0$/;"	f
ndims	base/refpointer.jl	/^ndims(::Type{<:Ref}) = 0$/;"	f
ndims	base/refpointer.jl	/^ndims(x::Ref) = 0$/;"	f
ndims	src/julia.h	/^    uint16_t ndims:10;$/;"	m	struct:__anon055fe4270308	typeref:typename:uint16_t:10
ndims	stdlib/LinearAlgebra/src/uniformscaling.jl	/^ndims(J::UniformScaling) = 2$/;"	f
ne	src/runtime_intrinsics.c	/^#define /;"	d	file:
ne_fast	base/fastmath.jl	/^    ne_fast(x::T, y::T) where {T<:ComplexTypes} = !(x==y)$/;"	f
ne_fast	base/fastmath.jl	/^ne_fast(x::T, y::T) where {T<:FloatTypes} = ne_float_fast(x, y)$/;"	f
needPassByRef	src/abi_aarch64.cpp	/^bool needPassByRef(jl_datatype_t *dt, AttrBuilder &ab) override$/;"	f	struct:ABI_AArch64Layout	typeref:typename:bool	file:
needPassByRef	src/abi_arm.cpp	/^bool needPassByRef(jl_datatype_t *dt, AttrBuilder &ab) override$/;"	f	struct:ABI_ARMLayout	typeref:typename:bool	file:
needPassByRef	src/abi_llvm.cpp	/^bool needPassByRef(jl_datatype_t *ty, AttrBuilder &ab) override$/;"	f	struct:ABI_LLVMLayout	typeref:typename:bool	file:
needPassByRef	src/abi_ppc64le.cpp	/^bool needPassByRef(jl_datatype_t *dt, AttrBuilder &ab) override$/;"	f	struct:ABI_PPC64leLayout	typeref:typename:bool	file:
needPassByRef	src/abi_win32.cpp	/^bool needPassByRef(jl_datatype_t *dt, AttrBuilder &ab) override$/;"	f	struct:ABI_Win32Layout	typeref:typename:bool	file:
needPassByRef	src/abi_win64.cpp	/^bool needPassByRef(jl_datatype_t *dt, AttrBuilder &ab) override$/;"	f	struct:ABI_Win64Layout	typeref:typename:bool	file:
needPassByRef	src/abi_x86.cpp	/^bool needPassByRef(jl_datatype_t *dt, AttrBuilder &ab) override$/;"	f	struct:ABI_x86Layout	typeref:typename:bool	file:
needPassByRef	src/abi_x86_64.cpp	/^bool needPassByRef(jl_datatype_t *dt, AttrBuilder &ab) override$/;"	f	struct:ABI_x86_64Layout	typeref:typename:bool	file:
need_full_hex	base/strings/io.jl	/^need_full_hex(c::Union{Nothing, AbstractChar}) = c !== nothing && isxdigit(c)$/;"	f
need_update	stdlib/LibGit2/src/LibGit2.jl	/^function need_update(repo::GitRepo)$/;"	f
neededLibsToAdd	deps/srccache/patchelf-0.9/src/patchelf.cc	/^static set<string> neededLibsToAdd;$/;"	v	typeref:typename:set<string>	file:
neededLibsToRemove	deps/srccache/patchelf-0.9/src/patchelf.cc	/^static set<string> neededLibsToRemove;$/;"	v	typeref:typename:set<string>	file:
neededLibsToReplace	deps/srccache/patchelf-0.9/src/patchelf.cc	/^static map<string, string> neededLibsToReplace;$/;"	v	typeref:typename:map<string,string>	file:
neededdigits	base/ryu/Ryu.jl	/^neededdigits(::Type{Float16}) = 9 + 5$/;"	f
neededdigits	base/ryu/Ryu.jl	/^neededdigits(::Type{Float32}) = 39 + 9$/;"	f
neededdigits	base/ryu/Ryu.jl	/^neededdigits(::Type{Float64}) = 309 + 17$/;"	f
needsSymRefreshModuleList	src/stackwalk.c	/^int needsSymRefreshModuleList;$/;"	v	typeref:typename:int
needs_resetstkoflw	src/julia_threads.h	/^    int needs_resetstkoflw;$/;"	m	struct:_jl_tls_states_t	typeref:typename:int
needsquare	stdlib/LinearAlgebra/test/addmul.jl	/^needsquare(::Type) = true$/;"	f
needsquare	stdlib/LinearAlgebra/test/addmul.jl	/^needsquare(::Type{<:Matrix}) = false$/;"	f
neg	src/runtime_intrinsics.c	/^#define neg(/;"	d	file:
neg_float	src/runtime_intrinsics.c	/^#define neg_float(/;"	d	file:
negative_refcount_error	stdlib/LibGit2/src/LibGit2.jl	/^@noinline function negative_refcount_error(x::Int)$/;"	f
nehalem	src/processor_x86.cpp	/^constexpr auto nehalem = penryn | get_feature_masks(sse42, popcnt);$/;"	v	namespace:X86::Feature	typeref:typename:auto
nerrors	stdlib/SHA/test/runtests.jl	/^nerrors = 0$/;"	v
nerrors_old	stdlib/SHA/test/runtests.jl	/^nerrors_old = nerrors$/;"	v
nest1	test/errorshow.jl	/^macro nest1(code)$/;"	f
nest2	test/errorshow.jl	/^macro nest2(code)$/;"	f
nest2b	test/errorshow.jl	/^macro nest2b(code)$/;"	f
nested_LINE_expansion	test/loading.jl	/^macro nested_LINE_expansion()$/;"	f
nested_LINE_expansion2	test/loading.jl	/^macro nested_LINE_expansion2()$/;"	f
nested_compile	src/codegen.cpp	/^static bool nested_compile = false;$/;"	v	typeref:typename:bool	file:
nested_error_expr	test/client.jl	/^nested_error_expr = quote$/;"	v
nested_error_pattern	test/client.jl	/^nested_error_pattern = r"""$/;"	v
never_id_char	src/flisp/julia_extensions.c	/^static int never_id_char(uint32_t wc)$/;"	f	typeref:typename:int	file:
new	base/set.jl	/^    @inline function new(x)$/;"	f
new-call	src/julia-syntax.scm	/^(define (new-call Tname type-params sparams params args field-names field-types)$/;"	f
new-expansion-env-for	src/macroexpand.scm	/^(define (new-expansion-env-for x env (outermost #f))$/;"	f
newGCFrame	src/llvm-pass-helpers.cpp	/^    const IntrinsicDescription newGCFrame($/;"	v	namespace:jl_intrinsics	typeref:typename:const IntrinsicDescription
newInterpreter	deps/srccache/patchelf-0.9/src/patchelf.cc	/^static string newInterpreter;$/;"	v	typeref:typename:string	file:
newRPath	deps/srccache/patchelf-0.9/src/patchelf.cc	/^static string newRPath;$/;"	v	typeref:typename:string	file:
newSoname	deps/srccache/patchelf-0.9/src/patchelf.cc	/^static string newSoname;$/;"	v	typeref:typename:string	file:
new_binding	src/module.c	/^static jl_binding_t *new_binding(jl_sym_t *name)$/;"	f	typeref:typename:jl_binding_t *	file:
new_head	stdlib/LibGit2/src/LibGit2.jl	/^new_head = LibGit2.reset!(repo, head_oid, LibGit2.Consts.RESET_HARD)$/;"	v
new_head	stdlib/LibGit2/src/LibGit2.jl	/^new_head = LibGit2.reset!(repo, head_oid, mode)$/;"	v
new_i	src/llvm-alloc-opt.cpp	/^                Instruction *new_i;$/;"	m	union:__anon0a1571000111::Optimizer::ReplaceUses::Frame::__anon0a157100020a	typeref:typename:Instruction *	file:
new_license	contrib/add_license_to_files.jl	/^const new_license = "This file is a part of Julia. License is MIT: https:\/\/julialang.org\/lice/;"	v
new_state	stdlib/REPL/test/lineedit.jl	/^function new_state()$/;"	f
new_sym	src/ast.c	/^jl_sym_t *new_sym;     jl_sym_t *using_sym;$/;"	v	typeref:typename:jl_sym_t *
new_to_regular	base/compiler/ssair/slot2ssa.jl	/^function new_to_regular(@nospecialize(stmt), new_offset::Int)$/;"	f
newentry	src/gf.c	/^    jl_typemap_entry_t *newentry;$/;"	m	struct:ambiguous_matches_env	typeref:typename:jl_typemap_entry_t *	file:
newfile	test/file.jl	/^newfile = joinpath(dir, "bfile.txt")$/;"	v
newfunc	stdlib/Test/test/runtests.jl	/^function newfunc()$/;"	f
newindex	base/broadcast.jl	/^@inline newindex(I::CartesianIndex, keep, Idefault) = CartesianIndex(_newindex(I.I, keep, Idefau/;"	f
newindex	base/broadcast.jl	/^@inline newindex(i::Integer, keep::Tuple{Bool}, idefault) = ifelse(keep[1], i, idefault[1])$/;"	f
newindex	base/broadcast.jl	/^@inline newindex(i::Integer, keep::Tuple{}, idefault) = CartesianIndex(())$/;"	f
newindex	base/broadcast.jl	/^Base.@propagate_inbounds newindex(arg, I::CartesianIndex) = CartesianIndex(_newindex(axes(arg), /;"	f
newindex	base/broadcast.jl	/^Base.@propagate_inbounds newindex(arg, I::Integer) = CartesianIndex(_newindex(axes(arg), (I,)))$/;"	f
newindexer	base/broadcast.jl	/^@inline newindexer(A) = shapeindexer(axes(A))$/;"	f
newline?	src/julia-parser.scm	/^(define (newline? c) (eqv? c #\\newline))$/;"	f
newlinesym	src/flisp/flisp.h	/^    value_t nulsym, alarmsym, backspacesym, tabsym, linefeedsym, newlinesym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
newpages	src/julia_threads.h	/^    jl_taggedvalue_t *newpages;   \/\/ root of list of chunks of free objects$/;"	m	struct:__anonf8aecdb10408	typeref:typename:jl_taggedvalue_t *
newtype10373	test/core.jl	/^mutable struct newtype10373$/;"	f
newvar_sym	src/ast.c	/^jl_sym_t *dot_sym;    jl_sym_t *newvar_sym;$/;"	v	typeref:typename:jl_sym_t *
newyears	stdlib/Dates/test/adjusters.jl	/^        newyears(y) = (y, 1, 1)$/;"	f
nexprs	base/cartesian.jl	/^macro nexprs(N::Int, ex::Expr)$/;"	f
next	src/ast.c	/^    struct _jl_ast_context_list_t *next;$/;"	m	struct:_jl_ast_context_list_t	typeref:struct:_jl_ast_context_list_t *	file:
next	src/gc.c	/^    struct jl_gc_callback_list_t *next;$/;"	m	struct:jl_gc_callback_list_t	typeref:struct:jl_gc_callback_list_t *	file:
next	src/gc.h	/^    struct _bigval_t *next;$/;"	m	struct:_bigval_t	typeref:struct:_bigval_t *
next	src/gc.h	/^    struct _mallocarray_t *next;$/;"	m	struct:_mallocarray_t	typeref:struct:_mallocarray_t *
next	src/gc.h	/^    uint64_t next;$/;"	m	struct:__anoncf30557c0108	typeref:typename:uint64_t
next	src/init.c	/^struct uv_shutdown_queue_item { uv_handle_t *h; struct uv_shutdown_queue_item *next; };$/;"	m	struct:uv_shutdown_queue_item	typeref:struct:uv_shutdown_queue_item *	file:
next	src/julia.h	/^        jl_taggedvalue_t *next;$/;"	m	union:_jl_taggedvalue_t::__anon055fe427010a	typeref:typename:jl_taggedvalue_t *
next	src/julia.h	/^    jl_value_t *next; \/\/ invasive linked list for scheduler$/;"	m	struct:_jl_task_t	typeref:typename:JL_DATA_TYPE jl_value_t *
next	src/julia.h	/^    struct _jl_code_instance_t *next; \/\/ pointer to the next cache entry$/;"	m	struct:_jl_code_instance_t	typeref:struct:_jl_code_instance_t *
next	src/julia.h	/^    struct _jl_typemap_entry_t *next; \/\/ invasive linked list$/;"	m	struct:_jl_typemap_entry_t	typeref:struct:_jl_typemap_entry_t *
next	src/llvm-late-gc-lowering.cpp	/^    int next() {$/;"	f	struct:PEOIterator	typeref:typename:int	file:
next	src/llvm-multiversioning.cpp	/^        void next()$/;"	f	struct:__anond5683ea40111::ConstantUses::Frame	typeref:typename:void	file:
next	src/llvm-multiversioning.cpp	/^    void next()$/;"	f	struct:__anond5683ea40111::ConstantUses	typeref:typename:void	file:
next-token	src/julia-parser.scm	/^(define (next-token port s)$/;"	f
nextL	base/abstractarray.jl	/^nextL(L, l::Integer) = L*l$/;"	f
nextL	base/abstractarray.jl	/^nextL(L, r::AbstractUnitRange) = L*unsafe_length(r)$/;"	f
nextL	base/abstractarray.jl	/^nextL(L, r::Slice) = L*unsafe_length(r.indices)$/;"	f
next_ctr	test/asyncmap.jl	/^    next_ctr() = (ctr+=1; ctr)$/;"	f
next_power_of_two	src/support/dtypes.h	/^STATIC_INLINE unsigned int next_power_of_two(unsigned int val) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE unsigned int
next_ref_id	stdlib/Distributed/src/messages.jl	/^next_ref_id() = (id = REF_ID[]; REF_ID[] = id+1; id)$/;"	f
next_shutdown_queue_item	src/init.c	/^static struct uv_shutdown_queue_item *next_shutdown_queue_item(struct uv_shutdown_queue_item *it/;"	f	typeref:struct:uv_shutdown_queue_item *	file:
next_tunnel_port	stdlib/Distributed/src/managers.jl	/^    function next_tunnel_port()$/;"	f
nextchar	src/flisp/read.c	/^static char nextchar(fl_context_t *fl_ctx)$/;"	f	typeref:typename:char	file:
nextfloat	base/float.jl	/^function nextfloat(f::IEEEFloat, d::Integer)$/;"	f
nextfloat	base/float.jl	/^nextfloat(x::AbstractFloat) = nextfloat(x,1)$/;"	f
nextfloat	base/mpfr.jl	/^nextfloat(x::BigFloat, n::Integer=1) = n == 0 ? x : nextfloat!(_duplicate(x), n)$/;"	f
nextfloat!	base/mpfr.jl	/^function nextfloat!(x::BigFloat, n::Integer=1)$/;"	f
nextind	base/abstractarray.jl	/^nextind(::AbstractArray, i::Integer) = Int(i)+1$/;"	f
nextind	base/strings/basic.jl	/^function nextind(s::AbstractString, i::Int, n::Int)$/;"	f
nextind	base/strings/basic.jl	/^nextind(s::AbstractString, i::Int)                 = nextind(s, i, 1)$/;"	f
nextind	base/strings/basic.jl	/^nextind(s::AbstractString, i::Integer)             = nextind(s, Int(i))$/;"	f
nextind	base/strings/basic.jl	/^nextind(s::AbstractString, i::Integer, n::Integer) = nextind(s, Int(i), Int(n))$/;"	f
nextind	base/strings/string.jl	/^Base.@propagate_inbounds nextind(s::String, i::Int) = _nextind_str(s, i)$/;"	f
nextind	base/strings/substring.jl	/^nextind(s::SubString{String}, i::Int) = _nextind_str(s, i)$/;"	f
nextind	base/tuple.jl	/^nextind(@nospecialize(t::Tuple), i::Integer) = Int(i)+1$/;"	f
nextmajor	base/version.jl	/^nextmajor(v::VersionNumber) = v < thismajor(v) ? thismajor(v) : VersionNumber(v.major+1, 0, 0)$/;"	f
nextminor	base/version.jl	/^nextminor(v::VersionNumber) = v < thisminor(v) ? thisminor(v) : VersionNumber(v.major, v.minor+1/;"	f
nextpatch	base/version.jl	/^nextpatch(v::VersionNumber) = v < thispatch(v) ? thispatch(v) : VersionNumber(v.major, v.minor, /;"	f
nextpow	base/intfuncs.jl	/^function nextpow(a::Real, x::Real)$/;"	f
nextproc	stdlib/Distributed/src/macros.jl	/^    function nextproc()$/;"	f
nextprod	base/combinatorics.jl	/^function nextprod(a::Vector{Int}, x)$/;"	f
nextract	base/cartesian.jl	/^macro nextract(N::Int, esym::Symbol, ex::Expr)$/;"	f
nextract	base/cartesian.jl	/^macro nextract(N::Int, esym::Symbol, isym::Symbol)$/;"	f
nf	src/dump.c	/^                    uint32_t nf;$/;"	m	struct:jl_deserialize_datatype::__anon570497e3020a::__anon570497e30308	typeref:typename:uint32_t	file:
nfeature_names	src/processor_arm.cpp	/^static constexpr uint32_t nfeature_names = sizeof(feature_names) \/ sizeof(FeatureName);$/;"	v	namespace:ARM	typeref:typename:uint32_t	file:
nfeature_names	src/processor_x86.cpp	/^static constexpr uint32_t nfeature_names = sizeof(feature_names) \/ sizeof(FeatureName);$/;"	v	namespace:X86	typeref:typename:uint32_t	file:
nfields	src/julia.h	/^    uint32_t nfields;$/;"	m	struct:__anon055fe4270f08	typeref:typename:uint32_t
nfields_tfunc	base/compiler/tfuncs.jl	/^function nfields_tfunc(@nospecialize(x))$/;"	f
nfinalizers	src/flisp/flisp.h	/^    size_t nfinalizers;$/;"	m	struct:_fl_context_t	typeref:typename:size_t
nfree	src/gc.h	/^    uint16_t nfree;$/;"	m	struct:__anoncf30557c1108	typeref:typename:uint16_t
ngchnd	src/flisp/flisp.h	/^    uint32_t ngchnd;$/;"	m	struct:_ectx_t	typeref:typename:uint32_t
nif	base/cartesian.jl	/^macro nif(N, condition, operation...)$/;"	f
ninitialized	src/julia.h	/^    int32_t ninitialized;$/;"	m	struct:_jl_datatype_t	typeref:typename:int32_t
nl	test/triplequote.jl	/^nl = "$/;"	v
nloops	base/cartesian.jl	/^macro nloops(N, itersym, rangeexpr, args...)$/;"	f
nmantissa	stdlib/Random/test/runtests.jl	/^nmantissa           = Int64(2)^51 # one bit for the sign$/;"	v
nn	stdlib/SuiteSparse/test/spqr.jl	/^nn = 100$/;"	v
nnz	stdlib/SparseArrays/src/sparsematrix.jl	/^nnz(S::AbstractSparseMatrixCSC) = Int(getcolptr(S)[size(S, 2) + 1] - 1)$/;"	f
nnz	stdlib/SparseArrays/src/sparsevector.jl	/^function nnz(x::SparseColumnView)$/;"	f
nnz	stdlib/SparseArrays/src/sparsevector.jl	/^nnz(x::SparseVector)      = length(nonzeros(x))$/;"	f
nnz	stdlib/SuiteSparse/src/cholmod.jl	/^function nnz(A::Sparse{Tv}) where Tv<:VTypes$/;"	f
nnz	stdlib/SuiteSparse/src/cholmod.jl	/^nnz(F::Factor) = nnz(Sparse(F))$/;"	f
nnz	stdlib/SuiteSparse/src/umfpack.jl	/^function nnz(lu::UmfpackLU)$/;"	f
no-rpath$(EXEEXT)	deps/srccache/patchelf-0.9/tests/Makefile.in	/^no-rpath$(EXEEXT): $(no_rpath_OBJECTS) $(no_rpath_DEPENDENCIES) $(EXTRA_no_rpath_DEPENDENCIES) $/;"	t
no-rpath-amd64.sh.log	deps/srccache/patchelf-0.9/tests/Makefile.in	/^no-rpath-amd64.sh.log: no-rpath-amd64.sh$/;"	t
no-rpath-armel.sh.log	deps/srccache/patchelf-0.9/tests/Makefile.in	/^no-rpath-armel.sh.log: no-rpath-armel.sh$/;"	t
no-rpath-armhf.sh.log	deps/srccache/patchelf-0.9/tests/Makefile.in	/^no-rpath-armhf.sh.log: no-rpath-armhf.sh$/;"	t
no-rpath-hurd-i386.sh.log	deps/srccache/patchelf-0.9/tests/Makefile.in	/^no-rpath-hurd-i386.sh.log: no-rpath-hurd-i386.sh$/;"	t
no-rpath-i386.sh.log	deps/srccache/patchelf-0.9/tests/Makefile.in	/^no-rpath-i386.sh.log: no-rpath-i386.sh$/;"	t
no-rpath-ia64.sh.log	deps/srccache/patchelf-0.9/tests/Makefile.in	/^no-rpath-ia64.sh.log: no-rpath-ia64.sh$/;"	t
no-rpath-kfreebsd-amd64.sh.log	deps/srccache/patchelf-0.9/tests/Makefile.in	/^no-rpath-kfreebsd-amd64.sh.log: no-rpath-kfreebsd-amd64.sh$/;"	t
no-rpath-kfreebsd-i386.sh.log	deps/srccache/patchelf-0.9/tests/Makefile.in	/^no-rpath-kfreebsd-i386.sh.log: no-rpath-kfreebsd-i386.sh$/;"	t
no-rpath-mips.sh.log	deps/srccache/patchelf-0.9/tests/Makefile.in	/^no-rpath-mips.sh.log: no-rpath-mips.sh$/;"	t
no-rpath-mipsel.sh.log	deps/srccache/patchelf-0.9/tests/Makefile.in	/^no-rpath-mipsel.sh.log: no-rpath-mipsel.sh$/;"	t
no-rpath-powerpc.sh.log	deps/srccache/patchelf-0.9/tests/Makefile.in	/^no-rpath-powerpc.sh.log: no-rpath-powerpc.sh$/;"	t
no-rpath-s390.sh.log	deps/srccache/patchelf-0.9/tests/Makefile.in	/^no-rpath-s390.sh.log: no-rpath-s390.sh$/;"	t
no-rpath-sh4.sh.log	deps/srccache/patchelf-0.9/tests/Makefile.in	/^no-rpath-sh4.sh.log: no-rpath-sh4.sh$/;"	t
no-rpath-sparc.sh.log	deps/srccache/patchelf-0.9/tests/Makefile.in	/^no-rpath-sparc.sh.log: no-rpath-sparc.sh$/;"	t
no-rpath.sh.log	deps/srccache/patchelf-0.9/tests/Makefile.in	/^no-rpath.sh.log: no-rpath.sh$/;"	t
no-suffix?	src/julia-parser.scm	/^(define no-suffix? (Set (append prec-assignment prec-conditional prec-lazy-or prec-lazy-and$/;"	f
noDefaultLib	deps/srccache/patchelf-0.9/src/patchelf.cc	/^static bool noDefaultLib = false;$/;"	v	typeref:typename:bool	file:
noDefaultLib	deps/srccache/patchelf-0.9/src/patchelf.cc	/^void ElfFile<ElfFileParamNames>::noDefaultLib()$/;"	f	class:ElfFile	typeref:typename:void
no_argument	src/getopt.h	/^#define no_argument /;"	d
no_error_logging	test/file.jl	/^no_error_logging(f::Function) =$/;"	f
no_kwsorter_match	test/errorshow.jl	/^    no_kwsorter_match() = 0$/;"	f
no_kwsorter_match	test/errorshow.jl	/^    no_kwsorter_match(a;y=1) = y$/;"	f
no_op_err	base/promotion.jl	/^no_op_err(name, T) = error(name," not defined for ",T)$/;"	f
no_rpath-no-rpath.o	deps/srccache/patchelf-0.9/tests/Makefile.in	/^no_rpath-no-rpath.o: no-rpath.c$/;"	t
no_rpath-no-rpath.obj	deps/srccache/patchelf-0.9/tests/Makefile.in	/^no_rpath-no-rpath.obj: no-rpath.c$/;"	t
no_rpath_CFLAGS	deps/srccache/patchelf-0.9/tests/Makefile.am	/^no_rpath_CFLAGS =$/;"	m
no_rpath_CFLAGS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^no_rpath_CFLAGS = $/;"	m
no_rpath_LDADD	deps/srccache/patchelf-0.9/tests/Makefile.in	/^no_rpath_LDADD = $(LDADD)$/;"	m
no_rpath_LINK	deps/srccache/patchelf-0.9/tests/Makefile.in	/^no_rpath_LINK = $(CCLD) $(no_rpath_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \\$/;"	m
no_rpath_OBJECTS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^no_rpath_OBJECTS = $(am_no_rpath_OBJECTS)$/;"	m
no_rpath_SOURCES	deps/srccache/patchelf-0.9/tests/Makefile.am	/^no_rpath_SOURCES = no-rpath.c$/;"	m
no_rpath_SOURCES	deps/srccache/patchelf-0.9/tests/Makefile.in	/^no_rpath_SOURCES = no-rpath.c$/;"	m
no_rpath_arch_TESTS	deps/srccache/patchelf-0.9/tests/Makefile.am	/^no_rpath_arch_TESTS = \\$/;"	m
no_rpath_arch_TESTS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^no_rpath_arch_TESTS = \\$/;"	m
nocona	src/processor_x86.cpp	/^constexpr auto nocona = get_feature_masks(sse3, cx16);$/;"	v	namespace:X86::Feature	typeref:typename:auto
node1_tests	test/runtests.jl	/^const node1_tests = String[]$/;"	v
nodist_big_dynstr_OBJECTS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^nodist_big_dynstr_OBJECTS = big-dynstr.$(OBJEXT)$/;"	m
nodist_big_dynstr_SOURCES	deps/srccache/patchelf-0.9/tests/Makefile.am	/^nodist_big_dynstr_SOURCES = big-dynstr.c$/;"	m
nodist_big_dynstr_SOURCES	deps/srccache/patchelf-0.9/tests/Makefile.in	/^nodist_big_dynstr_SOURCES = big-dynstr.c$/;"	m
noeffect25955	test/syntax.jl	/^macro noeffect25955(e)$/;"	f
noffsets	src/processor.h	/^    uint32_t noffsets;$/;"	m	struct:_jl_sysimg_fptrs_t	typeref:typename:uint32_t
noinline	base/expr.jl	/^macro noinline(ex)$/;"	f
noinline_sym	src/ast.c	/^jl_sym_t *noinline_sym; jl_sym_t *generated_sym;$/;"	v	typeref:typename:jl_sym_t *
nold	src/gc.h	/^    uint16_t nold;$/;"	m	struct:__anoncf30557c1108	typeref:typename:uint16_t
non-generated-version	src/julia-syntax.scm	/^(define (non-generated-version body)$/;"	f
non-standalone-symbol-token?	src/julia-parser.scm	/^(define non-standalone-symbol-token?$/;"	f
non_dce_finish!	base/compiler/ssair/ir.jl	/^function non_dce_finish!(compact::IncrementalCompact)$/;"	f
non_identifier_chars	stdlib/REPL/src/REPLCompletions.jl	/^const non_identifier_chars = [" \\t\\n\\r\\"\\\\'`\\$><=:;|&{}()[],+-*\/?%^~"...]$/;"	v
nonmissingtype	base/missing.jl	/^nonmissingtype(::Type{T}) where {T} = Core.Compiler.typesubtract(T, Missing)$/;"	f
nonmissingtype_checked	base/missing.jl	/^function nonmissingtype_checked(T::Type)$/;"	f
nonnothingtype	base/some.jl	/^nonnothingtype(::Type{T}) where {T} = Core.Compiler.typesubtract(T, Nothing)$/;"	f
nonnothingtype_checked	base/some.jl	/^function nonnothingtype_checked(T::Type)$/;"	f
nonscalararg	stdlib/SparseArrays/src/higherorderfns.jl	/^nonscalararg(::Any) = false$/;"	f
nonscalararg	stdlib/SparseArrays/src/higherorderfns.jl	/^nonscalararg(::SparseVecOrMat) = true$/;"	f
nonzero_chunks	stdlib/LinearAlgebra/src/bitarray.jl	/^function nonzero_chunks(chunks::Vector{UInt64}, pos0::Int, pos1::Int)$/;"	f
nonzeroinds	stdlib/SparseArrays/src/sparsevector.jl	/^function nonzeroinds(x::SparseColumnView)$/;"	f
nonzeroinds	stdlib/SparseArrays/src/sparsevector.jl	/^nonzeroinds(x::SparseVector) = getfield(x, :nzind)$/;"	f
nonzeros	stdlib/SparseArrays/src/sparsematrix.jl	/^nonzeros(S::SparseMatrixCSC) = getfield(S, :nzval)$/;"	f
nonzeros	stdlib/SparseArrays/src/sparsematrix.jl	/^nonzeros(S::SparseMatrixCSCView)  = nonzeros(S.parent)$/;"	f
nonzeros	stdlib/SparseArrays/src/sparsevector.jl	/^function nonzeros(x::SparseColumnView)$/;"	f
nonzeros	stdlib/SparseArrays/src/sparsevector.jl	/^nonzeros(x::SparseVector) = getfield(x, :nzval)$/;"	f
noop_func_26607	test/ccall.jl	/^noop_func_26607 = () -> nothing$/;"	v
nor_section_area	stdlib/Random/test/runtests.jl	/^nor_section_area    = ziggurat_nor_r*exp(-ziggurat_nor_r^2\/2) + erfc_zigg_root2*sqrt(big(π)\/2/;"	v
norm	stdlib/LinearAlgebra/src/dense.jl	/^function norm(x::StridedVector{T}, rx::Union{UnitRange{TI},AbstractRange{TI}}) where {T<:BlasFlo/;"	f
norm	stdlib/LinearAlgebra/src/generic.jl	/^@inline function norm(x::Number, p::Real=2)$/;"	f
norm	stdlib/LinearAlgebra/src/generic.jl	/^function norm(itr, p::Real=2)$/;"	f
norm	stdlib/LinearAlgebra/src/generic.jl	/^norm(::Missing, p::Real=2) = missing$/;"	f
norm	stdlib/LinearAlgebra/src/generic.jl	/^norm(v::Union{TransposeAbsVec,AdjointAbsVec}, p::Real) = norm(v.parent, p)$/;"	f
norm	stdlib/SparseArrays/src/linalg.jl	/^norm(A::AbstractSparseMatrixCSC, p::Real=2) = norm(view(nonzeros(A), 1:nnz(A)), p)$/;"	f
norm	stdlib/SparseArrays/src/sparsevector.jl	/^norm(x::SparseVectorUnion, p::Real=2) = norm(nonzeros(x), p)$/;"	f
norm1	stdlib/LinearAlgebra/src/dense.jl	/^norm1(x::Union{Array{T},StridedVector{T}}) where {T<:BlasReal} =$/;"	f
norm1	stdlib/LinearAlgebra/src/generic.jl	/^norm1(x) = generic_norm1(x)$/;"	f
norm2	stdlib/LinearAlgebra/src/dense.jl	/^norm2(x::Union{Array{T},StridedVector{T}}) where {T<:BlasFloat} =$/;"	f
norm2	stdlib/LinearAlgebra/src/generic.jl	/^norm2(x) = generic_norm2(x)$/;"	f
normInf	stdlib/LinearAlgebra/src/generic.jl	/^normInf(x) = generic_normInf(x)$/;"	f
normMinusInf	stdlib/LinearAlgebra/src/generic.jl	/^normMinusInf(x) = generic_normMinusInf(x)$/;"	f
norm_dense	stdlib/SuiteSparse/src/cholmod.jl	/^function norm_dense(D::Dense{Tv}, p::Integer) where Tv<:VTypes$/;"	f
norm_pools	src/julia_threads.h	/^    jl_gc_pool_t norm_pools[JL_GC_N_POOLS];$/;"	m	struct:__anonf8aecdb10608	typeref:typename:jl_gc_pool_t[]
norm_sparse	stdlib/SuiteSparse/src/cholmod.jl	/^function norm_sparse(A::Sparse{Tv}, norm::Integer) where Tv<:VTypes$/;"	f
norm_sqr	stdlib/LinearAlgebra/src/generic.jl	/^norm_sqr(x) = norm(x)^2$/;"	f
norm_sqr	stdlib/LinearAlgebra/src/generic.jl	/^norm_sqr(x::Number) = abs2(x)$/;"	f
norm_sqr	stdlib/LinearAlgebra/src/generic.jl	/^norm_sqr(x::Union{T,Complex{T},Rational{T}}) where {T<:Integer} = abs2(float(x))$/;"	f
normalize	base/compiler/ssair/driver.jl	/^function normalize(@nospecialize(stmt), meta::Vector{Any})$/;"	f
normalize	base/grisu/float.jl	/^function normalize(v::Float)$/;"	f
normalize	base/grisu/float.jl	/^function normalize(v::Float64)$/;"	f
normalize	base/strings/unicode.jl	/^function normalize($/;"	f
normalize	base/strings/unicode.jl	/^function normalize(s::AbstractString, nf::Symbol)$/;"	f
normalize	src/flisp/julia_extensions.c	/^static char *normalize(fl_context_t *fl_ctx, char *s)$/;"	f	typeref:typename:char *	file:
normalize	stdlib/LinearAlgebra/src/generic.jl	/^function normalize(v::AbstractVector, p::Real = 2)$/;"	f
normalize	stdlib/Unicode/src/Unicode.jl	/^function normalize end$/;"	f
normalize	stdlib/Unicode/src/Unicode.jl	/^normalize(s::AbstractString, nf::Symbol) = Base.Unicode.normalize(s, nf)$/;"	f
normalize	stdlib/Unicode/src/Unicode.jl	/^normalize(s::AbstractString; kwargs...) = Base.Unicode.normalize(s; kwargs...)$/;"	f
normalize!	stdlib/LinearAlgebra/src/generic.jl	/^function normalize!(v::AbstractVector, p::Real=2)$/;"	f
normalize_cpu_name	src/processor_x86.cpp	/^static inline const char *normalize_cpu_name(llvm::StringRef name)$/;"	f	namespace:X86	typeref:typename:const char *	file:
normalize_expr	base/compiler/ssair/driver.jl	/^function normalize_expr(stmt::Expr)$/;"	f
normalize_key	stdlib/REPL/src/LineEdit.jl	/^function normalize_key(key::AbstractString)$/;"	f
normalize_key	stdlib/REPL/src/LineEdit.jl	/^normalize_key(key::AbstractChar) = string(key)$/;"	f
normalize_key	stdlib/REPL/src/LineEdit.jl	/^normalize_key(key::Integer) = normalize_key(Char(key))$/;"	f
normalize_keys	stdlib/REPL/src/LineEdit.jl	/^function normalize_keys(keymap::Dict)$/;"	f
normalize_method_name	base/compiler/ssair/show.jl	/^normalize_method_name(m) = Symbol("")$/;"	f
normalize_method_name	base/compiler/ssair/show.jl	/^normalize_method_name(m::Method) = m.name$/;"	f
normalize_method_name	base/compiler/ssair/show.jl	/^normalize_method_name(m::MethodInstance) = (m.def::Method).name$/;"	f
normalize_method_name	base/compiler/ssair/show.jl	/^normalize_method_name(m::Symbol) = m$/;"	f
normalize_vararg	src/jltypes.c	/^static jl_value_t *normalize_vararg(jl_value_t *va)$/;"	f	typeref:typename:jl_value_t *	file:
normalizedbound	base/grisu/float.jl	/^function normalizedbound(f::AbstractFloat)$/;"	f
normalizedexponent	base/grisu/bignum.jl	/^function normalizedexponent(significand, exponent::Int32)$/;"	f
normp	stdlib/LinearAlgebra/src/generic.jl	/^normp(x, p) = generic_normp(x, p)$/;"	f
normpath	base/path.jl	/^function normpath(path::String)$/;"	f
normpath	base/path.jl	/^normpath(a::AbstractString, b::AbstractString...) = normpath(joinpath(a,b...))$/;"	f
nospecialize	base/boot.jl	/^macro nospecialize(x)$/;"	f
nospecialize	base/essentials.jl	/^macro nospecialize(vars...)$/;"	f
nospecialize	src/julia.h	/^    int32_t nospecialize;  \/\/ bit flags: which arguments should not be specialized$/;"	m	struct:_jl_method_t	typeref:typename:int32_t
nospecialize	src/julia.h	/^    int32_t nospecialize;  \/\/ global bit flags: initialization for new methods$/;"	m	struct:_jl_module_t	typeref:typename:int32_t
nospecialize-meta?	src/ast.scm	/^(define (nospecialize-meta? e (one #f))$/;"	f
nospecialize_sym	src/ast.c	/^jl_sym_t *nospecialize_sym; jl_sym_t *macrocall_sym;$/;"	v	typeref:typename:jl_sym_t *
not-eof-1	src/julia-parser.scm	/^(define (not-eof-1 c)$/;"	f
not-eof-for	src/julia-parser.scm	/^(define (not-eof-for delim c)$/;"	f
not_const	test/reflection.jl	/^not_const = 1$/;"	v
not_op	src/runtime_intrinsics.c	/^#define not_op(/;"	d	file:
not_sametype	base/promotion.jl	/^not_sametype(x, y) = nothing$/;"	f
not_sametype	base/promotion.jl	/^not_sametype(x::T, y::T) where {T} = sametype_error(x)$/;"	f
not_sleeping	src/partr.c	/^static const int16_t not_sleeping = 0;$/;"	v	typeref:typename:const int16_t	file:
notconst	test/compiler/inference.jl	/^    function notconst(expr::Expr)$/;"	f
notconst	test/compiler/inference.jl	/^    notconst(slot::TypedSlot) = @test isa(slot.typ, Type)$/;"	f
notequal_type	test/subtype.jl	/^notequal_type(@nospecialize(x),@nospecialize(y)) = !isequal_type(x, y)$/;"	f
nothing_sentinel	base/strings/search.jl	/^nothing_sentinel(i) = i == 0 ? nothing : i$/;"	f
notify	base/condition.jl	/^function notify(c::GenericCondition, @nospecialize(arg), all, error)$/;"	f
notify	base/condition.jl	/^notify(c::GenericCondition, @nospecialize(arg = nothing); all=true, error=false) = notify(c, arg/;"	f
notify	base/lock.jl	/^function notify(e::Event)$/;"	f
notifyObjectLoaded	src/cgmemmgr.cpp	/^void RTDyldMemoryManagerJL::notifyObjectLoaded(RuntimeDyld &Dyld,$/;"	f	class:__anon06c686bc0111::RTDyldMemoryManagerJL	typeref:typename:void
notify_cb_t	src/jl_uv.c	/^typedef void (*notify_cb_t)(int);$/;"	t	typeref:typename:void (*)(int)	file:
notify_error	base/condition.jl	/^notify_error(c::GenericCondition, err) = notify(c, err, true, true)$/;"	f
notify_filled	base/stream.jl	/^function notify_filled(buffer::IOBuffer, nread::Int)$/;"	f
notify_filled	base/stream.jl	/^notify_filled(buffer::IOBuffer, nread::Int, base::Ptr{Cvoid}, len::UInt) = notify_filled(buffer,/;"	f
notify_fun	base/threadcall.jl	/^        function notify_fun(idx)$/;"	f
notify_func	src/jl_uv.c	/^    notify_cb_t notify_func;$/;"	m	struct:work_baton	typeref:typename:notify_cb_t	file:
notify_idx	src/jl_uv.c	/^    int       notify_idx;$/;"	m	struct:work_baton	typeref:typename:int	file:
notnothing	base/some.jl	/^notnothing(::Nothing) = throw(ArgumentError("nothing passed to notnothing"))$/;"	f
notnothing	base/some.jl	/^notnothing(x::Any) = x$/;"	f
notunroll	test/llvmpasses/loopinfo.jl	/^function notunroll(J, I)$/;"	f
now	stdlib/Dates/src/conversions.jl	/^function now()$/;"	f
now	stdlib/Dates/src/conversions.jl	/^now(::Type{UTC}) = unix2datetime(time())$/;"	f
nowtime	test/file.jl	/^nowtime = time()$/;"	v
npids	stdlib/Distributed/test/distributed_exec.jl	/^npids = addprocs_with_testenv(WorkerArgTester(`--worker=`, false))$/;"	v
npids	stdlib/Distributed/test/distributed_exec.jl	/^npids = addprocs_with_testenv(WorkerArgTester(`--worker=foobar`, false))$/;"	v
npids	stdlib/Distributed/test/distributed_exec.jl	/^npids = addprocs_with_testenv(WorkerArgTester(`--worker`, true))$/;"	v
npointers	src/julia.h	/^    uint32_t npointers : 20; \/\/ number of pointer fields, top 4 bits are exponent (under-appro/;"	m	struct:__anon055fe4270f08	typeref:typename:uint32_t:20
nprocs	src/julia.h	/^    int32_t nprocs;$/;"	m	struct:__anon055fe4271808	typeref:typename:int32_t
nprocs	stdlib/Distributed/src/cluster.jl	/^function nprocs()$/;"	f
nptr	src/gc.h	/^    uintptr_t nptr; \/\/ See notes about `nptr` above.$/;"	m	struct:__anoncf30557c0608	typeref:typename:uintptr_t
nptr	src/gc.h	/^    uintptr_t nptr; \/\/ See notes about `nptr` above.$/;"	m	struct:__anoncf30557c0708	typeref:typename:uintptr_t
nptr	src/gc.h	/^    uintptr_t nptr; \/\/ See notes about `nptr` above.$/;"	m	struct:__anoncf30557c0808	typeref:typename:uintptr_t
nptr	src/gc.h	/^    uintptr_t nptr; \/\/ See notes about `nptr` above.$/;"	m	struct:__anoncf30557c0908	typeref:typename:uintptr_t
nptr	src/gc.h	/^    uintptr_t nptr; \/\/ See notes about `nptr` above.$/;"	m	struct:__anoncf30557c0c08	typeref:typename:uintptr_t
nraddr	deps/valgrind/valgrind.h	/^      unsigned int nraddr; \/* where's the code? *\/$/;"	m	struct:__anon428795130108	typeref:typename:unsigned int
nraddr	deps/valgrind/valgrind.h	/^      unsigned int nraddr; \/* where's the code? *\/$/;"	m	struct:__anon428795130208	typeref:typename:unsigned int
nraddr	deps/valgrind/valgrind.h	/^      unsigned int nraddr; \/* where's the code? *\/$/;"	m	struct:__anon428795130408	typeref:typename:unsigned int
nraddr	deps/valgrind/valgrind.h	/^      unsigned int nraddr; \/* where's the code? *\/$/;"	m	struct:__anon428795130708	typeref:typename:unsigned int
nraddr	deps/valgrind/valgrind.h	/^      unsigned int nraddr; \/* where's the code? *\/$/;"	m	struct:__anon428795130a08	typeref:typename:unsigned int
nraddr	deps/valgrind/valgrind.h	/^      unsigned long int nraddr; \/* where's the code? *\/$/;"	m	struct:__anon428795130308	typeref:typename:unsigned long int
nraddr	deps/valgrind/valgrind.h	/^      unsigned long int nraddr; \/* where's the code? *\/$/;"	m	struct:__anon428795130508	typeref:typename:unsigned long int
nraddr	deps/valgrind/valgrind.h	/^      unsigned long int nraddr; \/* where's the code? *\/$/;"	m	struct:__anon428795130608	typeref:typename:unsigned long int
nraddr	deps/valgrind/valgrind.h	/^      unsigned long int nraddr; \/* where's the code? *\/$/;"	m	struct:__anon428795130808	typeref:typename:unsigned long int
nraddr	deps/valgrind/valgrind.h	/^      unsigned long nraddr; \/* where's the code? *\/$/;"	m	struct:__anon428795130b08	typeref:typename:unsigned long
nraddr	deps/valgrind/valgrind.h	/^     unsigned long int nraddr; \/* where's the code? *\/$/;"	m	struct:__anon428795130908	typeref:typename:unsigned long int
nref	base/cartesian.jl	/^macro nref(N::Int, A::Symbol, ex)$/;"	f
nreqargs	src/ccall.cpp	/^    size_t nreqargs; \/\/ number of required arguments in ccall function definition$/;"	m	class:function_sig_t	typeref:typename:size_t	file:
nrm2	stdlib/LinearAlgebra/src/blas.jl	/^        function nrm2(n::Integer, X::Union{Ptr{$elty},AbstractArray{$elty}}, incx::Integer)$/;"	f
nrm2	stdlib/LinearAlgebra/src/blas.jl	/^function nrm2 end$/;"	f
nrm2	stdlib/LinearAlgebra/src/blas.jl	/^nrm2(x::Union{AbstractVector,DenseArray}) = GC.@preserve x nrm2(length(x), pointer(x), stride1(x/;"	f
nroots	src/gc.h	/^    uint32_t nroots; \/\/ `nroots` fields in the frame$/;"	m	struct:__anoncf30557c0a08	typeref:typename:uint32_t
nroots	src/julia.h	/^    size_t nroots;$/;"	m	struct:_jl_gcframe_t	typeref:typename:size_t
nrows	src/julia.h	/^    size_t nrows;$/;"	m	struct:__anon055fe4270408	typeref:typename:size_t
ns	stdlib/Dates/test/periods.jl	/^ns = Dates.Nanosecond(1)$/;"	v
ns152255b70101	contrib/windows/julia-manifest.xml	/^<assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">$/;"	n	uri:urn:schemas-microsoft-com:asm.v1
ns152255b70201	contrib/windows/julia-manifest.xml	/^  <trustInfo xmlns="urn:schemas-microsoft-com:asm.v3">$/;"	n	uri:urn:schemas-microsoft-com:asm.v3
ns152255b70301	contrib/windows/julia-manifest.xml	/^  <compatibility xmlns="urn:schemas-microsoft-com:compatibility.v1">$/;"	n	uri:urn:schemas-microsoft-com:compatibility.v1
ns305835f80101	doc/images/jltypes.svg	/^	 xml:space="preserve">$/;"	n	uri:http://www.w3.org/2000/svg
ns70f8e4780101	contrib/julia.svg	/^<svg xmlns="http:\/\/www.w3.org\/2000\/svg" viewBox="0 0 153.14 98.64"><defs><style>.cls-1{fill:/;"	n	uri:http://www.w3.org/2000/svg
ns_dummy_uuid	base/loading.jl	/^const ns_dummy_uuid = UUID("fe0723d6-3a44-4c41-8065-ee0f42c8ceab")$/;"	v
nsebc438240101	contrib/windows/7zSFX-manifest.xml	/^<assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">$/;"	n	uri:urn:schemas-microsoft-com:asm.v1
nsebc438240201	contrib/windows/7zSFX-manifest.xml	/^  <compatibility xmlns="urn:schemas-microsoft-com:compatibility.v1">$/;"	n	uri:urn:schemas-microsoft-com:compatibility.v1
nsebc438240301	contrib/windows/7zSFX-manifest.xml	/^  <trustInfo xmlns="urn:schemas-microsoft-com:asm.v3">$/;"	n	uri:urn:schemas-microsoft-com:asm.v3
nsecprof	src/signal-handling.c	/^static volatile uint64_t nsecprof = 0;$/;"	v	typeref:typename:volatile uint64_t	file:
nsym_tag	src/staticdata.c	/^static uintptr_t nsym_tag;$/;"	v	typeref:typename:uintptr_t	file:
nt_from_abstractly_typed_array	test/namedtuple.jl	/^function nt_from_abstractly_typed_array()$/;"	f
nt_func	test/asyncmap.jl	/^    nt_func() = (v=div(nt, 25); nt+=1; v)  # increment number of tasks by 1 for every 25th call.$/;"	f
ntasks	src/partr.c	/^    int32_t ntasks;$/;"	m	struct:taskheap_tag	typeref:typename:int32_t	file:
ntasks	stdlib/Distributed/test/distributed_exec.jl	/^ntasks = 10$/;"	v
nth	stdlib/Random/src/generation.jl	/^function nth(iter, n::Integer)::eltype(iter)$/;"	f
nth_tuple_elt	src/subtype.c	/^static jl_value_t *nth_tuple_elt(jl_datatype_t *t JL_PROPAGATES_ROOT, size_t i) JL_NOTSAFEPOINT$/;"	f	typeref:typename:jl_value_t *	file:
nth_union_component	src/jltypes.c	/^static jl_value_t *nth_union_component(jl_value_t *v, int *pi) JL_NOTSAFEPOINT$/;"	f	typeref:typename:jl_value_t *	file:
nthreads	base/threadingconstructs.jl	/^nthreads() = Int(unsafe_load(cglobal(:jl_n_threads, Cint)))$/;"	f
ntoh	base/io.jl	/^        ntoh(x) = bswap(x)$/;"	f
ntoh	base/io.jl	/^        ntoh(x) = x$/;"	f
nttest1	test/tuple.jl	/^    nttest1(x::NTuple{n, Int}) where {n} = n$/;"	f
ntuple	base/cartesian.jl	/^macro ntuple(N::Int, ex)$/;"	f
ntuple	base/ntuple.jl	/^@inline function ntuple(f::F, ::Val{N}) where {F,N}$/;"	f
ntuple	base/ntuple.jl	/^function ntuple(f::F, n::Integer) where F$/;"	f
ntuple	base/ntuple.jl	/^ntuple(f, ::Val{0}) = ()$/;"	f
ntuple	base/ntuple.jl	/^ntuple(f, ::Val{1}) = (@_inline_meta; (f(1),))$/;"	f
ntuple	base/ntuple.jl	/^ntuple(f, ::Val{2}) = (@_inline_meta; (f(1), f(2)))$/;"	f
ntuple	base/ntuple.jl	/^ntuple(f, ::Val{3}) = (@_inline_meta; (f(1), f(2), f(3)))$/;"	f
null_id	stdlib/Distributed/src/messages.jl	/^null_id(id) =  id == RRID(0, 0)$/;"	f
null_pointer_check	src/cgutils.cpp	/^static void null_pointer_check(jl_codectx_t &ctx, Value *v)$/;"	f	typeref:typename:void	file:
null_sym	src/ast.c	/^    value_t null_sym;$/;"	m	struct:_jl_ast_context_t	typeref:typename:value_t	file:
nullspace	stdlib/LinearAlgebra/src/dense.jl	/^    nullspace(M, rtol::Real) = nullspace(M; rtol=rtol) # to be deprecated in Julia 2.0$/;"	f
nullspace	stdlib/LinearAlgebra/src/dense.jl	/^function nullspace(A::AbstractMatrix; atol::Real = 0.0, rtol::Real = (min(size(A)...)*eps(real(f/;"	f
nullspace	stdlib/LinearAlgebra/src/dense.jl	/^nullspace(A::AbstractVector; atol::Real = 0.0, rtol::Real = (min(size(A)...)*eps(real(float(one(/;"	f
nullspace	stdlib/LinearAlgebra/src/deprecated.jl	/^nullspace(A::AbstractMatrix, tol::Real) = nullspace(A, rtol=tol)$/;"	f
nullspace	stdlib/LinearAlgebra/src/deprecated.jl	/^nullspace(A::AbstractVector, tol::Real) = nullspace(reshape(A, length(A), 1), rtol= tol)$/;"	f
nullsym	src/flisp/flisp.h	/^    value_t tsym, Tsym, fsym, Fsym, booleansym, nullsym, evalsym, fnsym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
nulsym	src/flisp/flisp.h	/^    value_t nulsym, alarmsym, backspacesym, tabsym, linefeedsym, newlinesym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
num	src/gc.h	/^    uint64_t num;$/;"	m	struct:__anoncf30557c0108	typeref:typename:uint64_t
num_bit_chunks	base/bitarray.jl	/^num_bit_chunks(n::Int) = _div64(n+63)$/;"	f
num_ctor	src/flisp/cvalues.c	/^#define num_ctor(/;"	d	file:
num_ctor_ctor	src/flisp/cvalues.c	/^#define num_ctor_ctor(/;"	d	file:
num_ctor_init	src/flisp/cvalues.c	/^#define num_ctor_init(/;"	d	file:
num_init	src/flisp/cvalues.c	/^#define num_init(/;"	d	file:
num_init	src/flisp/cvalues.c	/^num_init(int8, int32, T_INT8)$/;"	f
num_obj_sweeps	test/gcext/LocalTest.jl	/^function num_obj_sweeps()$/;"	f
num_occurs	src/subtype.c	/^static int num_occurs(jl_tvar_t *v, jl_typeenv_t *env)$/;"	f	typeref:typename:int	file:
num_small_requests	stdlib/Distributed/test/distributed_exec.jl	/^num_small_requests = 10000$/;"	v
num_stack_mappings	src/gc-stacks.c	/^static volatile uint32_t num_stack_mappings = 0;$/;"	v	typeref:typename:volatile uint32_t	file:
num_to_ptr	src/flisp/cvalues.c	/^static int num_to_ptr(value_t a, fixnum_t *pi, numerictype_t *pt, void **pp)$/;"	f	typeref:typename:int	file:
number_from_hex	base/strings/util.jl	/^@inline number_from_hex(c) =$/;"	f
numchk	src/julia-parser.scm	/^(define (numchk n s)$/;"	f
numcols	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline numcols(A::AbstractSparseMatrixCSC) = size(A, 2)$/;"	f
numcols	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline numcols(A::SparseVector) = 1$/;"	f
numerator	base/rational.jl	/^numerator(x::Integer) = x$/;"	f
numerator	base/rational.jl	/^numerator(x::Rational) = x.num$/;"	f
numeric_compare	src/flisp/cvalues.c	/^int numeric_compare(fl_context_t *fl_ctx, value_t a, value_t b, int eq, int eqnans, char *fname)$/;"	f	typeref:typename:int
numerictype_t	src/support/dtypes.h	/^               T_INT64, T_UINT64, T_FLOAT, T_DOUBLE } numerictype_t;$/;"	t	typeref:enum:__anon085ab8f70103
numrows	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline numrows(A::AbstractSparseMatrixCSC) = size(A, 1)$/;"	f
numrows	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline numrows(A::SparseVector) = length(A)$/;"	f
numtype	src/flisp/flisp.h	/^    numerictype_t numtype;$/;"	m	struct:_fltype_t	typeref:typename:numerictype_t
numval	src/flisp/flisp.h	/^#define numval(/;"	d
nvargs	src/codegen.cpp	/^    int nvargs = -1;$/;"	m	class:jl_codectx_t	typeref:typename:int	file:
nvidia_denver1	src/processor_arm.cpp	/^    nvidia_denver1,$/;"	e	enum:ARM::CPU	file:
nvidia_denver1	src/processor_arm.cpp	/^constexpr auto nvidia_denver1 = armv8a; \/\/ TODO? (crc, crypto)$/;"	v	namespace:ARM::Feature	typeref:typename:auto
nvidia_denver1	src/processor_arm.cpp	/^constexpr auto nvidia_denver1 = generic; \/\/ TODO? (crc, crypto)$/;"	v	namespace:ARM::Feature	typeref:typename:auto
nvidia_denver2	src/processor_arm.cpp	/^    nvidia_denver2,$/;"	e	enum:ARM::CPU	file:
nvidia_denver2	src/processor_arm.cpp	/^constexpr auto nvidia_denver2 = armv8a_crc_crypto;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
nworkers	stdlib/Distributed/src/cluster.jl	/^function nworkers()$/;"	f
nzrange	stdlib/SparseArrays/src/sparsematrix.jl	/^nzrange(S::AbstractSparseMatrixCSC, col::Integer) = getcolptr(S)[col]:(getcolptr(S)[col+1]-1)$/;"	f
nzrange	stdlib/SparseArrays/src/sparsematrix.jl	/^nzrange(S::SparseMatrixCSCView, col::Integer) = nzrange(S.parent, S.indices[2][col])$/;"	f
nzrangelo	stdlib/SparseArrays/src/linalg.jl	/^function nzrangelo(A, i)$/;"	f
nzrangeup	stdlib/SparseArrays/src/linalg.jl	/^function nzrangeup(A, i)$/;"	f
nzvalview	stdlib/SparseArrays/src/sparsematrix.jl	/^nzvalview(S::AbstractSparseMatrixCSC) = view(nonzeros(S), 1:nnz(S))$/;"	f
o0	stdlib/Serialization/src/Serialization.jl	/^const o0 = sertag(SSAValue)$/;"	v
obfiletype	src/debuginfo.cpp	/^typedef std::map<uint64_t, objfileentry_t, revcomp> obfiletype;$/;"	t	typeref:typename:std::map<uint64_t,objfileentry_t,revcomp>	file:
obj	src/debuginfo.cpp	/^    const llvm::object::ObjectFile *obj;$/;"	m	struct:__anonea1faf400208	typeref:typename:const llvm::object::ObjectFile *	file:
obj	src/gc.h	/^    jl_value_t *obj; \/\/ The object$/;"	m	struct:__anoncf30557c0508	typeref:typename:jl_value_t *
obj16	src/gc.h	/^    gc_mark_obj16_t obj16;$/;"	m	union:_jl_gc_mark_data	typeref:typename:gc_mark_obj16_t
obj32	src/gc.h	/^    gc_mark_obj32_t obj32;$/;"	m	union:_jl_gc_mark_data	typeref:typename:gc_mark_obj32_t
obj6387	test/core.jl	/^obj6387 = ObjMember(DateRange6387{Int64}())$/;"	v
obj8	src/gc.h	/^    gc_mark_obj8_t obj8;$/;"	m	union:_jl_gc_mark_data	typeref:typename:gc_mark_obj8_t
obj_counts	src/gc-debug.c	/^static htable_t obj_counts[3];$/;"	v	typeref:typename:htable_t[3]	file:
obj_number_salt	stdlib/Distributed/src/clusterserialize.jl	/^const obj_number_salt = Ref(0)$/;"	v
obj_number_salt	stdlib/Serialization/src/Serialization.jl	/^const obj_number_salt = Ref{UInt64}(0)$/;"	v
obj_sizes	src/gc-debug.c	/^static htable_t obj_sizes[3];$/;"	v	typeref:typename:htable_t[3]	file:
obj_sweeps	test/gcext/gcext.c	/^static size_t obj_sweeps = 0;$/;"	v	typeref:typename:size_t	file:
objarray	src/gc.h	/^    gc_mark_objarray_t objarray;$/;"	m	union:_jl_gc_mark_data	typeref:typename:gc_mark_objarray_t
object	src/debuginfo.cpp	/^    const object::ObjectFile *object;$/;"	m	struct:ObjectInfo	typeref:typename:const object::ObjectFile *	file:
object	src/disasm.cpp	/^    const object::ObjectFile *object;$/;"	m	class:__anon2853c92e0211::SymbolTable	typeref:typename:const object::ObjectFile *	file:
object_number	stdlib/Distributed/src/clusterserialize.jl	/^function object_number(s::ClusterSerializer, @nospecialize(l))$/;"	f
object_number	stdlib/Serialization/src/Serialization.jl	/^function object_number(s::AbstractSerializer, @nospecialize(l))$/;"	f
object_numbers	stdlib/Distributed/src/clusterserialize.jl	/^const object_numbers = WeakKeyDict()$/;"	v
object_numbers	stdlib/Serialization/src/Serialization.jl	/^const object_numbers = WeakKeyDict()$/;"	v
objectdoc	base/docs/Docs.jl	/^function objectdoc(__source__, __module__, str, def, expr, sig = :(Union{}))$/;"	f
objectid	base/reflection.jl	/^objectid(@nospecialize(x)) = ccall(:jl_object_id, UInt, (Any,), x)$/;"	f
objectmap	src/debuginfo.cpp	/^    std::map<size_t, ObjectInfo, revcomp> objectmap;$/;"	m	class:JuliaJITEventListener	typeref:typename:std::map<size_t,ObjectInfo,revcomp>	file:
objfileentry_t	src/debuginfo.cpp	/^} objfileentry_t;$/;"	t	typeref:struct:__anonea1faf400208	file:
objfilemap	src/debuginfo.cpp	/^static obfiletype objfilemap;$/;"	v	typeref:typename:obfiletype	file:
objprofile_count	src/gc-debug.c	/^void objprofile_count(void *ty, int old, int sz)$/;"	f	typeref:typename:void
objprofile_count	src/gc.h	/^static inline void objprofile_count(void *ty, int old, int sz) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void
objprofile_print	src/gc-debug.c	/^static void objprofile_print(htable_t nums, htable_t sizes)$/;"	f	typeref:typename:void	file:
objprofile_printall	src/gc-debug.c	/^void objprofile_printall(void)$/;"	f	typeref:typename:void
objprofile_printall	src/gc.h	/^static inline void objprofile_printall(void)$/;"	f	typeref:typename:void
objprofile_reset	src/gc-debug.c	/^void objprofile_reset(void)$/;"	f	typeref:typename:void
objprofile_reset	src/gc.h	/^static inline void objprofile_reset(void)$/;"	f	typeref:typename:void
objtype	stdlib/LibGit2/src/types.jl	/^function objtype(obj_type::Consts.OBJECT)$/;"	f
obviously_disjoint	src/subtype.c	/^static int obviously_disjoint(jl_value_t *a, jl_value_t *b, int specificity)$/;"	f	typeref:typename:int	file:
obviously_egal	src/subtype.c	/^static int obviously_egal(jl_value_t *a, jl_value_t *b)$/;"	f	typeref:typename:int	file:
obviously_unequal	src/subtype.c	/^static int obviously_unequal(jl_value_t *a, jl_value_t *b)$/;"	f	typeref:typename:int	file:
occurs_cov	src/subtype.c	/^    int8_t occurs_cov;  \/\/ # of occurrences in covariant position$/;"	m	struct:jl_varbinding_t	typeref:typename:int8_t	file:
occurs_inv	src/subtype.c	/^    int8_t occurs_inv;  \/\/ occurs in invariant position$/;"	m	struct:jl_varbinding_t	typeref:typename:int8_t	file:
occursin	base/iobuffer.jl	/^function occursin(delim::UInt8, buf::GenericIOBuffer)$/;"	f
occursin	base/iobuffer.jl	/^function occursin(delim::UInt8, buf::IOBuffer)$/;"	f
occursin	base/regex.jl	/^function occursin(r::Regex, s::AbstractString; offset::Integer=0)$/;"	f
occursin	base/regex.jl	/^function occursin(r::Regex, s::SubString; offset::Integer=0)$/;"	f
occursin	base/strings/search.jl	/^occursin(needle::Union{AbstractString,AbstractChar}, haystack::AbstractString) =$/;"	f
occursin	stdlib/Test/src/logging.jl	/^function occursin(pattern::Tuple, r::LogRecord)$/;"	f
occursin	test/dict.jl	/^    @test occursin("(1=>2)=>(3=>45)", result)$/;"	f
occursin	test/dict.jl	/^    @test occursin("(3=>10)=>(10=>11)", result)$/;"	f
oct	base/intfuncs.jl	/^function oct(x::Unsigned, pad::Integer, neg::Bool)$/;"	f
oct-within-uint128?	src/julia-parser.scm	/^(define (oct-within-uint128? s)$/;"	f
octal_digit	src/support/utf8.c	/^int octal_digit(char c)$/;"	f	typeref:typename:int
offs	src/julia.h	/^    uint8_t offs;  \/\/ 0, or 1 to skip splitting typemap on first (function) argument$/;"	m	struct:_jl_methtable_t	typeref:typename:uint8_t
offs_chunk_size	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^const offs_chunk_size = 5000$/;"	v
offset	src/gc.h	/^    uintptr_t offset;$/;"	m	struct:__anoncf30557c0a08	typeref:typename:uintptr_t
offset	src/julia.h	/^    uint16_t offset;   \/\/ offset relative to data start, excluding type tag$/;"	m	struct:__anon055fe4270d08	typeref:typename:uint16_t
offset	src/julia.h	/^    uint32_t offset;   \/\/ offset relative to data start, excluding type tag$/;"	m	struct:__anon055fe4270e08	typeref:typename:uint32_t
offset	src/julia.h	/^    uint32_t offset;  \/\/ for 1-d only. does not need to get big.$/;"	m	struct:__anon055fe4270408	typeref:typename:uint32_t
offset	src/julia.h	/^    uint8_t offset;   \/\/ offset relative to data start, excluding type tag$/;"	m	struct:__anon055fe4270c08	typeref:typename:uint8_t
offset	src/llvm-alloc-opt.cpp	/^                uint32_t offset;$/;"	m	union:__anon0a1571000111::Optimizer::ReplaceUses::Frame::__anon0a157100020a	typeref:typename:uint32_t	file:
offset	src/llvm-alloc-opt.cpp	/^            uint32_t offset;$/;"	m	struct:__anon0a1571000111::Optimizer::CheckInst::Frame	typeref:typename:uint32_t	file:
offset	src/llvm-alloc-opt.cpp	/^        uint32_t offset = 0;$/;"	m	struct:__anon0a1571000111::Optimizer::MemOp	typeref:typename:uint32_t	file:
offset	src/llvm-alloc-opt.cpp	/^        uint32_t offset;$/;"	m	struct:__anon0a1571000111::Optimizer::splitOnStack::SplitSlot	typeref:typename:uint32_t	file:
offset	src/llvm-multiversioning.cpp	/^        size_t offset;$/;"	m	struct:__anond5683ea40111::ConstantUses::Info	typeref:typename:size_t	file:
offset	src/subtype.c	/^    int offset;$/;"	m	struct:jl_varbinding_t	typeref:typename:int	file:
offset	test/compiler/inference.jl	/^offset = 1$/;"	v
offset	test/testhelpers/OffsetArrays.jl	/^offset(offsets::NTuple{N,Int}, inds::NTuple{N,Int}) where {N} = _offset((), offsets, inds)$/;"	f
offset::Integer=Int64	stdlib/Mmap/src/Mmap.jl	/^     offset::Integer=Int64(0); grow::Bool=true, shared::Bool=true) where {T<:Array,N} =$/;"	f
offsetin	base/abstractarray.jl	/^offsetin(i, l::Integer) = i-1$/;"	f
offsetin	base/abstractarray.jl	/^offsetin(i, r::AbstractUnitRange) = i-first(r)$/;"	f
offsets	src/processor.h	/^    const int32_t *offsets;$/;"	m	struct:_jl_sysimg_fptrs_t	typeref:typename:const int32_t *
offsetsFromUTF8	src/support/utf8.c	/^static const uint32_t offsetsFromUTF8[6] = {$/;"	v	typeref:typename:const uint32_t[6]	file:
oftype	base/essentials.jl	/^oftype(x, y) = convert(typeof(x), y)$/;"	f
oid1	stdlib/Distributed/test/distributed_exec.jl	/^oid1 = objectid(v7)$/;"	v
oids	stdlib/LibGit2/src/walker.jl	/^oids = LibGit2.with(LibGit2.GitRevWalker(repo)) do walker$/;"	v
oindex	test/subarray.jl	/^oindex = (:, 6, 3:7, reshape([12]), [8,4,6,12,5,7], [3:7 1:5 2:6 4:8 5:9])$/;"	v
old_act_proj	test/loading.jl	/^old_act_proj = Base.ACTIVE_PROJECT[]$/;"	v
old_fmf	src/intrinsics.cpp	/^    FastMathFlags old_fmf;$/;"	m	struct:math_builder	typeref:typename:FastMathFlags	file:
old_license	contrib/add_license_to_files.jl	/^const old_license = ""$/;"	v
oldcode28279	test/compiler/inference.jl	/^oldcode28279 = deepcopy(code28279)$/;"	v
oldincludedir	deps/srccache/patchelf-0.9/Makefile.in	/^oldincludedir = @oldincludedir@$/;"	m
oldincludedir	deps/srccache/patchelf-0.9/src/Makefile.in	/^oldincludedir = @oldincludedir@$/;"	m
oldincludedir	deps/srccache/patchelf-0.9/tests/Makefile.in	/^oldincludedir = @oldincludedir@$/;"	m
on	stdlib/InteractiveUtils/src/macros.jl	/^function on the resulting expression.$/;"	f
on_enter	stdlib/REPL/src/LineEdit.jl	/^on_enter(s::PromptState) = s.p.on_enter(s)$/;"	f
once_removed	test/ccall.jl	/^function once_removed()$/;"	f
one	base/array.jl	/^one(x::AbstractMatrix{T}) where {T} = _one(one(T), x)$/;"	f
one	base/bitarray.jl	/^function one(x::BitMatrix)$/;"	f
one	base/deprecated.jl	/^one(::CartesianIndex{N}) where {N} = one(CartesianIndex{N})$/;"	f
one	base/deprecated.jl	/^one(::Type{CartesianIndex{N}}) where {N} = CartesianIndex(ntuple(x -> 1, Val(N)))$/;"	f
one	base/number.jl	/^one(::Type{T}) where {T<:Number} = convert(T,1)$/;"	f
one	base/number.jl	/^one(x::T) where {T<:Number} = one(T)$/;"	f
one	base/strings/basic.jl	/^one(::Union{T,Type{T}}) where {T<:AbstractString} = convert(T, "")$/;"	f
one	stdlib/LinearAlgebra/src/uniformscaling.jl	/^one(::Type{UniformScaling{T}}) where {T} = UniformScaling(one(T))$/;"	f
one	stdlib/LinearAlgebra/src/uniformscaling.jl	/^one(J::UniformScaling{T}) where {T} = one(UniformScaling{T})$/;"	f
one32	test/fastmath.jl	/^const one32 = one(Float32)$/;"	v
one64	test/fastmath.jl	/^const one64 = one(Float64)$/;"	v
onediag	stdlib/LinearAlgebra/test/pinv.jl	/^function onediag(T::Type, m::Integer, n::Integer)$/;"	f
onediag	stdlib/LinearAlgebra/test/pinv.jl	/^onediag(m::Integer, n::Integer) = onediag(Float64, m::Integer, n::Integer)$/;"	f
onediag_sparse	stdlib/LinearAlgebra/test/pinv.jl	/^function onediag_sparse(T::Type, n::Integer)$/;"	f
onediag_sparse	stdlib/LinearAlgebra/test/pinv.jl	/^onediag_sparse(n::Integer) = onediag_sparse(Float64, n::Integer)$/;"	f
oneliner	test/staged.jl	/^@generated oneliner(x,y) = :($x, x, $y, y)$/;"	f
ones	base/array.jl	/^function ones end$/;"	f
ones	src/flisp/unittest.lsp	/^(define ones (map (lambda (x) 1) (iota 80000)))$/;"	f
ones	stdlib/SuiteSparse/src/cholmod.jl	/^function ones(m::Integer, n::Integer, ::Type{Tv}) where Tv<:VTypes$/;"	f
ones	stdlib/SuiteSparse/src/cholmod.jl	/^ones(m::Integer, n::Integer) = ones(m, n, Float64)$/;"	f
oneunit	base/array.jl	/^oneunit(x::AbstractMatrix{T}) where {T} = _one(oneunit(T), x)$/;"	f
oneunit	base/multidimensional.jl	/^    oneunit(::CartesianIndex{N}) where {N} = oneunit(CartesianIndex{N})$/;"	f
oneunit	base/multidimensional.jl	/^    oneunit(::Type{CartesianIndex{N}}) where {N} = CartesianIndex(ntuple(x -> 1, Val(N)))$/;"	f
oneunit	base/number.jl	/^oneunit(::Type{T}) where {T} = T(one(T))$/;"	f
oneunit	base/number.jl	/^oneunit(x::T) where {T} = T(one(x))$/;"	f
oneunit	stdlib/LinearAlgebra/src/uniformscaling.jl	/^oneunit(::Type{UniformScaling{T}}) where {T} = UniformScaling(oneunit(T))$/;"	f
oneunit	stdlib/LinearAlgebra/src/uniformscaling.jl	/^oneunit(J::UniformScaling{T}) where {T} = oneunit(UniformScaling{T})$/;"	f
op	src/flisp/flisp.c	/^    uint32_t op;$/;"	v	typeref:typename:uint32_t
op	test/arrayops.jl	/^    op(x,y) = 2x+y$/;"	f
op-chars	src/julia-parser.scm	/^(define op-chars$/;"	f
op-or-sufchar?	src/julia-parser.scm	/^(define (op-or-sufchar? c) (or (op-suffix-char? c) (opchar? c)))$/;"	f
opaf1	test/keywordargs.jl	/^    opaf1(a,b=1,c=2,d=3) = (a,b,c,d)$/;"	f
opaf2	test/keywordargs.jl	/^        opaf2(a=1,rest...) = (a,rest)$/;"	f
opchar?	src/julia-parser.scm	/^(define opchar? (Set op-chars))$/;"	f
open	base/filesystem.jl	/^function open(path::AbstractString, flags::Integer, mode::Integer=0)$/;"	f
open	base/io.jl	/^function open(f::Function, args...; kwargs...)$/;"	f
open	base/iostream.jl	/^function open(fname::AbstractString, mode::AbstractString)$/;"	f
open	base/iostream.jl	/^function open(fname::AbstractString;$/;"	f
open	base/process.jl	/^function open(cmds::AbstractCmd, mode::AbstractString, stdio::Redirectable=devnull)$/;"	f
open	base/process.jl	/^function open(cmds::AbstractCmd, stdio::Redirectable=devnull; write::Bool=false, read::Bool=!wri/;"	f
open	base/process.jl	/^function open(f::Function, cmds::AbstractCmd, args...; kwargs...)$/;"	f
open	base/stream.jl	/^    function open(fd::RawFD)$/;"	f
open	base/stream.jl	/^function open(h::OS_HANDLE)$/;"	f
open-input-file	src/flisp/aliases.scm	/^(define (open-input-file name) (file name :read))$/;"	f
open-input-string	src/flisp/aliases.scm	/^(define (open-input-string str)$/;"	f
open-output-file	src/flisp/aliases.scm	/^(define (open-output-file name) (file name :write :create))$/;"	f
open-output-string	src/flisp/aliases.scm	/^(define (open-output-string) (buffer))$/;"	f
open-string-output-port	src/flisp/aliases.scm	/^(define (open-string-output-port)$/;"	f
openDebugInfo	src/debuginfo.cpp	/^openDebugInfo(StringRef debuginfopath, const debug_link_info &info)$/;"	f	typeref:typename:Expected<object::OwningBinary<object::ObjectFile>>	file:
open_cloexec	src/support/ios.c	/^static int open_cloexec(const char *path, int flags, mode_t mode)$/;"	f	typeref:typename:int	file:
open_fake_pty	test/testhelpers/FakePTYs.jl	/^function open_fake_pty()$/;"	f
open_flags	base/io.jl	/^function open_flags(;$/;"	f
open_pipe!	base/stream.jl	/^function open_pipe!(p::PipeEndpoint, handle::OS_HANDLE)$/;"	f
open_streams	test/read.jl	/^open_streams = []$/;"	v
openblas_get_config	stdlib/LinearAlgebra/src/blas.jl	/^openblas_get_config() = strip(unsafe_string(ccall((@blasfunc(openblas_get_config), libblas), Ptr/;"	f
operator !=	src/clangsa/GCChecker.cpp	/^            bool operator!=(const RootState &VS) const {$/;"	f	struct:__anon9c5a21540111::GCChecker::RootState	typeref:typename:bool	file:
operator !=	src/clangsa/GCChecker.cpp	/^            bool operator!=(const ValueState &VS) const {$/;"	f	struct:__anon9c5a21540111::GCChecker::ValueState	typeref:typename:bool	file:
operator &	src/processor.cpp	/^static inline constexpr FeatureList<n> operator&(const FeatureList<n> &a, const FeatureList<n> &/;"	f	namespace:__anon839834ed0111	typeref:typename:FeatureList<n>	file:
operator ()	deps/srccache/patchelf-0.9/src/patchelf.cc	/^        bool operator ()(const Elf_Phdr & x, const Elf_Phdr & y)$/;"	f	struct:ElfFile::CompPhdr	typeref:typename:bool	file:
operator ()	deps/srccache/patchelf-0.9/src/patchelf.cc	/^        bool operator ()(const Elf_Shdr & x, const Elf_Shdr & y)$/;"	f	struct:ElfFile::CompShdr	typeref:typename:bool	file:
operator ()	src/intrinsics.cpp	/^    IRBuilder<>& operator()() const { return ctxbuilder; }$/;"	f	struct:math_builder	typeref:typename:IRBuilder<> &	file:
operator ()	src/jitlayers.cpp	/^CompilerResultT JuliaOJIT::CompilerT::operator()(Module &M)$/;"	f	class:JuliaOJIT::CompilerT	typeref:typename:CompilerResultT
operator ()	src/jitlayers.cpp	/^void JuliaOJIT::DebugObjectRegistrar::operator()(RTDyldObjHandleT H,$/;"	f	class:JuliaOJIT::DebugObjectRegistrar	typeref:typename:void
operator () 	src/debuginfo.cpp	/^    bool operator() (const StringRef& lhs, const StringRef& rhs) const$/;"	f	struct:strrefcomp	typeref:typename:bool	file:
operator () 	src/debuginfo.cpp	/^    bool operator() (const size_t& lhs, const size_t& rhs) const$/;"	f	struct:revcomp	typeref:typename:bool	file:
operator *	src/ccall.cpp	/^    Module &operator*()$/;"	f	struct:LazyModule	typeref:typename:Module &	file:
operator <	src/processor_arm.cpp	/^    bool operator<(const CPUID &right) const$/;"	f	struct:ARM::CPUID	typeref:typename:bool	file:
operator <<	src/disasm.cpp	/^static raw_ostream &operator<<(raw_ostream &Out, struct DILineInfoPrinter::repeat i)$/;"	f	typeref:typename:raw_ostream &	file:
operator ==	src/clangsa/GCChecker.cpp	/^            bool operator==(const RootState &VS) const {$/;"	f	struct:__anon9c5a21540111::GCChecker::RootState	typeref:typename:bool	file:
operator ==	src/clangsa/GCChecker.cpp	/^            bool operator==(const ValueState &VS) const {$/;"	f	struct:__anon9c5a21540111::GCChecker::ValueState	typeref:typename:bool	file:
operator []	src/processor.cpp	/^    constexpr const uint32_t &operator[](size_t pos) const$/;"	f	struct:__anon839834ed0111::FeatureList	typeref:typename:const uint32_t &	file:
operator []	src/processor.cpp	/^    uint32_t &operator[](size_t pos)$/;"	f	struct:__anon839834ed0111::FeatureList	typeref:typename:uint32_t &	file:
operator |	src/processor.cpp	/^static inline constexpr FeatureList<n> operator|(const FeatureList<n> &a, const FeatureList<n> &/;"	f	namespace:__anon839834ed0111	typeref:typename:FeatureList<n>	file:
operator ~	src/processor.cpp	/^static inline constexpr FeatureList<n> operator~(const FeatureList<n> &a)$/;"	f	namespace:__anon839834ed0111	typeref:typename:FeatureList<n>	file:
operator-precedence	src/julia-parser.scm	/^(define (operator-precedence op) (get prec-table$/;"	f
operator?	src/julia-parser.scm	/^(define operator? (SuffSet operators))$/;"	f
operator_associativity	base/show.jl	/^function operator_associativity(s::Symbol)$/;"	f
operator_precedence	base/show.jl	/^operator_precedence(s::Symbol) = Int(ccall(:jl_operator_precedence, Cint, (Cstring,), s))$/;"	f
operator_precedence	base/show.jl	/^operator_precedence(x::Any) = 0 # fallback for generic expression nodes$/;"	f
operators	src/julia-parser.scm	/^(define operators$/;"	f
operm	base/stat.jl	/^operm(st::StatStruct) = UInt8((filemode(st)     ) & 0x7)$/;"	f
opkwf1	test/keywordargs.jl	/^        opkwf1(a=0,b=1;k=2) = (a,b,k)$/;"	f
opnames	base/atomics.jl	/^const opnames = Dict{Symbol, Symbol}(:+ => :add, :- => :sub)$/;"	v
opno	src/llvm-alloc-opt.cpp	/^        unsigned opno;$/;"	m	struct:__anon0a1571000111::Optimizer::MemOp	typeref:typename:unsigned	file:
opnorm	stdlib/LinearAlgebra/src/generic.jl	/^@inline opnorm(x::Number, p::Real=2) = norm(x, p)$/;"	f
opnorm	stdlib/LinearAlgebra/src/generic.jl	/^function opnorm(A::AbstractMatrix, p::Real=2)$/;"	f
opnorm	stdlib/LinearAlgebra/src/generic.jl	/^opnorm(v::AdjointAbsVec) = norm(conj(v.parent))$/;"	f
opnorm	stdlib/LinearAlgebra/src/generic.jl	/^opnorm(v::AdjointAbsVec, q::Real) = q == Inf ? norm(conj(v.parent), 1) : norm(conj(v.parent), q\//;"	f
opnorm	stdlib/LinearAlgebra/src/generic.jl	/^opnorm(v::TransposeAbsVec) = norm(v.parent)$/;"	f
opnorm	stdlib/LinearAlgebra/src/generic.jl	/^opnorm(v::TransposeAbsVec, q::Real) = q == Inf ? norm(v.parent, 1) : norm(v.parent, q\/(q-1))$/;"	f
opnorm	stdlib/LinearAlgebra/src/uniformscaling.jl	/^opnorm(J::UniformScaling, p::Real=2) = opnorm(J.λ, p)$/;"	f
opnorm	stdlib/SparseArrays/src/linalg.jl	/^function opnorm(A::AbstractSparseMatrixCSC, p::Real=2)$/;"	f
opnorm1	stdlib/LinearAlgebra/src/generic.jl	/^function opnorm1(A::AbstractMatrix{T}) where T$/;"	f
opnorm2	stdlib/LinearAlgebra/src/generic.jl	/^function opnorm2(A::AbstractMatrix{T}) where T$/;"	f
opnormInf	stdlib/LinearAlgebra/src/generic.jl	/^function opnormInf(A::AbstractMatrix{T}) where T$/;"	f
opnormestinv	stdlib/SparseArrays/src/linalg.jl	/^function opnormestinv(A::AbstractSparseMatrixCSC{T}, t::Integer = min(2,maximum(size(A)))) where/;"	f
opsuffs	src/flisp/julia_opsuffs.h	/^static const uint32_t opsuffs[] = {$/;"	v	typeref:typename:const uint32_t[]
opt25261	test/compiler/inference.jl	/^opt25261 = code_typed(foo25261, Tuple{}, optimize=false)[1].first.code$/;"	v
opt_banner	src/jloptions.c	/^           opt_banner,$/;"	e	enum:jl_parse_opts::__anonad4676cf0103	file:
opt_bind_to	src/jloptions.c	/^           opt_bind_to,$/;"	e	enum:jl_parse_opts::__anonad4676cf0103	file:
opt_check_bounds	src/jloptions.c	/^           opt_check_bounds,$/;"	e	enum:jl_parse_opts::__anonad4676cf0103	file:
opt_code_coverage	src/jloptions.c	/^           opt_code_coverage,$/;"	e	enum:jl_parse_opts::__anonad4676cf0103	file:
opt_color	src/jloptions.c	/^           opt_color,$/;"	e	enum:jl_parse_opts::__anonad4676cf0103	file:
opt_compile	src/jloptions.c	/^           opt_compile,$/;"	e	enum:jl_parse_opts::__anonad4676cf0103	file:
opt_compiled_modules	src/jloptions.c	/^           opt_compiled_modules,$/;"	e	enum:jl_parse_opts::__anonad4676cf0103	file:
opt_depwarn	src/jloptions.c	/^           opt_depwarn,$/;"	e	enum:jl_parse_opts::__anonad4676cf0103	file:
opt_handle_signals	src/jloptions.c	/^           opt_handle_signals,$/;"	e	enum:jl_parse_opts::__anonad4676cf0103	file:
opt_help_hidden	src/jloptions.c	/^           opt_help_hidden,$/;"	e	enum:jl_parse_opts::__anonad4676cf0103	file:
opt_history_file	src/jloptions.c	/^           opt_history_file,$/;"	e	enum:jl_parse_opts::__anonad4676cf0103	file:
opt_incremental	src/jloptions.c	/^           opt_incremental,$/;"	e	enum:jl_parse_opts::__anonad4676cf0103	file:
opt_inline	src/jloptions.c	/^           opt_inline,$/;"	e	enum:jl_parse_opts::__anonad4676cf0103	file:
opt_level	src/julia.h	/^    int8_t opt_level;$/;"	m	struct:__anon055fe4271808	typeref:typename:int8_t
opt_level	test/compiler/codegen.jl	/^const opt_level = Base.JLOptions().opt_level$/;"	v
opt_machine_file	src/jloptions.c	/^           opt_machine_file,$/;"	e	enum:jl_parse_opts::__anonad4676cf0103	file:
opt_machinefile	src/jloptions.c	/^    enum { opt_machinefile = 300,$/;"	e	enum:jl_parse_opts::__anonad4676cf0103	file:
opt_math_mode	src/jloptions.c	/^           opt_math_mode,$/;"	e	enum:jl_parse_opts::__anonad4676cf0103	file:
opt_output_bc	src/jloptions.c	/^           opt_output_bc,$/;"	e	enum:jl_parse_opts::__anonad4676cf0103	file:
opt_output_ji	src/jloptions.c	/^           opt_output_ji,$/;"	e	enum:jl_parse_opts::__anonad4676cf0103	file:
opt_output_jit_bc	src/jloptions.c	/^           opt_output_jit_bc,$/;"	e	enum:jl_parse_opts::__anonad4676cf0103	file:
opt_output_o	src/jloptions.c	/^           opt_output_o,$/;"	e	enum:jl_parse_opts::__anonad4676cf0103	file:
opt_output_unopt_bc	src/jloptions.c	/^           opt_output_unopt_bc,$/;"	e	enum:jl_parse_opts::__anonad4676cf0103	file:
opt_polly	src/jloptions.c	/^           opt_polly,$/;"	e	enum:jl_parse_opts::__anonad4676cf0103	file:
opt_project	src/jloptions.c	/^           opt_project,$/;"	e	enum:jl_parse_opts::__anonad4676cf0103	file:
opt_startup_file	src/jloptions.c	/^           opt_startup_file,$/;"	e	enum:jl_parse_opts::__anonad4676cf0103	file:
opt_sysimage_native_code	src/jloptions.c	/^           opt_sysimage_native_code,$/;"	e	enum:jl_parse_opts::__anonad4676cf0103	file:
opt_trace_compile	src/jloptions.c	/^           opt_trace_compile,$/;"	e	enum:jl_parse_opts::__anonad4676cf0103	file:
opt_track_allocation	src/jloptions.c	/^           opt_track_allocation,$/;"	e	enum:jl_parse_opts::__anonad4676cf0103	file:
opt_use_compilecache	src/jloptions.c	/^           opt_use_compilecache,$/;"	e	enum:jl_parse_opts::__anonad4676cf0103	file:
opt_use_precompiled	src/jloptions.c	/^           opt_use_precompiled,$/;"	e	enum:jl_parse_opts::__anonad4676cf0103	file:
opt_warn_overwrite	src/jloptions.c	/^           opt_warn_overwrite,$/;"	e	enum:jl_parse_opts::__anonad4676cf0103	file:
opt_worker	src/jloptions.c	/^           opt_worker,$/;"	e	enum:jl_parse_opts::__anonad4676cf0103	file:
optarg	src/getopt.c	/^char *optarg;$/;"	v	typeref:typename:char *
opterr	src/getopt.c	/^int optind=1, opterr=1, optopt, __optpos, __optreset=0;$/;"	v	typeref:typename:int
optimize	base/compiler/optimize.jl	/^function optimize(opt::OptimizationState, @nospecialize(result))$/;"	f
optimize	test/testhelpers/llvmpasses.jl	/^optimize=false$/;"	v
optimizeAll	src/llvm-alloc-opt.cpp	/^void Optimizer::optimizeAll()$/;"	f	class:__anon0a1571000111::Optimizer	typeref:typename:void
optind	src/getopt.c	/^int optind=1, opterr=1, optopt, __optpos, __optreset=0;$/;"	v	typeref:typename:int
option	src/getopt.h	/^struct option$/;"	s
optional-positional-defs	src/julia-syntax.scm	/^(define (optional-positional-defs name sparams req opt dfl body overall-argl rett)$/;"	f
optional_argument	src/getopt.h	/^#define optional_argument /;"	d
options	contrib/julia-config.jl	/^const options = [$/;"	v
options	stdlib/REPL/src/LineEdit.jl	/^options(s::PromptState) =$/;"	f
options	stdlib/REPL/src/TerminalMenus/AbstractMenu.jl	/^options(m::AbstractMenu) = error("unimplemented")$/;"	f
options	stdlib/REPL/src/TerminalMenus/MultiSelectMenu.jl	/^options(m::MultiSelectMenu) = m.options$/;"	f
options	stdlib/REPL/src/TerminalMenus/RadioMenu.jl	/^options(m::RadioMenu) = m.options$/;"	f
optopt	src/getopt.c	/^int optind=1, opterr=1, optopt, __optpos, __optreset=0;$/;"	v	typeref:typename:int
optpos	src/getopt.c	/^#define optpos /;"	d	file:
opts	src/jloptions.c	/^static const char opts[]  =$/;"	v	typeref:typename:const char[]	file:
opts_hidden	src/jloptions.c	/^static const char opts_hidden[]  =$/;"	v	typeref:typename:const char[]	file:
or_op	src/runtime_intrinsics.c	/^#define or_op(/;"	d	file:
ord	base/ordering.jl	/^function ord(lt, by, rev::Bool, order::Ordering=Forward)$/;"	f
ord	base/ordering.jl	/^ord(lt, by, rev::Nothing, order::Ordering=Forward) = _ord(lt, by, order)$/;"	f
ordered	test/grisu.jl	/^ordered = 0x01234567$/;"	v
ordered	test/grisu.jl	/^ordered = 0x0123456789ABCDEF$/;"	v
ordschur	stdlib/LinearAlgebra/src/schur.jl	/^ordschur(gschur::GeneralizedSchur, select::Union{Vector{Bool},BitVector}) =$/;"	f
ordschur	stdlib/LinearAlgebra/src/schur.jl	/^ordschur(schur::Schur, select::Union{Vector{Bool},BitVector}) =$/;"	f
ordschur!	stdlib/LinearAlgebra/src/schur.jl	/^function ordschur!(gschur::GeneralizedSchur, select::Union{Vector{Bool},BitVector})$/;"	f
ordschur!	stdlib/LinearAlgebra/src/schur.jl	/^function ordschur!(schur::Schur, select::Union{Vector{Bool},BitVector})$/;"	f
ordtype	base/ordering.jl	/^ordtype(o::By,              vs::AbstractArray) = try typeof(o.by(vs[1])) catch; Any end$/;"	f
ordtype	base/ordering.jl	/^ordtype(o::Ordering,        vs::AbstractArray) = eltype(vs)$/;"	f
ordtype	base/ordering.jl	/^ordtype(o::Perm,            vs::AbstractArray) = ordtype(o.order, o.data)$/;"	f
ordtype	base/ordering.jl	/^ordtype(o::ReverseOrdering, vs::AbstractArray) = ordtype(o.fwd, vs)$/;"	f
orghr!	stdlib/LinearAlgebra/src/lapack.jl	/^        function orghr!(ilo::Integer, ihi::Integer, A::AbstractMatrix{$elty}, tau::AbstractVecto/;"	f
orglq!	stdlib/LinearAlgebra/src/lapack.jl	/^        function orglq!(A::AbstractMatrix{$elty}, tau::AbstractVector{$elty}, k::Integer = lengt/;"	f
orgql!	stdlib/LinearAlgebra/src/lapack.jl	/^        function orgql!(A::AbstractMatrix{$elty}, tau::AbstractVector{$elty}, k::Integer = lengt/;"	f
orgqr!	stdlib/LinearAlgebra/src/lapack.jl	/^        function orgqr!(A::AbstractMatrix{$elty}, tau::AbstractVector{$elty}, k::Integer = lengt/;"	f
orgrq!	stdlib/LinearAlgebra/src/lapack.jl	/^        function orgrq!(A::AbstractMatrix{$elty}, tau::AbstractVector{$elty}, k::Integer = lengt/;"	f
orgtr!	stdlib/LinearAlgebra/src/lapack.jl	/^        function orgtr!(uplo::AbstractChar, A::AbstractMatrix{$elty}, tau::AbstractVector{$elty}/;"	f
orig_curmodule14726	test/threads_exec.jl	/^orig_curmodule14726 = @__MODULE__$/;"	v
orig_funcs	src/llvm-multiversioning.cpp	/^    std::vector<Function*> orig_funcs{};$/;"	m	struct:__anond5683ea40111::CloneCtx	typeref:typename:std::vector<Function * >	file:
orig_i	src/llvm-alloc-opt.cpp	/^            Instruction *orig_i;$/;"	m	struct:__anon0a1571000111::Optimizer::ReplaceUses::Frame	typeref:typename:Instruction *	file:
original_ex	stdlib/Distributed/src/clusterserialize.jl	/^function original_ex(s::ClusterSerializer, ex_str, remote_stktrace)$/;"	f
ormhr!	stdlib/LinearAlgebra/src/lapack.jl	/^        function ormhr!(side::AbstractChar, trans::AbstractChar, ilo::Integer, ihi::Integer, A::/;"	f
ormlq!	stdlib/LinearAlgebra/src/lapack.jl	/^        function ormlq!(side::AbstractChar, trans::AbstractChar, A::AbstractMatrix{$elty},$/;"	f
ormql!	stdlib/LinearAlgebra/src/lapack.jl	/^        function ormql!(side::AbstractChar, trans::AbstractChar, A::AbstractMatrix{$elty},$/;"	f
ormqr!	stdlib/LinearAlgebra/src/lapack.jl	/^        function ormqr!(side::AbstractChar, trans::AbstractChar, A::AbstractMatrix{$elty},$/;"	f
ormrq!	stdlib/LinearAlgebra/src/lapack.jl	/^        function ormrq!(side::AbstractChar, trans::AbstractChar, A::AbstractMatrix{$elty},$/;"	f
ormrz!	stdlib/LinearAlgebra/src/lapack.jl	/^        function ormrz!(side::AbstractChar, trans::AbstractChar, A::AbstractMatrix{$elty},$/;"	f
ormtr!	stdlib/LinearAlgebra/src/lapack.jl	/^        function ormtr!(side::AbstractChar, uplo::AbstractChar, trans::AbstractChar, A::Abstract/;"	f
osize	src/gc.h	/^    uint16_t osize; \/\/ size of each object in this page$/;"	m	struct:__anoncf30557c1108	typeref:typename:uint16_t
osize	src/julia_threads.h	/^    uint16_t osize;      \/\/ size of objects in this pool$/;"	m	struct:__anonf8aecdb10408	typeref:typename:uint16_t
other	src/gc.h	/^    jl_alloc_num_t other;$/;"	m	struct:__anoncf30557c0208	typeref:typename:jl_alloc_num_t
otherperiod_seed	stdlib/Dates/src/periods.jl	/^const otherperiod_seed = UInt === UInt64 ? 0xe1837356ff2d2ac9 : 0x170d1b00$/;"	v
out	test/spawn.jl	/^out = read(`$echocmd hello` & `$echocmd world`, String)$/;"	v
out_arg	test/clangsa/MissingRoots.c	/^void out_arg(jl_value_t **out JL_REQUIRE_ROOTED_SLOT)$/;"	f	typeref:typename:void
outc	src/flisp/print.c	/^static void outc(fl_context_t *fl_ctx, char c, ios_t *f)$/;"	f	typeref:typename:void	file:
outindent	src/flisp/print.c	/^static int outindent(fl_context_t *fl_ctx, int n, ios_t *f)$/;"	f	typeref:typename:int	file:
output	stdlib/Base64/src/decode.jl	/^    function output(b)$/;"	f
output_code_coverage	src/julia.h	/^    const char *output_code_coverage;$/;"	m	struct:__anon055fe4271808	typeref:typename:const char *
output_none	src/disasm.cpp	/^        output_none = 0,$/;"	e	enum:DILineInfoPrinter::__anon2853c92e0103	file:
output_source	src/disasm.cpp	/^        output_source = 1,$/;"	e	enum:DILineInfoPrinter::__anon2853c92e0103	file:
outputbase	src/julia.h	/^    const char *outputbase;$/;"	m	struct:__anon055fe4271808	typeref:typename:const char *
outputbc	src/julia.h	/^    const char *outputbc;$/;"	m	struct:__anon055fe4271808	typeref:typename:const char *
outputji	src/julia.h	/^    const char *outputji;$/;"	m	struct:__anon055fe4271808	typeref:typename:const char *
outputjitbc	src/julia.h	/^    const char *outputjitbc;$/;"	m	struct:__anon055fe4271808	typeref:typename:const char *
outputline	src/gen_sysimg_symtab.jl	/^function outputline(io, name)$/;"	f
outputo	src/julia.h	/^    const char *outputo;$/;"	m	struct:__anon055fe4271808	typeref:typename:const char *
outputpath	src/julia.h	/^    const char *outputpath;$/;"	m	struct:__anon055fe4271808	typeref:typename:const char *
outputunoptbc	src/julia.h	/^    const char *outputunoptbc;$/;"	m	struct:__anon055fe4271808	typeref:typename:const char *
outs	src/flisp/print.c	/^static void outs(fl_context_t *fl_ctx, const char *s, ios_t *f)$/;"	f	typeref:typename:void	file:
outsidevar	test/misc.jl	/^const outsidevar = 7$/;"	v
outsn	src/flisp/print.c	/^static void outsn(fl_context_t *fl_ctx, const char *s, ios_t *f, size_t n)$/;"	f	typeref:typename:void	file:
outstream	stdlib/REPL/src/REPL.jl	/^outstream(r::BasicREPL) = r.terminal$/;"	f
outstream	stdlib/REPL/src/REPL.jl	/^outstream(r::LineEditREPL) = r.t$/;"	f
outstream	stdlib/REPL/src/REPL.jl	/^outstream(s::StreamREPL) = s.stream$/;"	f
outstrsym	src/flisp/flisp.h	/^    value_t instrsym, outstrsym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
ovec_length	base/pcre.jl	/^function ovec_length(match_data)$/;"	f
ovec_ptr	base/pcre.jl	/^function ovec_ptr(match_data)$/;"	f
overdub	test/compiler/contextual.jl	/^    @eval function overdub(c::Ctx, f, args...)$/;"	f
overdub	test/compiler/contextual.jl	/^    @inline function overdub(c::Ctx, f::Union{Core.Builtin, Core.IntrinsicFunction}, args...)$/;"	f
overdub_generator	test/compiler/contextual.jl	/^    function overdub_generator(self, c, f, args)$/;"	f
override	test/precompile.jl	/^              override(x::AbstractFloat) = Float64(override(1))$/;"	f
override	test/precompile.jl	/^              override(x::Integer) = 2$/;"	f
owned	src/flisp/flisp.h	/^#define owned(/;"	d
owner	src/julia.h	/^    struct _jl_module_t *owner;  \/\/ for individual imported bindings$/;"	m	struct:__anon055fe4271108	typeref:struct:_jl_module_t *
owner	src/julia_threads.h	/^    volatile unsigned long owner;$/;"	m	struct:__anonf8aecdb10308	typeref:typename:volatile unsigned long
owner	src/timing.h	/^    int owner;$/;"	m	struct:_jl_timing_block_t	typeref:typename:int
p	contrib/normalize_triplet.py	/^def p(x):$/;"	f
p	stdlib/Distributed/src/remotecall.jl	/^p = 1$/;"	v
p1,p2	stdlib/Distributed/test/distributed_exec.jl	/^p1,p2 = addprocs_with_testenv(2)$/;"	v
p::widen	base/combinatorics.jl	/^    p::widen(Int) = mx[1]             # initial value of product in this case$/;"	f
pTIndex	src/codegen.cpp	/^    Value *pTIndex; \/\/ i8* stack slot for the value.TIndex tag describing `value.V`$/;"	m	struct:jl_varinfo_t	typeref:typename:Value *	file:
p_align	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word	p_align;		\/* Segment alignment *\/$/;"	m	struct:__anonff7a58690d08	typeref:typename:Elf32_Word
p_align	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Xword	p_align;		\/* Segment alignment *\/$/;"	m	struct:__anonff7a58690e08	typeref:typename:Elf64_Xword
p_cur	src/llvm-alloc-opt.cpp	/^            pred_iterator p_cur;$/;"	m	struct:__anon0a1571000111::Optimizer::Lifetime::Frame	typeref:typename:pred_iterator	file:
p_end	src/llvm-alloc-opt.cpp	/^            pred_iterator p_end;$/;"	m	struct:__anon0a1571000111::Optimizer::Lifetime::Frame	typeref:typename:pred_iterator	file:
p_filesz	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word	p_filesz;		\/* Segment size in file *\/$/;"	m	struct:__anonff7a58690d08	typeref:typename:Elf32_Word
p_filesz	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Xword	p_filesz;		\/* Segment size in file *\/$/;"	m	struct:__anonff7a58690e08	typeref:typename:Elf64_Xword
p_flags	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word	p_flags;		\/* Segment flags *\/$/;"	m	struct:__anonff7a58690d08	typeref:typename:Elf32_Word
p_flags	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Word	p_flags;		\/* Segment flags *\/$/;"	m	struct:__anonff7a58690e08	typeref:typename:Elf64_Word
p_memsz	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word	p_memsz;		\/* Segment size in memory *\/$/;"	m	struct:__anonff7a58690d08	typeref:typename:Elf32_Word
p_memsz	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Xword	p_memsz;		\/* Segment size in memory *\/$/;"	m	struct:__anonff7a58690e08	typeref:typename:Elf64_Xword
p_offset	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Off	p_offset;		\/* Segment file offset *\/$/;"	m	struct:__anonff7a58690d08	typeref:typename:Elf32_Off
p_offset	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Off	p_offset;		\/* Segment file offset *\/$/;"	m	struct:__anonff7a58690e08	typeref:typename:Elf64_Off
p_paddr	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Addr	p_paddr;		\/* Segment physical address *\/$/;"	m	struct:__anonff7a58690d08	typeref:typename:Elf32_Addr
p_paddr	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Addr	p_paddr;		\/* Segment physical address *\/$/;"	m	struct:__anonff7a58690e08	typeref:typename:Elf64_Addr
p_type	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word	p_type;			\/* Segment type *\/$/;"	m	struct:__anonff7a58690d08	typeref:typename:Elf32_Word
p_type	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Word	p_type;			\/* Segment type *\/$/;"	m	struct:__anonff7a58690e08	typeref:typename:Elf64_Word
p_vaddr	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Addr	p_vaddr;		\/* Segment virtual address *\/$/;"	m	struct:__anonff7a58690d08	typeref:typename:Elf32_Addr
p_vaddr	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Addr	p_vaddr;		\/* Segment virtual address *\/$/;"	m	struct:__anonff7a58690e08	typeref:typename:Elf64_Addr
pack8bools	base/bitarray.jl	/^function pack8bools(z::UInt64)$/;"	f
package_callbacks	base/loading.jl	/^const package_callbacks = Any[]$/;"	v
package_locks	base/loading.jl	/^const package_locks = Dict{PkgId,Condition}()$/;"	v
package_path_to_project_file	base/loading.jl	/^function package_path_to_project_file(path::String)::Union{Nothing,String}$/;"	f
package_slug	base/loading.jl	/^function package_slug(uuid::UUID, p::Int=5)$/;"	f
pad	base/printf.jl	/^function pad(m::Int, n, c::Char)$/;"	f
pad_remainder!	stdlib/SHA/src/common.jl	/^function pad_remainder!(context::T) where T<:SHA_CTX$/;"	f
padcells!	stdlib/Markdown/src/GitHub/table.jl	/^function padcells!(rows, align; len = length, min = 0)$/;"	f
padded_nonzero_print	base/util.jl	/^function padded_nonzero_print(value,str)$/;"	f
padding	base/reinterpretarray.jl	/^function padding(T)$/;"	f
padding	stdlib/Markdown/src/GitHub/table.jl	/^padding(width, twidth, a) =$/;"	f
page-size	deps/srccache/patchelf-0.9/configure.ac	/^AC_ARG_WITH([page-size],$/;"	w
pageSize	deps/srccache/patchelf-0.9/src/patchelf.cc	/^static int pageSize = PAGESIZE;$/;"	v	typeref:typename:int	file:
page_metadata	src/gc.h	/^STATIC_INLINE jl_gc_pagemeta_t *page_metadata(void *_data) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE jl_gc_pagemeta_t *
page_metadata_ext	src/gc.h	/^STATIC_INLINE struct jl_gc_metadata_ext page_metadata_ext(void *_data) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE struct jl_gc_metadata_ext
page_pfl_beg	src/gc.h	/^STATIC_INLINE jl_taggedvalue_t *page_pfl_beg(jl_gc_pagemeta_t *p) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE jl_taggedvalue_t *
page_pfl_end	src/gc.h	/^STATIC_INLINE jl_taggedvalue_t *page_pfl_end(jl_gc_pagemeta_t *p) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE jl_taggedvalue_t *
pagesym	src/flisp/flisp.h	/^    value_t vtabsym, pagesym, returnsym, escsym, spacesym, deletesym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
pagetable0	src/gc.h	/^    pagetable0_t *pagetable0;$/;"	m	struct:jl_gc_metadata_ext	typeref:typename:pagetable0_t *
pagetable0_i	src/gc.h	/^    unsigned pagetable0_i32, pagetable0_i;$/;"	m	struct:jl_gc_metadata_ext	typeref:typename:unsigned
pagetable0_i32	src/gc.h	/^    unsigned pagetable0_i32, pagetable0_i;$/;"	m	struct:jl_gc_metadata_ext	typeref:typename:unsigned
pagetable0_t	src/gc.h	/^} pagetable0_t;$/;"	t	typeref:struct:__anoncf30557c1208
pagetable1	src/gc.h	/^    pagetable1_t *pagetable1;$/;"	m	struct:jl_gc_metadata_ext	typeref:typename:pagetable1_t *
pagetable1_i	src/gc.h	/^    unsigned pagetable1_i32, pagetable1_i;$/;"	m	struct:jl_gc_metadata_ext	typeref:typename:unsigned
pagetable1_i32	src/gc.h	/^    unsigned pagetable1_i32, pagetable1_i;$/;"	m	struct:jl_gc_metadata_ext	typeref:typename:unsigned
pagetable1_t	src/gc.h	/^} pagetable1_t;$/;"	t	typeref:struct:__anoncf30557c1308
pagetable_i	src/gc.h	/^    unsigned pagetable_i32, pagetable_i;$/;"	m	struct:jl_gc_metadata_ext	typeref:typename:unsigned
pagetable_i32	src/gc.h	/^    unsigned pagetable_i32, pagetable_i;$/;"	m	struct:jl_gc_metadata_ext	typeref:typename:unsigned
pagetable_t	src/gc.h	/^} pagetable_t;$/;"	t	typeref:struct:__anoncf30557c1408
pair-with-gensyms	src/macroexpand.scm	/^(define (pair-with-gensyms v)$/;"	f
pairs	base/abstractdict.jl	/^pairs(a::AbstractDict) = a$/;"	f
pairs	base/abstractdict.jl	/^pairs(collection) = Generator(=>, keys(collection), values(collection))$/;"	f
pairs	base/iterators.jl	/^pairs(::IndexCartesian, A::AbstractArray) = Pairs(A, CartesianIndices(axes(A)))$/;"	f
pairs	base/iterators.jl	/^pairs(::IndexLinear,    A::AbstractArray) = Pairs(A, LinearIndices(A))$/;"	f
pairs	base/iterators.jl	/^pairs(A::AbstractArray)  = pairs(IndexCartesian(), A)$/;"	f
pairs	base/iterators.jl	/^pairs(A::AbstractVector) = pairs(IndexLinear(), A)$/;"	f
pairs	base/iterators.jl	/^pairs(nt::NamedTuple) = Pairs(nt, keys(nt))$/;"	f
pairs	base/iterators.jl	/^pairs(tuple::Tuple) = Pairs(tuple, keys(tuple))$/;"	f
pairs	base/iterators.jl	/^pairs(v::Core.SimpleVector) = Pairs(v, LinearIndices(v))$/;"	f
pairsym	src/flisp/flisp.h	/^    value_t pairsym, symbolsym, fixnumsym, vectorsym, builtinsym, vu8sym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
pairwise_blocksize	base/reduce.jl	/^pairwise_blocksize(::typeof(abs2), ::typeof(+)) = 4096$/;"	f
pairwise_blocksize	base/reduce.jl	/^pairwise_blocksize(f, op) = 1024$/;"	f
pandaFaddglobal	base/Base.jl	/^pandaFaddglobal(x) = x + pandaG1$/;"	f
pandaFaddinitglobal	base/Base.jl	/^pandaFaddinitglobal(x) = x + pandaG2$/;"	f
pandaFaddliteral	base/Base.jl	/^pandaFaddliteral(x) = x + 1$/;"	f
pandaFglobal	base/Base.jl	/^pandaFglobal(x) = pandaG1$/;"	f
pandaFliteral	base/Base.jl	/^pandaFliteral(x) = 2$/;"	f
pandaFnilprecompiledglobal	base/Base.jl	/^@noinline pandaFnilprecompiledglobal(x) = pandaG1$/;"	f
pandaFprecompiledglobal	base/Base.jl	/^pandaFprecompiledglobal(x) = pandaG1$/;"	f
pandaG1	base/Base.jl	/^pandaG1 = Int64(3)$/;"	v
pandaG2	base/Base.jl	/^pandaG2 = Int64(5)$/;"	v
paragraph	stdlib/Markdown/src/Common/block.jl	/^function paragraph(stream::IO, md::MD)$/;"	f
parameter_upper_bound	base/reflection.jl	/^function parameter_upper_bound(t::UnionAll, idx)$/;"	f
parameters	src/julia.h	/^    jl_svec_t *parameters;$/;"	m	struct:_jl_datatype_t	typeref:typename:jl_svec_t *
parameters-to-block	src/julia-parser.scm	/^(define (parameters-to-block e)$/;"	f
parametric	test/reflection.jl	/^parametric(A::Array{T,N}, i::Vararg{Int,N}) where {T,N} = N$/;"	f
params	src/codegen.cpp	/^    const jl_cgparams_t *params = NULL;$/;"	m	class:jl_codectx_t	typeref:typename:const jl_cgparams_t *	file:
parent	base/abstractarray.jl	/^parent(a::AbstractArray) = a$/;"	f
parent	base/reinterpretarray.jl	/^parent(a::ReinterpretArray) = a.parent$/;"	f
parent	base/reshapedarray.jl	/^parent(A::ReshapedArray) = A.parent$/;"	f
parent	base/subarray.jl	/^parent(V::SubArray) = V.parent$/;"	f
parent	src/ast.c	/^    struct macroctx_stack *parent;$/;"	m	struct:macroctx_stack	typeref:struct:macroctx_stack *	file:
parent	src/flisp/flisp.h	/^        value_t parent;    \/\/ optional$/;"	m	union:__anonb455601d0408::__anonb455601d050a	typeref:typename:value_t
parent	src/gc.h	/^    jl_module_t *parent; \/\/ The parent module to trigger write barrier on.$/;"	m	struct:__anoncf30557c0c08	typeref:typename:jl_module_t *
parent	src/gc.h	/^    jl_value_t *parent; \/\/ The parent object to trigger write barrier on.$/;"	m	struct:__anoncf30557c0608	typeref:typename:jl_value_t *
parent	src/gc.h	/^    jl_value_t *parent; \/\/ The parent object to trigger write barrier on.$/;"	m	struct:__anoncf30557c0708	typeref:typename:jl_value_t *
parent	src/gc.h	/^    jl_value_t *parent; \/\/ The parent object to trigger write barrier on.$/;"	m	struct:__anoncf30557c0808	typeref:typename:jl_value_t *
parent	src/gc.h	/^    jl_value_t *parent; \/\/ The parent object to trigger write barrier on.$/;"	m	struct:__anoncf30557c0908	typeref:typename:jl_value_t *
parent	src/julia.h	/^    jl_method_instance_t *parent; \/\/ context (optionally, if available, otherwise nothing)$/;"	m	struct:_jl_code_info_t	typeref:typename:jl_method_instance_t *
parent	src/julia.h	/^    struct _jl_module_t *parent;$/;"	m	struct:_jl_module_t	typeref:struct:_jl_module_t *
parent	src/llvm-alloc-opt.cpp	/^            Instruction *parent;$/;"	m	struct:__anon0a1571000111::Optimizer::CheckInst::Frame	typeref:typename:Instruction *	file:
parent	stdlib/LinearAlgebra/src/adjtrans.jl	/^parent(A::AdjOrTrans) = A.parent$/;"	f
parent	stdlib/LinearAlgebra/src/diagonal.jl	/^parent(D::Diagonal) = D.diag$/;"	f
parent	stdlib/LinearAlgebra/src/hessenberg.jl	/^parent(H::UpperHessenberg) = H.data$/;"	f
parent	stdlib/LinearAlgebra/src/symmetric.jl	/^parent(A::HermOrSym) = A.data$/;"	f
parent	stdlib/LinearAlgebra/src/triangular.jl	/^parent(A::AbstractTriangular) = A.data$/;"	f
parent	test/stacktraces.jl	/^    @noinline parent() = child()$/;"	f
parentdims	base/subarray.jl	/^function parentdims(s::SubArray)$/;"	f
parentindices	base/reshapedarray.jl	/^parentindices(A::ReshapedArray) = map(OneTo, size(parent(A)))$/;"	f
parentindices	base/subarray.jl	/^parentindices(V::SubArray) = V.indices$/;"	f
parentindices	base/subarray.jl	/^parentindices(a::AbstractArray) = map(OneTo, size(a))$/;"	f
parentmodule	base/reflection.jl	/^function parentmodule(@nospecialize(f), @nospecialize(types))$/;"	f
parentmodule	base/reflection.jl	/^parentmodule(f::Function) = parentmodule(typeof(f))$/;"	f
parentmodule	base/reflection.jl	/^parentmodule(m::Module) = ccall(:jl_module_parent, Ref{Module}, (Any,), m)$/;"	f
parentmodule	base/reflection.jl	/^parentmodule(t::DataType) = t.name.module$/;"	f
parentmodule	base/reflection.jl	/^parentmodule(t::UnionAll) = parentmodule(unwrap_unionall(t))$/;"	f
parenttype	test/testhelpers/OffsetArrays.jl	/^parenttype(::Type{OffsetArray{T,N,AA}}) where {T,N,AA} = AA$/;"	f
parenttype	test/testhelpers/OffsetArrays.jl	/^parenttype(A::OffsetArray) = parenttype(typeof(A))$/;"	f
parse	base/meta.jl	/^function parse(str::AbstractString, pos::Integer; greedy::Bool=true, raise::Bool=true,$/;"	f
parse	base/meta.jl	/^function parse(str::AbstractString; raise::Bool=true, depwarn::Bool=true)$/;"	f
parse	base/parse.jl	/^function parse(::Type{T}, c::AbstractChar; base::Integer = 10) where T<:Integer$/;"	f
parse	base/parse.jl	/^function parse(::Type{T}, s::AbstractString; base::Union{Nothing,Integer} = nothing) where {T<:I/;"	f
parse	base/printf.jl	/^function parse(s::AbstractString)$/;"	f
parse	deps/srccache/patchelf-0.9/src/patchelf.cc	/^void ElfFile<ElfFileParamNames>::parse()$/;"	f	class:ElfFile	typeref:typename:void
parse	stdlib/Markdown/src/Markdown.jl	/^parse(markdown::AbstractString; flavor = julia) = parse(IOBuffer(markdown), flavor = flavor)$/;"	f
parse	stdlib/Markdown/src/parse/parse.jl	/^function parse(stream::IO, block::MD, config::Config; breaking = false)$/;"	f
parse	stdlib/Markdown/src/parse/parse.jl	/^function parse(stream::IO; flavor = julia)$/;"	f
parse	stdlib/Markdown/src/parse/parse.jl	/^parse(stream::IO, block::MD; breaking = false) =$/;"	f
parse	stdlib/Sockets/src/IPAddr.jl	/^function parse(::Type{IPAddr}, str::AbstractString)$/;"	f
parse	stdlib/Sockets/src/IPAddr.jl	/^function parse(::Type{IPv4}, str::AbstractString)$/;"	f
parse	stdlib/Sockets/src/IPAddr.jl	/^function parse(::Type{IPv6}, str::AbstractString)$/;"	f
parse-LtoR	src/julia-parser.scm	/^(define-macro (parse-LtoR s down ops)$/;"	f
parse-Nary	src/julia-parser.scm	/^(define (parse-Nary s down ops head closer? add-linenums)$/;"	f
parse-RtoL	src/julia-parser.scm	/^(define-macro (parse-RtoL s down ops syntactic self)$/;"	f
parse-all-	src/jlfrontend.scm	/^(define (parse-all- io filename)$/;"	f
parse-and	src/julia-parser.scm	/^(define (parse-and s)   (parse-RtoL s parse-comparison is-prec-lazy-and? #t parse-and))$/;"	f
parse-arglist	src/julia-parser.scm	/^(define (parse-arglist s closer (add-linenums #f))$/;"	f
parse-arrow	src/julia-parser.scm	/^(define (parse-arrow s) (parse-RtoL s parse-or         is-prec-arrow? (eq? t '-->) parse-arrow))$/;"	f
parse-assignment	src/julia-parser.scm	/^(define (parse-assignment s down)$/;"	f
parse-atom	src/julia-parser.scm	/^(define (parse-atom s (checked #t))$/;"	f
parse-block	src/julia-parser.scm	/^(define (parse-block s (down parse-eq))$/;"	f
parse-call	src/julia-parser.scm	/^(define (parse-call s)$/;"	f
parse-call-arglist	src/julia-parser.scm	/^(define (parse-call-arglist s closer)$/;"	f
parse-call-chain	src/julia-parser.scm	/^(define (parse-call-chain s ex macrocall?)$/;"	f
parse-call-with-initial-ex	src/julia-parser.scm	/^(define (parse-call-with-initial-ex s ex tok)$/;"	f
parse-cat	src/julia-parser.scm	/^(define (parse-cat s closer last-end-symbol)$/;"	f
parse-chain	src/julia-parser.scm	/^(define (parse-chain s down op)$/;"	f
parse-comma	src/julia-parser.scm	/^(define (parse-comma s)$/;"	f
parse-comma-separated	src/julia-parser.scm	/^(define (parse-comma-separated s what)$/;"	f
parse-comma-separated-assignments	src/julia-parser.scm	/^(define (parse-comma-separated-assignments s)$/;"	f
parse-comma-separated-iters	src/julia-parser.scm	/^(define (parse-comma-separated-iters s)$/;"	f
parse-comparison	src/julia-parser.scm	/^(define (parse-comparison s)$/;"	f
parse-comprehension	src/julia-parser.scm	/^(define (parse-comprehension s first closer)$/;"	f
parse-cond	src/julia-parser.scm	/^(define (parse-cond s)$/;"	f
parse-decl	src/julia-parser.scm	/^(define (parse-decl s)$/;"	f
parse-decl-with-initial-ex	src/julia-parser.scm	/^(define (parse-decl-with-initial-ex s ex)$/;"	f
parse-def	src/julia-parser.scm	/^(define (parse-def s is-func anon)$/;"	f
parse-do	src/julia-parser.scm	/^(define (parse-do s)$/;"	f
parse-docstring	src/julia-parser.scm	/^(define (parse-docstring s production)$/;"	f
parse-eq	src/julia-parser.scm	/^(define (parse-eq s) (parse-assignment s parse-comma))$/;"	f
parse-eq*	src/julia-parser.scm	/^(define (parse-eq* s)$/;"	f
parse-expr	src/julia-parser.scm	/^(define (parse-expr s)     (parse-with-chains s parse-term          is-prec-plus?  '(+ ++)))$/;"	f
parse-factor	src/julia-parser.scm	/^(define (parse-factor s)$/;"	f
parse-factor-after	src/julia-parser.scm	/^(define (parse-factor-after s) (parse-RtoL s parse-juxtapose is-prec-power? #f parse-factor-afte/;"	f
parse-factor-with-initial-ex	src/julia-parser.scm	/^(define (parse-factor-with-initial-ex s ex0 (tok #f))$/;"	f
parse-generator	src/julia-parser.scm	/^(define (parse-generator s first)$/;"	f
parse-import	src/julia-parser.scm	/^(define (parse-import s word)$/;"	f
parse-import-dots	src/julia-parser.scm	/^(define (parse-import-dots s)$/;"	f
parse-imports	src/julia-parser.scm	/^(define (parse-imports s word)$/;"	f
parse-interpolate	src/julia-parser.scm	/^(define (parse-interpolate s)$/;"	f
parse-iteration-spec	src/julia-parser.scm	/^(define (parse-iteration-spec s)$/;"	f
parse-juxtapose	src/julia-parser.scm	/^(define (parse-juxtapose s)$/;"	f
parse-matrix	src/julia-parser.scm	/^(define (parse-matrix s first closer gotnewline last-end-symbol)$/;"	f
parse-or	src/julia-parser.scm	/^(define (parse-or s)    (parse-RtoL s parse-and        is-prec-lazy-or? #t parse-or))$/;"	f
parse-pair	src/julia-parser.scm	/^(define (parse-pair s) (parse-RtoL s parse-cond is-prec-pair? #f parse-pair))$/;"	f
parse-paren	src/julia-parser.scm	/^(define (parse-paren s (checked #t)) (car (parse-paren- s checked)))$/;"	f
parse-paren-	src/julia-parser.scm	/^(define (parse-paren- s checked)$/;"	f
parse-pipe<	src/julia-parser.scm	/^(define (parse-pipe< s) (parse-RtoL s parse-pipe> is-prec-pipe<? #f parse-pipe<))$/;"	f
parse-pipe>	src/julia-parser.scm	/^(define (parse-pipe> s) (parse-LtoR s parse-range is-prec-pipe>?))$/;"	f
parse-range	src/julia-parser.scm	/^(define (parse-range s)$/;"	f
parse-rational	src/julia-parser.scm	/^(define (parse-rational s) (parse-LtoR        s parse-shift         is-prec-rational?))$/;"	f
parse-raw-literal	src/julia-parser.scm	/^(define (parse-raw-literal s delim)$/;"	f
parse-resword	src/julia-parser.scm	/^(define (parse-resword s word)$/;"	f
parse-shift	src/julia-parser.scm	/^(define (parse-shift s)    (parse-LtoR        s parse-unary-subtype is-prec-bitshift?))$/;"	f
parse-space-separated-exprs	src/julia-parser.scm	/^(define (parse-space-separated-exprs s)$/;"	f
parse-stmts	src/julia-parser.scm	/^(define (parse-stmts s)$/;"	f
parse-string-literal	src/julia-parser.scm	/^(define (parse-string-literal s delim raw)$/;"	f
parse-string-literal-	src/julia-parser.scm	/^(define (parse-string-literal- n p s delim raw)$/;"	f
parse-struct-def	src/julia-parser.scm	/^(define (parse-struct-def s mut? word)$/;"	f
parse-subtype-spec	src/julia-parser.scm	/^(define (parse-subtype-spec s)$/;"	f
parse-term	src/julia-parser.scm	/^(define (parse-term s)     (parse-with-chains s parse-rational      is-prec-times? '(*)))$/;"	f
parse-unary	src/julia-parser.scm	/^(define (parse-unary s)$/;"	f
parse-unary-call	src/julia-parser.scm	/^(define (parse-unary-call s op un spc)$/;"	f
parse-unary-prefix	src/julia-parser.scm	/^(define (parse-unary-prefix s)$/;"	f
parse-unary-subtype	src/julia-parser.scm	/^(define (parse-unary-subtype s)$/;"	f
parse-vect	src/julia-parser.scm	/^(define (parse-vect s first closer)$/;"	f
parse-where	src/julia-parser.scm	/^(define (parse-where s down)$/;"	f
parse-where-chain	src/julia-parser.scm	/^(define (parse-where-chain s first)$/;"	f
parse-with-chains	src/julia-parser.scm	/^(define (parse-with-chains s down ops chain-ops)$/;"	f
parse1!	base/printf.jl	/^function parse1!(s, a)$/;"	f
parseCIE	src/debuginfo.cpp	/^static DW_EH_PE parseCIE(const uint8_t *Addr, const uint8_t *End)$/;"	f	typeref:typename:DW_EH_PE	file:
parse_cache_header	base/loading.jl	/^function parse_cache_header(cachefile::String)$/;"	f
parse_cache_header	base/loading.jl	/^function parse_cache_header(f::IO)$/;"	f
parse_cmdline	src/processor.cpp	/^parse_cmdline(const char *option, F &&feature_cb)$/;"	f	namespace:__anon839834ed0111	typeref:typename:std::vector<TargetData<n>>	file:
parse_components	stdlib/Dates/src/parse.jl	/^@generated function parse_components(str::AbstractString, df::DateFormat)$/;"	f
parse_connection_info	stdlib/Distributed/src/cluster.jl	/^function parse_connection_info(str)$/;"	f
parse_file	stdlib/Markdown/src/Markdown.jl	/^parse_file(file::AbstractString; flavor = julia) = parse(read(file, String), flavor = flavor)$/;"	f
parse_flat	stdlib/Profile/src/Profile.jl	/^function parse_flat(iplist::Vector{UInt64}, n::Vector{Int}, lidict::Union{LineInfoDict, LineInfo/;"	f
parse_inline_wrapper	stdlib/Markdown/src/parse/util.jl	/^function parse_inline_wrapper(stream::IO, delimiter::AbstractString; rep = false)$/;"	f
parse_input_line	base/client.jl	/^function parse_input_line(io::IO)$/;"	f
parse_input_line	base/client.jl	/^function parse_input_line(s::String; filename::String="none", depwarn=true)$/;"	f
parse_input_line	base/client.jl	/^parse_input_line(s::AbstractString) = parse_input_line(String(s))$/;"	f
parse_iteration_space	base/simdloop.jl	/^function parse_iteration_space(x)$/;"	f
parse_leb128	src/debuginfo.cpp	/^template<typename T> static T parse_leb128(const uint8_t *&Addr,$/;"	f	typeref:typename:T	file:
parse_level	stdlib/Test/src/logging.jl	/^function parse_level(level::Symbol)$/;"	f
parse_load_path	base/initdefs.jl	/^function parse_load_path(str::String)$/;"	f
parse_sysimg	src/processor.cpp	/^static inline jl_sysimg_fptrs_t parse_sysimg(void *hdl, F &&callback)$/;"	f	namespace:__anon839834ed0111	typeref:typename:jl_sysimg_fptrs_t	file:
parse_testset_args	stdlib/Test/src/Test.jl	/^function parse_testset_args(args)$/;"	f
parsealign	stdlib/Markdown/src/GitHub/table.jl	/^function parsealign(row)$/;"	f
parseall	test/syntax.jl	/^function parseall(str)$/;"	f
parsebin	test/parse.jl	/^    parsebin(s) = parse(Int,s, base = 2)$/;"	f
parsedoc	base/docs/Docs.jl	/^function parsedoc end$/;"	f
parsedoc	stdlib/REPL/src/docview.jl	/^function parsedoc(d::DocStr)$/;"	f
parsehex	test/parse.jl	/^    parsehex(s) = parse(Int,s, base = 16)$/;"	f
parseinline	stdlib/Markdown/src/parse/parse.jl	/^function parseinline(stream::IO, md::MD, config::Config)$/;"	f
parseinline	stdlib/Markdown/src/parse/parse.jl	/^function parseinline(stream::IO, md::MD, parsers::Vector{Function})$/;"	f
parseinline	stdlib/Markdown/src/parse/parse.jl	/^parseinline(s, md::MD) = parseinline(s, md, config(md))$/;"	f
parseinline	stdlib/Markdown/src/parse/parse.jl	/^parseinline(s::AbstractString, md::MD, c::Config) =$/;"	f
parseint_iterate	base/parse.jl	/^function parseint_iterate(s::AbstractString, startpos::Int, endpos::Int)$/;"	f
parseint_preamble	base/parse.jl	/^function parseint_preamble(signed::Bool, base::Int, s::AbstractString, startpos::Int, endpos::In/;"	f
parseipv6fields	stdlib/Sockets/src/IPAddr.jl	/^function parseipv6fields(fields,num_fields)$/;"	f
parseipv6fields	stdlib/Sockets/src/IPAddr.jl	/^parseipv6fields(fields) = parseipv6fields(fields,8)$/;"	f
parseoct	test/parse.jl	/^    parseoct(s) = parse(Int,s, base = 8)$/;"	f
parser-depwarn	src/julia-parser.scm	/^(define (parser-depwarn s what instead)$/;"	f
parserow	stdlib/Markdown/src/GitHub/table.jl	/^function parserow(stream::IO)$/;"	f
part	src/processor_arm.cpp	/^    uint16_t part;$/;"	m	struct:ARM::CPUID	typeref:typename:uint16_t	file:
partial_inst	src/jltypes.c	/^arraylist_t partial_inst;$/;"	v	typeref:typename:arraylist_t
partially-expand-ref	src/julia-syntax.scm	/^(define (partially-expand-ref e)$/;"	f
partially_inline!	base/meta.jl	/^function partially_inline!(code::Vector{Any}, slot_replacements::Vector{Any},$/;"	f
partialsort	base/sort.jl	/^partialsort(v::AbstractVector, k::Union{Int,OrdinalRange}; kws...) =$/;"	f
partialsort	test/core.jl	/^partialsort(a,b) = 0$/;"	f
partialsort!	base/sort.jl	/^function partialsort!(v::AbstractVector, k::Union{Int,OrdinalRange}, o::Ordering)$/;"	f
partialsortperm	base/sort.jl	/^partialsortperm(v::AbstractVector, k::Union{Integer,OrdinalRange}; kwargs...) =$/;"	f
partialsortperm!	base/sort.jl	/^function partialsortperm!(ix::AbstractVector{<:Integer}, v::AbstractVector,$/;"	f
partition	base/iterators.jl	/^partition(c::T, n::Integer) where {T} = PartitionIterator{T}(c, Int(n))$/;"	f
partition!	base/sort.jl	/^function partition!(v::AbstractVector, lo::Int, hi::Int, o::Ordering)$/;"	f
partition_iteratorsize	base/iterators.jl	/^partition_iteratorsize(::HasShape) = HasLength()$/;"	f
partition_iteratorsize	base/iterators.jl	/^partition_iteratorsize(isz) = isz$/;"	f
partsums	stdlib/SharedArrays/test/runtests.jl	/^partsums = Vector{Int}(undef, length(procs(d)))$/;"	v
pass	src/llvm-alloc-opt.cpp	/^    AllocOpt &pass;$/;"	m	struct:__anon0a1571000111::Optimizer	typeref:typename:AllocOpt &	file:
pass	src/llvm-multiversioning.cpp	/^    MultiVersioning *pass;$/;"	m	struct:__anond5683ea40111::CloneCtx	typeref:typename:MultiVersioning *	file:
patchElf	deps/srccache/patchelf-0.9/src/patchelf.cc	/^static void patchElf()$/;"	f	typeref:typename:void	file:
patchElf2	deps/srccache/patchelf-0.9/src/patchelf.cc	/^static void patchElf2(ElfFile & elfFile)$/;"	f	typeref:typename:void	file:
patchelf	deps/srccache/patchelf-0.9/configure.ac	/^AC_INIT([patchelf], m4_esyscmd([printf $(cat .\/version)]))$/;"	p
patchelf	deps/srccache/patchelf-0.9/patchelf.spec	/^Name: patchelf$/;"	p
patchelf	deps/srccache/patchelf-0.9/patchelf.spec.in	/^Name: patchelf$/;"	p
patchelf	deps/srccache/patchelf-0.9/src/Makefile.am	/^bin_PROGRAMS = patchelf$/;"	P	directory:bin
patchelf$(EXEEXT)	deps/srccache/patchelf-0.9/src/Makefile.in	/^patchelf$(EXEEXT): $(patchelf_OBJECTS) $(patchelf_DEPENDENCIES) $(EXTRA_patchelf_DEPENDENCIES) $/;"	t
patchelf.1	deps/srccache/patchelf-0.9/Makefile.am	/^man1_MANS = patchelf.1$/;"	M	directory:man1
patchelf.spec	deps/srccache/patchelf-0.9/Makefile.in	/^patchelf.spec: $(top_builddir)\/config.status $(srcdir)\/patchelf.spec.in$/;"	t
patchelf_LDADD	deps/srccache/patchelf-0.9/src/Makefile.in	/^patchelf_LDADD = $(LDADD)$/;"	m
patchelf_OBJECTS	deps/srccache/patchelf-0.9/src/Makefile.in	/^patchelf_OBJECTS = $(am_patchelf_OBJECTS)$/;"	m
patchelf_SOURCES	deps/srccache/patchelf-0.9/src/Makefile.am	/^patchelf_SOURCES = patchelf.cc elf.h$/;"	m
patchelf_SOURCES	deps/srccache/patchelf-0.9/src/Makefile.in	/^patchelf_SOURCES = patchelf.cc elf.h$/;"	m
patches	base/mpfr.jl	/^patches() = split(unsafe_string(ccall((:mpfr_get_patches,:libmpfr), Ptr{Cchar}, ())),' ')$/;"	f
path	stdlib/LibGit2/src/repository.jl	/^function path(repo::GitRepo)$/;"	f
path	stdlib/REPL/test/replcompletions.jl	/^path = joinpath(tempdir(),randstring())$/;"	v
path	test/test_sourcepath.jl	/^path = Base.source_path()::String # this variable is leaked to the source script$/;"	v
path13	contrib/julia.svg	/^<svg xmlns="http:\/\/www.w3.org\/2000\/svg" viewBox="0 0 153.14 98.64"><defs><style>.cls-1{fill:/;"	i
path19	contrib/julia.svg	/^<svg xmlns="http:\/\/www.w3.org\/2000\/svg" viewBox="0 0 153.14 98.64"><defs><style>.cls-1{fill:/;"	i
path25	contrib/julia.svg	/^<svg xmlns="http:\/\/www.w3.org\/2000\/svg" viewBox="0 0 153.14 98.64"><defs><style>.cls-1{fill:/;"	i
path31	contrib/julia.svg	/^<svg xmlns="http:\/\/www.w3.org\/2000\/svg" viewBox="0 0 153.14 98.64"><defs><style>.cls-1{fill:/;"	i
path3802	contrib/julia.svg	/^<svg xmlns="http:\/\/www.w3.org\/2000\/svg" viewBox="0 0 153.14 98.64"><defs><style>.cls-1{fill:/;"	i
path3804	contrib/julia.svg	/^<svg xmlns="http:\/\/www.w3.org\/2000\/svg" viewBox="0 0 153.14 98.64"><defs><style>.cls-1{fill:/;"	i
path3808	contrib/julia.svg	/^<svg xmlns="http:\/\/www.w3.org\/2000\/svg" viewBox="0 0 153.14 98.64"><defs><style>.cls-1{fill:/;"	i
path3819	contrib/julia.svg	/^<svg xmlns="http:\/\/www.w3.org\/2000\/svg" viewBox="0 0 153.14 98.64"><defs><style>.cls-1{fill:/;"	i
path3823	contrib/julia.svg	/^<svg xmlns="http:\/\/www.w3.org\/2000\/svg" viewBox="0 0 153.14 98.64"><defs><style>.cls-1{fill:/;"	i
pathof	base/loading.jl	/^function pathof(m::Module)$/;"	f
pathsearch	Makefile	/^pathsearch = $(firstword $(wildcard $(addsuffix \/$(1),$(subst :, ,$(2)))))$/;"	m
pathsep	base/path.jl	/^function pathsep(paths::AbstractString...)$/;"	f
pattern-expand	src/match.scm	/^(define (pattern-expand plist expr)$/;"	f
pattern-expand1	src/match.scm	/^(define (pattern-expand1 plist expr)$/;"	f
pattern-lambda	src/match.scm	/^(define-macro (pattern-lambda pat body)$/;"	f
pattern-replace	src/match.scm	/^(define (pattern-replace plist expr)$/;"	f
pattern-set	src/match.scm	/^(define-macro (pattern-set . pats)$/;"	f
pause	base/task.jl	/^    pause() = ccall(:Sleep, stdcall, Cvoid, (UInt32,), 0xffffffff)$/;"	f
pause	base/task.jl	/^    pause() = ccall(:pause, Cvoid, ())$/;"	f
pause	src/gc.h	/^    int         pause;$/;"	m	struct:__anoncf30557c0308	typeref:typename:int
paynehanek	base/special/rem_pio2.jl	/^function paynehanek(x::Float64)$/;"	f
pc	src/julia_threads.h	/^    void **pc; \/\/ Current stack address for the pc (up growing)$/;"	m	struct:__anonf8aecdb10708	typeref:typename:void **
pc_end	src/julia_threads.h	/^    void **pc_end; \/\/ Cached value of `gc_cache->pc_stack_end`$/;"	m	struct:__anonf8aecdb10708	typeref:typename:void **
pc_stack	src/julia_threads.h	/^    void **pc_stack;$/;"	m	struct:__anonf8aecdb10808	typeref:typename:void **
pc_stack_end	src/julia_threads.h	/^    void **pc_stack_end;$/;"	m	struct:__anonf8aecdb10808	typeref:typename:void **
pc_start	src/julia_threads.h	/^    void **pc_start; \/\/ Cached value of `gc_cache->pc_stack`$/;"	m	struct:__anonf8aecdb10708	typeref:typename:void **
pcnfloat	test/math.jl	/^pcnfloat(x) = prevfloat(x), x, nextfloat(x)$/;"	f
pdf	deps/srccache/patchelf-0.9/Makefile.in	/^pdf: pdf-recursive$/;"	t
pdf	deps/srccache/patchelf-0.9/src/Makefile.in	/^pdf: pdf-am$/;"	t
pdf	deps/srccache/patchelf-0.9/tests/Makefile.in	/^pdf: pdf-am$/;"	t
pdf	doc/Makefile	/^pdf: deps$/;"	t
pdf-am	deps/srccache/patchelf-0.9/Makefile.in	/^pdf-am:$/;"	t
pdf-am	deps/srccache/patchelf-0.9/src/Makefile.in	/^pdf-am:$/;"	t
pdf-am	deps/srccache/patchelf-0.9/tests/Makefile.in	/^pdf-am:$/;"	t
pdfdir	deps/srccache/patchelf-0.9/Makefile.in	/^pdfdir = @pdfdir@$/;"	m
pdfdir	deps/srccache/patchelf-0.9/src/Makefile.in	/^pdfdir = @pdfdir@$/;"	m
pdfdir	deps/srccache/patchelf-0.9/tests/Makefile.in	/^pdfdir = @pdfdir@$/;"	m
peakflops	stdlib/InteractiveUtils/src/InteractiveUtils.jl	/^function peakflops(n::Integer=2000; parallel::Bool=false)$/;"	f
peakflops	stdlib/LinearAlgebra/src/LinearAlgebra.jl	/^function peakflops(n::Integer=2000; parallel::Bool=false)$/;"	f
peek	base/essentials.jl	/^function peek end$/;"	f
peek	base/io.jl	/^function peek(s::IO)$/;"	f
peek	base/iobuffer.jl	/^function peek(from::GenericIOBuffer)$/;"	f
peek	base/iostream.jl	/^function peek(s::IOStream)$/;"	f
peek	base/iterators.jl	/^@inline peek(s::Stateful, sentinel=nothing) = s.nextvalstate !== nothing ? s.nextvalstate[1] : s/;"	f
peek	base/secretbuffer.jl	/^function peek(io::SecretBuffer)$/;"	f
peek	base/stream.jl	/^function peek(s::LibuvStream)$/;"	f
peek	src/flisp/read.c	/^static uint32_t peek(fl_context_t *fl_ctx)$/;"	f	typeref:typename:uint32_t	file:
peek-char	src/flisp/aliases.scm	/^(define (peek-char (s *input-stream*)) (io.peekc s))$/;"	f
peek-token	src/julia-parser.scm	/^(define (peek-token s)$/;"	f
peekmeta	base/expr.jl	/^peekmeta(body, sym) = _getmeta(body, sym, false)$/;"	f
peel	base/iterators.jl	/^function peel(itr)$/;"	f
peel	stdlib/LibGit2/src/reference.jl	/^function peel(::Type{T}, ref::GitReference) where T<:GitObject$/;"	f
peel	stdlib/LibGit2/src/reference.jl	/^peel(ref::GitReference) = peel(GitObject, ref)$/;"	f
peel	stdlib/LibGit2/src/repository.jl	/^function peel(::Type{T}, obj::GitObject) where T<:GitObject$/;"	f
peel	stdlib/LibGit2/src/repository.jl	/^peel(obj::GitObject) = peel(GitObject, obj)$/;"	f
pending_eh	src/cgmemmgr.cpp	/^    SmallVector<EHFrame, 16> pending_eh;$/;"	m	class:__anon06c686bc0111::RTDyldMemoryManagerJL	typeref:typename:SmallVector<EHFrame,16>	file:
penryn	src/processor_x86.cpp	/^constexpr auto penryn = nocona | get_feature_masks(ssse3, sse41, sahf);$/;"	v	namespace:X86::Feature	typeref:typename:auto
perform_lifting!	base/compiler/ssair/passes.jl	/^function perform_lifting!(compact::IncrementalCompact,$/;"	f
periodisless	stdlib/Dates/src/periods.jl	/^    @eval periodisless(x::$period, y::$period) = value(x) < value(y)$/;"	f
periodisless	stdlib/Dates/src/periods.jl	/^periodisless(::Microsecond,::Hour)   = true$/;"	f
periodisless	stdlib/Dates/src/periods.jl	/^periodisless(::Microsecond,::Millisecond) = true$/;"	f
periodisless	stdlib/Dates/src/periods.jl	/^periodisless(::Microsecond,::Minute) = true$/;"	f
periodisless	stdlib/Dates/src/periods.jl	/^periodisless(::Microsecond,::Second) = true$/;"	f
periodisless	stdlib/Dates/src/periods.jl	/^periodisless(::Millisecond,::Hour)   = true$/;"	f
periodisless	stdlib/Dates/src/periods.jl	/^periodisless(::Millisecond,::Minute) = true$/;"	f
periodisless	stdlib/Dates/src/periods.jl	/^periodisless(::Millisecond,::Second) = true$/;"	f
periodisless	stdlib/Dates/src/periods.jl	/^periodisless(::Minute,::Hour)        = true$/;"	f
periodisless	stdlib/Dates/src/periods.jl	/^periodisless(::Month,::Day)          = false$/;"	f
periodisless	stdlib/Dates/src/periods.jl	/^periodisless(::Month,::Week)         = false$/;"	f
periodisless	stdlib/Dates/src/periods.jl	/^periodisless(::Nanosecond,::Hour)    = true$/;"	f
periodisless	stdlib/Dates/src/periods.jl	/^periodisless(::Nanosecond,::Microsecond)  = true$/;"	f
periodisless	stdlib/Dates/src/periods.jl	/^periodisless(::Nanosecond,::Millisecond)  = true$/;"	f
periodisless	stdlib/Dates/src/periods.jl	/^periodisless(::Nanosecond,::Minute)  = true$/;"	f
periodisless	stdlib/Dates/src/periods.jl	/^periodisless(::Nanosecond,::Second)  = true$/;"	f
periodisless	stdlib/Dates/src/periods.jl	/^periodisless(::Period,::Day)         = true$/;"	f
periodisless	stdlib/Dates/src/periods.jl	/^periodisless(::Period,::Hour)        = false$/;"	f
periodisless	stdlib/Dates/src/periods.jl	/^periodisless(::Period,::Microsecond)      = false$/;"	f
periodisless	stdlib/Dates/src/periods.jl	/^periodisless(::Period,::Millisecond) = false$/;"	f
periodisless	stdlib/Dates/src/periods.jl	/^periodisless(::Period,::Minute)      = false$/;"	f
periodisless	stdlib/Dates/src/periods.jl	/^periodisless(::Period,::Month)       = true$/;"	f
periodisless	stdlib/Dates/src/periods.jl	/^periodisless(::Period,::Nanosecond)       = false$/;"	f
periodisless	stdlib/Dates/src/periods.jl	/^periodisless(::Period,::Second)      = false$/;"	f
periodisless	stdlib/Dates/src/periods.jl	/^periodisless(::Period,::Week)        = true$/;"	f
periodisless	stdlib/Dates/src/periods.jl	/^periodisless(::Period,::Year)        = true$/;"	f
periodisless	stdlib/Dates/src/periods.jl	/^periodisless(::Second,::Hour)        = true$/;"	f
periodisless	stdlib/Dates/src/periods.jl	/^periodisless(::Second,::Minute)      = true$/;"	f
periodisless	stdlib/Dates/src/periods.jl	/^periodisless(::Week,::Day)           = false$/;"	f
periodisless	stdlib/Dates/src/periods.jl	/^periodisless(::Year,::Day)           = false$/;"	f
periodisless	stdlib/Dates/src/periods.jl	/^periodisless(::Year,::Month)         = false$/;"	f
periodisless	stdlib/Dates/src/periods.jl	/^periodisless(::Year,::Week)          = false$/;"	f
perm	test/loading.jl	/^function perm(p::Vector, i::Int)$/;"	f
perm_scanned_bytes	src/gc.c	/^static int64_t perm_scanned_bytes; \/\/ old bytes scanned while marking$/;"	v	typeref:typename:int64_t	file:
perm_scanned_bytes	src/julia_threads.h	/^    size_t perm_scanned_bytes;$/;"	m	struct:__anonf8aecdb10808	typeref:typename:size_t
permute	stdlib/SparseArrays/src/sparsematrix.jl	/^function permute(A::AbstractSparseMatrixCSC{Tv,Ti}, p::AbstractVector{<:Integer},$/;"	f
permute!	base/combinatorics.jl	/^permute!(a, p::AbstractVector) = permute!!(a, copymutable(p))$/;"	f
permute!	stdlib/SparseArrays/src/sparsematrix.jl	/^function permute!(A::AbstractSparseMatrixCSC{Tv,Ti}, p::AbstractVector{<:Integer},$/;"	f
permute!	stdlib/SparseArrays/src/sparsematrix.jl	/^function permute!(X::AbstractSparseMatrixCSC{Tv,Ti}, A::AbstractSparseMatrixCSC{Tv,Ti},$/;"	f
permute!!	base/combinatorics.jl	/^function permute!!(a, p::AbstractVector{<:Integer})$/;"	f
permute_rows!	stdlib/SparseArrays/src/sparsematrix.jl	/^function permute_rows!(S::AbstractSparseMatrixCSC{Tv,Ti}, pI::Vector{Int}) where {Tv,Ti}$/;"	f
permutecols!!	base/combinatorics.jl	/^function permutecols!!(a::AbstractMatrix, p::AbstractVector{<:Integer})$/;"	f
permutedims	base/multidimensional.jl	/^function permutedims(B::StridedArray, perm)$/;"	f
permutedims	base/permuteddimsarray.jl	/^function permutedims(A::AbstractArray, perm)$/;"	f
permutedims	base/permuteddimsarray.jl	/^permutedims(A::AbstractMatrix) = permutedims(A, (2,1))$/;"	f
permutedims	base/permuteddimsarray.jl	/^permutedims(v::AbstractVector) = reshape(v, (1, length(v)))$/;"	f
permutedims!	base/multidimensional.jl	/^    @eval @generated function permutedims!(P::$PT{$(V...)}, B::$BT{$(V...)}, perm) where $(V...)$/;"	f
permutedims!	base/permuteddimsarray.jl	/^function permutedims!(dest, src::AbstractArray, perm)$/;"	f
pfd_tst_reads	stdlib/FileWatching/test/runtests.jl	/^function pfd_tst_reads(idx, intvl)$/;"	f
pfd_tst_timeout	stdlib/FileWatching/test/runtests.jl	/^function pfd_tst_timeout(idx, intvl)$/;"	f
pfib	test/threads_exec.jl	/^function pfib(n::Int)$/;"	f
pfor	stdlib/Distributed/src/macros.jl	/^function pfor(f, R)$/;"	f
pgcstack	src/julia_threads.h	/^    struct _jl_gcframe_t *pgcstack;$/;"	m	struct:_jl_tls_states_t	typeref:struct:_jl_gcframe_t *
pgenerate	stdlib/Distributed/src/pmap.jl	/^function pgenerate(p::WorkerPool, f, c)$/;"	f
pgenerate	stdlib/Distributed/src/pmap.jl	/^pgenerate(f, c) = pgenerate(default_worker_pool(), f, c)$/;"	f
pgenerate	stdlib/Distributed/src/pmap.jl	/^pgenerate(f, c1, c...) = pgenerate(a->f(a...), zip(c1, c...))$/;"	f
pgenerate	stdlib/Distributed/src/pmap.jl	/^pgenerate(p::WorkerPool, f, c1, c...) = pgenerate(p, a->f(a...), zip(c1, c...))$/;"	f
phdrs	deps/srccache/patchelf-0.9/src/patchelf.cc	/^    vector<Elf_Phdr> phdrs;$/;"	m	class:ElfFile	typeref:typename:vector<Elf_Phdr>	file:
phic_slots	src/codegen.cpp	/^    std::map<int, jl_varinfo_t> phic_slots;$/;"	m	class:jl_codectx_t	typeref:typename:std::map<int,jl_varinfo_t>	file:
pi1o2_h	base/math.jl	/^const pi1o2_h  = 1.5707963267948966     # convert(Float64, pi * BigFloat(1\/2))$/;"	v
pi1o2_l	base/math.jl	/^const pi1o2_l  = 6.123233995736766e-17  # convert(Float64, pi * BigFloat(1\/2) - pi1o2_h)$/;"	v
pi2o2_h	base/math.jl	/^const pi2o2_h  = 3.141592653589793      # convert(Float64, pi * BigFloat(1))$/;"	v
pi2o2_l	base/math.jl	/^const pi2o2_l  = 1.2246467991473532e-16 # convert(Float64, pi * BigFloat(1) - pi2o2_h)$/;"	v
pi3o2_h	base/math.jl	/^const pi3o2_h  = 4.71238898038469       # convert(Float64, pi * BigFloat(3\/2))$/;"	v
pi3o2_l	base/math.jl	/^const pi3o2_l  = 1.8369701987210297e-16 # convert(Float64, pi * BigFloat(3\/2) - pi3o2_h)$/;"	v
pi4o2_h	base/math.jl	/^const pi4o2_h  = 6.283185307179586      # convert(Float64, pi * BigFloat(2))$/;"	v
pi4o2_l	base/math.jl	/^const pi4o2_l  = 2.4492935982947064e-16 # convert(Float64, pi * BigFloat(2) - pi4o2_h)$/;"	v
pick	stdlib/REPL/src/TerminalMenus/AbstractMenu.jl	/^pick(m::AbstractMenu, cursor::Int) = error("unimplemented")$/;"	f
pick	stdlib/REPL/src/TerminalMenus/MultiSelectMenu.jl	/^function pick(menu::MultiSelectMenu, cursor::Int)$/;"	f
pick	stdlib/REPL/src/TerminalMenus/RadioMenu.jl	/^function pick(menu::RadioMenu, cursor::Int)$/;"	f
pick_union_element	src/subtype.c	/^static jl_value_t *pick_union_element(jl_value_t *u JL_PROPAGATES_ROOT, jl_stenv_t *e, int8_t R)/;"	f	typeref:typename:jl_value_t *	file:
pick_which	src/gf.c	/^static uint8_t pick_which[N_CALL_CACHE];$/;"	v	typeref:typename:uint8_t[]	file:
pids	stdlib/Distributed/test/distributed_exec.jl	/^pids=[]$/;"	v
pids	stdlib/Distributed/test/topology.jl	/^pids = addprocs_with_testenv(4; topology="master_worker")$/;"	v
pids_d	stdlib/SharedArrays/test/runtests.jl	/^pids_d = procs(d)$/;"	v
pinv	stdlib/LinearAlgebra/src/adjtrans.jl	/^pinv(v::AdjointAbsVec, tol::Real = 0) = pinv(v.parent, tol).parent$/;"	f
pinv	stdlib/LinearAlgebra/src/adjtrans.jl	/^pinv(v::TransposeAbsVec, tol::Real = 0) = pinv(conj(v.parent)).parent$/;"	f
pinv	stdlib/LinearAlgebra/src/dense.jl	/^    pinv(M, rtol::Real) = pinv(M; rtol=rtol) # to be deprecated in Julia 2.0$/;"	f
pinv	stdlib/LinearAlgebra/src/dense.jl	/^function pinv(A::AbstractMatrix{T}; atol::Real = 0.0, rtol::Real = (eps(real(float(one(T))))*min/;"	f
pinv	stdlib/LinearAlgebra/src/dense.jl	/^function pinv(x::Number)$/;"	f
pinv	stdlib/LinearAlgebra/src/diagonal.jl	/^function pinv(D::Diagonal{T}) where T$/;"	f
pinv	stdlib/LinearAlgebra/src/diagonal.jl	/^function pinv(D::Diagonal{T}, tol::Real) where T$/;"	f
pinv	stdlib/LinearAlgebra/src/generic.jl	/^pinv(v::AbstractVector{T}, tol::Real = real(zero(T))) where {T<:Complex} = _vectorpinv(adjoint, /;"	f
pinv	stdlib/LinearAlgebra/src/generic.jl	/^pinv(v::AbstractVector{T}, tol::Real = real(zero(T))) where {T<:Real} = _vectorpinv(transpose, v/;"	f
pinv	stdlib/LinearAlgebra/src/generic.jl	/^pinv(v::AbstractVector{T}, tol::Real = real(zero(T))) where {T} = _vectorpinv(adjoint, v, tol)$/;"	f
pipe_fds	stdlib/FileWatching/test/runtests.jl	/^pipe_fds = fill((Base.INVALID_OS_HANDLE, Base.INVALID_OS_HANDLE), n)$/;"	v
pipe_reader	base/io.jl	/^function pipe_reader end$/;"	f
pipe_reader	base/process.jl	/^pipe_reader(p::Process) = p.out$/;"	f
pipe_reader	base/process.jl	/^pipe_reader(p::ProcessChain) = p.out$/;"	f
pipe_reader	base/show.jl	/^pipe_reader(io::IOContext) = io.io$/;"	f
pipe_reader	base/stream.jl	/^pipe_reader(p::Pipe) = p.out$/;"	f
pipe_reader	stdlib/REPL/src/Terminals.jl	/^pipe_reader(::TextTerminal) = error("Unimplemented")$/;"	f
pipe_reader	stdlib/REPL/src/Terminals.jl	/^pipe_reader(t::UnixTerminal) = t.in_stream$/;"	f
pipe_writer	base/io.jl	/^function pipe_writer end$/;"	f
pipe_writer	base/process.jl	/^pipe_writer(p::Process) = p.in$/;"	f
pipe_writer	base/process.jl	/^pipe_writer(p::ProcessChain) = p.in$/;"	f
pipe_writer	base/show.jl	/^pipe_writer(io::IOContext) = io.io$/;"	f
pipe_writer	base/stream.jl	/^pipe_writer(p::Pipe) = p.in$/;"	f
pipe_writer	stdlib/REPL/src/Terminals.jl	/^pipe_writer(::TextTerminal) = error("Unimplemented")$/;"	f
pipe_writer	stdlib/REPL/src/Terminals.jl	/^pipe_writer(t::UnixTerminal) = t.out_stream$/;"	f
pipeline	base/cmd.jl	/^function pipeline(cmd::AbstractCmd; stdin=nothing, stdout=nothing, stderr=nothing, append::Bool=/;"	f
pipeline	base/cmd.jl	/^pipeline(a, b, c, d...) = pipeline(pipeline(a, b), c, d...)$/;"	f
pipeline	base/cmd.jl	/^pipeline(cmd::AbstractCmd, dest) = pipeline(cmd, stdout=dest)$/;"	f
pipeline	base/cmd.jl	/^pipeline(src::Union{Redirectable,AbstractString}, cmd::AbstractCmd) = pipeline(cmd, stdin=src)$/;"	f
pipeline_error	base/process.jl	/^function pipeline_error(proc::Process)$/;"	f
pipeline_error	base/process.jl	/^function pipeline_error(procs::ProcessChain)$/;"	f
pkg	test/loading.jl	/^    pkg(i::Int) = PkgId(KIND[i] == 2 ? UUIDS[i] : get(dummies, i, nothing), L(i))$/;"	f
pkgdatadir	deps/srccache/patchelf-0.9/Makefile.in	/^pkgdatadir = $(datadir)\/@PACKAGE@$/;"	m
pkgdatadir	deps/srccache/patchelf-0.9/src/Makefile.in	/^pkgdatadir = $(datadir)\/@PACKAGE@$/;"	m
pkgdatadir	deps/srccache/patchelf-0.9/tests/Makefile.in	/^pkgdatadir = $(datadir)\/@PACKAGE@$/;"	m
pkgincludedir	deps/srccache/patchelf-0.9/Makefile.in	/^pkgincludedir = $(includedir)\/@PACKAGE@$/;"	m
pkgincludedir	deps/srccache/patchelf-0.9/src/Makefile.in	/^pkgincludedir = $(includedir)\/@PACKAGE@$/;"	m
pkgincludedir	deps/srccache/patchelf-0.9/tests/Makefile.in	/^pkgincludedir = $(includedir)\/@PACKAGE@$/;"	m
pkglibdir	deps/srccache/patchelf-0.9/Makefile.in	/^pkglibdir = $(libdir)\/@PACKAGE@$/;"	m
pkglibdir	deps/srccache/patchelf-0.9/src/Makefile.in	/^pkglibdir = $(libdir)\/@PACKAGE@$/;"	m
pkglibdir	deps/srccache/patchelf-0.9/tests/Makefile.in	/^pkglibdir = $(libdir)\/@PACKAGE@$/;"	m
pkglibexecdir	deps/srccache/patchelf-0.9/Makefile.in	/^pkglibexecdir = $(libexecdir)\/@PACKAGE@$/;"	m
pkglibexecdir	deps/srccache/patchelf-0.9/src/Makefile.in	/^pkglibexecdir = $(libexecdir)\/@PACKAGE@$/;"	m
pkglibexecdir	deps/srccache/patchelf-0.9/tests/Makefile.in	/^pkglibexecdir = $(libexecdir)\/@PACKAGE@$/;"	m
plain	stdlib/Markdown/src/GitHub/table.jl	/^function plain(io::IO, md::Table)$/;"	f
plain	stdlib/Markdown/src/render/plain.jl	/^function plain(io::IO, code::Code)$/;"	f
plain	stdlib/Markdown/src/render/plain.jl	/^function plain(io::IO, content::Vector)$/;"	f
plain	stdlib/Markdown/src/render/plain.jl	/^function plain(io::IO, f::Footnote)$/;"	f
plain	stdlib/Markdown/src/render/plain.jl	/^function plain(io::IO, header::Header{l}) where l$/;"	f
plain	stdlib/Markdown/src/render/plain.jl	/^function plain(io::IO, l::LaTeX)$/;"	f
plain	stdlib/Markdown/src/render/plain.jl	/^function plain(io::IO, list::List)$/;"	f
plain	stdlib/Markdown/src/render/plain.jl	/^function plain(io::IO, md)$/;"	f
plain	stdlib/Markdown/src/render/plain.jl	/^function plain(io::IO, md::Admonition)$/;"	f
plain	stdlib/Markdown/src/render/plain.jl	/^function plain(io::IO, md::HorizontalRule)$/;"	f
plain	stdlib/Markdown/src/render/plain.jl	/^function plain(io::IO, p::Paragraph)$/;"	f
plain	stdlib/Markdown/src/render/plain.jl	/^function plain(io::IO, q::BlockQuote)$/;"	f
plain	stdlib/Markdown/src/render/plain.jl	/^plain(io::IO, md::MD) = plain(io, md.content)$/;"	f
plain	stdlib/Markdown/src/render/plain.jl	/^plain(x) = sprint(plain, x)$/;"	f
plain-fail.sh.log	deps/srccache/patchelf-0.9/tests/Makefile.in	/^plain-fail.sh.log: plain-fail.sh$/;"	t
plain-run.sh.log	deps/srccache/patchelf-0.9/tests/Makefile.in	/^plain-run.sh.log: plain-run.sh$/;"	t
plaininline	stdlib/Markdown/src/render/plain.jl	/^function plaininline(io::IO, md...)$/;"	f
plaininline	stdlib/Markdown/src/render/plain.jl	/^function plaininline(io::IO, md::Code)$/;"	f
plaininline	stdlib/Markdown/src/render/plain.jl	/^plaininline(io::IO, br::LineBreak) = println(io)$/;"	f
plaininline	stdlib/Markdown/src/render/plain.jl	/^plaininline(io::IO, f::Footnote) = print(io, "[^", f.id, "]")$/;"	f
plaininline	stdlib/Markdown/src/render/plain.jl	/^plaininline(io::IO, link::Link) = plaininline(io, "[", link.text, "](", link.url, ")")$/;"	f
plaininline	stdlib/Markdown/src/render/plain.jl	/^plaininline(io::IO, md::Bold) = plaininline(io, "**", md.text, "**")$/;"	f
plaininline	stdlib/Markdown/src/render/plain.jl	/^plaininline(io::IO, md::Image) = plaininline(io, "![", md.alt, "](", md.url, ")")$/;"	f
plaininline	stdlib/Markdown/src/render/plain.jl	/^plaininline(io::IO, md::Italic) = plaininline(io, "*", md.text, "*")$/;"	f
plaininline	stdlib/Markdown/src/render/plain.jl	/^plaininline(io::IO, md::Vector) = !isempty(md) && plaininline(io, md...)$/;"	f
plaininline	stdlib/Markdown/src/render/plain.jl	/^plaininline(io::IO, s::AbstractString) = print(io, s)$/;"	f
plaininline	stdlib/Markdown/src/render/plain.jl	/^plaininline(io::IO, x) = show(io, MIME"text\/plain"(), x)$/;"	f
plaininline	stdlib/Markdown/src/render/plain.jl	/^plaininline(x) = sprint(plaininline, x)$/;"	f
plambda-expansion	src/match.scm	/^(define (plambda-expansion pat expr expander args)$/;"	f
platform	contrib/normalize_triplet.py	/^platform = get_field(m, platform_mapping)$/;"	v
platform_mapping	contrib/normalize_triplet.py	/^platform_mapping = {$/;"	v
plus	test/reduce.jl	/^plus(x,y) = x + y$/;"	f
plus1	test/compiler/inference.jl	/^Base.@pure plus1(x) = x + 1$/;"	f
plus_saturate	base/compiler/optimize.jl	/^plus_saturate(x::Int, y::Int) = max(x, y, x+y)$/;"	f
pluscompare	base/grisu/bignums.jl	/^function pluscompare(a::Bignum,b::Bignum,c::Bignum)$/;"	f
plusequal	base/grisu/bignums.jl	/^plusequal(a,b,c) = pluscompare(a,b,c) == 0$/;"	f
plusless	base/grisu/bignums.jl	/^plusless(a,b,c) = pluscompare(a,b,c) < 0$/;"	f
pluslessequal	base/grisu/bignums.jl	/^pluslessequal(a,b,c) = pluscompare(a,b,c) <= 0$/;"	f
pmap	stdlib/Distributed/src/pmap.jl	/^function pmap(f, p::AbstractWorkerPool, c; distributed=true, batch_size=1, on_error=nothing,$/;"	f
pmap	stdlib/Distributed/src/pmap.jl	/^pmap(f, c1, c...; kwargs...) = pmap(a->f(a...), zip(c1, c...); kwargs...)$/;"	f
pmap	stdlib/Distributed/src/pmap.jl	/^pmap(f, c; kwargs...) = pmap(f, default_worker_pool(), c; kwargs...)$/;"	f
pmap	stdlib/Distributed/src/pmap.jl	/^pmap(f, p::AbstractWorkerPool, c1, c...; kwargs...) = pmap(a->f(a...), p, zip(c1, c...); kwargs./;"	f
pmap_args	stdlib/Distributed/test/distributed_exec.jl	/^pmap_args = [$/;"	v
pmap_fallback	stdlib/Distributed/test/distributed_exec.jl	/^pmap_fallback = (f, c...) -> pmap(f, empty_pool, c...)$/;"	v
pointer	base/abstractarray.jl	/^function pointer(x::AbstractArray{T}, i::Integer) where T$/;"	f
pointer	base/abstractarray.jl	/^pointer(x::AbstractArray{T}) where {T} = unsafe_convert(Ptr{T}, x)$/;"	f
pointer	base/c.jl	/^function pointer end$/;"	f
pointer	base/c.jl	/^pointer(p::Cstring) = convert(Ptr{Cchar}, p)$/;"	f
pointer	base/c.jl	/^pointer(p::Cwstring) = convert(Ptr{Cwchar_t}, p)$/;"	f
pointer	base/strings/string.jl	/^pointer(s::String) = unsafe_convert(Ptr{UInt8}, s)$/;"	f
pointer	base/strings/string.jl	/^pointer(s::String, i::Integer) = pointer(s)+(i-1)$/;"	f
pointer	base/strings/substring.jl	/^pointer(x::SubString{String}) = pointer(x.string) + x.offset$/;"	f
pointer	base/strings/substring.jl	/^pointer(x::SubString{String}, i::Integer) = pointer(x.string) + x.offset + (i-1)$/;"	f
pointer	base/subarray.jl	/^function pointer(V::SubArray{T,N,<:Array,<:Tuple{Vararg{RangeIndex}}}, is::Tuple{Vararg{Int}}) w/;"	f
pointer	base/subarray.jl	/^pointer(V::FastContiguousSubArray, i::Int) = pointer(V.parent, V.offset1 + i)$/;"	f
pointer	base/subarray.jl	/^pointer(V::FastSubArray, i::Int) = pointer(V.parent, V.offset1 + V.stride1*i)$/;"	f
pointer	base/subarray.jl	/^pointer(V::SubArray, i::Int) = _pointer(V, i)$/;"	f
pointer_from_objref	base/pointer.jl	/^function pointer_from_objref(@nospecialize(x))$/;"	f
pointer_from_objref_func	src/codegen.cpp	/^static Function *pointer_from_objref_func;$/;"	v	typeref:typename:Function *	file:
pointer_from_objref_func	src/llvm-pass-helpers.h	/^    llvm::Function *pointer_from_objref_func;$/;"	m	struct:JuliaPassContext	typeref:typename:llvm::Function *
pointer_not_safepoint	test/compiler/codegen.jl	/^function pointer_not_safepoint()$/;"	f
pointersym	src/flisp/flisp.h	/^    value_t arraysym, cfunctionsym, voidsym, pointersym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
poison_callstack	base/compiler/inferencestate.jl	/^function poison_callstack(infstate::InferenceState, topmost::InferenceState, poison_topmost::Boo/;"	f
poll_fd	stdlib/FileWatching/src/FileWatching.jl	/^function poll_fd(s::Union{RawFD, Sys.iswindows() ? WindowsRawSocket : Union{}}, timeout_s::Real=/;"	f
poll_file	stdlib/FileWatching/src/FileWatching.jl	/^function poll_file(s::AbstractString, interval_seconds::Real=5.007, timeout_s::Real=-1)$/;"	f
polly	base/expr.jl	/^macro polly(ex)$/;"	f
polly	src/julia.h	/^    int8_t polly;$/;"	m	struct:__anon055fe4271808	typeref:typename:int8_t
polly_sym	src/ast.c	/^jl_sym_t *polly_sym; jl_sym_t *unused_sym;$/;"	v	typeref:typename:jl_sym_t *
pool	src/gc.h	/^    jl_alloc_num_t pool;$/;"	m	struct:__anoncf30557c0208	typeref:typename:jl_alloc_num_t
poolAllocFunc	src/llvm-final-gc-lowering.cpp	/^    Function *poolAllocFunc;$/;"	m	struct:FinalLowerGC	typeref:typename:Function *	file:
pool_n	src/gc.h	/^    uint8_t pool_n;$/;"	m	struct:__anoncf30557c1108	typeref:typename:uint8_t
pool_sizes	src/gc-stacks.c	/^const unsigned pool_sizes[] = {$/;"	v	typeref:typename:const unsigned[]
pool_stats	src/gc-debug.c	/^static size_t pool_stats(jl_gc_pool_t *p, size_t *pwaste, size_t *np,$/;"	f	typeref:typename:size_t	file:
pool_sweep_start	src/gc-debug.c	/^static int64_t pool_sweep_start;$/;"	v	typeref:typename:int64_t	file:
poolalloc	src/gc.h	/^    uint64_t    poolalloc;$/;"	m	struct:__anoncf30557c0308	typeref:typename:uint64_t
poolalloc	src/julia_threads.h	/^    uint64_t    poolalloc;$/;"	m	struct:__anonf8aecdb10508	typeref:typename:uint64_t
pooled	src/julia.h	/^    uint16_t pooled:1;$/;"	m	struct:__anon055fe4270308	typeref:typename:uint16_t:1
poolobj_sizes	src/gc-debug.c	/^static int64_t poolobj_sizes[4];$/;"	v	typeref:typename:int64_t[4]	file:
pop	test/gcext/LocalTest.jl	/^function pop(stack :: Stack)$/;"	f
pop!	base/abstractdict.jl	/^function pop!(d::IdDict{K,V}, @nospecialize(key)) where {K, V}$/;"	f
pop!	base/abstractdict.jl	/^function pop!(d::IdDict{K,V}, @nospecialize(key), @nospecialize(default)) where {K, V}$/;"	f
pop!	base/abstractdict.jl	/^pop!(s::IdSet, @nospecialize(x)) = (pop!(s.dict, x); x)$/;"	f
pop!	base/abstractdict.jl	/^pop!(s::IdSet, @nospecialize(x), @nospecialize(default)) = (x in s ? pop!(s, x) : default)$/;"	f
pop!	base/array.jl	/^function pop!(a::Vector)$/;"	f
pop!	base/bitarray.jl	/^function pop!(B::BitVector)$/;"	f
pop!	base/bitset.jl	/^@inline function pop!(s::BitSet, n::Integer)$/;"	f
pop!	base/bitset.jl	/^@inline function pop!(s::BitSet, n::Integer, default)$/;"	f
pop!	base/bitset.jl	/^@inline pop!(s::BitSet) = pop!(s, last(s))$/;"	f
pop!	base/dict.jl	/^function pop!(h::Dict)$/;"	f
pop!	base/dict.jl	/^function pop!(h::Dict, key)$/;"	f
pop!	base/dict.jl	/^function pop!(h::Dict, key, default)$/;"	f
pop!	base/env.jl	/^pop!(::EnvDict, k::AbstractString) = (v = ENV[k]; _unsetenv(k); v)$/;"	f
pop!	base/env.jl	/^pop!(::EnvDict, k::AbstractString, def) = haskey(ENV,k) ? pop!(ENV,k) : def$/;"	f
pop!	base/linked_list.jl	/^function pop!(q::InvasiveLinkedList{T}) where {T}$/;"	f
pop!	base/linked_list.jl	/^pop!(q::LinkedList) = invoke(pop!, Tuple{InvasiveLinkedList,}, q).value$/;"	f
pop!	base/set.jl	/^function pop!(s::Set)$/;"	f
pop!	base/set.jl	/^pop!(s::Set, x) = (pop!(s.dict, x); x)$/;"	f
pop!	base/set.jl	/^pop!(s::Set, x, default) = (x in s ? pop!(s, x) : default)$/;"	f
pop!	base/task.jl	/^function pop!(W::InvasiveLinkedListSynchronized)$/;"	f
pop!	base/weakkeydict.jl	/^pop!(wkh::WeakKeyDict{K}, key) where {K} = lock(() -> pop!(wkh.ht, key), wkh)$/;"	f
pop!	base/weakkeydict.jl	/^pop!(wkh::WeakKeyDict{K}, key, default) where {K} = lock(() -> pop!(wkh.ht, key, default), wkh)$/;"	f
popGCFrame	src/llvm-pass-helpers.cpp	/^    const IntrinsicDescription popGCFrame($/;"	v	namespace:jl_intrinsics	typeref:typename:const IntrinsicDescription
pop_exception_sym	src/ast.c	/^jl_sym_t *pop_exception_sym;$/;"	v	typeref:typename:jl_sym_t *
pop_or_die!	base/printf.jl	/^pop_or_die!(s, a) = !isempty(a) ? popfirst!(a) :$/;"	f
pop_testset	stdlib/Test/src/Test.jl	/^function pop_testset()$/;"	f
pop_undo	stdlib/REPL/src/LineEdit.jl	/^function pop_undo(s::PromptState)$/;"	f
popaliasscope_sym	src/ast.c	/^jl_sym_t *aliasscope_sym; jl_sym_t *popaliasscope_sym;$/;"	v	typeref:typename:jl_sym_t *
popcount	base/gmp.jl	/^popcount(a::BigInt) = Int(ccall((:__gmpz_popcount, :libgmp), Culong, (mpz_t,), a))$/;"	f
popdisplay	base/multimedia.jl	/^function popdisplay(d::AbstractDisplay)$/;"	f
popdisplay	base/multimedia.jl	/^popdisplay() = pop!(displays)$/;"	f
popfirst!	base/array.jl	/^function popfirst!(a::Vector)$/;"	f
popfirst!	base/bitarray.jl	/^function popfirst!(B::BitVector)$/;"	f
popfirst!	base/bitset.jl	/^popfirst!(s::BitSet) = pop!(s, first(s))$/;"	f
popfirst!	base/channels.jl	/^popfirst!(c::Channel) = take!(c)$/;"	f
popfirst!	base/essentials.jl	/^function popfirst! end$/;"	f
popfirst!	base/iterators.jl	/^@inline function popfirst!(s::Stateful)$/;"	f
popfirst!	base/linked_list.jl	/^function popfirst!(q::InvasiveLinkedList{T}) where {T}$/;"	f
popfirst!	base/linked_list.jl	/^popfirst!(q::LinkedList) = invoke(popfirst!, Tuple{InvasiveLinkedList,}, q).value$/;"	f
popfirst!	base/task.jl	/^function popfirst!(W::InvasiveLinkedListSynchronized)$/;"	f
poplinenum	base/cartesian.jl	/^function poplinenum(ex::Expr)$/;"	f
poplinenum	base/cartesian.jl	/^poplinenum(arg) = arg$/;"	f
popmeta!	base/expr.jl	/^popmeta!(body, sym) = _getmeta(body, sym, true)$/;"	f
poptaskref	base/task.jl	/^@noinline function poptaskref(W::StickyWorkqueue)$/;"	f
port-eof?	src/flisp/aliases.scm	/^(define (port-eof? p) (io.eof? p))$/;"	f
port?	src/flisp/aliases.scm	/^(define (port? x) (iostream? x))$/;"	f
pos	src/llvm-late-gc-lowering.cpp	/^        unsigned pos;$/;"	m	struct:PEOIterator::Element	typeref:typename:unsigned	file:
pos	stdlib/REPL/src/Terminals.jl	/^pos(t::TextTerminal) = (getX(t), getY(t))$/;"	f
pos_stable	stdlib/InteractiveUtils/test/runtests.jl	/^pos_stable(x) = x > 0 ? x : zero(x)$/;"	f
pos_unstable	stdlib/InteractiveUtils/test/runtests.jl	/^pos_unstable(x) = x > 0 ? x : 0$/;"	f
poshighword	base/math.jl	/^@inline poshighword(x::Float32) = highword(x) & 0x7fffffff$/;"	f
poshighword	base/math.jl	/^@inline poshighword(x::Float64) = poshighword(reinterpret(UInt64, x))$/;"	f
poshighword	base/math.jl	/^@inline poshighword(x::UInt64)  = highword(x) & 0x7fffffff$/;"	f
position	base/filesystem.jl	/^function position(f::File)$/;"	f
position	base/iobuffer.jl	/^position(io::GenericIOBuffer) = io.ptr-1$/;"	f
position	base/iostream.jl	/^function position(s::IOStream)$/;"	f
position	base/secretbuffer.jl	/^position(io::SecretBuffer) = io.ptr-1$/;"	f
position	stdlib/REPL/src/LineEdit.jl	/^position(s::Union{MIState,ModeState}) = position(buffer(s))$/;"	f
posixpath	stdlib/LibGit2/src/utils.jl	/^    posixpath(path) = path$/;"	f
posixpath	stdlib/LibGit2/src/utils.jl	/^    posixpath(path) = replace(path,'\\\\' => '\/')$/;"	f
posixpath	stdlib/LibGit2/src/utils.jl	/^function posixpath end$/;"	f
possible_adjoint	stdlib/SparseArrays/src/linalg.jl	/^possible_adjoint(adj::Bool, a ) = adj ? adjoint(a) : a$/;"	f
possible_adjoint	stdlib/SparseArrays/src/linalg.jl	/^possible_adjoint(adj::Bool, a::Real ) = a$/;"	f
possible_formatting_symbols	base/util.jl	/^const possible_formatting_symbols = [:normal, :bold, :default]$/;"	v
post_boot_hooks	src/init.c	/^static void post_boot_hooks(void)$/;"	f	typeref:typename:void	file:
post_gc_func	test/gcext/gcext.c	/^void post_gc_func(int full) {}$/;"	f	typeref:typename:void
postprocess!	stdlib/REPL/src/LineEdit.jl	/^function postprocess!(dict::Dict)$/;"	f
postprocess!	stdlib/REPL/src/LineEdit.jl	/^postprocess!(others) = nothing$/;"	f
posv!	stdlib/LinearAlgebra/src/lapack.jl	/^        function posv!(uplo::AbstractChar, A::AbstractMatrix{$elty}, B::AbstractVecOrMat{$elty})$/;"	f
potrf!	stdlib/LinearAlgebra/src/lapack.jl	/^        function potrf!(uplo::AbstractChar, A::AbstractMatrix{$elty})$/;"	f
potri!	stdlib/LinearAlgebra/src/lapack.jl	/^        function potri!(uplo::AbstractChar, A::AbstractMatrix{$elty})$/;"	f
potrs!	stdlib/LinearAlgebra/src/lapack.jl	/^        function potrs!(uplo::AbstractChar, A::AbstractMatrix{$elty}, B::AbstractVecOrMat{$elty}/;"	f
pow10bitsforindex	base/ryu/utils.jl	/^pow10bitsforindex(idx) = 16 * idx + 120$/;"	f
pow2	base/ryu/utils.jl	/^pow2(x, p) = (x & ((Int64(1) << p) - 1)) == 0$/;"	f
pow5	base/ryu/utils.jl	/^@inline function pow5(x, p)$/;"	f
pow5_bitcount	base/ryu/utils.jl	/^pow5_bitcount(::Type{Float16}) = 30$/;"	f
pow5_bitcount	base/ryu/utils.jl	/^pow5_bitcount(::Type{Float32}) = 61$/;"	f
pow5_bitcount	base/ryu/utils.jl	/^pow5_bitcount(::Type{Float64}) = 121$/;"	f
pow5_inv_bitcount	base/ryu/utils.jl	/^pow5_inv_bitcount(::Type{Float16}) = 30$/;"	f
pow5_inv_bitcount	base/ryu/utils.jl	/^pow5_inv_bitcount(::Type{Float32}) = 59$/;"	f
pow5_inv_bitcount	base/ryu/utils.jl	/^pow5_inv_bitcount(::Type{Float64}) = 122$/;"	f
pow5bits	base/ryu/utils.jl	/^pow5bits(e) = ((e * 1217359) >> 19) + 1$/;"	f
pow5invsplit	base/ryu/utils.jl	/^@inline function pow5invsplit(::Type{Float16}, i)$/;"	f
pow5invsplit	base/ryu/utils.jl	/^@inline function pow5invsplit(::Type{Float32}, i)$/;"	f
pow5invsplit	base/ryu/utils.jl	/^@inline function pow5invsplit(::Type{Float64}, i)$/;"	f
pow5split	base/ryu/utils.jl	/^@inline function pow5split(::Type{Float16}, i)$/;"	f
pow5split	base/ryu/utils.jl	/^@inline function pow5split(::Type{Float32}, i)$/;"	f
pow5split	base/ryu/utils.jl	/^@inline function pow5split(::Type{Float64}, i)$/;"	f
pow_fast	base/fastmath.jl	/^    pow_fast(x::Complex{T}, y::T) where {T<:FloatTypes} = exp(y*log(x))$/;"	f
pow_fast	base/fastmath.jl	/^    pow_fast(x::T, y::Complex{T}) where {T<:FloatTypes} = exp(y*log(x))$/;"	f
pow_fast	base/fastmath.jl	/^    pow_fast(x::T, y::T) where {T<:ComplexTypes} = exp(y*log(x))$/;"	f
pow_fast	base/fastmath.jl	/^@inline pow_fast(x, v::Val) = Base.literal_pow(^, x, v)$/;"	f
pow_fast	base/fastmath.jl	/^pow_fast(x::Float32, y::Float32) =$/;"	f
pow_fast	base/fastmath.jl	/^pow_fast(x::Float32, y::Integer) = ccall("llvm.powi.f32", llvmcall, Float32, (Float32, Int32), x/;"	f
pow_fast	base/fastmath.jl	/^pow_fast(x::Float64, y::Float64) =$/;"	f
pow_fast	base/fastmath.jl	/^pow_fast(x::Float64, y::Integer) = ccall("llvm.powi.f64", llvmcall, Float64, (Float64, Int32), x/;"	f
pow_fast	base/fastmath.jl	/^pow_fast(x::FloatTypes, ::Val{p}) where {p} = pow_fast(x, p) # inlines already via llvm.powi$/;"	f
power_by_squaring	base/intfuncs.jl	/^function power_by_squaring(x::Bool, p::Integer)$/;"	f
power_by_squaring	base/intfuncs.jl	/^function power_by_squaring(x_, p::Integer)$/;"	f
power_by_squaring	base/intfuncs.jl	/^power_by_squaring(x::Bool, p::Unsigned) = ((p==0) | x)$/;"	f
powermod	base/gmp.jl	/^function powermod(x::BigInt, p::BigInt, m::BigInt)$/;"	f
powermod	base/gmp.jl	/^powermod(x::Integer, p::Integer, m::BigInt) = powermod(big(x), big(p), m)$/;"	f
powermod	base/intfuncs.jl	/^function powermod(x::Integer, p::Integer, m::T) where T<:Integer$/;"	f
powermod	base/intfuncs.jl	/^powermod(x::Integer, p::Integer, m::Union{Int128,UInt128}) = oftype(m, powermod(x, p, big(m)))$/;"	f
powers_of_ten	base/intfuncs.jl	/^const powers_of_ten = [$/;"	v
powm	base/gmp.jl	/^powm(a::BigInt, b::BigInt, c::BigInt) = powm!(BigInt(), a, b, c)$/;"	f
powm	stdlib/LinearAlgebra/src/triangular.jl	/^powm(A::LowerTriangular, p::Real) = copy(transpose(powm(copy(transpose(A)), p::Real)))$/;"	f
powm!	base/gmp.jl	/^powm!(x::BigInt, a::BigInt, b::BigInt, c::BigInt) =$/;"	f
powm!	base/gmp.jl	/^powm!(x::BigInt, b::BigInt, c::BigInt) = powm!(x, x, b, c)$/;"	f
powm!	stdlib/LinearAlgebra/src/triangular.jl	/^function powm!(A0::UpperTriangular{<:BlasFloat}, p::Real)$/;"	f
powxmod	stdlib/Random/src/DSFMT.jl	/^function powxmod(e::BigInt, m::GF2X)::GF2X$/;"	f
pr9256	test/abstractarray.jl	/^            function pr9256()$/;"	f
pre_gc_func	test/gcext/gcext.c	/^void pre_gc_func(int full)$/;"	f	typeref:typename:void
prec-arrow	src/julia-parser.scm	/^(define prec-arrow       (append!$/;"	f
prec-assignment	src/julia-parser.scm	/^(define prec-assignment$/;"	f
prec-bitshift	src/julia-parser.scm	/^(define prec-bitshift    (add-dots '(<< >> >>>)))$/;"	f
prec-colon	src/julia-parser.scm	/^(define prec-colon       (append! '(: |..|) (add-dots '(… ⁝ ⋮ ⋱ ⋰ ⋯))))$/;"	f
prec-comparison	src/julia-parser.scm	/^(define prec-comparison$/;"	f
prec-conditional	src/julia-parser.scm	/^(define prec-conditional '(?))$/;"	f
prec-decl	src/julia-parser.scm	/^(define prec-decl        '(|::|))$/;"	f
prec-dot	src/julia-parser.scm	/^(define prec-dot         '(|.|))$/;"	f
prec-lazy-and	src/julia-parser.scm	/^(define prec-lazy-and    '(&&))$/;"	f
prec-lazy-or	src/julia-parser.scm	/^(define prec-lazy-or     '(|\\|\\||))$/;"	f
prec-names	src/julia-parser.scm	/^(define prec-names '(prec-assignment$/;"	f
prec-pair	src/julia-parser.scm	/^(define prec-pair (add-dots '(=>)))$/;"	f
prec-pipe<	src/julia-parser.scm	/^(define prec-pipe<       '(|.<\\|| |<\\||))$/;"	f
prec-pipe>	src/julia-parser.scm	/^(define prec-pipe>       '(|.\\|>| |\\|>|))$/;"	f
prec-plus	src/julia-parser.scm	/^(define prec-plus        (append! '($)$/;"	f
prec-power	src/julia-parser.scm	/^(define prec-power       (add-dots '(^ ↑ ↓ ⇵ ⟰ ⟱ ⤈ ⤉ ⤊ ⤋ ⤒ ⤓ ⥉ ⥌ ⥍ ⥏/;"	f
prec-rational	src/julia-parser.scm	/^(define prec-rational    (add-dots '(\/\/)))$/;"	f
prec-table	src/julia-parser.scm	/^(define prec-table (let ((t (table)))$/;"	f
prec-times	src/julia-parser.scm	/^(define prec-times       (add-dots '(* \/ ÷ % & ⋅ ∘ × |\\\\| ∩ ∧ ⊗ ⊘ ⊙ ⊚ ⊛ ⊠/;"	f
prec_arrow	base/show.jl	/^const prec_arrow = operator_precedence(:(-->))$/;"	v
prec_assignment	base/show.jl	/^const prec_assignment = operator_precedence(:(=))$/;"	v
prec_comparison	base/show.jl	/^const prec_comparison = operator_precedence(:(>))$/;"	v
prec_control_flow	base/show.jl	/^const prec_control_flow = operator_precedence(:(&&))$/;"	v
prec_decl	base/show.jl	/^const prec_decl = operator_precedence(:(::))$/;"	v
prec_pair	base/show.jl	/^const prec_pair = operator_precedence(:(=>))$/;"	v
prec_power	base/show.jl	/^const prec_power = operator_precedence(:(^))$/;"	v
precise_container_type	base/compiler/abstractinterpretation.jl	/^function precise_container_type(@nospecialize(typ), vtypes::VarTable, sv::InferenceState)$/;"	f
precision	base/float.jl	/^function precision end$/;"	f
precision	base/float.jl	/^precision(::T) where {T<:AbstractFloat} = precision(T)$/;"	f
precision	base/float.jl	/^precision(::Type{Float16}) = 11$/;"	f
precision	base/float.jl	/^precision(::Type{Float32}) = 24$/;"	f
precision	base/float.jl	/^precision(::Type{Float64}) = 53$/;"	f
precision	base/mpfr.jl	/^function precision(x::BigFloat)  # precision of an object of type BigFloat$/;"	f
precision	base/mpfr.jl	/^precision(::Type{BigFloat}) = Int(DEFAULT_PRECISION[]) # precision of the type BigFloat itself$/;"	f
precompilableerror	base/loading.jl	/^precompilableerror(@nospecialize ex) = false$/;"	f
precompilableerror	base/loading.jl	/^precompilableerror(ex::PrecompilableError) = true$/;"	f
precompilableerror	base/loading.jl	/^precompilableerror(ex::WrappedException) = precompilableerror(ex.error)$/;"	f
precompile	base/essentials.jl	/^function precompile(@nospecialize(f), args::Tuple)$/;"	f
precompile	base/essentials.jl	/^function precompile(argt::Type)$/;"	f
precompile_enq_all_cache__	src/precompile.c	/^static int precompile_enq_all_cache__(jl_typemap_entry_t *l, void *closure)$/;"	f	typeref:typename:int	file:
precompile_enq_all_specializations_	src/precompile.c	/^static void precompile_enq_all_specializations_(jl_methtable_t *mt, void *env)$/;"	f	typeref:typename:void	file:
precompile_enq_all_specializations__	src/precompile.c	/^static int precompile_enq_all_specializations__(jl_typemap_entry_t *def, void *closure)$/;"	f	typeref:typename:int	file:
precompile_enq_specialization_	src/precompile.c	/^static int precompile_enq_specialization_(jl_typemap_entry_t *l, void *closure)$/;"	f	typeref:typename:int	file:
precompile_script	contrib/generate_precompile.jl	/^precompile_script = """$/;"	v
predict_arraylen	src/flisp/cvalues.c	/^static size_t predict_arraylen(fl_context_t *fl_ctx, value_t arg)$/;"	f	typeref:typename:size_t	file:
preduce	stdlib/Distributed/src/macros.jl	/^function preduce(reducer, f, R)$/;"	f
preevaluation	src/interpreter.c	/^    int preevaluation; \/\/ use special rules for pre-evaluating expressions (deprecated--only f/;"	m	struct:__anonf89725e10108	typeref:typename:int	file:
prefer_sort	stdlib/SparseArrays/src/linalg.jl	/^prefer_sort(nz::Integer, m::Integer) = m > 6 && 3 * ilog2(nz) * nz < m$/;"	f
prefer_specsig	src/julia.h	/^    int prefer_specsig;     \/\/ are specialized function signatures preferred?$/;"	m	struct:__anon055fe4271b08	typeref:typename:int
preferred_llvm_type	src/abi_aarch64.cpp	/^Type *preferred_llvm_type(jl_datatype_t *dt, bool isret) const override$/;"	f	struct:ABI_AArch64Layout	typeref:typename:Type *	file:
preferred_llvm_type	src/abi_arm.cpp	/^Type *preferred_llvm_type(jl_datatype_t *dt, bool isret) const override$/;"	f	struct:ABI_ARMLayout	typeref:typename:Type *	file:
preferred_llvm_type	src/abi_llvm.cpp	/^Type *preferred_llvm_type(jl_datatype_t *ty, bool isret) const override$/;"	f	struct:ABI_LLVMLayout	typeref:typename:Type *	file:
preferred_llvm_type	src/abi_ppc64le.cpp	/^Type *preferred_llvm_type(jl_datatype_t *dt, bool isret) const override$/;"	f	struct:ABI_PPC64leLayout	typeref:typename:Type *	file:
preferred_llvm_type	src/abi_win32.cpp	/^Type *preferred_llvm_type(jl_datatype_t *dt, bool isret) const override$/;"	f	struct:ABI_Win32Layout	typeref:typename:Type *	file:
preferred_llvm_type	src/abi_win64.cpp	/^Type *preferred_llvm_type(jl_datatype_t *dt, bool isret) const override$/;"	f	struct:ABI_Win64Layout	typeref:typename:Type *	file:
preferred_llvm_type	src/abi_x86.cpp	/^Type *preferred_llvm_type(jl_datatype_t *dt, bool isret) const override$/;"	f	struct:ABI_x86Layout	typeref:typename:Type *	file:
preferred_llvm_type	src/abi_x86_64.cpp	/^Type *preferred_llvm_type(jl_datatype_t *dt, bool isret) const override$/;"	f	struct:ABI_x86_64Layout	typeref:typename:Type *	file:
prefix	deps/srccache/patchelf-0.9/Makefile.in	/^prefix = @prefix@$/;"	m
prefix	deps/srccache/patchelf-0.9/src/Makefile.in	/^prefix = @prefix@$/;"	m
prefix	deps/srccache/patchelf-0.9/tests/Makefile.in	/^prefix = @prefix@$/;"	m
prefix_history_keymap	stdlib/REPL/src/LineEdit.jl	/^const prefix_history_keymap = merge!($/;"	v
prefixer	test/spawn.jl	/^    prefixer(prefix, sleep) = `sh -c "while IFS= read REPLY; do echo '$prefix ' \\$REPLY; sleep /;"	f
preorder	base/compiler/ssair/domtree.jl	/^    preorder(D::DFSTree) = OneTo(length(D))$/;"	f
prep_sparsevec_copy_dest!	stdlib/SparseArrays/src/sparsevector.jl	/^function prep_sparsevec_copy_dest!(A::SparseVector, lB, nnzB)$/;"	f
preparePassManager	src/jitlayers.cpp	/^    void preparePassManager(PMStack &Stack) override {$/;"	f	class:JuliaPipeline	typeref:typename:void	file:
prepare_call	src/cgutils.cpp	/^#define prepare_call(/;"	d	file:
prepare_call_in	src/cgutils.cpp	/^static Value *prepare_call_in(Module *M, Value *Callee)$/;"	f	typeref:typename:Value *	file:
prepare_global	src/codegen.cpp	/^#define prepare_global(/;"	d	file:
prepare_global_in	src/jitlayers.h	/^static inline GlobalVariable *prepare_global_in(Module *M, GlobalVariable *G)$/;"	f	typeref:typename:GlobalVariable *
prepare_next	stdlib/REPL/src/REPL.jl	/^function prepare_next(repl::LineEditREPL)$/;"	f
prepare_vmap	src/llvm-multiversioning.cpp	/^void CloneCtx::prepare_vmap(ValueToValueMapTy &vmap)$/;"	f	class:__anond5683ea40111::CloneCtx	typeref:typename:void
prepend!	base/array.jl	/^function prepend! end$/;"	f
prepend!	base/array.jl	/^function prepend!(a::Vector, items::AbstractVector)$/;"	f
prepend!	base/array.jl	/^prepend!(a::Vector, iter) = _prepend!(a, IteratorSize(iter), iter)$/;"	f
prepend!	base/bitarray.jl	/^function prepend!(B::BitVector, items::BitVector)$/;"	f
prepend!	base/bitarray.jl	/^prepend!(A::Vector{Bool}, items::BitVector) = prepend!(A, Array(items))$/;"	f
prepend!	base/bitarray.jl	/^prepend!(B::BitVector, items) = prepend!(B, BitArray(items))$/;"	f
preprocess	base/broadcast.jl	/^@inline preprocess(dest, bc::Broadcasted{Style}) where {Style} = Broadcasted{Style}(bc.f, prepro/;"	f
preprocess	base/broadcast.jl	/^preprocess(dest, x) = extrude(broadcast_unalias(dest, x))$/;"	f
preprocess_args	base/broadcast.jl	/^@inline preprocess_args(dest, args::Tuple) = (preprocess(dest, args[1]), preprocess_args(dest, t/;"	f
preprocess_args	base/broadcast.jl	/^preprocess_args(dest, args::Tuple{Any}) = (preprocess(dest, args[1]),)$/;"	f
preprocess_args	base/broadcast.jl	/^preprocess_args(dest, args::Tuple{}) = ()$/;"	f
prescott	src/processor_x86.cpp	/^constexpr auto prescott = yonah;$/;"	v	namespace:X86::Feature	typeref:typename:auto
preserve	base/gcutils.jl	/^macro preserve(args...)$/;"	f
preserve_active	stdlib/REPL/src/LineEdit.jl	/^function preserve_active(command::Symbol)$/;"	f
preserve_handle	base/libuv.jl	/^function preserve_handle(x)$/;"	f
preserve_handle_lock	base/libuv.jl	/^const preserve_handle_lock = Threads.SpinLock()$/;"	v
preserves	src/llvm-alloc-opt.cpp	/^        SmallSet<CallInst*,4> preserves;$/;"	m	struct:__anon0a1571000111::Optimizer::AllocUseInfo	typeref:typename:SmallSet<CallInst *,4>	file:
prettyprint_getunits	base/util.jl	/^function prettyprint_getunits(value, numunits, factor)$/;"	f
prev	src/ast.c	/^    struct _jl_ast_context_list_t **prev;$/;"	m	struct:_jl_ast_context_list_t	typeref:struct:_jl_ast_context_list_t **	file:
prev	src/builtins.c	/^    struct _varidx *prev;$/;"	m	struct:_varidx	typeref:struct:_varidx *	file:
prev	src/flisp/flisp.c	/^    struct _fl_readstate_t *prev;$/;"	m	struct:_fl_readstate_t	typeref:struct:_fl_readstate_t *	file:
prev	src/flisp/flisp.h	/^    struct _ectx_t *prev;$/;"	m	struct:_ectx_t	typeref:struct:_ectx_t *
prev	src/gc.h	/^    struct _bigval_t **prev; \/\/ pointer to the next field of the prev entry$/;"	m	struct:_bigval_t	typeref:struct:_bigval_t **
prev	src/jltypes.c	/^    struct _jl_typestack_t *prev;$/;"	m	struct:_jl_typestack_t	typeref:struct:_jl_typestack_t *	file:
prev	src/julia.h	/^    struct _jl_gcframe_t *prev;$/;"	m	struct:_jl_gcframe_t	typeref:struct:_jl_gcframe_t *
prev	src/julia.h	/^    struct _jl_handler_t *prev;$/;"	m	struct:_jl_handler_t	typeref:struct:_jl_handler_t *
prev	src/julia_internal.h	/^    struct jl_typeenv_t *prev;$/;"	m	struct:jl_typeenv_t	typeref:struct:jl_typeenv_t *
prev	src/module.c	/^    struct _modstack_t *prev;$/;"	m	struct:_modstack_t	typeref:struct:_modstack_t *	file:
prev	src/rtutils.c	/^    struct recur_list *prev;$/;"	m	struct:recur_list	typeref:struct:recur_list *	file:
prev	src/subtype.c	/^    struct jl_varbinding_t *prev;$/;"	m	struct:jl_varbinding_t	typeref:struct:jl_varbinding_t *	file:
prev	src/timing.h	/^    jl_timing_block_t *prev;$/;"	m	struct:_jl_timing_block_t	typeref:typename:jl_timing_block_t *
prev_logger	test/deprecation_exec.jl	/^prev_logger = global_logger(testlogger)$/;"	v
prev_nold	src/gc.h	/^    uint16_t prev_nold;$/;"	m	struct:__anoncf30557c1108	typeref:typename:uint16_t
prev_sweep_full	src/gc.c	/^static int prev_sweep_full = 1;$/;"	v	typeref:typename:int	file:
prevfloat	base/float.jl	/^prevfloat(x::AbstractFloat) = nextfloat(x,-1)$/;"	f
prevfloat	base/float.jl	/^prevfloat(x::AbstractFloat, d::Integer) = nextfloat(x, -d)$/;"	f
prevfloat	base/mpfr.jl	/^prevfloat(x::BigFloat, n::Integer=1) = n == 0 ? x : prevfloat!(_duplicate(x), n)$/;"	f
prevfloat!	base/mpfr.jl	/^function prevfloat!(x::BigFloat, n::Integer=1)$/;"	f
prevind	base/abstractarray.jl	/^prevind(::AbstractArray, i::Integer) = Int(i)-1$/;"	f
prevind	base/strings/basic.jl	/^function prevind(s::AbstractString, i::Int, n::Int)$/;"	f
prevind	base/strings/basic.jl	/^prevind(s::AbstractString, i::Int)                 = prevind(s, i, 1)$/;"	f
prevind	base/strings/basic.jl	/^prevind(s::AbstractString, i::Integer)             = prevind(s, Int(i))$/;"	f
prevind	base/strings/basic.jl	/^prevind(s::AbstractString, i::Integer, n::Integer) = prevind(s, Int(i), Int(n))$/;"	f
prevind	base/tuple.jl	/^prevind(@nospecialize(t::Tuple), i::Integer) = Int(i)-1$/;"	f
previous_exception	src/julia_threads.h	/^    struct _jl_value_t *previous_exception;$/;"	m	struct:_jl_tls_states_t	typeref:struct:_jl_value_t *
previous_task	src/julia_threads.h	/^    struct _jl_task_t *previous_task;$/;"	m	struct:_jl_tls_states_t	typeref:struct:_jl_task_t *
prevpow	base/intfuncs.jl	/^function prevpow(a::Real, x::Real)$/;"	f
prim_int16	src/flisp/cvalues.c	/^struct prim_int16{ char a; int16_t i; };$/;"	s	file:
prim_int32	src/flisp/cvalues.c	/^struct prim_int32{ char a; int32_t i; };$/;"	s	file:
prim_int64	src/flisp/cvalues.c	/^struct prim_int64{ char a; int64_t i; };$/;"	s	file:
prim_ptr	src/flisp/cvalues.c	/^struct prim_ptr{ char a;  void   *i; };$/;"	s	file:
primary_world	src/julia.h	/^    size_t primary_world;$/;"	m	struct:_jl_method_t	typeref:typename:size_t
primary_world	src/julia.h	/^    size_t primary_world;$/;"	m	struct:_jl_module_t	typeref:typename:size_t
primitive-type-def-expr	src/julia-syntax.scm	/^(define (primitive-type-def-expr n name params super)$/;"	f
primtype_sym	src/ast.c	/^jl_sym_t *abstracttype_sym; jl_sym_t *primtype_sym;$/;"	v	typeref:typename:jl_sym_t *
print	base/Base.jl	/^    print(io::IO, a...) = Core.print(io, a...)$/;"	f
print	base/boot.jl	/^print(@nospecialize a...) = print(stdout, a...)$/;"	f
print	base/boot.jl	/^print(io::IO, @nospecialize x) = show(io, x)$/;"	f
print	base/boot.jl	/^print(io::IO, @nospecialize(x), @nospecialize a...) = (print(io, x); print(io, a...))$/;"	f
print	base/boot.jl	/^print(io::IO, x::AbstractChar) = ccall(:jl_uv_putc, Cvoid, (Ptr{Cvoid}, Char), io_pointer(io), x/;"	f
print	base/boot.jl	/^print(io::IO, x::String) = (write(io, x); nothing)$/;"	f
print	base/char.jl	/^print(io::IO, c::AbstractChar) = print(io, Char(c)) # fallback: convert to output UTF-8$/;"	f
print	base/char.jl	/^print(io::IO, c::Char) = (write(io, c); nothing)$/;"	f
print	base/coreio.jl	/^print(xs...)   = print(stdout::IO, xs...)$/;"	f
print	base/docs/utils.jl	/^print(io::IO, t::Text) = print(io, t.content)$/;"	f
print	base/docs/utils.jl	/^print(io::IO, t::Text{<:Function}) = t.content(io)$/;"	f
print	base/loading.jl	/^print(io::IO, hash::SHA1) = bytes2hex(io, hash.bytes)$/;"	f
print	base/mpfr.jl	/^print(io::IO, b::BigFloat) = print(io, string(b))$/;"	f
print	base/multimedia.jl	/^print(io::IO, ::MIME{mime}) where {mime} = print(io, mime)$/;"	f
print	base/show.jl	/^print(        io::IO, ex::ExprNode)    = (show_unquoted(io, ex, 0, -1); nothing)$/;"	f
print	base/show.jl	/^print(io::IO, f::Function) = show_function(io, f, true)$/;"	f
print	base/show.jl	/^print(io::IO, n::Unsigned) = print(io, string(n))$/;"	f
print	base/show.jl	/^print(io::IO, s::Symbol) = (write(io,s); nothing)$/;"	f
print	base/strings/io.jl	/^function print(io::IO, x)$/;"	f
print	base/strings/io.jl	/^function print(io::IO, xs...)$/;"	f
print	base/strings/io.jl	/^print(io::IO, s::AbstractString) = for c in s; print(io, c); end$/;"	f
print	base/strings/io.jl	/^print(io::IO, s::Union{String,SubString{String}}) = (write(io, s); nothing)$/;"	f
print	base/uuid.jl	/^print(io::IO, u::UUID) = print(io, string(u))$/;"	f
print	base/version.jl	/^function print(io::IO, v::VersionNumber)$/;"	f
print	src/flisp/flisp.h	/^    void (*print)(fl_context_t *fl_ctx, value_t self, ios_t *f);$/;"	m	struct:__anonb455601d0308	typeref:typename:void (*)(fl_context_t * fl_ctx,value_t self,ios_t * f)
print	src/gc.h	/^    jl_alloc_num_t print;$/;"	m	struct:__anoncf30557c0208	typeref:typename:jl_alloc_num_t
print	stdlib/Profile/src/Profile.jl	/^function print(io::IO, data::Vector{<:Unsigned} = fetch(), lidict::Union{LineInfoDict, LineInfoF/;"	f
print	stdlib/Profile/src/Profile.jl	/^function print(io::IO, data::Vector{<:Unsigned}, lidict::Union{LineInfoDict, LineInfoFlatDict}, /;"	f
print	stdlib/Profile/src/Profile.jl	/^print(data::Vector{<:Unsigned} = fetch(), lidict::Union{LineInfoDict, LineInfoFlatDict} = getdic/;"	f
print	stdlib/Sockets/src/IPAddr.jl	/^function print(io::IO,ip::IPv6)$/;"	f
print	stdlib/Sockets/src/IPAddr.jl	/^print(io::IO,ip::IPv4) = print(io,string((ip.host&(0xFF000000))>>24),".",$/;"	f
print-%	test/embedding/Makefile	/^print-%:$/;"	t
print-%	test/gcext/Makefile	/^print-%:$/;"	t
printInterpreter	deps/srccache/patchelf-0.9/src/patchelf.cc	/^static bool printInterpreter = false;$/;"	v	typeref:typename:bool	file:
printMenu	stdlib/REPL/src/TerminalMenus/AbstractMenu.jl	/^function printMenu(out, m::AbstractMenu, cursor::Int; init::Bool=false)$/;"	f
printNeeded	deps/srccache/patchelf-0.9/src/patchelf.cc	/^static bool printNeeded = false;$/;"	v	typeref:typename:bool	file:
printNeededLibs	deps/srccache/patchelf-0.9/src/patchelf.cc	/^void ElfFile<ElfFileParamNames>::printNeededLibs()$/;"	f	class:ElfFile	typeref:typename:void
printRPath	deps/srccache/patchelf-0.9/src/patchelf.cc	/^static bool printRPath = false;$/;"	v	typeref:typename:bool	file:
printSoname	deps/srccache/patchelf-0.9/src/patchelf.cc	/^    typedef enum { printSoname, replaceSoname } sonameMode;$/;"	e	enum:ElfFile::__anon94ea2e970103	file:
printSoname	deps/srccache/patchelf-0.9/src/patchelf.cc	/^static bool printSoname = false;$/;"	v	typeref:typename:bool	file:
print_arg	base/compiler/ssair/show.jl	/^        print_arg(i) = sprint() do io$/;"	f
print_array	base/arrayshow.jl	/^print_array(io::IO, X::AbstractArray) = show_nd(io, X, print_matrix, true)$/;"	f
print_array	base/arrayshow.jl	/^print_array(io::IO, X::AbstractArray{T,0} where T) =$/;"	f
print_array	base/arrayshow.jl	/^print_array(io::IO, X::AbstractVecOrMat) = print_matrix(io, X)$/;"	f
print_array	src/crc32c.c	/^static void print_array(const char *name, int m, int n, const uint32_t *a)$/;"	f	typeref:typename:void	file:
print_bit_chunk	base/show.jl	/^function print_bit_chunk(io::IO, c::UInt64, l::Integer = 64)$/;"	f
print_bit_chunk	base/show.jl	/^print_bit_chunk(c::UInt64) = print_bit_chunk(stdout, c)$/;"	f
print_bit_chunk	base/show.jl	/^print_bit_chunk(c::UInt64, l::Integer) = print_bit_chunk(stdout, c, l)$/;"	f
print_callstack	base/compiler/inferencestate.jl	/^function print_callstack(sv::InferenceState)$/;"	f
print_circle_prefix	src/flisp/print.c	/^static int print_circle_prefix(fl_context_t *fl_ctx, ios_t *f, value_t v)$/;"	f	typeref:typename:int	file:
print_correction	stdlib/REPL/src/docview.jl	/^function print_correction(io, word)$/;"	f
print_correction	stdlib/REPL/src/docview.jl	/^print_correction(word) = print_correction(stdout, word)$/;"	f
print_counts	stdlib/Test/src/Test.jl	/^function print_counts(ts::DefaultTestSet, depth, align,$/;"	f
print_exp_a	base/printf.jl	/^function print_exp_a(out, exp::Integer)$/;"	f
print_exp_e	base/printf.jl	/^function print_exp_e(out, exp::Integer)$/;"	f
print_factor	stdlib/SuiteSparse/src/cholmod.jl	/^function print_factor(F::Factor{Tv}, name::String) where Tv<:VTypes$/;"	f
print_fixed	base/printf.jl	/^function print_fixed(out, precision, pt, ndigits, trailingzeros=true, buf = Grisu.getbuf())$/;"	f
print_fixed_width	base/printf.jl	/^function print_fixed_width(precision, pt, ndigits, trailingzeros=true)$/;"	f
print_flat	stdlib/Profile/src/Profile.jl	/^function print_flat(io::IO, lilist::Vector{StackFrame}, n::Vector{Int},$/;"	f
print_func_loc	src/gf.c	/^void print_func_loc(JL_STREAM *s, jl_method_t *m)$/;"	f	typeref:typename:void
print_hash	deps/tools/jlchecksum	/^print_hash()$/;"	f
print_htable	src/flisp/table.c	/^void print_htable(fl_context_t *fl_ctx, value_t v, ios_t *f)$/;"	f	typeref:typename:void
print_iostream	src/flisp/iostream.c	/^void print_iostream(fl_context_t *fl_ctx, value_t v, ios_t *f)$/;"	f	typeref:typename:void
print_ipv6_field	stdlib/Sockets/src/IPAddr.jl	/^print_ipv6_field(io,field::UInt16) = print(io,string(field, base = 16))$/;"	f
print_ipv6_field	stdlib/Sockets/src/IPAddr.jl	/^print_ipv6_field(io,ip,i) = print_ipv6_field(io,ipv6_field(ip,i))$/;"	f
print_joined_cols	stdlib/REPL/src/docview.jl	/^function print_joined_cols(io::IO, ss, delim = "", last = delim; cols = displaysize(io)[2])$/;"	f
print_joined_cols	stdlib/REPL/src/docview.jl	/^print_joined_cols(args...; cols = displaysize(stdout)[2]) = print_joined_cols(stdout, args...; c/;"	f
print_length	src/flisp/flisp.h	/^    fixnum_t print_length;$/;"	m	struct:_fl_context_t	typeref:typename:fixnum_t
print_level	src/flisp/flisp.h	/^    fixnum_t print_level;$/;"	m	struct:_fl_context_t	typeref:typename:fixnum_t
print_matrix	base/arrayshow.jl	/^function print_matrix(io::IO, X::AbstractVecOrMat,$/;"	f
print_matrix_row	base/arrayshow.jl	/^function print_matrix_row(io::IO,$/;"	f
print_matrix_vdots	base/arrayshow.jl	/^function print_matrix_vdots(io::IO, vdots::AbstractString,$/;"	f
print_pair	src/flisp/print.c	/^static void print_pair(fl_context_t *fl_ctx, ios_t *f, value_t v)$/;"	f	typeref:typename:void	file:
print_pretty	src/flisp/flisp.h	/^    int print_pretty;$/;"	m	struct:_fl_context_t	typeref:typename:int
print_princ	src/flisp/flisp.h	/^    int print_princ;$/;"	m	struct:_fl_context_t	typeref:typename:int
print_quoted	base/strings/io.jl	/^function print_quoted(io, s::AbstractString)$/;"	f
print_quoted_literal	base/strings/io.jl	/^function print_quoted_literal(io, s::AbstractString)$/;"	f
print_range	base/range.jl	/^function print_range(io::IO, r::AbstractRange,$/;"	f
print_response	stdlib/REPL/src/REPL.jl	/^function print_response(errio::IO, @nospecialize(response), show_value::Bool, have_color::Bool, /;"	f
print_response	stdlib/REPL/src/REPL.jl	/^function print_response(repl::AbstractREPL, @nospecialize(response), show_value::Bool, have_colo/;"	f
print_result	contrib/add_license_to_files.jl	/^const print_result = true  # prints files which where not processed.$/;"	v
print_row	stdlib/Markdown/src/GitHub/table.jl	/^    function print_row(row, row_sep, col_sep)$/;"	f
print_shell_escaped	base/shell.jl	/^function print_shell_escaped(io::IO, cmd::AbstractString, args::AbstractString...;$/;"	f
print_shell_escaped	base/shell.jl	/^print_shell_escaped(io::IO; special::String="") = nothing$/;"	f
print_shell_escaped_posixly	base/shell.jl	/^function print_shell_escaped_posixly(io::IO, args::AbstractString...)$/;"	f
print_shell_word	base/shell.jl	/^function print_shell_word(io::IO, word::AbstractString, special::AbstractString = "")$/;"	f
print_shmem_limits	stdlib/SharedArrays/src/SharedArrays.jl	/^function print_shmem_limits(slen)$/;"	f
print_shortest	base/grisu/grisu.jl	/^print_shortest(io::IO, x::AbstractFloat, dot::Bool) = _print_shortest(io, x, dot, SHORTEST, 0)$/;"	f
print_shortest	base/grisu/grisu.jl	/^print_shortest(io::IO, x::Union{AbstractFloat,Integer}) = print_shortest(io, float(x), false)$/;"	f
print_sparse	stdlib/SuiteSparse/src/cholmod.jl	/^function print_sparse(A::Sparse{Tv}, name::String) where Tv<:VTypes$/;"	f
print_stmt	base/compiler/ssair/show.jl	/^function print_stmt(io::IO, idx::Int, @nospecialize(stmt), used::BitSet, maxlength_idx::Int, col/;"	f
print_string	src/flisp/print.c	/^static void print_string(fl_context_t *fl_ctx, ios_t *f, char *str, size_t sz)$/;"	f	typeref:typename:void	file:
print_symbol_name	src/flisp/print.c	/^static void print_symbol_name(fl_context_t *fl_ctx, ios_t *f, char *name)$/;"	f	typeref:typename:void	file:
print_test_errors	stdlib/Test/src/Test.jl	/^function print_test_errors(ts::DefaultTestSet)$/;"	f
print_test_results	stdlib/Test/src/Test.jl	/^function print_test_results(ts::DefaultTestSet, depth_pad=0)$/;"	f
print_testworker_stats	test/runtests.jl	/^    function print_testworker_stats(test, wrkr, resp)$/;"	f
print_to_string	base/strings/io.jl	/^function print_to_string(xs...)$/;"	f
print_traverse	src/flisp/flisp.h	/^    void (*print_traverse)(fl_context_t *fl_ctx, value_t self);$/;"	m	struct:__anonb455601d0308	typeref:typename:void (*)(fl_context_t * fl_ctx,value_t self)
print_traverse	src/flisp/print.c	/^void print_traverse(fl_context_t *fl_ctx, value_t v)$/;"	f	typeref:typename:void
print_traverse_htable	src/flisp/table.c	/^void print_traverse_htable(fl_context_t *fl_ctx, value_t self)$/;"	f	typeref:typename:void
print_usage	deps/srccache/patchelf-0.9/build-aux/test-driver	/^print_usage ()$/;"	f
print_without_params	base/show.jl	/^function print_without_params(@nospecialize(x))$/;"	f
print_wrapped	stdlib/Markdown/src/render/terminal/formatting.jl	/^function print_wrapped(io::IO, s...; width = 80, pre = "", i = 0)$/;"	f
print_wrapped	stdlib/Markdown/src/render/terminal/formatting.jl	/^print_wrapped(f::Function, io::IO, args...; kws...) = print_wrapped(io, f, args...; kws...)$/;"	f
printconses	src/flisp/flisp.h	/^    htable_t printconses;$/;"	m	struct:_fl_context_t	typeref:typename:htable_t
printf	base/printf.jl	/^macro printf(args...)$/;"	f
printf	stdlib/Printf/src/Printf.jl	/^macro printf(args...)$/;"	f
printf() and stdio in the Julia runtime	doc/src/devdocs/stdio.md	/^# printf() and stdio in the Julia runtime$/;"	c
printf() during initialization	doc/src/devdocs/stdio.md	/^## printf() during initialization$/;"	s
printfcmd	test/spawn.jl	/^printfcmd = `printf`$/;"	v
printlabel	src/flisp/flisp.h	/^    uint32_t printlabel;$/;"	m	struct:_fl_context_t	typeref:typename:uint32_t
printlengthsym	src/flisp/flisp.h	/^    value_t printwidthsym, printreadablysym, printprettysym, printlengthsym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
printlevelsym	src/flisp/flisp.h	/^    value_t printlevelsym, builtins_table_sym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
println	base/Base.jl	/^    println(io::IO, x...) = Core.println(io, x...)$/;"	f
println	base/boot.jl	/^println(@nospecialize a...) = println(stdout, a...)$/;"	f
println	base/boot.jl	/^println(io::IO) = (write(io, 0x0a); nothing) # 0x0a = '\\n'$/;"	f
println	base/boot.jl	/^println(io::IO, @nospecialize x...) = (print(io, x...); println(io))$/;"	f
println	base/coreio.jl	/^println(io::IO) = print(io, '\\n')$/;"	f
println	base/coreio.jl	/^println(xs...) = println(stdout::IO, xs...)$/;"	f
println	base/strings/io.jl	/^println(io::IO, xs...) = print(io, xs..., '\\n')$/;"	f
printmatch	stdlib/REPL/src/docview.jl	/^function printmatch(io::IO, word, match)$/;"	f
printmatch	stdlib/REPL/src/docview.jl	/^printmatch(args...) = printfuzzy(stdout, args...)$/;"	f
printmatches	stdlib/REPL/src/docview.jl	/^function printmatches(io::IO, word, matches; cols = displaysize(io)[2])$/;"	f
printmatches	stdlib/REPL/src/docview.jl	/^printmatches(args...; cols = displaysize(stdout)[2]) = printmatches(stdout, args..., cols = cols/;"	f
printprettysym	src/flisp/flisp.h	/^    value_t printwidthsym, printreadablysym, printprettysym, printlengthsym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
printreadablysym	src/flisp/flisp.h	/^    value_t printwidthsym, printreadablysym, printprettysym, printlengthsym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
printstyled	base/show.jl	/^function printstyled end$/;"	f
printstyled	base/util.jl	/^printstyled(io::IO, msg...; bold::Bool=false, color::Union{Int,Symbol}=:normal) =$/;"	f
printstyled	base/util.jl	/^printstyled(msg...; bold::Bool=false, color::Union{Int,Symbol}=:normal) =$/;"	f
printwidthsym	src/flisp/flisp.h	/^    value_t printwidthsym, printreadablysym, printprettysym, printlengthsym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
prio	src/julia.h	/^    int16_t prio;$/;"	m	struct:_jl_task_t	typeref:typename:int16_t
prio	src/partr.c	/^    int16_t prio;$/;"	m	struct:taskheap_tag	typeref:typename:int16_t	file:
prio	test/gcext/gcext.c	/^    size_t prio;$/;"	m	struct:treap_t	typeref:typename:size_t	file:
private_libDir	contrib/julia-config.jl	/^private_libDir() = abspath(Sys.BINDIR, Base.PRIVATE_LIBDIR)$/;"	f
private_libdir	stdlib/Libdl/test/runtests.jl	/^private_libdir = if Base.DARWIN_FRAMEWORK$/;"	v
prn	src/utils.scm	/^(define (prn x)$/;"	f
process-indices	src/julia-syntax.scm	/^(define (process-indices a i)$/;"	f
processAllocationOfResult	src/clangsa/GCChecker.cpp	/^bool GCChecker::processAllocationOfResult(const CallEvent &Call, CheckerContext &C, ProgramState/;"	f	class:GCChecker	typeref:typename:bool
processArgumentRooting	src/clangsa/GCChecker.cpp	/^bool GCChecker::processArgumentRooting(const CallEvent &Call, CheckerContext &C, ProgramStateRef/;"	f	class:GCChecker	typeref:typename:bool
processFDEs	src/debuginfo.cpp	/^static void processFDEs(const char *EHFrameAddr, size_t EHFrameSize, callback f)$/;"	f	typeref:typename:void	file:
processPotentialSafepoint	src/clangsa/GCChecker.cpp	/^bool GCChecker::processPotentialSafepoint(const CallEvent &Call, CheckerContext &C, ProgramState/;"	f	class:GCChecker	typeref:typename:bool
process_backtrace	base/errorshow.jl	/^function process_backtrace(t::Vector, limit::Int=typemax(Int); skipC = true)$/;"	f
process_batch_errors!	stdlib/Distributed/src/pmap.jl	/^function process_batch_errors!(p, f, results, on_error, retry_delays, retry_check)$/;"	f
process_events	base/libuv.jl	/^function process_events()$/;"	f
process_exited	base/process.jl	/^process_exited(s::Process) = !process_running(s)$/;"	f
process_exited	base/process.jl	/^process_exited(s::ProcessChain) = process_exited(s.processes)$/;"	f
process_exited	base/process.jl	/^process_exited(s::Vector{Process}) = all(process_exited, s)$/;"	f
process_hdr	stdlib/Distributed/src/process_messages.jl	/^function process_hdr(s, validate_cookie)$/;"	f
process_immutable_preserve	base/compiler/ssair/passes.jl	/^function process_immutable_preserve(new_preserves::Vector{Any}, compact::IncrementalCompact, def/;"	f
process_keys	src/flisp/flisp.c	/^static uint32_t process_keys(fl_context_t *fl_ctx, value_t kwtable,$/;"	f	typeref:typename:uint32_t	file:
process_messages	stdlib/Distributed/src/process_messages.jl	/^function process_messages(r_stream::IO, w_stream::IO, incoming::Bool=true)$/;"	f
process_messages	stdlib/Distributed/src/process_messages.jl	/^function process_messages(r_stream::TCPSocket, w_stream::TCPSocket, incoming::Bool=true)$/;"	f
process_newnode!	base/compiler/ssair/ir.jl	/^function process_newnode!(compact, new_idx, new_node_entry, idx, active_bb, do_rename_ssa)$/;"	f
process_node!	base/compiler/ssair/ir.jl	/^function process_node!(compact::IncrementalCompact, result::Vector{Any},$/;"	f
process_node!	base/compiler/ssair/ir.jl	/^function process_node!(compact::IncrementalCompact, result_idx::Int, @nospecialize(stmt), idx::I/;"	f
process_opts	stdlib/Distributed/src/cluster.jl	/^function process_opts(opts)$/;"	f
process_phinode_values	base/compiler/ssair/ir.jl	/^function process_phinode_values(old_values::Vector{Any}, late_fixup::Vector{Int},$/;"	f
process_running	base/process.jl	/^process_running(s::Process) = s.handle != C_NULL$/;"	f
process_running	base/process.jl	/^process_running(s::ProcessChain) = process_running(s.processes)$/;"	f
process_running	base/process.jl	/^process_running(s::Vector{Process}) = any(process_running, s)$/;"	f
process_signaled	base/process.jl	/^process_signaled(s::Process) = (s.termsignal > 0)$/;"	f
process_simple!	base/compiler/ssair/inlining.jl	/^function process_simple!(ir::IRCode, idx::Int, params::Params)$/;"	f
process_status	base/process.jl	/^function process_status(s::Process)$/;"	f
process_t0	src/gc-debug.c	/^static double process_t0;$/;"	v	typeref:typename:double	file:
process_tcp_streams	stdlib/Distributed/src/process_messages.jl	/^function process_tcp_streams(r_stream::TCPSocket, w_stream::TCPSocket, incoming::Bool)$/;"	f
procs	stdlib/Distributed/src/cluster.jl	/^function procs()$/;"	f
procs	stdlib/Distributed/src/cluster.jl	/^function procs(pid::Integer)$/;"	f
procs	stdlib/SharedArrays/src/SharedArrays.jl	/^procs(S::SharedArray) = S.pids$/;"	f
prod	base/reduce.jl	/^prod(a) = mapreduce(identity, mul_prod, a)$/;"	f
prod	base/reduce.jl	/^prod(f, a) = mapreduce(f, mul_prod, a)$/;"	f
prod	base/tuple.jl	/^prod(x::Tuple{Any, Vararg{Any}}) = *(x...)$/;"	f
prod	base/tuple.jl	/^prod(x::Tuple{}) = 1$/;"	f
prod	stdlib/Test/src/Test.jl	/^        prod(B.dims) ≠ n && (@warn("Inconsistent dims\/len: prod(dims)=$(prod(B.dims)) len=$n"/;"	f
prod2	test/reduce.jl	/^prod2(itr) = invoke(prod, Tuple{Any}, itr)$/;"	f
prod_iteratorsize	base/iterators.jl	/^prod_iteratorsize(::HasLength, ::HasLength) = HasShape{2}()$/;"	f
prod_iteratorsize	base/iterators.jl	/^prod_iteratorsize(::HasLength, ::HasShape{N}) where {N} = HasShape{N+1}()$/;"	f
prod_iteratorsize	base/iterators.jl	/^prod_iteratorsize(::HasShape{M}, ::HasShape{N}) where {M,N} = HasShape{M+N}()$/;"	f
prod_iteratorsize	base/iterators.jl	/^prod_iteratorsize(::HasShape{N}, ::HasLength) where {N} = HasShape{N+1}()$/;"	f
prod_iteratorsize	base/iterators.jl	/^prod_iteratorsize(::IsInfinite, ::IsInfinite) = IsInfinite()$/;"	f
prod_iteratorsize	base/iterators.jl	/^prod_iteratorsize(::IsInfinite, b) = IsInfinite()$/;"	f
prod_iteratorsize	base/iterators.jl	/^prod_iteratorsize(a, ::IsInfinite) = IsInfinite()$/;"	f
prod_iteratorsize	base/iterators.jl	/^prod_iteratorsize(a, b) = SizeUnknown()$/;"	f
product	base/iterators.jl	/^product(iters...) = ProductIterator(iters)$/;"	f
productarchive	contrib/mac/frameworkapp/Makefile	/^productarchive: $(PRODUCTARCHIVE)$/;"	t
profile	stdlib/Profile/src/Profile.jl	/^macro profile(ex)$/;"	f
profile-e	src/jlfrontend.scm	/^(define (profile-e s)$/;"	f
profile_bt	src/signals-win.c	/^static DWORD WINAPI profile_bt( LPVOID lparam )$/;"	f	typeref:typename:DWORD WINAPI	file:
profile_port	src/signals-mach.c	/^static mach_port_t profile_port = 0;$/;"	v	typeref:typename:mach_port_t	file:
profile_started	src/signals-mach.c	/^static int profile_started = 0;$/;"	v	typeref:typename:int	file:
profiler_segv_handler	src/signals-mach.c	/^static kern_return_t profiler_segv_handler$/;"	f	typeref:typename:kern_return_t	file:
profiler_thread	src/signals-mach.c	/^static pthread_t profiler_thread;$/;"	v	typeref:typename:pthread_t	file:
profiler_uc	src/signals-mach.c	/^static unw_context_t profiler_uc;$/;"	v	typeref:typename:unw_context_t	file:
program_details	deps/srccache/patchelf-0.9/build-aux/missing	/^program_details ()$/;"	f
program_transform_name	deps/srccache/patchelf-0.9/Makefile.in	/^program_transform_name = @program_transform_name@$/;"	m
program_transform_name	deps/srccache/patchelf-0.9/src/Makefile.in	/^program_transform_name = @program_transform_name@$/;"	m
program_transform_name	deps/srccache/patchelf-0.9/tests/Makefile.in	/^program_transform_name = @program_transform_name@$/;"	m
project	src/julia.h	/^    const char *project;$/;"	m	struct:__anon055fe4271808	typeref:typename:const char *
project_deps_get	base/loading.jl	/^function project_deps_get(env::String, name::String)::Union{Nothing,PkgId}$/;"	f
project_deps_get_completion_candidates	stdlib/REPL/src/REPLCompletions.jl	/^function project_deps_get_completion_candidates(pkgstarts::String, project_file::String)::Vector/;"	f
project_file_manifest_path	base/loading.jl	/^function project_file_manifest_path(project_file::String)::Union{Nothing,String}$/;"	f
project_file_name_uuid	base/loading.jl	/^function project_file_name_uuid(project_file::String, name::String)::PkgId$/;"	f
project_file_path	base/loading.jl	/^function project_file_path(project_file::String, name::String)::String$/;"	f
project_names	base/loading.jl	/^const project_names = ("JuliaProject.toml", "Project.toml")$/;"	v
promote	base/promotion.jl	/^function promote end$/;"	f
promote	base/promotion.jl	/^function promote(x, y)$/;"	f
promote	base/promotion.jl	/^function promote(x, y, z)$/;"	f
promote	base/promotion.jl	/^function promote(x, y, z, a...)$/;"	f
promote	base/promotion.jl	/^promote() = ()$/;"	f
promote	base/promotion.jl	/^promote(x) = (x,)$/;"	f
promote	base/promotion.jl	/^promote(x::T, y::T, zs::T...) where {T} = (x, y, zs...)$/;"	f
promoteK	base/abstractdict.jl	/^promoteK(K) = K$/;"	f
promoteK	base/abstractdict.jl	/^promoteK(K, d, ds...) = promoteK(promote_type(K, keytype(d)), ds...)$/;"	f
promoteV	base/abstractdict.jl	/^promoteV(V) = V$/;"	f
promoteV	base/abstractdict.jl	/^promoteV(V, d, ds...) = promoteV(promote_type(V, valtype(d)), ds...)$/;"	f
promote_eltype	base/abstractarray.jl	/^promote_eltype() = Bottom$/;"	f
promote_eltype	base/abstractarray.jl	/^promote_eltype(v1, vs...) = promote_type(eltype(v1), promote_eltype(vs...))$/;"	f
promote_eltype_op	base/deprecated.jl	/^function promote_eltype_op end$/;"	f
promote_eltypeof	base/abstractarray.jl	/^promote_eltypeof() = Bottom$/;"	f
promote_eltypeof	base/abstractarray.jl	/^promote_eltypeof(v1, vs...) = promote_type(eltypeof(v1), promote_eltypeof(vs...))$/;"	f
promote_leaf_eltypes	stdlib/LinearAlgebra/src/generic.jl	/^promote_leaf_eltypes(x::T) where {T} = T$/;"	f
promote_leaf_eltypes	stdlib/LinearAlgebra/src/generic.jl	/^promote_leaf_eltypes(x::Union{AbstractArray,Tuple}) = mapreduce(promote_leaf_eltypes, promote_ty/;"	f
promote_leaf_eltypes	stdlib/LinearAlgebra/src/generic.jl	/^promote_leaf_eltypes(x::Union{AbstractArray{T},Tuple{T,Vararg{T}}}) where {T<:NumberArray} = elt/;"	f
promote_leaf_eltypes	stdlib/LinearAlgebra/src/generic.jl	/^promote_leaf_eltypes(x::Union{AbstractArray{T},Tuple{T,Vararg{T}}}) where {T<:Number} = T$/;"	f
promote_op	base/promotion.jl	/^promote_op(f, S::Type...) = _return_type(f, Tuple{S...})$/;"	f
promote_result	base/promotion.jl	/^promote_result(::Type{<:Any},::Type{<:Any},::Type{T},::Type{S}) where {T,S} = (@_inline_meta; pr/;"	f
promote_result	base/promotion.jl	/^promote_result(::Type{T},::Type{S},::Type{Bottom},::Type{Bottom}) where {T,S} = (@_inline_meta; /;"	f
promote_rule	base/array.jl	/^promote_rule(a::Type{Array{T,n}}, b::Type{Array{S,n}}) where {T,n,S} = el_same(promote_type(T,S)/;"	f
promote_rule	base/bool.jl	/^promote_rule(::Type{Bool}, ::Type{T}) where {T<:Number} = T$/;"	f
promote_rule	base/complex.jl	/^promote_rule(::Type{Complex{T}}, ::Type{Complex{S}}) where {T<:Real,S<:Real} =$/;"	f
promote_rule	base/complex.jl	/^promote_rule(::Type{Complex{T}}, ::Type{S}) where {T<:Real,S<:Real} =$/;"	f
promote_rule	base/float.jl	/^            promote_rule(::Type{$t1}, ::Type{$st}) = $t1$/;"	f
promote_rule	base/float.jl	/^            promote_rule(::Type{$t1}, ::Type{$ut}) = $t1$/;"	f
promote_rule	base/float.jl	/^    @eval promote_rule(::Type{Float16}, ::Type{$t}) = Float16$/;"	f
promote_rule	base/float.jl	/^promote_rule(::Type{Float16}, ::Type{Bool}) = Float16$/;"	f
promote_rule	base/float.jl	/^promote_rule(::Type{Float32}, ::Type{Float16}) = Float32$/;"	f
promote_rule	base/float.jl	/^promote_rule(::Type{Float32}, ::Type{Int128}) = Float32$/;"	f
promote_rule	base/float.jl	/^promote_rule(::Type{Float32}, ::Type{UInt128}) = Float32$/;"	f
promote_rule	base/float.jl	/^promote_rule(::Type{Float64}, ::Type{Float16}) = Float64$/;"	f
promote_rule	base/float.jl	/^promote_rule(::Type{Float64}, ::Type{Float32}) = Float64$/;"	f
promote_rule	base/float.jl	/^promote_rule(::Type{Float64}, ::Type{Int128}) = Float64$/;"	f
promote_rule	base/float.jl	/^promote_rule(::Type{Float64}, ::Type{UInt128}) = Float64$/;"	f
promote_rule	base/gmp.jl	/^promote_rule(::Type{BigInt}, ::Type{<:Integer}) = BigInt$/;"	f
promote_rule	base/indices.jl	/^promote_rule(::Type{LinearIndices{N,R1}}, ::Type{LinearIndices{N,R2}}) where {N,R1,R2} =$/;"	f
promote_rule	base/int.jl	/^promote_rule(::Type{Int128}, ::Union{Type{Int16}, Type{Int32}, Type{Int64}, Type{Int8}, Type{UIn/;"	f
promote_rule	base/int.jl	/^promote_rule(::Type{Int16}, ::Union{Type{Int8}, Type{UInt8}}) = Int16$/;"	f
promote_rule	base/int.jl	/^promote_rule(::Type{Int32}, ::Union{Type{Int16}, Type{Int8}, Type{UInt16}, Type{UInt8}}) = Int32$/;"	f
promote_rule	base/int.jl	/^promote_rule(::Type{Int64}, ::Union{Type{Int16}, Type{Int32}, Type{Int8}, Type{UInt16}, Type{UIn/;"	f
promote_rule	base/int.jl	/^promote_rule(::Type{UInt128}, ::Type{Int128}) = UInt128$/;"	f
promote_rule	base/int.jl	/^promote_rule(::Type{UInt128}, ::Union{Type{Int16}, Type{Int32}, Type{Int64}, Type{Int8}, Type{UI/;"	f
promote_rule	base/int.jl	/^promote_rule(::Type{UInt16},  ::Type{Int16} ) = UInt16$/;"	f
promote_rule	base/int.jl	/^promote_rule(::Type{UInt16}, ::Union{Type{Int8}, Type{UInt8}}) = UInt16$/;"	f
promote_rule	base/int.jl	/^promote_rule(::Type{UInt32},  ::Type{Int32} ) = UInt32$/;"	f
promote_rule	base/int.jl	/^promote_rule(::Type{UInt32}, ::Union{Type{Int16}, Type{Int8}, Type{UInt16}, Type{UInt8}}) = UInt/;"	f
promote_rule	base/int.jl	/^promote_rule(::Type{UInt64},  ::Type{Int64} ) = UInt64$/;"	f
promote_rule	base/int.jl	/^promote_rule(::Type{UInt64}, ::Union{Type{Int16}, Type{Int32}, Type{Int8}, Type{UInt16}, Type{UI/;"	f
promote_rule	base/int.jl	/^promote_rule(::Type{UInt8},   ::Type{Int8}  ) = UInt8$/;"	f
promote_rule	base/irrationals.jl	/^promote_rule(::Type{<:AbstractIrrational}, ::Type{<:AbstractIrrational}) = Float64$/;"	f
promote_rule	base/irrationals.jl	/^promote_rule(::Type{<:AbstractIrrational}, ::Type{Float16}) = Float16$/;"	f
promote_rule	base/irrationals.jl	/^promote_rule(::Type{<:AbstractIrrational}, ::Type{Float32}) = Float32$/;"	f
promote_rule	base/irrationals.jl	/^promote_rule(::Type{<:AbstractIrrational}, ::Type{T}) where {T<:Real} = promote_type(Float64, T)$/;"	f
promote_rule	base/irrationals.jl	/^promote_rule(::Type{S}, ::Type{T}) where {S<:AbstractIrrational,T<:Number} = promote_type(promot/;"	f
promote_rule	base/missing.jl	/^function promote_rule(T::Type{>:Missing}, S::Type)$/;"	f
promote_rule	base/missing.jl	/^function promote_rule(T::Type{>:Union{Nothing, Missing}}, S::Type)$/;"	f
promote_rule	base/missing.jl	/^promote_rule(T::Type{Missing}, S::Type) = Union{S, Missing}$/;"	f
promote_rule	base/missing.jl	/^promote_rule(T::Type{Union{Nothing, Missing}}, S::Type) = Union{S, Nothing, Missing}$/;"	f
promote_rule	base/mpfr.jl	/^promote_rule(::Type{BigFloat}, ::Type{<:AbstractFloat}) = BigFloat$/;"	f
promote_rule	base/mpfr.jl	/^promote_rule(::Type{BigFloat}, ::Type{<:Real}) = BigFloat$/;"	f
promote_rule	base/mpfr.jl	/^promote_rule(::Type{BigInt}, ::Type{<:AbstractFloat}) = BigFloat$/;"	f
promote_rule	base/multidimensional.jl	/^    promote_rule(::Type{CartesianIndices{N,R1}}, ::Type{CartesianIndices{N,R2}}) where {N,R1,R2}/;"	f
promote_rule	base/pair.jl	/^promote_rule(::Type{Pair{A1,B1}}, ::Type{Pair{A2,B2}}) where {A1,B1,A2,B2} =$/;"	f
promote_rule	base/promotion.jl	/^function promote_rule end$/;"	f
promote_rule	base/promotion.jl	/^promote_rule(::Type{<:Any}, ::Type{<:Any}) = Bottom$/;"	f
promote_rule	base/range.jl	/^promote_rule(::Type{LinRange{L}}, b::Type{StepRangeLen{T,R,S}}) where {L,T,R,S} =$/;"	f
promote_rule	base/range.jl	/^promote_rule(::Type{StepRangeLen{T1,R1,S1}},::Type{StepRangeLen{T2,R2,S2}}) where {T1,T2,R1,R2,S/;"	f
promote_rule	base/range.jl	/^promote_rule(::Type{StepRange{T1a,T1b}}, ::Type{StepRange{T2a,T2b}}) where {T1a,T1b,T2a,T2b} =$/;"	f
promote_rule	base/range.jl	/^promote_rule(a::Type{LinRange{T1}}, b::Type{LinRange{T2}}) where {T1,T2} =$/;"	f
promote_rule	base/range.jl	/^promote_rule(a::Type{LinRange{T}}, ::Type{OR}) where {T,OR<:OrdinalRange} =$/;"	f
promote_rule	base/range.jl	/^promote_rule(a::Type{OneTo{T1}}, b::Type{OneTo{T2}}) where {T1,T2} =$/;"	f
promote_rule	base/range.jl	/^promote_rule(a::Type{StepRangeLen{T,R,S}}, ::Type{OR}) where {T,R,S,OR<:AbstractRange} =$/;"	f
promote_rule	base/range.jl	/^promote_rule(a::Type{StepRange{T1a,T1b}}, ::Type{UR}) where {T1a,T1b,UR<:AbstractUnitRange} =$/;"	f
promote_rule	base/range.jl	/^promote_rule(a::Type{UnitRange{T1}}, ::Type{UR}) where {T1,UR<:AbstractUnitRange} =$/;"	f
promote_rule	base/range.jl	/^promote_rule(a::Type{UnitRange{T1}}, b::Type{UnitRange{T2}}) where {T1,T2} =$/;"	f
promote_rule	base/rational.jl	/^promote_rule(::Type{Rational{T}}, ::Type{Rational{S}}) where {T<:Integer,S<:Integer} = Rational{/;"	f
promote_rule	base/rational.jl	/^promote_rule(::Type{Rational{T}}, ::Type{S}) where {T<:Integer,S<:AbstractFloat} = promote_type(/;"	f
promote_rule	base/rational.jl	/^promote_rule(::Type{Rational{T}}, ::Type{S}) where {T<:Integer,S<:Integer} = Rational{promote_ty/;"	f
promote_rule	base/some.jl	/^function promote_rule(T::Type{>:Nothing}, S::Type)$/;"	f
promote_rule	base/some.jl	/^promote_rule(::Type{Some{T}}, ::Type{Some{S}}) where {T, S<:T} = Some{T}$/;"	f
promote_rule	base/some.jl	/^promote_rule(T::Type{Nothing}, S::Type) = Union{S, Nothing}$/;"	f
promote_rule	base/twiceprecision.jl	/^promote_rule(::Type{TwicePrecision{R}}, ::Type{S}) where {R,S<:Number} =$/;"	f
promote_rule	base/twiceprecision.jl	/^promote_rule(::Type{TwicePrecision{R}}, ::Type{TwicePrecision{S}}) where {R,S} =$/;"	f
promote_rule	stdlib/LinearAlgebra/src/bidiag.jl	/^promote_rule(::Type{<:Tridiagonal{T}}, ::Type{<:Bidiagonal{S}}) where {T,S} =$/;"	f
promote_rule	stdlib/LinearAlgebra/src/bidiag.jl	/^promote_rule(::Type{<:Tridiagonal}, ::Type{<:Bidiagonal}) = Tridiagonal$/;"	f
promote_rule	stdlib/LinearAlgebra/src/bidiag.jl	/^promote_rule(::Type{Matrix{T}}, ::Type{<:Bidiagonal{S}}) where {T,S} =$/;"	f
promote_rule	stdlib/LinearAlgebra/src/bidiag.jl	/^promote_rule(::Type{Matrix}, ::Type{<:Bidiagonal}) = Matrix$/;"	f
promote_rule	test/core.jl	/^promote_rule(A::Type{SIQ{T,T2}},B::Type{SIQ{S,S2}}) where {T,T2,S,S2} = SIQ{promote_type(T,S)}$/;"	f
promote_rule	test/math.jl	/^promote_rule(::Type{FloatWrapper}, ::Type{Int}) = FloatWrapper$/;"	f
promote_shape	base/indices.jl	/^function promote_shape(a::AbstractArray, b::AbstractArray)$/;"	f
promote_shape	base/indices.jl	/^function promote_shape(a::Dims, b::Dims)$/;"	f
promote_shape	base/indices.jl	/^function promote_shape(a::Indices, b::Indices)$/;"	f
promote_shape	base/indices.jl	/^function promote_shape(a::Tuple{Int, Int}, b::Tuple{Int, Int})$/;"	f
promote_shape	base/indices.jl	/^function promote_shape(a::Tuple{Int,Int}, b::Tuple{Int,})$/;"	f
promote_shape	base/indices.jl	/^function promote_shape(a::Tuple{Int,}, b::Tuple{Int,})$/;"	f
promote_shape	base/indices.jl	/^promote_shape(::Tuple{}, ::Tuple{}) = ()$/;"	f
promote_shape	base/indices.jl	/^promote_shape(a::Tuple{Int,}, b::Tuple{Int,Int}) = promote_shape(b, a)$/;"	f
promote_to_array_type	stdlib/LinearAlgebra/src/uniformscaling.jl	/^promote_to_array_type(A::Tuple{Vararg{Union{AbstractVecOrMat,UniformScaling}}}) = Matrix$/;"	f
promote_to_array_type	stdlib/SparseArrays/src/sparsevector.jl	/^promote_to_array_type(A::Tuple{Vararg{Union{_DenseConcatGroup,UniformScaling}}}) = Matrix$/;"	f
promote_to_array_type	stdlib/SparseArrays/src/sparsevector.jl	/^promote_to_array_type(A::Tuple{Vararg{Union{_SparseConcatGroup,UniformScaling}}}) = SparseMatrix/;"	f
promote_to_arrays	stdlib/LinearAlgebra/src/uniformscaling.jl	/^promote_to_arrays(n,k, ::Type) = ()$/;"	f
promote_to_arrays	stdlib/LinearAlgebra/src/uniformscaling.jl	/^promote_to_arrays(n,k, ::Type{T}, A) where {T} = (promote_to_arrays_(n[k], T, A),)$/;"	f
promote_to_arrays	stdlib/LinearAlgebra/src/uniformscaling.jl	/^promote_to_arrays(n,k, ::Type{T}, A, B) where {T} =$/;"	f
promote_to_arrays	stdlib/LinearAlgebra/src/uniformscaling.jl	/^promote_to_arrays(n,k, ::Type{T}, A, B, C) where {T} =$/;"	f
promote_to_arrays	stdlib/LinearAlgebra/src/uniformscaling.jl	/^promote_to_arrays(n,k, ::Type{T}, A, B, Cs...) where {T} =$/;"	f
promote_to_arrays_	stdlib/LinearAlgebra/src/uniformscaling.jl	/^promote_to_arrays_(n::Int, ::Type, A::AbstractVecOrMat) = A$/;"	f
promote_to_arrays_	stdlib/LinearAlgebra/src/uniformscaling.jl	/^promote_to_arrays_(n::Int, ::Type{Matrix}, J::UniformScaling{T}) where {T} = copyto!(Matrix{T}(u/;"	f
promote_to_arrays_	stdlib/SparseArrays/src/sparsevector.jl	/^promote_to_arrays_(n::Int, ::Type{SparseMatrixCSC}, J::UniformScaling) = sparse(J, n, n)$/;"	f
promote_type	base/promotion.jl	/^function promote_type end$/;"	f
promote_type	base/promotion.jl	/^function promote_type(::Type{T}, ::Type{S}) where {T,S}$/;"	f
promote_type	base/promotion.jl	/^promote_type()  = Bottom$/;"	f
promote_type	base/promotion.jl	/^promote_type(::Type{Bottom}, ::Type{Bottom}) = Bottom$/;"	f
promote_type	base/promotion.jl	/^promote_type(::Type{Bottom}, ::Type{T}) where {T} = T$/;"	f
promote_type	base/promotion.jl	/^promote_type(::Type{T}, ::Type{Bottom}) where {T} = T$/;"	f
promote_type	base/promotion.jl	/^promote_type(::Type{T}, ::Type{T}) where {T} = T$/;"	f
promote_type	base/promotion.jl	/^promote_type(T) = T$/;"	f
promote_type	base/promotion.jl	/^promote_type(T, S, U, V...) = (@_inline_meta; promote_type(T, promote_type(S, U, V...)))$/;"	f
promote_typejoin	base/promotion.jl	/^promote_typejoin(@nospecialize(a), @nospecialize(b)) = _promote_typejoin(a, b)::Type$/;"	f
promote_typeof	base/promotion.jl	/^promote_typeof(x) = typeof(x)$/;"	f
promote_typeof	base/promotion.jl	/^promote_typeof(x, xs...) = (@_inline_meta; promote_type(typeof(x), promote_typeof(xs...)))$/;"	f
promote_union	base/reducedim.jl	/^promote_union(T) = T$/;"	f
promote_union	base/reducedim.jl	/^promote_union(T::Union) = promote_type(promote_union(T.a), promote_union(T.b))$/;"	f
promote_valuetype	base/set.jl	/^promote_valuetype(x::Pair{K, V}) where {K, V} = V$/;"	f
promote_valuetype	base/set.jl	/^promote_valuetype(x::Pair{K, V}, y::Pair...) where {K, V} =$/;"	f
promoted_bytes	src/gc.c	/^static int64_t promoted_bytes = 0;$/;"	v	typeref:typename:int64_t	file:
prompt	base/util.jl	/^function prompt(input::IO, output::IO, message::AbstractString; default::AbstractString="")$/;"	f
prompt	base/util.jl	/^prompt(message::AbstractString; default::AbstractString="") = prompt(stdin, stdout, message, def/;"	f
prompt!	stdlib/REPL/src/LineEdit.jl	/^function prompt!(term::TextTerminal, prompt::ModalInterface, s::MIState = init_state(term, promp/;"	f
prompt_limit	stdlib/LibGit2/src/callbacks.jl	/^function prompt_limit()$/;"	f
prompt_string	stdlib/REPL/src/LineEdit.jl	/^prompt_string(f::Function) = Base.invokelatest(f)$/;"	f
prompt_string	stdlib/REPL/src/LineEdit.jl	/^prompt_string(p::Prompt) = prompt_string(p.prompt)$/;"	f
prompt_string	stdlib/REPL/src/LineEdit.jl	/^prompt_string(s::AbstractString) = s$/;"	f
prompt_string	stdlib/REPL/src/LineEdit.jl	/^prompt_string(s::PrefixSearchState) = prompt_string(s.histprompt.parent_prompt.prompt)$/;"	f
prompt_string	stdlib/REPL/src/LineEdit.jl	/^prompt_string(s::PromptState) = prompt_string(s.p)$/;"	f
propagateArgumentRootedness	src/clangsa/GCChecker.cpp	/^bool GCChecker::propagateArgumentRootedness(CheckerContext &C, ProgramStateRef &State) const {$/;"	f	class:GCChecker	typeref:typename:bool
propagate_inbounds	base/expr.jl	/^macro propagate_inbounds(ex)$/;"	f
propagate_inbounds	src/julia.h	/^    uint8_t propagate_inbounds;$/;"	m	struct:_jl_code_info_t	typeref:typename:uint8_t
propagate_inbounds_sym	src/ast.c	/^jl_sym_t *propagate_inbounds_sym; jl_sym_t *specialize_sym;$/;"	v	typeref:typename:jl_sym_t *
propertynames	base/reflection.jl	/^propertynames(m::Module) = names(m)$/;"	f
propertynames	base/reflection.jl	/^propertynames(x) = fieldnames(typeof(x))$/;"	f
propertynames	base/reflection.jl	/^propertynames(x, private) = propertynames(x) # ignore private flag by default$/;"	f
protect_page	src/cgmemmgr.cpp	/^static void protect_page(void *ptr, size_t size, Prot flags)$/;"	f	namespace:__anon06c686bc0111	typeref:typename:void	file:
prt	src/ccall.cpp	/^    Type *prt; \/\/ out parameter of the llvm return type for the function signature$/;"	m	class:function_sig_t	typeref:typename:Type *	file:
ps	deps/srccache/patchelf-0.9/Makefile.in	/^ps: ps-recursive$/;"	t
ps	deps/srccache/patchelf-0.9/src/Makefile.in	/^ps: ps-am$/;"	t
ps	deps/srccache/patchelf-0.9/tests/Makefile.in	/^ps: ps-am$/;"	t
ps-am	deps/srccache/patchelf-0.9/Makefile.in	/^ps-am:$/;"	t
ps-am	deps/srccache/patchelf-0.9/src/Makefile.in	/^ps-am:$/;"	t
ps-am	deps/srccache/patchelf-0.9/tests/Makefile.in	/^ps-am:$/;"	t
psdir	deps/srccache/patchelf-0.9/Makefile.in	/^psdir = @psdir@$/;"	m
psdir	deps/srccache/patchelf-0.9/src/Makefile.in	/^psdir = @psdir@$/;"	m
psdir	deps/srccache/patchelf-0.9/tests/Makefile.in	/^psdir = @psdir@$/;"	m
psep	test/spawn.jl	/^psep = if Sys.iswindows() ";" else ":" end$/;"	v
pstrf!	stdlib/LinearAlgebra/src/lapack.jl	/^        function pstrf!(uplo::AbstractChar, A::AbstractMatrix{$elty}, tol::Real)$/;"	f
ptls	src/dump.c	/^    jl_ptls_t ptls;$/;"	m	struct:__anon570497e30108	typeref:typename:jl_ptls_t	file:
ptls	src/staticdata.c	/^    jl_ptls_t ptls;$/;"	m	struct:__anonc3a2e68f0108	typeref:typename:jl_ptls_t	file:
ptls	test/gcext/gcext.c	/^static jl_ptls_t ptls;$/;"	v	typeref:typename:jl_ptls_t	file:
ptlsStates	src/codegen.cpp	/^    CallInst *ptlsStates = NULL;$/;"	m	class:jl_codectx_t	typeref:typename:CallInst *	file:
ptlsStates	src/llvm-final-gc-lowering.cpp	/^    CallInst *ptlsStates;$/;"	m	struct:FinalLowerGC	typeref:typename:CallInst *	file:
ptlsStates	src/llvm-late-gc-lowering.cpp	/^    CallInst *ptlsStates;$/;"	m	struct:LateLowerGCFrame	typeref:typename:CallInst *	file:
ptls_getter	src/llvm-pass-helpers.h	/^    llvm::Function *ptls_getter;$/;"	m	struct:JuliaPassContext	typeref:typename:llvm::Function *
ptls_getter	src/llvm-ptls.cpp	/^    Function *ptls_getter;$/;"	m	struct:__anonf46923380111::LowerPTLS	typeref:typename:Function *	file:
ptls_offset	src/llvm-ptls.cpp	/^    GlobalVariable *ptls_offset{nullptr};$/;"	m	struct:__anonf46923380111::LowerPTLS	typeref:typename:GlobalVariable *	file:
ptls_slot	src/llvm-ptls.cpp	/^    GlobalVariable *ptls_slot{nullptr};$/;"	m	struct:__anonf46923380111::LowerPTLS	typeref:typename:GlobalVariable *	file:
ptr	src/cgmemmgr.cpp	/^    char *ptr{nullptr};$/;"	m	struct:__anon06c686bc0111::Block	typeref:typename:char *	file:
ptr	src/flisp/flisp.h	/^#define ptr(/;"	d
ptr18236	test/core.jl	/^ptr18236 = @cfunction(identity, VecElement{Float64}, (VecElement{Float64},))$/;"	v
ptr18236_2	test/core.jl	/^ptr18236_2 = @cfunction(identity, VecElement{NTuple{2,Int8}},$/;"	v
ptr22734	test/ccall.jl	/^ptr22734 = @cfunction(cb22734, Float64, (Ptr{Cvoid},))$/;"	v
ptr_from_objref	src/llvm-alloc-opt.cpp	/^    Function *ptr_from_objref;$/;"	m	struct:__anon0a1571000111::AllocOpt	typeref:typename:Function *	file:
ptrarray	src/julia.h	/^    uint16_t ptrarray:1;  \/\/ representation is pointer array$/;"	m	struct:__anon055fe4270308	typeref:typename:uint16_t:1
ptrdiffsym	src/flisp/flisp.h	/^    value_t ptrdiffsym, sizesym, bytesym, wcharsym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
ptrdifftype	src/flisp/flisp.h	/^    fltype_t *ptrdifftype, *sizetype;$/;"	m	struct:_fl_context_t	typeref:typename:fltype_t *
ptsv!	stdlib/LinearAlgebra/src/lapack.jl	/^        function ptsv!(D::AbstractVector{$relty}, E::AbstractVector{$elty}, B::AbstractVecOrMat{/;"	f
pttrf!	stdlib/LinearAlgebra/src/lapack.jl	/^        function pttrf!(D::AbstractVector{$relty}, E::AbstractVector{$elty})$/;"	f
pttrs!	stdlib/LinearAlgebra/src/lapack.jl	/^        function pttrs!(D::AbstractVector{$relty}, E::AbstractVector{$elty}, B::AbstractVecOrMat/;"	f
pttrs!	stdlib/LinearAlgebra/src/lapack.jl	/^        function pttrs!(uplo::AbstractChar, D::AbstractVector{$relty}, E::AbstractVector{$elty},/;"	f
public.filename-extension	contrib/mac/frameworkapp/JuliaLauncher/Info.plist	/^				<key>public.filename-extension<\/key>$/;"	k	key:UTExportedTypeDeclarations.UTTypeTagSpecification
public_header_target	src/Makefile	/^define public_header_target$/;"	m
pure	base/expr.jl	/^macro pure(ex)$/;"	f
pure	src/julia.h	/^    uint8_t pure;$/;"	m	struct:_jl_code_info_t	typeref:typename:uint8_t
pure	src/julia.h	/^    uint8_t pure;$/;"	m	struct:_jl_method_t	typeref:typename:uint8_t
pure_eval_call	base/compiler/abstractinterpretation.jl	/^function pure_eval_call(@nospecialize(f), argtypes::Vector{Any}, @nospecialize(atype), sv::Infer/;"	f
pure_sym	src/ast.c	/^jl_sym_t *pure_sym; jl_sym_t *loopinfo_sym;$/;"	v	typeref:typename:jl_sym_t *
push	stdlib/LibGit2/src/LibGit2.jl	/^function push(repo::GitRepo; remote::AbstractString="origin",$/;"	f
push	stdlib/LibGit2/src/remote.jl	/^function push(rmt::GitRemote, refspecs::Vector{<:AbstractString};$/;"	f
push	test/gcext/LocalTest.jl	/^function push(stack :: Stack, val :: String)$/;"	f
push!	base/Enums.jl	/^            push!(blk.args, :(const $(esc(sym)) = $(esc(typename))($i)))$/;"	f
push!	base/abstractarray.jl	/^push!(A, a, b) = push!(push!(A, a), b)$/;"	f
push!	base/abstractarray.jl	/^push!(A, a, b, c...) = push!(push!(A, a, b), c...)$/;"	f
push!	base/abstractdict.jl	/^push!(s::IdSet, @nospecialize(x)) = (s.dict[x] = nothing; s)$/;"	f
push!	base/abstractdict.jl	/^push!(t::AbstractDict, p::Pair) = setindex!(t, p.second, p.first)$/;"	f
push!	base/abstractdict.jl	/^push!(t::AbstractDict, p::Pair, q::Pair) = push!(push!(t, p), q)$/;"	f
push!	base/abstractdict.jl	/^push!(t::AbstractDict, p::Pair, q::Pair, r::Pair...) = push!(push!(push!(t, p), q), r...)$/;"	f
push!	base/array.jl	/^function push! end$/;"	f
push!	base/array.jl	/^function push!(a::Array{Any,1}, @nospecialize item)$/;"	f
push!	base/array.jl	/^function push!(a::Array{T,1}, item) where T$/;"	f
push!	base/array.jl	/^push!(a::AbstractVector, iter...) = append!(a, iter)$/;"	f
push!	base/bitarray.jl	/^function push!(B::BitVector, item)$/;"	f
push!	base/bitset.jl	/^@inline push!(s::BitSet, n::Integer) = _setint!(s, _check_bitset_bounds(n), true)$/;"	f
push!	base/bitset.jl	/^push!(s::BitSet, ns::Integer...) = (for n in ns; push!(s, n); end; s)$/;"	f
push!	base/channels.jl	/^push!(c::Channel, v) = put!(c, v)$/;"	f
push!	base/env.jl	/^push!(::EnvDict, kv::Pair{<:AbstractString}) = setindex!(ENV, kv.second, kv.first)$/;"	f
push!	base/expr.jl	/^        push!(blk.args, :($(esc(name)) = gensym($(string(name)))))$/;"	f
push!	base/linked_list.jl	/^function push!(q::InvasiveLinkedList{T}, val::T) where T$/;"	f
push!	base/linked_list.jl	/^push!(q::LinkedList{T}, val::T) where {T} = push!(q, LinkedListItem{T}(val))$/;"	f
push!	base/loading.jl	/^        push!(modules, PkgId(uuid, sym) => build_id)$/;"	f
push!	base/loading.jl	/^        push!(required_modules, PkgId(uuid, sym) => build_id)$/;"	f
push!	base/printf.jl	/^        push!(blk.args, :((do_out, args) = $fn(out,$x, $flags, $width, $precision, $c, buf)))$/;"	f
push!	base/printf.jl	/^        push!(blk.args, :((do_out, args) = $fn(out,$x,$ndigits, $flags, $width, $precision, $c, /;"	f
push!	base/printf.jl	/^    push!(blk.args, :((do_out, args) = $fn(out, $x, $flags, $width, $precision, $c, buf)))$/;"	f
push!	base/printf.jl	/^    push!(blk.args, :((do_out, args) = fix_dec(out, $x, $flags, $width, $precision, $c, buf)))$/;"	f
push!	base/printf.jl	/^    push!(blk.args, :((do_out, args) = ini_dec(out,$x,$ndigits, $flags, $width, $precision, $c, /;"	f
push!	base/printf.jl	/^    push!(blk.args, :((len, exp, neg) = args))$/;"	f
push!	base/printf.jl	/^    push!(blk.args, :((len, pt, neg) = args))$/;"	f
push!	base/printf.jl	/^    push!(eblk.args, :($(var.args[1]) = $x))$/;"	f
push!	base/printf.jl	/^    push!(fblk.args, :((do_out, args) = fix_dec(out, $x, $flags, $width, fprec, $c - 1, buf)))$/;"	f
push!	base/set.jl	/^push!(s::Set, x) = (s.dict[x] = nothing; s)$/;"	f
push!	base/task.jl	/^function push!(W::InvasiveLinkedListSynchronized{T}, t::T) where T$/;"	f
push!	base/task.jl	/^push!(c::CompositeException, ex) = push!(c.exceptions, ex)$/;"	f
push!	stdlib/LibGit2/src/walker.jl	/^function push!(w::GitRevWalker, cid::GitHash)$/;"	f
push!	stdlib/LibGit2/src/walker.jl	/^function push!(w::GitRevWalker, range::AbstractString)$/;"	f
pushGCFrame	src/llvm-pass-helpers.cpp	/^    const IntrinsicDescription pushGCFrame($/;"	v	namespace:jl_intrinsics	typeref:typename:const IntrinsicDescription
pushInstruction	src/llvm-alloc-opt.cpp	/^void Optimizer::pushInstruction(Instruction *I)$/;"	f	class:__anon0a1571000111::Optimizer	typeref:typename:void
push_head!	stdlib/LibGit2/src/walker.jl	/^function push_head!(w::GitRevWalker)$/;"	f
push_kill!	stdlib/REPL/src/LineEdit.jl	/^function push_kill!(s::MIState, killed::String, concat = s.key_repeats > 0; rev=false)$/;"	f
push_refspecs	stdlib/LibGit2/src/remote.jl	/^function push_refspecs(rmt::GitRemote)$/;"	f
push_testset	stdlib/Test/src/Test.jl	/^function push_testset(ts::AbstractTestSet)$/;"	f
push_undo	stdlib/REPL/src/LineEdit.jl	/^function push_undo(s::PromptState, advance=true)$/;"	f
push_undo	stdlib/REPL/src/LineEdit.jl	/^push_undo(s) = nothing$/;"	f
push_url	stdlib/LibGit2/src/remote.jl	/^function push_url(rmt::GitRemote)$/;"	f
push_widen	base/array.jl	/^function push_widen(dest, el)$/;"	f
pushargs_as_args	test/clangsa/MissingRoots.c	/^void pushargs_as_args()$/;"	f	typeref:typename:void
pushargs_roots	test/clangsa/MissingRoots.c	/^int pushargs_roots() {$/;"	f	typeref:typename:int
pushargs_roots_freed	test/clangsa/MissingRoots.c	/^int pushargs_roots_freed() {$/;"	f	typeref:typename:int
pushdisplay	base/multimedia.jl	/^function pushdisplay(d::AbstractDisplay)$/;"	f
pushfirst!	base/abstractarray.jl	/^pushfirst!(A, a, b) = pushfirst!(pushfirst!(A, b), a)$/;"	f
pushfirst!	base/abstractarray.jl	/^pushfirst!(A, a, b, c...) = pushfirst!(pushfirst!(A, c...), a, b)$/;"	f
pushfirst!	base/array.jl	/^function pushfirst!(a::Array{T,1}, item) where T$/;"	f
pushfirst!	base/array.jl	/^pushfirst!(a::Vector, iter...) = prepend!(a, iter)$/;"	f
pushfirst!	base/bitarray.jl	/^function pushfirst!(B::BitVector, item)$/;"	f
pushfirst!	base/linked_list.jl	/^function pushfirst!(q::InvasiveLinkedList{T}, val::T) where T$/;"	f
pushfirst!	base/linked_list.jl	/^pushfirst!(q::LinkedList{T}, val::T) where {T} = pushfirst!(q, LinkedListItem{T}(val))$/;"	f
pushfirst!	base/task.jl	/^function pushfirst!(W::InvasiveLinkedListSynchronized{T}, t::T) where T$/;"	f
pushitem!	stdlib/Markdown/src/Common/block.jl	/^pushitem!(list, buffer) = push!(list.items, parse(String(take!(buffer))).content)$/;"	f
pushmeta!	base/expr.jl	/^function pushmeta!(ex::Expr, sym::Symbol, args::Any...)$/;"	f
put!	base/channels.jl	/^function put!(c::Channel{T}, v) where T$/;"	f
put!	stdlib/Distributed/src/remotecall.jl	/^function put!(rr::Future, v)$/;"	f
put!	stdlib/Distributed/src/remotecall.jl	/^put!(rr::RemoteChannel, args...) = (call_on_owner(put_ref, rr, myid(), args...); rr)$/;"	f
put!	stdlib/Distributed/src/remotecall.jl	/^put!(rv::RemoteValue, args...) = put!(rv.c, args...)$/;"	f
put_8x8_chunk	stdlib/LinearAlgebra/src/bitarray.jl	/^function put_8x8_chunk(Bc::Vector{UInt64}, i1::Int, i2::Int, x::UInt64, m::Int, cgap::Int, cinc:/;"	f
put_buffered	base/channels.jl	/^function put_buffered(c::Channel, v)$/;"	f
put_future	stdlib/Distributed/src/remotecall.jl	/^function put_future(rid, v, caller)$/;"	f
put_n_take!	test/worlds.jl	/^function put_n_take!(v...)$/;"	f
put_ref	stdlib/Distributed/src/remotecall.jl	/^function put_ref(rid, caller, args...)$/;"	f
put_unbuffered	base/channels.jl	/^function put_unbuffered(c::Channel, v)$/;"	f
pwd	base/file.jl	/^function pwd()$/;"	f
pwd_	test/file.jl	/^pwd_ = pwd()$/;"	v
pwrite_addr	src/cgmemmgr.cpp	/^ssize_t pwrite_addr(int fd, const void *buf, size_t nbyte, uintptr_t addr)$/;"	f	namespace:__anon06c686bc0111	typeref:typename:ssize_t
qbound	base/ryu/utils.jl	/^qbound(::Type{Float16}) = 15$/;"	f
qbound	base/ryu/utils.jl	/^qbound(::Type{Float32}) = 31$/;"	f
qbound	base/ryu/utils.jl	/^qbound(::Type{Float64}) = 63$/;"	f
qinvbound	base/ryu/utils.jl	/^qinvbound(::Type{Float16}) = 4$/;"	f
qinvbound	base/ryu/utils.jl	/^qinvbound(::Type{Float32}) = 9$/;"	f
qinvbound	base/ryu/utils.jl	/^qinvbound(::Type{Float64}) = 21$/;"	f
qr	stdlib/LinearAlgebra/src/bitarray.jl	/^qr(A::BitMatrix) = qr(float(A))$/;"	f
qr	stdlib/LinearAlgebra/src/qr.jl	/^function qr(A::AbstractMatrix{T}, arg...; kwargs...) where T$/;"	f
qr	stdlib/LinearAlgebra/src/qr.jl	/^function qr(v::AbstractVector)$/;"	f
qr	stdlib/LinearAlgebra/src/qr.jl	/^qr(x::Number) = qr(fill(x,1,1))$/;"	f
qr!	stdlib/LinearAlgebra/src/qr.jl	/^qr!(A::StridedMatrix) = qr!(A, Val(false))$/;"	f
qr!	stdlib/LinearAlgebra/src/qr.jl	/^qr!(A::StridedMatrix, ::Val{false}) = qrfactUnblocked!(A)$/;"	f
qr!	stdlib/LinearAlgebra/src/qr.jl	/^qr!(A::StridedMatrix, ::Val{true}) = qrfactPivotedUnblocked!(A)$/;"	f
qr!	stdlib/LinearAlgebra/src/qr.jl	/^qr!(A::StridedMatrix{<:BlasFloat}, ::Val{false} = Val(false); blocksize=36) =$/;"	f
qr!	stdlib/LinearAlgebra/src/qr.jl	/^qr!(A::StridedMatrix{<:BlasFloat}, ::Val{true}) = QRPivoted(LAPACK.geqp3!(A)...)$/;"	f
qrfactPivotedUnblocked!	stdlib/LinearAlgebra/src/qr.jl	/^function qrfactPivotedUnblocked!(A::StridedMatrix)$/;"	f
qrfactUnblocked!	stdlib/LinearAlgebra/src/qr.jl	/^function qrfactUnblocked!(A::AbstractMatrix{T}) where {T}$/;"	f
qualcomm_falkor	src/processor_arm.cpp	/^    qualcomm_falkor,$/;"	e	enum:ARM::CPU	file:
qualcomm_falkor	src/processor_arm.cpp	/^constexpr auto qualcomm_falkor = armv8a_crc_crypto;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
qualcomm_krait	src/processor_arm.cpp	/^    qualcomm_krait,$/;"	e	enum:ARM::CPU	file:
qualcomm_krait	src/processor_arm.cpp	/^constexpr auto qualcomm_krait = armv7a | get_feature_masks(vfp3, vfp4, neon, hwdiv, hwdiv_arm);$/;"	v	namespace:ARM::Feature	typeref:typename:auto
qualcomm_kyro	src/processor_arm.cpp	/^    qualcomm_kyro,$/;"	e	enum:ARM::CPU	file:
qualcomm_kyro	src/processor_arm.cpp	/^constexpr auto qualcomm_kyro = armv8a_crc_crypto;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
qualcomm_saphira	src/processor_arm.cpp	/^    qualcomm_saphira,$/;"	e	enum:ARM::CPU	file:
qualcomm_saphira	src/processor_arm.cpp	/^constexpr auto qualcomm_saphira = armv8_3a_crypto;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
qualcomm_scorpion	src/processor_arm.cpp	/^    qualcomm_scorpion,$/;"	e	enum:ARM::CPU	file:
qualcomm_scorpion	src/processor_arm.cpp	/^constexpr auto qualcomm_scorpion = armv7a | get_feature_masks(v7, aclass, vfp3, neon);$/;"	v	namespace:ARM::Feature	typeref:typename:auto
quantile	stdlib/Statistics/src/Statistics.jl	/^quantile(itr, p; sorted::Bool=false) = quantile!(collect(itr), p, sorted=sorted)$/;"	f
quantile	stdlib/Statistics/src/Statistics.jl	/^quantile(v::AbstractVector, p; sorted::Bool=false) =$/;"	f
quantile!	stdlib/Statistics/src/Statistics.jl	/^function quantile!(q::AbstractArray, v::AbstractVector, p::AbstractArray;$/;"	f
quantile!	stdlib/Statistics/src/Statistics.jl	/^function quantile!(v::AbstractVector, p::Union{AbstractArray, Tuple{Vararg{Real}}};$/;"	f
quantile!	stdlib/Statistics/src/Statistics.jl	/^quantile!(v::AbstractVector, p::Real; sorted::Bool=false) =$/;"	f
quarterofyear	stdlib/Dates/src/query.jl	/^function quarterofyear(dt::TimeType)$/;"	f
quasiparenta	stdlib/LinearAlgebra/src/adjtrans.jl	/^quasiparenta(x) = parent(x); quasiparenta(x::Number) = conj(x) # to handle numbers in the defs b/;"	f
quasiparentt	stdlib/LinearAlgebra/src/adjtrans.jl	/^quasiparentt(x) = parent(x); quasiparentt(x::Number) = x # to handle numbers in the defs below$/;"	f
queue	src/julia.h	/^    jl_value_t *queue; \/\/ invasive linked list for scheduler$/;"	m	struct:_jl_task_t	typeref:typename:jl_value_t *
queueGCRoot	src/llvm-pass-helpers.cpp	/^    const IntrinsicDescription queueGCRoot($/;"	v	namespace:jl_intrinsics	typeref:typename:const IntrinsicDescription
queueRootFunc	src/llvm-final-gc-lowering.cpp	/^    Function *queueRootFunc;$/;"	m	struct:FinalLowerGC	typeref:typename:Function *	file:
quickack	stdlib/Sockets/src/Sockets.jl	/^function quickack(sock::Union{TCPServer, TCPSocket}, enable::Bool)$/;"	f
quiet	src/julia.h	/^    int8_t quiet;$/;"	m	struct:__anon055fe4271808	typeref:typename:int8_t
quot	base/meta.jl	/^quot(ex) = Expr(:quote, ex)$/;"	f
quote_sym	src/ast.c	/^jl_sym_t *toplevel_sym; jl_sym_t *quote_sym;$/;"	v	typeref:typename:jl_sym_t *
quoted	base/compiler/utilities.jl	/^function quoted(@nospecialize(x))$/;"	f
quoted?	src/ast.scm	/^(define (quoted? e) (memq (car e) '(quote top core globalref outerref line break inert meta)))$/;"	f
quoted_syms	base/show.jl	/^const quoted_syms = Set{Symbol}([:(:),:(::),:(:=),:(=),:(==),:(===),:(=>)])$/;"	v
quotify	src/ast.scm	/^(define (quotify e) `',e)$/;"	f
r	contrib/normalize_triplet.py	/^def r(x):$/;"	f
r	test/reducedim.jl	/^r = fill(NaN, map(length, Base.reduced_indices(axes(Breduc), 1)))$/;"	v
r1	src/ccalltest.c	/^    complex float r1;$/;"	m	struct:__anon84ad8c4c2008	typeref:typename:complex float	file:
r1	src/ccalltest.c	/^    complex float r1;$/;"	m	struct:__anon84ad8c4c2108	typeref:typename:complex float	file:
r1	src/ccalltest.c	/^    complex int r1;$/;"	m	struct:__anon84ad8c4c2408	typeref:typename:complex int	file:
r1	src/ccalltest.c	/^    complex int r1;$/;"	m	struct:__anon84ad8c4c2508	typeref:typename:complex int	file:
r1	src/ccalltest.c	/^    int64_t r1;$/;"	m	struct:__anon84ad8c4c1b08	typeref:typename:int64_t	file:
r1	src/ccalltest.c	/^    int64_t r1;$/;"	m	struct:__anon84ad8c4c1c08	typeref:typename:int64_t	file:
r1	test/broadcast.jl	/^r1 = 1:1$/;"	v
r12	src/ccalltest.c	/^    complex double r12;$/;"	m	struct:__anon84ad8c4c2208	typeref:typename:complex double	file:
r12	src/ccalltest.c	/^    complex double r12;$/;"	m	struct:__anon84ad8c4c2308	typeref:typename:complex double	file:
r2	deps/valgrind/valgrind.h	/^      unsigned long int r2;     \/* what tocptr do we need? *\/$/;"	m	struct:__anon428795130608	typeref:typename:unsigned long int
r2	deps/valgrind/valgrind.h	/^      unsigned long int r2;  \/* what tocptr do we need? *\/$/;"	m	struct:__anon428795130508	typeref:typename:unsigned long int
r2	src/ccalltest.c	/^    complex float r2;$/;"	m	struct:__anon84ad8c4c2008	typeref:typename:complex float	file:
r2	src/ccalltest.c	/^    complex float r2;$/;"	m	struct:__anon84ad8c4c2108	typeref:typename:complex float	file:
r2	src/ccalltest.c	/^    complex int r2;$/;"	m	struct:__anon84ad8c4c2408	typeref:typename:complex int	file:
r2	src/ccalltest.c	/^    complex int r2;$/;"	m	struct:__anon84ad8c4c2508	typeref:typename:complex int	file:
r2	src/ccalltest.c	/^    int64_t r2;$/;"	m	struct:__anon84ad8c4c1b08	typeref:typename:int64_t	file:
r2	src/ccalltest.c	/^    int64_t r2;$/;"	m	struct:__anon84ad8c4c1c08	typeref:typename:int64_t	file:
r2	test/broadcast.jl	/^r2 = 1:5$/;"	v
r3	src/ccalltest.c	/^    complex float r3;$/;"	m	struct:__anon84ad8c4c2008	typeref:typename:complex float	file:
r3	src/ccalltest.c	/^    complex float r3;$/;"	m	struct:__anon84ad8c4c2108	typeref:typename:complex float	file:
r3	src/ccalltest.c	/^    complex int r3;$/;"	m	struct:__anon84ad8c4c2408	typeref:typename:complex int	file:
r3	src/ccalltest.c	/^    complex int r3;$/;"	m	struct:__anon84ad8c4c2508	typeref:typename:complex int	file:
r3	src/ccalltest.c	/^    int64_t r3;$/;"	m	struct:__anon84ad8c4c1b08	typeref:typename:int64_t	file:
r3	src/ccalltest.c	/^    int64_t r3;$/;"	m	struct:__anon84ad8c4c1c08	typeref:typename:int64_t	file:
r34	src/ccalltest.c	/^    complex double r34;$/;"	m	struct:__anon84ad8c4c2208	typeref:typename:complex double	file:
r34	src/ccalltest.c	/^    complex double r34;$/;"	m	struct:__anon84ad8c4c2308	typeref:typename:complex double	file:
r4	src/ccalltest.c	/^    complex float r4;$/;"	m	struct:__anon84ad8c4c2008	typeref:typename:complex float	file:
r4	src/ccalltest.c	/^    complex float r4;$/;"	m	struct:__anon84ad8c4c2108	typeref:typename:complex float	file:
r4	src/ccalltest.c	/^    complex int r4;$/;"	m	struct:__anon84ad8c4c2408	typeref:typename:complex int	file:
r4	src/ccalltest.c	/^    complex int r4;$/;"	m	struct:__anon84ad8c4c2508	typeref:typename:complex int	file:
r4	src/ccalltest.c	/^    int64_t r4;$/;"	m	struct:__anon84ad8c4c1b08	typeref:typename:int64_t	file:
r4	src/ccalltest.c	/^    int64_t r4;$/;"	m	struct:__anon84ad8c4c1c08	typeref:typename:int64_t	file:
r5	src/ccalltest.c	/^    complex float r5;$/;"	m	struct:__anon84ad8c4c2008	typeref:typename:complex float	file:
r5	src/ccalltest.c	/^    complex float r5;$/;"	m	struct:__anon84ad8c4c2108	typeref:typename:complex float	file:
r5	src/ccalltest.c	/^    complex float r5;$/;"	m	struct:__anon84ad8c4c2208	typeref:typename:complex float	file:
r5	src/ccalltest.c	/^    complex float r5;$/;"	m	struct:__anon84ad8c4c2308	typeref:typename:complex float	file:
r5	src/ccalltest.c	/^    complex int r5;$/;"	m	struct:__anon84ad8c4c2408	typeref:typename:complex int	file:
r5	src/ccalltest.c	/^    complex int r5;$/;"	m	struct:__anon84ad8c4c2508	typeref:typename:complex int	file:
r5	src/ccalltest.c	/^    int64_t r5;$/;"	m	struct:__anon84ad8c4c1b08	typeref:typename:int64_t	file:
r5	src/ccalltest.c	/^    int64_t r5;$/;"	m	struct:__anon84ad8c4c1c08	typeref:typename:int64_t	file:
r6	src/ccalltest.c	/^    complex float r6;$/;"	m	struct:__anon84ad8c4c2008	typeref:typename:complex float	file:
r6	src/ccalltest.c	/^    complex float r6;$/;"	m	struct:__anon84ad8c4c2108	typeref:typename:complex float	file:
r6	src/ccalltest.c	/^    complex int r6;$/;"	m	struct:__anon84ad8c4c2408	typeref:typename:complex int	file:
r6	src/ccalltest.c	/^    complex int r6;$/;"	m	struct:__anon84ad8c4c2508	typeref:typename:complex int	file:
r6	src/ccalltest.c	/^    int64_t r6;$/;"	m	struct:__anon84ad8c4c1b08	typeref:typename:int64_t	file:
r6	src/ccalltest.c	/^    int64_t r6;$/;"	m	struct:__anon84ad8c4c1c08	typeref:typename:int64_t	file:
r67	src/ccalltest.c	/^    complex double r67;$/;"	m	struct:__anon84ad8c4c2208	typeref:typename:complex double	file:
r67	src/ccalltest.c	/^    complex double r67;$/;"	m	struct:__anon84ad8c4c2308	typeref:typename:complex double	file:
r7	src/ccalltest.c	/^    complex float r7;$/;"	m	struct:__anon84ad8c4c2008	typeref:typename:complex float	file:
r7	src/ccalltest.c	/^    complex float r7;$/;"	m	struct:__anon84ad8c4c2108	typeref:typename:complex float	file:
r7	src/ccalltest.c	/^    complex int r7;$/;"	m	struct:__anon84ad8c4c2408	typeref:typename:complex int	file:
r7	src/ccalltest.c	/^    complex int r7;$/;"	m	struct:__anon84ad8c4c2508	typeref:typename:complex int	file:
r7	src/ccalltest.c	/^    int64_t r7;$/;"	m	struct:__anon84ad8c4c1b08	typeref:typename:int64_t	file:
r7	src/ccalltest.c	/^    int64_t r7;$/;"	m	struct:__anon84ad8c4c1c08	typeref:typename:int64_t	file:
r8	src/ccalltest.c	/^    complex int r8;$/;"	m	struct:__anon84ad8c4c2408	typeref:typename:complex int	file:
r8	src/ccalltest.c	/^    complex int r8;$/;"	m	struct:__anon84ad8c4c2508	typeref:typename:complex int	file:
r8	src/ccalltest.c	/^    double r8;$/;"	m	struct:__anon84ad8c4c2208	typeref:typename:double	file:
r8	src/ccalltest.c	/^    int64_t r8;$/;"	m	struct:__anon84ad8c4c1b08	typeref:typename:int64_t	file:
r8	src/ccalltest.c	/^    int64_t r8;$/;"	m	struct:__anon84ad8c4c1c08	typeref:typename:int64_t	file:
r89	src/ccalltest.c	/^    complex double r89;$/;"	m	struct:__anon84ad8c4c2308	typeref:typename:complex double	file:
r8a	src/ccalltest.c	/^    float r8a;$/;"	m	struct:__anon84ad8c4c2008	typeref:typename:float	file:
r8a	src/ccalltest.c	/^    float r8a;$/;"	m	struct:__anon84ad8c4c2108	typeref:typename:float	file:
r8b	src/ccalltest.c	/^    float r8b;$/;"	m	struct:__anon84ad8c4c2008	typeref:typename:float	file:
r8b	src/ccalltest.c	/^    float r8b;$/;"	m	struct:__anon84ad8c4c2108	typeref:typename:float	file:
r9	src/ccalltest.c	/^    complex int r9;$/;"	m	struct:__anon84ad8c4c2508	typeref:typename:complex int	file:
r9	src/ccalltest.c	/^    float r9;$/;"	m	struct:__anon84ad8c4c2108	typeref:typename:float	file:
r9	src/ccalltest.c	/^    int64_t r9;$/;"	m	struct:__anon84ad8c4c1c08	typeref:typename:int64_t	file:
r_addend	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Sword	r_addend;		\/* Addend *\/$/;"	m	struct:__anonff7a58690b08	typeref:typename:Elf32_Sword
r_addend	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Sxword	r_addend;		\/* Addend *\/$/;"	m	struct:__anonff7a58690c08	typeref:typename:Elf64_Sxword
r_info	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word	r_info;			\/* Relocation type and symbol index *\/$/;"	m	struct:__anonff7a58690908	typeref:typename:Elf32_Word
r_info	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word	r_info;			\/* Relocation type and symbol index *\/$/;"	m	struct:__anonff7a58690b08	typeref:typename:Elf32_Word
r_info	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Xword	r_info;			\/* Relocation type and symbol index *\/$/;"	m	struct:__anonff7a58690a08	typeref:typename:Elf64_Xword
r_info	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Xword	r_info;			\/* Relocation type and symbol index *\/$/;"	m	struct:__anonff7a58690c08	typeref:typename:Elf64_Xword
r_offset	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Addr	r_offset;		\/* Address *\/$/;"	m	struct:__anonff7a58690908	typeref:typename:Elf32_Addr
r_offset	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Addr	r_offset;		\/* Address *\/$/;"	m	struct:__anonff7a58690b08	typeref:typename:Elf32_Addr
r_offset	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Addr	r_offset;		\/* Address *\/$/;"	m	struct:__anonff7a58690a08	typeref:typename:Elf64_Addr
r_offset	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Addr	r_offset;		\/* Address *\/$/;"	m	struct:__anonff7a58690c08	typeref:typename:Elf64_Addr
r_str	base/regex.jl	/^macro r_str(pattern, flags...) Regex(pattern, flags...) end$/;"	f
r_typeassert	test/compiler/codegen.jl	/^@noinline r_typeassert(c) = c ? (1,1) : nothing$/;"	f
rad2deg	base/math.jl	/^rad2deg(z::AbstractFloat) = z * (180 \/ oftype(z, pi))$/;"	f
rad2deg	base/math.jl	/^rad2deg(z::Number) = (z\/pi)*180$/;"	f
rad2deg	base/math.jl	/^rad2deg(z::Real) = rad2deg(float(z))$/;"	f
radio_menu	stdlib/REPL/test/TerminalMenus/radio_menu.jl	/^radio_menu = RadioMenu(string.(1:10))$/;"	v
radio_menu	stdlib/REPL/test/TerminalMenus/radio_menu.jl	/^radio_menu = RadioMenu(string.(1:20))$/;"	v
radio_menu.selected	stdlib/REPL/test/TerminalMenus/radio_menu.jl	/^radio_menu.selected = 2$/;"	v
raise_exception	src/cgutils.cpp	/^static void raise_exception(jl_codectx_t &ctx, Value *exc,$/;"	f	typeref:typename:void	file:
raise_exception	src/julia.h	/^    jl_value_t *raise_exception;$/;"	m	struct:__anon055fe4271b08	typeref:typename:jl_value_t *
raise_exception_unless	src/cgutils.cpp	/^static void raise_exception_unless(jl_codectx_t &ctx, Value *cond, Value *exc)$/;"	f	typeref:typename:void	file:
rand	base/Base.jl	/^function rand end$/;"	f
rand	base/libc.jl	/^    rand(::Type{UInt32}) = ((rand() % UInt32) << 16) ⊻ (rand() % UInt32)$/;"	f
rand	base/libc.jl	/^    rand(::Type{UInt32}) = ((rand() % UInt32) << 17) ⊻ ((rand() % UInt32) << 8) ⊻ (rand() % /;"	f
rand	base/libc.jl	/^rand() = ccall(:rand, Cint, ())$/;"	f
rand	base/libc.jl	/^rand(::Type{Float64}) = rand(UInt32) * 2.0^-32$/;"	f
rand	stdlib/Random/src/RNGs.jl	/^    @eval rand(::_GLOBAL_RNG, x::$T) = rand(default_rng(), x)$/;"	f
rand	stdlib/Random/src/RNGs.jl	/^    function rand(rd::RandomDevice, sp::SamplerBoolBitInteger)$/;"	f
rand	stdlib/Random/src/RNGs.jl	/^    rand(rd::RandomDevice, sp::SamplerBoolBitInteger) = read( rd.file, sp[])$/;"	f
rand	stdlib/Random/src/RNGs.jl	/^function rand(r::MersenneTwister, ::SamplerTrivial{UInt104Raw{UInt128}})$/;"	f
rand	stdlib/Random/src/RNGs.jl	/^function rand(r::MersenneTwister, ::SamplerTrivial{UInt2x52Raw{UInt128}})$/;"	f
rand	stdlib/Random/src/RNGs.jl	/^function rand(r::MersenneTwister, x::SamplerTrivial{UInt52Raw{UInt64}})$/;"	f
rand	stdlib/Random/src/RNGs.jl	/^rand(::_GLOBAL_RNG, sp::SamplerBoolBitInteger) = rand(default_rng(), sp)$/;"	f
rand	stdlib/Random/src/RNGs.jl	/^rand(r::MersenneTwister, T::SamplerUnion(Bool, Int8, UInt8, Int16, UInt16, Int32, UInt32)) =$/;"	f
rand	stdlib/Random/src/RNGs.jl	/^rand(r::MersenneTwister, T::SamplerUnion(Int64, UInt64, Int128, UInt128)) =$/;"	f
rand	stdlib/Random/src/RNGs.jl	/^rand(r::MersenneTwister, sp::SamplerTrivial{CloseOpen12_64}) =$/;"	f
rand	stdlib/Random/src/Random.jl	/^function rand(rng::AbstractRNG, sp::LessThan)$/;"	f
rand	stdlib/Random/src/Random.jl	/^rand(                ::Type{X}, d::Integer, dims::Integer...) where {X} = rand(X, Dims((d, dims./;"	f
rand	stdlib/Random/src/Random.jl	/^rand(                ::Type{X}, dims::Dims) where {X} = rand(default_rng(), X, dims)$/;"	f
rand	stdlib/Random/src/Random.jl	/^rand(                X, d::Integer, dims::Integer...) = rand(X, Dims((d, dims...)))$/;"	f
rand	stdlib/Random/src/Random.jl	/^rand(                X, dims::Dims)  = rand(default_rng(), X, dims)$/;"	f
rand	stdlib/Random/src/Random.jl	/^rand(                dims::Integer...) = rand(Float64, Dims(dims))$/;"	f
rand	stdlib/Random/src/Random.jl	/^rand(::Type{X}) where {X} = rand(default_rng(), X)$/;"	f
rand	stdlib/Random/src/Random.jl	/^rand(X)                   = rand(default_rng(), X)$/;"	f
rand	stdlib/Random/src/Random.jl	/^rand(r::AbstractRNG, ::Type{X}, d::Integer, dims::Integer...) where {X} = rand(r, X, Dims((d, di/;"	f
rand	stdlib/Random/src/Random.jl	/^rand(r::AbstractRNG, ::Type{X}, dims::Dims) where {X} = rand!(r, Array{X}(undef, dims), X)$/;"	f
rand	stdlib/Random/src/Random.jl	/^rand(r::AbstractRNG, X, d::Integer, dims::Integer...) = rand(r, X, Dims((d, dims...)))$/;"	f
rand	stdlib/Random/src/Random.jl	/^rand(r::AbstractRNG, X, dims::Dims)  = rand!(r, Array{gentype(X)}(undef, dims), X)$/;"	f
rand	stdlib/Random/src/Random.jl	/^rand(r::AbstractRNG, dims::Integer...) = rand(r, Float64, Dims(dims))$/;"	f
rand	stdlib/Random/src/Random.jl	/^rand(rng::AbstractRNG, ::UniformT{T}) where {T} = rand(rng, T)$/;"	f
rand	stdlib/Random/src/Random.jl	/^rand(rng::AbstractRNG, X)                                           = rand(rng, Sampler(rng, X, /;"	f
rand	stdlib/Random/src/Random.jl	/^rand(rng::AbstractRNG, X::Dims)                                     = rand(rng, Sampler(rng, X, /;"	f
rand	stdlib/Random/src/Random.jl	/^rand(rng::AbstractRNG, sp::Masked) = rand(rng, sp.s) & sp.mask$/;"	f
rand	stdlib/Random/src/Random.jl	/^rand(rng::AbstractRNG=default_rng(), ::Type{X}=Float64) where {X} = rand(rng, Sampler(rng, X, Va/;"	f
rand	stdlib/Random/src/generation.jl	/^function rand(r::AbstractRNG, ::SamplerType{T}) where {T<:AbstractChar}$/;"	f
rand	stdlib/Random/src/generation.jl	/^function rand(rng::AbstractRNG, sp::SamplerBigInt)$/;"	f
rand	stdlib/Random/src/generation.jl	/^function rand(rng::AbstractRNG, sp::SamplerRangeFast{UInt128,T}) where T$/;"	f
rand	stdlib/Random/src/generation.jl	/^function rand(rng::AbstractRNG, sp::SamplerRangeFast{UInt32,T}) where T$/;"	f
rand	stdlib/Random/src/generation.jl	/^function rand(rng::AbstractRNG, sp::SamplerRangeFast{UInt64,T}) where T$/;"	f
rand	stdlib/Random/src/generation.jl	/^function rand(rng::AbstractRNG, sp::SamplerRangeInt{T,UInt128}) where T<:BitInteger$/;"	f
rand	stdlib/Random/src/generation.jl	/^function rand(rng::AbstractRNG, sp::SamplerRangeInt{T,UInt64}) where T<:BitInteger$/;"	f
rand	stdlib/Random/src/generation.jl	/^function rand(rng::AbstractRNG, sp::SamplerSimple{<:AbstractString,<:Sampler})::Char$/;"	f
rand	stdlib/Random/src/generation.jl	/^function rand(rng::AbstractRNG, sp::SamplerSimple{<:Dict,<:Sampler})$/;"	f
rand	stdlib/Random/src/generation.jl	/^function rand(rng::AbstractRNG, sp::SamplerSimple{BitSet,<:Sampler})$/;"	f
rand	stdlib/Random/src/generation.jl	/^function rand(rng::AbstractRNG, sp::SamplerSimple{Tuple{A,B,C,D}}) where {A,B,C,D}$/;"	f
rand	stdlib/Random/src/generation.jl	/^function rand(rng::AbstractRNG, sp::SamplerSimple{Tuple{A,B,C}}) where {A,B,C}$/;"	f
rand	stdlib/Random/src/generation.jl	/^rand(r::AbstractRNG, ::SamplerTrivial{CloseOpen01_64}) = rand(r, CloseOpen12()) - 1.0$/;"	f
rand	stdlib/Random/src/generation.jl	/^rand(r::AbstractRNG, ::SamplerTrivial{CloseOpen01{Float16}}) =$/;"	f
rand	stdlib/Random/src/generation.jl	/^rand(r::AbstractRNG, ::SamplerTrivial{CloseOpen01{Float32}}) =$/;"	f
rand	stdlib/Random/src/generation.jl	/^rand(r::AbstractRNG, ::SamplerTrivial{CloseOpen12_64}) =$/;"	f
rand	stdlib/Random/src/generation.jl	/^rand(r::AbstractRNG, ::SamplerTrivial{UInt104Raw{UInt128}}) =$/;"	f
rand	stdlib/Random/src/generation.jl	/^rand(r::AbstractRNG, ::SamplerTrivial{UInt104{UInt128}}) = rand(r, UInt104Raw()) & 0x000000fffff/;"	f
rand	stdlib/Random/src/generation.jl	/^rand(r::AbstractRNG, ::SamplerTrivial{UInt10Raw{UInt16}}) = rand(r, UInt16)$/;"	f
rand	stdlib/Random/src/generation.jl	/^rand(r::AbstractRNG, ::SamplerTrivial{UInt10{UInt16}})   = rand(r, UInt10Raw())  & 0x03ff$/;"	f
rand	stdlib/Random/src/generation.jl	/^rand(r::AbstractRNG, ::SamplerTrivial{UInt23Raw{UInt32}}) = rand(r, UInt32)$/;"	f
rand	stdlib/Random/src/generation.jl	/^rand(r::AbstractRNG, ::SamplerTrivial{UInt23{UInt32}})   = rand(r, UInt23Raw())  & 0x007fffff$/;"	f
rand	stdlib/Random/src/generation.jl	/^rand(r::AbstractRNG, ::SamplerTrivial{UInt52Raw{UInt64}}) =$/;"	f
rand	stdlib/Random/src/generation.jl	/^rand(r::AbstractRNG, ::SamplerTrivial{UInt52{UInt64}})   = rand(r, UInt52Raw())  & 0x000ffffffff/;"	f
rand	stdlib/Random/src/generation.jl	/^rand(r::AbstractRNG, ::SamplerType{Complex{T}}) where {T<:Real} =$/;"	f
rand	stdlib/Random/src/generation.jl	/^rand(r::AbstractRNG, sp::SamplerTrivial{<:UniformBits{T}}) where {T} =$/;"	f
rand	stdlib/Random/src/generation.jl	/^rand(rng::AbstractRNG, sp::SamplerBigFloat{T}) where {T<:FloatInterval{BigFloat}} =$/;"	f
rand	stdlib/Random/src/generation.jl	/^rand(rng::AbstractRNG, sp::SamplerRangeInt{T,UInt32}) where {T<:BitInteger} =$/;"	f
rand	stdlib/Random/src/generation.jl	/^rand(rng::AbstractRNG, sp::SamplerSimple{<:AbstractArray,<:Sampler}) =$/;"	f
rand	stdlib/Random/src/generation.jl	/^rand(rng::AbstractRNG, sp::SamplerSimple{<:Tuple}) =$/;"	f
rand	stdlib/Random/src/generation.jl	/^rand(rng::AbstractRNG, sp::SamplerSimple{Tuple{A,B}}) where {A,B} =$/;"	f
rand	stdlib/Random/src/generation.jl	/^rand(rng::AbstractRNG, sp::SamplerTag{<:Set,<:Sampler}) = rand(rng, sp.data).first$/;"	f
rand	stdlib/Random/src/generation.jl	/^rand(rng::AbstractRNG, sp::SamplerTrivial{<:Union{AbstractDict,AbstractSet}}) =$/;"	f
rand	stdlib/Random/src/generation.jl	/^rand(rng::AbstractRNG, sp::SamplerTrivial{Tuple{A}}) where {A} =$/;"	f
rand	stdlib/Random/test/runtests.jl	/^                   rand(Int, 100)                   => Int,$/;"	f
rand!	stdlib/Random/src/RNGs.jl	/^        @eval function rand!(rd::RandomDevice, A::Array{$T}, ::SamplerType{$T})$/;"	f
rand!	stdlib/Random/src/RNGs.jl	/^        @eval rand!(rd::RandomDevice, A::Array{$T}, ::SamplerType{$T}) = read!(rd.file, A)$/;"	f
rand!	stdlib/Random/src/RNGs.jl	/^    @eval function rand!(r::MersenneTwister, A::Array{$T}, ::SamplerTrivial{CloseOpen01{$T}})$/;"	f
rand!	stdlib/Random/src/RNGs.jl	/^    @eval function rand!(r::MersenneTwister, A::Array{$T}, ::SamplerTrivial{CloseOpen12{$T}})$/;"	f
rand!	stdlib/Random/src/RNGs.jl	/^    @eval function rand!(r::MersenneTwister, A::UnsafeView{$T}, ::SamplerType{$T})$/;"	f
rand!	stdlib/Random/src/RNGs.jl	/^    @eval rand!(::_GLOBAL_RNG, A::Array{$T}, I::SamplerTrivial{CloseOpen01{$T}}) = rand!(default/;"	f
rand!	stdlib/Random/src/RNGs.jl	/^    @eval rand!(::_GLOBAL_RNG, A::Array{$T}, I::SamplerTrivial{CloseOpen12{$T}}) = rand!(default/;"	f
rand!	stdlib/Random/src/RNGs.jl	/^    @eval rand!(::_GLOBAL_RNG, A::Array{$T}, I::SamplerType{$T}) = rand!(default_rng(), A, I)$/;"	f
rand!	stdlib/Random/src/RNGs.jl	/^    @eval rand!(r::MersenneTwister, A::Array{$T}, sp::SamplerType{$T}) =$/;"	f
rand!	stdlib/Random/src/RNGs.jl	/^function rand!(r::MersenneTwister, A::AbstractArray{Float64},$/;"	f
rand!	stdlib/Random/src/RNGs.jl	/^function rand!(r::MersenneTwister, A::UnsafeView{Float64},$/;"	f
rand!	stdlib/Random/src/RNGs.jl	/^function rand!(r::MersenneTwister, A::UnsafeView{UInt128}, ::SamplerType{UInt128})$/;"	f
rand!	stdlib/Random/src/RNGs.jl	/^rand!(::_GLOBAL_RNG, A::AbstractArray{Float64}, I::SamplerTrivial{<:FloatInterval_64}) = rand!(d/;"	f
rand!	stdlib/Random/src/RNGs.jl	/^rand!(::_GLOBAL_RNG, A::Array{Float64}, I::SamplerTrivial{<:FloatInterval_64}) = rand!(default_r/;"	f
rand!	stdlib/Random/src/RNGs.jl	/^rand!(r::MersenneTwister, A::Array{Float64}, I::SamplerTrivial{<:FloatInterval_64}) =$/;"	f
rand!	stdlib/Random/src/Random.jl	/^function rand!(rng::AbstractRNG, A::AbstractArray{T}, sp::Sampler) where T$/;"	f
rand!	stdlib/Random/src/Random.jl	/^rand!(A::AbstractArray{T}, ::Type{X}=T) where {T,X} = rand!(default_rng(), A, X)$/;"	f
rand!	stdlib/Random/src/Random.jl	/^rand!(A::AbstractArray{T}, X) where {T}             = rand!(default_rng(), A, X)$/;"	f
rand!	stdlib/Random/src/Random.jl	/^rand!(rng::AbstractRNG, A::AbstractArray{T}, ::Type{X}=T) where {T,X} = rand!(rng, A, Sampler(rn/;"	f
rand!	stdlib/Random/src/Random.jl	/^rand!(rng::AbstractRNG, A::AbstractArray{T}, X) where {T}             = rand!(rng, A, Sampler(rn/;"	f
rand!	stdlib/Random/src/misc.jl	/^function rand!(rng::AbstractRNG, B::BitArray, ::SamplerType{Bool})$/;"	f
randT_inferred_union	test/compiler/inference.jl	/^randT_inferred_union() = rand(Bool) ? rand(Bool) ? 1 : 2.0 : nothing$/;"	f
rand_generic	stdlib/Random/src/generation.jl	/^rand_generic(r::AbstractRNG, ::Type{Int128}) = rand(r, UInt128) % Int128$/;"	f
rand_generic	stdlib/Random/src/generation.jl	/^rand_generic(r::AbstractRNG, ::Type{Int64})  = rand(r, UInt64) % Int64$/;"	f
rand_generic	stdlib/Random/src/generation.jl	/^rand_generic(r::AbstractRNG, ::Type{UInt128}) = _rand128(r, rng_native_52(r))$/;"	f
rand_generic	stdlib/Random/src/generation.jl	/^rand_generic(r::AbstractRNG, ::Type{UInt64}) =$/;"	f
rand_generic	stdlib/Random/src/generation.jl	/^rand_generic(r::AbstractRNG, T::Union{Bool,Int8,UInt8,Int16,UInt16,Int32,UInt32}) =$/;"	f
rand_inbounds	stdlib/Random/src/RNGs.jl	/^rand_inbounds(r::MersenneTwister, ::CloseOpen01_64=CloseOpen01()) =$/;"	f
rand_inbounds	stdlib/Random/src/RNGs.jl	/^rand_inbounds(r::MersenneTwister, ::CloseOpen12_64) = mt_pop!(r)$/;"	f
rand_inbounds	stdlib/Random/src/RNGs.jl	/^rand_inbounds(r::MersenneTwister, ::UInt52Raw{T}) where {T<:BitInteger} =$/;"	f
rand_m1m2	test/bitarray.jl	/^        rand_m1m2() = rand(1:n1), rand(1:n2)$/;"	f
randcycle	stdlib/Random/src/misc.jl	/^randcycle(n::Integer) = randcycle(default_rng(), n)$/;"	f
randcycle	stdlib/Random/src/misc.jl	/^randcycle(r::AbstractRNG, n::T) where {T <: Integer} = randcycle!(r, Vector{T}(undef, n))$/;"	f
randcycle!	stdlib/Random/src/misc.jl	/^function randcycle!(r::AbstractRNG, a::Array{<:Integer})$/;"	f
randcycle!	stdlib/Random/src/misc.jl	/^randcycle!(a::Array{<:Integer}) = randcycle!(default_rng(), a)$/;"	f
randexp	stdlib/Random/src/normal.jl	/^function randexp(rng::AbstractRNG=default_rng())$/;"	f
randexp!	stdlib/Random/src/normal.jl	/^function randexp! end$/;"	f
randexp_unlikely	stdlib/Random/src/normal.jl	/^@noinline function randexp_unlikely(rng, idx, x)$/;"	f
randjump	stdlib/Future/src/Future.jl	/^randjump(r::MersenneTwister, steps::Integer) =$/;"	f
randjumpvec	stdlib/Random/test/runtests.jl	/^    function randjumpvec(m, steps, len) # old version of randjump$/;"	f
randmtzig_fill_ziggurat_tables	stdlib/Random/test/runtests.jl	/^function randmtzig_fill_ziggurat_tables() # Operates on the global arrays$/;"	f
randn	base/Base.jl	/^function randn end$/;"	f
randn	stdlib/Random/src/normal.jl	/^@inline function randn(rng::AbstractRNG=default_rng())$/;"	f
randn	stdlib/Random/src/normal.jl	/^randn(rng::AbstractRNG, ::Type{Complex{T}}) where {T<:AbstractFloat} =$/;"	f
randn!	stdlib/Random/src/normal.jl	/^function randn! end$/;"	f
randn_float32	stdlib/LinearAlgebra/test/pinv.jl	/^function randn_float32(m::Integer, n::Integer)$/;"	f
randn_float64	stdlib/LinearAlgebra/test/pinv.jl	/^function randn_float64(m::Integer, n::Integer)$/;"	f
randn_unlikely	stdlib/Random/src/normal.jl	/^@noinline function randn_unlikely(rng, idx, rabs, x)$/;"	f
randn_with_nans	test/sorting.jl	/^function randn_with_nans(n,p)$/;"	f
randnans	test/sorting.jl	/^randnans(n) = reinterpret(Float64,[rand(UInt64)|0x7ff8000000000000 for i=1:n])$/;"	f
random	src/gc.h	/^    unsigned short random[3];$/;"	m	struct:__anoncf30557c0108	typeref:typename:unsigned short[3]
randperm	stdlib/Random/src/misc.jl	/^randperm(n::Integer) = randperm(default_rng(), n)$/;"	f
randperm	stdlib/Random/src/misc.jl	/^randperm(r::AbstractRNG, n::T) where {T <: Integer} = randperm!(r, Vector{T}(undef, n))$/;"	f
randperm!	stdlib/Random/src/misc.jl	/^function randperm!(r::AbstractRNG, a::Array{<:Integer})$/;"	f
randperm!	stdlib/Random/src/misc.jl	/^randperm!(a::Array{<:Integer}) = randperm!(default_rng(), a)$/;"	f
randstring	stdlib/Random/src/misc.jl	/^    randstring(chars=b, n::Integer=8) = randstring(default_rng(), chars, n)$/;"	f
randstring	stdlib/Random/src/misc.jl	/^    randstring(n::Integer) = randstring(default_rng(), b, n)$/;"	f
randstring	stdlib/Random/src/misc.jl	/^    randstring(r::AbstractRNG, chars=b, n::Integer=8) = String(rand(r, chars, n))$/;"	f
randstring	stdlib/Random/src/misc.jl	/^    randstring(r::AbstractRNG, n::Integer) = randstring(r, b, n)$/;"	f
randstring	stdlib/Random/src/misc.jl	/^function randstring end$/;"	f
randsubseq	stdlib/Random/src/misc.jl	/^randsubseq(A::AbstractArray, p::Real) = randsubseq(default_rng(), A, p)$/;"	f
randsubseq	stdlib/Random/src/misc.jl	/^randsubseq(r::AbstractRNG, A::AbstractArray{T}, p::Real) where {T} =$/;"	f
randsubseq!	stdlib/Random/src/misc.jl	/^function randsubseq!(r::AbstractRNG, S::AbstractArray, A::AbstractArray, p::Real)$/;"	f
randsubseq!	stdlib/Random/src/misc.jl	/^randsubseq!(S::AbstractArray, A::AbstractArray, p::Real) = randsubseq!(default_rng(), S, A, p)$/;"	f
range	base/range.jl	/^range(start, stop; length::Union{Integer,Nothing}=nothing, step=nothing) =$/;"	f
range	base/range.jl	/^range(start; length::Union{Integer,Nothing}=nothing, stop=nothing, step=nothing) =$/;"	f
range-colon-enabled	src/julia-parser.scm	/^(define range-colon-enabled #t)$/;"	f
range_1dim	stdlib/SharedArrays/src/SharedArrays.jl	/^function range_1dim(S::SharedArray, pidx)$/;"	f
range_fuzztests	test/ranges.jl	/^function range_fuzztests(::Type{T}, niter, nrange) where {T}$/;"	f
range_varm	stdlib/Statistics/src/Statistics.jl	/^function range_varm(v::AbstractRange, m)$/;"	f
rangesearch	stdlib/SparseArrays/src/sparsematrix.jl	/^function rangesearch(haystack::AbstractRange, needle)$/;"	f
rank	stdlib/LinearAlgebra/src/cholesky.jl	/^rank(C::CholeskyPivoted) = C.rank$/;"	f
rank	stdlib/LinearAlgebra/src/deprecated.jl	/^rank(A::AbstractMatrix, tol::Real) = rank(A,rtol=tol)$/;"	f
rank	stdlib/LinearAlgebra/src/generic.jl	/^function rank(A::AbstractMatrix; atol::Real = 0.0, rtol::Real = (min(size(A)...)*eps(real(float(/;"	f
rank	stdlib/LinearAlgebra/src/generic.jl	/^rank(x::Number) = x == 0 ? 0 : 1$/;"	f
rat	base/twiceprecision.jl	/^function rat(x)$/;"	f
rata2datetime	stdlib/Dates/src/conversions.jl	/^rata2datetime(days) = DateTime(yearmonthday(days)...)$/;"	f
ratio	test/broadcast.jl	/^ratio = [1,1\/2,1\/3,1\/4,1\/5]$/;"	v
ratio	test/error.jl	/^    ratio(x) = x[2:end].\/x[1:end-1]$/;"	f
rationalize	base/irrationals.jl	/^@pure function rationalize(::Type{T}, x::AbstractIrrational; tol::Real=0) where T$/;"	f
rationalize	base/rational.jl	/^function rationalize(::Type{T}, x::AbstractFloat, tol::Real) where T<:Integer$/;"	f
rationalize	base/rational.jl	/^rationalize(::Type{T}, x::AbstractFloat; tol::Real = eps(x)) where {T<:Integer} = rationalize(T,/;"	f
rationalize	base/rational.jl	/^rationalize(x::AbstractFloat; kvs...) = rationalize(Int, x; kvs...)$/;"	f
raw	stdlib/LibGit2/src/oid.jl	/^raw(id::GitHash) = collect(id.val)$/;"	f
raw!	stdlib/REPL/src/Terminals.jl	/^    function raw!(t::TTYTerminal, raw::Bool)$/;"	f
raw!	stdlib/REPL/src/Terminals.jl	/^    function raw!(t::TTYTerminal,raw::Bool)$/;"	f
raw!	stdlib/REPL/src/Terminals.jl	/^raw!(t::TextTerminal, raw::Bool) = error("Unimplemented")$/;"	f
raw_str	base/strings/io.jl	/^macro raw_str(s); s; end$/;"	f
rawcontent	stdlib/LibGit2/src/blob.jl	/^function rawcontent(blob::GitBlob)$/;"	f
rawhandle	base/cmd.jl	/^    rawhandle(x::RawFD) = Libc._get_osfhandle(x)$/;"	f
rawhandle	base/cmd.jl	/^rawhandle(::DevNull) = C_NULL$/;"	f
rawhandle	base/cmd.jl	/^rawhandle(x::OS_HANDLE) = x$/;"	f
rawhandle	base/filesystem.jl	/^rawhandle(file::File) = file.handle$/;"	f
rawhandle	base/stream.jl	/^rawhandle(stream::LibuvStream) = stream.handle$/;"	f
rb	test/broadcast.jl	/^rb = 1:5$/;"	v
rc_unbuffered	stdlib/Distributed/test/distributed_exec.jl	/^rc_unbuffered = RemoteChannel(()->Channel{Vector{Float64}}(0))$/;"	v
rcswap!	stdlib/LinearAlgebra/src/dense.jl	/^function rcswap!(i::Integer, j::Integer, X::StridedMatrix{<:Number})$/;"	f
rdepth	src/subtype.c	/^    int rdepth;$/;"	m	struct:__anon0f0258f90208	typeref:typename:int	file:
rdi	deps/srccache/patchelf-0.9/src/patchelf.cc	/^I ElfFile<ElfFileParamNames>::rdi(I i)$/;"	f	class:ElfFile	typeref:typename:I
rdims	base/reshapedarray.jl	/^rdims(out::NTuple{N,Any}, inds::NTuple{M,Any}) where {N,M} = (first(inds), rdims(tail(out), tail/;"	f
rdims	base/reshapedarray.jl	/^rdims(out::NTuple{N,Any}, inds::NTuple{N,Any}) where {N} = inds # N > 1, M == N$/;"	f
rdims	base/reshapedarray.jl	/^rdims(out::NTuple{N,Any}, inds::Tuple{}) where {N} = out # N > 1, M == 0$/;"	f
rdims	base/reshapedarray.jl	/^rdims(out::Tuple{Any}, inds::NTuple{M,Any}) where {M} = (OneTo(rdims_trailing(inds...)),) # N ==/;"	f
rdims	base/reshapedarray.jl	/^rdims(out::Tuple{Any}, inds::Tuple{Any}) = inds # N == 1, M == 1$/;"	f
rdims	base/reshapedarray.jl	/^rdims(out::Tuple{Any}, inds::Tuple{}) = out # N == 1, M == 0$/;"	f
rdims	base/reshapedarray.jl	/^rdims(out::Tuple{}, inds::NTuple{M,Any}) where {M} = ()$/;"	f
rdims	base/reshapedarray.jl	/^rdims(out::Tuple{}, inds::Tuple{Any}) = ()$/;"	f
rdims	base/reshapedarray.jl	/^rdims(out::Tuple{}, inds::Tuple{}) = () # N == 0, M == 0$/;"	f
rdims	base/reshapedarray.jl	/^rdims(out::Val{N}, inds::Tuple) where {N} = rdims(ntuple(i -> OneTo(1), Val(N)), inds)$/;"	f
rdims_trailing	base/reshapedarray.jl	/^rdims_trailing(l) = length(l)$/;"	f
rdims_trailing	base/reshapedarray.jl	/^rdims_trailing(l, inds...) = length(l) * rdims_trailing(inds...)$/;"	f
rdiv!	stdlib/LinearAlgebra/src/cholesky.jl	/^function rdiv!(B::StridedMatrix, C::Cholesky{<:Any,<:AbstractMatrix})$/;"	f
rdiv!	stdlib/LinearAlgebra/src/diagonal.jl	/^function rdiv!(A::AbstractMatrix{T}, D::Diagonal{T}) where {T}$/;"	f
rdiv!	stdlib/LinearAlgebra/src/diagonal.jl	/^function rdiv!(A::Union{LowerTriangular,UpperTriangular}, D::Diagonal)$/;"	f
rdiv!	stdlib/LinearAlgebra/src/diagonal.jl	/^rdiv!(A::AbstractMatrix{T}, adjD::Adjoint{<:Any,<:Diagonal{T}}) where {T} =$/;"	f
rdiv!	stdlib/LinearAlgebra/src/diagonal.jl	/^rdiv!(A::AbstractMatrix{T}, transD::Transpose{<:Any,<:Diagonal{T}}) where {T} =$/;"	f
rdiv!	stdlib/LinearAlgebra/src/generic.jl	/^function rdiv!(X::AbstractArray, s::Number)$/;"	f
rdiv!	stdlib/LinearAlgebra/src/hessenberg.jl	/^function rdiv!(B::AbstractMatrix, F::Hessenberg)$/;"	f
rdiv!	stdlib/LinearAlgebra/src/hessenberg.jl	/^function rdiv!(B::AbstractMatrix, F::UpperHessenberg; shift::Number=false)$/;"	f
rdiv!	stdlib/LinearAlgebra/src/hessenberg.jl	/^function rdiv!(B::AbstractVecOrMat{<:Complex}, F::Hessenberg{<:Complex,<:Any,<:AbstractMatrix{<:/;"	f
rdiv!	stdlib/LinearAlgebra/src/hessenberg.jl	/^rdiv!(B::AbstractMatrix, F::Adjoint{<:Any,<:Hessenberg}) = ldiv!(F', B')'$/;"	f
rdiv!	stdlib/LinearAlgebra/src/ldlt.jl	/^rdiv!(B::AbstractVecOrMat, S::LDLt{<:Any,<:SymTridiagonal}) =$/;"	f
rdiv!	stdlib/LinearAlgebra/src/lu.jl	/^function rdiv!(A::StridedVecOrMat, B::LU{<:Any,<:StridedMatrix})$/;"	f
rdiv!	stdlib/LinearAlgebra/src/lu.jl	/^rdiv!(B::AbstractMatrix, A::Adjoint{<:Any,<:LU}) = adjoint(ldiv!(A.parent, adjoint(B)))$/;"	f
rdiv!	stdlib/LinearAlgebra/src/lu.jl	/^rdiv!(B::AbstractMatrix, A::LU) = transpose(ldiv!(transpose(A), transpose(B)))$/;"	f
rdiv!	stdlib/LinearAlgebra/src/lu.jl	/^rdiv!(B::AbstractMatrix, A::Transpose{<:Any,<:LU}) = transpose(ldiv!(A.parent, transpose(B)))$/;"	f
rdiv!	stdlib/LinearAlgebra/src/triangular.jl	/^        rdiv!(A::StridedMatrix{T}, B::$t{T,<:StridedMatrix}) where {T<:BlasFloat} =$/;"	f
rdiv!	stdlib/LinearAlgebra/src/triangular.jl	/^        rdiv!(A::StridedMatrix{T}, adjB::Adjoint{<:Any,<:$t{T,<:StridedMatrix}}) where {T<:BlasC/;"	f
rdiv!	stdlib/LinearAlgebra/src/triangular.jl	/^        rdiv!(A::StridedMatrix{T}, adjB::Adjoint{<:Any,<:$t{T,<:StridedMatrix}}) where {T<:BlasR/;"	f
rdiv!	stdlib/LinearAlgebra/src/triangular.jl	/^        rdiv!(A::StridedMatrix{T}, transB::Transpose{<:Any,<:$t{T,<:StridedMatrix}}) where {T<:B/;"	f
rdiv!	stdlib/LinearAlgebra/src/triangular.jl	/^function rdiv!(A::StridedMatrix, B::LowerTriangular)$/;"	f
rdiv!	stdlib/LinearAlgebra/src/triangular.jl	/^function rdiv!(A::StridedMatrix, B::UnitLowerTriangular)$/;"	f
rdiv!	stdlib/LinearAlgebra/src/triangular.jl	/^function rdiv!(A::StridedMatrix, B::UnitUpperTriangular)$/;"	f
rdiv!	stdlib/LinearAlgebra/src/triangular.jl	/^function rdiv!(A::StridedMatrix, B::UpperTriangular)$/;"	f
rdiv!	stdlib/LinearAlgebra/src/triangular.jl	/^function rdiv!(A::StridedMatrix, adjB::Adjoint{<:Any,<:LowerTriangular})$/;"	f
rdiv!	stdlib/LinearAlgebra/src/triangular.jl	/^function rdiv!(A::StridedMatrix, adjB::Adjoint{<:Any,<:UnitLowerTriangular})$/;"	f
rdiv!	stdlib/LinearAlgebra/src/triangular.jl	/^function rdiv!(A::StridedMatrix, adjB::Adjoint{<:Any,<:UnitUpperTriangular})$/;"	f
rdiv!	stdlib/LinearAlgebra/src/triangular.jl	/^function rdiv!(A::StridedMatrix, adjB::Adjoint{<:Any,<:UpperTriangular})$/;"	f
rdiv!	stdlib/LinearAlgebra/src/triangular.jl	/^function rdiv!(A::StridedMatrix, transB::Transpose{<:Any,<:LowerTriangular})$/;"	f
rdiv!	stdlib/LinearAlgebra/src/triangular.jl	/^function rdiv!(A::StridedMatrix, transB::Transpose{<:Any,<:UnitLowerTriangular})$/;"	f
rdiv!	stdlib/LinearAlgebra/src/triangular.jl	/^function rdiv!(A::StridedMatrix, transB::Transpose{<:Any,<:UnitUpperTriangular})$/;"	f
rdiv!	stdlib/LinearAlgebra/src/triangular.jl	/^function rdiv!(A::StridedMatrix, transB::Transpose{<:Any,<:UpperTriangular})$/;"	f
rdiv!	stdlib/LinearAlgebra/src/triangular.jl	/^rdiv!(A::LowerTriangular, B::Union{LowerTriangular,UnitLowerTriangular}) =$/;"	f
rdiv!	stdlib/LinearAlgebra/src/triangular.jl	/^rdiv!(A::LowerTriangular, adjB::Adjoint{<:Any,<:Union{UpperTriangular,UnitUpperTriangular}}) =$/;"	f
rdiv!	stdlib/LinearAlgebra/src/triangular.jl	/^rdiv!(A::LowerTriangular, transB::Transpose{<:Any,<:Union{UpperTriangular,UnitUpperTriangular}})/;"	f
rdiv!	stdlib/LinearAlgebra/src/triangular.jl	/^rdiv!(A::UpperTriangular, B::Union{UpperTriangular,UnitUpperTriangular}) =$/;"	f
rdiv!	stdlib/LinearAlgebra/src/triangular.jl	/^rdiv!(A::UpperTriangular, adjB::Adjoint{<:Any,<:Union{LowerTriangular,UnitLowerTriangular}}) =$/;"	f
rdiv!	stdlib/LinearAlgebra/src/triangular.jl	/^rdiv!(A::UpperTriangular, transB::Transpose{<:Any,<:Union{LowerTriangular,UnitLowerTriangular}})/;"	f
rdiv!	stdlib/LinearAlgebra/src/tridiag.jl	/^rdiv!(B::AbstractVecOrMat, A::SymTridiagonal; shift::Number=false) = rdiv!(B, ldlt(A, shift=shif/;"	f
rdiv!	stdlib/LinearAlgebra/src/uniformscaling.jl	/^rdiv!(A::AbstractMatrix, J::UniformScaling) = rdiv!(A, J.λ)$/;"	f
rdiv!	stdlib/SparseArrays/src/linalg.jl	/^function rdiv!(A::AbstractSparseMatrixCSC{T}, D::Diagonal{T}) where T$/;"	f
rdiv!	stdlib/SparseArrays/src/linalg.jl	/^rdiv!(A::AbstractSparseMatrixCSC{T}, adjD::Adjoint{<:Any,<:Diagonal{T}}) where {T} =$/;"	f
rdiv!	stdlib/SparseArrays/src/linalg.jl	/^rdiv!(A::AbstractSparseMatrixCSC{T}, transD::Transpose{<:Any,<:Diagonal{T}}) where {T} =$/;"	f
rdst	src/flisp/flisp.h	/^    void *rdst;$/;"	m	struct:_ectx_t	typeref:typename:void *
rdsym	src/flisp/flisp.h	/^    value_t iostreamsym, rdsym, wrsym, apsym, crsym, truncsym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
rdtscp	src/timing.h	/^static inline uint64_t rdtscp(void)$/;"	f	typeref:typename:uint64_t
re_array_of_tables	base/loading.jl	/^const re_array_of_tables    = r"^\\s*\\[\\s*\\["$/;"	v
re_deps_to_any	base/loading.jl	/^const re_deps_to_any        = r"^\\s*deps\\s*=\\s*(.*?)\\s*(?:#|$)"$/;"	v
re_hash_to_string	base/loading.jl	/^const re_hash_to_string     = r"^\\s*git-tree-sha1\\s*=\\s*\\"(.*)\\"\\s*(?:#|$)"$/;"	v
re_key_to_string	base/loading.jl	/^const re_key_to_string      = r"^\\s*(\\w+)\\s*=\\s*\\"(.*)\\"\\s*(?:#|$)"$/;"	v
re_manifest_to_string	base/loading.jl	/^const re_manifest_to_string = r"^\\s*manifest\\s*=\\s*\\"(.*)\\"\\s*(?:#|$)"$/;"	v
re_name_to_string	base/loading.jl	/^const re_name_to_string     = r"^\\s*name\\s*=\\s*\\"(.*)\\"\\s*(?:#|$)"$/;"	v
re_path_to_string	base/loading.jl	/^const re_path_to_string     = r"^\\s*path\\s*=\\s*\\"(.*)\\"\\s*(?:#|$)"$/;"	v
re_section	base/loading.jl	/^const re_section            = r"^\\s*\\["$/;"	v
re_section_capture	base/loading.jl	/^const re_section_capture    = r"^\\s*\\[\\s*\\[\\s*\\"?(\\w+)\\"?\\s*\\]\\s*\\]\\s*(?:#|$)"$/;"	v
re_section_deps	base/loading.jl	/^const re_section_deps       = r"^\\s*\\[\\s*\\"?deps\\"?\\s*\\]\\s*(?:#|$)"$/;"	v
re_subsection_deps	base/loading.jl	/^const re_subsection_deps    = r"^\\s*\\[\\s*\\"?(\\w+)\\"?\\s*\\.\\s*\\"?deps\\"?\\s*\\]\\s*(?:#/;"	v
re_uuid_to_string	base/loading.jl	/^const re_uuid_to_string     = r"^\\s*uuid\\s*=\\s*\\"(.*)\\"\\s*(?:#|$)"$/;"	v
read	base/complex.jl	/^function read(s::IO, ::Type{Complex{T}}) where T<:Real$/;"	f
read	base/coreio.jl	/^read(::DevNull, ::Type{UInt8}) = throw(EOFError())$/;"	f
read	base/filesystem.jl	/^function read(f::File, ::Type{Char})$/;"	f
read	base/filesystem.jl	/^function read(f::File, ::Type{UInt8})$/;"	f
read	base/filesystem.jl	/^read(f::File, ::Type{T}) where {T<:AbstractChar} = T(read(f, Char)) # fallback$/;"	f
read	base/filesystem.jl	/^read(io::File) = read!(io, Base.StringVector(bytesavailable(io)))$/;"	f
read	base/filesystem.jl	/^read(io::File, nb::Integer) = read!(io, Base.StringVector(min(nb, bytesavailable(io))))$/;"	f
read	base/io.jl	/^function read(io::IO, ::Type{Char})$/;"	f
read	base/io.jl	/^function read(s::IO, T::Union{Type{Int16},Type{UInt16},Type{Int32},Type{UInt32},Type{Int64},Type/;"	f
read	base/io.jl	/^function read(s::IO, nb::Integer = typemax(Int))$/;"	f
read	base/io.jl	/^read(filename::AbstractString, ::Type{T}) where {T} = open(io->read(io, T), filename)$/;"	f
read	base/io.jl	/^read(filename::AbstractString, args...) = open(io->read(io, args...), filename)$/;"	f
read	base/io.jl	/^read(io::AbstractPipe) = read(pipe_reader(io))$/;"	f
read	base/io.jl	/^read(io::AbstractPipe, byte::Type{UInt8}) = read(pipe_reader(io), byte)$/;"	f
read	base/io.jl	/^read(s::IO, ::Type{Bool}) = (read(s, UInt8) != 0)$/;"	f
read	base/io.jl	/^read(s::IO, ::Type{Int8}) = reinterpret(Int8, read(s, UInt8))$/;"	f
read	base/io.jl	/^read(s::IO, ::Type{Ptr{T}}) where {T} = convert(Ptr{T}, read(s, UInt))$/;"	f
read	base/io.jl	/^read(s::IO, ::Type{String}) = String(read(s))$/;"	f
read	base/io.jl	/^read(s::IO, ::Type{UInt8}) = error(typeof(s)," does not support byte I\/O")$/;"	f
read	base/io.jl	/^read(s::IO, T::Type) = error("The IO stream does not support reading objects of type $T.")$/;"	f
read	base/iobuffer.jl	/^@inline function read(from::GenericIOBuffer, ::Type{UInt8})$/;"	f
read	base/iobuffer.jl	/^function read(from::GenericIOBuffer, T::Union{Type{Int16},Type{UInt16},Type{Int32},Type{UInt32},/;"	f
read	base/iobuffer.jl	/^read(from::GenericIOBuffer, ::Type{Ptr{T}}) where {T} = convert(Ptr{T}, read(from, UInt))$/;"	f
read	base/iobuffer.jl	/^read(io::GenericIOBuffer) = read!(io,StringVector(bytesavailable(io)))$/;"	f
read	base/iobuffer.jl	/^read(io::GenericIOBuffer, nb::Integer) = read!(io,StringVector(min(nb, bytesavailable(io))))$/;"	f
read	base/iostream.jl	/^function read(s::IOStream)$/;"	f
read	base/iostream.jl	/^function read(s::IOStream, ::Type{UInt8})$/;"	f
read	base/iostream.jl	/^function read(s::IOStream, T::Union{Type{Int16},Type{UInt16},Type{Int32},Type{UInt32},Type{Int64/;"	f
read	base/iostream.jl	/^function read(s::IOStream, nb::Integer; all::Bool=true)$/;"	f
read	base/iostream.jl	/^read(s::IOStream, ::Type{Float16}) = reinterpret(Float16, read(s, Int16))$/;"	f
read	base/iostream.jl	/^read(s::IOStream, ::Type{Float32}) = reinterpret(Float32, read(s, Int32))$/;"	f
read	base/iostream.jl	/^read(s::IOStream, ::Type{Float64}) = reinterpret(Float64, read(s, Int64))$/;"	f
read	base/process.jl	/^function read(cmd::AbstractCmd)$/;"	f
read	base/process.jl	/^read(cmd::AbstractCmd, ::Type{String}) = String(read(cmd))$/;"	f
read	base/rational.jl	/^function read(s::IO, ::Type{Rational{T}}) where T<:Integer$/;"	f
read	base/secretbuffer.jl	/^function read(io::SecretBuffer, ::Type{UInt8})$/;"	f
read	base/stream.jl	/^function read(s::BufferStream, ::Type{UInt8})$/;"	f
read	base/stream.jl	/^function read(stream::LibuvStream)$/;"	f
read	base/stream.jl	/^function read(this::LibuvStream, ::Type{UInt8})$/;"	f
read	test/compiler/inference.jl	/^    @test read(`$(Base.julia_cmd()) --startup-file=no -E "$def;test(t) = t[2,1,2];test(((3,4), (/;"	f
read	test/docs.jl	/^read(x) = x$/;"	f
read	test/show.jl	/^        @test read(fname, String) == "zeros(2, 2) = [0.0 0.0; 0.0 0.0]\\n"$/;"	f
read!	base/bitarray.jl	/^function read!(s::IO, B::BitArray)$/;"	f
read!	base/io.jl	/^function read! end$/;"	f
read!	base/io.jl	/^function read!(s::IO, a::Array{T}) where T$/;"	f
read!	base/io.jl	/^function read!(s::IO, a::Array{UInt8})$/;"	f
read!	base/io.jl	/^read!(filename::AbstractString, a) = open(io->read!(io, a), filename)$/;"	f
read!	base/io.jl	/^read!(s::IO, x::Ref{T}) where {T} = (unsafe_read(s, x, Core.sizeof(T)); x)$/;"	f
read!	stdlib/LibGit2/src/index.jl	/^function read!(idx::GitIndex, force::Bool = false)$/;"	f
read!	stdlib/LibGit2/src/index.jl	/^function read!(repo::GitRepo, force::Bool = false)$/;"	f
read-char	src/flisp/aliases.scm	/^(define (read-char (s *input-stream*)) (io.getc s))$/;"	f
read-number	src/julia-parser.scm	/^(define (read-number port leadingdot neg)$/;"	f
read-operator	src/julia-parser.scm	/^(define (read-operator port c)$/;"	f
read-u8	src/bin2hex.scm	/^(define (read-u8) (io.read *input-stream* 'uint8))$/;"	f
read21311	test/compiler/inline.jl	/^function read21311()$/;"	f
readF	src/flisp/read.c	/^#define readF(/;"	d	file:
readFile	deps/srccache/patchelf-0.9/src/patchelf.cc	/^static void readFile(string fileName)$/;"	f	typeref:typename:void	file:
readKey	stdlib/REPL/src/TerminalMenus/util.jl	/^readKey(stream::IO=stdin) = UInt32(_readKey(stream))$/;"	f
readNextChar	stdlib/REPL/src/TerminalMenus/util.jl	/^readNextChar(stream::IO=stdin) = Char(read(stream,1)[1])$/;"	f
read_dependency_src	base/loading.jl	/^function read_dependency_src(cachefile::String, filename::AbstractString)$/;"	f
read_dependency_src	base/loading.jl	/^function read_dependency_src(io::IO, filename::AbstractString)$/;"	f
read_escape_control_char	src/support/utf8.c	/^char read_escape_control_char(char c)$/;"	f	typeref:typename:char
read_file5374	test/core.jl	/^function read_file5374(fileobj)$/;"	f
read_int32	src/dump.c	/^static int32_t read_int32(ios_t *s) JL_NOTSAFEPOINT$/;"	f	typeref:typename:int32_t	file:
read_int8	src/dump.c	/^#define read_int8(/;"	d	file:
read_list	src/flisp/read.c	/^static void read_list(fl_context_t *fl_ctx, value_t *pval, value_t label)$/;"	f	typeref:typename:void	file:
read_numtok	src/flisp/read.c	/^static int read_numtok(fl_context_t *fl_ctx, char *tok, value_t *pval, int base)$/;"	f	typeref:typename:int	file:
read_sparse	stdlib/SuiteSparse/src/cholmod.jl	/^function read_sparse(file::IO, T)$/;"	f
read_sparse	stdlib/SuiteSparse/src/cholmod.jl	/^function read_sparse(file::Libc.FILE, ::Type{SuiteSparse_long})$/;"	f
read_string	src/flisp/read.c	/^static value_t read_string(fl_context_t *fl_ctx)$/;"	f	typeref:typename:value_t	file:
read_sub	base/iobuffer.jl	/^function read_sub(from::GenericIOBuffer, a::AbstractArray{T}, offs, nel) where T$/;"	f
read_to_buffer	stdlib/Base64/src/buffer.jl	/^function read_to_buffer(io::IO, buffer::Buffer)$/;"	f
read_token	src/flisp/read.c	/^static int read_token(fl_context_t *fl_ctx, char c, int digits)$/;"	f	typeref:typename:int	file:
read_tree!	stdlib/LibGit2/src/index.jl	/^function read_tree!(idx::GitIndex, tree::GitTree)$/;"	f
read_tree!	stdlib/LibGit2/src/index.jl	/^read_tree!(idx::GitIndex, hash::AbstractGitHash) =$/;"	f
read_uint16	src/dump.c	/^static uint16_t read_uint16(ios_t *s) JL_NOTSAFEPOINT$/;"	f	typeref:typename:uint16_t	file:
read_uint32	src/staticdata.c	/^static uint32_t read_uint32(ios_t *s) JL_NOTSAFEPOINT$/;"	f	typeref:typename:uint32_t	file:
read_uint64	src/dump.c	/^static uint64_t read_uint64(ios_t *s) JL_NOTSAFEPOINT$/;"	f	typeref:typename:uint64_t	file:
read_uint8	src/dump.c	/^#define read_uint8(/;"	d	file:
read_uint8	src/staticdata.c	/^#define read_uint8(/;"	d	file:
read_until_end	stdlib/Base64/src/decode.jl	/^function read_until_end(pipe::Base64DecodePipe, ptr::Ptr{UInt8}, n::UInt)$/;"	f
read_vector	src/flisp/read.c	/^static value_t read_vector(fl_context_t *fl_ctx, value_t label, uint32_t closer)$/;"	f	typeref:typename:value_t	file:
read_verify_mod_list	src/dump.c	/^static jl_value_t *read_verify_mod_list(ios_t *s, arraylist_t *dependent_worlds, jl_array_t *mod/;"	f	typeref:typename:jl_value_t *	file:
read_worker_host_port	stdlib/Distributed/src/cluster.jl	/^function read_worker_host_port(io::IO)$/;"	f
readable_pointer	src/stackwalk.c	/^static int readable_pointer(LPCVOID pointer)$/;"	f	typeref:typename:int	file:
readavailable	base/filesystem.jl	/^readavailable(io::File) = read(io)$/;"	f
readavailable	base/io.jl	/^function readavailable end$/;"	f
readavailable	base/iobuffer.jl	/^readavailable(io::GenericIOBuffer) = read(io)$/;"	f
readavailable	base/iostream.jl	/^function readavailable(s::IOStream)$/;"	f
readavailable	base/stream.jl	/^function readavailable(this::LibuvStream)$/;"	f
readbuf	src/flisp/flisp.h	/^    char readbuf[256];$/;"	m	struct:_fl_context_t	typeref:typename:char[256]
readbytes!	base/filesystem.jl	/^function readbytes!(f::File, b::Array{UInt8}, nb=length(b))$/;"	f
readbytes!	base/io.jl	/^function readbytes!(s::IO, b::AbstractArray{UInt8}, nb=length(b))$/;"	f
readbytes!	base/iobuffer.jl	/^function readbytes!(io::GenericIOBuffer, b::Array{UInt8}, nb::Int)$/;"	f
readbytes!	base/iobuffer.jl	/^readbytes!(io::GenericIOBuffer, b::Array{UInt8}, nb=length(b)) = readbytes!(io, b, Int(nb))$/;"	f
readbytes!	base/iostream.jl	/^function readbytes!(s::IOStream, b::Array{UInt8}, nb=length(b); all::Bool=true)$/;"	f
readbytes!	base/stream.jl	/^function readbytes!(s::LibuvStream, a::Vector{UInt8}, nb::Int)$/;"	f
readbytes!	base/stream.jl	/^readbytes!(s::LibuvStream, a::Vector{UInt8}, nb = length(a)) = readbytes!(s, a, Int(nb))$/;"	f
readbytes_all!	base/iostream.jl	/^function readbytes_all!(s::IOStream, b::Array{UInt8}, nb)$/;"	f
readbytes_some!	base/iostream.jl	/^function readbytes_some!(s::IOStream, b::Array{UInt8}, nb)$/;"	f
readcb_specialized	base/stream.jl	/^    function readcb_specialized(stream::LibuvStream, nread::Int, nrequested::UInt)$/;"	f
readchomp	base/io.jl	/^readchomp(x) = chomp(read(x, String))$/;"	f
readchomperrors	test/cmdlineargs.jl	/^function readchomperrors(exename::Cmd)$/;"	f
readchomperrors	test/stack_overflow.jl	/^    @show readchomperrors(`$exename -e "f() = f(); f()"`)$/;"	f
readchomperrors	test/stack_overflow.jl	/^    @show readchomperrors(`$exename -e "f() = f(); fetch(@schedule f())"`)$/;"	f
readchomperrors	test/stack_overflow.jl	/^function readchomperrors(exename::Cmd)$/;"	f
readdir	base/file.jl	/^function readdir(dir::AbstractString=pwd(); join::Bool=false)$/;"	f
readdlm	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^readdlm(input, T::Type; opts...) = readdlm(input, invalid_dlm(Char), T, '\\n'; opts...)$/;"	f
readdlm	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^readdlm(input, dlm::AbstractChar, T::Type, eol::AbstractChar; opts...) =$/;"	f
readdlm	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^readdlm(input, dlm::AbstractChar, T::Type; opts...) = readdlm(input, dlm, T, '\\n'; opts...)$/;"	f
readdlm	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^readdlm(input, dlm::AbstractChar, eol::AbstractChar; opts...) =$/;"	f
readdlm	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^readdlm(input, dlm::AbstractChar; opts...) = readdlm(input, dlm, '\\n'; opts...)$/;"	f
readdlm	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^readdlm(input; opts...) = readdlm(input, invalid_dlm(Char), '\\n'; opts...)$/;"	f
readdlm_auto	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^function readdlm_auto(input::AbstractString, dlm::AbstractChar, T::Type, eol::AbstractChar, auto/;"	f
readdlm_auto	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^readdlm_auto(input::IO, dlm::AbstractChar, T::Type, eol::AbstractChar, auto::Bool; opts...) =$/;"	f
readdlm_auto	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^readdlm_auto(input::Vector{UInt8}, dlm::AbstractChar, T::Type, eol::AbstractChar, auto::Bool; op/;"	f
readdlm_string	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^function readdlm_string(sbuff::String, dlm::AbstractChar, T::Type, eol::AbstractChar, auto::Bool/;"	f
readline	base/io.jl	/^function readline(filename::AbstractString; keep::Bool=false)$/;"	f
readline	base/io.jl	/^function readline(s::IO=stdin; keep::Bool=false)::String$/;"	f
readline	base/iostream.jl	/^function readline(s::IOStream; keep::Bool=false)$/;"	f
readlines	base/io.jl	/^function readlines(filename::AbstractString; kw...)$/;"	f
readlines	base/io.jl	/^readlines(s=stdin; kw...) = collect(eachline(s; kw...))$/;"	f
readlink	base/file.jl	/^function readlink(path::AbstractString)$/;"	f
readme	stdlib/LibGit2/src/tree.jl	/^readme = tree["README.md"]$/;"	v
readsplit	test/cmdlineargs.jl	/^        readsplit(cmd) = split(readchomp(cmd), '\\n')$/;"	f
readstate	src/flisp/flisp.h	/^    struct _fl_readstate_t *readstate;$/;"	m	struct:_fl_context_t	typeref:struct:_fl_readstate_t *
readstr_verify	src/dump.c	/^static int readstr_verify(ios_t *s, const char *str)$/;"	f	typeref:typename:int	file:
readtoktype	src/flisp/flisp.h	/^    uint32_t readtoktype;$/;"	m	struct:_fl_context_t	typeref:typename:uint32_t
readtokval	src/flisp/flisp.h	/^    value_t readtokval;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
readuntil	base/io.jl	/^function readuntil(io::IO, target::AbstractString; keep::Bool=false)$/;"	f
readuntil	base/io.jl	/^function readuntil(io::IO, target::AbstractVector{T}; keep::Bool=false) where T$/;"	f
readuntil	base/io.jl	/^function readuntil(s::IO, delim::AbstractChar; keep::Bool=false)$/;"	f
readuntil	base/io.jl	/^function readuntil(s::IO, delim::T; keep::Bool=false) where T$/;"	f
readuntil	base/io.jl	/^readuntil(filename::AbstractString, args...; kw...) = open(io->readuntil(io, args...; kw...), fi/;"	f
readuntil	base/io.jl	/^readuntil(io::AbstractPipe, arg::AbstractChar; kw...) = readuntil(pipe_reader(io), arg; kw...)$/;"	f
readuntil	base/io.jl	/^readuntil(io::AbstractPipe, arg::AbstractString; kw...) = readuntil(pipe_reader(io), arg; kw...)$/;"	f
readuntil	base/io.jl	/^readuntil(io::AbstractPipe, arg::AbstractVector; kw...) = readuntil(pipe_reader(io), arg; kw...)$/;"	f
readuntil	base/io.jl	/^readuntil(io::AbstractPipe, arg::UInt8; kw...) = readuntil(pipe_reader(io), arg; kw...)$/;"	f
readuntil	base/iobuffer.jl	/^function readuntil(io::GenericIOBuffer, delim::UInt8; keep::Bool=false)$/;"	f
readuntil	base/iostream.jl	/^function readuntil(s::IOStream, delim::UInt8; keep::Bool=false)$/;"	f
readuntil	base/stream.jl	/^function readuntil(s::BufferStream, c::UInt8; keep::Bool=false)$/;"	f
readuntil	base/stream.jl	/^function readuntil(x::LibuvStream, c::UInt8; keep::Bool=false)$/;"	f
readuntil	stdlib/Markdown/src/parse/util.jl	/^function readuntil(stream::IO, delimiter; newlines = false, match = nothing)$/;"	f
readuntil_string	base/io.jl	/^readuntil_string(s::IO, delim::UInt8, keep::Bool) = String(readuntil(s, delim, keep=keep))$/;"	f
readuntil_string	base/iostream.jl	/^function readuntil_string(s::IOStream, delim::UInt8, keep::Bool)$/;"	f
readuntil_vector!	base/io.jl	/^function readuntil_vector!(io::IO, target::AbstractVector{T}, keep::Bool, out) where {T}$/;"	f
readuntil_vector!	base/io.jl	/^readuntil_vector!(io::AbstractPipe, target::AbstractVector, keep::Bool, out) = readuntil_vector!/;"	f
real	base/abstractarraymath.jl	/^real(x::AbstractArray{<:Real}) = x$/;"	f
real	base/complex.jl	/^real(::Type{T}) where {T<:Real} = T$/;"	f
real	base/complex.jl	/^real(C::Type{<:Complex}) = fieldtype(C, 1)$/;"	f
real	base/complex.jl	/^real(T::Type) = typeof(real(zero(T)))$/;"	f
real	base/complex.jl	/^real(x::Real) = x$/;"	f
real	base/complex.jl	/^real(z::Complex) = z.re$/;"	f
real	src/ccalltest.c	/^    jint real;$/;"	m	struct:__anon84ad8c4c0108	typeref:typename:jint	file:
real	stdlib/LinearAlgebra/src/diagonal.jl	/^real(D::Diagonal) = Diagonal(real(D.diag))$/;"	f
real	stdlib/LinearAlgebra/src/hessenberg.jl	/^real(H::UpperHessenberg{<:Complex}) = UpperHessenberg(triu!(real(H.data),-1))$/;"	f
real	stdlib/LinearAlgebra/src/hessenberg.jl	/^real(H::UpperHessenberg{<:Real}) = H$/;"	f
real	stdlib/LinearAlgebra/src/symmetric.jl	/^real(A::Hermitian) = Hermitian(real(A.data), sym_uplo(A.uplo))$/;"	f
real	stdlib/LinearAlgebra/src/symmetric.jl	/^real(A::Hermitian{<:Real}) = A$/;"	f
real	stdlib/LinearAlgebra/src/symmetric.jl	/^real(A::Symmetric) = Symmetric(real(A.data), sym_uplo(A.uplo))$/;"	f
real	stdlib/LinearAlgebra/src/symmetric.jl	/^real(A::Symmetric{<:Real}) = A$/;"	f
real	stdlib/LinearAlgebra/src/triangular.jl	/^        real(A::$t{<:Complex}) = (B = real(A.data); $t(B))$/;"	f
real	stdlib/LinearAlgebra/src/triangular.jl	/^        real(A::$t{<:Real}) = A$/;"	f
realXcY	stdlib/Statistics/src/Statistics.jl	/^realXcY(x::Complex, y::Complex) = real(x)*real(y) + imag(x)*imag(y)$/;"	f
realXcY	stdlib/Statistics/src/Statistics.jl	/^realXcY(x::Real, y::Real) = x*y$/;"	f
real_types	test/numbers.jl	/^real_types = [Base.BitInteger64_types...,$/;"	v
realloc	base/libc.jl	/^realloc(p::Ptr, size::Integer) = ccall(:realloc, Ptr{Cvoid}, (Ptr{Cvoid}, Csize_t), p, size)$/;"	f
realloc	src/gc.h	/^    uint64_t    realloc;$/;"	m	struct:__anoncf30557c0308	typeref:typename:uint64_t
realloc	src/julia_threads.h	/^    uint64_t    realloc;$/;"	m	struct:__anonf8aecdb10508	typeref:typename:uint64_t
realloc2	base/gmp.jl	/^realloc2(a) = realloc2!(BigInt(), a)$/;"	f
realloc2!	base/gmp.jl	/^realloc2!(x, a) = (ccall((:__gmpz_realloc2, :libgmp), Cvoid, (mpz_t, bitcnt_t), x, a); x)$/;"	f
realloc_cache_align	src/gc.c	/^#define realloc_cache_align(/;"	d	file:
really_complicated_identity	test/llvmcall.jl	/^    @eval really_complicated_identity(x) = llvmcall($(the_f), Any, Tuple{Any}, x)$/;"	f
realpath	base/path.jl	/^function realpath(path::AbstractString)$/;"	f
rebase!	stdlib/LibGit2/src/LibGit2.jl	/^function rebase!(repo::GitRepo, upstream::AbstractString="", newbase::AbstractString="")$/;"	f
rec_backtrace	src/stackwalk.c	/^size_t rec_backtrace(uintptr_t *data, size_t maxsize)$/;"	f	typeref:typename:size_t
rec_backtrace_ctx	src/stackwalk.c	/^size_t rec_backtrace_ctx(uintptr_t *data, size_t maxsize,$/;"	f	typeref:typename:size_t
rec_backtrace_ctx_dwarf	src/stackwalk.c	/^size_t rec_backtrace_ctx_dwarf(uintptr_t *data, size_t maxsize,$/;"	f	typeref:typename:size_t
recheck	deps/srccache/patchelf-0.9/tests/Makefile.in	/^recheck: all $(check_PROGRAMS)$/;"	t
recompute_type	base/compiler/ssair/slot2ssa.jl	/^function recompute_type(node::Union{PhiNode, PhiCNode}, ci::CodeInfo, ir::IRCode, sptypes::Vecto/;"	f
record	stdlib/Test/src/Test.jl	/^function record end$/;"	f
record	stdlib/Test/src/Test.jl	/^function record(ts::DefaultTestSet, t::Union{Fail, Error})$/;"	f
record	stdlib/Test/src/Test.jl	/^function record(ts::FallbackTestSet, t::Union{Fail,Error})$/;"	f
record	stdlib/Test/src/Test.jl	/^record(ts::DefaultTestSet, t::AbstractTestSet) = push!(ts.results, t)$/;"	f
record	stdlib/Test/src/Test.jl	/^record(ts::DefaultTestSet, t::Broken) = (push!(ts.results, t); t)$/;"	f
record	stdlib/Test/src/Test.jl	/^record(ts::DefaultTestSet, t::Pass) = (ts.n_passed += 1; t)$/;"	f
record	stdlib/Test/src/Test.jl	/^record(ts::FallbackTestSet, t::Union{Pass,Broken}) = t$/;"	f
record	stdlib/Test/src/logging.jl	/^function record(::FallbackTestSet, t::LogTestFailure)$/;"	f
record	stdlib/Test/src/logging.jl	/^function record(ts::DefaultTestSet, t::LogTestFailure)$/;"	f
record	stdlib/Test/test/runtests.jl	/^record(ts::CustomTestSet, child::AbstractTestSet) = push!(ts.results, child)$/;"	f
record	stdlib/Test/test/runtests.jl	/^record(ts::CustomTestSet, res::Result) = push!(ts.results, res)$/;"	f
record_backtrace	src/task.c	/^static void record_backtrace(jl_ptls_t ptls) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void	file:
record_gvar	src/staticdata.c	/^static void record_gvar(jl_serializer_state *s, int gid, uintptr_t reloc_id) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void	file:
record_slot_assign!	base/compiler/typeinfer.jl	/^function record_slot_assign!(sv::InferenceState)$/;"	f
record_ssa_assign	base/compiler/inferencestate.jl	/^function record_ssa_assign(ssa_id::Int, @nospecialize(new), frame::InferenceState)$/;"	f
record_var_occurrence	src/subtype.c	/^static void record_var_occurrence(jl_varbinding_t *vb, jl_stenv_t *e, int param) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void	file:
rectangularQ	stdlib/LinearAlgebra/test/lq.jl	/^rectangularQ(Q::LinearAlgebra.LQPackedQ) = convert(Array, Q)$/;"	f
rectangularQ	stdlib/LinearAlgebra/test/qr.jl	/^rectangularQ(Q::LinearAlgebra.AbstractQ) = convert(Array, Q)$/;"	f
recur_list	src/rtutils.c	/^struct recur_list {$/;"	s	file:
recv	stdlib/Sockets/src/Sockets.jl	/^function recv(sock::UDPSocket)$/;"	f
recvfrom	stdlib/Sockets/src/Sockets.jl	/^function recvfrom(sock::UDPSocket)$/;"	f
redir_err	base/cmd.jl	/^redir_err(src::AbstractCmd, dest::AbstractCmd) = ErrOrCmds(src, dest)$/;"	f
redir_err	base/cmd.jl	/^redir_err(src::AbstractCmd, dest::AbstractString) = CmdRedirect(src, FileRedirect(dest, false), /;"	f
redir_err	base/cmd.jl	/^redir_err(src::AbstractCmd, dest::Redirectable) = CmdRedirect(src, dest, STDERR_NO)$/;"	f
redir_err_append	base/cmd.jl	/^redir_err_append(src::AbstractCmd, dest::AbstractString) = CmdRedirect(src, FileRedirect(dest, t/;"	f
redir_out	base/cmd.jl	/^redir_out(dest::Redirectable, src::AbstractCmd) = CmdRedirect(src, dest, STDIN_NO)$/;"	f
redir_out	base/cmd.jl	/^redir_out(src::AbstractCmd, dest::AbstractCmd) = OrCmds(src, dest)$/;"	f
redir_out	base/cmd.jl	/^redir_out(src::AbstractCmd, dest::AbstractString) = CmdRedirect(src, FileRedirect(dest, false), /;"	f
redir_out	base/cmd.jl	/^redir_out(src::AbstractCmd, dest::Redirectable) = CmdRedirect(src, dest, STDOUT_NO)$/;"	f
redir_out	base/cmd.jl	/^redir_out(src::AbstractString, dest::AbstractCmd) = CmdRedirect(dest, FileRedirect(src, false), /;"	f
redir_out_append	base/cmd.jl	/^redir_out_append(src::AbstractCmd, dest::AbstractString) = CmdRedirect(src, FileRedirect(dest, t/;"	f
redirect_output_from_additional_worker	stdlib/Distributed/src/cluster.jl	/^function redirect_output_from_additional_worker(pid, port)$/;"	f
redirect_worker_output	stdlib/Distributed/src/cluster.jl	/^function redirect_worker_output(ident, stream)$/;"	f
redisplay	base/multimedia.jl	/^function redisplay(@nospecialize x)$/;"	f
redisplay	base/multimedia.jl	/^function redisplay(m::Union{MIME,AbstractString}, @nospecialize x)$/;"	f
redisplay	base/multimedia.jl	/^redisplay(d::AbstractDisplay, @nospecialize x) = display(d, x)$/;"	f
redisplay	base/multimedia.jl	/^redisplay(d::AbstractDisplay, m::Union{MIME,AbstractString}, @nospecialize x) = display(d, m, x)$/;"	f
reduce	base/abstractarray.jl	/^reduce(::typeof(hcat), A::AbstractVector{<:AbstractVecOrMat}) =$/;"	f
reduce	base/abstractarray.jl	/^reduce(::typeof(vcat), A::AbstractVector{<:AbstractVecOrMat}) =$/;"	f
reduce	base/dict.jl	/^function reduce(::typeof(merge), items::Vector{<:Dict})$/;"	f
reduce	base/reduce.jl	/^reduce(op, a::Number) = a  # Do we want this?$/;"	f
reduce	base/reduce.jl	/^reduce(op, itr; kw...) = mapreduce(identity, op, itr; kw...)$/;"	f
reduce	base/reducedim.jl	/^reduce(op, A::AbstractArray; kw...) = mapreduce(identity, op, A; kw...)$/;"	f
reduce	stdlib/SharedArrays/src/SharedArrays.jl	/^reduce(::typeof(hcat), S::SharedVector) = invoke(reduce, Tuple{Any,SharedArray}, hcat, S)$/;"	f
reduce	stdlib/SharedArrays/src/SharedArrays.jl	/^reduce(::typeof(vcat), S::SharedVector) = invoke(reduce, Tuple{Any,SharedArray}, vcat, S)$/;"	f
reduce	stdlib/SharedArrays/src/SharedArrays.jl	/^reduce(f, S::SharedArray) =$/;"	f
reduce_empty	base/reduce.jl	/^reduce_empty(::typeof(&), ::Type{Bool}) = true$/;"	f
reduce_empty	base/reduce.jl	/^reduce_empty(::typeof(*), ::Type{<:AbstractChar}) = ""$/;"	f
reduce_empty	base/reduce.jl	/^reduce_empty(::typeof(*), T) = one(T)$/;"	f
reduce_empty	base/reduce.jl	/^reduce_empty(::typeof(+), ::Type{Bool}) = zero(Int)$/;"	f
reduce_empty	base/reduce.jl	/^reduce_empty(::typeof(+), T) = zero(T)$/;"	f
reduce_empty	base/reduce.jl	/^reduce_empty(::typeof(add_sum), ::Type{T}) where {T<:SmallSigned}  = zero(Int)$/;"	f
reduce_empty	base/reduce.jl	/^reduce_empty(::typeof(add_sum), ::Type{T}) where {T<:SmallUnsigned} = zero(UInt)$/;"	f
reduce_empty	base/reduce.jl	/^reduce_empty(::typeof(add_sum), T) = reduce_empty(+, T)$/;"	f
reduce_empty	base/reduce.jl	/^reduce_empty(::typeof(mul_prod), ::Type{T}) where {T<:SmallSigned}  = one(Int)$/;"	f
reduce_empty	base/reduce.jl	/^reduce_empty(::typeof(mul_prod), ::Type{T}) where {T<:SmallUnsigned} = one(UInt)$/;"	f
reduce_empty	base/reduce.jl	/^reduce_empty(::typeof(mul_prod), T) = reduce_empty(*, T)$/;"	f
reduce_empty	base/reduce.jl	/^reduce_empty(::typeof(|), ::Type{Bool}) = false$/;"	f
reduce_empty	base/reduce.jl	/^reduce_empty(op, T) = _empty_reduce_error()$/;"	f
reduce_first	base/reduce.jl	/^reduce_first(::typeof(*), x::AbstractChar) = string(x)$/;"	f
reduce_first	base/reduce.jl	/^reduce_first(::typeof(+), x::Bool) = Int(x)$/;"	f
reduce_first	base/reduce.jl	/^reduce_first(::typeof(add_sum), x) = reduce_first(+, x)$/;"	f
reduce_first	base/reduce.jl	/^reduce_first(::typeof(add_sum), x::SmallSigned)   = Int(x)$/;"	f
reduce_first	base/reduce.jl	/^reduce_first(::typeof(add_sum), x::SmallUnsigned) = UInt(x)$/;"	f
reduce_first	base/reduce.jl	/^reduce_first(::typeof(mul_prod), x) = reduce_first(*, x)$/;"	f
reduce_first	base/reduce.jl	/^reduce_first(::typeof(mul_prod), x::SmallSigned)   = Int(x)$/;"	f
reduce_first	base/reduce.jl	/^reduce_first(::typeof(mul_prod), x::SmallUnsigned) = UInt(x)$/;"	f
reduce_first	base/reduce.jl	/^reduce_first(op, x) = x$/;"	f
reduced_index	base/reducedim.jl	/^reduced_index(i::AbstractUnitRange) =$/;"	f
reduced_index	base/reducedim.jl	/^reduced_index(i::OneTo) = OneTo(1)$/;"	f
reduced_index	base/reducedim.jl	/^reduced_index(i::Union{Slice, IdentityUnitRange}) = first(i):first(i)$/;"	f
reduced_indices	base/reducedim.jl	/^function reduced_indices(inds::Indices{N}, d::Int) where N$/;"	f
reduced_indices	base/reducedim.jl	/^function reduced_indices(inds::Indices{N}, region) where N$/;"	f
reduced_indices	base/reducedim.jl	/^reduced_indices(a::AbstractArray, region) = reduced_indices(axes(a), region)$/;"	f
reduced_indices0	base/reducedim.jl	/^function reduced_indices0(inds::Indices{N}, d::Int) where N$/;"	f
reduced_indices0	base/reducedim.jl	/^function reduced_indices0(inds::Indices{N}, region) where N$/;"	f
reduced_indices0	base/reducedim.jl	/^reduced_indices0(a::AbstractArray, region) = reduced_indices0(axes(a), region)$/;"	f
reducedim!	base/reducedim.jl	/^reducedim!(op, R::AbstractArray{RT}, A::AbstractArray) where {RT} =$/;"	f
reducedim1	base/reducedim.jl	/^reducedim1(R, A) = length(axes1(R)) == 1$/;"	f
reducedim_init	base/reducedim.jl	/^    @eval function reducedim_init(f, op::typeof($f1), A::AbstractArray, region)$/;"	f
reducedim_init	base/reducedim.jl	/^function reducedim_init(f, op::Union{typeof(*),typeof(mul_prod)}, A::AbstractArray, region)$/;"	f
reducedim_init	base/reducedim.jl	/^function reducedim_init(f, op::Union{typeof(+),typeof(add_sum)}, A::AbstractArray, region)$/;"	f
reducedim_init	base/reducedim.jl	/^reducedim_init(f, op::typeof(&), A::AbstractArray, region) = reducedim_initarray(A, region, true/;"	f
reducedim_init	base/reducedim.jl	/^reducedim_init(f, op::typeof(|), A::AbstractArray, region) = reducedim_initarray(A, region, fals/;"	f
reducedim_init	base/reducedim.jl	/^reducedim_init(f::Union{typeof(abs),typeof(abs2)}, op::typeof(max), A::AbstractArray{T}, region)/;"	f
reducedim_initarray	base/reducedim.jl	/^reducedim_initarray(A::AbstractArray, region, init, ::Type{R}) where {R} = fill!(similar(A,R,red/;"	f
reducedim_initarray	base/reducedim.jl	/^reducedim_initarray(A::AbstractArray, region, init::T) where {T} = reducedim_initarray(A, region/;"	f
reenable_sigint	base/c.jl	/^function reenable_sigint(f::Function)$/;"	f
ref	base/docs/Docs.jl	/^macro ref(x)$/;"	f
ref	src/ast.c	/^    int ref;$/;"	m	struct:_jl_ast_context_t	typeref:typename:int	file:
ref	stdlib/Markdown/test/runtests.jl	/^ref(x) = Reference(x)$/;"	f
ref-to-view	src/julia-syntax.scm	/^(define (ref-to-view expr)$/;"	f
ref_list	stdlib/LibGit2/src/reference.jl	/^function ref_list(repo::GitRepo)$/;"	f
references_name	src/datatype.c	/^static int references_name(jl_value_t *p, jl_typename_t *name) JL_NOTSAFEPOINT$/;"	f	typeref:typename:int	file:
refetch_ptls	src/task.c	/^static jl_ptls_t NOINLINE refetch_ptls(void)$/;"	f	typeref:typename:jl_ptls_t NOINLINE	file:
reflector!	stdlib/LinearAlgebra/src/generic.jl	/^@inline function reflector!(x::AbstractVector)$/;"	f
reflectorApply!	stdlib/LinearAlgebra/src/generic.jl	/^@inline function reflectorApply!(x::AbstractVector, τ::Number, A::StridedMatrix)$/;"	f
refload	src/llvm-alloc-opt.cpp	/^        bool refload:1;$/;"	m	struct:__anon0a1571000111::Optimizer::AllocUseInfo	typeref:typename:bool:1	file:
refresh_line	stdlib/REPL/src/LineEdit.jl	/^refresh_line(s) = refresh_multi_line(s)$/;"	f
refresh_line	stdlib/REPL/src/LineEdit.jl	/^refresh_line(s, termbuf) = refresh_multi_line(termbuf, s)$/;"	f
refresh_multi_line	stdlib/REPL/src/LineEdit.jl	/^function refresh_multi_line(termbuf::TerminalBuffer, s::SearchState)$/;"	f
refresh_multi_line	stdlib/REPL/src/LineEdit.jl	/^function refresh_multi_line(termbuf::TerminalBuffer, terminal::UnixTerminal, buf::IOBuffer, stat/;"	f
refresh_multi_line	stdlib/REPL/src/LineEdit.jl	/^function refresh_multi_line(termbuf::TerminalBuffer, terminal::UnixTerminal,$/;"	f
refresh_multi_line	stdlib/REPL/src/LineEdit.jl	/^function refresh_multi_line(terminal::UnixTerminal, args...; kwargs...)$/;"	f
refresh_multi_line	stdlib/REPL/src/LineEdit.jl	/^refresh_multi_line(s::ModeState; kw...) = refresh_multi_line(terminal(s), s; kw...)$/;"	f
refresh_multi_line	stdlib/REPL/src/LineEdit.jl	/^refresh_multi_line(termbuf::TerminalBuffer, s::ModeState; kw...) = refresh_multi_line(termbuf, t/;"	f
refresh_multi_line	stdlib/REPL/src/LineEdit.jl	/^refresh_multi_line(termbuf::TerminalBuffer, term, s::ModeState; kw...) = (@assert term == termin/;"	f
refs	stdlib/Distributed/test/distributed_exec.jl	/^refs = []$/;"	v
refspec	stdlib/LibGit2/src/remote.jl	/^refspec = "+refs\/heads\/mybranch:refs\/remotes\/origin\/mybranch"$/;"	v
refstore	src/llvm-alloc-opt.cpp	/^        bool refstore:1;$/;"	m	struct:__anon0a1571000111::Optimizer::AllocUseInfo	typeref:typename:bool:1	file:
reftype	stdlib/LibGit2/src/reference.jl	/^function reftype(ref::GitReference)$/;"	f
regex_opts_str	base/regex.jl	/^regex_opts_str(opts) = (isassigned(_regex_opts_str) ? _regex_opts_str[] : init_regex())[opts]$/;"	f
region	stdlib/REPL/src/LineEdit.jl	/^region(s) = Pair(extrema(_region(s))...)$/;"	f
region_active	stdlib/REPL/src/LineEdit.jl	/^region_active(s::ModeState) = :off$/;"	f
region_active	stdlib/REPL/src/LineEdit.jl	/^region_active(s::PromptState) = s.region_active$/;"	f
region_if_active	stdlib/REPL/src/LineEdit.jl	/^region_if_active(s)::Region = is_region_active(s) ? region(s) : position(s)=>position(s)$/;"	f
registerEHFrames	src/cgmemmgr.cpp	/^void RTDyldMemoryManagerJL::registerEHFrames(uint8_t *Addr,$/;"	f	class:__anon06c686bc0111::RTDyldMemoryManagerJL	typeref:typename:void
registerGCChecker	src/clangsa/GCChecker.cpp	/^void registerGCChecker(CheckerManager &mgr) {$/;"	f	namespace:clang::ento	typeref:typename:void
registerObject	src/jitlayers.cpp	/^void JuliaOJIT::DebugObjectRegistrar::registerObject(RTDyldObjHandleT H, const ObjT &Obj,$/;"	f	class:JuliaOJIT::DebugObjectRegistrar	typeref:typename:void
register_eh_frames	src/debuginfo.cpp	/^void register_eh_frames(uint8_t *Addr, size_t Size)$/;"	f	typeref:typename:void
register_root_module	base/loading.jl	/^function register_root_module(m::Module)$/;"	f
register_taskdone_hook	base/task.jl	/^function register_taskdone_hook(t::Task, hook)$/;"	f
register_worker	stdlib/Distributed/src/cluster.jl	/^function register_worker(pg, w)$/;"	f
register_worker	stdlib/Distributed/src/cluster.jl	/^register_worker(w) = register_worker(PGRP, w)$/;"	f
register_worker_streams	stdlib/Distributed/src/cluster.jl	/^function register_worker_streams(w)$/;"	f
registrar	src/jitlayers.h	/^    DebugObjectRegistrar registrar;$/;"	m	class:JuliaOJIT	typeref:typename:DebugObjectRegistrar
rehash!	base/abstractdict.jl	/^function rehash!(d::IdDict, newsz = length(d.ht))$/;"	f
rehash!	base/dict.jl	/^function rehash!(h::Dict{K,V}, newsz = length(h.keys)) where V where K$/;"	f
rehash!	base/set.jl	/^rehash!(s::Set) = (rehash!(s.dict); s)$/;"	f
reim	base/complex.jl	/^reim(z) = (real(z), imag(z))$/;"	f
reindex	base/subarray.jl	/^@generated function reindex(idxs::Tuple{AbstractArray{T,N}, Vararg{Any}}, subidxs::Tuple{Vararg{/;"	f
reindex	base/subarray.jl	/^reindex(::Tuple{}, ::Tuple{}) = ()$/;"	f
reindex	base/subarray.jl	/^reindex(idxs::Tuple{AbstractMatrix, Vararg{Any}}, subidxs::Tuple{Any, Any, Vararg{Any}}) =$/;"	f
reindex	base/subarray.jl	/^reindex(idxs::Tuple{AbstractVector, Vararg{Any}}, subidxs::Tuple{Any, Vararg{Any}}) =$/;"	f
reindex	base/subarray.jl	/^reindex(idxs::Tuple{ScalarIndex, Vararg{Any}}, subidxs::Tuple{Vararg{Any}}) =$/;"	f
reindex	base/subarray.jl	/^reindex(idxs::Tuple{Slice, Vararg{Any}}, subidxs::Tuple{Any, Vararg{Any}}) =$/;"	f
reinit_displays	base/multimedia.jl	/^function reinit_displays()$/;"	f
reinit_list	src/dump.c	/^static arraylist_t reinit_list;$/;"	v	typeref:typename:arraylist_t	file:
reinit_list	src/staticdata.c	/^static arraylist_t reinit_list;$/;"	v	typeref:typename:arraylist_t	file:
reinit_stdio	base/libuv.jl	/^function reinit_stdio()$/;"	f
reinterpret	base/bitarray.jl	/^reinterpret(::Type{Bool}, B::BitArray, dims::NTuple{N,Int}) where {N} = reinterpret(B, dims)$/;"	f
reinterpret	base/bitarray.jl	/^reinterpret(B::BitArray, dims::NTuple{N,Int}) where {N} = reshape(B, dims)$/;"	f
reinterpret	base/essentials.jl	/^reinterpret(::Type{Signed}, x::Float16) = reinterpret(Int16,x)$/;"	f
reinterpret	base/essentials.jl	/^reinterpret(::Type{T}, x) where {T} = bitcast(T, x)$/;"	f
reinterpret	base/essentials.jl	/^reinterpret(::Type{Unsigned}, x::Float16) = reinterpret(UInt16,x)$/;"	f
reinterpret	base/float.jl	/^reinterpret(::Type{Signed}, x::Float32) = reinterpret(Int32, x)$/;"	f
reinterpret	base/float.jl	/^reinterpret(::Type{Signed}, x::Float64) = reinterpret(Int64, x)$/;"	f
reinterpret	base/float.jl	/^reinterpret(::Type{Unsigned}, x::Float32) = reinterpret(UInt32, x)$/;"	f
reinterpret	base/float.jl	/^reinterpret(::Type{Unsigned}, x::Float64) = reinterpret(UInt64, x)$/;"	f
reinterpret	base/reinterpretarray.jl	/^    function reinterpret(::Type{T}, a::A) where {T,N,S,A<:AbstractArray{S, N}}$/;"	f
reinterpret	base/reshapedarray.jl	/^reinterpret(::Type{T}, A::ReshapedArray, dims::Dims) where {T} = reinterpret(T, parent(A), dims)$/;"	f
reject	stdlib/LibGit2/src/gitcredential.jl	/^function reject(cfg::GitConfig, cred::UserPasswordCredential, url::AbstractString)$/;"	f
reject	stdlib/LibGit2/src/gitcredential.jl	/^reject(cfg::GitConfig, cred::AbstractCredential, url::AbstractString) = nothing$/;"	f
reject	stdlib/LibGit2/src/gitcredential.jl	/^reject(helper::GitCredentialHelper, cred::GitCredential) = run(helper, "erase", cred)$/;"	f
reject	stdlib/LibGit2/src/types.jl	/^function reject(cache::CachedCredentials, cred::AbstractCredential, url::AbstractString)$/;"	f
reject	stdlib/LibGit2/src/types.jl	/^function reject(p::CredentialPayload; shred::Bool=true)$/;"	f
relacc	test/complex.jl	/^relacc(x,expected) = abs(x-expected)\/abs(expected)$/;"	f
release	Makefile	/^debug release : % : julia-%$/;"	t
release	base/lock.jl	/^function release(s::Semaphore)$/;"	f
release	src/Makefile	/^release debug: %: libjulia-%$/;"	t
release	src/flisp/Makefile	/^release: $(BUILDDIR)\/$(EXENAME)$(EXE)$/;"	t
release	src/support/Makefile	/^release: $(BUILDDIR)\/libsupport.a$/;"	t
release	test/embedding/Makefile	/^release: $(BIN)\/embedding$(EXE)$/;"	t
release	test/gcext/Makefile	/^release: $(BIN)\/gcext$(EXE)$/;"	t
release	ui/Makefile	/^release debug :  % : julia-%$/;"	t
release-candidate	Makefile	/^release-candidate: release testall$/;"	t
relerr	test/math.jl	/^relerr(z, x) = z == x ? 0.0 : abs(z - x) \/ abs(x)$/;"	f
relerrc	test/math.jl	/^relerrc(z, x) = max(relerr(real(z),real(x)), relerr(imag(z),imag(x)))$/;"	f
relocate	src/flisp/flisp.c	/^static value_t relocate(fl_context_t *fl_ctx, value_t v)$/;"	f	typeref:typename:value_t	file:
relocate	src/flisp/flisp.h	/^    void (*relocate)(fl_context_t *fl_ctx, value_t oldv, value_t newv);$/;"	m	struct:__anonb455601d0308	typeref:typename:void (*)(fl_context_t * fl_ctx,value_t oldv,value_t newv)
relocate_htable	src/flisp/table.c	/^void relocate_htable(fl_context_t *fl_ctx, value_t oldv, value_t newv)$/;"	f	typeref:typename:void
relocate_iostream	src/flisp/iostream.c	/^void relocate_iostream(fl_context_t *fl_ctx, value_t oldv, value_t newv)$/;"	f	typeref:typename:void
relocate_lispvalue	src/flisp/flisp.c	/^value_t relocate_lispvalue(fl_context_t *fl_ctx, value_t v)$/;"	f	typeref:typename:value_t
relocate_typetable	src/flisp/types.c	/^void relocate_typetable(fl_context_t *fl_ctx)$/;"	f	typeref:typename:void
relocated	src/cgmemmgr.cpp	/^    bool relocated;$/;"	m	struct:__anon06c686bc0111::Allocation	typeref:typename:bool	file:
relockall	base/condition.jl	/^relockall(l::AbstractLock, token::Nothing) = lock(l) # internal function for implementing `wait`$/;"	f
relockall	base/lock.jl	/^function relockall(rl::ReentrantLock, n::Int)$/;"	f
relocs	src/llvm-multiversioning.cpp	/^        std::set<uint32_t> relocs{};$/;"	m	struct:__anond5683ea40111::CloneCtx::Target	typeref:typename:std::set<uint32_t>	file:
relocs	src/staticdata.c	/^    ios_t *relocs;$/;"	m	struct:__anonc3a2e68f0108	typeref:typename:ios_t *	file:
relocs_list	src/staticdata.c	/^    arraylist_t relocs_list;$/;"	m	struct:__anonc3a2e68f0108	typeref:typename:arraylist_t	file:
relpath	base/path.jl	/^function relpath(path::String, startpath::String = ".")$/;"	f
relpath	base/path.jl	/^relpath(path::AbstractString, startpath::AbstractString) =$/;"	f
relpath	contrib/relative_path.sh	/^relpath () {$/;"	f
rem	base/bool.jl	/^rem(x::Bool, y::Bool) = y ? false : throw(DivideError())$/;"	f
rem	base/char.jl	/^rem(x::AbstractChar, ::Type{T}) where {T<:Number} = rem(codepoint(x), T)$/;"	f
rem	base/float.jl	/^rem(x::Float32, y::Float32) = rem_float(x, y)$/;"	f
rem	base/float.jl	/^rem(x::Float64, y::Float64) = rem_float(x, y)$/;"	f
rem	base/gmp.jl	/^function rem(x::BigInt, ::Type{T}) where T<:Union{Base.BitUnsigned,Base.BitSigned}$/;"	f
rem	base/gmp.jl	/^rem(x::BigInt, ::Type{Bool}) = !iszero(x) & unsafe_load(x.d) % Bool # never unsafe here$/;"	f
rem	base/gmp.jl	/^rem(x::Integer, ::Type{BigInt}) = BigInt(x)$/;"	f
rem	base/int.jl	/^                @eval rem(x::($from), ::Type{$to}) = convert($to, x)$/;"	f
rem	base/int.jl	/^                @eval rem(x::($from), ::Type{$to}) = sext_int($to, x)$/;"	f
rem	base/int.jl	/^            @eval rem(x::($from), ::Type{$to}) = bitcast($to, x)$/;"	f
rem	base/int.jl	/^            @eval rem(x::($from), ::Type{$to}) = convert($to, x)$/;"	f
rem	base/int.jl	/^            @eval rem(x::($from), ::Type{$to}) = trunc_int($to, x)$/;"	f
rem	base/int.jl	/^    function rem(x::Int128, y::Int128)$/;"	f
rem	base/int.jl	/^    function rem(x::UInt128, y::UInt128)$/;"	f
rem	base/int.jl	/^    rem(x::Int128,  y::Int128)  = checked_srem_int(x, y)$/;"	f
rem	base/int.jl	/^    rem(x::UInt128, y::UInt128) = checked_urem_int(x, y)$/;"	f
rem	base/int.jl	/^rem(x::BitSigned, y::Unsigned) = flipsign(signed(rem(unsigned(abs(x)), y)), x)$/;"	f
rem	base/int.jl	/^rem(x::Integer, ::Type{Bool}) = ((x & 1) != 0)$/;"	f
rem	base/int.jl	/^rem(x::Integer, T::Type{<:Integer}) = convert(T, x)  # `x % T` falls back to `convert`$/;"	f
rem	base/int.jl	/^rem(x::T, ::Type{T}) where {T<:Integer} = x$/;"	f
rem	base/int.jl	/^rem(x::T, y::T) where {T<:BitSigned64} = checked_srem_int(x, y)$/;"	f
rem	base/int.jl	/^rem(x::T, y::T) where {T<:BitUnsigned64} = checked_urem_int(x, y)$/;"	f
rem	base/int.jl	/^rem(x::Unsigned, y::BitSigned) = rem(x, unsigned(abs(y)))$/;"	f
rem	base/math.jl	/^rem(x, y, ::RoundingMode{:Down}) = mod(x,y)$/;"	f
rem	base/math.jl	/^rem(x, y, ::RoundingMode{:ToZero}) = rem(x,y)$/;"	f
rem	base/math.jl	/^rem(x, y, ::RoundingMode{:Up}) = mod(x,-y)$/;"	f
rem	base/math.jl	/^rem(x::Float16, y::Float16, r::RoundingMode{:Nearest}) = Float16(rem(Float32(x), Float32(y), r))$/;"	f
rem	base/math.jl	/^rem(x::Float32, y::Float32, ::RoundingMode{:Nearest}) =$/;"	f
rem	base/math.jl	/^rem(x::Float64, y::Float64, ::RoundingMode{:Nearest}) =$/;"	f
rem	base/mpfr.jl	/^function rem(x::BigFloat, y::BigFloat)$/;"	f
rem	base/mpfr.jl	/^function rem(x::BigFloat, y::BigFloat, ::RoundingMode{:Nearest})$/;"	f
rem	base/multinverses.jl	/^rem(a::T, b::MultiplicativeInverse{T}) where {T} =$/;"	f
rem	base/promotion.jl	/^rem(x::Real, y::Real) = rem(promote(x,y)...)$/;"	f
rem	base/promotion.jl	/^rem(x::T, y::T) where {T<:Real} = no_op_err("rem", T)$/;"	f
rem	src/runtime_intrinsics.c	/^#define rem(/;"	d	file:
rem2pi	base/math.jl	/^function rem2pi end$/;"	f
rem2pi	base/math.jl	/^function rem2pi(x::Float64, ::RoundingMode{:Down})$/;"	f
rem2pi	base/math.jl	/^function rem2pi(x::Float64, ::RoundingMode{:Nearest})$/;"	f
rem2pi	base/math.jl	/^function rem2pi(x::Float64, ::RoundingMode{:ToZero})$/;"	f
rem2pi	base/math.jl	/^function rem2pi(x::Float64, ::RoundingMode{:Up})$/;"	f
rem2pi	base/math.jl	/^function rem2pi(x::Int64, r::RoundingMode)$/;"	f
rem2pi	base/math.jl	/^rem2pi(x::Float16, r::RoundingMode) = Float16(rem2pi(Float64(x), r))$/;"	f
rem2pi	base/math.jl	/^rem2pi(x::Float32, r::RoundingMode) = Float32(rem2pi(Float64(x), r))$/;"	f
rem2pi	base/math.jl	/^rem2pi(x::Int32, r::RoundingMode) = rem2pi(Float64(x), r)$/;"	f
rem2pi	base/mpfr.jl	/^rem2pi(x::BigFloat, r::RoundingMode) = rem(x, 2*BigFloat(pi), r)$/;"	f
rem_bindings	src/julia_threads.h	/^    arraylist_t rem_bindings;$/;"	m	struct:__anonf8aecdb10608	typeref:typename:arraylist_t
rem_fast	base/fastmath.jl	/^rem_fast(x::T, y::T) where {T<:FloatTypes} = rem_float_fast(x, y)$/;"	f
rem_knuth	stdlib/Random/src/generation.jl	/^rem_knuth(a::T, b::T) where {T<:Unsigned} = b != 0 ? a % b : a$/;"	f
rem_knuth	stdlib/Random/src/generation.jl	/^rem_knuth(a::UInt, b::UInt) = a % (b + (b == 0)) + a * (b == 0)$/;"	f
rem_pio2_kernel	base/special/rem_pio2.jl	/^@inline function rem_pio2_kernel(x::Float32)$/;"	f
rem_pio2_kernel	base/special/rem_pio2.jl	/^@inline function rem_pio2_kernel(x::Float64)$/;"	f
remember_object	stdlib/Distributed/src/clusterserialize.jl	/^function remember_object(s::ClusterSerializer, @nospecialize(o), n::UInt64)$/;"	f
remember_object	stdlib/Serialization/src/Serialization.jl	/^function remember_object(s::Serializer, @nospecialize(o), n::UInt64)$/;"	f
remember_object	stdlib/Serialization/src/Serialization.jl	/^remember_object(s::AbstractSerializer, @nospecialize(o), n::UInt64) = nothing$/;"	f
remote	stdlib/Distributed/src/workerpool.jl	/^remote(f) = (args...; kwargs...)->remotecall_fetch(f, default_worker_pool(), args...; kwargs...)$/;"	f
remote	stdlib/Distributed/src/workerpool.jl	/^remote(p::AbstractWorkerPool, f) = (args...; kwargs...)->remotecall_fetch(f, p, args...; kwargs./;"	f
remote	stdlib/LibGit2/src/remote.jl	/^remote = LibGit2.GitRemote(repo, "upstream", repo_url)$/;"	v
remote	stdlib/LibGit2/src/remote.jl	/^remote = LibGit2.GitRemote(repo, "upstream", repo_url, refspec)$/;"	v
remote	stdlib/LibGit2/src/remote.jl	/^remote = LibGit2.GitRemoteAnon(repo, repo_url)$/;"	v
remoteObjectProxyWithErrorHandler:	contrib/mac/frameworkapp/JuliaLauncher/AppDelegate.m	/^    (void (^_Nonnull)(NSError *_Nullable error))handler {$/;"	m	implementation:ExecSandboxController
remoteObjectProxyWithErrorHandler:	contrib/mac/frameworkapp/JuliaLauncher/AppDelegate.m	/^    (void (^_Nonnull)(NSError *_Nullable error))handler;$/;"	m	interface:ExecSandboxController
remote_delete	stdlib/LibGit2/src/remote.jl	/^function remote_delete(repo::GitRepo, remote_name::AbstractString)$/;"	f
remote_do	stdlib/Distributed/src/remotecall.jl	/^function remote_do(f, w::LocalProcess, args...; kwargs...)$/;"	f
remote_do	stdlib/Distributed/src/remotecall.jl	/^function remote_do(f, w::Worker, args...; kwargs...)$/;"	f
remote_do	stdlib/Distributed/src/remotecall.jl	/^remote_do(f, id::Integer, args...; kwargs...) = remote_do(f, worker_from_id(id), args...; kwargs/;"	f
remote_do	stdlib/Distributed/src/workerpool.jl	/^remote_do(f, pool::AbstractWorkerPool, args...; kwargs...) = remotecall_pool(remote_do, f, pool,/;"	f
remote_name	stdlib/LibGit2/src/remote.jl	/^remote_name = "test"$/;"	v
remote_oid1	stdlib/Distributed/test/distributed_exec.jl	/^remote_oid1 = @fetchfrom id_other objectid(v7)$/;"	v
remote_wait	stdlib/Distributed/test/distributed_exec.jl	/^    function remote_wait(c)$/;"	f
remotecall	stdlib/Distributed/src/remotecall.jl	/^function remotecall(f, w::LocalProcess, args...; kwargs...)$/;"	f
remotecall	stdlib/Distributed/src/remotecall.jl	/^function remotecall(f, w::Worker, args...; kwargs...)$/;"	f
remotecall	stdlib/Distributed/src/remotecall.jl	/^remotecall(f, id::Integer, args...; kwargs...) = remotecall(f, worker_from_id(id), args...; kwar/;"	f
remotecall	stdlib/Distributed/src/workerpool.jl	/^remotecall(f, pool::AbstractWorkerPool, args...; kwargs...) = remotecall_pool(remotecall, f, poo/;"	f
remotecall_eval	stdlib/Distributed/src/macros.jl	/^function remotecall_eval(m::Module, pid::Int, ex)$/;"	f
remotecall_eval	stdlib/Distributed/src/macros.jl	/^function remotecall_eval(m::Module, procs, ex)$/;"	f
remotecall_fetch	stdlib/Distributed/src/remotecall.jl	/^function remotecall_fetch(f, w::LocalProcess, args...; kwargs...)$/;"	f
remotecall_fetch	stdlib/Distributed/src/remotecall.jl	/^function remotecall_fetch(f, w::Worker, args...; kwargs...)$/;"	f
remotecall_fetch	stdlib/Distributed/src/remotecall.jl	/^remotecall_fetch(f, id::Integer, args...; kwargs...) =$/;"	f
remotecall_fetch	stdlib/Distributed/src/workerpool.jl	/^remotecall_fetch(f, pool::AbstractWorkerPool, args...; kwargs...) = remotecall_pool(remotecall_f/;"	f
remotecall_fetch	stdlib/Distributed/test/distributed_exec.jl	/^remotecall_fetch(()->eval(:(f16091a() = 2)), wid)$/;"	f
remotecall_pool	stdlib/Distributed/src/workerpool.jl	/^function remotecall_pool(rc_f, f, pool::AbstractWorkerPool, args...; kwargs...)$/;"	f
remotecall_pool	stdlib/Distributed/src/workerpool.jl	/^function remotecall_pool(rc_f, f, pool::CachingPool, args...; kwargs...)$/;"	f
remotecall_wait	stdlib/Distributed/src/remotecall.jl	/^function remotecall_wait(f, w::Worker, args...; kwargs...)$/;"	f
remotecall_wait	stdlib/Distributed/src/remotecall.jl	/^remotecall_wait(f, id::Integer, args...; kwargs...) =$/;"	f
remotecall_wait	stdlib/Distributed/src/remotecall.jl	/^remotecall_wait(f, w::LocalProcess, args...; kwargs...) = wait(remotecall(f, w, args...; kwargs./;"	f
remotecall_wait	stdlib/Distributed/src/workerpool.jl	/^remotecall_wait(f, pool::AbstractWorkerPool, args...; kwargs...) = remotecall_pool(remotecall_wa/;"	f
remoteref_id	stdlib/Distributed/src/remotecall.jl	/^remoteref_id(r::AbstractRemoteRef) = RRID(r.whence, r.id)$/;"	f
remotes	stdlib/LibGit2/src/repository.jl	/^function remotes(repo::GitRepo)$/;"	f
remove!	stdlib/LibGit2/src/index.jl	/^function remove!(idx::GitIndex, files::AbstractString...)$/;"	f
remove!	stdlib/LibGit2/src/index.jl	/^function remove!(repo::GitRepo, files::AbstractString...)$/;"	f
remove-argument-side-effects	src/julia-syntax.scm	/^(define (remove-argument-side-effects e (tup #f))$/;"	f
remove-empty-parameters	src/julia-syntax.scm	/^(define (remove-empty-parameters argl)$/;"	f
removeAlloc	src/llvm-alloc-opt.cpp	/^void Optimizer::removeAlloc(CallInst *orig_inst)$/;"	f	class:__anon0a1571000111::Optimizer	typeref:typename:void
removeGCPreserve	src/llvm-alloc-opt.cpp	/^static void removeGCPreserve(CallInst *call, Instruction *val)$/;"	f	namespace:__anon0a1571000111	typeref:typename:void	file:
removeModule	src/jitlayers.cpp	/^void JuliaOJIT::removeModule(ModuleHandleT H)$/;"	f	class:JuliaOJIT	typeref:typename:void
removeNeeded	deps/srccache/patchelf-0.9/src/patchelf.cc	/^void ElfFile<ElfFileParamNames>::removeNeeded(set<string> libs)$/;"	f	class:ElfFile	typeref:typename:void
removeRPath	deps/srccache/patchelf-0.9/src/patchelf.cc	/^static bool removeRPath = false;$/;"	v	typeref:typename:bool	file:
remove_frames!	base/stacktraces.jl	/^function remove_frames!(stack::StackTrace, m::Module)$/;"	f
remove_frames!	base/stacktraces.jl	/^function remove_frames!(stack::StackTrace, name::Symbol)$/;"	f
remove_frames!	base/stacktraces.jl	/^function remove_frames!(stack::StackTrace, names::Vector{Symbol})$/;"	f
remove_linenums!	base/expr.jl	/^function remove_linenums!(ex::Expr)$/;"	f
remove_linenums!	base/expr.jl	/^function remove_linenums!(src::CodeInfo)$/;"	f
remove_linenums!	base/expr.jl	/^remove_linenums!(ex) = ex$/;"	f
remove_workers_and_test	stdlib/Distributed/test/topology.jl	/^function remove_workers_and_test()$/;"	f
removed	src/llvm-alloc-opt.cpp	/^    SmallVector<CallInst*,6> removed;$/;"	m	struct:__anon0a1571000111::Optimizer	typeref:typename:SmallVector<CallInst *,6>	file:
remset	src/julia_threads.h	/^    arraylist_t *remset;$/;"	m	struct:__anonf8aecdb10608	typeref:typename:arraylist_t *
remset_nptr	src/julia_threads.h	/^    int remset_nptr;$/;"	m	struct:__anonf8aecdb10608	typeref:typename:int
rename	base/file.jl	/^function rename(src::AbstractString, dst::AbstractString)$/;"	f
rename-sig-types	src/julia-syntax.scm	/^(define (rename-sig-types ex namemap)$/;"	f
rename-symbolic-labels	src/macroexpand.scm	/^(define (rename-symbolic-labels e)$/;"	f
rename-symbolic-labels-	src/macroexpand.scm	/^(define (rename-symbolic-labels- e relabels parent-scope)$/;"	f
rename_incoming_edge	base/compiler/ssair/slot2ssa.jl	/^function rename_incoming_edge(old_edge, old_to, result_order, bb_rename)$/;"	f
rename_outgoing_edge	base/compiler/ssair/slot2ssa.jl	/^function rename_outgoing_edge(old_to, old_from, result_order, bb_rename)$/;"	f
rename_phinode_edges	base/compiler/ssair/slot2ssa.jl	/^function rename_phinode_edges(node, bb, result_order, bb_rename)$/;"	f
rename_unionall	base/essentials.jl	/^function rename_unionall(@nospecialize(u))$/;"	f
rename_unionall	src/subtype.c	/^static jl_unionall_t *rename_unionall(jl_unionall_t *u)$/;"	f	typeref:typename:jl_unionall_t *	file:
rename_uses!	base/compiler/ssair/slot2ssa.jl	/^function rename_uses!(ir::IRCode, ci::CodeInfo, idx::Int, @nospecialize(stmt), renames::Vector{A/;"	f
render_pdf	doc/make.jl	/^const render_pdf = "pdf" in ARGS$/;"	v
renumber-assigned-ssavalues	src/julia-syntax.scm	/^(define (renumber-assigned-ssavalues e)$/;"	f
renumber-lambda	src/julia-syntax.scm	/^(define (renumber-lambda lam file line)$/;"	f
renumber_ir_elements!	base/compiler/optimize.jl	/^function renumber_ir_elements!(body::Vector{Any}, changemap::Vector{Int})$/;"	f
renumber_ir_elements!	base/compiler/optimize.jl	/^function renumber_ir_elements!(body::Vector{Any}, ssachangemap::Vector{Int}, labelchangemap::Vec/;"	f
renumber_ssa	base/compiler/ssair/slot2ssa.jl	/^function renumber_ssa(stmt::SSAValue, ssanums::Vector{Any}, new_ssa::Bool=false, used_ssa::Union/;"	f
renumber_ssa!	base/compiler/ssair/slot2ssa.jl	/^function renumber_ssa!(@nospecialize(stmt), ssanums::Vector{Any}, new_ssa::Bool=false, used_ssa:/;"	f
renumber_ssa2	base/compiler/ssair/ir.jl	/^function renumber_ssa2(val::SSAValue, ssanums::Vector{Any}, used_ssa::Vector{Int}, do_rename_ssa/;"	f
renumber_ssa2!	base/compiler/ssair/ir.jl	/^function renumber_ssa2!(@nospecialize(stmt), ssanums::Vector{Any}, used_ssa::Vector{Int}, late_f/;"	f
rep_kw2tup	base/abstractarraymath.jl	/^rep_kw2tup(n::Integer) = (n,)$/;"	f
rep_kw2tup	base/abstractarraymath.jl	/^rep_kw2tup(t::Tuple) = t$/;"	f
rep_kw2tup	base/abstractarraymath.jl	/^rep_kw2tup(v::AbstractArray{<:Integer}) = (v...,)$/;"	f
rep_shapes	base/abstractarraymath.jl	/^rep_shapes(A, i, o) = _rshps((), (), size(A), i, o)$/;"	f
repackage28445	test/core.jl	/^function repackage28445()$/;"	f
repeat	base/abstractarraymath.jl	/^function repeat(A::AbstractArray; inner = nothing, outer = nothing)$/;"	f
repeat	base/abstractarraymath.jl	/^function repeat(a::AbstractVecOrMat, m::Integer, n::Integer=1)$/;"	f
repeat	base/abstractarraymath.jl	/^function repeat(a::AbstractVector, m::Integer)$/;"	f
repeat	base/abstractarraymath.jl	/^repeat(a::AbstractArray, counts::Integer...) = repeat(a, outer = counts)$/;"	f
repeat	base/strings/basic.jl	/^repeat(s::AbstractString, r::Integer) = repeat(String(s), r)$/;"	f
repeat	base/strings/string.jl	/^function repeat(c::Char, r::Integer)$/;"	f
repeat	base/strings/string.jl	/^repeat(c::AbstractChar, r::Integer) = repeat(Char(c), r) # fallback$/;"	f
repeat	base/strings/substring.jl	/^function repeat(s::Union{String, SubString{String}}, r::Integer)$/;"	f
repeat	src/disasm.cpp	/^    struct repeat {$/;"	s	class:DILineInfoPrinter	file:
repeated	base/iterators.jl	/^repeated(x) = Repeated(x)$/;"	f
repeated	base/iterators.jl	/^repeated(x, n::Integer) = take(repeated(x), Int(n))$/;"	f
repl	stdlib/REPL/src/docview.jl	/^function repl(io::IO, s::Symbol)$/;"	f
repl	stdlib/REPL/src/docview.jl	/^macro repl(ex) repl(ex) end$/;"	f
repl	stdlib/REPL/src/docview.jl	/^macro repl(io, ex) repl(io, ex) end$/;"	f
repl	stdlib/REPL/src/docview.jl	/^repl(io::IO, ex::Expr) = isregex(ex) ? :(apropos($io, $ex)) : _repl(ex)$/;"	f
repl	stdlib/REPL/src/docview.jl	/^repl(io::IO, other) = esc(:(@doc $other))$/;"	f
repl	stdlib/REPL/src/docview.jl	/^repl(io::IO, str::AbstractString) = :(apropos($io, $str))$/;"	f
repl	stdlib/REPL/src/docview.jl	/^repl(x) = repl(stdout, x)$/;"	f
repl_cmd	base/client.jl	/^function repl_cmd(cmd, out)$/;"	f
repl_color	base/client.jl	/^function repl_color(key, default)$/;"	f
repl_corrections	stdlib/REPL/src/docview.jl	/^function repl_corrections(io::IO, s)$/;"	f
repl_corrections	stdlib/REPL/src/docview.jl	/^repl_corrections(s) = repl_corrections(stdout, s)$/;"	f
repl_filename	stdlib/REPL/src/REPL.jl	/^repl_filename(repl, hp) = "REPL"$/;"	f
repl_filename	stdlib/REPL/src/REPL.jl	/^repl_filename(repl, hp::REPLHistoryProvider) = "REPL[$(max(length(hp.history)-hp.start_idx, 1))]/;"	f
repl_hooks	base/client.jl	/^const repl_hooks = []$/;"	v
repl_latex	stdlib/REPL/src/docview.jl	/^function repl_latex(io::IO, s::String)$/;"	f
repl_latex	stdlib/REPL/src/docview.jl	/^repl_latex(s::String) = repl_latex(stdout, s)$/;"	f
repl_search	stdlib/REPL/src/docview.jl	/^function repl_search(io::IO, s)$/;"	f
repl_search	stdlib/REPL/src/docview.jl	/^repl_search(s) = repl_search(stdout, s)$/;"	f
replace	base/set.jl	/^function replace(A, old_new::Pair...; count::Union{Integer,Nothing}=nothing)$/;"	f
replace	base/set.jl	/^replace(a::AbstractString, b::Pair, c::Pair) = throw(MethodError(replace, (a, b, c)))$/;"	f
replace	base/set.jl	/^replace(a::Callable, b::Pair, c::Pair; count::Integer=-1) = throw(MethodError(replace, (a, b, c)/;"	f
replace	base/set.jl	/^replace(a::Callable, b::Pair; count::Integer=-1) = throw(MethodError(replace, (a, b)))$/;"	f
replace	base/set.jl	/^replace(new::Callable, A; count::Integer=typemax(Int)) =$/;"	f
replace	base/strings/util.jl	/^    replace(str, in(first(pat_repl)) => last(pat_repl), count=count)$/;"	f
replace	base/strings/util.jl	/^    replace(str, isequal(first(pat_repl)) => last(pat_repl); count=count)$/;"	f
replace	base/strings/util.jl	/^function replace(str::String, pat_repl::Pair; count::Integer=typemax(Int))$/;"	f
replace	base/strings/util.jl	/^replace(s::AbstractString, pat_f::Pair; count=typemax(Int)) =$/;"	f
replace	base/strings/util.jl	/^replace(str::String, pat_repl::Pair{<:AbstractChar}; count::Integer=typemax(Int)) =$/;"	f
replace	test/sets.jl	/^    @test replace(d, (3=>8)=>(0=>0)) == Dict(1=>2, 0=>0)$/;"	f
replace	test/strings/util.jl	/^    @test replace("a", in("a") => typeof) == "Char"$/;"	f
replace!	base/set.jl	/^replace!(A, old_new::Pair...; count::Integer=typemax(Int)) =$/;"	f
replace!	base/set.jl	/^replace!(a::Callable, b::Pair, c::Pair; count::Integer=-1) = throw(MethodError(replace!, (a, b, /;"	f
replace!	base/set.jl	/^replace!(a::Callable, b::Pair; count::Integer=-1) = throw(MethodError(replace!, (a, b)))$/;"	f
replace!	base/set.jl	/^replace!(new::Callable, A; count::Integer=typemax(Int)) =$/;"	f
replace!	test/sets.jl	/^    @test replace!(d, (3=>8)=>(2=>2)) === d$/;"	f
replace-end	src/julia-syntax.scm	/^(define (replace-end ex a n tuples last)$/;"	f
replace-vars	src/julia-syntax.scm	/^(define (replace-vars e renames)$/;"	f
replaceInstruction	src/llvm-final-gc-lowering.cpp	/^static void replaceInstruction($/;"	f	typeref:typename:void	file:
replaceIntrinsicUseWith	src/llvm-alloc-opt.cpp	/^void Optimizer::replaceIntrinsicUseWith(IntrinsicInst *call, Intrinsic::ID ID,$/;"	f	class:__anon0a1571000111::Optimizer	typeref:typename:void
replaceNeeded	deps/srccache/patchelf-0.9/src/patchelf.cc	/^void ElfFile<ElfFileParamNames>::replaceNeeded(map<string, string>& libs)$/;"	f	class:ElfFile	typeref:typename:void
replaceSection	deps/srccache/patchelf-0.9/src/patchelf.cc	/^string & ElfFile<ElfFileParamNames>::replaceSection(const SectionName & sectionName,$/;"	f	class:ElfFile	typeref:typename:string &
replaceSoname	deps/srccache/patchelf-0.9/src/patchelf.cc	/^    typedef enum { printSoname, replaceSoname } sonameMode;$/;"	e	enum:ElfFile::__anon94ea2e970103	file:
replace_code_newstyle!	base/compiler/ssair/legacy.jl	/^function replace_code_newstyle!(ci::CodeInfo, ir::IRCode, nargs::Int)$/;"	f
replace_colon	test/subarray.jl	/^function replace_colon(A::AbstractArray, I)$/;"	f
replace_err	base/regex.jl	/^replace_err(repl) = error("Bad replacement string: $repl")$/;"	f
replace_in_print_matrix	base/abstractarray.jl	/^replace_in_print_matrix(A::AbstractMatrix,i::Integer,j::Integer,s::AbstractString) = s$/;"	f
replace_in_print_matrix	base/abstractarray.jl	/^replace_in_print_matrix(A::AbstractVector,i::Integer,j::Integer,s::AbstractString) = s$/;"	f
replace_line	stdlib/REPL/src/LineEdit.jl	/^function replace_line(s::PrefixSearchState, l)$/;"	f
replace_line	stdlib/REPL/src/LineEdit.jl	/^function replace_line(s::PromptState, l, keep_undo=false)$/;"	f
replace_line	stdlib/REPL/src/LineEdit.jl	/^function replace_line(s::PromptState, l::IOBuffer)$/;"	f
replace_line	stdlib/REPL/src/LineEdit.jl	/^replace_line(s::PrefixSearchState, l::IOBuffer) = (s.response_buffer = l; nothing)$/;"	f
replace_pairs!	base/set.jl	/^function replace_pairs!(res, A, count::Int, old_new::Tuple{Vararg{Pair}})$/;"	f
replace_ref_end!	base/views.jl	/^replace_ref_end!(ex) = replace_ref_end_!(ex, nothing)[1]$/;"	f
replace_ref_end_!	base/views.jl	/^function replace_ref_end_!(ex, withex)$/;"	f
replace_stack	src/llvm-alloc-opt.cpp	/^    ReplaceUses::Stack replace_stack;$/;"	m	struct:__anon0a1571000111::Optimizer	typeref:typename:ReplaceUses::Stack	file:
replace_tuples!	base/abstractarray.jl	/^function replace_tuples!(nidx, idx, ridx, otherdims, I)$/;"	f
replace_with_centered_mark	base/arrayshow.jl	/^function replace_with_centered_mark(s::AbstractString;c::AbstractChar = '⋅')$/;"	f
replacedSections	deps/srccache/patchelf-0.9/src/patchelf.cc	/^    ReplacedSections replacedSections;$/;"	m	class:ElfFile	typeref:typename:ReplacedSections	file:
replaced_links	doc/make.jl	/^replaced_links = replace(splitted[1], r"\\[\\#([0-9]*?)\\]" => s"[#\\g<1>](https:\/\/github.com\//;"	v
replrepr	test/ranges.jl	/^    replrepr(x) = repr("text\/plain", x; context=IOContext(stdout, :limit=>true, :displaysize=>(/;"	f
replstr	stdlib/SHA/test/runtests.jl	/^replstr(x) = sprint((io, x) -> show(IOContext(io, :limit => true), MIME("text\/plain"), x), x)$/;"	f
replstr	test/show.jl	/^    @test replstr(Any[Dict(1=>2)=> (3=>4), 1=>2]) ==$/;"	f
replstr	test/show.jl	/^    @test replstr(Pair[(1=>2)=>3, 4=>5]) ==$/;"	f
replstr	test/show.jl	/^replstr(x, kv::Pair...) = sprint((io,x) -> show(IOContext(io, :limit => true, :displaysize => (2/;"	f
replstrcolor	test/show.jl	/^replstrcolor(x) = sprint((io, x) -> show(IOContext(io, :limit => true, :color => true),$/;"	f
repo	stdlib/LibGit2/src/LibGit2.jl	/^repo = LibGit2.GitRepo(repo_path)$/;"	v
repo	stdlib/LibGit2/src/LibGit2.jl	/^repo = LibGit2.init(repo_path)$/;"	v
repo	stdlib/LibGit2/src/remote.jl	/^repo = LibGit2.GitRepo(path)$/;"	v
repo	stdlib/LibGit2/src/remote.jl	/^repo = LibGit2.init(repo_path)$/;"	v
repo	stdlib/LibGit2/src/repository.jl	/^repo = LibGit2.clone(repo_url, "\/home\/me\/projects\/Example")$/;"	v
repo1	stdlib/LibGit2/src/LibGit2.jl	/^repo1 = LibGit2.clone(repo_url, "test_path")$/;"	v
repo2	stdlib/LibGit2/src/LibGit2.jl	/^repo2 = LibGit2.clone(repo_url, "test_path", isbare=true)$/;"	v
repo_file	stdlib/LibGit2/src/LibGit2.jl	/^repo_file = open(joinpath(repo_path, test_file), "a")$/;"	v
repo_path	stdlib/LibGit2/src/remote.jl	/^repo_path = joinpath(tempdir(), "Example")$/;"	v
repo_url	stdlib/LibGit2/src/LibGit2.jl	/^repo_url = "https:\/\/github.com\/JuliaLang\/Example.jl"$/;"	v
repo_url	stdlib/LibGit2/src/repository.jl	/^repo_url = "https:\/\/github.com\/JuliaLang\/Example.jl"$/;"	v
reportWriterError	src/jitlayers.cpp	/^static void reportWriterError(const ErrorInfoBase &E) {$/;"	f	typeref:typename:void	file:
report_error	src/clangsa/GCChecker.cpp	/^        void report_error(CheckerContext &C, const char *message) const {$/;"	f	class:__anon9c5a21540111::GCChecker	typeref:typename:void	file:
report_error	src/clangsa/GCChecker.cpp	/^void GCChecker::report_error(callback f, CheckerContext &C, const char *message) const$/;"	f	class:GCChecker	typeref:typename:void
report_value_error	src/clangsa/GCChecker.cpp	/^void GCChecker::report_value_error(CheckerContext &C, SymbolRef Sym, const char *message, Source/;"	f	class:GCChecker	typeref:typename:void
repository	stdlib/LibGit2/src/index.jl	/^function repository(idx::GitIndex)$/;"	f
repository	stdlib/LibGit2/src/reference.jl	/^repository(ref::GitReference) = ref.owner$/;"	f
repository	stdlib/LibGit2/src/tree.jl	/^repository(te::GitTreeEntry) = repository(te.owner)$/;"	f
repository	stdlib/LibGit2/src/tree.jl	/^repository(tree::GitTree) = tree.owner$/;"	f
repository	stdlib/LibGit2/src/walker.jl	/^repository(w::GitRevWalker) = w.owner$/;"	f
repr	base/coreio.jl	/^function repr end$/;"	f
repr	base/multimedia.jl	/^repr(m::AbstractString, x; context=nothing) = repr(MIME(m), x; context=context)$/;"	f
repr	base/multimedia.jl	/^repr(m::MIME, x; context=nothing) = istextmime(m) ? _textrepr(m, x, context) : _binrepr(m, x, co/;"	f
repr	base/strings/io.jl	/^repr(x; context=nothing) = sprint(show, x; context=context)$/;"	f
req	src/jl_uv.c	/^    uv_work_t req;$/;"	m	struct:work_baton	typeref:typename:uv_work_t	file:
request	stdlib/REPL/src/TerminalMenus/AbstractMenu.jl	/^function request(term::REPL.Terminals.TTYTerminal, m::AbstractMenu)$/;"	f
request	stdlib/REPL/src/TerminalMenus/AbstractMenu.jl	/^function request(term::REPL.Terminals.TTYTerminal, msg::AbstractString, m::AbstractMenu)$/;"	f
request	stdlib/REPL/src/TerminalMenus/AbstractMenu.jl	/^request(m::AbstractMenu) = request(terminal, m)$/;"	f
request	stdlib/REPL/src/TerminalMenus/AbstractMenu.jl	/^request(msg::AbstractString, m::AbstractMenu) = request(terminal, msg, m)$/;"	f
require	base/loading.jl	/^function require(into::Module, mod::Symbol)$/;"	f
require	base/loading.jl	/^function require(uuidkey::PkgId)$/;"	f
require-token	src/julia-parser.scm	/^(define (require-token s)$/;"	f
require_one_based_indexing	base/abstractarray.jl	/^require_one_based_indexing(A...) = !has_offset_axes(A...) || throw(ArgumentError("offset arrays /;"	f
required_argument	src/getopt.h	/^#define required_argument /;"	d
res	stdlib/LibGit2/src/types.jl	/^res = convert(Vector{String}, sa_ref[])$/;"	v
reserve	stdlib/Random/src/RNGs.jl	/^reserve(r::MersenneTwister, n::Int) = (mt_avail(r) < n && gen_rand(r); nothing)$/;"	f
reserve1	stdlib/Random/src/RNGs.jl	/^function reserve1(r::MersenneTwister, ::Type{T}) where T<:BitInteger$/;"	f
reserve_1	stdlib/Random/src/RNGs.jl	/^reserve_1(r::MersenneTwister) = (mt_empty(r) && gen_rand(r); nothing)$/;"	f
reserved-word?	src/julia-parser.scm	/^(define reserved-word? (Set reserved-words))$/;"	f
reserved-words	src/julia-parser.scm	/^(define reserved-words (append initial-reserved-words '(end else elseif catch finally true false/;"	f
reserved_size	src/julia_internal.h	/^    size_t reserved_size;$/;"	m	struct:_jl_excstack_t	typeref:typename:size_t
reset	base/io.jl	/^function reset(io::T) where T<:IO$/;"	f
reset	base/stream.jl	/^reset(x::LibuvStream)    = reset(x.buffer)$/;"	f
reset	src/cgmemmgr.cpp	/^    void reset(void *addr, size_t size)$/;"	f	struct:__anon06c686bc0111::Block	typeref:typename:void	file:
reset	src/llvm-alloc-opt.cpp	/^        void reset()$/;"	f	struct:__anon0a1571000111::Optimizer::AllocUseInfo	typeref:typename:void	file:
reset	stdlib/LibGit2/src/utils.jl	/^reset(val::Integer, flag::Integer) = (val &= ~flag)$/;"	f
reset	stdlib/REPL/src/REPL.jl	/^function reset(repl::LineEditREPL)$/;"	f
reset!	base/iterators.jl	/^function reset!(s::Stateful{T,VS}, itr::T) where {T,VS}$/;"	f
reset!	stdlib/LibGit2/src/LibGit2.jl	/^function reset!(repo::GitRepo, committish::AbstractString, pathspecs::AbstractString...)$/;"	f
reset!	stdlib/LibGit2/src/LibGit2.jl	/^reset!(repo::GitRepo, id::GitHash, mode::Cint = Consts.RESET_MIXED) =$/;"	f
reset!	stdlib/LibGit2/src/repository.jl	/^function reset!(repo::GitRepo, obj::GitObject, mode::Cint;$/;"	f
reset!	stdlib/LibGit2/src/repository.jl	/^function reset!(repo::GitRepo, obj::Union{GitObject, Nothing}, pathspecs::AbstractString...)$/;"	f
reset!	stdlib/LibGit2/src/types.jl	/^function reset!(p::CredentialPayload, config::GitConfig=p.config)$/;"	f
reset-gensyms	src/ast.scm	/^(define (reset-gensyms)$/;"	f
reset_key_repeats	stdlib/REPL/src/LineEdit.jl	/^function reset_key_repeats(f::Function, s::MIState)$/;"	f
reset_mt_caches	src/gf.c	/^static void reset_mt_caches(jl_methtable_t *mt, void *env)$/;"	f	typeref:typename:void	file:
reset_page	src/gc.c	/^static inline jl_taggedvalue_t *reset_page(const jl_gc_pool_t *p, jl_gc_pagemeta_t *pg, jl_tagge/;"	f	typeref:typename:jl_taggedvalue_t *	file:
reset_state	stdlib/REPL/src/LineEdit.jl	/^function reset_state(s::MIState)$/;"	f
reset_state	stdlib/REPL/src/LineEdit.jl	/^function reset_state(s::PrefixSearchState)$/;"	f
reset_state	stdlib/REPL/src/LineEdit.jl	/^function reset_state(s::PromptState)$/;"	f
reset_state	stdlib/REPL/src/LineEdit.jl	/^function reset_state(s::SearchState)$/;"	f
reset_state	stdlib/REPL/src/LineEdit.jl	/^reset_state(::EmptyHistoryProvider) = nothing$/;"	f
reset_state	stdlib/Serialization/src/Serialization.jl	/^function reset_state(s::AbstractSerializer)$/;"	f
reset_thread_gc_counts	src/gc.c	/^static void reset_thread_gc_counts(void) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void	file:
reseteof	base/io.jl	/^reseteof(io::AbstractPipe) = reseteof(pipe_reader(io))$/;"	f
reseteof	base/io.jl	/^reseteof(x::IO) = nothing$/;"	f
reseteof	base/stream.jl	/^function reseteof(x::TTY)$/;"	f
reshape	base/bitarray.jl	/^function reshape(B::BitArray{N}, dims::NTuple{N,Int}) where N$/;"	f
reshape	base/bitarray.jl	/^reshape(B::BitArray, dims::Tuple{Vararg{Int}}) = _bitreshape(B, dims)$/;"	f
reshape	base/reshapedarray.jl	/^function reshape(a::Array{T,M}, dims::NTuple{N,Int}) where {T,N,M}$/;"	f
reshape	base/reshapedarray.jl	/^function reshape(parent::AbstractArray, ndims::Val{N}) where N$/;"	f
reshape	base/reshapedarray.jl	/^reshape(parent::AbstractArray, dims::Dims)        = _reshape(parent, dims)$/;"	f
reshape	base/reshapedarray.jl	/^reshape(parent::AbstractArray, dims::Int...) = reshape(parent, dims)$/;"	f
reshape	base/reshapedarray.jl	/^reshape(parent::AbstractArray, dims::IntOrInd...) = reshape(parent, dims)$/;"	f
reshape	base/reshapedarray.jl	/^reshape(parent::AbstractArray, dims::Tuple{Vararg{Union{Int,Colon}}}) = _reshape(parent, _reshap/;"	f
reshape	base/reshapedarray.jl	/^reshape(parent::AbstractArray, dims::Union{Int,Colon}...) = reshape(parent, dims)$/;"	f
reshape	base/reshapedarray.jl	/^reshape(parent::AbstractArray, shp::Tuple{Union{Integer,OneTo}, Vararg{Union{Integer,OneTo}}}) =/;"	f
reshape	base/reshapedarray.jl	/^reshape(parent::AbstractArray{T,N}, ndims::Val{N}) where {T,N} = parent$/;"	f
reshape	stdlib/SharedArrays/src/SharedArrays.jl	/^function reshape(a::SharedArray{T}, dims::NTuple{N,Int}) where {T,N}$/;"	f
resize!	base/array.jl	/^function resize!(a::Vector, nl::Integer)$/;"	f
resize!	base/bitarray.jl	/^function resize!(B::BitVector, n::Integer)$/;"	f
resize!	base/compiler/ssair/ir.jl	/^function resize!(compact::IncrementalCompact, nnewnodes)$/;"	f
resize_nthreads!	base/threads.jl	/^function resize_nthreads!(A::AbstractVector, copyvalue=A[1])$/;"	f
resolve	base/docs/bindings.jl	/^resolve(b::Binding) = getfield(b.mod, b.var)$/;"	f
resolve	base/reflection.jl	/^function resolve(g::GlobalRef; force::Bool=false)$/;"	f
resolve-expansion-vars	src/macroexpand.scm	/^(define (resolve-expansion-vars e m)$/;"	f
resolve-expansion-vars-	src/macroexpand.scm	/^(define (resolve-expansion-vars- e env m parent-scope inarg)$/;"	f
resolve-expansion-vars-with-new-env	src/macroexpand.scm	/^(define (resolve-expansion-vars-with-new-env x env m parent-scope inarg (outermost #f))$/;"	f
resolve-in-function-lhs	src/macroexpand.scm	/^(define (resolve-in-function-lhs e env m parent-scope inarg)$/;"	f
resolve-scopes	src/julia-syntax.scm	/^(define (resolve-scopes e) (resolve-scopes- e #f))$/;"	f
resolve-scopes-	src/julia-syntax.scm	/^(define (resolve-scopes- e scope (sp '()))$/;"	f
resolveSymbol	src/jitlayers.cpp	/^JL_JITSymbol JuliaOJIT::resolveSymbol(const std::string& Name)$/;"	f	class:JuliaOJIT	typeref:typename:JL_JITSymbol
resolve_atomic	src/jitlayers.cpp	/^static uint64_t resolve_atomic(const char *name)$/;"	f	typeref:typename:uint64_t	file:
resolve_call_cycle!	base/compiler/typeinfer.jl	/^function resolve_call_cycle!(linfo::MethodInstance, parent::InferenceState)$/;"	f
resolve_globals	src/method.c	/^static jl_value_t *resolve_globals(jl_value_t *expr, jl_module_t *module, jl_svec_t *sparam_vals/;"	f	typeref:typename:jl_value_t *	file:
resolve_path	base/Makefile	/^resolve_path = \\$/;"	m
resolve_ref_immediately	stdlib/Serialization/src/Serialization.jl	/^function resolve_ref_immediately(s::AbstractSerializer, @nospecialize(x))$/;"	f
resolvebinding	base/show.jl	/^function resolvebinding(ex::Expr)$/;"	f
resolvebinding	base/show.jl	/^function resolvebinding(ex::GlobalRef)$/;"	f
resolvebinding	base/show.jl	/^resolvebinding(@nospecialize(ex)) = ex$/;"	f
resolvebinding	base/show.jl	/^resolvebinding(ex::QuoteNode) = ex.value$/;"	f
resolvebinding	base/show.jl	/^resolvebinding(ex::Symbol) = resolvebinding(GlobalRef(Main, ex))$/;"	f
resort_pending!	base/compiler/ssair/ir.jl	/^function resort_pending!(compact)$/;"	f
resorted	src/julia.h	/^    jl_value_t *resorted;$/;"	m	struct:_jl_method_t	typeref:typename:jl_value_t *
resp	test/asyncmap.jl	/^resp = asyncmap(x->(v=next_ctr(); map(_->v, x)), 1:22; ntasks=5, batch_size=5)$/;"	v
respond	stdlib/REPL/src/REPL.jl	/^function respond(f, repl, main; pass_empty = false)$/;"	f
rest	base/iterators.jl	/^rest(itr) = itr$/;"	f
rest	base/iterators.jl	/^rest(itr,state) = Rest(itr,state)$/;"	f
rest	base/iterators.jl	/^rest(itr::Rest,state) = Rest(itr.itr,state)$/;"	f
rest_iteratorsize	base/iterators.jl	/^rest_iteratorsize(::IsInfinite) = IsInfinite()$/;"	f
rest_iteratorsize	base/iterators.jl	/^rest_iteratorsize(a) = SizeUnknown()$/;"	f
restart_copyto_nonleaf!	base/broadcast.jl	/^function restart_copyto_nonleaf!(newdest, dest, bc, val, I, iter, state, count)$/;"	f
restore	src/gc-debug.c	/^static void restore(void)$/;"	f	typeref:typename:void	file:
restore	stdlib/LibGit2/src/LibGit2.jl	/^function restore(s::State, repo::GitRepo)$/;"	f
restore_env	src/subtype.c	/^static void restore_env(jl_stenv_t *e, jl_value_t *root, jl_savedenv_t *se) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void	file:
restore_signals	src/signals-unix.c	/^void restore_signals(void)$/;"	f	typeref:typename:void
restore_signals	src/signals-win.c	/^void restore_signals(void)$/;"	f	typeref:typename:void
restore_stack	src/task.c	/^static void NOINLINE JL_NORETURN restore_stack(jl_task_t *t, jl_ptls_t ptls, char *p)$/;"	f	typeref:typename:void NOINLINE JL_NORETURN	file:
restore_stack2	src/task.c	/^static void restore_stack2(jl_task_t *t, jl_ptls_t ptls, jl_task_t *lastt)$/;"	f	typeref:typename:void	file:
result	src/julia.h	/^    jl_value_t *result;$/;"	m	struct:_jl_task_t	typeref:typename:jl_value_t *
result	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^function result(dlmoffsets::DLMOffsets)$/;"	f
result	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^function result(dlmstore::DLMStore{T}) where T$/;"	f
result	stdlib/REPL/src/emoji_symbols.jl	/^result = Dict()$/;"	v
result	test/compiler/inference.jl	/^result = f24852_kernel(x, y)$/;"	v
result26506	test/worlds.jl	/^result26506 = Any[]$/;"	v
result_join	base/broadcast.jl	/^@noinline function result_join(::S, ::T, ::U, ::V) where {S,T,U,V}$/;"	f
result_join	base/broadcast.jl	/^result_join(::AbstractArrayStyle, ::AbstractArrayStyle, ::Unknown, ::Unknown) =$/;"	f
result_join	base/broadcast.jl	/^result_join(::Any, ::Any, ::Unknown, ::Unknown)   = Unknown()$/;"	f
result_join	base/broadcast.jl	/^result_join(::Any, ::Any, ::Unknown, s::BroadcastStyle) = s$/;"	f
result_join	base/broadcast.jl	/^result_join(::Any, ::Any, s::BroadcastStyle, ::Unknown) = s$/;"	f
result_style	base/broadcast.jl	/^function result_style end$/;"	f
result_style	base/broadcast.jl	/^result_style(s1, s2) = result_join(s1, s2, BroadcastStyle(s1, s2), BroadcastStyle(s2, s1))$/;"	f
result_style	base/broadcast.jl	/^result_style(s::BroadcastStyle) = s$/;"	f
result_type9232	test/compiler/inference.jl	/^result_type9232(::Type{T1}, ::Type{T2}) where {T1<:Number,T2<:Number} = arithtype9232(T1, T2)$/;"	f
resume-on-escape	src/macroexpand.scm	/^(define (resume-on-escape lam e nblocks)$/;"	f
retboxed	src/ccall.cpp	/^    bool retboxed; \/\/ input parameter indicating whether lrt is jl_value_t*$/;"	m	class:function_sig_t	typeref:typename:bool	file:
retfinally	test/core.jl	/^    function retfinally()$/;"	f
rethrow	base/error.jl	/^rethrow() = ccall(:jl_rethrow, Bottom, ())$/;"	f
rethrow	base/error.jl	/^rethrow(e) = ccall(:jl_rethrow_other, Bottom, (Any,), e)$/;"	f
retrieve	stdlib/Profile/src/Profile.jl	/^function retrieve()$/;"	f
retrieve_code_info	base/compiler/utilities.jl	/^function retrieve_code_info(linfo::MethodInstance)$/;"	f
retry	base/error.jl	/^function retry(f;  delays=ExponentialBackOff(), check=nothing)$/;"	f
retry_curl	contrib/windows/winrpm.sh	/^retry_curl() {$/;"	f
rettype	src/julia.h	/^    jl_value_t *rettype; \/\/ return type for fptr$/;"	m	struct:_jl_code_instance_t	typeref:typename:jl_value_t *
rettype	src/julia.h	/^    jl_value_t *rettype;$/;"	m	struct:_jl_code_info_t	typeref:typename:jl_value_t *
rettype_const	src/julia.h	/^    jl_value_t *rettype_const; \/\/ inferred constant return value, or null$/;"	m	struct:_jl_code_instance_t	typeref:typename:jl_value_t *
return?	src/ast.scm	/^(define (return? e) (and (pair? e) (eq? (car e) 'return)))$/;"	f
return_callback	stdlib/REPL/src/REPL.jl	/^function return_callback(s)$/;"	f
return_from_int64	src/flisp/cvalues.c	/^value_t return_from_int64(fl_context_t *fl_ctx, int64_t Saccum)$/;"	f	typeref:typename:value_t
return_from_uint64	src/flisp/cvalues.c	/^value_t return_from_uint64(fl_context_t *fl_ctx, uint64_t Uaccum)$/;"	f	typeref:typename:value_t
return_sym	src/ast.c	/^jl_sym_t *return_sym;  jl_sym_t *unreachable_sym;$/;"	v	typeref:typename:jl_sym_t *
return_type	base/compiler/compiler.jl	/^function return_type end # promotion.jl expects this to exist$/;"	f
return_type	base/compiler/typeinfer.jl	/^function return_type(@nospecialize(f), @nospecialize(t))$/;"	f
return_type_tfunc	base/compiler/tfuncs.jl	/^function return_type_tfunc(argtypes::Vector{Any}, vtypes::VarTable, sv::InferenceState)$/;"	f
return_types	base/reflection.jl	/^function return_types(@nospecialize(f), @nospecialize(types=Tuple))$/;"	f
returnsym	src/flisp/flisp.h	/^    value_t vtabsym, pagesym, returnsym, escsym, spacesym, deletesym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
returntype	test/docs.jl	/^function returntype(x::Int)::Int$/;"	f
retval	stdlib/Distributed/test/distributed_exec.jl	/^retval = @distributed (+) for _ in 1:10$/;"	v
reuseport_tests	stdlib/Distributed/test/distributed_exec.jl	/^function reuseport_tests()$/;"	f
revargs	base/tuple.jl	/^revargs() = ()$/;"	f
revargs	base/tuple.jl	/^revargs(x, r...) = (revargs(r...)..., x)$/;"	f
revcomp	src/debuginfo.cpp	/^struct revcomp {$/;"	s	file:
revcount	stdlib/LibGit2/src/LibGit2.jl	/^function revcount(repo::GitRepo, commit1::AbstractString, commit2::AbstractString)$/;"	f
reverse	base/abstractarraymath.jl	/^function reverse(A::AbstractArray; dims::Integer)$/;"	f
reverse	base/array.jl	/^function reverse(A::AbstractVector, s=first(LinearIndices(A)), n=last(LinearIndices(A)))$/;"	f
reverse	base/array.jl	/^reverse(A::Vector) = invoke(reverse, Tuple{AbstractVector}, A)$/;"	f
reverse	base/arraymath.jl	/^function reverse(A::Array{T}; dims::Integer) where T$/;"	f
reverse	base/bitarray.jl	/^function reverse(A::BitArray; dims::Integer)$/;"	f
reverse	base/bitarray.jl	/^reverse(v::BitVector) = reverse!(copy(v))$/;"	f
reverse	base/iterators.jl	/^reverse(G::Generator) = Generator(G.f, reverse(G.iter))$/;"	f
reverse	base/iterators.jl	/^reverse(R::AbstractRange) = Base.reverse(R) # copying ranges is cheap$/;"	f
reverse	base/iterators.jl	/^reverse(f::Filter) = Filter(f.flt, reverse(f.itr))$/;"	f
reverse	base/iterators.jl	/^reverse(f::Flatten) = Flatten(reverse(itr) for itr in reverse(f.it))$/;"	f
reverse	base/iterators.jl	/^reverse(it::Cycle) = Cycle(reverse(it.xs))$/;"	f
reverse	base/iterators.jl	/^reverse(it::Union{Repeated,Take{<:Repeated}}) = it$/;"	f
reverse	base/iterators.jl	/^reverse(itr) = Reverse(itr)$/;"	f
reverse	base/iterators.jl	/^reverse(p::Pair) = Base.reverse(p) # copying pairs is cheap$/;"	f
reverse	base/iterators.jl	/^reverse(p::ProductIterator) = ProductIterator(map(reverse, p.iterators))$/;"	f
reverse	base/iterators.jl	/^reverse(r::Reverse) = r.itr$/;"	f
reverse	base/iterators.jl	/^reverse(v::Pairs) = Pairs(v.data, reverse(v.itr))$/;"	f
reverse	base/iterators.jl	/^reverse(x::Union{Number,AbstractChar}) = x$/;"	f
reverse	base/iterators.jl	/^reverse(z::Zip) = Zip(map(reverse, z.is))$/;"	f
reverse	base/pair.jl	/^reverse(p::Pair{A,B}) where {A,B} = Pair{B,A}(p.second, p.first)$/;"	f
reverse	base/range.jl	/^function reverse(r::StepRangeLen)$/;"	f
reverse	base/range.jl	/^reverse(r::LinRange)     = LinRange(r.stop, r.start, length(r))$/;"	f
reverse	base/range.jl	/^reverse(r::OrdinalRange) = (:)(last(r), -step(r), first(r))$/;"	f
reverse	base/strings/substring.jl	/^function reverse(s::Union{String,SubString{String}})::String$/;"	f
reverse	base/tuple.jl	/^reverse(t::Tuple) = revargs(t...)$/;"	f
reverse!	base/array.jl	/^function reverse!(v::AbstractVector, s=first(LinearIndices(v)), n=last(LinearIndices(v)))$/;"	f
reverse!	base/bitarray.jl	/^function reverse!(B::BitVector)$/;"	f
reverse_bits	base/bitarray.jl	/^function reverse_bits(src::UInt64)$/;"	f
reverse_dlsym_lookup_table	src/flisp/flisp.h	/^    htable_t reverse_dlsym_lookup_table;$/;"	m	struct:_fl_context_t	typeref:typename:htable_t
reverseind	base/array.jl	/^function reverseind(a::AbstractVector, i::Integer)$/;"	f
reverseind	base/strings/basic.jl	/^reverseind(s::AbstractString, i::Integer) = thisind(s, ncodeunits(s)-i+1)$/;"	f
revparseid	stdlib/LibGit2/src/repository.jl	/^revparseid(repo::GitRepo, spec) = GitHash(GitUnknownObject(repo, spec))$/;"	f
rewrap	base/compiler/typeutils.jl	/^function rewrap(@nospecialize(t), @nospecialize(u))$/;"	f
rewrap	test/vecelement.jl	/^rewrap(x) = VecElement(x.elts[1].value + 0)$/;"	f
rewrap-where	src/julia-parser.scm	/^(define (rewrap-where x w)$/;"	f
rewrap_unionall	base/essentials.jl	/^function rewrap_unionall(@nospecialize(t), @nospecialize(u))$/;"	f
rewrite-ctor	src/julia-syntax.scm	/^(define (rewrite-ctor ctor Tname params field-names field-types)$/;"	f
rewriteHeaders	deps/srccache/patchelf-0.9/src/patchelf.cc	/^void ElfFile<ElfFileParamNames>::rewriteHeaders(Elf_Addr phdrAddress)$/;"	f	class:ElfFile	typeref:typename:void
rewriteSections	deps/srccache/patchelf-0.9/src/patchelf.cc	/^void ElfFile<ElfFileParamNames>::rewriteSections()$/;"	f	class:ElfFile	typeref:typename:void
rewriteSectionsExecutable	deps/srccache/patchelf-0.9/src/patchelf.cc	/^void ElfFile<ElfFileParamNames>::rewriteSectionsExecutable()$/;"	f	class:ElfFile	typeref:typename:void
rewriteSectionsLibrary	deps/srccache/patchelf-0.9/src/patchelf.cc	/^void ElfFile<ElfFileParamNames>::rewriteSectionsLibrary()$/;"	f	class:ElfFile	typeref:typename:void
rewrite_apply_exprargs!	base/compiler/ssair/inlining.jl	/^function rewrite_apply_exprargs!(ir::IRCode, idx::Int, argexprs::Vector{Any}, atypes::Vector{Any/;"	f
rewrite_gv_init	src/llvm-multiversioning.cpp	/^Constant *CloneCtx::rewrite_gv_init(const Stack& stack)$/;"	f	class:__anond5683ea40111::CloneCtx	typeref:typename:Constant *
rewrite_inst_use	src/llvm-multiversioning.cpp	/^Value *CloneCtx::rewrite_inst_use(const Stack& stack, Value *replace, Instruction *insert_before/;"	f	class:__anond5683ea40111::CloneCtx	typeref:typename:Value *
rewrite_invoke_exprargs!	base/compiler/ssair/inlining.jl	/^function rewrite_invoke_exprargs!(inserter, argexprs::Vector{Any})$/;"	f
rewrite_op	base/fastmath.jl	/^const rewrite_op =$/;"	v
ri_cprmask	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word ri_cprmask[4];		\/* Coprocessor registers used.  *\/$/;"	m	struct:__anonff7a58692608	typeref:typename:Elf32_Word[4]
ri_gp_value	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Sword ri_gp_value;		\/* $gp register value.  *\/$/;"	m	struct:__anonff7a58692608	typeref:typename:Elf32_Sword
ri_gprmask	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word ri_gprmask;		\/* General registers used.  *\/$/;"	m	struct:__anonff7a58692608	typeref:typename:Elf32_Word
right	base/sort.jl	/^right(::DirectOrdering) = Right()$/;"	f
right	base/sort.jl	/^right(o::Perm) = Perm(right(o.order), o.data)$/;"	f
right	src/flisp/flisp.h	/^    struct _symbol_t *right;$/;"	m	struct:_symbol_t	typeref:struct:_symbol_t *
right	src/julia.h	/^    struct _jl_sym_t *right;$/;"	m	struct:_jl_sym_t	typeref:struct:_jl_sym_t *
right	src/subtype.c	/^    int8_t right;       \/\/ whether this variable came from the right side of `A <: B`$/;"	m	struct:jl_varbinding_t	typeref:typename:int8_t	file:
right	test/gcext/gcext.c	/^    struct treap_t *left, *right;$/;"	m	struct:treap_t	typeref:struct:treap_t **	file:
rint_float	src/runtime_intrinsics.c	/^#define rint_float(/;"	d	file:
rm	base/file.jl	/^function rm(path::AbstractString; force::Bool=false, recursive::Bool=false)$/;"	f
rm-linenums	src/julia-parser.scm	/^(define (rm-linenums e)$/;"	f
rmprocs	stdlib/Distributed/src/cluster.jl	/^function rmprocs(pids...; waitfor=typemax(Int))$/;"	f
rmul!	stdlib/LinearAlgebra/src/diagonal.jl	/^function rmul!(A::AbstractMatrix, D::Diagonal)$/;"	f
rmul!	stdlib/LinearAlgebra/src/diagonal.jl	/^function rmul!(A::AbstractMatrix, adjB::Adjoint{<:Any,<:Diagonal})$/;"	f
rmul!	stdlib/LinearAlgebra/src/diagonal.jl	/^function rmul!(A::AbstractMatrix, transB::Transpose{<:Any,<:Diagonal})$/;"	f
rmul!	stdlib/LinearAlgebra/src/diagonal.jl	/^function rmul!(A::UnitLowerTriangular, D::Diagonal)$/;"	f
rmul!	stdlib/LinearAlgebra/src/diagonal.jl	/^function rmul!(A::UnitUpperTriangular, D::Diagonal)$/;"	f
rmul!	stdlib/LinearAlgebra/src/diagonal.jl	/^rmul!(A::Diagonal, B::Diagonal) = Diagonal(A.diag .*= B.diag)$/;"	f
rmul!	stdlib/LinearAlgebra/src/diagonal.jl	/^rmul!(A::Union{LowerTriangular,UpperTriangular}, D::Diagonal) = typeof(A)(rmul!(A.data, D))$/;"	f
rmul!	stdlib/LinearAlgebra/src/generic.jl	/^function rmul!(X::AbstractArray, s::Number)$/;"	f
rmul!	stdlib/LinearAlgebra/src/givens.jl	/^@inline function rmul!(A::AbstractMatrix, G::Givens)$/;"	f
rmul!	stdlib/LinearAlgebra/src/givens.jl	/^function rmul!(A::AbstractMatrix, adjR::Adjoint{<:Any,<:Rotation})$/;"	f
rmul!	stdlib/LinearAlgebra/src/hessenberg.jl	/^rmul!(F::Hessenberg{<:Any,<:SymTridiagonal{T}}, x::T) where {T<:Number} = Hessenberg(F.factors, /;"	f
rmul!	stdlib/LinearAlgebra/src/hessenberg.jl	/^rmul!(F::Hessenberg{<:Any,<:UpperHessenberg{T}}, x::T) where {T<:Number} = Hessenberg(rmul_triu!/;"	f
rmul!	stdlib/LinearAlgebra/src/hessenberg.jl	/^rmul!(H::UpperHessenberg, x::Number) = (rmul!(H.data, x); H)$/;"	f
rmul!	stdlib/LinearAlgebra/src/hessenberg.jl	/^rmul!(X::Adjoint{T,<:StridedMatrix{T}}, Q::HessenbergQ{T}) where {T} = lmul!(Q', X')'$/;"	f
rmul!	stdlib/LinearAlgebra/src/hessenberg.jl	/^rmul!(X::Adjoint{T,<:StridedMatrix{T}}, adjQ::Adjoint{<:Any,<:HessenbergQ{T}}) where {T} = lmul!/;"	f
rmul!	stdlib/LinearAlgebra/src/hessenberg.jl	/^rmul!(X::StridedMatrix{T}, Q::BlasHessenbergQ{T,false}) where {T<:BlasFloat} =$/;"	f
rmul!	stdlib/LinearAlgebra/src/hessenberg.jl	/^rmul!(X::StridedMatrix{T}, Q::BlasHessenbergQ{T,true}) where {T<:BlasFloat} =$/;"	f
rmul!	stdlib/LinearAlgebra/src/hessenberg.jl	/^rmul!(X::StridedMatrix{T}, adjQ::Adjoint{<:Any,<:BlasHessenbergQ{T,false}}) where {T<:BlasFloat}/;"	f
rmul!	stdlib/LinearAlgebra/src/hessenberg.jl	/^rmul!(X::StridedMatrix{T}, adjQ::Adjoint{<:Any,<:BlasHessenbergQ{T,true}}) where {T<:BlasFloat} /;"	f
rmul!	stdlib/LinearAlgebra/src/lq.jl	/^rmul!(A::StridedMatrix{T}, B::LQPackedQ{T}) where {T<:BlasFloat} =$/;"	f
rmul!	stdlib/LinearAlgebra/src/lq.jl	/^rmul!(A::StridedMatrix{T}, adjB::Adjoint{<:Any,<:LQPackedQ{T}}) where {T<:BlasComplex} =$/;"	f
rmul!	stdlib/LinearAlgebra/src/lq.jl	/^rmul!(A::StridedMatrix{T}, adjB::Adjoint{<:Any,<:LQPackedQ{T}}) where {T<:BlasReal} =$/;"	f
rmul!	stdlib/LinearAlgebra/src/qr.jl	/^function rmul!(A::StridedMatrix, adjQ::Adjoint{<:Any,<:QRPackedQ})$/;"	f
rmul!	stdlib/LinearAlgebra/src/qr.jl	/^function rmul!(A::StridedMatrix,Q::QRPackedQ)$/;"	f
rmul!	stdlib/LinearAlgebra/src/qr.jl	/^rmul!(A::StridedVecOrMat{T}, B::QRCompactWYQ{T,S}) where {T<:BlasFloat,S<:StridedMatrix} =$/;"	f
rmul!	stdlib/LinearAlgebra/src/qr.jl	/^rmul!(A::StridedVecOrMat{T}, B::QRPackedQ{T,S}) where {T<:BlasFloat,S<:StridedMatrix} =$/;"	f
rmul!	stdlib/LinearAlgebra/src/qr.jl	/^rmul!(A::StridedVecOrMat{T}, adjB::Adjoint{<:Any,<:QRCompactWYQ{T}}) where {T<:BlasComplex} =$/;"	f
rmul!	stdlib/LinearAlgebra/src/qr.jl	/^rmul!(A::StridedVecOrMat{T}, adjB::Adjoint{<:Any,<:QRCompactWYQ{T}}) where {T<:BlasReal} =$/;"	f
rmul!	stdlib/LinearAlgebra/src/qr.jl	/^rmul!(A::StridedVecOrMat{T}, adjB::Adjoint{<:Any,<:QRPackedQ{T}}) where {T<:BlasComplex} =$/;"	f
rmul!	stdlib/LinearAlgebra/src/qr.jl	/^rmul!(A::StridedVecOrMat{T}, adjB::Adjoint{<:Any,<:QRPackedQ{T}}) where {T<:BlasReal} =$/;"	f
rmul!	stdlib/LinearAlgebra/src/special.jl	/^rmul!(A::AbstractTriangular, adjB::Adjoint{<:Any,<:Union{QRCompactWYQ,QRPackedQ}}) =$/;"	f
rmul!	stdlib/LinearAlgebra/src/triangular.jl	/^        rmul!(A::StridedMatrix{T}, B::$t{T,<:StridedMatrix}) where {T<:BlasFloat} =$/;"	f
rmul!	stdlib/LinearAlgebra/src/triangular.jl	/^        rmul!(A::StridedMatrix{T}, adjB::Adjoint{<:Any,<:$t{T,<:StridedMatrix}}) where {T<:BlasC/;"	f
rmul!	stdlib/LinearAlgebra/src/triangular.jl	/^        rmul!(A::StridedMatrix{T}, adjB::Adjoint{<:Any,<:$t{T,<:StridedMatrix}}) where {T<:BlasR/;"	f
rmul!	stdlib/LinearAlgebra/src/triangular.jl	/^        rmul!(A::StridedMatrix{T}, transB::Transpose{<:Any,<:$t{T,<:StridedMatrix}}) where {T<:B/;"	f
rmul!	stdlib/LinearAlgebra/src/triangular.jl	/^function rmul!(A::StridedMatrix, B::LowerTriangular)$/;"	f
rmul!	stdlib/LinearAlgebra/src/triangular.jl	/^function rmul!(A::StridedMatrix, B::UnitLowerTriangular)$/;"	f
rmul!	stdlib/LinearAlgebra/src/triangular.jl	/^function rmul!(A::StridedMatrix, B::UnitUpperTriangular)$/;"	f
rmul!	stdlib/LinearAlgebra/src/triangular.jl	/^function rmul!(A::StridedMatrix, B::UpperTriangular)$/;"	f
rmul!	stdlib/LinearAlgebra/src/triangular.jl	/^function rmul!(A::StridedMatrix, adjB::Adjoint{<:Any,<:LowerTriangular})$/;"	f
rmul!	stdlib/LinearAlgebra/src/triangular.jl	/^function rmul!(A::StridedMatrix, adjB::Adjoint{<:Any,<:UnitLowerTriangular})$/;"	f
rmul!	stdlib/LinearAlgebra/src/triangular.jl	/^function rmul!(A::StridedMatrix, adjB::Adjoint{<:Any,<:UnitUpperTriangular})$/;"	f
rmul!	stdlib/LinearAlgebra/src/triangular.jl	/^function rmul!(A::StridedMatrix, adjB::Adjoint{<:Any,<:UpperTriangular})$/;"	f
rmul!	stdlib/LinearAlgebra/src/triangular.jl	/^function rmul!(A::StridedMatrix, transB::Transpose{<:Any,<:LowerTriangular})$/;"	f
rmul!	stdlib/LinearAlgebra/src/triangular.jl	/^function rmul!(A::StridedMatrix, transB::Transpose{<:Any,<:UnitLowerTriangular})$/;"	f
rmul!	stdlib/LinearAlgebra/src/triangular.jl	/^function rmul!(A::StridedMatrix, transB::Transpose{<:Any,<:UnitUpperTriangular})$/;"	f
rmul!	stdlib/LinearAlgebra/src/triangular.jl	/^function rmul!(A::StridedMatrix, transB::Transpose{<:Any,<:UpperTriangular})$/;"	f
rmul!	stdlib/LinearAlgebra/src/triangular.jl	/^rmul!(A::LowerTriangular, adjB::Adjoint{<:Any,<:Union{UpperTriangular,UnitUpperTriangular}}) =$/;"	f
rmul!	stdlib/LinearAlgebra/src/triangular.jl	/^rmul!(A::LowerTriangular, transB::Transpose{<:Any,<:Union{UpperTriangular,UnitUpperTriangular}})/;"	f
rmul!	stdlib/LinearAlgebra/src/triangular.jl	/^rmul!(A::Union{UpperTriangular,LowerTriangular}, c::Number) = mul!(A, A, c)$/;"	f
rmul!	stdlib/LinearAlgebra/src/triangular.jl	/^rmul!(A::UpperTriangular, adjB::Adjoint{<:Any,<:Union{LowerTriangular,UnitLowerTriangular}}) =$/;"	f
rmul!	stdlib/LinearAlgebra/src/triangular.jl	/^rmul!(A::UpperTriangular, transB::Transpose{<:Any,<:Union{LowerTriangular,UnitLowerTriangular}})/;"	f
rmul!	stdlib/LinearAlgebra/src/uniformscaling.jl	/^rmul!(A::AbstractMatrix, J::UniformScaling) = rmul!(A, J.λ)$/;"	f
rmul!	stdlib/SparseArrays/src/linalg.jl	/^function rmul!(A::AbstractSparseMatrixCSC, D::Diagonal)$/;"	f
rmul!	stdlib/SparseArrays/src/linalg.jl	/^function rmul!(A::AbstractSparseMatrixCSC, b::Number)$/;"	f
rmul!	stdlib/SparseArrays/src/sparsevector.jl	/^function rmul!(x::SparseVectorUnion, a::Complex)$/;"	f
rmul!	stdlib/SparseArrays/src/sparsevector.jl	/^function rmul!(x::SparseVectorUnion, a::Real)$/;"	f
rmul_triu!	stdlib/LinearAlgebra/src/hessenberg.jl	/^function rmul_triu!(M::AbstractMatrix, x, k::Integer=0)$/;"	f
rnd_x0	stdlib/SparseArrays/test/sparsevector.jl	/^rnd_x0 = sprand(50, 0.6)$/;"	v
rnd_x0f	stdlib/SparseArrays/test/sparsevector.jl	/^rnd_x0f = Array(rnd_x0)$/;"	v
rnd_x1	stdlib/SparseArrays/test/sparsevector.jl	/^rnd_x1 = sprand(50, 0.7) * 4.0$/;"	v
rnd_x1f	stdlib/SparseArrays/test/sparsevector.jl	/^rnd_x1f = Array(rnd_x1)$/;"	v
rng	stdlib/Distributed/test/distributed_exec.jl	/^rng=RandomDevice()$/;"	v
rng_native_52	stdlib/Random/src/RNGs.jl	/^rng_native_52(::MersenneTwister) = Float64$/;"	f
rng_native_52	stdlib/Random/src/RNGs.jl	/^rng_native_52(::RandomDevice) = UInt64$/;"	f
rng_native_52	stdlib/Random/src/RNGs.jl	/^rng_native_52(::_GLOBAL_RNG) = rng_native_52(default_rng())$/;"	f
rngseed	src/julia_threads.h	/^    uint64_t rngseed;$/;"	m	struct:_jl_tls_states_t	typeref:typename:uint64_t
ro_alloc	src/cgmemmgr.cpp	/^    std::unique_ptr<ROAllocator<false>> ro_alloc;$/;"	m	class:__anon06c686bc0111::RTDyldMemoryManagerJL	typeref:typename:std::unique_ptr<ROAllocator<false>>	file:
robust_cdiv1	base/complex.jl	/^@inline function robust_cdiv1(a::Float64, b::Float64, c::Float64, d::Float64)$/;"	f
robust_cdiv2	base/complex.jl	/^function robust_cdiv2(a::Float64, b::Float64, c::Float64, d::Float64, r::Float64, t::Float64)$/;"	f
rootRegionIfGlobal	src/clangsa/GCChecker.cpp	/^bool GCChecker::rootRegionIfGlobal(const MemRegion *R, ProgramStateRef &State, CheckerContext &C/;"	f	class:GCChecker	typeref:typename:bool
root_ctx	src/jsvm-emscripten/asyncify_setup.js	/^function root_ctx() {$/;"	f
root_module	base/loading.jl	/^root_module(key::PkgId) = loaded_modules[key]$/;"	f
root_module	base/loading.jl	/^root_module(where::Module, name::Symbol) =$/;"	f
root_module_exists	base/loading.jl	/^root_module_exists(key::PkgId) = haskey(loaded_modules, key)$/;"	f
root_module_key	base/loading.jl	/^root_module_key(m::Module) = module_keys[m]$/;"	f
root_propagation	test/clangsa/MissingRoots.c	/^void root_propagation(jl_expr_t *expr) {$/;"	f	typeref:typename:void
root_scanner	test/gcext/gcext.c	/^void root_scanner(int full)$/;"	f	typeref:typename:void
root_task	src/julia_threads.h	/^    struct _jl_task_t *root_task;$/;"	m	struct:_jl_tls_states_t	typeref:struct:_jl_task_t *
root_value	test/clangsa/MissingRoots.c	/^jl_value_t *root_value() {$/;"	f	typeref:typename:jl_value_t *
rootdirs	contrib/add_license_to_files.jl	/^const rootdirs = [$/;"	v
roots	src/codegen.cpp	/^    jl_array_t *roots = NULL;$/;"	m	class:jl_codectx_t	typeref:typename:jl_array_t *	file:
roots	src/julia.h	/^    jl_array_t *roots;  \/\/ pointers in generated code (shared to reduce memory), or null$/;"	m	struct:_jl_method_t	typeref:typename:jl_array_t *
roottask	base/initdefs.jl	/^const roottask = current_task()$/;"	v
rot180	base/arraymath.jl	/^function rot180(A::AbstractMatrix)$/;"	f
rot180	base/arraymath.jl	/^rot180(A::AbstractMatrix, k::Integer) = mod(k, 2) == 1 ? rot180(A) : copy(A)$/;"	f
rot180	stdlib/SparseArrays/src/sparsematrix.jl	/^function rot180(A::AbstractSparseMatrixCSC)$/;"	f
rotl32	src/support/MurmurHash3.c	/^static inline uint32_t rotl32 ( uint32_t x, int8_t r )$/;"	f	typeref:typename:uint32_t	file:
rotl64	src/support/MurmurHash3.c	/^static inline uint64_t rotl64 ( uint64_t x, int8_t r )$/;"	f	typeref:typename:uint64_t	file:
rotl90	base/arraymath.jl	/^function rotl90(A::AbstractMatrix)$/;"	f
rotl90	base/arraymath.jl	/^function rotl90(A::AbstractMatrix, k::Integer)$/;"	f
rotl90	stdlib/SparseArrays/src/sparsematrix.jl	/^function rotl90(A::AbstractSparseMatrixCSC)$/;"	f
rotr90	base/arraymath.jl	/^function rotr90(A::AbstractMatrix)$/;"	f
rotr90	base/arraymath.jl	/^rotr90(A::AbstractMatrix, k::Integer) = rotl90(A,-k)$/;"	f
rotr90	stdlib/SparseArrays/src/sparsematrix.jl	/^function rotr90(A::AbstractSparseMatrixCSC)$/;"	f
round	base/complex.jl	/^function round(z::Complex, rr::RoundingMode=RoundNearest, ri::RoundingMode=rr; kwargs...)$/;"	f
round	base/float.jl	/^round(::Type{T}, x::AbstractFloat) where {T<:Integer} = trunc(T,round(x, RoundNearest))$/;"	f
round	base/float.jl	/^round(::Type{T}, x::Float16) where {T<:Integer} = round(T, Float32(x))$/;"	f
round	base/float.jl	/^round(x::Float16, r::RoundingMode{:Down}) = Float16(round(Float32(x), r))$/;"	f
round	base/float.jl	/^round(x::Float16, r::RoundingMode{:Nearest}) = Float16(round(Float32(x), r))$/;"	f
round	base/float.jl	/^round(x::Float16, r::RoundingMode{:ToZero}) = Float16(round(Float32(x), r))$/;"	f
round	base/float.jl	/^round(x::Float16, r::RoundingMode{:Up}) = Float16(round(Float32(x), r))$/;"	f
round	base/float.jl	/^round(x::Float32, r::RoundingMode{:Down})    = floor_llvm(x)$/;"	f
round	base/float.jl	/^round(x::Float32, r::RoundingMode{:Nearest}) = rint_llvm(x)$/;"	f
round	base/float.jl	/^round(x::Float32, r::RoundingMode{:ToZero})  = trunc_llvm(x)$/;"	f
round	base/float.jl	/^round(x::Float32, r::RoundingMode{:Up})      = ceil_llvm(x)$/;"	f
round	base/float.jl	/^round(x::Float64, r::RoundingMode{:Down})    = floor_llvm(x)$/;"	f
round	base/float.jl	/^round(x::Float64, r::RoundingMode{:Nearest}) = rint_llvm(x)$/;"	f
round	base/float.jl	/^round(x::Float64, r::RoundingMode{:ToZero})  = trunc_llvm(x)$/;"	f
round	base/float.jl	/^round(x::Float64, r::RoundingMode{:Up})      = ceil_llvm(x)$/;"	f
round	base/floatfuncs.jl	/^function round(x::AbstractFloat, ::RoundingMode{:NearestTiesAway})$/;"	f
round	base/floatfuncs.jl	/^function round(x::Real, r::RoundingMode=RoundNearest;$/;"	f
round	base/floatfuncs.jl	/^function round(x::T, ::RoundingMode{:NearestTiesUp}) where {T <: AbstractFloat}$/;"	f
round	base/floatfuncs.jl	/^round(::Type{T}, x::AbstractFloat, r::RoundingMode) where {T<:Integer} = trunc(T, round(x,r))$/;"	f
round	base/floatfuncs.jl	/^round(::Type{T}, x::AbstractFloat, r::RoundingMode{:ToZero}) where {T<:Integer} = trunc(T, x)$/;"	f
round	base/floatfuncs.jl	/^round(x::Integer, r::RoundingMode) = x$/;"	f
round	base/int.jl	/^round(::Type{T}, x::Integer) where {T<:Integer} = convert(T, x)$/;"	f
round	base/irrationals.jl	/^round(x::Irrational, r::RoundingMode) = round(float(x), r)$/;"	f
round	base/missing.jl	/^round(::Missing, ::RoundingMode=RoundNearest; sigdigits::Integer=0, digits::Integer=0, base::Int/;"	f
round	base/missing.jl	/^round(::Type{>:Missing}, ::Missing, ::RoundingMode=RoundNearest) = missing$/;"	f
round	base/missing.jl	/^round(::Type{T}, ::Missing, ::RoundingMode=RoundNearest) where {T} =$/;"	f
round	base/missing.jl	/^round(::Type{T}, x::Any, r::RoundingMode=RoundNearest) where {T>:Missing} = round(nonmissingtype/;"	f
round	base/missing.jl	/^round(::Type{T}, x::Rational, r::RoundingMode=RoundNearest) where {T>:Missing} = round(nonmissin/;"	f
round	base/missing.jl	/^round(::Type{T}, x::Rational{Bool}, r::RoundingMode=RoundNearest) where {T>:Missing} = round(non/;"	f
round	base/mpfr.jl	/^        function round(x::BigFloat, ::RoundingMode{$(QuoteNode(R))})$/;"	f
round	base/mpfr.jl	/^function round(::Type{T}, x::BigFloat) where T<:Union{Signed,Unsigned}$/;"	f
round	base/mpfr.jl	/^round(::Type{BigInt}, x::BigFloat) = unsafe_cast(BigInt, x, ROUNDING_MODE[])$/;"	f
round	base/mpfr.jl	/^round(::Type{Integer}, x::BigFloat) = round(BigInt, x)$/;"	f
round	base/rational.jl	/^function round(::Type{T}, x::Rational{Bool}, ::RoundingMode=RoundNearest) where T$/;"	f
round	base/rational.jl	/^round(::Type{T}, x::Rational, r::RoundingMode=RoundNearest) where {T} = _round_rational(T, x, r)$/;"	f
round	base/rational.jl	/^round(x::Rational, r::RoundingMode) = round(Rational, x, r)$/;"	f
round	base/rational.jl	/^round(x::Rational{T}) where {T} = Rational(round(T,x))$/;"	f
roundUp	deps/srccache/patchelf-0.9/src/patchelf.cc	/^static unsigned int roundUp(unsigned int n, unsigned int m)$/;"	f	typeref:typename:unsigned int	file:
rounding	base/mpfr.jl	/^rounding(::Type{BigFloat}) = convert(RoundingMode, rounding_raw(BigFloat))$/;"	f
rounding	base/rounding.jl	/^rounding(::Type{T}) where {T<:Union{Float32,Float64}} = from_fenv(rounding_raw(T))$/;"	f
rounding_raw	base/mpfr.jl	/^rounding_raw(::Type{BigFloat}) = ROUNDING_MODE[]$/;"	f
rounding_raw	base/rounding.jl	/^rounding_raw(::Type{<:Union{Float32,Float64}}) = ccall(:fegetround, Int32, ())$/;"	f
roundshift	test/ranges.jl	/^function roundshift(x, n)$/;"	f
roundup	base/grisu/fastfixed.jl	/^function roundup(buffer, len, decimal_point)$/;"	f
roundweed	base/grisu/fastprecision.jl	/^function roundweed(buffer,len,rest,tk,unit,kappa)$/;"	f
roundweed	base/grisu/fastshortest.jl	/^function roundweed(buffer,len,rest,tk,unit,kappa,too_high::UInt64,unsafe_interval::UInt64)$/;"	f
rowlength!	stdlib/Markdown/src/GitHub/table.jl	/^function rowlength!(row, len)$/;"	f
rowvals	stdlib/SparseArrays/src/sparsematrix.jl	/^rowvals(S::SparseMatrixCSC) = getfield(S, :rowval)$/;"	f
rowvals	stdlib/SparseArrays/src/sparsematrix.jl	/^rowvals(S::SparseMatrixCSCView) = rowvals(S.parent)$/;"	f
rpPrint	deps/srccache/patchelf-0.9/src/patchelf.cc	/^    typedef enum { rpPrint, rpShrink, rpSet, rpRemove } RPathOp;$/;"	e	enum:ElfFile::__anon94ea2e970203	file:
rpRemove	deps/srccache/patchelf-0.9/src/patchelf.cc	/^    typedef enum { rpPrint, rpShrink, rpSet, rpRemove } RPathOp;$/;"	e	enum:ElfFile::__anon94ea2e970203	file:
rpSet	deps/srccache/patchelf-0.9/src/patchelf.cc	/^    typedef enum { rpPrint, rpShrink, rpSet, rpRemove } RPathOp;$/;"	e	enum:ElfFile::__anon94ea2e970203	file:
rpShrink	deps/srccache/patchelf-0.9/src/patchelf.cc	/^    typedef enum { rpPrint, rpShrink, rpSet, rpRemove } RPathOp;$/;"	e	enum:ElfFile::__anon94ea2e970203	file:
rpad	base/strings/util.jl	/^function rpad($/;"	f
rpad	base/strings/util.jl	/^rpad(s, n::Integer, p::Union{AbstractChar,AbstractString}=' ') = rpad(string(s), n, string(p))$/;"	f
rpm_provides	contrib/windows/winrpm.sh	/^rpm_provides() {$/;"	f
rpm_provides	test/core.jl	/^function rpm_provides(r::T) where T$/;"	f
rpm_requires	contrib/windows/winrpm.sh	/^rpm_requires() {$/;"	f
rpm_select	contrib/windows/winrpm.sh	/^rpm_select() {$/;"	f
rr_list	stdlib/Distributed/test/distributed_exec.jl	/^rr_list = [Channel(1) for x in 1:ntasks]$/;"	v
rrid	stdlib/Distributed/test/distributed_exec.jl	/^rrid = Distributed.RRID(f.whence, f.id)$/;"	v
rrot	stdlib/SHA/src/base_functions.jl	/^rrot(b,x,width) = ((x >> b) | (x << (width - b)))$/;"	f
rsplit	base/strings/util.jl	/^function rsplit end$/;"	f
rsplit	base/strings/util.jl	/^function rsplit(str::T, splitter::AbstractChar;$/;"	f
rsplit	base/strings/util.jl	/^function rsplit(str::T, splitter::Union{Tuple{Vararg{<:AbstractChar}},AbstractVector{<:AbstractC/;"	f
rsplit	base/strings/util.jl	/^function rsplit(str::T, splitter;$/;"	f
rst	stdlib/Markdown/src/GitHub/table.jl	/^function rst(io::IO, md::Table)$/;"	f
rst	stdlib/Markdown/src/render/rst.jl	/^function rst(io::IO, code::Code)$/;"	f
rst	stdlib/Markdown/src/render/rst.jl	/^function rst(io::IO, content::Vector)$/;"	f
rst	stdlib/Markdown/src/render/rst.jl	/^function rst(io::IO, f::Footnote)$/;"	f
rst	stdlib/Markdown/src/render/rst.jl	/^function rst(io::IO, header::Header{l}) where l$/;"	f
rst	stdlib/Markdown/src/render/rst.jl	/^function rst(io::IO, l::LaTeX)$/;"	f
rst	stdlib/Markdown/src/render/rst.jl	/^function rst(io::IO, list::List)$/;"	f
rst	stdlib/Markdown/src/render/rst.jl	/^function rst(io::IO, md::Admonition)$/;"	f
rst	stdlib/Markdown/src/render/rst.jl	/^function rst(io::IO, md::HorizontalRule)$/;"	f
rst	stdlib/Markdown/src/render/rst.jl	/^function rst(io::IO, p::Paragraph)$/;"	f
rst	stdlib/Markdown/src/render/rst.jl	/^function rst(io::IO, q::BlockQuote)$/;"	f
rst	stdlib/Markdown/src/render/rst.jl	/^rst(io::IO, md) = show(io, "text\/rst", md)$/;"	f
rst	stdlib/Markdown/src/render/rst.jl	/^rst(io::IO, md::MD) = rst(io, md.content)$/;"	f
rst	stdlib/Markdown/src/render/rst.jl	/^rst(x) = sprint(rst, x)$/;"	f
rstescape	stdlib/Markdown/src/render/rst.jl	/^rstescape(s) = replace(s, "\\\\" => "\\\\\\\\")$/;"	f
rstinline	stdlib/Markdown/src/render/rst.jl	/^function rstinline(io::IO, md...)$/;"	f
rstinline	stdlib/Markdown/src/render/rst.jl	/^function rstinline(io::IO, md::Link)$/;"	f
rstinline	stdlib/Markdown/src/render/rst.jl	/^rstinline(io::IO, br::LineBreak) = println(io)$/;"	f
rstinline	stdlib/Markdown/src/render/rst.jl	/^rstinline(io::IO, f::Footnote) = print(io, "[", f.id, "]_")$/;"	f
rstinline	stdlib/Markdown/src/render/rst.jl	/^rstinline(io::IO, l::LaTeX) = print(io, ":math:`", l.formula, "`")$/;"	f
rstinline	stdlib/Markdown/src/render/rst.jl	/^rstinline(io::IO, md::Bold) = rstinline(io, "**", md.text, "**")$/;"	f
rstinline	stdlib/Markdown/src/render/rst.jl	/^rstinline(io::IO, md::Code) = print(io, "``", md.code, "``")$/;"	f
rstinline	stdlib/Markdown/src/render/rst.jl	/^rstinline(io::IO, md::Italic) = rstinline(io, "*", md.text, "*")$/;"	f
rstinline	stdlib/Markdown/src/render/rst.jl	/^rstinline(io::IO, md::Vector) = !isempty(md) && rstinline(io, md...)$/;"	f
rstinline	stdlib/Markdown/src/render/rst.jl	/^rstinline(io::IO, s::AbstractString) = print(io, rstescape(s))$/;"	f
rstinline	stdlib/Markdown/src/render/rst.jl	/^rstinline(io::IO, x) = show(io, MIME"text\/rst"(), x)$/;"	f
rstinline	stdlib/Markdown/src/render/rst.jl	/^rstinline(x) = sprint(rstinline, x)$/;"	f
rstrip	base/strings/util.jl	/^function rstrip(f, s::AbstractString)$/;"	f
rstrip	base/strings/util.jl	/^rstrip(s::AbstractString) = rstrip(isspace, s)$/;"	f
rstrip	base/strings/util.jl	/^rstrip(s::AbstractString, chars::Chars) = rstrip(in(chars), s)$/;"	f
rstrip_shell	base/shell.jl	/^function rstrip_shell(s::AbstractString)$/;"	f
rt	src/ccall.cpp	/^    jl_value_t *rt; \/\/ julia return type$/;"	m	class:function_sig_t	typeref:typename:jl_value_t *	file:
rt	test/broadcast.jl	/^rt = Base.return_types(broadcast!, Tuple{Function, Array{Float64, 3}, Array{Float64, 3}, Array{I/;"	v
rt	test/broadcast.jl	/^rt = Base.return_types(broadcast, Tuple{typeof(+), Array{Float64, 3}, Array{Int, 1}})$/;"	v
rt_addr	src/cgmemmgr.cpp	/^    void *rt_addr;$/;"	m	struct:__anon06c686bc0111::Allocation	typeref:typename:void *	file:
rt_sse	test/ccall.jl	/^        @eval function rt_sse(a1::$T, a2::$T, a3::$T, a4::$T)$/;"	f
rtoldefault	base/floatfuncs.jl	/^function rtoldefault(x::Union{T,Type{T}}, y::Union{S,Type{S}}, atol::Real) where {T<:Number,S<:N/;"	f
rtoldefault	base/floatfuncs.jl	/^rtoldefault(::Type{<:Real}) = 0$/;"	f
rtoldefault	base/floatfuncs.jl	/^rtoldefault(::Type{T}) where {T<:AbstractFloat} = sqrt(eps(T))$/;"	f
rtruncto	stdlib/Profile/src/Profile.jl	/^function rtruncto(str::String, w::Int)$/;"	f
run	base/process.jl	/^function run(cmds::AbstractCmd, args...; wait::Bool = true)$/;"	f
run	stdlib/LibGit2/src/gitcredential.jl	/^function run(helper::GitCredentialHelper, operation::AbstractString, cred::GitCredential)$/;"	f
run!	stdlib/LibGit2/src/gitcredential.jl	/^function run!(helper::GitCredentialHelper, operation::AbstractString, cred::GitCredential)$/;"	f
runOnBasicBlock	src/llvm-api.cpp	/^    bool runOnBasicBlock(BasicBlock &BB)$/;"	f	class:llvm::JuliaBasicBlockPass	typeref:typename:bool	file:
runOnFunction	src/llvm-alloc-opt.cpp	/^bool AllocOpt::runOnFunction(Function &F)$/;"	f	class:__anon0a1571000111::AllocOpt	typeref:typename:bool
runOnFunction	src/llvm-api.cpp	/^    bool runOnFunction(Function &Fn)$/;"	f	class:llvm::JuliaFunctionPass	typeref:typename:bool	file:
runOnFunction	src/llvm-final-gc-lowering.cpp	/^bool FinalLowerGC::runOnFunction(Function &F)$/;"	f	class:FinalLowerGC	typeref:typename:bool
runOnFunction	src/llvm-gc-invariant-verifier.cpp	/^bool GCInvariantVerifier::runOnFunction(Function &F) {$/;"	f	class:GCInvariantVerifier	typeref:typename:bool
runOnFunction	src/llvm-late-gc-lowering.cpp	/^bool LateLowerGCFrame::runOnFunction(Function &F) {$/;"	f	class:LateLowerGCFrame	typeref:typename:bool
runOnFunction	src/llvm-lower-handlers.cpp	/^bool LowerExcHandlers::runOnFunction(Function &F) {$/;"	f	class:LowerExcHandlers	typeref:typename:bool
runOnFunction	src/llvm-muladd.cpp	/^bool CombineMulAdd::runOnFunction(Function &F)$/;"	f	class:CombineMulAdd	typeref:typename:bool
runOnFunction	src/llvm-propagate-addrspaces.cpp	/^bool PropagateJuliaAddrspaces::runOnFunction(Function &F) {$/;"	f	class:PropagateJuliaAddrspaces	typeref:typename:bool
runOnModule	src/llvm-api.cpp	/^    bool runOnModule(Module &M)$/;"	f	class:llvm::JuliaModulePass	typeref:typename:bool	file:
runOnModule	src/llvm-multiversioning.cpp	/^bool MultiVersioning::runOnModule(Module &M)$/;"	f	class:__anond5683ea40111::MultiVersioning	typeref:typename:bool
runOnModule	src/llvm-ptls.cpp	/^bool LowerPTLS::runOnModule(Module &_M)$/;"	f	class:__anonf46923380111::LowerPTLS	typeref:typename:bool
runOnModule	src/llvm-simdloop.cpp	/^bool LowerSIMDLoop::runOnModule(Module &M)$/;"	f	class:llvm::LowerSIMDLoop	typeref:typename:bool
run_finalizer	src/gc.c	/^static void run_finalizer(jl_ptls_t ptls, jl_value_t *o, jl_value_t *ff)$/;"	f	typeref:typename:void	file:
run_finalizers	src/gc.c	/^static void run_finalizers(jl_ptls_t ptls)$/;"	f	typeref:typename:void	file:
run_frontend	stdlib/REPL/src/REPL.jl	/^function run_frontend(repl::BasicREPL, backend::REPLBackendRef)$/;"	f
run_frontend	stdlib/REPL/src/REPL.jl	/^function run_frontend(repl::LineEditREPL, backend::REPLBackendRef)$/;"	f
run_frontend	stdlib/REPL/src/REPL.jl	/^function run_frontend(repl::StreamREPL, backend::REPLBackendRef)$/;"	f
run_interface	stdlib/REPL/src/LineEdit.jl	/^function run_interface(terminal::TextTerminal, m::ModalInterface, s::MIState=init_state(terminal/;"	f
run_interface	stdlib/REPL/src/LineEdit.jl	/^run_interface(::Prompt) = nothing$/;"	f
run_main_repl	base/client.jl	/^function run_main_repl(interactive::Bool, quiet::Bool, banner::Bool, history_file::Bool, color_s/;"	f
run_map_equivalence_tests	test/generic_map_tests.jl	/^function run_map_equivalence_tests(mapf)$/;"	f
run_mtest	test/netload/memtest.jl	/^function run_mtest(name, testf)$/;"	f
run_passes	base/compiler/ssair/driver.jl	/^function run_passes(ci::CodeInfo, nargs::Int, sv::OptimizationState)$/;"	f
run_repl	stdlib/REPL/src/REPL.jl	/^function run_repl(repl::AbstractREPL, @nospecialize(consumer = x -> nothing))$/;"	f
run_repl	stdlib/REPL/src/REPL.jl	/^run_repl(stream::IO) = run_repl(StreamREPL(stream))$/;"	f
run_test	stdlib/REPL/test/lineedit.jl	/^function run_test(d,buf)$/;"	f
run_test_server	test/read.jl	/^function run_test_server(srv, text)$/;"	f
run_work_thunk	stdlib/Distributed/src/process_messages.jl	/^function run_work_thunk(rv::RemoteValue, thunk)$/;"	f
run_work_thunk	stdlib/Distributed/src/process_messages.jl	/^function run_work_thunk(thunk, print_error)$/;"	f
runnable_sym	src/task.c	/^jl_sym_t *runnable_sym;$/;"	v	typeref:typename:jl_sym_t *
running	src/signal-handling.c	/^static volatile int running = 0;$/;"	v	typeref:typename:volatile int	file:
running	src/timing.h	/^    uint8_t running;$/;"	m	struct:_jl_timing_block_t	typeref:typename:uint8_t
runsubarraytests	test/subarray.jl	/^function runsubarraytests(@nospecialize(A), I...)$/;"	f
runsubarraytests	test/subarray.jl	/^function runsubarraytests(A::Array, I...)$/;"	f
runtests	base/util.jl	/^function runtests(tests = ["all"]; ncores = ceil(Int, Sys.CPU_THREADS \/ 2),$/;"	f
runtests	stdlib/LibGit2/src/tree.jl	/^runtests = subtree["runtests.jl"]$/;"	v
runtests	test/testdefs.jl	/^function runtests(name, path, isolate=true; seed=nothing)$/;"	f
runtime_apply_type_env	src/ccall.cpp	/^static Value *runtime_apply_type_env(jl_codectx_t &ctx, jl_value_t *ty)$/;"	f	typeref:typename:Value *	file:
runtime_func	src/intrinsics.cpp	/^static Function *runtime_func[num_intrinsics];$/;"	v	typeref:typename:Function * []	file:
runtime_sym_gvs	src/ccall.cpp	/^static bool runtime_sym_gvs(const char *f_lib, const char *f_name, MT &&M,$/;"	f	typeref:typename:bool	file:
runtime_sym_lookup	src/ccall.cpp	/^static Value *runtime_sym_lookup($/;"	f	typeref:typename:Value *	file:
runviews	test/subarray.jl	/^function runviews(SB::AbstractArray, indexN, indexNN, indexNNN)$/;"	f
runviews	test/subarray.jl	/^function runviews(SB::AbstractArray{T, 3} where T, indexN, indexNN, indexNNN)$/;"	f
runviews	test/subarray.jl	/^function runviews(SB::AbstractArray{T,1}, indexN, indexNN, indexNNN) where T$/;"	f
runviews	test/subarray.jl	/^function runviews(SB::AbstractArray{T,2}, indexN, indexNN, indexNNN) where T$/;"	f
runviews	test/subarray.jl	/^runviews(SB::AbstractArray{T,0}, indexN, indexNN, indexNNN) where {T} = nothing$/;"	f
rv	test/offsetarray.jl	/^rv = reverse(v)$/;"	v
rw_alloc	src/cgmemmgr.cpp	/^    RWAllocator rw_alloc;$/;"	m	class:__anon06c686bc0111::RTDyldMemoryManagerJL	typeref:typename:RWAllocator	file:
s	doc/NEWS-update.jl	/^s = read(NEWS, String)$/;"	v
s	src/dump.c	/^    ios_t *s;$/;"	m	struct:__anon570497e30108	typeref:typename:ios_t *	file:
s	src/flisp/flisp.c	/^    fixnum_t s, hi;$/;"	v	typeref:typename:fixnum_t
s	src/gc.h	/^    jl_excstack_t *s;  \/\/ Stack of exceptions$/;"	m	struct:__anoncf30557c0b08	typeref:typename:jl_excstack_t *
s	src/gc.h	/^    jl_gcframe_t *s; \/\/ The current stack frame$/;"	m	struct:__anoncf30557c0a08	typeref:typename:jl_gcframe_t *
s	src/staticdata.c	/^    ios_t *s;$/;"	m	struct:__anonc3a2e68f0108	typeref:typename:ios_t *	file:
s	stdlib/Dates/test/periods.jl	/^s = Dates.Second(1)$/;"	v
s	stdlib/Dates/test/types.jl	/^s = Dates.Second(1)$/;"	v
s	stdlib/Distributed/test/distributed_exec.jl	/^s = [randstring() for x in 1:10^5]$/;"	v
s	stdlib/Mmap/src/Mmap.jl	/^s = open("\/tmp\/mmap.bin")   # default is read-only$/;"	v
s	stdlib/Mmap/src/Mmap.jl	/^s = open("\/tmp\/mmap.bin", "w+")$/;"	v
s	stdlib/Mmap/test/runtests.jl	/^s = open(f->f,file,"w")$/;"	v
s	stdlib/Mmap/test/runtests.jl	/^s = open(file)$/;"	v
s	stdlib/Mmap/test/runtests.jl	/^s = open(file, "r")$/;"	v
s	stdlib/Mmap/test/runtests.jl	/^s = open(file, "r+")$/;"	v
s	stdlib/Mmap/test/runtests.jl	/^s = open(file, "w")$/;"	v
s	stdlib/Mmap/test/runtests.jl	/^s = open(fname)$/;"	v
s	stdlib/Mmap/test/runtests.jl	/^s = open(fname, "w+")$/;"	v
s	stdlib/SharedArrays/test/runtests.jl	/^s = SharedArrays.shmem_rand(dims)$/;"	v
s	stdlib/SharedArrays/test/runtests.jl	/^s = copy(sdata(d))$/;"	v
s	test/docs.jl	/^@generated function s(x)$/;"	f
s	test/docs.jl	/^@generated s(x, y) = :(x + y)$/;"	f
s	test/file.jl	/^s = open(file)$/;"	v
s	test/file.jl	/^s = open(file, "w")$/;"	v
s	test/read.jl	/^s = io(text)$/;"	v
s	test/triplequote.jl	/^s = "   p"$/;"	v
s1	test/arrayops.jl	/^s1() = 1$/;"	f
s1	test/ccall.jl	/^s1 = Struct1(352.39422f23, 19.287577)$/;"	v
s21074	test/compiler/inline.jl	/^struct s21074$/;"	f
s22021	test/strings/io.jl	/^s22021 = String["\\"\\"\\"$/;"	v
sA	stdlib/SparseArrays/test/sparse.jl	/^sA = sprandn(3, 7, 0.5)$/;"	v
sA	test/subarray.jl	/^sA = view(A, 1:1, 1:5, [1 3; 4 2])$/;"	v
sA	test/subarray.jl	/^sA = view(A, 1:2, 1:3)$/;"	v
sA	test/subarray.jl	/^sA = view(A, 1:2, 2:3, 3:4)$/;"	v
sA	test/subarray.jl	/^sA = view(A, 1:2, 3, [1 3; 4 2])$/;"	v
sA	test/subarray.jl	/^sA = view(A, 1:2:3, 1:3:5, 1:2:8)$/;"	v
sA	test/subarray.jl	/^sA = view(A, 1:2:3, 3, 1:2:8)$/;"	v
sA	test/subarray.jl	/^sA = view(A, 1:3, 1:5, 5)$/;"	v
sA	test/subarray.jl	/^sA = view(A, 1:3, 3:3, 2:5)$/;"	v
sA	test/subarray.jl	/^sA = view(A, 2, :, 1:8)$/;"	v
sA	test/subarray.jl	/^sA = view(A, 2:2, 1:5, :)$/;"	v
sA	test/subarray.jl	/^sA = view(A, :, :, 1)$/;"	v
sA	test/subarray.jl	/^sA = view(A, :, :, :)$/;"	v
sB	test/subarray.jl	/^sB = view(B, 2:3, 2:3)$/;"	v
sC	stdlib/SparseArrays/test/sparse.jl	/^sC = similar(sA)$/;"	v
sTYPEMAX	src/runtime_intrinsics.c	/^#define sTYPEMAX(/;"	d	file:
sTYPEMIN	src/runtime_intrinsics.c	/^#define sTYPEMIN(/;"	d	file:
s_18109	test/strings/search.jl	/^s_18109 = "fooα🐨βcd3"$/;"	v
s_str	base/regex.jl	/^macro s_str(string) SubstitutionString(string) end$/;"	f
sa_ref	stdlib/LibGit2/src/types.jl	/^sa_ref = Ref(StrArrayStruct())$/;"	v
sa_refs	stdlib/SharedArrays/src/SharedArrays.jl	/^const sa_refs = Dict{RRID, WeakRef}()$/;"	v
safe-arg-names	src/macroexpand.scm	/^(define (safe-arg-names lst (escaped #f))$/;"	f
safe-field-names	src/julia-syntax.scm	/^(define (safe-field-names field-names field-types)$/;"	f
safe-llist-keyword-args	src/macroexpand.scm	/^(define (safe-llist-keyword-args lst)$/;"	f
safe-llist-positional-args	src/macroexpand.scm	/^(define (safe-llist-positional-args lst (escaped #f))$/;"	f
safe_cor	stdlib/Statistics/test/runtests.jl	/^function safe_cor(x, y, zm::Bool)$/;"	f
safe_cov	stdlib/Statistics/test/runtests.jl	/^function safe_cov(x, y, zm::Bool, cr::Bool)$/;"	f
safe_mapslices	test/reducedim.jl	/^function safe_mapslices(op, A, region)$/;"	f
safe_maxabs	test/reducedim.jl	/^safe_maxabs(A::Array{T}, region) where {T} = safe_mapslices(maximum, abs.(A), region)$/;"	f
safe_maximum	test/reducedim.jl	/^safe_maximum(A::Array{T}, region) where {T} = safe_mapslices(maximum, A, region)$/;"	f
safe_minabs	test/reducedim.jl	/^safe_minabs(A::Array{T}, region) where {T} = safe_mapslices(minimum, abs.(A), region)$/;"	f
safe_minimum	test/reducedim.jl	/^safe_minimum(A::Array{T}, region) where {T} = safe_mapslices(minimum, A, region)$/;"	f
safe_prod	test/reducedim.jl	/^safe_prod(A::Array{T}, region) where {T} = safe_mapslices(prod, A, region)$/;"	f
safe_restore	src/julia_threads.h	/^    jl_jmp_buf *safe_restore;$/;"	m	struct:_jl_tls_states_t	typeref:typename:jl_jmp_buf *
safe_sum	test/reducedim.jl	/^safe_sum(A::Array{T}, region) where {T} = safe_mapslices(sum, A, region)$/;"	f
safe_sumabs	test/reducedim.jl	/^safe_sumabs(A::Array{T}, region) where {T} = safe_mapslices(sum, abs.(A), region)$/;"	f
safe_sumabs2	test/reducedim.jl	/^safe_sumabs2(A::Array{T}, region) where {T} = safe_mapslices(sum, abs2.(A), region)$/;"	f
safe_tail	base/tuple.jl	/^safe_tail(t::Tuple) = tail(t)$/;"	f
safe_tail	base/tuple.jl	/^safe_tail(t::Tuple{}) = ()$/;"	f
safe_trunc	src/debuginfo.cpp	/^static U safe_trunc(T t)$/;"	f	typeref:typename:U	file:
safepoint	base/gcutils.jl	/^safepoint() = ccall(:jl_gc_safepoint, Cvoid, ())$/;"	f
safepoint	src/julia_threads.h	/^    volatile size_t *safepoint;$/;"	m	struct:_jl_tls_states_t	typeref:typename:volatile size_t *
safepointEnabledHere	src/clangsa/GCChecker.cpp	/^bool GCChecker::safepointEnabledHere(CheckerContext &C) const {$/;"	f	class:GCChecker	typeref:typename:bool
safepoint_lock	src/safepoint.c	/^jl_mutex_t safepoint_lock;$/;"	v	typeref:typename:jl_mutex_t
same_names	base/namedtuple.jl	/^same_names(::NamedTuple...) = false$/;"	f
same_names	base/namedtuple.jl	/^same_names(::NamedTuple{names}...) where {names} = true$/;"	f
samebits	src/llvm-multiversioning.cpp	/^        bool samebits;$/;"	m	struct:__anond5683ea40111::ConstantUses::Info	typeref:typename:bool	file:
samefile	base/stat.jl	/^function samefile(a::AbstractString, b::AbstractString)$/;"	f
samefile	base/stat.jl	/^samefile(a::StatStruct, b::StatStruct) = a.device==b.device && a.inode==b.inode$/;"	f
sametype_error	base/promotion.jl	/^function sametype_error(input)$/;"	f
sample	stdlib/LinearAlgebra/test/addmul.jl	/^function sample(S, n::Real)$/;"	f
samsung_exynos_m1	src/processor_arm.cpp	/^    samsung_exynos_m1,$/;"	e	enum:ARM::CPU	file:
samsung_exynos_m1	src/processor_arm.cpp	/^constexpr auto samsung_exynos_m1 = armv8a_crc_crypto;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
samsung_exynos_m2	src/processor_arm.cpp	/^    samsung_exynos_m2,$/;"	e	enum:ARM::CPU	file:
samsung_exynos_m2	src/processor_arm.cpp	/^constexpr auto samsung_exynos_m2 = armv8a_crc_crypto;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
samsung_exynos_m3	src/processor_arm.cpp	/^    samsung_exynos_m3,$/;"	e	enum:ARM::CPU	file:
samsung_exynos_m3	src/processor_arm.cpp	/^constexpr auto samsung_exynos_m3 = armv8a_crc_crypto;$/;"	v	namespace:ARM::Feature	typeref:typename:auto
sandybridge	src/processor_x86.cpp	/^constexpr auto sandybridge = westmere | get_feature_masks(avx, xsave, xsaveopt);$/;"	v	namespace:X86::Feature	typeref:typename:auto
sans	stdlib/REPL/src/latex_symbols.jl	/^const sans = "\\\\sans"$/;"	v
sasum_	deps/gfortblas.c	/^float sasum_(int *N, float *SX, int *INCX) {$/;"	f	typeref:typename:float
save_env	src/subtype.c	/^static void save_env(jl_stenv_t *e, jl_value_t **root, jl_savedenv_t *se)$/;"	f	typeref:typename:void	file:
save_stack	src/task.c	/^static void NOINLINE save_stack(jl_ptls_t ptls, jl_task_t *lastt, jl_task_t **pt)$/;"	f	typeref:typename:void NOINLINE	file:
saved_active_project	test/loading.jl	/^saved_active_project = Base.ACTIVE_PROJECT[]$/;"	v
saved_depot_path	test/loading.jl	/^saved_depot_path = copy(DEPOT_PATH)$/;"	v
saved_home_project	test/loading.jl	/^saved_home_project = Base.HOME_PROJECT[]$/;"	v
saved_load_path	test/loading.jl	/^saved_load_path = copy(LOAD_PATH)$/;"	v
sb_accuracy	test/complex.jl	/^function sb_accuracy(x,expected)$/;"	f
sbindir	deps/srccache/patchelf-0.9/Makefile.in	/^sbindir = @sbindir@$/;"	m
sbindir	deps/srccache/patchelf-0.9/src/Makefile.in	/^sbindir = @sbindir@$/;"	m
sbindir	deps/srccache/patchelf-0.9/tests/Makefile.in	/^sbindir = @sbindir@$/;"	m
sbmv	stdlib/LinearAlgebra/src/blas.jl	/^        function sbmv(uplo::AbstractChar, k::Integer, A::AbstractMatrix{$elty}, x::AbstractVecto/;"	f
sbmv	stdlib/LinearAlgebra/src/blas.jl	/^        function sbmv(uplo::AbstractChar, k::Integer, alpha::($elty), A::AbstractMatrix{$elty}, /;"	f
sbmv!	stdlib/LinearAlgebra/src/blas.jl	/^        function sbmv!(uplo::AbstractChar, k::Integer, alpha::($elty), A::AbstractMatrix{$elty},/;"	f
sc	stdlib/SharedArrays/test/runtests.jl	/^sc = convert(SharedArray, complex.(sd,se))$/;"	v
scal	stdlib/LinearAlgebra/src/blas.jl	/^function scal end$/;"	f
scal	stdlib/LinearAlgebra/src/blas.jl	/^scal(n, DA, DX, incx) = scal!(n, DA, copy(DX), incx)$/;"	f
scal!	stdlib/LinearAlgebra/src/blas.jl	/^        function scal!(n::Integer, DA::$elty, DX::Union{Ptr{$elty},AbstractArray{$elty}}, incx::/;"	f
scal!	stdlib/LinearAlgebra/src/blas.jl	/^function scal! end$/;"	f
scalarwrappedarg	stdlib/SparseArrays/src/higherorderfns.jl	/^scalarwrappedarg(::Any) = false$/;"	f
scalarwrappedarg	stdlib/SparseArrays/src/higherorderfns.jl	/^scalarwrappedarg(::Union{AbstractArray{<:Any,0},Ref}) = true$/;"	f
scale	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "scale" : "1x"$/;"	s	object:images.0
scale	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "scale" : "1x"$/;"	s	object:images.2
scale	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "scale" : "1x"$/;"	s	object:images.4
scale	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "scale" : "1x"$/;"	s	object:images.6
scale	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "scale" : "1x"$/;"	s	object:images.8
scale	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "scale" : "2x"$/;"	s	object:images.1
scale	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "scale" : "2x"$/;"	s	object:images.3
scale	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "scale" : "2x"$/;"	s	object:images.5
scale	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "scale" : "2x"$/;"	s	object:images.7
scale	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "scale" : "2x"$/;"	s	object:images.9
scale!	stdlib/SuiteSparse/src/cholmod.jl	/^function scale!(S::Dense{Tv}, scale::Integer, A::Sparse{Tv}) where Tv<:VRealTypes$/;"	f
scaleargs_cdiv	base/complex.jl	/^function scaleargs_cdiv(a::Float64, b::Float64, c::Float64, d::Float64, ab::Float64, cd::Float64/;"	f
scaling_cdiv	base/complex.jl	/^@noinline function scaling_cdiv(a::Float64, b::Float64, c::Float64, d::Float64, ab::Float64, cd:/;"	f
scan_entry!	base/compiler/ssair/slot2ssa.jl	/^function scan_entry!(result::Vector{SlotInfo}, idx::Int, @nospecialize(stmt))$/;"	f
scan_slot_def_use	base/compiler/ssair/slot2ssa.jl	/^function scan_slot_def_use(nargs::Int, ci::CodeInfo, code::Vector{Any})$/;"	f
scan_ssa_use!	base/compiler/ssair/ir.jl	/^function scan_ssa_use!(push!, used, @nospecialize(stmt))$/;"	f
scan_ssa_use!	base/compiler/ssair/ir.jl	/^function scan_ssa_use!(used::IdSet, @nospecialize(stmt))$/;"	f
scanned_bytes	src/gc.c	/^static int64_t scanned_bytes; \/\/ young bytes scanned while marking$/;"	v	typeref:typename:int64_t	file:
scanned_bytes	src/julia_threads.h	/^    size_t scanned_bytes;$/;"	m	struct:__anonf8aecdb10808	typeref:typename:size_t
scasum_	deps/gfortblas.c	/^float scasum_(int *N, void *SX, int *INCX) {$/;"	f	typeref:typename:float
schanged	base/compiler/typelattice.jl	/^@inline schanged(@nospecialize(n), @nospecialize(o)) = (n !== o) && (o === NOT_FOUND || (n !== N/;"	f
schedule	base/task.jl	/^function schedule(t::Task, @nospecialize(arg); error=false)$/;"	f
schedule	base/task.jl	/^schedule(t::Task) = enq_work(t)$/;"	f
schedule_all_finalizers	src/gc.c	/^static void schedule_all_finalizers(arraylist_t *flist) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void	file:
schedule_and_wait	src/jsvm-emscripten/asyncify_setup.js	/^function schedule_and_wait(task) {$/;"	f
schedule_call	stdlib/Distributed/src/process_messages.jl	/^function schedule_call(rid, thunk)$/;"	f
schedule_finalization	src/gc.c	/^static void schedule_finalization(void *o, void *f) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void	file:
schedule_next	src/jsvm-emscripten/asyncify_setup.js	/^function schedule_next()$/;"	f
schur	stdlib/LinearAlgebra/src/schur.jl	/^function schur(A::StridedMatrix{TA}, B::StridedMatrix{TB}) where {TA,TB}$/;"	f
schur	stdlib/LinearAlgebra/src/schur.jl	/^schur(A::Hermitian) = schur(copyto!(similar(parent(A)), A))$/;"	f
schur	stdlib/LinearAlgebra/src/schur.jl	/^schur(A::LowerTriangular) = schur(copyto!(similar(parent(A)), A))$/;"	f
schur	stdlib/LinearAlgebra/src/schur.jl	/^schur(A::StridedMatrix{<:BlasFloat}) = schur!(copy(A))$/;"	f
schur	stdlib/LinearAlgebra/src/schur.jl	/^schur(A::StridedMatrix{T},B::StridedMatrix{T}) where {T<:BlasFloat} = schur!(copy(A),copy(B))$/;"	f
schur	stdlib/LinearAlgebra/src/schur.jl	/^schur(A::Symmetric) = schur(copyto!(similar(parent(A)), A))$/;"	f
schur	stdlib/LinearAlgebra/src/schur.jl	/^schur(A::Tridiagonal) = schur(Matrix(A))$/;"	f
schur	stdlib/LinearAlgebra/src/schur.jl	/^schur(A::UpperTriangular) = schur(copyto!(similar(parent(A)), A))$/;"	f
schur!	stdlib/LinearAlgebra/src/schur.jl	/^schur!(A::StridedMatrix{<:BlasFloat}) = Schur(LinearAlgebra.LAPACK.gees!('V', A)...)$/;"	f
schur!	stdlib/LinearAlgebra/src/schur.jl	/^schur!(A::StridedMatrix{T}, B::StridedMatrix{T}) where {T<:BlasFloat} =$/;"	f
schurpow	stdlib/LinearAlgebra/src/dense.jl	/^function schurpow(A::AbstractMatrix, p)$/;"	f
scm_to_julia	src/ast.c	/^static jl_value_t *scm_to_julia(fl_context_t *fl_ctx, value_t e, jl_module_t *mod)$/;"	f	typeref:typename:jl_value_t *	file:
scm_to_julia_	src/ast.c	/^static jl_value_t *scm_to_julia_(fl_context_t *fl_ctx, value_t e, jl_module_t *mod)$/;"	f	typeref:typename:jl_value_t *	file:
scmsym_to_julia	src/ast.c	/^static jl_sym_t *scmsym_to_julia(fl_context_t *fl_ctx, value_t s)$/;"	f	typeref:typename:jl_sym_t *	file:
scnrm2_	deps/gfortblas.c	/^float scnrm2_(int *N, void *X, int *INCX) {$/;"	f	typeref:typename:float
scolno	src/julia-parser.scm	/^(define (scolno port) (string " near column " (input-port-column port)))$/;"	f
scolno+1	src/julia-parser.scm	/^(define (scolno+1 port) (string " near column " (+ 1 (input-port-column port))))$/;"	f
scope:args	src/julia-syntax.scm	/^(define (scope:args s)    (aref s 1))$/;"	f
scope:globals	src/julia-syntax.scm	/^(define (scope:globals s) (aref s 3))$/;"	f
scope:lam	src/julia-syntax.scm	/^(define (scope:lam s)     (aref s 0))$/;"	f
scope:locals	src/julia-syntax.scm	/^(define (scope:locals s)  (aref s 2))$/;"	f
scope:prev	src/julia-syntax.scm	/^(define (scope:prev s)    (aref s 6))$/;"	f
scope:renames	src/julia-syntax.scm	/^(define (scope:renames s) (aref s 5))$/;"	f
scope:sp	src/julia-syntax.scm	/^(define (scope:sp s)      (aref s 4))$/;"	f
scopenest	src/julia-syntax.scm	/^(define (scopenest names vals expr)$/;"	f
scopes	test/clangsa/MissingRoots.c	/^void scopes() {$/;"	f	typeref:typename:void
script	stdlib/REPL/src/latex_symbols.jl	/^const script = "\\\\scr"$/;"	v
scrub_backtrace	stdlib/Test/src/Test.jl	/^function scrub_backtrace(bt)$/;"	f
scrub_exc_stack	stdlib/Test/src/Test.jl	/^function scrub_exc_stack(stack)$/;"	f
scrub_repl_backtrace	base/client.jl	/^function scrub_repl_backtrace(bt)$/;"	f
sd	stdlib/SharedArrays/test/runtests.jl	/^sd = SharedArray{Int}(10)$/;"	v
sdastr	test/show.jl	/^    sdastr(f, n) =  # sda: Show Delim Array$/;"	f
sdata	stdlib/SharedArrays/src/SharedArrays.jl	/^sdata(A::AbstractArray) = A$/;"	f
sdata	stdlib/SharedArrays/src/SharedArrays.jl	/^sdata(S::SharedArray) = S.s$/;"	f
sdmult!	stdlib/SuiteSparse/src/cholmod.jl	/^function sdmult!(A::Sparse{Tv}, transpose::Bool,$/;"	f
sdot_	deps/gfortblas.c	/^float sdot_(int *N, float *SX, int *INCX, float *SY, int *INCY) {$/;"	f	typeref:typename:float
sdsdot_	deps/gfortblas.c	/^float sdsdot_(int *N, float *SB, float *SX, int *INCX, float *SY, int *INCY) {$/;"	f	typeref:typename:float
se	stdlib/SharedArrays/test/runtests.jl	/^se = SharedArray{Int}(10)$/;"	v
se33	stdlib/SparseArrays/test/sparse.jl	/^se33 = SparseMatrixCSC{Float64}(I, 3, 3)$/;"	v
searchsorted	base/sort.jl	/^function searchsorted(v::AbstractVector, x, ilo::T, ihi::T, o::Ordering) where T<:Integer$/;"	f
searchsorted	base/sort.jl	/^searchsorted(a::AbstractRange{<:Real}, x::Real, o::DirectOrdering) =$/;"	f
searchsortedfirst	base/sort.jl	/^function searchsortedfirst(a::AbstractRange{<:Integer}, x::Real, o::DirectOrdering)$/;"	f
searchsortedfirst	base/sort.jl	/^function searchsortedfirst(a::AbstractRange{<:Integer}, x::Unsigned, o::DirectOrdering)$/;"	f
searchsortedfirst	base/sort.jl	/^function searchsortedfirst(a::AbstractRange{<:Real}, x::Real, o::DirectOrdering)$/;"	f
searchsortedfirst	base/sort.jl	/^function searchsortedfirst(v::AbstractVector, x, lo::T, hi::T, o::Ordering) where T<:Integer$/;"	f
searchsortedlast	base/sort.jl	/^function searchsortedlast(a::AbstractRange{<:Integer}, x::Real, o::DirectOrdering)$/;"	f
searchsortedlast	base/sort.jl	/^function searchsortedlast(a::AbstractRange{<:Integer}, x::Unsigned, o::DirectOrdering)$/;"	f
searchsortedlast	base/sort.jl	/^function searchsortedlast(a::AbstractRange{<:Real}, x::Real, o::DirectOrdering)$/;"	f
searchsortedlast	base/sort.jl	/^function searchsortedlast(v::AbstractVector, x, lo::T, hi::T, o::Ordering) where T<:Integer$/;"	f
sec	src/support/timefuncs.h	/^    int64_t sec;    \/* seconds *\/$/;"	m	struct:jl_timeval	typeref:typename:int64_t
second	stdlib/Dates/src/accessors.jl	/^second(dt::DateTime) = mod(fld(value(dt), 1000), 60)$/;"	f
second	stdlib/Dates/src/accessors.jl	/^second(t::Time) = mod(fld(value(t), 1000000000), Int64(60))$/;"	f
secret_table_token	base/abstractdict.jl	/^const secret_table_token = :__c782dbf1cf4d6a2e5e3865d7e95634f2e09b5902__$/;"	v
section	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Section section;	\/* Section header index of section affected,$/;"	m	struct:__anonff7a58692708	typeref:typename:Elf32_Section
sectionAlignment	deps/srccache/patchelf-0.9/src/patchelf.cc	/^    unsigned int sectionAlignment;$/;"	m	class:ElfFile	typeref:typename:unsigned int	file:
sectionNames	deps/srccache/patchelf-0.9/src/patchelf.cc	/^    string sectionNames; \/* content of the .shstrtab section *\/$/;"	m	class:ElfFile	typeref:typename:string	file:
section_slide	src/debuginfo.cpp	/^    int64_t section_slide;$/;"	m	struct:__anonea1faf400208	typeref:typename:int64_t	file:
sectionsByOldIndex	deps/srccache/patchelf-0.9/src/patchelf.cc	/^    vector<SectionName> sectionsByOldIndex;$/;"	m	class:ElfFile	typeref:typename:vector<SectionName>	file:
securezero!	base/util.jl	/^@noinline securezero!(a::AbstractArray{<:Number}) = fill!(a, 0)$/;"	f
securezero!	base/util.jl	/^function securezero! end$/;"	f
seed!	stdlib/Random/src/RNGs.jl	/^function seed!(r::MersenneTwister, seed::Vector{UInt32})$/;"	f
seed!	stdlib/Random/src/RNGs.jl	/^seed!(::_GLOBAL_RNG) = seed!(default_rng(), nothing)$/;"	f
seed!	stdlib/Random/src/RNGs.jl	/^seed!(::_GLOBAL_RNG, ::Nothing) = seed!(default_rng(), nothing)$/;"	f
seed!	stdlib/Random/src/RNGs.jl	/^seed!(::_GLOBAL_RNG, n::Integer) = seed!(default_rng(), n)$/;"	f
seed!	stdlib/Random/src/RNGs.jl	/^seed!(::_GLOBAL_RNG, seed::Vector{UInt32}) = seed!(default_rng(), seed)$/;"	f
seed!	stdlib/Random/src/RNGs.jl	/^seed!(r::MersenneTwister, n::Integer) = seed!(r, make_seed(n))$/;"	f
seed!	stdlib/Random/src/RNGs.jl	/^seed!(r::MersenneTwister=default_rng()) = seed!(r, make_seed())$/;"	f
seed!	stdlib/Random/src/RNGs.jl	/^seed!(rng::RandomDevice) = rng$/;"	f
seed!	stdlib/Random/src/RNGs.jl	/^seed!(seed::Union{Integer,Vector{UInt32}}) = seed!(default_rng(), seed)$/;"	f
seed!	stdlib/Random/src/Random.jl	/^seed!(rng::AbstractRNG, ::Nothing) = seed!(rng)$/;"	f
seed_cong	src/julia_internal.h	/^STATIC_INLINE void seed_cong(uint64_t *seed)$/;"	f	typeref:typename:STATIC_INLINE void
seek	base/filesystem.jl	/^function seek(f::File, n::Integer)$/;"	f
seek	base/iobuffer.jl	/^function seek(io::GenericIOBuffer, n::Integer)$/;"	f
seek	base/iostream.jl	/^function seek(s::IOStream, n::Integer)$/;"	f
seek	base/secretbuffer.jl	/^seek(io::SecretBuffer, n::Integer) = (io.ptr = max(min(n+1, io.size+1), 1); io)$/;"	f
seekend	base/filesystem.jl	/^function seekend(f::File)$/;"	f
seekend	base/iobuffer.jl	/^function seekend(io::GenericIOBuffer)$/;"	f
seekend	base/iostream.jl	/^function seekend(s::IOStream)$/;"	f
seekend	base/secretbuffer.jl	/^seekend(io::SecretBuffer) = seek(io, io.size+1)$/;"	f
seekstart	base/iostream.jl	/^seekstart(s::IO) = seek(s,0)$/;"	f
segfault6793	test/core.jl	/^function segfault6793(;gamma=1)$/;"	f
segfaultfunction_20847	test/compiler/inference.jl	/^function segfaultfunction_20847(A::Vector{NTuple{N, T}}) where {N, T}$/;"	f
segv_handler	src/signals-unix.c	/^static void segv_handler(int sig, siginfo_t *info, void *context)$/;"	f	typeref:typename:void	file:
segv_port	src/signals-mach.c	/^static mach_port_t segv_port = 0;$/;"	v	typeref:typename:mach_port_t	file:
select_by_size	src/runtime_intrinsics.c	/^static inline unsigned select_by_size(unsigned sz) JL_NOTSAFEPOINT$/;"	f	typeref:typename:unsigned	file:
select_pool	src/gc-stacks.c	/^static unsigned select_pool(size_t nb) JL_NOTSAFEPOINT$/;"	f	typeref:typename:unsigned	file:
select_std_dll	Makefile	/^define select_std_dll$/;"	m
selectdim	base/abstractarraymath.jl	/^@inline selectdim(A::AbstractArray, d::Integer, i) = _selectdim(A, d, i, setindex(map(Slice, axe/;"	f
selectpivot!	base/sort.jl	/^@inline function selectpivot!(v::AbstractVector, lo::Int, hi::Int, o::Ordering)$/;"	f
self-argname	src/macroexpand.scm	/^(define (self-argname name)$/;"	f
selfevaluating	src/flisp/flisp.h	/^#define selfevaluating(/;"	d
send	stdlib/Sockets/src/Sockets.jl	/^function send(sock::UDPSocket, ipaddr::IPAddr, port::Integer, msg)$/;"	f
send_add_client	stdlib/Distributed/src/remotecall.jl	/^function send_add_client(rr::AbstractRemoteRef, i)$/;"	f
send_connection_hdr	stdlib/Distributed/src/messages.jl	/^function send_connection_hdr(w::Worker, cookie=true)$/;"	f
send_del_client	stdlib/Distributed/src/remotecall.jl	/^function send_del_client(rr)$/;"	f
send_msg	stdlib/Distributed/src/messages.jl	/^function send_msg(s::IO, header, msg)$/;"	f
send_msg	stdlib/Distributed/src/messages.jl	/^function send_msg(w::Worker, header, msg)$/;"	f
send_msg_	stdlib/Distributed/src/messages.jl	/^function send_msg_(w::Worker, header, msg, now::Bool)$/;"	f
send_msg_now	stdlib/Distributed/src/messages.jl	/^function send_msg_now(s::IO, header, msg::AbstractMsg)$/;"	f
send_msg_now	stdlib/Distributed/src/messages.jl	/^function send_msg_now(w::Worker, header, msg)$/;"	f
send_msg_unknown	stdlib/Distributed/src/messages.jl	/^function send_msg_unknown(s::IO, header, msg)$/;"	f
sendfile	base/file.jl	/^function sendfile(src::AbstractString, dst::AbstractString)$/;"	f
sendfile	base/filesystem.jl	/^function sendfile(dst::File, src::File, src_offset::Int64, bytes::Int)$/;"	f
sendrepl2	stdlib/REPL/test/repl.jl	/^    sendrepl2(cmd) = write(stdin_write, "$cmd\\n notify($(curmod_prefix)c)\\n")$/;"	f
sendrepl3	stdlib/REPL/test/repl.jl	/^            sendrepl3(cmd) = write(stdin_write,"$cmd\\n")$/;"	f
separate_kwargs	stdlib/InteractiveUtils/src/macros.jl	/^separate_kwargs(args...; kwargs...) = (args, kwargs.data)$/;"	f
seq	src/processor.cpp	/^template<uint32_t... Is> struct seq{};$/;"	s	namespace:__anon839834ed0111	file:
ser_tag	src/dump.c	/^static htable_t ser_tag;$/;"	v	typeref:typename:htable_t	file:
ser_version	stdlib/Serialization/src/Serialization.jl	/^const ser_version = 8 # do not make changes without bumping the version #!$/;"	v
serialize	stdlib/Distributed/src/clusterserialize.jl	/^function serialize(s::ClusterSerializer, ex::CapturedException)$/;"	f
serialize	stdlib/Distributed/src/clusterserialize.jl	/^function serialize(s::ClusterSerializer, g::GlobalRef)$/;"	f
serialize	stdlib/Distributed/src/clusterserialize.jl	/^function serialize(s::ClusterSerializer, t::Core.TypeName)$/;"	f
serialize	stdlib/Distributed/src/remotecall.jl	/^function serialize(s::AbstractSerializer, ::Future)$/;"	f
serialize	stdlib/Distributed/src/remotecall.jl	/^function serialize(s::AbstractSerializer, ::RemoteChannel)$/;"	f
serialize	stdlib/Distributed/src/remotecall.jl	/^function serialize(s::ClusterSerializer, rr::AbstractRemoteRef, addclient)$/;"	f
serialize	stdlib/Distributed/src/remotecall.jl	/^serialize(s::ClusterSerializer, f::Future) = serialize(s, f, f.v === nothing)$/;"	f
serialize	stdlib/Distributed/src/remotecall.jl	/^serialize(s::ClusterSerializer, rr::RemoteChannel) = serialize(s, rr, true)$/;"	f
serialize	stdlib/Distributed/src/workerpool.jl	/^function serialize(S::AbstractSerializer, pool::WorkerPool)$/;"	f
serialize	stdlib/Distributed/src/workerpool.jl	/^serialize(s::AbstractSerializer, cp::CachingPool) = throw(ErrorException("CachingPool objects ar/;"	f
serialize	stdlib/Random/src/RNGs.jl	/^    function serialize(s::AbstractSerializer, rd::RandomDevice)$/;"	f
serialize	stdlib/Serialization/src/Serialization.jl	/^    @eval serialize(s::AbstractSerializer, n::$ty) = (writetag(s.io, $tag); write(s.io, n); noth/;"	f
serialize	stdlib/Serialization/src/Serialization.jl	/^function serialize(s::AbstractSerializer, a::Array)$/;"	f
serialize	stdlib/Serialization/src/Serialization.jl	/^function serialize(s::AbstractSerializer, a::SubArray{T,N,A}) where {T,N,A<:Array}$/;"	f
serialize	stdlib/Serialization/src/Serialization.jl	/^function serialize(s::AbstractSerializer, d::Dict)$/;"	f
serialize	stdlib/Serialization/src/Serialization.jl	/^function serialize(s::AbstractSerializer, ex::Expr)$/;"	f
serialize	stdlib/Serialization/src/Serialization.jl	/^function serialize(s::AbstractSerializer, frame::Base.StackTraces.StackFrame)$/;"	f
serialize	stdlib/Serialization/src/Serialization.jl	/^function serialize(s::AbstractSerializer, g::GlobalRef)$/;"	f
serialize	stdlib/Serialization/src/Serialization.jl	/^function serialize(s::AbstractSerializer, linfo::Core.MethodInstance)$/;"	f
serialize	stdlib/Serialization/src/Serialization.jl	/^function serialize(s::AbstractSerializer, m::Module)$/;"	f
serialize	stdlib/Serialization/src/Serialization.jl	/^function serialize(s::AbstractSerializer, meth::Method)$/;"	f
serialize	stdlib/Serialization/src/Serialization.jl	/^function serialize(s::AbstractSerializer, n::BigInt)$/;"	f
serialize	stdlib/Serialization/src/Serialization.jl	/^function serialize(s::AbstractSerializer, n::Int32)$/;"	f
serialize	stdlib/Serialization/src/Serialization.jl	/^function serialize(s::AbstractSerializer, n::Int64)$/;"	f
serialize	stdlib/Serialization/src/Serialization.jl	/^function serialize(s::AbstractSerializer, r::Regex)$/;"	f
serialize	stdlib/Serialization/src/Serialization.jl	/^function serialize(s::AbstractSerializer, ss::String)$/;"	f
serialize	stdlib/Serialization/src/Serialization.jl	/^function serialize(s::AbstractSerializer, ss::SubString{String})$/;"	f
serialize	stdlib/Serialization/src/Serialization.jl	/^function serialize(s::AbstractSerializer, t::Core.TypeName)$/;"	f
serialize	stdlib/Serialization/src/Serialization.jl	/^function serialize(s::AbstractSerializer, t::DataType)$/;"	f
serialize	stdlib/Serialization/src/Serialization.jl	/^function serialize(s::AbstractSerializer, t::Task)$/;"	f
serialize	stdlib/Serialization/src/Serialization.jl	/^function serialize(s::AbstractSerializer, t::Tuple)$/;"	f
serialize	stdlib/Serialization/src/Serialization.jl	/^function serialize(s::AbstractSerializer, u::UnionAll)$/;"	f
serialize	stdlib/Serialization/src/Serialization.jl	/^function serialize(s::AbstractSerializer, v::SimpleVector)$/;"	f
serialize	stdlib/Serialization/src/Serialization.jl	/^function serialize(s::AbstractSerializer, x::Symbol)$/;"	f
serialize	stdlib/Serialization/src/Serialization.jl	/^function serialize(s::IO, x)$/;"	f
serialize	stdlib/Serialization/src/Serialization.jl	/^serialize(filename::AbstractString, x) = open(io->serialize(io, x), filename, "w")$/;"	f
serialize	stdlib/Serialization/src/Serialization.jl	/^serialize(s::AbstractSerializer, ::Tuple{}) = writetag(s.io, EMPTYTUPLE_TAG)$/;"	f
serialize	stdlib/Serialization/src/Serialization.jl	/^serialize(s::AbstractSerializer, ::Type{Bottom}) = write_as_tag(s.io, BOTTOM_TAG)$/;"	f
serialize	stdlib/Serialization/src/Serialization.jl	/^serialize(s::AbstractSerializer, @nospecialize(x)) = serialize_any(s, x)$/;"	f
serialize	stdlib/Serialization/src/Serialization.jl	/^serialize(s::AbstractSerializer, p::Ptr) = serialize_any(s, oftype(p, C_NULL))$/;"	f
serialize	stdlib/Serialization/src/Serialization.jl	/^serialize(s::AbstractSerializer, x::Bool) = x ? writetag(s.io, TRUE_TAG) :$/;"	f
serialize	stdlib/SharedArrays/src/SharedArrays.jl	/^function serialize(s::AbstractSerializer, S::SharedArray)$/;"	f
serialize_any	stdlib/Serialization/src/Serialization.jl	/^function serialize_any(s::AbstractSerializer, @nospecialize(x))$/;"	f
serialize_array_data	stdlib/Serialization/src/Serialization.jl	/^function serialize_array_data(s::IO, a)$/;"	f
serialize_cycle	stdlib/Serialization/src/Serialization.jl	/^function serialize_cycle(s::AbstractSerializer, @nospecialize(x))$/;"	f
serialize_cycle_header	stdlib/Serialization/src/Serialization.jl	/^function serialize_cycle_header(s::AbstractSerializer, @nospecialize(x))$/;"	f
serialize_global_from_main	stdlib/Distributed/src/clusterserialize.jl	/^function serialize_global_from_main(s::ClusterSerializer, sym)$/;"	f
serialize_hdr_raw	stdlib/Distributed/src/messages.jl	/^function serialize_hdr_raw(io, hdr)$/;"	f
serialize_mod_names	stdlib/Serialization/src/Serialization.jl	/^function serialize_mod_names(s::AbstractSerializer, m::Module)$/;"	f
serialize_msg	stdlib/Distributed/src/messages.jl	/^    @eval function serialize_msg(s::AbstractSerializer, o::$tname)$/;"	f
serialize_target_data	src/processor.cpp	/^static inline std::vector<uint8_t> serialize_target_data(llvm::StringRef name,$/;"	f	namespace:__anon839834ed0111	typeref:typename:std::vector<uint8_t>	file:
serialize_test_function	stdlib/Serialization/test/runtests.jl	/^    serialize_test_function() = 1$/;"	f
serialize_test_function	stdlib/Serialization/test/runtests.jl	/^serialize_test_function = DefinitelyNotMain.serialize_test_function$/;"	v
serialize_test_function2	stdlib/Serialization/test/runtests.jl	/^serialize_test_function2 = DefinitelyNotMain.serialize_test_function2$/;"	v
serialize_type	stdlib/Serialization/src/Serialization.jl	/^function serialize_type(s::AbstractSerializer, @nospecialize(t::DataType), ref::Bool = false)$/;"	f
serialize_type_data	stdlib/Serialization/src/Serialization.jl	/^function serialize_type_data(s, @nospecialize(t::DataType))$/;"	f
serialize_typename	stdlib/Serialization/src/Serialization.jl	/^function serialize_typename(s::AbstractSerializer, t::Core.TypeName)$/;"	f
sertag	stdlib/Serialization/src/Serialization.jl	/^function sertag(@nospecialize(v))$/;"	f
set	src/flisp/flisp.h	/^#define set(/;"	d
set!	stdlib/LibGit2/src/config.jl	/^function set!(c::GitConfig, name::AbstractString, value::AbstractString)$/;"	f
set!	stdlib/LibGit2/src/config.jl	/^function set!(c::GitConfig, name::AbstractString, value::Bool)$/;"	f
set!	stdlib/LibGit2/src/config.jl	/^function set!(c::GitConfig, name::AbstractString, value::Int32)$/;"	f
set!	stdlib/LibGit2/src/config.jl	/^function set!(c::GitConfig, name::AbstractString, value::Int64)$/;"	f
set-bit	src/ast.scm	/^(define (set-bit x b val) (if val (logior x b) (logand x (lognot b))))$/;"	f
set-interpreter-long.sh.log	deps/srccache/patchelf-0.9/tests/Makefile.in	/^set-interpreter-long.sh.log: set-interpreter-long.sh$/;"	t
set-interpreter-short.sh.log	deps/srccache/patchelf-0.9/tests/Makefile.in	/^set-interpreter-short.sh.log: set-interpreter-short.sh$/;"	t
set-rpath-library.sh.log	deps/srccache/patchelf-0.9/tests/Makefile.in	/^set-rpath-library.sh.log: set-rpath-library.sh$/;"	t
set-rpath.sh.log	deps/srccache/patchelf-0.9/tests/Makefile.in	/^set-rpath.sh.log: set-rpath.sh$/;"	t
setIP	src/disasm.cpp	/^void SymbolTable::setIP(uint64_t addr)$/;"	f	class:__anon2853c92e0211::SymbolTable	typeref:typename:void
setInterpreter	deps/srccache/patchelf-0.9/src/patchelf.cc	/^void ElfFile<ElfFileParamNames>::setInterpreter(const string & newInterpreter)$/;"	f	class:ElfFile	typeref:typename:void
setPass	src/disasm.cpp	/^    void setPass(int Pass) { this->Pass = Pass; }$/;"	f	class:__anon2853c92e0211::SymbolTable	typeref:typename:void	file:
setRPath	deps/srccache/patchelf-0.9/src/patchelf.cc	/^static bool setRPath = false;$/;"	v	typeref:typename:bool	file:
setSoname	deps/srccache/patchelf-0.9/src/patchelf.cc	/^static bool setSoname = false;$/;"	v	typeref:typename:bool	file:
setSubstr	deps/srccache/patchelf-0.9/src/patchelf.cc	/^static void setSubstr(string & s, unsigned int pos, const string & t)$/;"	f	typeref:typename:void	file:
set_action!	stdlib/REPL/src/LineEdit.jl	/^function set_action!(s::MIState, command::Symbol)$/;"	f
set_action!	stdlib/REPL/src/LineEdit.jl	/^set_action!(s, command::Symbol) = nothing$/;"	f
set_aux_root	test/gcext/LocalTest.jl	/^function set_aux_root(n :: Int, x :: String)$/;"	f
set_aux_root	test/gcext/gcext.c	/^void set_aux_root(size_t n, jl_value_t *val)$/;"	f	typeref:typename:void
set_base_from	deps/srccache/patchelf-0.9/build-aux/depcomp	/^set_base_from ()$/;"	f
set_bit	src/processor.cpp	/^static inline void set_bit(T &bits, T1 _bitidx, bool val)$/;"	f	namespace:__anon839834ed0111	typeref:typename:void	file:
set_bound	src/subtype.c	/^static void set_bound(jl_value_t **bound, jl_value_t *val, jl_tvar_t *v, jl_stenv_t *e)$/;"	f	typeref:typename:void	file:
set_c_int	src/ccalltest.c	/^JL_DLLEXPORT void set_c_int(int i)$/;"	f	typeref:typename:JL_DLLEXPORT void
set_dir_from	deps/srccache/patchelf-0.9/build-aux/depcomp	/^set_dir_from ()$/;"	f
set_emax!	base/mpfr.jl	/^set_emax!(x) = check_exponent_err(ccall((:mpfr_set_emax, :libmpfr), Cint, (Clong,), x))$/;"	f
set_emin!	base/mpfr.jl	/^set_emin!(x) = check_exponent_err(ccall((:mpfr_set_emin, :libmpfr), Cint, (Clong,), x))$/;"	f
set_fpcr_aarch64	src/processor_arm.cpp	/^static inline void set_fpcr_aarch64(uint32_t fpcr)$/;"	f	typeref:typename:void	file:
set_global_dir	stdlib/LibGit2/test/libgit2.jl	/^function set_global_dir(dir)$/;"	f
set_io_wait_begin	src/support/ios.c	/^static void set_io_wait_begin(int v)$/;"	f	typeref:typename:void	file:
set_next_ctx	src/jsvm-emscripten/asyncify_setup.js	/^function set_next_ctx(ctx, needs_start) {$/;"	f
set_num_threads	stdlib/LinearAlgebra/src/blas.jl	/^function set_num_threads(n::Integer)$/;"	f
set_print_level	stdlib/SuiteSparse/src/cholmod.jl	/^function set_print_level(cm::Vector{UInt8}, lev::Integer)$/;"	f
set_print_width	src/flisp/print.c	/^static void set_print_width(fl_context_t *fl_ctx)$/;"	f	typeref:typename:void	file:
set_process_title	base/sysinfo.jl	/^function set_process_title(title::AbstractString)$/;"	f
set_ptls_attrs	src/llvm-ptls.cpp	/^void LowerPTLS::set_ptls_attrs(CallInst *ptlsStates) const$/;"	f	class:__anonf46923380111::LowerPTLS	typeref:typename:void
set_remote_fetch_url	stdlib/LibGit2/src/remote.jl	/^function set_remote_fetch_url end$/;"	f
set_remote_fetch_url	stdlib/LibGit2/src/remote.jl	/^function set_remote_fetch_url(path::AbstractString, remote_name::AbstractString, url::AbstractSt/;"	f
set_remote_fetch_url	stdlib/LibGit2/src/remote.jl	/^function set_remote_fetch_url(repo::GitRepo, remote_name::AbstractString, url::AbstractString)$/;"	f
set_remote_push_url	stdlib/LibGit2/src/remote.jl	/^function set_remote_push_url end$/;"	f
set_remote_push_url	stdlib/LibGit2/src/remote.jl	/^function set_remote_push_url(path::AbstractString, remote_name::AbstractString, url::AbstractStr/;"	f
set_remote_push_url	stdlib/LibGit2/src/remote.jl	/^function set_remote_push_url(repo::GitRepo, remote_name::AbstractString, url::AbstractString)$/;"	f
set_remote_url	stdlib/LibGit2/src/remote.jl	/^function set_remote_url end$/;"	f
set_remote_url	stdlib/LibGit2/src/remote.jl	/^function set_remote_url(path::AbstractString, remote_name::AbstractString, url::AbstractString)$/;"	f
set_remote_url	stdlib/LibGit2/src/remote.jl	/^function set_remote_url(repo::GitRepo, remote_name::AbstractString, url::AbstractString)$/;"	f
set_ssl_cert_locations	stdlib/LibGit2/src/LibGit2.jl	/^function set_ssl_cert_locations(cert_loc)$/;"	f
set_str!	base/gmp.jl	/^set_str!(x::BigInt, a, b) = Int(ccall((:__gmpz_set_str, :libgmp), Cint, (mpz_t, Ptr{UInt8}, Cint/;"	f
set_valid_processes	stdlib/Distributed/src/cluster.jl	/^function set_valid_processes(plist::Array{Int})$/;"	f
set_var_to_const	src/subtype.c	/^static jl_value_t *set_var_to_const(jl_varbinding_t *bb, jl_value_t *v JL_MAYBE_UNROOTED, jl_var/;"	f	typeref:typename:jl_value_t *	file:
set_verbose	src/ccalltest.c	/^JL_DLLEXPORT void set_verbose(int level) {$/;"	f	typeref:typename:JL_DLLEXPORT void
set_worker_state	stdlib/Distributed/src/cluster.jl	/^function set_worker_state(w, state)$/;"	f
set_zero_subnormals	base/rounding.jl	/^set_zero_subnormals(yes::Bool) = ccall(:jl_set_zero_subnormals,Int32,(Int8,),yes)==0$/;"	f
setabc18015!	test/compiler/inference.jl	/^setabc18015!(tri, a, b, c) = (tri.a = a; tri.b = b; tri.c = c)$/;"	f
setbar22256_inner	test/core.jl	/^setbar22256_inner(a) = (a.bar.inner = 3; nothing)$/;"	f
setbit!	base/gmp.jl	/^setbit!(x, a) = (ccall((:__gmpz_setbit, :libgmp), Cvoid, (mpz_t, bitcnt_t), x, a); x)$/;"	f
setc	src/flisp/flisp.h	/^#define setc(/;"	d
setcoeff!	stdlib/Random/src/DSFMT.jl	/^setcoeff!(f::GF2X, i) = (MPZ.setbit!(f.z, i); f)$/;"	f
setcolptr!	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline setcolptr!(A::AbstractSparseMatrixCSC, j, val) = getcolptr(A)[j] = val$/;"	f
setcolptr!	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline setcolptr!(A::SparseVector, j, val) = val$/;"	f
setcontext	src/task.c	/^#define setcontext /;"	d	file:
setdiff	base/abstractset.jl	/^setdiff(s) = union(s)$/;"	f
setdiff	base/abstractset.jl	/^setdiff(s::AbstractSet, itrs...) = setdiff!(copymutable(s), itrs...)$/;"	f
setdiff	base/array.jl	/^setdiff(  itr, itrs...) = _shrink(setdiff!, itr, itrs)$/;"	f
setdiff!	base/abstractset.jl	/^function setdiff!(s::AbstractSet, itr)$/;"	f
setdiff!	base/abstractset.jl	/^function setdiff!(s::AbstractSet, itrs...)$/;"	f
setdiff!	base/array.jl	/^setdiff!(  v::AbstractVector, itrs...) = _shrink!(setdiff!, v, itrs)$/;"	f
setdiff!	base/bitset.jl	/^setdiff!(s1::BitSet, s2::BitSet) = _matched_map!((p, q) -> p & ~q, s1, s2)$/;"	f
setdiff!	base/set.jl	/^function setdiff!(s::Set, t::Set)$/;"	f
setenv	base/cmd.jl	/^setenv(cmd::Cmd, env::Pair{<:AbstractString}...; dir="") =$/;"	f
setenv	base/cmd.jl	/^setenv(cmd::Cmd, env; dir="") = Cmd(cmd; env=byteenv(env), dir=dir)$/;"	f
setenv	base/cmd.jl	/^setenv(cmd::Cmd; dir="") = Cmd(cmd; dir=dir)$/;"	f
setextheader	stdlib/Markdown/src/Common/block.jl	/^function setextheader(stream::IO, md::MD)$/;"	f
setid!	stdlib/SharedArrays/test/runtests.jl	/^@everywhere setid!(A) = (for i in localindices(A); A[i] = myid(); end; A)$/;"	f
setindex	base/tuple.jl	/^setindex(x::Tuple, v, i::Integer) = (@_inline_meta; _setindex(v, i, x...))$/;"	f
setindex!	base/abstractarray.jl	/^function setindex!(A::AbstractArray, v, I...)$/;"	f
setindex!	base/abstractdict.jl	/^function setindex!(d::IdDict{K,V}, @nospecialize(val), @nospecialize(key)) where {K, V}$/;"	f
setindex!	base/abstractdict.jl	/^setindex!(t::AbstractDict, v, k1, k2, ks...) = setindex!(t, v, tuple(k1,k2,ks...))$/;"	f
setindex!	base/array.jl	/^@eval setindex!(A::Array{T}, x, i1::Int) where {T} = arrayset($(Expr(:boundscheck)), A, convert(/;"	f
setindex!	base/array.jl	/^@eval setindex!(A::Array{T}, x, i1::Int, i2::Int, I::Int...) where {T} =$/;"	f
setindex!	base/array.jl	/^function setindex! end$/;"	f
setindex!	base/array.jl	/^function setindex!(A::Array, X::AbstractArray, I::AbstractVector{Int})$/;"	f
setindex!	base/array.jl	/^function setindex!(A::Array{T}, X::Array{T}, I::UnitRange{Int}) where T$/;"	f
setindex!	base/array.jl	/^function setindex!(A::Array{T}, X::Array{T}, c::Colon) where T$/;"	f
setindex!	base/atomics.jl	/^    @eval setindex!(x::Atomic{$typ}, v::$typ) =$/;"	f
setindex!	base/atomics.jl	/^setindex!(x::Atomic{T}, v) where {T} = setindex!(x, convert(T, v))$/;"	f
setindex!	base/bitarray.jl	/^@inline function setindex!(B::BitArray, X::AbstractArray, I::BitArray)$/;"	f
setindex!	base/bitarray.jl	/^@inline function setindex!(B::BitArray, x, i::Int)$/;"	f
setindex!	base/bitarray.jl	/^@propagate_inbounds function setindex!(B::BitArray, X::AbstractArray, J0::Union{Colon,UnitRange{/;"	f
setindex!	base/compiler/ssair/ir.jl	/^function setindex!(compact::IncrementalCompact, @nospecialize(v), idx::Int)$/;"	f
setindex!	base/compiler/ssair/ir.jl	/^function setindex!(compact::IncrementalCompact, @nospecialize(v), idx::SSAValue)$/;"	f
setindex!	base/compiler/ssair/ir.jl	/^function setindex!(x::IRCode, @nospecialize(repl), s::SSAValue)$/;"	f
setindex!	base/compiler/ssair/ir.jl	/^function setindex!(x::UseRef, @nospecialize(v))$/;"	f
setindex!	base/dict.jl	/^function setindex!(h::Dict{K,V}, v0, key0) where V where K$/;"	f
setindex!	base/dict.jl	/^function setindex!(h::Dict{K,V}, v0, key::K) where V where K$/;"	f
setindex!	base/env.jl	/^setindex!(::EnvDict, v, k::AbstractString) = _setenv(k,string(v))$/;"	f
setindex!	base/essentials.jl	/^@eval setindex!(A::Array{Any}, @nospecialize(x), i::Int) = arrayset($(Expr(:boundscheck)), A, x,/;"	f
setindex!	base/iterators.jl	/^setindex!(v::Pairs, value, key) = (v.data[key] = value; v)$/;"	f
setindex!	base/multidimensional.jl	/^@inline function setindex!(B::BitArray, X::Union{StridedArray,BitArray}, J0::Union{Colon,UnitRan/;"	f
setindex!	base/multidimensional.jl	/^@inline function setindex!(B::BitArray, X::Union{StridedArray,BitArray},$/;"	f
setindex!	base/multidimensional.jl	/^@propagate_inbounds function setindex!(B::BitArray, X::AbstractArray,$/;"	f
setindex!	base/multidimensional.jl	/^@propagate_inbounds setindex!(A::Array, v, i1::Union{Integer, CartesianIndex}, I::Union{Integer,/;"	f
setindex!	base/multidimensional.jl	/^setindex!(b::Ref, x, ::CartesianIndex{0}) = setindex!(b, x)$/;"	f
setindex!	base/refpointer.jl	/^setindex!(b::RefArray, x) = (b.x[b.i] = x; b)$/;"	f
setindex!	base/refvalue.jl	/^setindex!(b::RefValue, x) = (b.x = x; b)$/;"	f
setindex!	base/reinterpretarray.jl	/^@inline @propagate_inbounds function setindex!(a::ReinterpretArray{T,N,S}, v, i::Int) where {T,N/;"	f
setindex!	base/reinterpretarray.jl	/^@inline @propagate_inbounds function setindex!(a::ReinterpretArray{T,N,S}, v, inds::Vararg{Int, /;"	f
setindex!	base/reinterpretarray.jl	/^@inline @propagate_inbounds setindex!(a::ReinterpretArray, v) = (a[1] = v)$/;"	f
setindex!	base/reinterpretarray.jl	/^@inline @propagate_inbounds setindex!(a::ReinterpretArray{T,0,S} where T, v) where {S} = (a.pare/;"	f
setindex!	base/reshapedarray.jl	/^@inline function setindex!(A::ReshapedArray, val, index::ReshapedIndex)$/;"	f
setindex!	base/reshapedarray.jl	/^@inline function setindex!(A::ReshapedArrayLF, val, index::Int)$/;"	f
setindex!	base/reshapedarray.jl	/^@inline function setindex!(A::ReshapedArray{T,N}, val, indices::Vararg{Int,N}) where {T,N}$/;"	f
setindex!	base/reshapedarray.jl	/^setindex!(A::ReshapedRange, val, index::Int) = _rs_setindex!_err()$/;"	f
setindex!	base/reshapedarray.jl	/^setindex!(A::ReshapedRange, val, index::ReshapedIndex) = _rs_setindex!_err()$/;"	f
setindex!	base/reshapedarray.jl	/^setindex!(A::ReshapedRange{T,N}, val, indices::Vararg{Int,N}) where {T,N} = _rs_setindex!_err()$/;"	f
setindex!	base/subarray.jl	/^function setindex!(V::FastContiguousSubArray, x, i::Int)$/;"	f
setindex!	base/subarray.jl	/^function setindex!(V::FastContiguousSubArray{<:Any, 1}, x, i::Int)$/;"	f
setindex!	base/subarray.jl	/^function setindex!(V::FastSubArray, x, i::Int)$/;"	f
setindex!	base/subarray.jl	/^function setindex!(V::FastSubArray{<:Any, 1}, x, i::Int)$/;"	f
setindex!	base/subarray.jl	/^function setindex!(V::SubArray{T,N}, x, I::Vararg{Int,N}) where {T,N}$/;"	f
setindex!	base/weakkeydict.jl	/^function setindex!(wkh::WeakKeyDict{K}, v, key) where K$/;"	f
setindex!	stdlib/LinearAlgebra/src/adjtrans.jl	/^@propagate_inbounds setindex!(A::AdjOrTransAbsMat, x, i::Int, j::Int) = (setindex!(A.parent, wra/;"	f
setindex!	stdlib/LinearAlgebra/src/adjtrans.jl	/^@propagate_inbounds setindex!(v::AdjOrTransAbsVec, x, i::Int) = (setindex!(v.parent, wrapperop(v/;"	f
setindex!	stdlib/LinearAlgebra/src/bidiag.jl	/^function setindex!(A::Bidiagonal, x, i::Integer, j::Integer)$/;"	f
setindex!	stdlib/LinearAlgebra/src/diagonal.jl	/^function setindex!(D::Diagonal, v, i::Int, j::Int)$/;"	f
setindex!	stdlib/LinearAlgebra/src/hessenberg.jl	/^function setindex!(A::UpperHessenberg, x, i::Integer, j::Integer)$/;"	f
setindex!	stdlib/LinearAlgebra/src/symmetric.jl	/^function setindex!(A::Hermitian, v, i::Integer, j::Integer)$/;"	f
setindex!	stdlib/LinearAlgebra/src/symmetric.jl	/^function setindex!(A::Symmetric, v, i::Integer, j::Integer)$/;"	f
setindex!	stdlib/LinearAlgebra/src/triangular.jl	/^function setindex!(A::LowerTriangular, x, i::Integer, j::Integer)$/;"	f
setindex!	stdlib/LinearAlgebra/src/triangular.jl	/^function setindex!(A::UnitLowerTriangular, x, i::Integer, j::Integer)$/;"	f
setindex!	stdlib/LinearAlgebra/src/triangular.jl	/^function setindex!(A::UnitUpperTriangular, x, i::Integer, j::Integer)$/;"	f
setindex!	stdlib/LinearAlgebra/src/triangular.jl	/^function setindex!(A::UpperTriangular, x, i::Integer, j::Integer)$/;"	f
setindex!	stdlib/LinearAlgebra/src/tridiag.jl	/^function setindex!(A::SymTridiagonal, x, i::Integer, j::Integer)$/;"	f
setindex!	stdlib/LinearAlgebra/src/tridiag.jl	/^function setindex!(A::Tridiagonal, x, i::Integer, j::Integer)$/;"	f
setindex!	stdlib/SharedArrays/src/SharedArrays.jl	/^setindex!(S::SharedArray, x, i::Real) = setindex!(S.s, x, i)$/;"	f
setindex!	stdlib/SparseArrays/src/sparsematrix.jl	/^function setindex!(A::AbstractSparseMatrixCSC, x::AbstractArray, I::AbstractMatrix{Bool})$/;"	f
setindex!	stdlib/SparseArrays/src/sparsematrix.jl	/^function setindex!(A::AbstractSparseMatrixCSC, x::AbstractArray, Ix::AbstractVector{<:Integer})$/;"	f
setindex!	stdlib/SparseArrays/src/sparsematrix.jl	/^function setindex!(A::AbstractSparseMatrixCSC{Tv,Ti}, V::AbstractVecOrMat, Ix::Union{Integer, Ab/;"	f
setindex!	stdlib/SparseArrays/src/sparsematrix.jl	/^setindex!(A::AbstractSparseMatrixCSC, _v, _i::Integer, _j::Integer) = _setindex_scalar!(A, _v, _/;"	f
setindex!	stdlib/SparseArrays/src/sparsematrix.jl	/^setindex!(A::AbstractSparseMatrixCSC{Tv}, B::AbstractVecOrMat, I::Integer, J::Integer) where {Tv/;"	f
setindex!	stdlib/SparseArrays/src/sparsematrix.jl	/^setindex!(A::Matrix, x::AbstractSparseMatrixCSC, I::AbstractVector{<:Integer}, J::AbstractVector/;"	f
setindex!	stdlib/SparseArrays/src/sparsematrix.jl	/^setindex!(A::Matrix, x::AbstractSparseMatrixCSC, I::AbstractVector{Bool}, J::AbstractVector{<:In/;"	f
setindex!	stdlib/SparseArrays/src/sparsematrix.jl	/^setindex!(A::Matrix, x::AbstractSparseMatrixCSC, I::AbstractVector{Bool}, J::AbstractVector{Bool/;"	f
setindex!	stdlib/SparseArrays/src/sparsematrix.jl	/^setindex!(A::Matrix, x::AbstractSparseMatrixCSC, I::AbstractVector{Bool}, J::Integer) = setindex/;"	f
setindex!	stdlib/SparseArrays/src/sparsematrix.jl	/^setindex!(A::Matrix, x::AbstractSparseMatrixCSC, I::Integer, J::AbstractVector{Bool}) = setindex/;"	f
setindex!	stdlib/SparseArrays/src/sparsevector.jl	/^function setindex!(x::SparseVector{Tv,Ti}, v::Tv, i::Ti) where {Tv,Ti<:Integer}$/;"	f
setindex!	stdlib/SparseArrays/src/sparsevector.jl	/^setindex!(x::SparseVector{Tv,Ti}, v, i::Integer) where {Tv,Ti<:Integer} =$/;"	f
setindex_shape_check	base/indices.jl	/^function setindex_shape_check(X::AbstractArray, I::Integer...)$/;"	f
setindex_shape_check	base/indices.jl	/^function setindex_shape_check(X::AbstractArray{<:Any,2}, i::Integer, j::Integer)$/;"	f
setindex_shape_check	base/indices.jl	/^setindex_shape_check(::Any...) =$/;"	f
setindex_shape_check	base/indices.jl	/^setindex_shape_check(X::AbstractArray) =$/;"	f
setindex_shape_check	base/indices.jl	/^setindex_shape_check(X::AbstractArray, i::Integer) =$/;"	f
setindex_shape_check	base/indices.jl	/^setindex_shape_check(X::AbstractArray{<:Any,1}, i::Integer) =$/;"	f
setindex_shape_check	base/indices.jl	/^setindex_shape_check(X::AbstractArray{<:Any,1}, i::Integer, j::Integer) =$/;"	f
setindex_widen_up_to	base/array.jl	/^function setindex_widen_up_to(dest::AbstractArray{T}, el, i) where T$/;"	f
setjmp_func	src/codegen.cpp	/^static Function *setjmp_func;$/;"	v	typeref:typename:Function *	file:
setjmp_func	src/llvm-lower-handlers.cpp	/^    Function *setjmp_func;$/;"	m	struct:LowerExcHandlers	typeref:typename:Function *	file:
setmark	stdlib/REPL/src/LineEdit.jl	/^function setmark(s::MIState, guess_region_active::Bool=true)$/;"	f
setopt	stdlib/Sockets/src/Sockets.jl	/^function setopt(sock::UDPSocket; multicast_loop=nothing, multicast_ttl=nothing, enable_broadcast/;"	f
setprecision	base/mpfr.jl	/^function setprecision(::Type{BigFloat}, precision::Integer)$/;"	f
setprecision	base/mpfr.jl	/^function setprecision(f::Function, ::Type{T}, prec::Integer) where T$/;"	f
setprecision	base/mpfr.jl	/^setprecision(f::Function, prec::Integer) = setprecision(f, BigFloat, prec)$/;"	f
setprecision	base/mpfr.jl	/^setprecision(precision::Integer) = setprecision(BigFloat, precision)$/;"	f
setproperty!	base/Base.jl	/^setproperty!(x, f::Symbol, v) = setfield!(x, f, convert(fieldtype(typeof(x), f), v))$/;"	f
setproperty!	base/Base.jl	/^setproperty!(x::Module, f::Symbol, v) = setfield!(x, f, v)$/;"	f
setproperty!	base/Base.jl	/^setproperty!(x::Tuple, f::Int, v) = setfield!(x, f, v) # to get a decent error$/;"	f
setproperty!	base/Base.jl	/^setproperty!(x::Type, f::Symbol, v) = setfield!(x, f, v)$/;"	f
setproperty!	base/boot.jl	/^const setproperty! = setfield!$/;"	v
setproperty!	base/compiler/compiler.jl	/^const setproperty! = setfield!$/;"	v
setqsym	src/flisp/flisp.h	/^    value_t definesym, defmacrosym, forsym, setqsym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
setrounding	base/mpfr.jl	/^setrounding(::Type{BigFloat}, r::RoundingMode) = setrounding_raw(BigFloat, convert(MPFRRoundingM/;"	f
setrounding	base/rounding.jl	/^function setrounding(f::Function, ::Type{T}, rounding::RoundingMode) where T$/;"	f
setrounding_raw	base/mpfr.jl	/^setrounding_raw(::Type{BigFloat}, r::MPFRRoundingMode) = ROUNDING_MODE[]=r$/;"	f
setrounding_raw	base/rounding.jl	/^function setrounding_raw(f::Function, ::Type{T}, rounding) where T$/;"	f
setrounding_raw	base/rounding.jl	/^setrounding_raw(::Type{<:Union{Float32,Float64}}, i::Integer) = ccall(:fesetround, Int32, (Int32/;"	f
settings	stdlib/Mmap/src/Mmap.jl	/^function settings(s::RawFD, shared::Bool)$/;"	f
settings	stdlib/Mmap/src/Mmap.jl	/^settings(io::IO) = Ptr{Cwchar_t}(0), isreadonly(io), true$/;"	f
settings	stdlib/Mmap/src/Mmap.jl	/^settings(sh::Anonymous) = sh.name, sh.readonly, sh.create$/;"	f
setup_chnl_and_tasks	base/asyncmap.jl	/^function setup_chnl_and_tasks(exec_func, ntasks, batch_size=nothing)$/;"	f
setup_clone_repo	stdlib/LibGit2/test/libgit2.jl	/^    function setup_clone_repo(cache_repo::AbstractString, path::AbstractString; name="AAAA", ema/;"	f
setup_dirs	test/file.jl	/^    function setup_dirs(tmpdir)$/;"	f
setup_files	test/file.jl	/^    function setup_files(tmpdir)$/;"	f
setup_interface	stdlib/REPL/src/REPL.jl	/^function setup_interface($/;"	f
setup_launched_worker	stdlib/Distributed/src/cluster.jl	/^function setup_launched_worker(manager, wconfig, launched_q)$/;"	f
setup_prefix_keymap	stdlib/REPL/src/LineEdit.jl	/^function setup_prefix_keymap(hp, parent_prompt)$/;"	f
setup_search_keymap	stdlib/REPL/src/LineEdit.jl	/^function setup_search_keymap(hp)$/;"	f
setup_stdio	base/process.jl	/^function setup_stdio(io, child_readable::Bool)$/;"	f
setup_stdio	base/process.jl	/^function setup_stdio(stdio::FileRedirect, child_readable::Bool)$/;"	f
setup_stdio	base/process.jl	/^function setup_stdio(stdio::IOStream, child_readable::Bool)$/;"	f
setup_stdio	base/process.jl	/^function setup_stdio(stdio::Pipe, child_readable::Bool)$/;"	f
setup_stdio	base/process.jl	/^function setup_stdio(stdio::PipeEndpoint, child_readable::Bool)$/;"	f
setup_stdio	base/process.jl	/^function setup_stdio(stdio::Union{IOBuffer, BufferStream}, child_readable::Bool)$/;"	f
setup_stdio	base/process.jl	/^setup_stdio(stdio::AbstractPipe, readable::Bool) =$/;"	f
setup_stdios	base/process.jl	/^function setup_stdios(f, stdios::SpawnIOs)$/;"	f
setup_syms	stdlib/Distributed/test/distributed_exec.jl	/^function setup_syms(n, pids)$/;"	f
seven_dollar	test/errorshow.jl	/^macro seven_dollar(ex)$/;"	f
sexpr_indent_width	base/meta.jl	/^const sexpr_indent_width = 2$/;"	v
sh_addr	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Addr	sh_addr;		\/* Section virtual addr at execution *\/$/;"	m	struct:__anonff7a58690308	typeref:typename:Elf32_Addr
sh_addr	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Addr	sh_addr;		\/* Section virtual addr at execution *\/$/;"	m	struct:__anonff7a58690408	typeref:typename:Elf64_Addr
sh_addralign	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word	sh_addralign;		\/* Section alignment *\/$/;"	m	struct:__anonff7a58690308	typeref:typename:Elf32_Word
sh_addralign	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Xword	sh_addralign;		\/* Section alignment *\/$/;"	m	struct:__anonff7a58690408	typeref:typename:Elf64_Xword
sh_entsize	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word	sh_entsize;		\/* Entry size if section holds table *\/$/;"	m	struct:__anonff7a58690308	typeref:typename:Elf32_Word
sh_entsize	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Xword	sh_entsize;		\/* Entry size if section holds table *\/$/;"	m	struct:__anonff7a58690408	typeref:typename:Elf64_Xword
sh_flags	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word	sh_flags;		\/* Section flags *\/$/;"	m	struct:__anonff7a58690308	typeref:typename:Elf32_Word
sh_flags	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Xword	sh_flags;		\/* Section flags *\/$/;"	m	struct:__anonff7a58690408	typeref:typename:Elf64_Xword
sh_info	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word	sh_info;		\/* Additional section information *\/$/;"	m	struct:__anonff7a58690308	typeref:typename:Elf32_Word
sh_info	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Word	sh_info;		\/* Additional section information *\/$/;"	m	struct:__anonff7a58690408	typeref:typename:Elf64_Word
sh_link	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word	sh_link;		\/* Link to another section *\/$/;"	m	struct:__anonff7a58690308	typeref:typename:Elf32_Word
sh_link	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Word	sh_link;		\/* Link to another section *\/$/;"	m	struct:__anonff7a58690408	typeref:typename:Elf64_Word
sh_name	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word	sh_name;		\/* Section name (string tbl index) *\/$/;"	m	struct:__anonff7a58690308	typeref:typename:Elf32_Word
sh_name	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Word	sh_name;		\/* Section name (string tbl index) *\/$/;"	m	struct:__anonff7a58690408	typeref:typename:Elf64_Word
sh_offset	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Off	sh_offset;		\/* Section file offset *\/$/;"	m	struct:__anonff7a58690308	typeref:typename:Elf32_Off
sh_offset	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Off	sh_offset;		\/* Section file offset *\/$/;"	m	struct:__anonff7a58690408	typeref:typename:Elf64_Off
sh_size	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word	sh_size;		\/* Section size in bytes *\/$/;"	m	struct:__anonff7a58690308	typeref:typename:Elf32_Word
sh_size	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Xword	sh_size;		\/* Section size in bytes *\/$/;"	m	struct:__anonff7a58690408	typeref:typename:Elf64_Xword
sh_type	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word	sh_type;		\/* Section type *\/$/;"	m	struct:__anonff7a58690308	typeref:typename:Elf32_Word
sh_type	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Word	sh_type;		\/* Section type *\/$/;"	m	struct:__anonff7a58690408	typeref:typename:Elf64_Word
sha1	stdlib/SHA/test/runtests.jl	/^sha1 => [$/;"	v
sha2_224	stdlib/SHA/test/runtests.jl	/^sha2_224 => [$/;"	v
sha2_256	stdlib/SHA/test/runtests.jl	/^sha2_256 => [$/;"	v
sha2_384	stdlib/SHA/test/runtests.jl	/^sha2_384 => [$/;"	v
sha2_512	stdlib/SHA/test/runtests.jl	/^sha2_512 => [$/;"	v
sha3_224	stdlib/SHA/test/runtests.jl	/^sha3_224 => [$/;"	v
sha3_256	stdlib/SHA/test/runtests.jl	/^sha3_256 => [$/;"	v
sha3_384	stdlib/SHA/test/runtests.jl	/^sha3_384 => [$/;"	v
sha3_512	stdlib/SHA/test/runtests.jl	/^sha3_512 => [$/;"	v
sha_funcs	stdlib/SHA/test/runtests.jl	/^sha_funcs = [sha1,$/;"	v
sha_types	stdlib/SHA/test/runtests.jl	/^sha_types = Dict(sha1 => SHA.SHA1_CTX,$/;"	v
shadow_output	src/codegen.cpp	/^Module *shadow_output;$/;"	v	typeref:typename:Module *
shadowed	src/gf.c	/^    jl_value_t *shadowed;$/;"	m	struct:ambiguous_matches_env	typeref:typename:jl_value_t *	file:
shadowed	src/gf.c	/^    jl_value_t *shadowed;$/;"	m	struct:invalidate_mt_env	typeref:typename:jl_value_t *	file:
shapeindexer	base/broadcast.jl	/^@inline shapeindexer(ax) = _newindexer(ax)$/;"	f
sharedController	contrib/mac/frameworkapp/JuliaLauncher/AppDelegate.m	/^+ (ExecSandboxController *)sharedController {$/;"	c	implementation:ExecSandboxController
sharedController	contrib/mac/frameworkapp/JuliaLauncher/AppDelegate.m	/^+ (ExecSandboxController *_Nonnull)sharedController;$/;"	c	interface:ExecSandboxController
shared_map_lock	src/cgmemmgr.cpp	/^static jl_mutex_t shared_map_lock;$/;"	v	namespace:__anon06c686bc0111	typeref:typename:jl_mutex_t	file:
shared_pids	stdlib/SharedArrays/src/SharedArrays.jl	/^function shared_pids(pids)$/;"	f
sharedstatedir	deps/srccache/patchelf-0.9/Makefile.in	/^sharedstatedir = @sharedstatedir@$/;"	m
sharedstatedir	deps/srccache/patchelf-0.9/src/Makefile.in	/^sharedstatedir = @sharedstatedir@$/;"	m
sharedstatedir	deps/srccache/patchelf-0.9/tests/Makefile.in	/^sharedstatedir = @sharedstatedir@$/;"	m
shcmd	test/spawn.jl	/^shcmd = `sh`$/;"	v
shdrs	deps/srccache/patchelf-0.9/src/patchelf.cc	/^    vector<Elf_Shdr> shdrs;$/;"	m	class:ElfFile	typeref:typename:vector<Elf_Shdr>	file:
shell_completions	stdlib/REPL/src/REPLCompletions.jl	/^function shell_completions(string, pos)::Completions$/;"	f
shell_escape	base/cmd.jl	/^shell_escape(cmd::Cmd; special::AbstractString="") =$/;"	f
shell_escape	base/shell.jl	/^shell_escape(args::AbstractString...; special::AbstractString="") =$/;"	f
shell_escape	contrib/julia-config.jl	/^function shell_escape(str)$/;"	f
shell_escape_posixly	base/cmd.jl	/^shell_escape_posixly(cmd::Cmd) =$/;"	f
shell_escape_posixly	base/shell.jl	/^shell_escape_posixly(args::AbstractString...) =$/;"	f
shell_parse	base/shell.jl	/^function shell_parse(str::AbstractString, interpolate::Bool=true;$/;"	f
shell_special	base/shell.jl	/^const shell_special = "#{}()[]<>|&*?~;"$/;"	v
shell_split	base/shell.jl	/^function shell_split(s::AbstractString)$/;"	f
shift	base/grisu/fastfixed.jl	/^function shift(x::UInt128,amt)$/;"	f
shiftFile	deps/srccache/patchelf-0.9/src/patchelf.cc	/^void ElfFile<ElfFileParamNames>::shiftFile(unsigned int extraPages, Elf_Addr startPage)$/;"	f	class:ElfFile	typeref:typename:void
shiftleft!	base/grisu/bignums.jl	/^function shiftleft!(x::Bignum,shift_amount)$/;"	f
shl_op	src/runtime_intrinsics.c	/^#define shl_op(/;"	d	file:
shlib_ext	src/jloptions.c	/^char *shlib_ext = ".dll";$/;"	v	typeref:typename:char *
shlib_ext	src/jloptions.c	/^char *shlib_ext = ".dylib";$/;"	v	typeref:typename:char *
shlib_ext	src/jloptions.c	/^char *shlib_ext = ".so";$/;"	v	typeref:typename:char *
shm_mmap_array	stdlib/SharedArrays/src/SharedArrays.jl	/^function shm_mmap_array(T, dims, shm_seg_name, mode)$/;"	f
shm_open	stdlib/SharedArrays/src/SharedArrays.jl	/^shm_open(shm_seg_name, oflags, permissions) = ccall(:shm_open, Cint,$/;"	f
shm_unlink	stdlib/SharedArrays/src/SharedArrays.jl	/^shm_unlink(shm_seg_name) = 0$/;"	f
shm_unlink	stdlib/SharedArrays/src/SharedArrays.jl	/^shm_unlink(shm_seg_name) = ccall(:shm_unlink, Cint, (Cstring,), shm_seg_name)$/;"	f
shmem_fill	stdlib/SharedArrays/src/SharedArrays.jl	/^function shmem_fill(v, dims; kwargs...)$/;"	f
shmem_fill	stdlib/SharedArrays/src/SharedArrays.jl	/^shmem_fill(v, I::Int...; kwargs...) = shmem_fill(v, I; kwargs...)$/;"	f
shmem_rand	stdlib/SharedArrays/src/SharedArrays.jl	/^function shmem_rand(TR::Union{DataType, UnitRange}, dims; kwargs...)$/;"	f
shmem_rand	stdlib/SharedArrays/src/SharedArrays.jl	/^shmem_rand(I::Int...; kwargs...) = shmem_rand(I; kwargs...)$/;"	f
shmem_rand	stdlib/SharedArrays/src/SharedArrays.jl	/^shmem_rand(TR::Union{DataType, UnitRange}, I::Int...; kwargs...) = shmem_rand(TR, I; kwargs...)$/;"	f
shmem_rand	stdlib/SharedArrays/src/SharedArrays.jl	/^shmem_rand(TR::Union{DataType, UnitRange}, i::Int; kwargs...) = shmem_rand(TR, (i,); kwargs...)$/;"	f
shmem_rand	stdlib/SharedArrays/src/SharedArrays.jl	/^shmem_rand(dims; kwargs...) = shmem_rand(Float64, dims; kwargs...)$/;"	f
shmem_randn	stdlib/SharedArrays/src/SharedArrays.jl	/^function shmem_randn(dims; kwargs...)$/;"	f
shmem_randn	stdlib/SharedArrays/src/SharedArrays.jl	/^shmem_randn(I::Int...; kwargs...) = shmem_randn(I; kwargs...)$/;"	f
short-form-function-loc	src/julia-parser.scm	/^(define (short-form-function-loc ex lno)$/;"	f
short_blocklen	stdlib/SHA/src/types.jl	/^short_blocklen(::Type{T}) where {T<:SHA_CTX} = blocklen(T) - 2*sizeof(state_type(T))$/;"	f
short_where_call	test/syntax.jl	/^short_where_call = :(f(x::T) where T = T)$/;"	v
shortname	stdlib/LibGit2/src/reference.jl	/^function shortname(ref::GitReference)$/;"	f
should	base/c.jl	/^macro should be used to protect the `array` argument from garbage collection$/;"	f
shouldPopAtDepth	src/clangsa/GCChecker.cpp	/^            bool shouldPopAtDepth(int Depth) const { return Depth == RootedAtDepth; }$/;"	f	struct:__anon9c5a21540111::GCChecker::RootState	typeref:typename:bool	file:
should_method_complete	stdlib/REPL/src/REPLCompletions.jl	/^function should_method_complete(s::AbstractString)$/;"	f
should_print_ssa_type	base/compiler/ssair/show.jl	/^function should_print_ssa_type(@nospecialize node)$/;"	f
should_send_whole_type	stdlib/Serialization/src/Serialization.jl	/^function should_send_whole_type(s, t::DataType)$/;"	f
should_timeout	src/gc.c	/^#define should_timeout(/;"	d	file:
shouldlog	base/logging.jl	/^function shouldlog end$/;"	f
shouldlog	base/logging.jl	/^shouldlog(::NullLogger, args...) = false$/;"	f
shouldlog	base/logging.jl	/^shouldlog(logger::SimpleLogger, level, _module, group, id) =$/;"	f
shouldlog	stdlib/Logging/src/ConsoleLogger.jl	/^shouldlog(logger::ConsoleLogger, level, _module, group, id) =$/;"	f
shouldlog	stdlib/Test/src/logging.jl	/^function shouldlog(logger::TestLogger, level, _module, group, id)$/;"	f
show	base/Base.jl	/^    show(io::IO, x) = Core.show(io, x)$/;"	f
show	base/abstractdict.jl	/^show(io::IO, iter::Union{KeySet,ValueIterator}) = show_vector(io, iter)$/;"	f
show	base/arrayshow.jl	/^function show(io::IO, ::MIME"text\/plain", X::AbstractArray)$/;"	f
show	base/arrayshow.jl	/^function show(io::IO, X::AbstractArray)$/;"	f
show	base/bitset.jl	/^function show(io::IO, s::BitSet)$/;"	f
show	base/boot.jl	/^show(@nospecialize a) = show(stdout, a)$/;"	f
show	base/boot.jl	/^show(io::IO, @nospecialize x) = ccall(:jl_static_show, Cvoid, (Ptr{Cvoid}, Any), io_pointer(io),/;"	f
show	base/channels.jl	/^show(io::IO, c::Channel) = print(io, "$(typeof(c))(sz_max:$(c.sz_max),sz_curr:$(n_avail(c)))")$/;"	f
show	base/char.jl	/^function show(io::IO, ::MIME"text\/plain", c::T) where {T<:AbstractChar}$/;"	f
show	base/char.jl	/^function show(io::IO, c::AbstractChar)$/;"	f
show	base/cmd.jl	/^function show(io::IO, cmd::Cmd)$/;"	f
show	base/cmd.jl	/^function show(io::IO, cmds::AndCmds)$/;"	f
show	base/cmd.jl	/^function show(io::IO, cmds::Union{OrCmds,ErrOrCmds})$/;"	f
show	base/cmd.jl	/^function show(io::IO, cr::CmdRedirect)$/;"	f
show	base/compiler/ssair/driver.jl	/^    macro show(s)$/;"	f
show	base/complex.jl	/^function show(io::IO, z::Complex)$/;"	f
show	base/complex.jl	/^show(io::IO, z::Complex{Bool}) =$/;"	f
show	base/coreio.jl	/^function show end$/;"	f
show	base/dict.jl	/^function show(io::IO, t::AbstractDict{K,V}) where V where K$/;"	f
show	base/docs/basedocs.jl	/^show(io::IO, a::MyType) = print(io, "MyType \\$(a.x)")$/;"	f
show	base/docs/utils.jl	/^show(io::IO, ::MIME"text\/html", h::HTML) = print(io, h.content)$/;"	f
show	base/docs/utils.jl	/^show(io::IO, ::MIME"text\/html", h::HTML{<:Function}) = h.content(io)$/;"	f
show	base/docs/utils.jl	/^show(io::IO, t::Text) = print(io, t)$/;"	f
show	base/env.jl	/^function show(io::IO, ::EnvDict)$/;"	f
show	base/gmp.jl	/^show(io::IO, x::BigInt) = print(io, string(x))$/;"	f
show	base/indices.jl	/^show(io::IO, r::IdentityUnitRange) = print(io, "Base.IdentityUnitRange(", r.indices, ")")$/;"	f
show	base/indices.jl	/^show(io::IO, r::Slice) = print(io, "Base.Slice(", r.indices, ")")$/;"	f
show	base/iobuffer.jl	/^show(io::IO, b::GenericIOBuffer) = print(io, "IOBuffer(data=UInt8[...], ",$/;"	f
show	base/iostream.jl	/^show(io::IO, s::IOStream) = print(io, "IOStream(", s.name, ")")$/;"	f
show	base/irrationals.jl	/^function show(io::IO, ::MIME"text\/plain", x::Irrational{sym}) where {sym}$/;"	f
show	base/irrationals.jl	/^show(io::IO, x::Irrational{sym}) where {sym} = print(io, sym)$/;"	f
show	base/loading.jl	/^function show(io::IO, ex::PrecompilableError)$/;"	f
show	base/loading.jl	/^show(io::IO, hash::SHA1) = print(io, "SHA1(\\"", hash, "\\")")$/;"	f
show	base/loading.jl	/^show(io::IO, pkg::PkgId) =$/;"	f
show	base/logging.jl	/^function show(io::IO, level::LogLevel)$/;"	f
show	base/methodshow.jl	/^function show(io::IO, ::MIME"text\/html", m::Method; kwtype::Union{DataType, Nothing}=nothing)$/;"	f
show	base/methodshow.jl	/^function show(io::IO, m::Method; kwtype::Union{DataType, Nothing}=nothing)$/;"	f
show	base/methodshow.jl	/^function show(io::IO, mime::MIME"text\/html", ms::MethodList)$/;"	f
show	base/methodshow.jl	/^function show(io::IO, mime::MIME"text\/html", mt::AbstractVector{Method})$/;"	f
show	base/methodshow.jl	/^function show(io::IO, mime::MIME"text\/plain", mt::AbstractVector{Method})$/;"	f
show	base/methodshow.jl	/^show(io::IO, mime::MIME"text\/html", mt::Core.MethodTable) = show(io, mime, MethodList(mt))$/;"	f
show	base/methodshow.jl	/^show(io::IO, ms::MethodList) = show_method_table(io, ms)$/;"	f
show	base/methodshow.jl	/^show(io::IO, mt::Core.MethodTable) = show_method_table(io, MethodList(mt))$/;"	f
show	base/missing.jl	/^show(io::IO, x::Missing) = print(io, "missing")$/;"	f
show	base/mpfr.jl	/^function show(io::IO, b::BigFloat)$/;"	f
show	base/multidimensional.jl	/^    show(io::IO, i::CartesianIndex) = (print(io, "CartesianIndex"); show(io, i.I))$/;"	f
show	base/multidimensional.jl	/^show(io::IO, r::LogicalIndex) = print(io, "Base.LogicalIndex(", r.mask, ")")$/;"	f
show	base/multimedia.jl	/^show(io::IO, ::MIME"text\/plain", x) = show(io, x)$/;"	f
show	base/multimedia.jl	/^show(io::IO, ::MIME{mime}) where {mime} = print(io, "MIME type ", string(mime))$/;"	f
show	base/multimedia.jl	/^show(io::IO, m::AbstractString, x) = show(io, MIME(m), x)$/;"	f
show	base/namedtuple.jl	/^function show(io::IO, t::NamedTuple)$/;"	f
show	base/options.jl	/^function show(io::IO, opt::JLOptions)$/;"	f
show	base/process.jl	/^show(io::IO, p::Process) = print(io, "Process(", p.cmd, ", ", process_status(p), ")")$/;"	f
show	base/range.jl	/^function show(io::IO, r::LinRange)$/;"	f
show	base/range.jl	/^show(io::IO, r::AbstractRange) = print(io, repr(first(r)), ':', repr(step(r)), ':', repr(last(r)/;"	f
show	base/range.jl	/^show(io::IO, r::OneTo) = print(io, "Base.OneTo(", r.stop, ")")$/;"	f
show	base/range.jl	/^show(io::IO, r::UnitRange) = print(io, repr(first(r)), ':', repr(last(r)))$/;"	f
show	base/rational.jl	/^function show(io::IO, x::Rational)$/;"	f
show	base/regex.jl	/^function show(io::IO, m::RegexMatch)$/;"	f
show	base/regex.jl	/^function show(io::IO, re::Regex)$/;"	f
show	base/regex.jl	/^function show(io::IO, s::SubstitutionString)$/;"	f
show	base/secretbuffer.jl	/^show(io::IO, s::SecretBuffer) = print(io, "SecretBuffer(\\"*******\\")")$/;"	f
show	base/set.jl	/^function show(io::IO, s::Set)$/;"	f
show	base/show.jl	/^function show(io::IO, ::MIME"text\/plain", f::Function)$/;"	f
show	base/show.jl	/^function show(io::IO, ::MIME"text\/plain", iter::Union{KeySet,ValueIterator})$/;"	f
show	base/show.jl	/^function show(io::IO, ::MIME"text\/plain", opt::JLOptions)$/;"	f
show	base/show.jl	/^function show(io::IO, ::MIME"text\/plain", r::LinRange)$/;"	f
show	base/show.jl	/^function show(io::IO, ::MIME"text\/plain", t::AbstractDict{K,V}) where {K,V}$/;"	f
show	base/show.jl	/^function show(io::IO, ::MIME"text\/plain", t::Task)$/;"	f
show	base/show.jl	/^function show(io::IO, @nospecialize(x::Type))$/;"	f
show	base/show.jl	/^function show(io::IO, l::Core.MethodInstance)$/;"	f
show	base/show.jl	/^function show(io::IO, m::Module)$/;"	f
show	base/show.jl	/^function show(io::IO, p::Pair)$/;"	f
show	base/show.jl	/^function show(io::IO, src::CodeInfo; debuginfo::Symbol=:source)$/;"	f
show	base/show.jl	/^function show(io::IO, tn::Core.TypeName)$/;"	f
show	base/show.jl	/^function show(io::IO, tv::TypeVar)$/;"	f
show	base/show.jl	/^function show(io::IO, x::Core.IntrinsicFunction)$/;"	f
show	base/show.jl	/^macro show(exs...)$/;"	f
show	base/show.jl	/^show(         io::IO, ex::ExprNode)    = show_unquoted_quote_expr(io, ex, 0, -1)$/;"	f
show	base/show.jl	/^show(io::IO, ::Core.TypeofBottom) = print(io, "Union{}")$/;"	f
show	base/show.jl	/^show(io::IO, ::MIME"text\/plain", ::Core.TypeofBottom) = print(io, "Union{}")$/;"	f
show	base/show.jl	/^show(io::IO, ::MIME"text\/plain", r::AbstractRange) = show(io, r) # always use the compact form /;"	f
show	base/show.jl	/^show(io::IO, ::Nothing) = print(io, "nothing")$/;"	f
show	base/show.jl	/^show(io::IO, ::UndefInitializer) = print(io, "array initializer with undefined values")$/;"	f
show	base/show.jl	/^show(io::IO, @nospecialize(x)) = show_default(io, x)$/;"	f
show	base/show.jl	/^show(io::IO, b::Bool) = print(io, get(io, :typeinfo, Any) === Bool ? (b ? "1" : "0") : (b ? "tru/;"	f
show	base/show.jl	/^show(io::IO, ctx::IOContext) = (print(io, "IOContext("); show(io, ctx.io); print(io, ")"))$/;"	f
show	base/show.jl	/^show(io::IO, f::Function) = show_function(io, f, get(io, :compact, false))$/;"	f
show	base/show.jl	/^show(io::IO, n::Signed) = (write(io, string(n)); nothing)$/;"	f
show	base/show.jl	/^show(io::IO, n::Unsigned) = print(io, "0x", string(n, pad = sizeof(n)<<1, base = 16))$/;"	f
show	base/show.jl	/^show(io::IO, p::Ptr) = print(io, typeof(p), " @0x$(string(UInt(p), base = 16, pad = Sys.WORD_SIZ/;"	f
show	base/show.jl	/^show(io::IO, s::Symbol) = show_unquoted_quote_expr(io, s, 0, 0)$/;"	f
show	base/show.jl	/^show(io::IO, t::Tuple) = show_delim_array(io, t, '(', ',', ')', true)$/;"	f
show	base/show.jl	/^show(io::IO, v::SimpleVector) = show_delim_array(io, v, "svec(", ',', ')', false)$/;"	f
show	base/show.jl	/^show(x) = show(stdout::IO, x)$/;"	f
show	base/some.jl	/^function show(io::IO, x::Some)$/;"	f
show	base/stacktraces.jl	/^function show(io::IO, frame::StackFrame; full_path::Bool=false)$/;"	f
show	base/stat.jl	/^show(io::IO, st::StatStruct) = print(io, "StatStruct(mode=0o$(string(filemode(st), base = 8, pad/;"	f
show	base/stream.jl	/^show(io::IO, s::BufferStream) = print(io, "BufferStream() bytes waiting:", bytesavailable(s.buff/;"	f
show	base/stream.jl	/^show(io::IO, stream::LibuvServer) = print(io, typeof(stream), "(",$/;"	f
show	base/stream.jl	/^show(io::IO, stream::LibuvStream) = print(io, typeof(stream), "(",$/;"	f
show	base/stream.jl	/^show(io::IO, stream::Pipe) = print(io,$/;"	f
show	base/strings/io.jl	/^show(io::IO, s::AbstractString) = print_quoted(io, s)$/;"	f
show	base/strings/unicode.jl	/^show(io::IO, g::GraphemeIterator{S}) where {S} = print(io, "length-$(length(g)) GraphemeIterator/;"	f
show	base/sysinfo.jl	/^show(io::IO, info::CPUinfo) = _show_cpuinfo(io, info, true, "    ")$/;"	f
show	base/task.jl	/^function show(io::IO, t::Task)$/;"	f
show	base/uuid.jl	/^show(io::IO, u::UUID) = print(io, "UUID(\\"", u, "\\")")$/;"	f
show	base/version.jl	/^show(io::IO, v::VersionNumber) = print(io, "v\\"", v, "\\"")$/;"	f
show	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^show(io::IO, ::MIME"text\/csv", a) = writedlm(io, a, ',')$/;"	f
show	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^show(io::IO, ::MIME"text\/tab-separated-values", a) = writedlm(io, a, '\\t')$/;"	f
show	stdlib/Distributed/src/managers.jl	/^show(io::IO, manager::LocalManager) = println(io, "LocalManager()")$/;"	f
show	stdlib/Distributed/src/managers.jl	/^show(io::IO, manager::SSHManager) = println(io, "SSHManager(machines=", manager.machines, ")")$/;"	f
show	stdlib/LinearAlgebra/src/bidiag.jl	/^function show(io::IO, M::Bidiagonal)$/;"	f
show	stdlib/LinearAlgebra/src/cholesky.jl	/^function show(io::IO, mime::MIME{Symbol("text\/plain")}, C::CholeskyPivoted{<:Any,<:AbstractMatr/;"	f
show	stdlib/LinearAlgebra/src/cholesky.jl	/^function show(io::IO, mime::MIME{Symbol("text\/plain")}, C::Cholesky{<:Any,<:AbstractMatrix})$/;"	f
show	stdlib/LinearAlgebra/src/eigen.jl	/^function show(io::IO, mime::MIME{Symbol("text\/plain")}, F::Union{Eigen,GeneralizedEigen})$/;"	f
show	stdlib/LinearAlgebra/src/hessenberg.jl	/^function show(io::IO, mime::MIME"text\/plain", F::Hessenberg)$/;"	f
show	stdlib/LinearAlgebra/src/ldlt.jl	/^function show(io::IO, mime::MIME{Symbol("text\/plain")}, F::LDLt)$/;"	f
show	stdlib/LinearAlgebra/src/lq.jl	/^function show(io::IO, ::MIME"text\/plain", C::LQ)$/;"	f
show	stdlib/LinearAlgebra/src/lu.jl	/^function show(io::IO, mime::MIME{Symbol("text\/plain")}, F::LU)$/;"	f
show	stdlib/LinearAlgebra/src/qr.jl	/^function show(io::IO, mime::MIME{Symbol("text\/plain")}, F::Union{QR, QRCompactWY, QRPivoted})$/;"	f
show	stdlib/LinearAlgebra/src/schur.jl	/^function show(io::IO, mime::MIME{Symbol("text\/plain")}, F::GeneralizedSchur)$/;"	f
show	stdlib/LinearAlgebra/src/schur.jl	/^function show(io::IO, mime::MIME{Symbol("text\/plain")}, F::Schur)$/;"	f
show	stdlib/LinearAlgebra/src/svd.jl	/^function show(io::IO, mime::MIME{Symbol("text\/plain")}, F::SVD{<:Any,<:Any,<:AbstractArray})$/;"	f
show	stdlib/LinearAlgebra/src/uniformscaling.jl	/^function show(io::IO, ::MIME"text\/plain", J::UniformScaling)$/;"	f
show	stdlib/Markdown/src/IPython/IPython.jl	/^show(io::IO, tex::LaTeX) =$/;"	f
show	stdlib/Markdown/src/render/html.jl	/^function show(io::IO, ::MIME"text\/html", md::MD)$/;"	f
show	stdlib/Markdown/src/render/latex.jl	/^show(io::IO, ::MIME"text\/latex", md::MD) = latex(io, md)$/;"	f
show	stdlib/Markdown/test/runtests.jl	/^show(io::IO, m::MIME"text\/html", r::Reference) =$/;"	f
show	stdlib/Markdown/test/runtests.jl	/^show(io::IO, m::MIME"text\/plain", r::Reference) =$/;"	f
show	stdlib/REPL/src/LineEdit.jl	/^function show(io::IO, s::MIState)$/;"	f
show	stdlib/REPL/src/LineEdit.jl	/^function show(io::IO, s::PrefixSearchState)$/;"	f
show	stdlib/REPL/src/LineEdit.jl	/^show(io::IO, x::Prompt) = show(io, string("Prompt(\\"", prompt_string(x.prompt), "\\",...)"))$/;"	f
show	stdlib/SHA/src/types.jl	/^show(io::IO, ::SHA1_CTX) = print(io, "SHA1 hash state")$/;"	f
show	stdlib/SHA/src/types.jl	/^show(io::IO, ::SHA2_224_CTX) = print(io, "SHA2 224-bit hash state")$/;"	f
show	stdlib/SHA/src/types.jl	/^show(io::IO, ::SHA2_256_CTX) = print(io, "SHA2 256-bit hash state")$/;"	f
show	stdlib/SHA/src/types.jl	/^show(io::IO, ::SHA2_384_CTX) = print(io, "SHA2 384-bit hash state")$/;"	f
show	stdlib/SHA/src/types.jl	/^show(io::IO, ::SHA2_512_CTX) = print(io, "SHA2 512-bit hash state")$/;"	f
show	stdlib/SHA/src/types.jl	/^show(io::IO, ::SHA3_224_CTX) = print(io, "SHA3 224-bit hash state")$/;"	f
show	stdlib/SHA/src/types.jl	/^show(io::IO, ::SHA3_256_CTX) = print(io, "SHA3 256-bit hash state")$/;"	f
show	stdlib/SHA/src/types.jl	/^show(io::IO, ::SHA3_384_CTX) = print(io, "SHA3 384-bit hash state")$/;"	f
show	stdlib/SHA/src/types.jl	/^show(io::IO, ::SHA3_512_CTX) = print(io, "SHA3 512-bit hash state")$/;"	f
show	stdlib/SharedArrays/src/SharedArrays.jl	/^function show(io::IO, S::SharedArray)$/;"	f
show	stdlib/SharedArrays/src/SharedArrays.jl	/^function show(io::IO, mime::MIME"text\/plain", S::SharedArray)$/;"	f
show	stdlib/Sockets/src/IPAddr.jl	/^function show(io::IO, addr::InetAddr)$/;"	f
show	stdlib/Sockets/src/IPAddr.jl	/^show(io::IO, ip::IPv6) = print(io,"ip\\"",ip,"\\"")$/;"	f
show	stdlib/Sockets/src/IPAddr.jl	/^show(io::IO,ip::IPv4) = print(io,"ip\\"",ip,"\\"")$/;"	f
show	stdlib/Sockets/src/Sockets.jl	/^show(io::IO, stream::UDPSocket) = print(io, typeof(stream), "(", uv_status_string(stream), ")")$/;"	f
show	stdlib/Sockets/src/addrinfo.jl	/^function show(io::IO, err::DNSError)$/;"	f
show	stdlib/SparseArrays/src/sparsevector.jl	/^function show(io::IO, ::MIME"text\/plain", x::AbstractSparseVector)$/;"	f
show	stdlib/SparseArrays/src/sparsevector.jl	/^function show(io::IOContext, x::AbstractSparseVector)$/;"	f
show	stdlib/SparseArrays/src/sparsevector.jl	/^show(io::IO, x::AbstractSparseVector) = show(convert(IOContext, io), x)$/;"	f
show	stdlib/SuiteSparse/src/cholmod.jl	/^function show(io::IO, F::Factor)$/;"	f
show	stdlib/SuiteSparse/src/cholmod.jl	/^function show(io::IO, FC::FactorComponent)$/;"	f
show	stdlib/SuiteSparse/src/cholmod.jl	/^show(io::IO, ::MIME"text\/plain", F::Factor) = show(io, F)$/;"	f
show	stdlib/SuiteSparse/src/cholmod.jl	/^show(io::IO, ::MIME"text\/plain", FC::FactorComponent) = show(io, FC)$/;"	f
show	stdlib/SuiteSparse/src/umfpack.jl	/^function show(io::IO, F::UmfpackLU)$/;"	f
show	test/show.jl	/^    show(IOContext(s, :compact => false), (1=>2) => Pair{Any,Any}(3,4))$/;"	f
showHelp	deps/srccache/patchelf-0.9/src/patchelf.cc	/^void showHelp(const string & progName)$/;"	f	typeref:typename:void
show_backtrace	base/errorshow.jl	/^function show_backtrace(io::IO, t::Vector)$/;"	f
show_backtrace	base/errorshow.jl	/^function show_backtrace(io::IO, t::Vector{Any})$/;"	f
show_block	base/show.jl	/^function show_block(io::IO, head, arg, block, i::Int)$/;"	f
show_block	base/show.jl	/^function show_block(io::IO, head, args::Vector, body, indent::Int)$/;"	f
show_block	base/show.jl	/^show_block(io::IO,head,    block,i::Int) = show_block(io,head, [], block,i)$/;"	f
show_bound	base/show.jl	/^    function show_bound(io::IO, @nospecialize(b))$/;"	f
show_call	base/show.jl	/^function show_call(io::IO, head, func, func_args, indent)$/;"	f
show_call	src/gf.c	/^static void show_call(jl_value_t *F, jl_value_t **args, uint32_t nargs)$/;"	f	typeref:typename:void	file:
show_circular	base/show.jl	/^function show_circular(io::IOContext, @nospecialize(x))$/;"	f
show_circular	base/show.jl	/^show_circular(io::IO, @nospecialize(x)) = false$/;"	f
show_completions	stdlib/REPL/src/LineEdit.jl	/^function show_completions(s::PromptState, completions)$/;"	f
show_datatype	base/show.jl	/^function show_datatype(io::IO, x::DataType)$/;"	f
show_default	base/show.jl	/^show_default(io::IO, @nospecialize(x)) = _show_default(io, inferencebarrier(x))$/;"	f
show_delim_array	base/show.jl	/^function show_delim_array(io::IO, itr, op, delim, cl, delim_one, i1=1, n=typemax(Int))$/;"	f
show_delim_array	base/show.jl	/^function show_delim_array(io::IO, itr::Union{AbstractArray,SimpleVector}, op, delim, cl,$/;"	f
show_enclosed_list	base/show.jl	/^function show_enclosed_list(io::IO, op, items, sep, cl, indent, prec=0, encl_ops=false)$/;"	f
show_exception_stack	base/errorshow.jl	/^function show_exception_stack(io::IO, stack::Vector)$/;"	f
show_f1	test/show.jl	/^show_f1(x...) = [x...]$/;"	f
show_f2	test/show.jl	/^show_f2(x::Vararg{Any}) = [x...]$/;"	f
show_f3	test/show.jl	/^show_f3(x::Vararg) = [x...]$/;"	f
show_f4	test/show.jl	/^show_f4(x::Vararg{Any,3}) = [x...]$/;"	f
show_f5	test/show.jl	/^show_f5(A::AbstractArray{T, N}, indices::Vararg{Int,N}) where {T, N} = [indices...]$/;"	f
show_function	base/show.jl	/^function show_function(io::IO, f::Function, compact::Bool)$/;"	f
show_generator	base/show.jl	/^function show_generator(io, ex, indent)$/;"	f
show_import_path	base/show.jl	/^function show_import_path(io::IO, ex)$/;"	f
show_invalid	base/char.jl	/^function show_invalid(io::IO, c::Char)$/;"	f
show_ir	base/compiler/ssair/show.jl	/^function show_ir(io::IO, code::CodeInfo, line_info_preprinter=DILineInfoPrinter(code.linetable),/;"	f
show_ir	base/compiler/ssair/show.jl	/^function show_ir(io::IO, code::IRCode, expr_type_printer=default_expr_type_printer; verbose_line/;"	f
show_linenumber	base/show.jl	/^show_linenumber(io::IO, line)       = print(io, "#= line ", line, " =#")$/;"	f
show_linenumber	base/show.jl	/^show_linenumber(io::IO, line, file) = print(io, "#= ", file, ":", line, " =#")$/;"	f
show_linenumber	base/show.jl	/^show_linenumber(io::IO, line, file::Nothing) = show_linenumber(io, line)$/;"	f
show_list	base/show.jl	/^function show_list(io::IO, items, sep, indent::Int, prec::Int=0, enclose_operators::Bool=false)$/;"	f
show_method_candidates	base/errorshow.jl	/^function show_method_candidates(io::IO, ex::MethodError, @nospecialize kwargs=())$/;"	f
show_method_list_header	base/methodshow.jl	/^function show_method_list_header(io::IO, ms::MethodList, namefmt::Function)$/;"	f
show_method_params	base/methodshow.jl	/^function show_method_params(io::IO, tv)$/;"	f
show_method_table	base/methodshow.jl	/^function show_method_table(io::IO, ms::MethodList, max::Int=-1, header::Bool=true)$/;"	f
show_nd	base/arrayshow.jl	/^function show_nd(io::IO, a::AbstractArray, print_matrix::Function, label_slices::Bool)$/;"	f
show_reduced_backtrace	base/errorshow.jl	/^function show_reduced_backtrace(io::IO, t::Vector, with_prefix::Bool)$/;"	f
show_sexpr	base/meta.jl	/^function show_sexpr(io::IO, ex::Expr, indent::Int)$/;"	f
show_sexpr	base/meta.jl	/^function show_sexpr(io::IO, ex::QuoteNode, indent::Int)$/;"	f
show_sexpr	base/meta.jl	/^show_sexpr(ex) = show_sexpr(stdout, ex)$/;"	f
show_sexpr	base/meta.jl	/^show_sexpr(io::IO, ex) = show_sexpr(io, ex, 0)$/;"	f
show_sexpr	base/meta.jl	/^show_sexpr(io::IO, ex, indent::Int) = show(io, ex)$/;"	f
show_source_loc	src/codegen.cpp	/^static void show_source_loc(jl_codectx_t &ctx, JL_STREAM *out)$/;"	f	typeref:typename:void	file:
show_spec_linfo	base/stacktraces.jl	/^function show_spec_linfo(io::IO, frame::StackFrame)$/;"	f
show_supertypes	base/show.jl	/^function show_supertypes(io::IO, typ::DataType)$/;"	f
show_supertypes	base/show.jl	/^show_supertypes(typ::DataType) = show_supertypes(stdout, typ)$/;"	f
show_sym	base/show.jl	/^function show_sym(io::IO, sym; allow_macroname=false)$/;"	f
show_trace_entry	base/errorshow.jl	/^function show_trace_entry(io, frame, n; prefix = "")$/;"	f
show_tuple_as_call	base/show.jl	/^function show_tuple_as_call(io::IO, name::Symbol, sig::Type)$/;"	f
show_type_name	base/show.jl	/^function show_type_name(io::IO, tn::Core.TypeName)$/;"	f
show_umf_ctrl	stdlib/SuiteSparse/src/umfpack.jl	/^function show_umf_ctrl(level::Real = 2.0)$/;"	f
show_umf_info	stdlib/SuiteSparse/src/umfpack.jl	/^function show_umf_info(level::Real = 2.0)$/;"	f
show_unquoted	base/compiler/ssair/show.jl	/^function show_unquoted(io::IO, stmt::PhiCNode, indent::Int, ::Int)$/;"	f
show_unquoted	base/compiler/ssair/show.jl	/^function show_unquoted(io::IO, stmt::PiNode, indent::Int, ::Int)$/;"	f
show_unquoted	base/compiler/ssair/show.jl	/^function show_unquoted(io::IO, stmt::ReturnNode, indent::Int, ::Int)$/;"	f
show_unquoted	base/compiler/ssair/show.jl	/^function show_unquoted(io::IO, stmt::UpsilonNode, indent::Int, ::Int)$/;"	f
show_unquoted	base/compiler/ssair/show.jl	/^show_unquoted(io::IO, stmt::GotoIfNot, indent::Int, ::Int) = show_unquoted_gotoifnot(io, stmt, i/;"	f
show_unquoted	base/compiler/ssair/show.jl	/^show_unquoted(io::IO, stmt::PhiNode, indent::Int, ::Int) = show_unquoted_phinode(io, stmt, inden/;"	f
show_unquoted	base/compiler/ssair/show.jl	/^show_unquoted(io::IO, val::Argument, indent::Int, prec::Int) = show_unquoted(io, Core.SlotNumber/;"	f
show_unquoted	base/complex.jl	/^function show_unquoted(io::IO, z::Complex, ::Int, prec::Int)$/;"	f
show_unquoted	base/show.jl	/^function show_unquoted(io::IO, ex::Expr, indent::Int, prec::Int)$/;"	f
show_unquoted	base/show.jl	/^function show_unquoted(io::IO, ex::GlobalRef, ::Int, ::Int)$/;"	f
show_unquoted	base/show.jl	/^function show_unquoted(io::IO, ex::QuoteNode, indent::Int, prec::Int)$/;"	f
show_unquoted	base/show.jl	/^function show_unquoted(io::IO, ex::Slot, ::Int, ::Int)$/;"	f
show_unquoted	base/show.jl	/^show_unquoted(io::IO, ex)              = show_unquoted(io, ex, 0, 0)$/;"	f
show_unquoted	base/show.jl	/^show_unquoted(io::IO, ex, ::Int,::Int) = show(io, ex)$/;"	f
show_unquoted	base/show.jl	/^show_unquoted(io::IO, ex, indent::Int) = show_unquoted(io, ex, indent, 0)$/;"	f
show_unquoted	base/show.jl	/^show_unquoted(io::IO, ex::GotoNode, ::Int, ::Int)       = print(io, "goto %", ex.label)$/;"	f
show_unquoted	base/show.jl	/^show_unquoted(io::IO, ex::LineNumberNode, ::Int, ::Int) = show_linenumber(io, ex.line, ex.file)$/;"	f
show_unquoted	base/show.jl	/^show_unquoted(io::IO, sym::Symbol, ::Int, ::Int)        = show_sym(io, sym)$/;"	f
show_unquoted	base/show.jl	/^show_unquoted(io::IO, val::SSAValue, ::Int, ::Int)      = print(io, "%", val.id)$/;"	f
show_unquoted_gotoifnot	base/compiler/ssair/show.jl	/^function show_unquoted_gotoifnot(io::IO, stmt::GotoIfNot, indent::Int, prefix::String)$/;"	f
show_unquoted_phinode	base/compiler/ssair/show.jl	/^function show_unquoted_phinode(io::IO, stmt::PhiNode, indent::Int, prefix::String)$/;"	f
show_unquoted_quote_expr	base/show.jl	/^function show_unquoted_quote_expr(io::IO, @nospecialize(value), indent::Int, prec::Int)$/;"	f
show_vector	base/arrayshow.jl	/^function show_vector(io::IO, v, opn='[', cls=']')$/;"	f
showable	base/multimedia.jl	/^showable(::MIME{mime}, @nospecialize x) where {mime} = hasmethod(show, Tuple{IO, MIME{mime}, typ/;"	f
showable	base/multimedia.jl	/^showable(m::AbstractString, @nospecialize x) = showable(MIME(m), x)$/;"	f
showarg	base/show.jl	/^function showarg(io::IO, ::Type{T}, toplevel) where {T}$/;"	f
showarg	base/show.jl	/^function showarg(io::IO, a::Array{Union{}}, toplevel)$/;"	f
showarg	base/show.jl	/^function showarg(io::IO, r::ReinterpretArray{T}, toplevel) where {T}$/;"	f
showarg	base/show.jl	/^function showarg(io::IO, r::ReshapedArray, toplevel)$/;"	f
showarg	base/show.jl	/^function showarg(io::IO, v::SubArray, toplevel)$/;"	f
showarg	base/show.jl	/^function showarg(io::IO, x, toplevel)$/;"	f
showerror	base/errorshow.jl	/^function showerror(io::IO, ex, bt; backtrace=true)$/;"	f
showerror	base/errorshow.jl	/^function showerror(io::IO, ex::BoundsError)$/;"	f
showerror	base/errorshow.jl	/^function showerror(io::IO, ex::DomainError)$/;"	f
showerror	base/errorshow.jl	/^function showerror(io::IO, ex::ErrorException)$/;"	f
showerror	base/errorshow.jl	/^function showerror(io::IO, ex::InexactError)$/;"	f
showerror	base/errorshow.jl	/^function showerror(io::IO, ex::InitError, bt; backtrace=true)$/;"	f
showerror	base/errorshow.jl	/^function showerror(io::IO, ex::LoadError, bt; backtrace=true)$/;"	f
showerror	base/errorshow.jl	/^function showerror(io::IO, ex::MethodError)$/;"	f
showerror	base/errorshow.jl	/^function showerror(io::IO, ex::SystemError)$/;"	f
showerror	base/errorshow.jl	/^function showerror(io::IO, ex::TypeError)$/;"	f
showerror	base/errorshow.jl	/^function showerror(io::IO, ex::UndefVarError)$/;"	f
showerror	base/errorshow.jl	/^showerror(io::IO, ::DivideError) = print(io, "DivideError: integer division error")$/;"	f
showerror	base/errorshow.jl	/^showerror(io::IO, ::EOFError) = print(io, "EOFError: read end of file")$/;"	f
showerror	base/errorshow.jl	/^showerror(io::IO, ::StackOverflowError) = print(io, "StackOverflowError:")$/;"	f
showerror	base/errorshow.jl	/^showerror(io::IO, ::UndefRefError) = print(io, "UndefRefError: access to undefined reference")$/;"	f
showerror	base/errorshow.jl	/^showerror(io::IO, ex) = show(io, ex)$/;"	f
showerror	base/errorshow.jl	/^showerror(io::IO, ex::ArgumentError) = print(io, "ArgumentError: ", ex.msg)$/;"	f
showerror	base/errorshow.jl	/^showerror(io::IO, ex::AssertionError) = print(io, "AssertionError: ", ex.msg)$/;"	f
showerror	base/errorshow.jl	/^showerror(io::IO, ex::InitError) = showerror(io, ex, [])$/;"	f
showerror	base/errorshow.jl	/^showerror(io::IO, ex::InterruptException) = print(io, "InterruptException:")$/;"	f
showerror	base/errorshow.jl	/^showerror(io::IO, ex::KeyError) = (print(io, "KeyError: key ");$/;"	f
showerror	base/errorshow.jl	/^showerror(io::IO, ex::LoadError) = showerror(io, ex, [])$/;"	f
showerror	base/errorshow.jl	/^showerror(io::IO, ex::OverflowError) = print(io, "OverflowError: ", ex.msg)$/;"	f
showerror	base/errorshow.jl	/^showerror(io::IO, ex::UndefKeywordError) =$/;"	f
showerror	base/libuv.jl	/^showerror(io::IO, e::IOError) = print(io, "IOError: ", e.msg)$/;"	f
showerror	base/missing.jl	/^showerror(io::IO, ex::MissingException) =$/;"	f
showerror	base/process.jl	/^function showerror(io::IO, err::ProcessFailedException)$/;"	f
showerror	base/reinterpretarray.jl	/^function showerror(io::IO, p::PaddingError)$/;"	f
showerror	base/task.jl	/^function showerror(io::IO, ce::CapturedException)$/;"	f
showerror	base/task.jl	/^function showerror(io::IO, ex::CompositeException)$/;"	f
showerror	base/task.jl	/^function showerror(io::IO, ex::TaskFailedException)$/;"	f
showerror	stdlib/Distributed/src/process_messages.jl	/^function showerror(io::IO, re::RemoteException)$/;"	f
showerror_ambiguous	base/errorshow.jl	/^function showerror_ambiguous(io::IO, meth, f, args)$/;"	f
showerror_nostdio	base/errorshow.jl	/^function showerror_nostdio(err, msg::AbstractString)$/;"	f
showfactor	stdlib/SuiteSparse/src/cholmod.jl	/^function showfactor(io::IO, F::Factor)$/;"	f
showindices	base/show.jl	/^showindices(io) = nothing$/;"	f
showindices	base/show.jl	/^showindices(io, ::Union{Slice,IdentityUnitRange}, inds...) =$/;"	f
showindices	base/show.jl	/^showindices(io, ind1, inds...) =$/;"	f
showrest	stdlib/Markdown/src/parse/util.jl	/^function showrest(io::IO)$/;"	f
showstr	test/show.jl	/^    @test showstr(d) == "Dict((+) => 1)"$/;"	f
showstr	test/show.jl	/^    @test showstr(d) == "Dict((1 => 2) => (1 => 2))" # correct parenthesis$/;"	f
showstr	test/show.jl	/^showstr(x, kv::Pair...) = sprint((io,x) -> show(IOContext(io, :limit => true, :displaysize => (2/;"	f
showvalue	stdlib/Logging/src/ConsoleLogger.jl	/^function showvalue(io, e::Tuple{Exception,Any})$/;"	f
showvalue	stdlib/Logging/src/ConsoleLogger.jl	/^showvalue(io, ex::Exception) = showerror(io, ex)$/;"	f
showvalue	stdlib/Logging/src/ConsoleLogger.jl	/^showvalue(io, msg) = show(io, "text\/plain", msg)$/;"	f
shred!	base/secretbuffer.jl	/^function shred!(f::Function, x)$/;"	f
shred!	base/secretbuffer.jl	/^function shred!(s::SecretBuffer)$/;"	f
shrink-rpath.sh.log	deps/srccache/patchelf-0.9/tests/Makefile.in	/^shrink-rpath.sh.log: shrink-rpath.sh$/;"	t
shrinkRPath	deps/srccache/patchelf-0.9/src/patchelf.cc	/^static bool shrinkRPath = false;$/;"	v	typeref:typename:bool	file:
shrink_big_little	src/processor_arm.cpp	/^static void shrink_big_little(std::vector<std::pair<uint32_t,CPUID>> &list,$/;"	f	namespace:ARM	typeref:typename:void	file:
shuffle	stdlib/Random/src/misc.jl	/^shuffle(a::AbstractArray) = shuffle(default_rng(), a)$/;"	f
shuffle	stdlib/Random/src/misc.jl	/^shuffle(r::AbstractRNG, a::AbstractArray) = shuffle!(r, copymutable(a))$/;"	f
shuffle!	stdlib/Random/src/misc.jl	/^function shuffle!(r::AbstractRNG, a::AbstractArray)$/;"	f
shuffle!	stdlib/Random/src/misc.jl	/^shuffle!(a::AbstractArray) = shuffle!(default_rng(), a)$/;"	f
shws	stdlib/SHA/test/runtests.jl	/^shws = ["SHA1 hash state",$/;"	v
si_boundto	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Half si_boundto;		\/* Direct bindings, symbol bound to *\/$/;"	m	struct:__anonff7a58690708	typeref:typename:Elf32_Half
si_boundto	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Half si_boundto;		\/* Direct bindings, symbol bound to *\/$/;"	m	struct:__anonff7a58690808	typeref:typename:Elf64_Half
si_flags	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Half si_flags;			\/* Per symbol flags *\/$/;"	m	struct:__anonff7a58690708	typeref:typename:Elf32_Half
si_flags	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Half si_flags;			\/* Per symbol flags *\/$/;"	m	struct:__anonff7a58690808	typeref:typename:Elf64_Half
sift_down	src/partr.c	/^static inline void sift_down(taskheap_t *heap, int32_t idx)$/;"	f	typeref:typename:void	file:
sift_up	src/partr.c	/^static inline void sift_up(taskheap_t *heap, int32_t idx)$/;"	f	typeref:typename:void	file:
sig	src/julia.h	/^    jl_tupletype_t *sig; \/\/ the type signature for this entry$/;"	m	struct:_jl_typemap_entry_t	typeref:typename:jl_tupletype_t *
sig	src/julia.h	/^    jl_value_t *sig;$/;"	m	struct:_jl_method_t	typeref:typename:jl_value_t *
sig	stdlib/LibGit2/src/LibGit2.jl	/^sig = LibGit2.Signature("TEST", "TEST@TEST.COM", round(time(), 0), 0)$/;"	v
sig_exception	src/julia_threads.h	/^    struct _jl_value_t *sig_exception;$/;"	m	struct:_jl_tls_states_t	typeref:struct:_jl_value_t *
sig_match_by_type_leaf	src/typemap.c	/^static int sig_match_by_type_leaf(jl_value_t **types, jl_tupletype_t *sig, size_t n)$/;"	f	typeref:typename:int	file:
sig_match_by_type_simple	src/typemap.c	/^static int sig_match_by_type_simple(jl_value_t **types, size_t n, jl_tupletype_t *sig, size_t le/;"	f	typeref:typename:int	file:
sig_match_fast	src/gf.c	/^STATIC_INLINE int sig_match_fast(jl_value_t *arg1t, jl_value_t **args, jl_value_t **sig, size_t /;"	f	typeref:typename:STATIC_INLINE int
sig_match_leaf	src/typemap.c	/^static inline int sig_match_leaf(jl_value_t *arg1, jl_value_t **args, jl_value_t **sig, size_t n/;"	f	typeref:typename:int	file:
sig_match_simple	src/typemap.c	/^static inline int sig_match_simple(jl_value_t *arg1, jl_value_t **args, size_t n, jl_value_t **s/;"	f	typeref:typename:int	file:
sig_stack_size	src/signals-unix.c	/^#define sig_stack_size /;"	d	file:
sig_stack_size	src/signals-win.c	/^#define sig_stack_size /;"	d	file:
sigatomic_begin	base/c.jl	/^sigatomic_begin() = ccall(:jl_sigatomic_begin, Cvoid, ())$/;"	f
sigatomic_end	base/c.jl	/^sigatomic_end() = ccall(:jl_sigatomic_end, Cvoid, ())$/;"	f
sigdie_handler	src/signals-unix.c	/^static void sigdie_handler(int sig, siginfo_t *info, void *context)$/;"	f	typeref:typename:void	file:
sigint_handler	src/signals-unix.c	/^static void sigint_handler(int sig)$/;"	f	typeref:typename:void	file:
sigint_handler	src/signals-win.c	/^static BOOL WINAPI sigint_handler(DWORD wsig) \/\/This needs winapi types to guarantee __stdcall$/;"	f	typeref:typename:BOOL WINAPI	file:
sigma0_256	stdlib/SHA/src/base_functions.jl	/^sigma0_256(x) = (S32(7,  UInt32(x)) ⊻ S32(18, UInt32(x)) ⊻ R(3 ,   UInt32(x)))$/;"	f
sigma0_512	stdlib/SHA/src/base_functions.jl	/^sigma0_512(x) = (S64( 1, UInt64(x)) ⊻ S64( 8, UInt64(x)) ⊻ R( 7,   UInt64(x)))$/;"	f
sigma1_256	stdlib/SHA/src/base_functions.jl	/^sigma1_256(x) = (S32(17, UInt32(x)) ⊻ S32(19, UInt32(x)) ⊻ R(10,   UInt32(x)))$/;"	f
sigma1_512	stdlib/SHA/src/base_functions.jl	/^sigma1_512(x) = (S64(19, UInt64(x)) ⊻ S64(61, UInt64(x)) ⊻ R( 6,   UInt64(x)))$/;"	f
sign	base/bool.jl	/^sign(x::Bool) = x$/;"	f
sign	base/number.jl	/^sign(x::Number) = x == 0 ? x\/abs(oneunit(x)) : x\/abs(x)$/;"	f
sign	base/number.jl	/^sign(x::Real) = ifelse(x < 0, oftype(one(x),-1), ifelse(x > 0, one(x), typeof(one(x))(x)))$/;"	f
sign	base/number.jl	/^sign(x::Unsigned) = ifelse(x > 0, one(x), oftype(one(x),0))$/;"	f
sign	base/rational.jl	/^sign(x::Rational) = oftype(x, sign(x.num))$/;"	f
sign_bit	src/flisp/print.c	/^#define sign_bit(/;"	d	file:
sign_fast	base/fastmath.jl	/^    sign_fast(x::ComplexTypes) = x == 0 ? float(zero(x)) : x\/abs(x)$/;"	f
sign_mask	base/float.jl	/^sign_mask(::Type{Float16}) =        0x8000$/;"	f
sign_mask	base/float.jl	/^sign_mask(::Type{Float32}) =        0x8000_0000$/;"	f
sign_mask	base/float.jl	/^sign_mask(::Type{Float64}) =        0x8000_0000_0000_0000$/;"	f
signalPage	src/codegen.cpp	/^    Value *signalPage = NULL;$/;"	m	class:jl_codectx_t	typeref:typename:Value *	file:
signal_async	src/jl_uv.c	/^static uv_async_t signal_async;$/;"	v	typeref:typename:uv_async_t	file:
signal_caught_cond	src/signals-unix.c	/^static pthread_cond_t signal_caught_cond;$/;"	v	typeref:typename:pthread_cond_t	file:
signal_context	src/signals-unix.c	/^static unw_context_t *volatile signal_context;$/;"	v	typeref:typename:unw_context_t * volatile	file:
signal_listener	src/signals-unix.c	/^static void *signal_listener(void *arg)$/;"	f	typeref:typename:void *	file:
signal_request	src/julia_threads.h	/^    volatile sig_atomic_t signal_request;$/;"	m	struct:_jl_tls_states_t	typeref:typename:volatile sig_atomic_t
signal_stack	src/julia_threads.h	/^    void *signal_stack;$/;"	m	struct:_jl_tls_states_t	typeref:typename:void *
signals_thread	src/signals-unix.c	/^static pthread_t signals_thread;$/;"	v	typeref:typename:pthread_t	file:
signature	base/docs/Docs.jl	/^signature(@nospecialize other) = signature!([], other)$/;"	f
signature	base/docs/Docs.jl	/^signature(expr::Expr) = signature!([], expr)$/;"	f
signature!	base/docs/Docs.jl	/^function signature!(tv, expr::Expr)$/;"	f
signature!	base/docs/Docs.jl	/^signature!(tv, @nospecialize(other)) = :(Union{})$/;"	f
signature_type	base/reflection.jl	/^function signature_type(@nospecialize(f), @nospecialize(args))$/;"	f
signbit	base/bool.jl	/^signbit(x::Bool) = false$/;"	f
signbit	base/floatfuncs.jl	/^signbit(x::Float16) = signbit(bitcast(Int16, x))$/;"	f
signbit	base/floatfuncs.jl	/^signbit(x::Float32) = signbit(bitcast(Int32, x))$/;"	f
signbit	base/floatfuncs.jl	/^signbit(x::Float64) = signbit(bitcast(Int64, x))$/;"	f
signbit	base/gmp.jl	/^signbit(x::BigInt) = isneg(x)$/;"	f
signbit	base/int.jl	/^signbit(x::Integer) = x < 0$/;"	f
signbit	base/int.jl	/^signbit(x::Unsigned) = false$/;"	f
signbit	base/mpfr.jl	/^signbit(x::BigFloat) = ccall((:mpfr_signbit, :libmpfr), Int32, (Ref{BigFloat},), x) != 0$/;"	f
signbit	base/number.jl	/^signbit(x::Real) = x < 0$/;"	f
signbit	base/rational.jl	/^signbit(x::Rational) = signbit(x.num)$/;"	f
signbitbyte	src/runtime_intrinsics.c	/^static inline char signbitbyte(void *a, unsigned bytes) JL_NOTSAFEPOINT$/;"	f	typeref:typename:char	file:
signed	base/essentials.jl	/^signed(x::UInt) = reinterpret(Int, x)$/;"	f
signed	base/gmp.jl	/^signed(x::BigInt) = x$/;"	f
signed	base/int.jl	/^signed(x) = convert(Signed, x)$/;"	f
signed	base/int.jl	/^signed(x::Unsigned) = reinterpret(typeof(convert(Signed, zero(x))), x)$/;"	f
signedproductarchive	contrib/mac/frameworkapp/Makefile	/^signedproductarchive: $(PRODUCTARCHIVE)$/;"	t
signequal	base/operators.jl	/^signequal(x, y) = signbit(x)::Bool == signbit(y)::Bool$/;"	f
significand	base/math.jl	/^function significand(x::T) where T<:IEEEFloat$/;"	f
significand	base/mpfr.jl	/^function significand(x::BigFloat)$/;"	f
significand_bits	base/float.jl	/^    @eval significand_bits(::Type{$T}) = $(trailing_ones(significand_mask(T)))$/;"	f
significand_mask	base/float.jl	/^significand_mask(::Type{Float16}) = 0x03ff$/;"	f
significand_mask	base/float.jl	/^significand_mask(::Type{Float32}) = 0x007f_ffff$/;"	f
significand_mask	base/float.jl	/^significand_mask(::Type{Float64}) = 0x000f_ffff_ffff_ffff$/;"	f
signless	base/operators.jl	/^signless(x, y) = signbit(x)::Bool & !signbit(y)::Bool$/;"	f
silvermont	src/processor_x86.cpp	/^constexpr auto silvermont = bonnell | get_feature_masks(sse41, sse42, popcnt,$/;"	v	namespace:X86::Feature	typeref:typename:auto
simd	base/simdloop.jl	/^macro simd(forloop)$/;"	f
simd	base/simdloop.jl	/^macro simd(ivdep, forloop)$/;"	f
simd_cartesian_range!	test/simdloop.jl	/^function simd_cartesian_range!(indices, crng)$/;"	f
simd_index	base/multidimensional.jl	/^    @inline function simd_index(iter::CartesianIndices, Ilast::CartesianIndex, I1::Int)$/;"	f
simd_index	base/multidimensional.jl	/^    simd_index(iter::CartesianIndices{0}, ::CartesianIndex, I1::Int) = first(iter)$/;"	f
simd_index	base/simdloop.jl	/^@inline simd_index(r, j, i) = (@inbounds ret = r[i+firstindex(r)]; ret)$/;"	f
simd_inner_length	base/multidimensional.jl	/^    simd_inner_length(iter::CartesianIndices, I::CartesianIndex) = Base.length(iter.indices[1])$/;"	f
simd_inner_length	base/multidimensional.jl	/^    simd_inner_length(iter::CartesianIndices{0}, ::CartesianIndex) = 1$/;"	f
simd_inner_length	base/simdloop.jl	/^@inline simd_inner_length(r, j) = Base.length(r)$/;"	f
simd_loop_axpy!	test/simdloop.jl	/^function simd_loop_axpy!(a, X, Y)$/;"	f
simd_loop_example_from_manual	test/simdloop.jl	/^function simd_loop_example_from_manual(x, y, z)$/;"	f
simd_loop_with_multiple_reductions	test/simdloop.jl	/^function simd_loop_with_multiple_reductions(x, y, z)$/;"	f
simd_outer_range	base/multidimensional.jl	/^    function simd_outer_range(iter::CartesianIndices)$/;"	f
simd_outer_range	base/multidimensional.jl	/^    simd_outer_range(iter::CartesianIndices{0}) = iter$/;"	f
simd_outer_range	base/simdloop.jl	/^simd_outer_range(r) = 0:0$/;"	f
simd_sum_over_array	test/simdloop.jl	/^function simd_sum_over_array(a)$/;"	f
simdf	test/llvmpasses/loopinfo.jl	/^function simdf(X)$/;"	f
simdf2	test/llvmpasses/loopinfo.jl	/^function simdf2(X)$/;"	f
similar	base/abstractarray.jl	/^similar(::Type{T}, dims::DimOrInd...) where {T<:AbstractArray} = similar(T, dims)$/;"	f
similar	base/abstractarray.jl	/^similar(::Type{T}, dims::Dims) where {T<:AbstractArray} = T(undef, dims)$/;"	f
similar	base/abstractarray.jl	/^similar(::Type{T}, shape::Tuple{Union{Integer, OneTo}, Vararg{Union{Integer, OneTo}}}) where {T</;"	f
similar	base/abstractarray.jl	/^similar(a::AbstractArray, ::Type{T}) where {T}                     = similar(a, T, to_shape(axes/;"	f
similar	base/abstractarray.jl	/^similar(a::AbstractArray, ::Type{T}, dims::DimOrInd...) where {T}  = similar(a, T, to_shape(dims/;"	f
similar	base/abstractarray.jl	/^similar(a::AbstractArray, ::Type{T}, dims::Dims{N}) where {T,N}    = Array{T,N}(undef, dims)$/;"	f
similar	base/abstractarray.jl	/^similar(a::AbstractArray, ::Type{T}, dims::Tuple{Union{Integer, OneTo}, Vararg{Union{Integer, On/;"	f
similar	base/abstractarray.jl	/^similar(a::AbstractArray{T}) where {T}                             = similar(a, T)$/;"	f
similar	base/abstractarray.jl	/^similar(a::AbstractArray{T}, dims::DimOrInd...) where {T}          = similar(a, T, to_shape(dims/;"	f
similar	base/abstractarray.jl	/^similar(a::AbstractArray{T}, dims::Tuple) where {T}                = similar(a, T, to_shape(dims/;"	f
similar	base/array.jl	/^similar(a::Array, T::Type, dims::Dims{N}) where {N} = Array{T,N}(undef, dims)$/;"	f
similar	base/array.jl	/^similar(a::Array{T,1}) where {T}                    = Vector{T}(undef, size(a,1))$/;"	f
similar	base/array.jl	/^similar(a::Array{T,1}, S::Type) where {T}           = Vector{S}(undef, size(a,1))$/;"	f
similar	base/array.jl	/^similar(a::Array{T,2}) where {T}                    = Matrix{T}(undef, size(a,1), size(a,2))$/;"	f
similar	base/array.jl	/^similar(a::Array{T,2}, S::Type) where {T}           = Matrix{S}(undef, size(a,1), size(a,2))$/;"	f
similar	base/array.jl	/^similar(a::Array{T}, dims::Dims{N}) where {T,N}     = Array{T,N}(undef, dims)$/;"	f
similar	base/array.jl	/^similar(a::Array{T}, m::Int) where {T}              = Vector{T}(undef, m)$/;"	f
similar	base/bitarray.jl	/^similar(B::BitArray) = BitArray(undef, size(B))$/;"	f
similar	base/bitarray.jl	/^similar(B::BitArray, T::Type, dims::Dims) = Array{T}(undef, dims)$/;"	f
similar	base/bitarray.jl	/^similar(B::BitArray, T::Type{Bool}, dims::Dims) = BitArray(undef, dims)$/;"	f
similar	base/bitarray.jl	/^similar(B::BitArray, dims::Dims) = BitArray(undef, dims...)$/;"	f
similar	base/bitarray.jl	/^similar(B::BitArray, dims::Int...) = BitArray(undef, dims)$/;"	f
similar	base/reshapedarray.jl	/^similar(A::ReshapedArray, eltype::Type, dims::Dims) = similar(parent(A), eltype, dims)$/;"	f
similar	base/subarray.jl	/^similar(V::SubArray, T::Type, dims::Dims) = similar(V.parent, T, dims)$/;"	f
similar	stdlib/LinearAlgebra/src/adjtrans.jl	/^similar(A::AdjOrTrans) = similar(A.parent, eltype(A), axes(A))$/;"	f
similar	stdlib/LinearAlgebra/src/adjtrans.jl	/^similar(A::AdjOrTrans, ::Type{T}) where {T} = similar(A.parent, T, axes(A))$/;"	f
similar	stdlib/LinearAlgebra/src/adjtrans.jl	/^similar(A::AdjOrTrans, ::Type{T}, dims::Dims{N}) where {T,N} = similar(A.parent, T, dims)$/;"	f
similar	stdlib/LinearAlgebra/src/adjtrans.jl	/^similar(A::AdjOrTransAbsVec) = wrapperop(A)(similar(A.parent))$/;"	f
similar	stdlib/LinearAlgebra/src/adjtrans.jl	/^similar(A::AdjOrTransAbsVec, ::Type{T}) where {T} = wrapperop(A)(similar(A.parent, Base.promote_/;"	f
similar	stdlib/LinearAlgebra/src/bidiag.jl	/^similar(B::Bidiagonal, ::Type{T}) where {T} = Bidiagonal(similar(B.dv, T), similar(B.ev, T), B.u/;"	f
similar	stdlib/LinearAlgebra/src/diagonal.jl	/^similar(D::Diagonal, ::Type{T}) where {T} = Diagonal(similar(D.diag, T))$/;"	f
similar	stdlib/LinearAlgebra/src/hessenberg.jl	/^similar(H::UpperHessenberg, ::Type{T}) where {T} = UpperHessenberg(similar(H.data, T))$/;"	f
similar	stdlib/LinearAlgebra/src/hessenberg.jl	/^similar(H::UpperHessenberg, ::Type{T}, dims::Dims{N}) where {T,N} = similar(H.data, T, dims)$/;"	f
similar	stdlib/LinearAlgebra/src/symmetric.jl	/^function similar(A::Hermitian, ::Type{T}) where T$/;"	f
similar	stdlib/LinearAlgebra/src/symmetric.jl	/^similar(A::Symmetric, ::Type{T}) where {T} = Symmetric(similar(parent(A), T), ifelse(A.uplo == '/;"	f
similar	stdlib/LinearAlgebra/src/symmetric.jl	/^similar(A::Union{Symmetric,Hermitian}, ::Type{T}, dims::Dims{N}) where {T,N} = similar(parent(A)/;"	f
similar	stdlib/LinearAlgebra/src/triangular.jl	/^        similar(A::$t, ::Type{T}) where {T} = $t(similar(parent(A), T))$/;"	f
similar	stdlib/LinearAlgebra/src/triangular.jl	/^        similar(A::$t, ::Type{T}, dims::Dims{N}) where {T,N} = similar(parent(A), T, dims)$/;"	f
similar	stdlib/LinearAlgebra/src/tridiag.jl	/^similar(M::Tridiagonal, ::Type{T}) where {T} = Tridiagonal(similar(M.dl, T), similar(M.d, T), si/;"	f
similar	stdlib/LinearAlgebra/src/tridiag.jl	/^similar(S::SymTridiagonal, ::Type{T}) where {T} = SymTridiagonal(similar(S.dv, T), similar(S.ev,/;"	f
similar	stdlib/SharedArrays/src/SharedArrays.jl	/^similar(S::SharedArray) = similar(S.s, eltype(S), size(S))$/;"	f
similar	stdlib/SharedArrays/src/SharedArrays.jl	/^similar(S::SharedArray, T::Type) = similar(S.s, T, size(S))$/;"	f
similar	stdlib/SharedArrays/src/SharedArrays.jl	/^similar(S::SharedArray, T::Type, dims::Dims) = similar(S.s, T, dims)$/;"	f
similar	stdlib/SharedArrays/src/SharedArrays.jl	/^similar(S::SharedArray, dims::Dims) = similar(S.s, eltype(S), dims)$/;"	f
similar	stdlib/SparseArrays/src/SparseArrays.jl	/^similar(B::Bidiagonal, ::Type{T}, dims::Union{Dims{1},Dims{2}}) where {T} = spzeros(T, dims...)$/;"	f
similar	stdlib/SparseArrays/src/SparseArrays.jl	/^similar(D::Diagonal, ::Type{T}, dims::Union{Dims{1},Dims{2}}) where {T} = spzeros(T, dims...)$/;"	f
similar	stdlib/SparseArrays/src/SparseArrays.jl	/^similar(M::Tridiagonal, ::Type{T}, dims::Union{Dims{1},Dims{2}}) where {T} = spzeros(T, dims...)$/;"	f
similar	stdlib/SparseArrays/src/SparseArrays.jl	/^similar(S::SymTridiagonal, ::Type{T}, dims::Union{Dims{1},Dims{2}}) where {T} = spzeros(T, dims./;"	f
similar	stdlib/SparseArrays/src/sparsematrix.jl	/^similar(S::AbstractSparseMatrixCSC, ::Type{TvNew}, ::Type{TiNew}, dims::Union{Dims{1},Dims{2}}) /;"	f
similar	stdlib/SparseArrays/src/sparsematrix.jl	/^similar(S::AbstractSparseMatrixCSC, ::Type{TvNew}, ::Type{TiNew}, m::Integer) where {TvNew,TiNew/;"	f
similar	stdlib/SparseArrays/src/sparsematrix.jl	/^similar(S::AbstractSparseMatrixCSC, ::Type{TvNew}, ::Type{TiNew}, m::Integer, n::Integer) where /;"	f
similar	stdlib/SparseArrays/src/sparsematrix.jl	/^similar(S::AbstractSparseMatrixCSC{<:Any,Ti}, ::Type{TvNew}) where {Ti,TvNew} = _sparsesimilar(S/;"	f
similar	stdlib/SparseArrays/src/sparsematrix.jl	/^similar(S::AbstractSparseMatrixCSC{<:Any,Ti}, ::Type{TvNew}, dims::Union{Dims{1},Dims{2}}) where/;"	f
similar	stdlib/SparseArrays/src/sparsevector.jl	/^similar(S::SparseVector, ::Type{TvNew}, ::Type{TiNew}, dims::Union{Dims{1},Dims{2}}) where {TvNe/;"	f
similar	stdlib/SparseArrays/src/sparsevector.jl	/^similar(S::SparseVector, ::Type{TvNew}, ::Type{TiNew}, m::Integer) where {TvNew,TiNew} =$/;"	f
similar	stdlib/SparseArrays/src/sparsevector.jl	/^similar(S::SparseVector, ::Type{TvNew}, ::Type{TiNew}, m::Integer, n::Integer) where {TvNew,TiNe/;"	f
similar	stdlib/SparseArrays/src/sparsevector.jl	/^similar(S::SparseVector{<:Any,Ti}, ::Type{TvNew}) where {Ti,TvNew} =$/;"	f
similar	stdlib/SparseArrays/src/sparsevector.jl	/^similar(S::SparseVector{<:Any,Ti}, ::Type{TvNew}, dims::Union{Dims{1},Dims{2}}) where {Ti,TvNew}/;"	f
simple	test/llvmpasses/aliasscopes.jl	/^function simple(A, B)$/;"	f
simple$(EXEEXT)	deps/srccache/patchelf-0.9/tests/Makefile.in	/^simple$(EXEEXT): $(simple_OBJECTS) $(simple_DEPENDENCIES) $(EXTRA_simple_DEPENDENCIES) $/;"	t
simple-atom?	src/ast.scm	/^(define (simple-atom? x)$/;"	f
simple-simple.o	deps/srccache/patchelf-0.9/tests/Makefile.in	/^simple-simple.o: simple.c$/;"	t
simple-simple.obj	deps/srccache/patchelf-0.9/tests/Makefile.in	/^simple-simple.obj: simple.c$/;"	t
simple-string-literal?	src/julia-parser.scm	/^(define (simple-string-literal? e) (string? e))$/;"	f
simple_CFLAGS	deps/srccache/patchelf-0.9/tests/Makefile.am	/^simple_CFLAGS =$/;"	m
simple_CFLAGS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^simple_CFLAGS = $/;"	m
simple_LDADD	deps/srccache/patchelf-0.9/tests/Makefile.in	/^simple_LDADD = $(LDADD)$/;"	m
simple_LINK	deps/srccache/patchelf-0.9/tests/Makefile.in	/^simple_LINK = $(CCLD) $(simple_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \\$/;"	m
simple_OBJECTS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^simple_OBJECTS = $(am_simple_OBJECTS)$/;"	m
simple_SOURCES	deps/srccache/patchelf-0.9/tests/Makefile.am	/^simple_SOURCES = simple.c$/;"	m
simple_SOURCES	deps/srccache/patchelf-0.9/tests/Makefile.in	/^simple_SOURCES = simple.c$/;"	m
simple_dce!	base/compiler/ssair/ir.jl	/^function simple_dce!(compact::IncrementalCompact)$/;"	f
simple_join	src/subtype.c	/^static jl_value_t *simple_join(jl_value_t *a, jl_value_t *b)$/;"	f	typeref:typename:jl_value_t *	file:
simple_meet	src/subtype.c	/^static jl_value_t *simple_meet(jl_value_t *a, jl_value_t *b)$/;"	f	typeref:typename:jl_value_t *	file:
simple_missing_root	test/clangsa/MissingRoots.c	/^jl_value_t *simple_missing_root() {$/;"	f	typeref:typename:jl_value_t *
simple_noinline	test/llvmpasses/noinline.jl	/^@noinline function simple_noinline(A, B)$/;"	f
simple_svec	test/clangsa/MissingRoots.c	/^void simple_svec() {$/;"	f	typeref:typename:void
simple_use_analysis	src/codegen.cpp	/^static void simple_use_analysis(jl_codectx_t &ctx, jl_value_t *expr)$/;"	f	typeref:typename:void	file:
simple_walk	base/compiler/ssair/passes.jl	/^function simple_walk(compact::IncrementalCompact, @nospecialize(defssa#=::AnySSAValue=#), pi_cal/;"	f
simple_walk_constraint	base/compiler/ssair/passes.jl	/^function simple_walk_constraint(compact::IncrementalCompact, @nospecialize(defidx), @nospecializ/;"	f
simplesig	src/julia.h	/^    jl_tupletype_t *simplesig; \/\/ a simple signature for fast rejection$/;"	m	struct:_jl_typemap_entry_t	typeref:typename:jl_tupletype_t *
simulateInput	stdlib/REPL/test/TerminalMenus/runtests.jl	/^function simulateInput(expectedResult, menu::TerminalMenus.AbstractMenu, keys...)$/;"	f
sin	base/complex.jl	/^function sin(z::Complex{T}) where T$/;"	f
sin	base/special/trig.jl	/^function sin(x::T) where T<:Union{Float32, Float64}$/;"	f
sin	base/special/trig.jl	/^sin(x::Real) = sin(float(x))$/;"	f
sin	stdlib/LinearAlgebra/src/dense.jl	/^function sin(A::AbstractMatrix{<:Complex})$/;"	f
sin	stdlib/LinearAlgebra/src/dense.jl	/^function sin(A::AbstractMatrix{<:Real})$/;"	f
sin_domain_error	base/special/trig.jl	/^@noinline sin_domain_error(x) = throw(DomainError(x, "sin(x) is only defined for finite x."))$/;"	f
sin_fast	base/fastmath.jl	/^    sin_fast(x::ComplexTypes) = -im*sinh(im*x)$/;"	f
sin_kernel	base/special/trig.jl	/^@inline function sin_kernel(y::DoubleFloat32)$/;"	f
sin_kernel	base/special/trig.jl	/^@inline function sin_kernel(y::DoubleFloat64)$/;"	f
sin_kernel	base/special/trig.jl	/^@inline function sin_kernel(y::Float64)$/;"	f
sin_kernel	base/special/trig.jl	/^@inline sin_kernel(x::Float32) = sin_kernel(DoubleFloat32(x))$/;"	f
sin_kernel	base/special/trig.jl	/^sin_kernel(x::Real) = sin(x)$/;"	f
sinc	base/special/trig.jl	/^sinc(x::Complex) = sinc(float(x))$/;"	f
sinc	base/special/trig.jl	/^sinc(x::Complex{<:AbstractFloat}) = x==0 ? one(x) : oftype(x, sinpi(x)\/(pi*x))$/;"	f
sinc	base/special/trig.jl	/^sinc(x::Integer) = x==0 ? one(x) : zero(x)$/;"	f
sinc	base/special/trig.jl	/^sinc(x::Number) = x==0 ? one(x)  : oftype(x,sinpi(x)\/(pi*x))$/;"	f
sinc	base/special/trig.jl	/^sinc(x::Real) = x==0 ? one(x) : isinf(x) ? zero(x) : sinpi(x)\/(pi*x)$/;"	f
since_sweep	src/gc.h	/^    uint64_t    since_sweep;$/;"	m	struct:__anoncf30557c0308	typeref:typename:uint64_t
sincos	base/math.jl	/^sincos(a::Float16) = Float16.(sincos(Float32(a)))$/;"	f
sincos	base/mpfr.jl	/^sincos(v::BigFloat) = sincos_fast(v)$/;"	f
sincos	base/special/trig.jl	/^function sincos(x::T) where T<:Union{Float32, Float64}$/;"	f
sincos	base/special/trig.jl	/^sincos(x) = _sincos(float(x))$/;"	f
sincos	stdlib/LinearAlgebra/src/dense.jl	/^function sincos(A::AbstractMatrix{<:Complex})$/;"	f
sincos	stdlib/LinearAlgebra/src/dense.jl	/^function sincos(A::AbstractMatrix{<:Real})$/;"	f
sincos	stdlib/LinearAlgebra/src/symmetric.jl	/^function sincos(A::HermOrSym{<:Real})$/;"	f
sincos	stdlib/LinearAlgebra/src/symmetric.jl	/^function sincos(A::Hermitian{<:Complex})$/;"	f
sincos_domain_error	base/special/trig.jl	/^@noinline sincos_domain_error(x) = throw(DomainError(x, "sincos(x) is only defined for finite x./;"	f
sincos_fast	base/fastmath.jl	/^@inline function sincos_fast(v::Float16)$/;"	f
sincos_fast	base/fastmath.jl	/^sincos_fast(v) = (sin_fast(v), cos_fast(v))$/;"	f
sincos_fast	base/fastmath.jl	/^sincos_fast(v::AbstractFloat) = (sin_fast(v), cos_fast(v))$/;"	f
sincos_fast	base/fastmath.jl	/^sincos_fast(v::FloatTypes) = sincos(v)$/;"	f
sincos_fast	base/fastmath.jl	/^sincos_fast(v::Real) = sincos_fast(float(v)::AbstractFloat)$/;"	f
sincos_fast	base/mpfr.jl	/^function sincos_fast(v::BigFloat)$/;"	f
sincos_kernel	base/special/trig.jl	/^@inline sincos_kernel(y::Union{Float32, Float64, DoubleFloat32, DoubleFloat64}) = (sin_kernel(y)/;"	f
sincos_kernel	base/special/trig.jl	/^sincos_kernel(x::Real) = sincos(x)$/;"	f
sincosd	base/special/trig.jl	/^function sincosd(x::Real)$/;"	f
sincosd	base/special/trig.jl	/^sincosd(::Missing) = (missing, missing)$/;"	f
sind	base/special/trig.jl	/^function sind(x::Real)$/;"	f
single_stride_dim	test/subarray.jl	/^function single_stride_dim(A::Array)$/;"	f
single_stride_dim	test/subarray.jl	/^single_stride_dim(@nospecialize(A)) = single_stride_dim(copy_to_array(A))$/;"	f
singleton_type	base/compiler/ssair/inlining.jl	/^function singleton_type(@nospecialize(ft))$/;"	f
sinh	base/complex.jl	/^function sinh(z::Complex)$/;"	f
sinh	base/special/hyperbolic.jl	/^function sinh(x::T) where T <: Union{Float32, Float64}$/;"	f
sinh	base/special/hyperbolic.jl	/^sinh(x::Real) = sinh(float(x))$/;"	f
sinh	stdlib/LinearAlgebra/src/dense.jl	/^function sinh(A::AbstractMatrix)$/;"	f
sinh_fast	base/fastmath.jl	/^    sinh_fast(x::T) where {T<:ComplexTypes} = convert(T,1)\/2*(exp(x) - exp(-x))$/;"	f
sink-assignment	src/julia-syntax.scm	/^(define (sink-assignment lhs rhs)$/;"	f
sinpi	base/special/trig.jl	/^function sinpi(x::T) where T<:AbstractFloat$/;"	f
sinpi	base/special/trig.jl	/^function sinpi(x::T) where T<:Union{Integer,Rational}$/;"	f
sinpi	base/special/trig.jl	/^function sinpi(z::Complex{T}) where T$/;"	f
sinpi	base/special/trig.jl	/^sinpi(x::Integer) = x >= 0 ? zero(float(x)) : -zero(float(x))$/;"	f
sinpi	base/special/trig.jl	/^sinpi(x::Real) = sinpi(float(x))$/;"	f
size	base/abstractarray.jl	/^size(t::AbstractArray{T,N}, d) where {T,N} = d::Integer <= N ? size(t)[d] : 1$/;"	f
size	base/array.jl	/^size(a::Array, d::Integer) = arraysize(a, convert(Int, d))$/;"	f
size	base/array.jl	/^size(a::Array{<:Any,N}) where {N} = (@_inline_meta; ntuple(M -> size(a, M), Val(N)))$/;"	f
size	base/array.jl	/^size(a::Matrix) = (arraysize(a,1), arraysize(a,2))$/;"	f
size	base/array.jl	/^size(a::Vector) = (arraysize(a,1),)$/;"	f
size	base/asyncmap.jl	/^size(itr::AsyncGenerator) = size(itr.collector.enumerator)$/;"	f
size	base/bitarray.jl	/^@inline function size(B::BitVector, d::Integer)$/;"	f
size	base/bitarray.jl	/^size(B::BitArray) = B.dims$/;"	f
size	base/bitarray.jl	/^size(B::BitVector) = (B.len,)$/;"	f
size	base/char.jl	/^size(c::AbstractChar) = ()$/;"	f
size	base/char.jl	/^size(c::AbstractChar, d::Integer) = d < 1 ? throw(BoundsError()) : 1$/;"	f
size	base/generator.jl	/^size(g::Generator) = size(g.iter)$/;"	f
size	base/indices.jl	/^size(S::IdentityUnitRange) = (length(S.indices),)$/;"	f
size	base/indices.jl	/^size(S::Slice) = (length(S.indices),)$/;"	f
size	base/indices.jl	/^size(iter::LinearIndices) = map(unsafe_length, iter.indices)$/;"	f
size	base/iterators.jl	/^size(P::ProductIterator) = _prod_size(P.iterators)$/;"	f
size	base/iterators.jl	/^size(e::Enumerate) = size(e.itr)$/;"	f
size	base/iterators.jl	/^size(r::Reverse) = size(r.itr)$/;"	f
size	base/iterators.jl	/^size(v::Pairs) = size(v.itr)$/;"	f
size	base/iterators.jl	/^size(z::Zip) = _promote_shape(map(size, z.is)...)$/;"	f
size	base/multidimensional.jl	/^    size(iter::CartesianIndices) = map(dimlength, first(iter).I, last(iter).I)$/;"	f
size	base/multidimensional.jl	/^size(L::LogicalIndex) = (L.sum,)$/;"	f
size	base/number.jl	/^size(x::Number) = ()$/;"	f
size	base/number.jl	/^size(x::Number, d::Integer) = d < 1 ? throw(BoundsError()) : 1$/;"	f
size	base/range.jl	/^size(r::AbstractRange) = (length(r),)$/;"	f
size	base/refpointer.jl	/^size(x::Ref) = ()$/;"	f
size	base/reinterpretarray.jl	/^function size(a::ReinterpretArray{T,N,S} where {N}) where {T,S}$/;"	f
size	base/reinterpretarray.jl	/^size(a::ReinterpretArray{T,0}) where {T} = ()$/;"	f
size	base/reshapedarray.jl	/^size(A::ReshapedArray) = A.dims$/;"	f
size	base/strings/basic.jl	/^size(s::CodeUnits) = (length(s),)$/;"	f
size	base/subarray.jl	/^size(V::SubArray) = (@_inline_meta; map(n->Int(unsafe_length(n)), axes(V)))$/;"	f
size	base/tuple.jl	/^size(@nospecialize(t::Tuple), d::Integer) = (d == 1) ? length(t) : throw(ArgumentError("invalid /;"	f
size	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "size" : "128x128",$/;"	s	object:images.4
size	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "size" : "128x128",$/;"	s	object:images.5
size	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "size" : "16x16",$/;"	s	object:images.0
size	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "size" : "16x16",$/;"	s	object:images.1
size	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "size" : "256x256",$/;"	s	object:images.6
size	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "size" : "256x256",$/;"	s	object:images.7
size	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "size" : "32x32",$/;"	s	object:images.2
size	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "size" : "32x32",$/;"	s	object:images.3
size	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "size" : "512x512",$/;"	s	object:images.8
size	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^      "size" : "512x512",$/;"	s	object:images.9
size	deps/srccache/patchelf-0.9/src/elf.h	/^  unsigned char size;		\/* Size of descriptor, including header.  *\/$/;"	m	struct:__anonff7a58692708	typeref:typename:unsigned char
size	src/cgmemmgr.cpp	/^        size_t size;$/;"	m	struct:__anon06c686bc0111::RTDyldMemoryManagerJL::EHFrame	typeref:typename:size_t	file:
size	src/flisp/flisp.h	/^    size_t size;$/;"	m	struct:_fltype_t	typeref:typename:size_t
size	src/julia.h	/^    int32_t size; \/\/ TODO: move to _jl_datatype_layout_t$/;"	m	struct:_jl_datatype_t	typeref:typename:int32_t
size	src/julia.h	/^    uint16_t size:15;$/;"	m	struct:__anon055fe4270d08	typeref:typename:uint16_t:15
size	src/julia.h	/^    uint32_t size:31;$/;"	m	struct:__anon055fe4270e08	typeref:typename:uint32_t:31
size	src/julia.h	/^    uint8_t size:7;$/;"	m	struct:__anon055fe4270c08	typeref:typename:uint8_t:7
size	src/llvm-alloc-opt.cpp	/^        uint32_t size = 0;$/;"	m	struct:__anon0a1571000111::Optimizer::MemOp	typeref:typename:uint32_t	file:
size	src/llvm-alloc-opt.cpp	/^        uint32_t size;$/;"	m	struct:__anon0a1571000111::Optimizer::Field	typeref:typename:uint32_t	file:
size	src/llvm-alloc-opt.cpp	/^        uint32_t size;$/;"	m	struct:__anon0a1571000111::Optimizer::splitOnStack::SplitSlot	typeref:typename:uint32_t	file:
size	src/support/htable.h	/^    size_t size;$/;"	m	struct:__anon806c816e0108	typeref:typename:size_t
size	stdlib/LinearAlgebra/src/adjtrans.jl	/^size(A::AdjOrTransAbsMat) = reverse(size(A.parent))$/;"	f
size	stdlib/LinearAlgebra/src/adjtrans.jl	/^size(v::AdjOrTransAbsVec) = (1, length(v.parent))$/;"	f
size	stdlib/LinearAlgebra/src/bidiag.jl	/^function size(M::Bidiagonal, d::Integer)$/;"	f
size	stdlib/LinearAlgebra/src/bidiag.jl	/^size(M::Bidiagonal) = (length(M.dv), length(M.dv))$/;"	f
size	stdlib/LinearAlgebra/src/bunchkaufman.jl	/^size(B::BunchKaufman) = size(getfield(B, :LD))$/;"	f
size	stdlib/LinearAlgebra/src/bunchkaufman.jl	/^size(B::BunchKaufman, d::Integer) = size(getfield(B, :LD), d)$/;"	f
size	stdlib/LinearAlgebra/src/cholesky.jl	/^size(C::Union{Cholesky, CholeskyPivoted}) = size(C.factors)$/;"	f
size	stdlib/LinearAlgebra/src/cholesky.jl	/^size(C::Union{Cholesky, CholeskyPivoted}, d::Integer) = size(C.factors, d)$/;"	f
size	stdlib/LinearAlgebra/src/diagonal.jl	/^function size(D::Diagonal,d::Integer)$/;"	f
size	stdlib/LinearAlgebra/src/diagonal.jl	/^size(D::Diagonal) = (length(D.diag),length(D.diag))$/;"	f
size	stdlib/LinearAlgebra/src/factorization.jl	/^size(F::Adjoint{<:Any,<:Factorization}) = reverse(size(parent(F)))$/;"	f
size	stdlib/LinearAlgebra/src/factorization.jl	/^size(F::Transpose{<:Any,<:Factorization}) = reverse(size(parent(F)))$/;"	f
size	stdlib/LinearAlgebra/src/hessenberg.jl	/^size(F::Hessenberg) = size(F.H)$/;"	f
size	stdlib/LinearAlgebra/src/hessenberg.jl	/^size(F::Hessenberg, d) = size(F.H, d)$/;"	f
size	stdlib/LinearAlgebra/src/hessenberg.jl	/^size(H::UpperHessenberg) = size(H.data)$/;"	f
size	stdlib/LinearAlgebra/src/hessenberg.jl	/^size(H::UpperHessenberg, d) = size(H.data, d)$/;"	f
size	stdlib/LinearAlgebra/src/ldlt.jl	/^size(S::LDLt) = size(S.data)$/;"	f
size	stdlib/LinearAlgebra/src/ldlt.jl	/^size(S::LDLt, i::Integer) = size(S.data, i)$/;"	f
size	stdlib/LinearAlgebra/src/lq.jl	/^function size(Q::LQPackedQ)$/;"	f
size	stdlib/LinearAlgebra/src/lq.jl	/^function size(Q::LQPackedQ, dim::Integer)$/;"	f
size	stdlib/LinearAlgebra/src/lq.jl	/^size(F::LQ)               = size(getfield(F, :factors))$/;"	f
size	stdlib/LinearAlgebra/src/lq.jl	/^size(F::LQ, dim::Integer) = size(getfield(F, :factors), dim)$/;"	f
size	stdlib/LinearAlgebra/src/lu.jl	/^size(A::LU)    = size(getfield(A, :factors))$/;"	f
size	stdlib/LinearAlgebra/src/lu.jl	/^size(A::LU, i) = size(getfield(A, :factors), i)$/;"	f
size	stdlib/LinearAlgebra/src/qr.jl	/^size(F::Union{QR,QRCompactWY,QRPivoted}) = size(getfield(F, :factors))$/;"	f
size	stdlib/LinearAlgebra/src/qr.jl	/^size(F::Union{QR,QRCompactWY,QRPivoted}, dim::Integer) = size(getfield(F, :factors), dim)$/;"	f
size	stdlib/LinearAlgebra/src/qr.jl	/^size(Q::AbstractQ) = size(Q, 1), size(Q, 2)$/;"	f
size	stdlib/LinearAlgebra/src/qr.jl	/^size(Q::AbstractQ, dim::Integer) = size(getfield(Q, :factors), dim == 2 ? 1 : dim)$/;"	f
size	stdlib/LinearAlgebra/src/svd.jl	/^size(A::SVD) = (size(A, 1), size(A, 2))$/;"	f
size	stdlib/LinearAlgebra/src/svd.jl	/^size(A::SVD, dim::Integer) = dim == 1 ? size(A.U, dim) : size(A.Vt, dim)$/;"	f
size	stdlib/LinearAlgebra/src/symmetric.jl	/^size(A::HermOrSym) = size(A.data)$/;"	f
size	stdlib/LinearAlgebra/src/symmetric.jl	/^size(A::HermOrSym, d) = size(A.data, d)$/;"	f
size	stdlib/LinearAlgebra/src/triangular.jl	/^        size(A::$t) = size(A.data)$/;"	f
size	stdlib/LinearAlgebra/src/triangular.jl	/^        size(A::$t, d) = size(A.data, d)$/;"	f
size	stdlib/LinearAlgebra/src/tridiag.jl	/^function size(A::SymTridiagonal, d::Integer)$/;"	f
size	stdlib/LinearAlgebra/src/tridiag.jl	/^function size(M::Tridiagonal, d::Integer)$/;"	f
size	stdlib/LinearAlgebra/src/tridiag.jl	/^size(A::SymTridiagonal) = (length(A.dv), length(A.dv))$/;"	f
size	stdlib/LinearAlgebra/src/tridiag.jl	/^size(M::Tridiagonal) = (length(M.d), length(M.d))$/;"	f
size	stdlib/SharedArrays/src/SharedArrays.jl	/^size(S::SharedArray) = S.dims$/;"	f
size	stdlib/SparseArrays/src/sparsematrix.jl	/^size(S::SparseMatrixCSC) = (getfield(S, :m), getfield(S, :n))$/;"	f
size	stdlib/SparseArrays/src/sparsevector.jl	/^size(x::SparseVector)     = (getfield(x, :n),)$/;"	f
size	stdlib/SuiteSparse/src/cholmod.jl	/^function size(A::Union{Dense,Sparse})$/;"	f
size	stdlib/SuiteSparse/src/cholmod.jl	/^function size(F::Factor, i::Integer)$/;"	f
size	stdlib/SuiteSparse/src/cholmod.jl	/^size(F::Factor) = (size(F, 1), size(F, 2))$/;"	f
size	stdlib/SuiteSparse/src/cholmod.jl	/^size(FC::FactorComponent) = size(FC.F)$/;"	f
size	stdlib/SuiteSparse/src/cholmod.jl	/^size(FC::FactorComponent, i::Integer) = size(FC.F, i)$/;"	f
size	stdlib/SuiteSparse/src/umfpack.jl	/^function size(F::UmfpackLU, dim::Integer)$/;"	f
size	stdlib/SuiteSparse/src/umfpack.jl	/^size(F::UmfpackLU) = (F.m, F.n)$/;"	f
size	test/gcext/LocalTest.jl	/^function size(stack :: Stack)$/;"	f
size	test/gcext/gcext.c	/^    size_t size;$/;"	m	struct:__anonf90ca10a0108	typeref:typename:size_t	file:
size	test/gcext/gcext.c	/^    size_t size;$/;"	m	struct:treap_t	typeref:typename:size_t	file:
size_isgreater	src/dump.c	/^static int size_isgreater(const void *a, const void *b)$/;"	f	typeref:typename:int	file:
size_to_strides	base/abstractarray.jl	/^@inline size_to_strides(s, d, sz...) = (s, size_to_strides(s * d, sz...)...)$/;"	f
size_to_strides	base/abstractarray.jl	/^size_to_strides(s) = ()$/;"	f
size_to_strides	base/abstractarray.jl	/^size_to_strides(s, d) = (s,)$/;"	f
sizecandidates	stdlib/LinearAlgebra/test/addmul.jl	/^sizecandidates = 1:4$/;"	v
sized-uint-literal	src/julia-parser.scm	/^(define (sized-uint-literal n s b)$/;"	f
sized-uint-oct-literal	src/julia-parser.scm	/^(define (sized-uint-oct-literal n s)$/;"	f
sizehint!	base/abstractdict.jl	/^function sizehint!(d::IdDict, newsz)$/;"	f
sizehint!	base/abstractdict.jl	/^sizehint!(s::IdSet, newsz) = (sizehint!(s.dict, newsz); s)$/;"	f
sizehint!	base/abstractset.jl	/^sizehint!(s::AbstractSet, n) = nothing$/;"	f
sizehint!	base/array.jl	/^function sizehint! end$/;"	f
sizehint!	base/array.jl	/^function sizehint!(a::Vector, sz::Integer)$/;"	f
sizehint!	base/bitarray.jl	/^function sizehint!(B::BitVector, sz::Integer)$/;"	f
sizehint!	base/bitset.jl	/^sizehint!(s::BitSet, n::Integer) = (sizehint!(s.bits, (n+63) >> 6); s)$/;"	f
sizehint!	base/dict.jl	/^function sizehint!(d::Dict{T}, newsz) where T$/;"	f
sizehint!	base/set.jl	/^sizehint!(s::Set, newsz) = (sizehint!(s.dict, newsz); s)$/;"	f
sizeinbase	base/gmp.jl	/^sizeinbase(a::BigInt, b) = Int(ccall((:__gmpz_sizeinbase, :libgmp), Csize_t, (mpz_t, Cint), a, b/;"	f
sizeof	base/array.jl	/^sizeof(a::Array) = Core.sizeof(a)$/;"	f
sizeof	base/bitarray.jl	/^sizeof(B::BitArray) = sizeof(B.chunks)$/;"	f
sizeof	base/essentials.jl	/^sizeof(x) = Core.sizeof(x)$/;"	f
sizeof	base/strings/basic.jl	/^sizeof(s::AbstractString) = ncodeunits(s) * sizeof(codeunit(s))$/;"	f
sizeof	base/strings/basic.jl	/^sizeof(s::CodeUnits{T}) where {T} = ncodeunits(s.s) * sizeof(T)$/;"	f
sizeof	base/strings/string.jl	/^sizeof(s::String) = Core.sizeof(s)$/;"	f
sizeof	base/subarray.jl	/^sizeof(V::SubArray) = length(V) * sizeof(eltype(V))$/;"	f
sizeof_constvec	test/compiler/inference.jl	/^@eval function sizeof_constvec()$/;"	f
sizeof_ios_t	base/iostream.jl	/^const sizeof_ios_t = Int(ccall(:jl_sizeof_ios_t, Cint, ()))$/;"	v
sizeof_lookup	test/core.jl	/^    sizeof_lookup() = sizeof(npy_typestrs["i8"])$/;"	f
sizeof_nothrow	base/compiler/tfuncs.jl	/^function sizeof_nothrow(@nospecialize(x))$/;"	f
sizeof_tfunc	base/compiler/tfuncs.jl	/^function sizeof_tfunc(@nospecialize(x),)$/;"	f
sizeof_typeref	test/compiler/inference.jl	/^function sizeof_typeref(typeref)$/;"	f
sizesym	src/flisp/flisp.h	/^    value_t ptrdiffsym, sizesym, bytesym, wcharsym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
sizetype	src/flisp/flisp.h	/^    fltype_t *ptrdifftype, *sizetype;$/;"	m	struct:_fl_context_t	typeref:typename:fltype_t **
skeys	stdlib/REPL/src/emoji_symbols.jl	/^skeys = sort(collect(keys(result)))$/;"	v
skip	base/filesystem.jl	/^function skip(f::File, n::Integer)$/;"	f
skip	base/iobuffer.jl	/^function skip(io::GenericIOBuffer, n::Integer)$/;"	f
skip	base/iostream.jl	/^function skip(s::IOStream, delta::Integer)$/;"	f
skip	base/secretbuffer.jl	/^skip(io::SecretBuffer, n::Integer) = seek(io, position(io) + n)$/;"	f
skip-comment	src/julia-parser.scm	/^(define (skip-comment port)$/;"	f
skip-to-eol	src/julia-parser.scm	/^(define (skip-to-eol port)$/;"	f
skip-ws-and-comments	src/julia-parser.scm	/^(define (skip-ws-and-comments port)$/;"	f
skip_deleted	base/dict.jl	/^function skip_deleted(h::Dict, i)$/;"	f
skip_deleted_floor!	base/dict.jl	/^function skip_deleted_floor!(h::Dict)$/;"	f
skipblank	stdlib/Markdown/src/parse/util.jl	/^function skipblank(io::IO)$/;"	f
skipchars	base/io.jl	/^function skipchars(predicate, io::IO; linecomment=nothing)$/;"	f
skipfiles	contrib/add_license_to_files.jl	/^const skipfiles = [$/;"	v
skipmissing	base/missing.jl	/^skipmissing(itr) = SkipMissing(itr)$/;"	f
skipped_pages	src/gc-debug.c	/^static int64_t skipped_pages = 0;$/;"	v	typeref:typename:int64_t	file:
skipwhitespace	stdlib/Markdown/src/parse/util.jl	/^function skipwhitespace(io::IO; newlines = true)$/;"	f
skx	src/processor_x86.cpp	/^constexpr auto skx = skylake | get_feature_masks(avx512f, avx512cd, avx512dq, avx512bw, avx512vl/;"	v	namespace:X86::Feature	typeref:typename:auto
skylake	src/processor_x86.cpp	/^constexpr auto skylake = broadwell | get_feature_masks(mpx, rtm, xsavec, xsaves,$/;"	v	namespace:X86::Feature	typeref:typename:auto
sleep	base/asyncevent.jl	/^function sleep(sec::Real)$/;"	f
sleep	src/julia_internal.h	/^#define sleep(/;"	d
sleep	stdlib/Dates/src/types.jl	/^sleep(time::Period) = sleep(toms(time) \/ 1000)$/;"	f
sleep_check_after_threshold	src/partr.c	/^static int sleep_check_after_threshold(uint64_t *start_cycles)$/;"	f	typeref:typename:int	file:
sleep_check_now	src/partr.c	/^static int sleep_check_now(int16_t tid)$/;"	f	typeref:typename:int	file:
sleep_check_state	src/julia_threads.h	/^    volatile int8_t sleep_check_state;$/;"	m	struct:_jl_tls_states_t	typeref:typename:volatile int8_t
sleep_check_state	src/partr.c	/^static int16_t sleep_check_state; \/\/ status of the multi-queue. possible values:$/;"	v	typeref:typename:int16_t	file:
sleep_lock	src/julia_threads.h	/^    uv_mutex_t sleep_lock;$/;"	m	struct:_jl_tls_states_t	typeref:typename:uv_mutex_t
sleep_ms	src/support/timefuncs.c	/^void sleep_ms(int ms)$/;"	f	typeref:typename:void
sleepcmd	test/spawn.jl	/^sleepcmd = `sleep`$/;"	v
sleeping	src/partr.c	/^static const int16_t sleeping = 1;$/;"	v	typeref:typename:const int16_t	file:
slen_u8str	test/strings/types.jl	/^slen_u8str = length(u8str)$/;"	v
slen_u8str2	test/strings/types.jl	/^slen_u8str2 = length(u8str2)$/;"	v
slide	src/debuginfo.cpp	/^    int64_t slide;$/;"	m	struct:__anonea1faf400208	typeref:typename:int64_t	file:
slide	src/debuginfo.cpp	/^    ptrdiff_t slide;$/;"	m	struct:ObjectInfo	typeref:typename:ptrdiff_t	file:
slide	src/disasm.cpp	/^    int64_t slide;$/;"	m	class:__anon2853c92e0211::SymbolTable	typeref:typename:int64_t	file:
slot	src/llvm-alloc-opt.cpp	/^        AllocaInst *slot;$/;"	m	struct:__anon0a1571000111::Optimizer::splitOnStack::SplitSlot	typeref:typename:AllocaInst *	file:
slot_eq	src/codegen.cpp	/^static bool slot_eq(jl_value_t *e, int sl)$/;"	f	typeref:typename:bool	file:
slot_id	base/compiler/ssair/slot2ssa.jl	/^@inline slot_id(s) = isa(s, SlotNumber) ? (s::SlotNumber).id : (s::TypedSlot).id$/;"	f
slot_id	base/compiler/utilities.jl	/^@inline slot_id(s) = isa(s, SlotNumber) ? (s::SlotNumber).id : (s::TypedSlot).id$/;"	f
slot_sym	src/ast.c	/^    value_t slot_sym;$/;"	m	struct:_jl_ast_context_t	typeref:typename:value_t	file:
slot_sym	src/ast.c	/^jl_sym_t *module_sym;  jl_sym_t *slot_sym;$/;"	v	typeref:typename:jl_sym_t *
slot_symbol	src/codegen.cpp	/^static jl_sym_t *slot_symbol(jl_codectx_t &ctx, int s)$/;"	f	typeref:typename:jl_sym_t *	file:
slot_syms	src/julia.h	/^    jl_value_t *slot_syms; \/\/ compacted list of slot names (String)$/;"	m	struct:_jl_method_t	typeref:typename:jl_value_t *
slotflags	src/julia.h	/^    jl_array_t *slotflags;  \/\/ local var bit flags$/;"	m	struct:_jl_code_info_t	typeref:typename:jl_array_t *
slotnames	src/julia.h	/^    jl_array_t *slotnames; \/\/ names of local variables$/;"	m	struct:_jl_code_info_t	typeref:typename:jl_array_t *
slots	src/codegen.cpp	/^    std::vector<jl_varinfo_t> slots;$/;"	m	class:jl_codectx_t	typeref:typename:std::vector<jl_varinfo_t>	file:
slottypes	src/julia.h	/^    jl_value_t *slottypes; \/\/ inferred types of slots$/;"	m	struct:_jl_code_info_t	typeref:typename:jl_value_t *
slug	base/loading.jl	/^function slug(x::UInt32, p::Int)$/;"	f
slug_chars	base/loading.jl	/^const slug_chars = String(['A':'Z'; 'a':'z'; '0':'9'])$/;"	v
sm	stdlib/SparseArrays/test/sparsevector.jl	/^sm = convert(SparseMatrixCSC, sv)$/;"	v
smallest_normal32	test/grisu.jl	/^smallest_normal32 = 0x00800000$/;"	v
smallest_normal64	test/grisu.jl	/^smallest_normal64 = 0x0010000000000000$/;"	v
smallfunction	base/expr.jl	/^@noinline function smallfunction(x)$/;"	f
smallp	src/flisp/print.c	/^static int smallp(fl_context_t *fl_ctx, value_t v)$/;"	f	typeref:typename:int	file:
smerge	base/compiler/typelattice.jl	/^function smerge(sa::Union{NotFound,VarState}, sb::Union{NotFound,VarState})$/;"	f
smod	src/runtime_intrinsics.c	/^#define smod(/;"	d	file:
smry	test/offsetarray.jl	/^smry = summary(v)$/;"	v
snapshot	stdlib/LibGit2/src/LibGit2.jl	/^function snapshot(repo::GitRepo)$/;"	f
snca_compress!	base/compiler/ssair/domtree.jl	/^    function snca_compress!(state::Vector{Node}, ancestors::Vector{DFSNumber},$/;"	f
snca_compress_worklist!	base/compiler/ssair/domtree.jl	/^    function snca_compress_worklist!($/;"	f
snprintf	src/support/dtypes.h	/^#define snprintf /;"	d
snprintf	src/support/utf8.c	/^#define snprintf /;"	d	file:
snrm2_	deps/gfortblas.c	/^float snrm2_(int *N, float *X, int *INCX) {$/;"	f	typeref:typename:float
so_many_as_array	stdlib/SHA/test/runtests.jl	/^so_many_as_array = repeat([0x61], 1000000)$/;"	v
so_many_as_tuple	stdlib/SHA/test/runtests.jl	/^so_many_as_tuple = ntuple((i) -> 0x61, 1000000)$/;"	v
socket_reuse_port	stdlib/Distributed/src/managers.jl	/^function socket_reuse_port()$/;"	f
solve	stdlib/SuiteSparse/src/cholmod.jl	/^function solve(sys::Integer, F::Factor{Tv}, B::Dense{Tv}) where Tv<:VTypes$/;"	f
solve!	stdlib/SuiteSparse/src/umfpack.jl	/^        function solve!(x::StridedVector{ComplexF64}, lu::UmfpackLU{ComplexF64,$itype}, b::Strid/;"	f
solve!	stdlib/SuiteSparse/src/umfpack.jl	/^        function solve!(x::StridedVector{Float64}, lu::UmfpackLU{Float64,$itype}, b::StridedVect/;"	f
some-gensym?	src/ast.scm	/^(define (some-gensym? x)$/;"	f
something	base/some.jl	/^function something end$/;"	f
something	base/some.jl	/^something() = throw(ArgumentError("No value arguments present"))$/;"	f
something	base/some.jl	/^something(x::Any, y...) = x$/;"	f
something	base/some.jl	/^something(x::Nothing, y...) = something(y...)$/;"	f
something	base/some.jl	/^something(x::Some, y...) = x.value$/;"	f
soname.sh.log	deps/srccache/patchelf-0.9/tests/Makefile.in	/^soname.sh.log: soname.sh$/;"	t
sonameMode	deps/srccache/patchelf-0.9/src/patchelf.cc	/^    typedef enum { printSoname, replaceSoname } sonameMode;$/;"	t	class:ElfFile	typeref:enum:ElfFile::__anon94ea2e970103	file:
sort	base/compiler/compiler.jl	/^function sort end$/;"	f
sort	base/range.jl	/^sort(r::AbstractRange) = issorted(r) ? r : reverse(r)$/;"	f
sort	base/range.jl	/^sort(r::AbstractUnitRange) = r$/;"	f
sort	base/sort.jl	/^function sort(A::AbstractArray;$/;"	f
sort	base/sort.jl	/^sort(v::AbstractVector; kws...) = sort!(copymutable(v); kws...)$/;"	f
sort	stdlib/SparseArrays/src/sparsevector.jl	/^function sort(x::SparseVector{Tv,Ti}; kws...) where {Tv,Ti}$/;"	f
sort!	base/compiler/compiler.jl	/^function sort! end$/;"	f
sort!	base/range.jl	/^sort!(r::AbstractUnitRange) = r$/;"	f
sort!	base/sort.jl	/^function sort!(A::AbstractArray;$/;"	f
sort!	base/sort.jl	/^function sort!(v::AbstractVector, alg::Algorithm, order::Ordering)$/;"	f
sort!	base/sort.jl	/^function sort!(v::AbstractVector, lo::Int, hi::Int, ::InsertionSortAlg, o::Ordering)$/;"	f
sort!	base/sort.jl	/^function sort!(v::AbstractVector, lo::Int, hi::Int, a::MergeSortAlg, o::Ordering, t=similar(v,0)/;"	f
sort!	base/sort.jl	/^function sort!(v::AbstractVector, lo::Int, hi::Int, a::PartialQuickSort{Int},$/;"	f
sort!	base/sort.jl	/^function sort!(v::AbstractVector, lo::Int, hi::Int, a::PartialQuickSort{T},$/;"	f
sort!	base/sort.jl	/^function sort!(v::AbstractVector, lo::Int, hi::Int, a::QuickSortAlg, o::Ordering)$/;"	f
sort!	base/sort.jl	/^function sort!(v::AbstractVector;$/;"	f
sort!	base/sort.jl	/^sort!(v::AbstractVector{<:Floats}, a::Algorithm, o::DirectOrdering) = fpsort!(v,a,o)$/;"	f
sort!	base/sort.jl	/^sort!(v::Vector{Int}, a::Algorithm, o::Perm{<:DirectOrdering,<:Vector{<:Floats}}) = fpsort!(v,a,/;"	f
sort!	stdlib/SuiteSparse/src/cholmod.jl	/^function sort!(S::Sparse{Tv}) where Tv<:VTypes$/;"	f
sortPhdrs	deps/srccache/patchelf-0.9/src/patchelf.cc	/^void ElfFile<ElfFileParamNames>::sortPhdrs()$/;"	f	class:ElfFile	typeref:typename:void
sortShdrs	deps/srccache/patchelf-0.9/src/patchelf.cc	/^void ElfFile<ElfFileParamNames>::sortShdrs()$/;"	f	class:ElfFile	typeref:typename:void
sortSparseMatrixCSC!	stdlib/SparseArrays/src/sparsematrix.jl	/^function sortSparseMatrixCSC!(A::AbstractSparseMatrixCSC{Tv,Ti}; sortindices::Symbol = :sortcols/;"	f
sort_chunks!	base/sort.jl	/^@noinline function sort_chunks!(Av, n, alg, order)$/;"	f
sort_int_range!	base/sort.jl	/^function sort_int_range!(x::Vector{<:Integer}, rangelen, minval)$/;"	f
sortcmd	test/spawn.jl	/^sortcmd = `sort`$/;"	v
sortdefs	stdlib/Test/src/Test.jl	/^    function sortdefs(m1::Method, m2::Method)$/;"	f
sorted_keywords	stdlib/REPL/src/REPLCompletions.jl	/^const sorted_keywords = [$/;"	v
sorteig!	stdlib/LinearAlgebra/src/eigen.jl	/^function sorteig!(λ::AbstractVector, X::AbstractMatrix, sortby::Union{Function,Nothing}=eigsort/;"	f
sorteig!	stdlib/LinearAlgebra/src/eigen.jl	/^sorteig!(λ::AbstractVector, sortby::Union{Function,Nothing}=eigsortby) = sortby === nothing ? λ/;"	f
sortperm	base/compiler/compiler.jl	/^function sortperm end$/;"	f
sortperm	base/range.jl	/^sortperm(r::AbstractRange) = issorted(r) ? (1:1:length(r)) : (length(r):-1:1)$/;"	f
sortperm	base/range.jl	/^sortperm(r::AbstractUnitRange) = 1:length(r)$/;"	f
sortperm	base/sort.jl	/^function sortperm(v::AbstractVector;$/;"	f
sortperm!	base/sort.jl	/^function sortperm!(x::AbstractVector{<:Integer}, v::AbstractVector;$/;"	f
sortperm_int_range	base/sort.jl	/^function sortperm_int_range(x::Vector{<:Integer}, rangelen, minval)$/;"	f
sortslices	base/multidimensional.jl	/^function sortslices(A::AbstractArray; dims::Union{Integer, Tuple{Vararg{Integer}}}, kws...)$/;"	f
source	src/codegen.cpp	/^    jl_code_info_t *source = NULL;$/;"	m	class:jl_codectx_t	typeref:typename:jl_code_info_t *	file:
source	src/flisp/flisp.c	/^    value_t source;$/;"	m	struct:_fl_readstate_t	typeref:typename:value_t	file:
source	src/julia.h	/^    jl_value_t *source;  \/\/ original code template (jl_code_info_t, but may be compressed), nu/;"	m	struct:_jl_method_t	typeref:typename:jl_value_t *
source-dist	Makefile	/^source-dist:$/;"	t
source_dir	base/loading.jl	/^function source_dir()$/;"	f
source_path	base/loading.jl	/^function source_path(default::Union{AbstractString,Nothing}="")$/;"	f
sourceinfo_slotnames	base/show.jl	/^function sourceinfo_slotnames(src::CodeInfo)$/;"	f
sp	src/flisp/flisp.h	/^    uint32_t sp;$/;"	m	struct:_ectx_t	typeref:typename:uint32_t
sp_innersig	test/core.jl	/^function sp_innersig(x::T) where {T}$/;"	f
sp_type_rewrap	base/compiler/abstractinterpretation.jl	/^function sp_type_rewrap(@nospecialize(T), linfo::MethodInstance, isreturn::Bool)$/;"	f
space-before-next-token?	src/julia-parser.scm	/^(define (space-before-next-token? s)$/;"	f
space-sensitive	src/julia-parser.scm	/^(define space-sensitive #f)$/;"	f
spacesym	src/flisp/flisp.h	/^    value_t vtabsym, pagesym, returnsym, escsym, spacesym, deletesym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
sparam-name-bounds	src/julia-syntax.scm	/^(define (sparam-name-bounds params)$/;"	f
sparam_vals	src/interpreter.c	/^    jl_svec_t *sparam_vals; \/\/ method static parameters, if eval-ing a method body$/;"	m	struct:__anonf89725e10108	typeref:typename:jl_svec_t *	file:
sparam_vals	src/interpreter.c	/^    jl_svec_t *sparam_vals;$/;"	m	struct:interpret_toplevel_expr_in_args	typeref:typename:jl_svec_t *	file:
sparam_vals	src/julia.h	/^    jl_svec_t *sparam_vals; \/\/ static parameter values, indexed by def.method->sparam_syms$/;"	m	struct:_jl_method_instance_t	typeref:typename:jl_svec_t *
sparse	stdlib/SparseArrays/src/sparsematrix.jl	/^function sparse(I::AbstractVector{Ti}, J::AbstractVector{Ti}, V::AbstractVector{Tv}, m::Integer,/;"	f
sparse	stdlib/SparseArrays/src/sparsematrix.jl	/^sparse(A::AbstractMatrix{Tv}) where {Tv} = convert(SparseMatrixCSC{Tv,Int}, A)$/;"	f
sparse	stdlib/SparseArrays/src/sparsematrix.jl	/^sparse(B::Bidiagonal) = SparseMatrixCSC(B)$/;"	f
sparse	stdlib/SparseArrays/src/sparsematrix.jl	/^sparse(D::Diagonal) = SparseMatrixCSC(D)$/;"	f
sparse	stdlib/SparseArrays/src/sparsematrix.jl	/^sparse(I,J,V::AbstractVector) = sparse(I, J, V, dimlub(I), dimlub(J))$/;"	f
sparse	stdlib/SparseArrays/src/sparsematrix.jl	/^sparse(I,J,V::AbstractVector,m,n) = sparse(I, J, V, Int(m), Int(n), +)$/;"	f
sparse	stdlib/SparseArrays/src/sparsematrix.jl	/^sparse(I,J,V::AbstractVector{Bool},m,n) = sparse(I, J, V, Int(m), Int(n), |)$/;"	f
sparse	stdlib/SparseArrays/src/sparsematrix.jl	/^sparse(I,J,v::Number) = sparse(I, J, fill(v,length(I)))$/;"	f
sparse	stdlib/SparseArrays/src/sparsematrix.jl	/^sparse(I,J,v::Number,m,n) = sparse(I, J, fill(v,length(I)), Int(m), Int(n))$/;"	f
sparse	stdlib/SparseArrays/src/sparsematrix.jl	/^sparse(I,J,v::Number,m,n,combine::Function) = sparse(I, J, fill(v,length(I)), Int(m), Int(n), co/;"	f
sparse	stdlib/SparseArrays/src/sparsematrix.jl	/^sparse(I::AbstractVector, J::AbstractVector, V::AbstractVector, m::Integer, n::Integer, combine)/;"	f
sparse	stdlib/SparseArrays/src/sparsematrix.jl	/^sparse(S::AbstractSparseMatrixCSC) = copy(S)$/;"	f
sparse	stdlib/SparseArrays/src/sparsematrix.jl	/^sparse(T::SymTridiagonal) = SparseMatrixCSC(T)$/;"	f
sparse	stdlib/SparseArrays/src/sparsematrix.jl	/^sparse(T::Tridiagonal) = SparseMatrixCSC(T)$/;"	f
sparse	stdlib/SparseArrays/src/sparsematrix.jl	/^sparse(s::UniformScaling, dims::Dims{2}) = SparseMatrixCSC(s, dims)$/;"	f
sparse	stdlib/SparseArrays/src/sparsematrix.jl	/^sparse(s::UniformScaling, m::Integer, n::Integer) = sparse(s, Dims((m, n)))$/;"	f
sparse	stdlib/SparseArrays/src/sparsevector.jl	/^sparse(a::AbstractVector) = sparsevec(a)$/;"	f
sparse	stdlib/SuiteSparse/src/cholmod.jl	/^function sparse(A::Sparse{Complex{Float64}}) # Notice! Cannot be type stable because of stype$/;"	f
sparse	stdlib/SuiteSparse/src/cholmod.jl	/^function sparse(A::Sparse{Float64}) # Notice! Cannot be type stable because of stype$/;"	f
sparse	stdlib/SuiteSparse/src/cholmod.jl	/^function sparse(F::Factor)$/;"	f
sparse	stdlib/SuiteSparse/src/cholmod.jl	/^function sparse(FC::FactorComponent{Tv,:L}) where Tv$/;"	f
sparse	stdlib/SuiteSparse/src/cholmod.jl	/^sparse(D::Dense) = sparse(Sparse(D))$/;"	f
sparse	stdlib/SuiteSparse/src/cholmod.jl	/^sparse(FC::FactorComponent{Tv,:LD}) where {Tv} = sparse(Sparse(Factor(FC)))$/;"	f
sparse!	stdlib/SparseArrays/src/sparsematrix.jl	/^function sparse!(I::AbstractVector{Ti}, J::AbstractVector{Ti},$/;"	f
sparse_check	stdlib/SparseArrays/src/sparsematrix.jl	/^function sparse_check(n::Integer, colptr::Vector{Ti}, rowval, nzval) where Ti$/;"	f
sparse_check_Ti	stdlib/SparseArrays/src/sparsematrix.jl	/^function sparse_check_Ti(m::Integer, n::Integer, Ti::Type)$/;"	f
sparse_check_length	stdlib/SparseArrays/src/sparsematrix.jl	/^function sparse_check_length(rowstr, rowval, minlen, Ti)$/;"	f
sparse_compute_reshaped_colptr_and_rowval	stdlib/SparseArrays/src/sparsematrix.jl	/^function sparse_compute_reshaped_colptr_and_rowval(colptrS::Vector{Ti}, rowvalS::Vector{Ti},$/;"	f
sparse_diff1	stdlib/SparseArrays/src/linalg.jl	/^function sparse_diff1(S::AbstractSparseMatrixCSC{Tv,Ti}) where {Tv,Ti}$/;"	f
sparse_diff2	stdlib/SparseArrays/src/linalg.jl	/^function sparse_diff2(a::AbstractSparseMatrixCSC{Tv,Ti}) where {Tv,Ti}$/;"	f
sparse_sortedlinearindices!	stdlib/SparseArrays/src/sparsematrix.jl	/^function sparse_sortedlinearindices!(I::Vector{Ti}, V::Vector, m::Int, n::Int) where Ti$/;"	f
sparse_t31649	test/core.jl	/^struct sparse_t31649$/;"	f
sparse_to_dense	stdlib/SuiteSparse/src/cholmod.jl	/^function sparse_to_dense(A::Sparse{Tv}) where Tv<:VTypes$/;"	f
sparsevec	stdlib/SparseArrays/src/sparsevector.jl	/^function sparsevec(I::AbstractVector{<:Integer}, V::AbstractVector, combine::Function)$/;"	f
sparsevec	stdlib/SparseArrays/src/sparsevector.jl	/^function sparsevec(I::AbstractVector{<:Integer}, V::AbstractVector, len::Integer, combine::Funct/;"	f
sparsevec	stdlib/SparseArrays/src/sparsevector.jl	/^function sparsevec(dict::AbstractDict{Ti,Tv}) where {Tv,Ti<:Integer}$/;"	f
sparsevec	stdlib/SparseArrays/src/sparsevector.jl	/^function sparsevec(dict::AbstractDict{Ti,Tv}, len::Integer) where {Tv,Ti<:Integer}$/;"	f
sparsevec	stdlib/SparseArrays/src/sparsevector.jl	/^sparsevec(I::AbstractVector, V::Union{Bool, AbstractVector{Bool}}) =$/;"	f
sparsevec	stdlib/SparseArrays/src/sparsevector.jl	/^sparsevec(I::AbstractVector, V::Union{Bool, AbstractVector{Bool}}, len::Integer) =$/;"	f
sparsevec	stdlib/SparseArrays/src/sparsevector.jl	/^sparsevec(I::AbstractVector, V::Union{Number, AbstractVector}) =$/;"	f
sparsevec	stdlib/SparseArrays/src/sparsevector.jl	/^sparsevec(I::AbstractVector, V::Union{Number, AbstractVector}, args...) =$/;"	f
sparsevec	stdlib/SparseArrays/src/sparsevector.jl	/^sparsevec(I::AbstractVector, V::Union{Number, AbstractVector}, len::Integer) =$/;"	f
sparsevec	stdlib/SparseArrays/src/sparsevector.jl	/^sparsevec(I::AbstractVector, v::Number, combine::Function) =$/;"	f
sparsevec	stdlib/SparseArrays/src/sparsevector.jl	/^sparsevec(I::AbstractVector, v::Number, len::Integer, combine::Function) =$/;"	f
sparsevec	stdlib/SparseArrays/src/sparsevector.jl	/^sparsevec(a::AbstractArray) = sparsevec(vec(a))$/;"	f
sparsevec	stdlib/SparseArrays/src/sparsevector.jl	/^sparsevec(a::AbstractSparseArray) = vec(a)$/;"	f
sparsevec	stdlib/SparseArrays/src/sparsevector.jl	/^sparsevec(a::AbstractSparseVector) = vec(a)$/;"	f
sparsevec	stdlib/SparseArrays/src/sparsevector.jl	/^sparsevec(a::AbstractVector{T}) where {T} = SparseVector{T, Int}(a)$/;"	f
spawn	base/threadingconstructs.jl	/^macro spawn(expr)$/;"	f
spawn	stdlib/Distributed/src/macros.jl	/^macro spawn(expr)$/;"	f
spawn_opts_inherit	base/process.jl	/^spawn_opts_inherit(in::Redirectable=RawFD(0), out::Redirectable=RawFD(1), err::Redirectable=RawF/;"	f
spawn_opts_inherit	base/process.jl	/^spawn_opts_inherit(stdios::StdIOSet) = Any[stdios...]$/;"	f
spawn_opts_swallow	base/process.jl	/^spawn_opts_swallow(in::Redirectable=devnull, out::Redirectable=devnull, err::Redirectable=devnul/;"	f
spawn_opts_swallow	base/process.jl	/^spawn_opts_swallow(stdios::StdIOSet) = Any[stdios...]$/;"	f
spawn_somewhere	stdlib/Distributed/src/macros.jl	/^spawn_somewhere(thunk) = spawnat(nextproc(),thunk)$/;"	f
spawnat	stdlib/Distributed/src/macros.jl	/^macro spawnat(p, expr)$/;"	f
spawnat	stdlib/Distributed/src/macros.jl	/^spawnat(p, thunk) = remotecall(thunk, p)$/;"	f
spdiagm	stdlib/SparseArrays/src/sparsematrix.jl	/^spdiagm(kv::Pair{<:Integer,<:AbstractVector}...) = _spdiagm(nothing, kv...)$/;"	f
spdiagm	stdlib/SparseArrays/src/sparsematrix.jl	/^spdiagm(m::Integer, n::Integer, kv::Pair{<:Integer,<:AbstractVector}...) = _spdiagm((Int(m),Int(/;"	f
spdiagm_internal	stdlib/SparseArrays/src/sparsematrix.jl	/^function spdiagm_internal(kv::Pair{<:Integer,<:AbstractVector}...)$/;"	f
specFunctionObject	src/julia.h	/^    const char *specFunctionObject;     \/\/ specialized llvm Function name (on sig+rettype)$/;"	m	struct:_jl_llvm_functions_t	typeref:typename:const char *
specTypes	src/julia.h	/^    jl_value_t *specTypes;  \/\/ argument types this was specialized for$/;"	m	struct:_jl_method_instance_t	typeref:typename:jl_value_t *
spec_lambda	base/compiler/ssair/inlining.jl	/^function spec_lambda(@nospecialize(atype), sv::OptimizationState, @nospecialize(invoke_data))$/;"	f
special_handler	base/printf.jl	/^function special_handler(flags::String, width::Int)$/;"	f
specialdisplay	stdlib/REPL/src/REPL.jl	/^specialdisplay(r::AbstractREPL) = nothing$/;"	f
specialdisplay	stdlib/REPL/src/REPL.jl	/^specialdisplay(r::LineEditREPL) = r.specialdisplay$/;"	f
specialindent	src/flisp/print.c	/^static int specialindent(fl_context_t *fl_ctx, value_t head)$/;"	f	typeref:typename:int	file:
specializations	src/julia.h	/^    jl_typemap_t *specializations;$/;"	m	struct:_jl_method_t	typeref:typename:jl_typemap_t *
specialize	base/essentials.jl	/^macro specialize(vars...)$/;"	f
specialize_method	base/compiler/utilities.jl	/^function specialize_method(method::Method, @nospecialize(atypes), sparams::SimpleVector, preexis/;"	f
specialize_sym	src/ast.c	/^jl_sym_t *propagate_inbounds_sym; jl_sym_t *specialize_sym;$/;"	v	typeref:typename:jl_sym_t *
specptr	src/julia.h	/^    jl_generic_specptr_t specptr; \/\/ private data for `jlcall entry point`$/;"	m	struct:_jl_code_instance_t	typeref:typename:jl_generic_specptr_t
specs	src/llvm-multiversioning.cpp	/^    std::vector<jl_target_spec_t> specs;$/;"	m	struct:__anond5683ea40111::CloneCtx	typeref:typename:std::vector<jl_target_spec_t>	file:
speye	stdlib/SuiteSparse/src/cholmod.jl	/^function speye(m::Integer, n::Integer, ::Type{Tv}) where Tv<:VTypes$/;"	f
splace	stdlib/Base64/test/runtests.jl	/^function splace(in::String, p = 0.3)$/;"	f
splat	base/operators.jl	/^    splat(f) = args->f(args...)$/;"	f
splat	base/operators.jl	/^splat(f) = args->f(args...)$/;"	f
splat	test/staged.jl	/^@generated function splat(a,b...)$/;"	f
splat-token	src/macroexpand.scm	/^(define splat-token '(__splat__))$/;"	f
splat10981	test/core.jl	/^@noinline splat10981(a...) = a$/;"	f
splat2	test/staged.jl	/^@generated function splat2(a...)$/;"	f
splat27434	test/compiler/inference.jl	/^splat27434(x) = (x...,)$/;"	f
splat3	test/staged.jl	/^@generated function splat3(A::AbstractArray{T,N}, indx::Base.RangeIndex...) where {T,N}$/;"	f
splatnew_sym	src/ast.c	/^jl_sym_t *splatnew_sym;$/;"	v	typeref:typename:jl_sym_t *
splice!	base/array.jl	/^function splice!(a::Vector, i::Integer, ins=_default_splice)$/;"	f
splice!	base/array.jl	/^function splice!(a::Vector, r::UnitRange{<:Integer}, ins=_default_splice)$/;"	f
splice!	base/bitarray.jl	/^function splice!(B::BitVector, i::Integer)$/;"	f
splice!	base/bitarray.jl	/^function splice!(B::BitVector, r::Union{UnitRange{Int}, Integer}, ins)$/;"	f
splice!	base/bitarray.jl	/^function splice!(B::BitVector, r::Union{UnitRange{Int}, Integer}, ins::AbstractArray = _default_/;"	f
split	base/multidimensional.jl	/^    @inline function split(I::CartesianIndex, V::Val)$/;"	f
split	base/multidimensional.jl	/^    @inline function split(t, V::Val)$/;"	f
split	base/multidimensional.jl	/^    function split(R::CartesianIndices, V::Val)$/;"	f
split	base/strings/util.jl	/^function split end$/;"	f
split	base/strings/util.jl	/^function split(str::T, splitter::AbstractChar;$/;"	f
split	base/strings/util.jl	/^function split(str::T, splitter::Union{Tuple{Vararg{<:AbstractChar}},AbstractVector{<:AbstractCh/;"	f
split	base/strings/util.jl	/^function split(str::T, splitter;$/;"	f
splitOnStack	src/llvm-alloc-opt.cpp	/^void Optimizer::splitOnStack(CallInst *orig_inst)$/;"	f	class:__anon0a1571000111::Optimizer	typeref:typename:void
split_cfg_entry	stdlib/LibGit2/src/types.jl	/^function split_cfg_entry(ce::ConfigEntry)$/;"	f
split_idents	base/version.jl	/^function split_idents(s::AbstractString)$/;"	f
split_sign	base/intfuncs.jl	/^split_sign(n::Integer) = unsigned(abs(n)), n < 0$/;"	f
split_sign	base/intfuncs.jl	/^split_sign(n::Unsigned) = n, false$/;"	f
splitdir	base/path.jl	/^function splitdir(path::String)$/;"	f
splitdrive	base/path.jl	/^    function splitdrive(path::String)$/;"	f
splitdrive	base/path.jl	/^    splitdrive(path::String) = ("",path)$/;"	f
splitexpr	base/docs/bindings.jl	/^function splitexpr(x::Expr)$/;"	f
splitexpr	base/docs/bindings.jl	/^splitexpr(other)     = error("Invalid @var syntax `$other`.")$/;"	f
splitexpr	base/docs/bindings.jl	/^splitexpr(s::Symbol) = Expr(:macrocall, getfield(Base, Symbol("@__MODULE__")), nothing), quot(s)$/;"	f
splitext	base/path.jl	/^function splitext(path::String)$/;"	f
splitpath	base/path.jl	/^function splitpath(p::String)$/;"	f
splitpath	base/path.jl	/^splitpath(p::AbstractString) = splitpath(String(p))$/;"	f
splitprec	base/twiceprecision.jl	/^function splitprec(::Type{F}, i::Integer) where {F<:AbstractFloat}$/;"	f
splitrange	stdlib/Distributed/src/macros.jl	/^function splitrange(N::Int, np::Int)$/;"	f
splitted	doc/make.jl	/^splitted = split(str, "<!--- generated by NEWS-update.jl: -->")$/;"	v
spmatmul	stdlib/SparseArrays/src/linalg.jl	/^function spmatmul(A::AbstractSparseMatrixCSC{Tv,Ti}, B::AbstractSparseMatrixCSC{Tv,Ti}) where {T/;"	f
spp::promote_type	stdlib/LinearAlgebra/src/generic.jl	/^    spp::promote_type(Float64, T) = p$/;"	f
sppromote	stdlib/SparseArrays/src/linalg.jl	/^function sppromote(A::AbstractSparseMatrixCSC{TvA,TiA}, B::AbstractSparseMatrixCSC{TvB,TiB}) whe/;"	f
sprand	stdlib/SparseArrays/src/sparsematrix.jl	/^function sprand(r::AbstractRNG, m::Integer, n::Integer, density::AbstractFloat, rfn::Function, :/;"	f
sprand	stdlib/SparseArrays/src/sparsematrix.jl	/^sprand(::Type{T}, m::Integer, n::Integer, density::AbstractFloat) where {T} =$/;"	f
sprand	stdlib/SparseArrays/src/sparsematrix.jl	/^sprand(m::Integer, n::Integer, density::AbstractFloat) = sprand(default_rng(), m, n, density)$/;"	f
sprand	stdlib/SparseArrays/src/sparsematrix.jl	/^sprand(m::Integer, n::Integer, density::AbstractFloat, rfn::Function, ::Type{T} = eltype(rfn(1))/;"	f
sprand	stdlib/SparseArrays/src/sparsematrix.jl	/^sprand(r::AbstractRNG, ::Type{Bool}, m::Integer, n::Integer, density::AbstractFloat) =$/;"	f
sprand	stdlib/SparseArrays/src/sparsematrix.jl	/^sprand(r::AbstractRNG, ::Type{T}, m::Integer, n::Integer, density::AbstractFloat) where {T} =$/;"	f
sprand	stdlib/SparseArrays/src/sparsematrix.jl	/^sprand(r::AbstractRNG, m::Integer, n::Integer, density::AbstractFloat) =$/;"	f
sprand	stdlib/SparseArrays/src/sparsevector.jl	/^function sprand(r::AbstractRNG, n::Integer, p::AbstractFloat, rfn::Function)$/;"	f
sprand	stdlib/SparseArrays/src/sparsevector.jl	/^function sprand(r::AbstractRNG, n::Integer, p::AbstractFloat, rfn::Function, ::Type{T}) where T$/;"	f
sprand	stdlib/SparseArrays/src/sparsevector.jl	/^sprand(::Type{T}, n::Integer, p::AbstractFloat) where {T} = sprand(default_rng(), T, n, p)$/;"	f
sprand	stdlib/SparseArrays/src/sparsevector.jl	/^sprand(n::Integer, p::AbstractFloat) = sprand(default_rng(), n, p, rand)$/;"	f
sprand	stdlib/SparseArrays/src/sparsevector.jl	/^sprand(n::Integer, p::AbstractFloat, rfn::Function) = sprand(default_rng(), n, p, rfn)$/;"	f
sprand	stdlib/SparseArrays/src/sparsevector.jl	/^sprand(n::Integer, p::AbstractFloat, rfn::Function, ::Type{T}) where {T} = sprand(default_rng(),/;"	f
sprand	stdlib/SparseArrays/src/sparsevector.jl	/^sprand(r::AbstractRNG, ::Type{Bool}, n::Integer, p::AbstractFloat) = sprand(r, n, p, truebools)$/;"	f
sprand	stdlib/SparseArrays/src/sparsevector.jl	/^sprand(r::AbstractRNG, ::Type{T}, n::Integer, p::AbstractFloat) where {T} = sprand(r, n, p, (r, /;"	f
sprand	stdlib/SparseArrays/src/sparsevector.jl	/^sprand(r::AbstractRNG, n::Integer, p::AbstractFloat) = sprand(r, n, p, rand)$/;"	f
sprandn	stdlib/SparseArrays/src/sparsematrix.jl	/^sprandn(::Type{T}, m::Integer, n::Integer, density::AbstractFloat) where {T} =$/;"	f
sprandn	stdlib/SparseArrays/src/sparsematrix.jl	/^sprandn(m::Integer, n::Integer, density::AbstractFloat) =$/;"	f
sprandn	stdlib/SparseArrays/src/sparsematrix.jl	/^sprandn(r::AbstractRNG, ::Type{T}, m::Integer, n::Integer, density::AbstractFloat) where {T} =$/;"	f
sprandn	stdlib/SparseArrays/src/sparsematrix.jl	/^sprandn(r::AbstractRNG, m::Integer, n::Integer, density::AbstractFloat) =$/;"	f
sprandn	stdlib/SparseArrays/src/sparsevector.jl	/^sprandn(n::Integer, p::AbstractFloat) = sprand(default_rng(), n, p, randn)$/;"	f
sprandn	stdlib/SparseArrays/src/sparsevector.jl	/^sprandn(r::AbstractRNG, n::Integer, p::AbstractFloat) = sprand(r, n, p, randn)$/;"	f
sprint	base/strings/io.jl	/^function sprint(f::Function, args...; context=nothing, sizehint::Integer=0)$/;"	f
sprintf	base/printf.jl	/^macro sprintf(args...)$/;"	f
sprintf	stdlib/Printf/src/Printf.jl	/^macro sprintf(args...)$/;"	f
spsolve	stdlib/SuiteSparse/src/cholmod.jl	/^function spsolve(sys::Integer, F::Factor{Tv}, B::Sparse{Tv}) where Tv<:VTypes$/;"	f
sptest1	test/core.jl	/^sptest1(x::T, y::S) where {T,S} = 43$/;"	f
sptest1	test/core.jl	/^sptest1(x::T, y::T) where {T} = 42$/;"	f
sptest2	test/core.jl	/^sptest2(x::T) where {T} = T$/;"	f
sptest3	test/core.jl	/^sptest3(x::T) where {T} = y->T$/;"	f
sptest4	test/core.jl	/^sptest4(x::T, y) where {T} = 44$/;"	f
sptest4	test/core.jl	/^sptest4(x::T, y::T) where {T} = 42$/;"	f
sptypes_from_meth_instance	base/compiler/inferencestate.jl	/^function sptypes_from_meth_instance(linfo::MethodInstance)$/;"	f
spv_x1	stdlib/SparseArrays/test/sparsevector.jl	/^spv_x1 = SparseVector(8, [2, 5, 6], [1.25, -0.75, 3.5])$/;"	v
spv_x2	stdlib/SparseArrays/test/sparsevector.jl	/^spv_x2 = SparseVector(8, [1, 2, 6, 7], [3.25, 4.0, -5.5, -6.0])$/;"	v
spvals_ptr	src/codegen.cpp	/^    Value *spvals_ptr = NULL;$/;"	m	class:jl_codectx_t	typeref:typename:Value *	file:
spzeros	stdlib/SparseArrays/src/sparsematrix.jl	/^function spzeros(::Type{Tv}, ::Type{Ti}, m::Integer, n::Integer) where {Tv, Ti}$/;"	f
spzeros	stdlib/SparseArrays/src/sparsematrix.jl	/^function spzeros(::Type{Tv}, ::Type{Ti}, sz::Tuple{Integer,Integer}) where {Tv, Ti}$/;"	f
spzeros	stdlib/SparseArrays/src/sparsematrix.jl	/^spzeros(::Type{Tv}, m::Integer, n::Integer) where {Tv} = spzeros(Tv, Int, m, n)$/;"	f
spzeros	stdlib/SparseArrays/src/sparsematrix.jl	/^spzeros(m::Integer, n::Integer) = spzeros(Float64, m, n)$/;"	f
spzeros	stdlib/SparseArrays/src/sparsevector.jl	/^spzeros(::Type{Tv}, ::Type{Ti}, len::Integer) where {Tv,Ti<:Integer} = SparseVector(len, Ti[], T/;"	f
spzeros	stdlib/SparseArrays/src/sparsevector.jl	/^spzeros(::Type{T}, len::Integer) where {T} = SparseVector(len, Int[], T[])$/;"	f
spzeros	stdlib/SparseArrays/src/sparsevector.jl	/^spzeros(len::Integer) = spzeros(Float64, len)$/;"	f
spzeros	stdlib/SuiteSparse/src/cholmod.jl	/^function spzeros(m::Integer, n::Integer, nzmax::Integer, ::Type{Tv}) where Tv<:VTypes$/;"	f
sqrmod!	stdlib/Random/src/DSFMT.jl	/^function sqrmod!(f::GF2X, m::GF2X)::GF2X$/;"	f
sqrt	base/complex.jl	/^function sqrt(z::Complex{<:AbstractFloat})$/;"	f
sqrt	base/complex.jl	/^sqrt(z::Complex) = sqrt(float(z))$/;"	f
sqrt	base/math.jl	/^@inline function sqrt(x::Union{Float32,Float64})$/;"	f
sqrt	base/math.jl	/^sqrt(x::Real) = sqrt(float(x))$/;"	f
sqrt	base/mpfr.jl	/^function sqrt(x::BigFloat)$/;"	f
sqrt	base/mpfr.jl	/^sqrt(x::BigInt) = sqrt(BigFloat(x))$/;"	f
sqrt	stdlib/LinearAlgebra/src/dense.jl	/^function sqrt(A::StridedMatrix{<:Complex})$/;"	f
sqrt	stdlib/LinearAlgebra/src/dense.jl	/^function sqrt(A::StridedMatrix{<:Real})$/;"	f
sqrt	stdlib/LinearAlgebra/src/triangular.jl	/^function sqrt(A::UnitUpperTriangular{T}) where T$/;"	f
sqrt	stdlib/LinearAlgebra/src/triangular.jl	/^function sqrt(A::UpperTriangular)$/;"	f
sqrt	stdlib/LinearAlgebra/src/triangular.jl	/^function sqrt(A::UpperTriangular{T},::Val{realmatrix}) where {T,realmatrix}$/;"	f
sqrt	stdlib/LinearAlgebra/src/triangular.jl	/^sqrt(A::LowerTriangular) = copy(transpose(sqrt(copy(transpose(A)))))$/;"	f
sqrt	stdlib/LinearAlgebra/src/triangular.jl	/^sqrt(A::UnitLowerTriangular) = copy(transpose(sqrt(copy(transpose(A)))))$/;"	f
sqrt!	stdlib/Statistics/src/Statistics.jl	/^function sqrt!(A::AbstractArray)$/;"	f
sqrt15819	stdlib/InteractiveUtils/test/runtests.jl	/^sqrt15819(x::Float32) = bitcast(Float32, Core.Intrinsics.sqrt_llvm(x))$/;"	f
sqrt15819	stdlib/InteractiveUtils/test/runtests.jl	/^sqrt15819(x::Float64) = bitcast(Float64, sqrt_llvm(x))$/;"	f
sqrt_diag!	stdlib/LinearAlgebra/src/triangular.jl	/^function sqrt_diag!(A0::UpperTriangular, A::UpperTriangular, s)$/;"	f
sqrt_fast	base/fastmath.jl	/^    sqrt_fast(x::ComplexTypes) = sqrt(abs(x)) * cis(angle(x)\/2)$/;"	f
sqrt_fast	base/fastmath.jl	/^sqrt_fast(x::FloatTypes) = sqrt_llvm(x)$/;"	f
sqrt_float	src/runtime_intrinsics.c	/^#define sqrt_float(/;"	d	file:
square!	base/grisu/bignums.jl	/^function square!(x::Bignum)$/;"	f
squareQ	stdlib/LinearAlgebra/test/lq.jl	/^squareQ(Q::LinearAlgebra.LQPackedQ) = (n = size(Q.factors, 2); lmul!(Q, Matrix{eltype(Q)}(I, n, /;"	f
squareQ	stdlib/LinearAlgebra/test/qr.jl	/^squareQ(Q::LinearAlgebra.AbstractQ) = (sq = size(Q.factors, 1); lmul!(Q, Matrix{eltype(Q)}(I, sq/;"	f
squash	test/iterators.jl	/^    squash(A) = reshape(A, length(A))$/;"	f
squash	test/iterators.jl	/^    squash(x::Number) = x$/;"	f
srand	base/libc.jl	/^srand(seed=floor(time())) = ccall(:srand, Cvoid, (Cuint,), seed)$/;"	f
src	src/interpreter.c	/^    jl_code_info_t *src; \/\/ contains the names and number of slots$/;"	m	struct:__anonf89725e10108	typeref:typename:jl_code_info_t *	file:
src	src/interpreter.c	/^    jl_code_info_t *src;$/;"	m	struct:interpret_toplevel_expr_in_args	typeref:typename:jl_code_info_t *	file:
src	src/interpreter.c	/^    jl_code_info_t *src;$/;"	m	struct:jl_interpret_toplevel_thunk_args	typeref:typename:jl_code_info_t *	file:
src	test/offsetarray.jl	/^src = reshape(Vector(1:16), (4,4))$/;"	v
src::typeof	base/array.jl	/^    src::typeof(I) = ntuple(i-> I[i][_findin(I[i], i < n ? (1:sz[i]) : (1:s))], n)::typeof(I)$/;"	f
srcModule	src/ccall.cpp	/^    llvm::Module *srcModule;$/;"	m	class:FunctionMover	typeref:typename:llvm::Module *	file:
src_TESTS	deps/srccache/patchelf-0.9/tests/Makefile.am	/^src_TESTS = \\$/;"	m
src_TESTS	deps/srccache/patchelf-0.9/tests/Makefile.in	/^src_TESTS = \\$/;"	m
srcdir	deps/srccache/patchelf-0.9/Makefile.in	/^srcdir = @srcdir@$/;"	m
srcdir	deps/srccache/patchelf-0.9/src/Makefile.in	/^srcdir = @srcdir@$/;"	m
srcdir	deps/srccache/patchelf-0.9/tests/Makefile.in	/^srcdir = @srcdir@$/;"	m
sret	src/ccall.cpp	/^    int sret; \/\/ out parameter for indicating whether return value has been moved to the first/;"	m	class:function_sig_t	typeref:typename:int	file:
ss::SummarySize	base/summarysize.jl	/^(ss::SummarySize)(@nospecialize obj) = _summarysize(ss, obj)$/;"	f
ss_size	src/support/win32_ucontext.h	/^        size_t ss_size;$/;"	m	struct:__anon4cf1a00a0108::stack_t	typeref:typename:size_t
ss_sp	src/support/win32_ucontext.h	/^        void *ss_sp;$/;"	m	struct:__anon4cf1a00a0108::stack_t	typeref:typename:void *
ssa_def_slot	base/compiler/abstractinterpretation.jl	/^function ssa_def_slot(@nospecialize(arg), sv::InferenceState)$/;"	f
ssa_inlining_pass!	base/compiler/ssair/inlining.jl	/^function ssa_inlining_pass!(ir::IRCode, linetable::Vector{LineInfoNode}, sv::OptimizationState)$/;"	f
ssa_substitute!	base/compiler/ssair/inlining.jl	/^function ssa_substitute!(idx::Int, @nospecialize(val), arg_replacements::Vector{Any},$/;"	f
ssa_substitute_op!	base/compiler/ssair/inlining.jl	/^function ssa_substitute_op!(@nospecialize(val), arg_replacements::Vector{Any},$/;"	f
ssachangemap	test/compiler/inference.jl	/^ssachangemap = fill(0, length(code28279))$/;"	v
ssaflags	src/julia.h	/^    jl_array_t *ssaflags; \/\/ flags associated with each statement:$/;"	m	struct:_jl_code_info_t	typeref:typename:jl_array_t *
ssamap	base/compiler/ssair/ir.jl	/^function ssamap(f, @nospecialize(stmt))$/;"	f
ssavalue?	src/ast.scm	/^(define (ssavalue? e)$/;"	f
ssavalue_assigned	src/codegen.cpp	/^    std::vector<bool> ssavalue_assigned;$/;"	m	class:jl_codectx_t	typeref:typename:std::vector<bool>	file:
ssavalue_sym	src/ast.c	/^    value_t ssavalue_sym;$/;"	m	struct:_jl_ast_context_t	typeref:typename:value_t	file:
ssavaluetypes	src/julia.h	/^    jl_value_t *ssavaluetypes; \/\/ types of ssa values (or count of them)$/;"	m	struct:_jl_code_info_t	typeref:typename:jl_value_t *
sse_regs	src/abi_x86_64.cpp	/^uint8_t int_regs, sse_regs;$/;"	m	struct:ABI_x86_64Layout	typeref:typename:uint8_t	file:
ssh_tunnel	stdlib/Distributed/src/managers.jl	/^function ssh_tunnel(user, host, bind_addr, port, sshflags)$/;"	f
ssmult	stdlib/SuiteSparse/src/cholmod.jl	/^function ssmult(A::Sparse{Tv}, B::Sparse{Tv}, stype::Integer,$/;"	f
ssqs	base/complex.jl	/^function ssqs(x::T, y::T) where T<:AbstractFloat$/;"	f
st_info	deps/srccache/patchelf-0.9/src/elf.h	/^  unsigned char	st_info;		\/* Symbol type and binding *\/$/;"	m	struct:__anonff7a58690508	typeref:typename:unsigned char
st_info	deps/srccache/patchelf-0.9/src/elf.h	/^  unsigned char	st_info;		\/* Symbol type and binding *\/$/;"	m	struct:__anonff7a58690608	typeref:typename:unsigned char
st_name	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word	st_name;		\/* Symbol name (string tbl index) *\/$/;"	m	struct:__anonff7a58690508	typeref:typename:Elf32_Word
st_name	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Word	st_name;		\/* Symbol name (string tbl index) *\/$/;"	m	struct:__anonff7a58690608	typeref:typename:Elf64_Word
st_other	deps/srccache/patchelf-0.9/src/elf.h	/^  unsigned char	st_other;		\/* Symbol visibility *\/$/;"	m	struct:__anonff7a58690508	typeref:typename:unsigned char
st_other	deps/srccache/patchelf-0.9/src/elf.h	/^  unsigned char st_other;		\/* Symbol visibility *\/$/;"	m	struct:__anonff7a58690608	typeref:typename:unsigned char
st_shndx	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Section	st_shndx;		\/* Section index *\/$/;"	m	struct:__anonff7a58690508	typeref:typename:Elf32_Section
st_shndx	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Section	st_shndx;		\/* Section index *\/$/;"	m	struct:__anonff7a58690608	typeref:typename:Elf64_Section
st_size	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word	st_size;		\/* Symbol size *\/$/;"	m	struct:__anonff7a58690508	typeref:typename:Elf32_Word
st_size	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Xword	st_size;		\/* Symbol size *\/$/;"	m	struct:__anonff7a58690608	typeref:typename:Elf64_Xword
st_value	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Addr	st_value;		\/* Symbol value *\/$/;"	m	struct:__anonff7a58690508	typeref:typename:Elf32_Addr
st_value	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Addr	st_value;		\/* Symbol value *\/$/;"	m	struct:__anonff7a58690608	typeref:typename:Elf64_Addr
stack	src/llvm-multiversioning.cpp	/^    SmallVector<Frame, 4> stack;$/;"	m	struct:__anond5683ea40111::ConstantUses	typeref:typename:SmallVector<Frame,4>	file:
stack	src/subtype.c	/^    uint32_t stack[100];  \/\/ stack of bits represented as a bit vector$/;"	m	struct:__anon0f0258f90108	typeref:typename:uint32_t[100]	file:
stack_grows_down	test/gcext/gcext.c	/^static int stack_grows_down(void) {$/;"	f	typeref:typename:int	file:
stack_lock	src/julia_threads.h	/^    jl_mutex_t stack_lock;$/;"	m	struct:__anonf8aecdb10808	typeref:typename:jl_mutex_t
stack_rooted	test/clangsa/MissingRoots.c	/^void stack_rooted(jl_value_t *lb JL_MAYBE_UNROOTED, jl_value_t *ub JL_MAYBE_UNROOTED) {$/;"	f	typeref:typename:void
stack_t	src/support/win32_ucontext.h	/^    struct stack_t {$/;"	s	struct:__anon4cf1a00a0108
stackbase	src/julia_threads.h	/^    void *stackbase;$/;"	m	struct:_jl_tls_states_t	typeref:typename:void *
stackbottom	src/julia_threads.h	/^    void *stackbottom;$/;"	m	struct:__anonf8aecdb10208	typeref:typename:void *
stackframe	src/gc.h	/^    gc_mark_stackframe_t stackframe;$/;"	m	union:_jl_gc_mark_data	typeref:typename:gc_mark_stackframe_t
stackframe	src/julia_internal.h	/^    STACKFRAME64 stackframe;$/;"	m	struct:__anon9dd660c30208	typeref:typename:STACKFRAME64
stackframe_function_color	base/client.jl	/^stackframe_function_color() = repl_color("JULIA_STACKFRAME_FUNCTION_COLOR", :bold)$/;"	f
stackframe_lineinfo_color	base/client.jl	/^stackframe_lineinfo_color() = repl_color("JULIA_STACKFRAME_LINEINFO_COLOR", :bold)$/;"	f
stacksize	src/julia_threads.h	/^    size_t stacksize;$/;"	m	struct:_jl_tls_states_t	typeref:typename:size_t
stacktop	src/julia_threads.h	/^    void *stacktop;$/;"	m	struct:__anonf8aecdb10208	typeref:typename:void *
stacktrace	base/stacktraces.jl	/^function stacktrace(trace::Vector{<:Union{Base.InterpreterIP,Ptr{Cvoid}}}, c_funcs::Bool=false)$/;"	f
stacktrace	base/stacktraces.jl	/^stacktrace(c_funcs::Bool=false) = stacktrace(backtrace(), c_funcs)$/;"	f
stage	deps/Makefile	/^stage: $(addprefix stage-, $(DEP_LIBS_STAGED))$/;"	t
stage	stdlib/LibGit2/src/index.jl	/^function stage(ie::IndexEntry)$/;"	f
staged-install	deps/tools/common.mk	/^define staged-install$/;"	m
staged_t1	test/staged.jl	/^@generated function staged_t1(a,b)$/;"	f
stagediobuf	test/staged.jl	/^stagediobuf = IOBuffer()$/;"	v
stale_cachefile	base/loading.jl	/^function stale_cachefile(modpath::String, cachefile::String)$/;"	f
standard_namespace_uuids	stdlib/UUIDs/test/runtests.jl	/^const standard_namespace_uuids = [$/;"	v
start	src/julia.h	/^    jl_function_t *start;$/;"	m	struct:_jl_task_t	typeref:typename:jl_function_t *
start	stdlib/SuiteSparse/src/cholmod.jl	/^function start(a::Vector{UInt8})$/;"	f
start_backtrace_fiber	src/signals-win.c	/^static void JL_NORETURN start_backtrace_fiber(void)$/;"	f	typeref:typename:void JL_NORETURN	file:
start_base_include	base/Base.jl	/^start_base_include = time_ns()$/;"	v
start_basefiber	src/task.c	/^static void start_basefiber(void)$/;"	f	typeref:typename:void	file:
start_gc_msgs_task	stdlib/Distributed/src/remotecall.jl	/^function start_gc_msgs_task()$/;"	f
start_ip_offset	src/debuginfo.cpp	/^    int32_t start_ip_offset;$/;"	m	struct:unw_table_entry	typeref:typename:int32_t	file:
start_of_month	src/support/strptime.c	/^static const int start_of_month[2][13] = {$/;"	v	typeref:typename:const int[2][13]	file:
start_reading	base/stream.jl	/^function start_reading(stream::LibuvStream)$/;"	f
start_reading	base/stream.jl	/^start_reading(s::BufferStream) = Int32(0)$/;"	f
start_repl_backend	stdlib/REPL/src/REPL.jl	/^function start_repl_backend(repl_channel::Channel, response_channel::Channel)$/;"	f
start_repl_server	stdlib/REPL/src/REPL.jl	/^function start_repl_server(port::Int)$/;"	f
start_task	src/task.c	/^STATIC_OR_JS void NOINLINE JL_NORETURN start_task(void)$/;"	f	typeref:typename:STATIC_OR_JS void NOINLINE JL_NORETURN
start_timer	stdlib/Profile/src/Profile.jl	/^start_timer() = ccall(:jl_profile_start_timer, Cint, ())$/;"	f
start_watching	stdlib/FileWatching/src/FileWatching.jl	/^function start_watching(t::FileMonitor)$/;"	f
start_watching	stdlib/FileWatching/src/FileWatching.jl	/^function start_watching(t::PollingFileWatcher)$/;"	f
start_watching	stdlib/FileWatching/src/FileWatching.jl	/^function start_watching(t::_FDWatcher)$/;"	f
start_worker	stdlib/Distributed/src/cluster.jl	/^function start_worker(out::IO, cookie::AbstractString=readline(stdin); close_stdin::Bool=true, s/;"	f
start_worker	stdlib/Distributed/src/cluster.jl	/^start_worker(cookie::AbstractString=readline(stdin); kwargs...) = start_worker(stdout, cookie; k/;"	f
start_worker_task!	base/asyncmap.jl	/^function start_worker_task!(worker_tasks, exec_func, chnl, batch_size=nothing)$/;"	f
started	src/julia.h	/^    unsigned int started:1;$/;"	m	struct:_jl_task_t	typeref:typename:unsigned int:1
startswith	base/regex.jl	/^function startswith(s::AbstractString, r::Regex)$/;"	f
startswith	base/regex.jl	/^function startswith(s::SubString, r::Regex)$/;"	f
startswith	base/strings/util.jl	/^function startswith(a::AbstractString, b::AbstractString)$/;"	f
startswith	base/strings/util.jl	/^function startswith(a::Union{String, SubString{String}},$/;"	f
startswith	base/strings/util.jl	/^startswith(str::AbstractString, chars::Chars) = !isempty(str) && first(str) in chars$/;"	f
startswith	stdlib/Markdown/src/parse/util.jl	/^function startswith(stream::IO, c::AbstractChar; eat = true)$/;"	f
startswith	stdlib/Markdown/src/parse/util.jl	/^function startswith(stream::IO, r::Regex; eat = true, padding = false)$/;"	f
startswith	stdlib/Markdown/src/parse/util.jl	/^function startswith(stream::IO, s::AbstractString; eat = true, padding = false, newlines = true)$/;"	f
startswith	stdlib/Markdown/src/parse/util.jl	/^function startswith(stream::IO, ss::Vector{<:AbstractString}; kws...)$/;"	f
starttime	test/file.jl	/^starttime = time()$/;"	v
startupfile	src/julia.h	/^    int8_t startupfile;$/;"	m	struct:__anon055fe4271808	typeref:typename:int8_t
stat	base/filesystem.jl	/^stat(f::File) = stat(f.handle)$/;"	f
stat	base/iostream.jl	/^stat(s::IOStream) = stat(fd(s))$/;"	f
stat	base/stat.jl	/^stat(fd::Integer)           = stat(RawFD(fd))$/;"	f
stat	base/stat.jl	/^stat(fd::OS_HANDLE)         = @stat_call jl_fstat OS_HANDLE fd$/;"	f
stat	base/stat.jl	/^stat(path...) = stat(joinpath(path...))$/;"	f
stat	base/stat.jl	/^stat(path::AbstractString)  = @stat_call jl_stat  Cstring path$/;"	f
stat	src/support/dtypes.h	/^#define stat /;"	d
stat_call	base/stat.jl	/^macro stat_call(sym, arg1type, arg)$/;"	f
state	src/cgmemmgr.cpp	/^    uint32_t state{0};$/;"	m	struct:__anon06c686bc0111::SplitPtrBlock	typeref:typename:uint32_t	file:
state	src/julia.h	/^    jl_sym_t *state;$/;"	m	struct:_jl_task_t	typeref:typename:jl_sym_t *
state	stdlib/REPL/src/LineEdit.jl	/^state(s::MIState, p=mode(s)) = s.mode_state[p]$/;"	f
state	stdlib/REPL/src/LineEdit.jl	/^state(s::PromptState, p=mode(s)) = (@assert s.p == p; s)$/;"	f
state_type	stdlib/SHA/src/types.jl	/^state_type(::Type{SHA1_CTX}) = UInt32$/;"	f
state_type	stdlib/SHA/src/types.jl	/^state_type(::Type{SHA2_224_CTX}) = UInt32$/;"	f
state_type	stdlib/SHA/src/types.jl	/^state_type(::Type{SHA2_256_CTX}) = UInt32$/;"	f
state_type	stdlib/SHA/src/types.jl	/^state_type(::Type{SHA2_384_CTX}) = UInt64$/;"	f
state_type	stdlib/SHA/src/types.jl	/^state_type(::Type{SHA2_512_CTX}) = UInt64$/;"	f
state_type	stdlib/SHA/src/types.jl	/^state_type(::Type{SHA3_CTX}) = UInt64$/;"	f
statement_cost	base/compiler/optimize.jl	/^function statement_cost(ex::Expr, line::Int, src::CodeInfo, sptypes::Vector{Any}, slottypes::Vec/;"	f
statestack_get	src/subtype.c	/^static int statestack_get(jl_unionstate_t *st, int i) JL_NOTSAFEPOINT$/;"	f	typeref:typename:int	file:
statestack_set	src/subtype.c	/^static void statestack_set(jl_unionstate_t *st, int i, int val) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void	file:
static	base/osutils.jl	/^macro static(ex)$/;"	f
static_alloc	src/julia.h	/^    int static_alloc;       \/\/ is the compiler allowed to allocate statically?$/;"	m	struct:__anon055fe4271b08	typeref:typename:int
static_apply_type	src/codegen.cpp	/^static jl_value_t *static_apply_type(jl_codectx_t &ctx, const jl_cgval_t *args, size_t nargs)$/;"	f	typeref:typename:jl_value_t *	file:
static_assert	src/julia_internal.h	/^#      define static_assert /;"	d
static_assert	src/julia_internal.h	/^#      define static_assert(/;"	d
static_constant_instance	src/cgutils.cpp	/^static jl_value_t *static_constant_instance(Constant *constant, jl_value_t *jt)$/;"	f	typeref:typename:jl_value_t *	file:
static_eval	src/codegen.cpp	/^static jl_value_t *static_eval(jl_codectx_t &ctx, jl_value_t *ex, int sparams=true, int allow_al/;"	f	typeref:typename:jl_value_t *	file:
static_parameter_sym	src/ast.c	/^jl_sym_t *static_parameter_sym; jl_sym_t *inline_sym;$/;"	v	typeref:typename:jl_sym_t *
static_shown	test/show.jl	/^function static_shown(x)$/;"	f
staticeval_bitstype	src/intrinsics.cpp	/^static jl_value_t *staticeval_bitstype(const jl_cgval_t &targ)$/;"	f	typeref:typename:jl_value_t *	file:
status	stdlib/LibGit2/src/status.jl	/^function status(repo::GitRepo, path::String)$/;"	f
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(1.0, Grisu.FIXED, 3, buffer,bignums)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(1.0, Grisu.PRECISION, 3, buffer,bignums)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(1.0, Grisu.SHORTEST, 0, buffer,bignums)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(1.5, Grisu.FIXED, 10, buffer,bignums)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(1.5, Grisu.PRECISION, 10, buffer,bignums)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(1.5, Grisu.SHORTEST, 0, buffer,bignums)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(2147483648.0, Grisu.FIXED, 2, buffer,bignums)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(2147483648.0, Grisu.PRECISION, 5, buffer,bignums)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(2147483648.0, Grisu.SHORTEST, 0, buffer,bignums)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(3.5844466002796428e+298, Grisu.PRECISION, 10, buffer,bignums/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(3.5844466002796428e+298, Grisu.SHORTEST, 0, buffer,bignums)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(4.1855804968213567e298, Grisu.PRECISION, 20,buffer,bignums)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(4.1855804968213567e298, Grisu.SHORTEST, 0,buffer,bignums)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(4128420500802942e-24, Grisu.SHORTEST, 0, buffer,bignums)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(4294967272.0, Grisu.FIXED, 5, buffer,bignums)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(4294967272.0, Grisu.PRECISION, 14, buffer,bignums)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(4294967272.0, Grisu.SHORTEST, 0, buffer,bignums)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(5.5626846462680035e-309, Grisu.PRECISION, 1, buffer,bignums)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(5.5626846462680035e-309, Grisu.SHORTEST, 0, buffer,bignums)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(Float32(1.2341e-41), Grisu.SHORTEST, 0, buffer,bignums)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(Float32(3.26494756798464e14), Grisu.SHORTEST, 0, buffer,bign/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(Float32(3.32306998946228968226e+35), Grisu.SHORTEST, 0, buff/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(Float32(3.3554432e7), Grisu.SHORTEST, 0, buffer,bignums)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(Float32(3.91132223637771935344e37), Grisu.SHORTEST, 0, buffe/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(Float32(4294967272.0), Grisu.SHORTEST, 0, buffer,bignums)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(max_double, Grisu.PRECISION, 7, buffer,bignums)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(max_double, Grisu.SHORTEST, 0, buffer,bignums)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(max_float, Grisu.SHORTEST, 0, buffer,bignums)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(min_double, Grisu.FIXED, 5, buffer,bignums)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(min_double, Grisu.PRECISION, 5, buffer,bignums)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(min_double, Grisu.SHORTEST, 0, buffer,bignums)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(min_float, Grisu.SHORTEST, 0, buffer,bignums)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(v, Grisu.FIXED, 1, buffer,bignums)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(v, Grisu.FIXED, 5, buffer,bignums)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(v, Grisu.PRECISION, 19, buffer,bignums)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(v, Grisu.PRECISION, 20, buffer,bignums)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(v, Grisu.PRECISION, 4, buffer,bignums)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.bignumdtoa(v, Grisu.SHORTEST, 0, buffer,bignums)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.00000000000000000001, 0,20, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.000000000000000000014, 0,20, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.000000000000000000016, 0,20, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.0000000000000000001, 0,20, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.000000000000000000104, 0,20, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.000000000000000000106, 0,20, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.000000000000000001, 0,20, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.000000000000000001004, 0,20, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.000000000000000001006, 0,20, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.00000000000000001, 0,20, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.000000000000000010004, 0,20, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.000000000000000010006, 0,20, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.0000000000000001, 0,20, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.000000000000000100004, 0,20, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.000000000000000100006, 0,20, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.000000000000001, 0,20, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.000000000000001000004, 0,20, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.000000000000001000006, 0,20, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.00000000000001, 0,15, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.0000000000000104, 0,15, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.0000000000000106, 0,15, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.0000000000001, 0,15, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.0000000000001004, 0,15, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.0000000000001006, 0,15, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.000000000001, 0,15, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.0000000000010004, 0,15, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.0000000000010006, 0,15, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.00000000001, 0,15, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.0000000000100004, 0,15, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.0000000000100006, 0,15, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.0000000001, 0,15, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.0000000001000004, 0,15, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.0000000001000006, 0,15, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.000000001, 0,10, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.00000000104, 0,10, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.00000000106, 0,10, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.00000001, 0,10, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.00000001004, 0,10, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.00000001006, 0,10, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.0000001, 0,10, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.00000010004, 0,10, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.00000010006, 0,10, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.000000999999999999996, 0,20, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.000001, 0,10, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.00000100004, 0,10, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.00000100006, 0,10, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.00000999999999999996, 0,19, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.00001, 0,10, buffer) #todo$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.00001000004, 0,10, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.00001000006, 0,10, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.0000999999999999996, 0,18, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.0001, 0,10, buffer) #todo$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.00010000004, 0,10, buffer) #todo$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.00010000006, 0,10, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.000999999999999996, 0,17, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.001, 0,10, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.00100000004, 0,10, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.00100000006, 0,10, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.00999999999999996, 0,16, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.01, 0,10, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.01000000004, 0,10, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.01000000006, 0,10, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.1, 0,10, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.10000000004, 0,10, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.10000000006, 0,10, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.5, 0,0, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.6, 0,0, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.96, 0,1, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.996, 0,2, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.9996, 0,3, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.99996, 0,4, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.999996, 0,5, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.9999996, 0,6, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.99999996, 0,7, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.999999996, 0,8, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.9999999996, 0,9, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.99999999996, 0,10, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.999999999996, 0,11, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.9999999999996, 0,12, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.99999999999996, 0,13, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.999999999999996, 0,14, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0.9999999999999996, 0,15, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(0xFFFFFFFF, 0,5, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(1.0, 0,0, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(1.0, 0,1, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(1.0, 0,15, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(1.00000001, 0,15, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(1.5, 0,5, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(1.55, 0,1, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(1.55, 0,5, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(1.9023164229540652612705182e-23, 0,8,buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(1000000000000000128.0, 0,0,buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(12345678.901234, 0,4, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(1e-123, 0,0, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(1e-123, 0,2, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(1e-21, 0,20, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(1e-22, 0,20, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(1e-23, 0,10, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(1e-23, 0,20, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(1e21, 0,5, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(323423.234234, 0,10, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(4.8184662102767651659096515e-04, 0,19,buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(42, 0,20, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(4294967296.0, 0,5, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(6.9999999999999989514240000e+21, 0,5, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(6e-21, 0,20, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(9.1193616301674545152000000e+19, 0,0,buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(98765.432109, 0,5, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(999999999999999868928.00, 0,2, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(Float16(0.0000001), 0,10, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(Float16(0.000001), 0,10, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(Float16(0.00001), 0,10, buffer) #todo$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(Float16(0.0001), 0,10, buffer) #todo$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(Float16(0.001), 0,10, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(Float16(0.01), 0,10, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(Float16(0.1), 0,10, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(Float16(0.5), 0,0, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(Float16(0.6), 0,0, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(Float16(0.96), 0,1, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(Float16(0.996), 0,2, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(Float16(0.9996), 0,3, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(Float16(0.99996), 0,4, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(Float16(0.999996), 0,5, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(Float16(0.9999996), 0,6, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(Float16(0.99999996), 0,7, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(Float16(1.0), 0,0, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(Float16(1.0), 0,1, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(Float16(1.0), 0,15, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(Float16(1.00000001), 0,15, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(Float16(1.5), 0,5, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(Float16(1.55), 0,1, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(Float16(1.55), 0,5, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastfixedtoa(Float16(42), 0,20, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastprecision(1.0, 3, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastprecision(1.5, 10, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastprecision(2147483648.0, 5,buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastprecision(3.5844466002796428e+298, 10,buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastprecision(4.1855804968213567e298, 17,buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastprecision(4294967272.0, 14,buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastprecision(5.5626846462680035e-309, 1,buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastprecision(Float16(1.0), 3, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastprecision(Float16(1.5), 10, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastprecision(max_double, 7,buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastprecision(min_double, 5,buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastprecision(v, 17, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastprecision(v, 18, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastprecision(v, 4, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastshortest(2147483648.0, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastshortest(3.5844466002796428e+298, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastshortest(4.1855804968213567e298, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastshortest(4294967272.0, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastshortest(5.5626846462680035e-309, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastshortest(Float32(1.2341e-41), buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastshortest(Float32(3.26494756798464e14), buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastshortest(Float32(3.32306998946228968226e+35), buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastshortest(Float32(3.3554432e7), buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastshortest(Float32(3.91132223637771935344e37), buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastshortest(Float32(4294967272.0), buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastshortest(max_double, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastshortest(max_double,buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastshortest(max_float, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastshortest(min_double, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastshortest(min_double,buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastshortest(min_float, buffer)$/;"	v
status,len,point	test/grisu.jl	/^status,len,point = Grisu.fastshortest(v,  buffer)$/;"	v
std	stdlib/Statistics/src/Statistics.jl	/^std(A::AbstractArray; corrected::Bool=true, mean=nothing, dims=:) = _std(A, corrected, mean, dim/;"	f
std	stdlib/Statistics/src/Statistics.jl	/^std(iterable; corrected::Bool=true, mean=nothing) =$/;"	f
std_dll	Makefile	/^define std_dll$/;"	m
std_so	Makefile	/^define std_so$/;"	m
stderr	base/boot.jl	/^const stderr = CoreSTDERR()$/;"	v
stderr	base/coreio.jl	/^stderr = Core.stderr$/;"	v
stdin	base/coreio.jl	/^stdin = devnull$/;"	v
stdlib-external	deps/tools/stdlib-external.mk	/^define stdlib-external$/;"	m
stdm	stdlib/Statistics/src/Statistics.jl	/^stdm(A::AbstractArray, m; corrected::Bool=true) =$/;"	f
stdm	stdlib/Statistics/src/Statistics.jl	/^stdm(iterable, m; corrected::Bool=true) =$/;"	f
stdout	base/boot.jl	/^const stdout = CoreSTDOUT()$/;"	v
stdout	base/coreio.jl	/^stdout = Core.stdout$/;"	v
stebz!	stdlib/LinearAlgebra/src/lapack.jl	/^        function stebz!(range::AbstractChar, order::AbstractChar, vl::$elty, vu::$elty, il::Inte/;"	f
stegr!	stdlib/LinearAlgebra/src/lapack.jl	/^        function stegr!(jobz::AbstractChar, range::AbstractChar, dv::AbstractVector{$elty}, ev::/;"	f
stegr!	stdlib/LinearAlgebra/src/lapack.jl	/^stegr!(jobz::AbstractChar, dv::AbstractVector, ev::AbstractVector) = stegr!(jobz, 'A', dv, ev, 0/;"	f
stein!	stdlib/LinearAlgebra/src/lapack.jl	/^        function stein!(dv::AbstractVector{$elty}, ev_in::AbstractVector{$elty}, w_in::AbstractV/;"	f
stein!	stdlib/LinearAlgebra/src/lapack.jl	/^stein!(dv::AbstractVector, ev::AbstractVector, eval::Real) = stein!(dv, ev, [eval], zeros(BlasIn/;"	f
stein!	stdlib/LinearAlgebra/src/lapack.jl	/^stein!(dv::AbstractVector, ev::AbstractVector, w_in::AbstractVector) = stein!(dv, ev, w_in, zero/;"	f
step	base/range.jl	/^step(r::LinRange) = (last(r)-first(r))\/r.lendiv$/;"	f
step	base/range.jl	/^step(r::StepRange) = r.step$/;"	f
step	base/range.jl	/^step(r::StepRangeLen{T}) where {T} = T(r.step)$/;"	f
step_hp	base/range.jl	/^step_hp(r::AbstractRange) = step(r)$/;"	f
step_hp	base/range.jl	/^step_hp(r::StepRangeLen) = r.step$/;"	f
steprange_last	base/range.jl	/^function steprange_last(start::T, step, stop) where T$/;"	f
steprange_last_empty	base/range.jl	/^function steprange_last_empty(start::Integer, step, stop)$/;"	f
steprange_last_empty	base/range.jl	/^steprange_last_empty(start, step, stop) = start - step$/;"	f
steprangelen_hp	base/twiceprecision.jl	/^function steprangelen_hp(::Type{Float64}, ref::F_or_FF,$/;"	f
steprangelen_hp	base/twiceprecision.jl	/^function steprangelen_hp(::Type{Float64}, ref::Tuple{Integer,Integer},$/;"	f
steprangelen_hp	base/twiceprecision.jl	/^function steprangelen_hp(::Type{T}, ref::F_or_FF,$/;"	f
steprangelen_hp	base/twiceprecision.jl	/^function steprangelen_hp(::Type{T}, ref::Tuple{Integer,Integer},$/;"	f
stev!	stdlib/LinearAlgebra/src/lapack.jl	/^        function stev!(job::AbstractChar, dv::AbstractVector{$elty}, ev::AbstractVector{$elty})$/;"	f
sticky	src/julia.h	/^    uint8_t sticky; \/\/ record whether this Task can be migrated to a new thread$/;"	m	struct:_jl_task_t	typeref:typename:uint8_t
stk_blob	test/gcext/gcext.c	/^jl_value_t *stk_blob(jl_value_t *s)$/;"	f	typeref:typename:jl_value_t *
stk_make	test/gcext/gcext.c	/^jl_value_t *stk_make()$/;"	f	typeref:typename:jl_value_t *
stk_pop	test/gcext/gcext.c	/^jl_value_t *stk_pop(jl_value_t *s)$/;"	f	typeref:typename:jl_value_t *
stk_push	test/gcext/gcext.c	/^void stk_push(jl_value_t *s, jl_value_t *v)$/;"	f	typeref:typename:void
stk_size	test/gcext/gcext.c	/^size_t stk_size(jl_value_t *s)$/;"	f	typeref:typename:size_t
stk_top	test/gcext/gcext.c	/^jl_value_t *stk_top(jl_value_t *s)$/;"	f	typeref:typename:jl_value_t *
stk_type	test/gcext/gcext.c	/^jl_value_t *stk_type()$/;"	f	typeref:typename:jl_value_t *
stkbuf	src/julia.h	/^    void *stkbuf; \/\/ malloc'd memory (either copybuf or stack)$/;"	m	struct:_jl_task_t	typeref:typename:void *
stmt_affects_purity	base/compiler/optimize.jl	/^function stmt_affects_purity(@nospecialize(stmt), ir)$/;"	f
stmt_effect_free	base/compiler/ssair/queries.jl	/^function stmt_effect_free(@nospecialize(stmt), @nospecialize(rt), src, sptypes::Vector{Any})$/;"	f
stopFindJuliaWithSpotlight	contrib/mac/frameworkapp/JuliaLauncher/AppDelegate.m	/^- (void)stopFindJuliaWithSpotlight {$/;"	m	implementation:AppDelegate
stop_reading	base/stream.jl	/^    function stop_reading(stream::LibuvStream)$/;"	f
stop_reading	base/stream.jl	/^stop_reading(s::BufferStream) = nothing$/;"	f
stop_timer	stdlib/Profile/src/Profile.jl	/^stop_timer() = ccall(:jl_profile_stop_timer, Cvoid, ())$/;"	f
stop_watching	stdlib/FileWatching/src/FileWatching.jl	/^function stop_watching(t::FileMonitor)$/;"	f
stop_watching	stdlib/FileWatching/src/FileWatching.jl	/^function stop_watching(t::PollingFileWatcher)$/;"	f
store_backedges	base/compiler/typeinfer.jl	/^function store_backedges(caller, edges::Vector)$/;"	f
store_backedges	base/compiler/typeinfer.jl	/^function store_backedges(frame::InferenceState)$/;"	f
store_backedges	base/compiler/typeinfer.jl	/^store_backedges(caller, edges::Nothing) = nothing$/;"	f
store_cell	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^function store_cell(dlmoffsets::DLMOffsets, row::Int, col::Int,$/;"	f
store_cell	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^function store_cell(dlmstore::DLMStore{T}, row::Int, col::Int,$/;"	f
store_def_flag	src/codegen.cpp	/^static void store_def_flag(jl_codectx_t &ctx, const jl_varinfo_t &vi, bool val)$/;"	f	typeref:typename:void	file:
storedinds	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline storedinds(A::AbstractSparseMatrixCSC) = rowvals(A)$/;"	f
storedinds	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline storedinds(A::SparseVector) = nonzeroinds(A)$/;"	f
storedvals	stdlib/SparseArrays/src/higherorderfns.jl	/^@inline storedvals(A::SparseVecOrMat) = nonzeros(A)$/;"	f
str	doc/make.jl	/^str = read(joinpath(@__DIR__, "..", "NEWS.md"), String)$/;"	v
str	stdlib/InteractiveUtils/test/runtests.jl	/^str = String(take!(iob))$/;"	v
str	stdlib/Mmap/test/runtests.jl	/^str = readline(s)$/;"	v
str	stdlib/Serialization/test/runtests.jl	/^str = String(take!(io))$/;"	v
str	test/compiler/codegen.jl	/^str = String(take!(io))$/;"	v
str	test/file.jl	/^str = readline(s)$/;"	v
str	test/offsetarray.jl	/^str = String(take!(io))$/;"	v
str_	src/jltypes.c	/^STATIC_INLINE const char *str_(const char *s) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE const char *
str_22330	test/compiler/codegen.jl	/^str_22330 = """$/;"	v
str_isspace	src/rtutils.c	/^int str_isspace(char *p)$/;"	f	typeref:typename:int
strcasecmp	src/support/dtypes.h	/^#define strcasecmp /;"	d
stream_to_string	src/flisp/iostream.c	/^value_t stream_to_string(fl_context_t *fl_ctx, value_t *ps)$/;"	f	typeref:typename:value_t
strerror	base/libc.jl	/^strerror() = strerror(errno())$/;"	f
strerror	base/libc.jl	/^strerror(e::Integer) = unsafe_string(ccall(:strerror, Cstring, (Int32,), e))$/;"	f
strftime	base/libc.jl	/^function strftime(fmt::AbstractString, tm::TmStruct)$/;"	f
strftime	base/libc.jl	/^strftime(fmt::AbstractString, t::Real) = strftime(fmt, TmStruct(t))$/;"	f
strftime	base/libc.jl	/^strftime(t) = strftime("%c", t)$/;"	f
stride	base/abstractarray.jl	/^stride(A::AbstractArray, k::Integer) = strides(A)[k]$/;"	f
stride	base/reinterpretarray.jl	/^function stride(a::Union{DenseArray,StridedReshapedArray,StridedReinterpretArray}, i::Int)$/;"	f
stride	base/subarray.jl	/^stride(V::SubArray, d::Integer) = d <= ndims(V) ? strides(V)[d] : strides(V)[end] * size(V)[end]$/;"	f
stride1	stdlib/LinearAlgebra/src/LinearAlgebra.jl	/^stride1(x) = stride(x,1)$/;"	f
stride1	stdlib/LinearAlgebra/src/LinearAlgebra.jl	/^stride1(x::Array) = 1$/;"	f
stride1	stdlib/LinearAlgebra/src/LinearAlgebra.jl	/^stride1(x::DenseArray) = stride(x, 1)::Int$/;"	f
strides	base/abstractarray.jl	/^function strides end$/;"	f
strides	base/reinterpretarray.jl	/^strides(a::Union{DenseArray,StridedReshapedArray,StridedReinterpretArray}) = size_to_strides(1, /;"	f
strides	base/subarray.jl	/^strides(V::SubArray) = substrides(strides(V.parent), V.indices)$/;"	f
string	base/gmp.jl	/^function string(n::BigInt; base::Integer = 10, pad::Integer = 1)$/;"	f
string	base/intfuncs.jl	/^function string(n::Integer; base::Integer = 10, pad::Integer = 1)$/;"	f
string	base/intfuncs.jl	/^string(b::Bool) = b ? "true" : "false"$/;"	f
string	base/loading.jl	/^string(hash::SHA1) = bytes2hex(hash.bytes)$/;"	f
string	base/mpfr.jl	/^string(b::BigFloat) = _string(b)$/;"	f
string	base/strings/basic.jl	/^string() = ""$/;"	f
string	base/strings/basic.jl	/^string(s::AbstractString) = s$/;"	f
string	base/strings/io.jl	/^string(xs...) = print_to_string(xs...)$/;"	f
string	base/strings/substring.jl	/^function string(a::Union{Char, String, SubString{String}}...)$/;"	f
string	base/strings/substring.jl	/^string(a::String)            = String(a)$/;"	f
string	base/strings/substring.jl	/^string(a::SubString{String}) = String(a)$/;"	f
string	base/uuid.jl	/^    function string(u::UUID)$/;"	f
string->list	src/flisp/aliases.scm	/^(define (string->list s)$/;"	f
string->symbol	src/flisp/aliases.scm	/^(define string->symbol symbol)$/;"	f
string-append	src/flisp/aliases.scm	/^(define string-append string)$/;"	f
string-length	src/flisp/aliases.scm	/^(define string-length string.count)$/;"	f
string-replace	src/julia-parser.scm	/^(define (string-replace s a b)$/;"	f
string-split	src/julia-parser.scm	/^(define (string-split s sep)$/;"	f
string-split-	src/julia-parser.scm	/^(define (string-split- s sep start splits)$/;"	f
string-to-number	src/julia-parser.scm	/^(define (string-to-number s r is-float32)$/;"	f
string.rep	src/flisp/profile.scm	/^(define (string.rep s k)$/;"	f
string.rpad	src/flisp/profile.scm	/^(define (string.rpad s n c) (string s (string.rep c (- n (string.count s)))))$/;"	f
stringConstPtr	src/cgutils.cpp	/^static Value *stringConstPtr(IRBuilder<> &irbuilder, const std::string &txt)$/;"	f	typeref:typename:Value *	file:
stringConstants	src/cgutils.cpp	/^static StringMap<GlobalVariable*> stringConstants;$/;"	v	typeref:typename:StringMap<GlobalVariable * >	file:
string_from_cstr	src/flisp/cvalues.c	/^value_t string_from_cstr(fl_context_t *fl_ctx, char *str)$/;"	f	typeref:typename:value_t
string_from_cstrn	src/flisp/cvalues.c	/^value_t string_from_cstrn(fl_context_t *fl_ctx, char *str, size_t n)$/;"	f	typeref:typename:value_t
string_index_err	base/strings/string.jl	/^@noinline string_index_err(s::AbstractString, i::Integer) =$/;"	f
string_mpfr	base/mpfr.jl	/^function string_mpfr(x::BigFloat, fmt::String)$/;"	f
string_with_env	base/strings/io.jl	/^function string_with_env(env, xs...)$/;"	f
stringfunc_info	src/flisp/string.c	/^static const builtinspec_t stringfunc_info[] = {$/;"	v	typeref:typename:const builtinspec_t[]	file:
stringfuncs_init	src/flisp/string.c	/^void stringfuncs_init(fl_context_t *fl_ctx)$/;"	f	typeref:typename:void
stringmime	stdlib/Base64/src/Base64.jl	/^stringmime(m::AbstractString, x; context=nothing) = stringmime(MIME(m), x; context=context)$/;"	f
stringmime	stdlib/Base64/src/Base64.jl	/^stringmime(m::MIME, x; context=nothing) = istextmime(m) ? Base.Multimedia._textrepr(m, x, contex/;"	f
stringreplace	Makefile	/^define stringreplace$/;"	m
stringtype	src/flisp/flisp.h	/^    fltype_t *stringtype, *wcstringtype;$/;"	m	struct:_fl_context_t	typeref:typename:fltype_t *
stringtypesym	src/flisp/flisp.h	/^    value_t stringtypesym, wcstringtypesym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
strip	base/strings/util.jl	/^strip(f, s::AbstractString) = lstrip(f, rstrip(f, s))$/;"	f
strip	base/strings/util.jl	/^strip(s::AbstractString) = lstrip(rstrip(s))$/;"	f
strip	base/strings/util.jl	/^strip(s::AbstractString, chars::Chars) = lstrip(rstrip(s, chars), chars)$/;"	f
strip-leading-0s	src/julia-parser.scm	/^(define (strip-leading-0s s)$/;"	f
strip-leading-newline	src/julia-parser.scm	/^(define (strip-leading-newline s)$/;"	f
strip_trailing_junk!	base/compiler/ssair/slot2ssa.jl	/^function strip_trailing_junk!(ci::CodeInfo, code::Vector{Any}, flags::Vector{UInt8})$/;"	f
stripmd	stdlib/REPL/src/docview.jl	/^stripmd(@nospecialize x) = string(x) # for random objects interpolated into the docstring$/;"	f
stripmd	stdlib/REPL/src/docview.jl	/^stripmd(x::AbstractString) = x  # base case$/;"	f
stripmd	stdlib/REPL/src/docview.jl	/^stripmd(x::Markdown.Admonition) = "$(stripmd(x.content))"$/;"	f
stripmd	stdlib/REPL/src/docview.jl	/^stripmd(x::Markdown.BlockQuote) = "$(stripmd(x.content))"$/;"	f
stripmd	stdlib/REPL/src/docview.jl	/^stripmd(x::Markdown.Bold) = "$(stripmd(x.text))"$/;"	f
stripmd	stdlib/REPL/src/docview.jl	/^stripmd(x::Markdown.Code) = "$(stripmd(x.code))"$/;"	f
stripmd	stdlib/REPL/src/docview.jl	/^stripmd(x::Markdown.Footnote) = "$(stripmd(x.id)) $(stripmd(x.text))"$/;"	f
stripmd	stdlib/REPL/src/docview.jl	/^stripmd(x::Markdown.Header) = stripmd(x.text)$/;"	f
stripmd	stdlib/REPL/src/docview.jl	/^stripmd(x::Markdown.HorizontalRule) = " "$/;"	f
stripmd	stdlib/REPL/src/docview.jl	/^stripmd(x::Markdown.Image) = "$(stripmd(x.alt)) $(x.url)"$/;"	f
stripmd	stdlib/REPL/src/docview.jl	/^stripmd(x::Markdown.Italic) = "$(stripmd(x.text))"$/;"	f
stripmd	stdlib/REPL/src/docview.jl	/^stripmd(x::Markdown.LaTeX) = "$(x.formula)"$/;"	f
stripmd	stdlib/REPL/src/docview.jl	/^stripmd(x::Markdown.LineBreak) = " "$/;"	f
stripmd	stdlib/REPL/src/docview.jl	/^stripmd(x::Markdown.Link) = "$(stripmd(x.text)) $(x.url)"$/;"	f
stripmd	stdlib/REPL/src/docview.jl	/^stripmd(x::Markdown.List) = join(map(stripmd, x.items), " ")$/;"	f
stripmd	stdlib/REPL/src/docview.jl	/^stripmd(x::Markdown.MD) = join(map(stripmd, x.content), " ")$/;"	f
stripmd	stdlib/REPL/src/docview.jl	/^stripmd(x::Markdown.Paragraph) = stripmd(x.content)$/;"	f
stripmd	stdlib/REPL/src/docview.jl	/^stripmd(x::Markdown.Table) =$/;"	f
stripmd	stdlib/REPL/src/docview.jl	/^stripmd(x::Nothing) = " "$/;"	f
stripmd	stdlib/REPL/src/docview.jl	/^stripmd(x::Vector) = string(map(stripmd, x)...)$/;"	f
striptype	base/errorshow.jl	/^striptype(::Any) = nothing$/;"	f
striptype	base/errorshow.jl	/^striptype(::Type{T}) where {T} = T$/;"	f
strncasecmp	src/support/dtypes.h	/^#define strncasecmp /;"	d
strptime	base/libc.jl	/^function strptime(fmt::AbstractString, timestr::AbstractString)$/;"	f
strptime	base/libc.jl	/^strptime(timestr::AbstractString) = strptime("%c", timestr)$/;"	f
strptime	src/support/strptime.c	/^strptime(const char *buf, const char *fmt, struct tm *tm)$/;"	f	typeref:typename:char *
strptime_l	src/support/strptime.c	/^strptime_l(const char *buf, const char *fmt, struct tm *tm, locale_t loc)$/;"	f	typeref:typename:char *
strquote	test/show.jl	/^macro strquote(ex)$/;"	f
strrefcomp	src/debuginfo.cpp	/^struct strrefcomp {$/;"	s	file:
strs	stdlib/LibGit2/src/types.jl	/^strs = String[...]$/;"	v
strs	test/offsetarray.jl	/^strs = split(strip(String(take!(io))), '\\n')$/;"	v
strsignal	src/signals-win.c	/^static char *strsignal(int sig)$/;"	f	typeref:typename:char *	file:
strtoll	src/support/dtypes.h	/^#define strtoll /;"	d
strtoull	src/support/dtypes.h	/^#define strtoull /;"	d
strtoull_0b0o	src/flisp/read.c	/^static unsigned long long strtoull_0b0o(const char *nptr, char **endptr, int base)$/;"	f	typeref:typename:unsigned long long	file:
struct-def-expr	src/julia-syntax.scm	/^(define (struct-def-expr name params super fields mut)$/;"	f
struct-def-expr-	src/julia-syntax.scm	/^(define (struct-def-expr- name params bounds super fields0 mut)$/;"	f
struct1	src/ccalltest.c	/^} struct1;$/;"	t	typeref:struct:__anon84ad8c4c0208	file:
struct10	src/ccalltest.c	/^} struct10;$/;"	t	typeref:struct:__anon84ad8c4c1108	file:
struct11	src/ccalltest.c	/^} struct11;$/;"	t	typeref:struct:__anon84ad8c4c1208	file:
struct12	src/ccalltest.c	/^} struct12;$/;"	t	typeref:struct:__anon84ad8c4c1308	file:
struct13	src/ccalltest.c	/^} struct13;$/;"	t	typeref:struct:__anon84ad8c4c1408	file:
struct14	src/ccalltest.c	/^} struct14;$/;"	t	typeref:struct:__anon84ad8c4c1508	file:
struct15	src/ccalltest.c	/^} struct15;$/;"	t	typeref:struct:__anon84ad8c4c1608	file:
struct16	src/ccalltest.c	/^} struct16;$/;"	t	typeref:struct:__anon84ad8c4c1708	file:
struct17	src/ccalltest.c	/^} struct17;$/;"	t	typeref:struct:__anon84ad8c4c1808	file:
struct18	src/ccalltest.c	/^} struct18;$/;"	t	typeref:struct:__anon84ad8c4c1908	file:
struct2a	src/ccalltest.c	/^} struct2a;$/;"	t	typeref:struct:__anon84ad8c4c0308	file:
struct2b	src/ccalltest.c	/^} struct2b;$/;"	t	typeref:struct:__anon84ad8c4c0608	file:
struct3a	src/ccalltest.c	/^} struct3a;$/;"	t	typeref:struct:__anon84ad8c4c0708	file:
struct3b	src/ccalltest.c	/^} struct3b;$/;"	t	typeref:struct:__anon84ad8c4c0a08	file:
struct4	src/ccalltest.c	/^} struct4;$/;"	t	typeref:struct:__anon84ad8c4c0b08	file:
struct5	src/ccalltest.c	/^} struct5;$/;"	t	typeref:struct:__anon84ad8c4c0c08	file:
struct6	src/ccalltest.c	/^} struct6;$/;"	t	typeref:struct:__anon84ad8c4c0d08	file:
struct7	src/ccalltest.c	/^} struct7;$/;"	t	typeref:struct:__anon84ad8c4c0e08	file:
struct8	src/ccalltest.c	/^} struct8;$/;"	t	typeref:struct:__anon84ad8c4c0f08	file:
struct9	src/ccalltest.c	/^} struct9;$/;"	t	typeref:struct:__anon84ad8c4c1008	file:
struct_aa64_1	src/ccalltest.c	/^} struct_aa64_1;$/;"	t	typeref:struct:__anon84ad8c4c2808	file:
struct_aa64_2	src/ccalltest.c	/^} struct_aa64_2;$/;"	t	typeref:struct:__anon84ad8c4c2908	file:
struct_aa64_3	src/ccalltest.c	/^} struct_aa64_3;$/;"	t	typeref:struct:__anon84ad8c4c2a08	file:
struct_aa64_4	src/ccalltest.c	/^} struct_aa64_4;$/;"	t	typeref:struct:__anon84ad8c4c2b08	file:
struct_big	src/ccalltest.c	/^} struct_big;$/;"	t	typeref:struct:__anon84ad8c4c1a08	file:
struct_decl	src/julia.h	/^    void *struct_decl;  \/\/llvm::Type*$/;"	m	struct:_jl_datatype_t	typeref:typename:void *
struct_huge1_ppc64	src/ccalltest.c	/^} struct_huge1_ppc64;$/;"	t	typeref:struct:__anon84ad8c4c2c08	file:
struct_huge1_ppc64_hva	src/ccalltest.c	/^} struct_huge1_ppc64_hva;$/;"	t	typeref:struct:__anon84ad8c4c3308	file:
struct_huge1a	src/ccalltest.c	/^} struct_huge1a;$/;"	t	typeref:struct:__anon84ad8c4c1b08	file:
struct_huge1b	src/ccalltest.c	/^} struct_huge1b;$/;"	t	typeref:struct:__anon84ad8c4c1c08	file:
struct_huge2_ppc64	src/ccalltest.c	/^} struct_huge2_ppc64;$/;"	t	typeref:struct:__anon84ad8c4c2d08	file:
struct_huge2_ppc64_hva	src/ccalltest.c	/^} struct_huge2_ppc64_hva;$/;"	t	typeref:struct:__anon84ad8c4c3408	file:
struct_huge2a	src/ccalltest.c	/^} struct_huge2a;$/;"	t	typeref:struct:__anon84ad8c4c1d08	file:
struct_huge2b	src/ccalltest.c	/^} struct_huge2b;$/;"	t	typeref:struct:__anon84ad8c4c1e08	file:
struct_huge3_ppc64	src/ccalltest.c	/^} struct_huge3_ppc64;$/;"	t	typeref:struct:__anon84ad8c4c2e08	file:
struct_huge3_ppc64_hva	src/ccalltest.c	/^} struct_huge3_ppc64_hva;$/;"	t	typeref:struct:__anon84ad8c4c3608	file:
struct_huge3a	src/ccalltest.c	/^} struct_huge3a;$/;"	t	typeref:struct:__anon84ad8c4c1f08	file:
struct_huge3b	src/ccalltest.c	/^} struct_huge3b;$/;"	t	typeref:struct:__anon84ad8c4c2008	file:
struct_huge3c	src/ccalltest.c	/^} struct_huge3c;$/;"	t	typeref:struct:__anon84ad8c4c2108	file:
struct_huge4_ppc64	src/ccalltest.c	/^} struct_huge4_ppc64;$/;"	t	typeref:struct:__anon84ad8c4c3008	file:
struct_huge4_ppc64_hva	src/ccalltest.c	/^} struct_huge4_ppc64_hva;$/;"	t	typeref:struct:__anon84ad8c4c3808	file:
struct_huge4a	src/ccalltest.c	/^} struct_huge4a;$/;"	t	typeref:struct:__anon84ad8c4c2208	file:
struct_huge4b	src/ccalltest.c	/^} struct_huge4b;$/;"	t	typeref:struct:__anon84ad8c4c2308	file:
struct_huge5_ppc64	src/ccalltest.c	/^} struct_huge5_ppc64;$/;"	t	typeref:struct:__anon84ad8c4c3108	file:
struct_huge5_ppc64_hva	src/ccalltest.c	/^} struct_huge5_ppc64_hva;$/;"	t	typeref:struct:__anon84ad8c4c3908	file:
struct_huge5a	src/ccalltest.c	/^} struct_huge5a;$/;"	t	typeref:struct:__anon84ad8c4c2408	file:
struct_huge5b	src/ccalltest.c	/^} struct_huge5b;$/;"	t	typeref:struct:__anon84ad8c4c2508	file:
struct_huge6_ppc64	src/ccalltest.c	/^} struct_huge6_ppc64;$/;"	t	typeref:struct:__anon84ad8c4c3208	file:
struct_spill_float	src/ccalltest.c	/^} struct_spill_float;$/;"	t	typeref:struct:__anon84ad8c4c2708	file:
struct_spill_pint	src/ccalltest.c	/^} struct_spill_pint;$/;"	t	typeref:struct:__anon84ad8c4c2608	file:
structdiff	base/namedtuple.jl	/^function structdiff(a::NamedTuple{an}, b::Union{NamedTuple{bn}, Type{NamedTuple{bn}}}) where {an/;"	f
structtype_sym	src/ast.c	/^jl_sym_t *structtype_sym;   jl_sym_t *foreigncall_sym;$/;"	v	typeref:typename:jl_sym_t *
structured_broadcast_alloc	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^function structured_broadcast_alloc(bc, ::Type{<:Bidiagonal}, ::Type{ElType}, n) where {ElType}$/;"	f
structured_broadcast_alloc	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^structured_broadcast_alloc(bc, ::Type{<:Diagonal}, ::Type{ElType}, n) where {ElType} =$/;"	f
structured_broadcast_alloc	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^structured_broadcast_alloc(bc, ::Type{<:LowerTriangular}, ::Type{ElType}, n) where {ElType} =$/;"	f
structured_broadcast_alloc	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^structured_broadcast_alloc(bc, ::Type{<:SymTridiagonal}, ::Type{ElType}, n) where {ElType} =$/;"	f
structured_broadcast_alloc	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^structured_broadcast_alloc(bc, ::Type{<:Tridiagonal}, ::Type{ElType}, n) where {ElType} =$/;"	f
structured_broadcast_alloc	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^structured_broadcast_alloc(bc, ::Type{<:UnitLowerTriangular}, ::Type{ElType}, n) where {ElType} /;"	f
structured_broadcast_alloc	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^structured_broadcast_alloc(bc, ::Type{<:UnitUpperTriangular}, ::Type{ElType}, n) where {ElType} /;"	f
structured_broadcast_alloc	stdlib/LinearAlgebra/src/structuredbroadcast.jl	/^structured_broadcast_alloc(bc, ::Type{<:UpperTriangular}, ::Type{ElType}, n) where {ElType} =$/;"	f
struverror	base/libuv.jl	/^struverror(err::Int32) = unsafe_string(ccall(:uv_strerror, Cstring, (Int32,), err))$/;"	f
stuffcol!	stdlib/SparseArrays/src/sparsematrix.jl	/^@inline function stuffcol!(Xi::AbstractSparseMatrixCSC, colptr, rowval, nzval,$/;"	f
stupdate!	base/compiler/typelattice.jl	/^function stupdate!(state::Nothing, changes::StateUpdate)$/;"	f
stupdate!	base/compiler/typelattice.jl	/^function stupdate!(state::VarTable, changes::StateUpdate)$/;"	f
stupdate!	base/compiler/typelattice.jl	/^function stupdate!(state::VarTable, changes::VarTable)$/;"	f
stupdate!	base/compiler/typelattice.jl	/^stupdate!(state::Nothing, changes::Nothing) = false$/;"	f
stupdate!	base/compiler/typelattice.jl	/^stupdate!(state::Nothing, changes::VarTable) = copy(changes)$/;"	f
stupdate1!	base/compiler/typelattice.jl	/^function stupdate1!(state::VarTable, change::StateUpdate)$/;"	f
sub	src/runtime_intrinsics.c	/^#define sub(/;"	d	file:
sub2ind_vec	base/abstractarray.jl	/^sub2ind_vec(inds, i, I) = (@_inline_meta; _sub2ind(inds, _sub2ind_vec(i, I...)...))$/;"	f
sub_1dim	stdlib/SharedArrays/src/SharedArrays.jl	/^sub_1dim(S::SharedArray, pidx) = view(S.s, range_1dim(S, pidx))$/;"	f
sub_fast	base/fastmath.jl	/^    sub_fast(a::T, y::Complex{T}) where {T<:FloatTypes} =$/;"	f
sub_fast	base/fastmath.jl	/^    sub_fast(x::Complex{T}, b::T) where {T<:FloatTypes} =$/;"	f
sub_fast	base/fastmath.jl	/^    sub_fast(x::T, y::T) where {T<:ComplexTypes} =$/;"	f
sub_fast	base/fastmath.jl	/^sub_fast(x::FloatTypes) = neg_float_fast(x)$/;"	f
sub_fast	base/fastmath.jl	/^sub_fast(x::T, y::T) where {T<:FloatTypes} = sub_float_fast(x, y)$/;"	f
sub_msp	src/subtype.c	/^static int sub_msp(jl_value_t *a, jl_value_t *b, jl_typeenv_t *env)$/;"	f	typeref:typename:int	file:
sub_with_overflow	base/checked.jl	/^function sub_with_overflow end$/;"	f
sub_with_overflow	base/checked.jl	/^function sub_with_overflow(x::T, y::T) where T<:BrokenSignedInt$/;"	f
sub_with_overflow	base/checked.jl	/^function sub_with_overflow(x::T, y::T) where T<:BrokenUnsignedInt$/;"	f
sub_with_overflow	base/checked.jl	/^sub_with_overflow(x::Bool, y::Bool) = (x-y, false)$/;"	f
sub_with_overflow	base/checked.jl	/^sub_with_overflow(x::T, y::T) where {T<:SignedInt}   = checked_ssub_int(x, y)$/;"	f
sub_with_overflow	base/checked.jl	/^sub_with_overflow(x::T, y::T) where {T<:UnsignedInt} = checked_usub_int(x, y)$/;"	f
sub_with_overflow	base/compiler/compiler.jl	/^sub_with_overflow(x::Bool, y::Bool) = (x-y, false)$/;"	f
sub_with_overflow	base/compiler/compiler.jl	/^sub_with_overflow(x::T, y::T) where {T<:SignedInt}   = checked_ssub_int(x, y)$/;"	f
sub_with_overflow	base/compiler/compiler.jl	/^sub_with_overflow(x::T, y::T) where {T<:UnsignedInt} = checked_usub_int(x, y)$/;"	f
subdir	deps/srccache/patchelf-0.9/Makefile.in	/^subdir = .$/;"	m
subdir	deps/srccache/patchelf-0.9/src/Makefile.in	/^subdir = src$/;"	m
subdir	deps/srccache/patchelf-0.9/tests/Makefile.in	/^subdir = tests$/;"	m
subdir	test/file.jl	/^subdir = joinpath(dir, "adir")$/;"	v
subdir2	test/file.jl	/^subdir2 = joinpath(dir, "adir2")$/;"	v
subf	test/core.jl	/^    subf(x2::Int) = T$/;"	f
subf	test/core.jl	/^    subf(x2::UInt) = S$/;"	f
subf	test/core.jl	/^   subf(x2) = (x, x2, :b)$/;"	f
subf	test/core.jl	/^   subf(x2::T) = (x, x2, :a)$/;"	f
subnormal_flags	src/processor_x86.cpp	/^static uint32_t subnormal_flags = [] {$/;"	v	typeref:typename:uint32_t
subset	test/loading.jl	/^function subset(v::Vector{T}, m::Int) where T$/;"	f
subsetrows	stdlib/LinearAlgebra/src/lapack.jl	/^subsetrows(X::AbstractMatrix, Y::AbstractArray, k) = Y[1:k, :]$/;"	f
subsetrows	stdlib/LinearAlgebra/src/lapack.jl	/^subsetrows(X::AbstractVector, Y::AbstractArray, k) = Y[1:k]$/;"	f
substr_isspace	src/rtutils.c	/^int substr_isspace(char *p, char *pend)$/;"	f	typeref:typename:int
substrides	base/subarray.jl	/^substrides(strds, I::Tuple{Any, Vararg{Any}}) = throw(ArgumentError("strides is invalid for SubA/;"	f
substrides	base/subarray.jl	/^substrides(strds::Tuple{}, ::Tuple{}) = ()$/;"	f
substring	src/flisp/aliases.scm	/^(define (substring s start end)$/;"	f
substring_copy_bynumber	base/pcre.jl	/^function substring_copy_bynumber(match_data, number, buf, buf_size)$/;"	f
substring_length_bynumber	base/pcre.jl	/^function substring_length_bynumber(match_data, number)$/;"	f
substring_number_from_name	base/pcre.jl	/^function substring_number_from_name(re, name)$/;"	f
subtract_singletontype	base/set.jl	/^function subtract_singletontype(::Type{T}, x::Pair{K}) where {T, K}$/;"	f
subtract_singletontype	base/set.jl	/^subtract_singletontype(::Type{T}, x::Pair{K}, y::Pair...) where {T, K} =$/;"	f
subtractbignum!	base/grisu/bignums.jl	/^function subtractbignum!(x::Bignum,other::Bignum)$/;"	f
subtracttimes!	base/grisu/bignums.jl	/^function subtracttimes!(x::Bignum,other::Bignum,factor)$/;"	f
subtree	stdlib/LibGit2/src/tree.jl	/^subtree = tree["test"]$/;"	v
subtype	src/subtype.c	/^static int subtype(jl_value_t *x, jl_value_t *y, jl_stenv_t *e, int param)$/;"	f	typeref:typename:int	file:
subtype_bounds_in_env	src/subtype.c	/^static int subtype_bounds_in_env(jl_value_t *x, jl_value_t *y, jl_stenv_t *e, int R, int d)$/;"	f	typeref:typename:int	file:
subtype_ccheck	src/subtype.c	/^static int subtype_ccheck(jl_value_t *x, jl_value_t *y, jl_stenv_t *e)$/;"	f	typeref:typename:int	file:
subtype_in_env	src/subtype.c	/^static int subtype_in_env(jl_value_t *x, jl_value_t *y, jl_stenv_t *e)$/;"	f	typeref:typename:int	file:
subtype_in_env_	src/subtype.c	/^static int subtype_in_env_(jl_value_t *x, jl_value_t *y, jl_stenv_t *e, int invdepth, int Rinvde/;"	f	typeref:typename:int	file:
subtype_in_env_existential	src/subtype.c	/^static int subtype_in_env_existential(jl_value_t *x, jl_value_t *y, jl_stenv_t *e, int R, int d)$/;"	f	typeref:typename:int	file:
subtype_left_var	src/subtype.c	/^static int subtype_left_var(jl_value_t *x, jl_value_t *y, jl_stenv_t *e)$/;"	f	typeref:typename:int	file:
subtype_naked_vararg	src/subtype.c	/^static int subtype_naked_vararg(jl_datatype_t *xd, jl_datatype_t *yd, jl_stenv_t *e, int param)$/;"	f	typeref:typename:int	file:
subtype_tfunc	base/compiler/tfuncs.jl	/^function subtype_tfunc(@nospecialize(a), @nospecialize(b))$/;"	f
subtype_tuple	src/subtype.c	/^static int subtype_tuple(jl_datatype_t *xd, jl_datatype_t *yd, jl_stenv_t *e, int param)$/;"	f	typeref:typename:int	file:
subtype_tuple_env	src/subtype.c	/^struct subtype_tuple_env {$/;"	s	file:
subtype_tuple_tail	src/subtype.c	/^static int subtype_tuple_tail(struct subtype_tuple_env *env, int8_t R, jl_stenv_t *e, int param)$/;"	f	typeref:typename:int	file:
subtype_tuple_varargs	src/subtype.c	/^static int subtype_tuple_varargs(struct subtype_tuple_env *env, jl_stenv_t *e, int param)$/;"	f	typeref:typename:int	file:
subtype_unionall	src/subtype.c	/^static int subtype_unionall(jl_value_t *t, jl_unionall_t *u, jl_stenv_t *e, int8_t R, int param)$/;"	f	typeref:typename:int	file:
subtype_unionall_callback	src/subtype.c	/^static int subtype_unionall_callback(struct subtype_unionall_env *env, int8_t R, jl_stenv_t *s, /;"	f	typeref:typename:int	file:
subtype_unionall_env	src/subtype.c	/^struct subtype_unionall_env {$/;"	s	file:
subtypes	stdlib/InteractiveUtils/src/InteractiveUtils.jl	/^subtypes(m::Module, x::Type) = _subtypes_in([m], x)$/;"	f
subtypes	stdlib/InteractiveUtils/src/InteractiveUtils.jl	/^subtypes(x::Type) = _subtypes_in(Base.loaded_modules_array(), x)$/;"	f
subvector_shifter!	stdlib/SparseArrays/src/sparsevector.jl	/^function subvector_shifter!(R::AbstractVector, V::AbstractVector, start::Integer, fin::Integer, /;"	f
success	base/process.jl	/^function success(x::Process)$/;"	f
success	base/process.jl	/^success(cmd::AbstractCmd) = success(_spawn(cmd))$/;"	f
success	base/process.jl	/^success(procs::ProcessChain) = success(procs.processes)$/;"	f
success	base/process.jl	/^success(procs::Vector{Process}) = mapreduce(success, &, procs)$/;"	f
sum	base/essentials.jl	/^function sum(A::AbstractArray)$/;"	f
sum	base/gmp.jl	/^sum(arr::AbstractArray{BigInt}) = foldl(MPZ.add!, arr; init=BigInt(0))$/;"	f
sum	base/mpfr.jl	/^function sum(arr::AbstractArray{BigFloat})$/;"	f
sum	base/range.jl	/^function sum(r::AbstractRange{<:Real})$/;"	f
sum	base/reduce.jl	/^sum(a) = sum(identity, a)$/;"	f
sum	base/reduce.jl	/^sum(a::AbstractArray{Bool}) = count(a)$/;"	f
sum	base/reduce.jl	/^sum(f, a) = mapreduce(f, add_sum, a)$/;"	f
sum	base/tuple.jl	/^sum(x::Tuple{Any, Vararg{Any}}) = +(x...)$/;"	f
sum	base/twiceprecision.jl	/^function sum(r::StepRangeLen)$/;"	f
sum	stdlib/SparseArrays/src/sparsevector.jl	/^sum(x::AbstractSparseVector) = sum(nonzeros(x))$/;"	f
sum10	test/reduce.jl	/^sum10(itr) = invoke(Core.kwfunc(mapreduce), Tuple{NamedTuple{(:init,),Tuple{Int}}, typeof(mapred/;"	f
sum2	test/reduce.jl	/^sum2(itr) = invoke(sum, Tuple{Any}, itr)$/;"	f
sum27403	test/compiler/inline.jl	/^    function sum27403(X::AbstractArray)$/;"	f
sum3	test/reduce.jl	/^sum3(A) = reduce(plus, A)$/;"	f
sum4	test/reduce.jl	/^sum4(itr) = invoke(reduce, Tuple{Function, Any}, plus, itr)$/;"	f
sum5	test/reduce.jl	/^sum5(A) = reduce(plus, A; init=0)$/;"	f
sum6	test/reduce.jl	/^sum6(itr) = invoke(Core.kwfunc(reduce), Tuple{NamedTuple{(:init,), Tuple{Int}}, typeof(reduce), /;"	f
sum7	test/reduce.jl	/^sum7(A) = mapreduce(x->x, plus, A)$/;"	f
sum8	test/reduce.jl	/^sum8(itr) = invoke(mapreduce, Tuple{Function, Function, Any}, x->x, plus, itr)$/;"	f
sum9	test/reduce.jl	/^sum9(A) = mapreduce(x->x, plus, A; init=0)$/;"	f
sum::promote_type	stdlib/LinearAlgebra/src/generic.jl	/^        sum::promote_type(Float64, T) = norm(v)^spp$/;"	f
sum::promote_type	stdlib/LinearAlgebra/src/generic.jl	/^        sum::promote_type(Float64, T) = norm_sqr(v)$/;"	f
sum::promote_type	stdlib/LinearAlgebra/src/generic.jl	/^    sum::promote_type(Float64, T) = av$/;"	f
sum_ref	stdlib/Markdown/test/runtests.jl	/^sum_ref = md"Behaves like $(ref(sum))"$/;"	v
summarize	stdlib/REPL/src/docview.jl	/^function summarize(binding::Binding, sig)$/;"	f
summarize	stdlib/REPL/src/docview.jl	/^function summarize(io::IO, @nospecialize(T), binding)$/;"	f
summarize	stdlib/REPL/src/docview.jl	/^function summarize(io::IO, T::DataType, binding)$/;"	f
summarize	stdlib/REPL/src/docview.jl	/^function summarize(io::IO, m::Module, binding)$/;"	f
summarize	stdlib/REPL/src/docview.jl	/^function summarize(io::IO, λ::Function, binding)$/;"	f
summary	base/abstractdict.jl	/^function summary(io::IO, iter::T) where {T<:Union{KeySet,ValueIterator}}$/;"	f
summary	base/abstractdict.jl	/^function summary(io::IO, t::AbstractDict)$/;"	f
summary	base/show.jl	/^function summary(x)$/;"	f
summary	base/show.jl	/^summary(io::IO, a::AbstractArray) = array_summary(io, a, axes(a))$/;"	f
summary	base/show.jl	/^summary(io::IO, t::Tuple) = print(io, t)$/;"	f
summary	base/show.jl	/^summary(io::IO, x) = print(io, typeof(x))$/;"	f
summarysize	base/summarysize.jl	/^function summarysize(obj;$/;"	f
sumpair	base/twiceprecision.jl	/^sumpair(n::Integer) = iseven(n) ? (n+1, n>>1) : (n, (n+1)>>1)$/;"	f
super	src/julia.h	/^    struct _jl_datatype_t *super;$/;"	m	struct:_jl_datatype_t	typeref:struct:_jl_datatype_t *
superflousPop	test/clangsa/GCPushPop.cpp	/^void superflousPop() {$/;"	f	typeref:typename:void
supertype	base/operators.jl	/^function supertype(T::DataType)$/;"	f
supertype	base/operators.jl	/^function supertype(T::UnionAll)$/;"	f
support_conservative_marking	src/gc.c	/^static int support_conservative_marking = 0;$/;"	v	typeref:typename:int	file:
suspended_threads	src/signals-mach.c	/^static arraylist_t suspended_threads;$/;"	v	typeref:typename:arraylist_t	file:
sv	stdlib/SparseArrays/test/sparsevector.jl	/^sv = sparse(1:10)$/;"	v
svd	stdlib/LinearAlgebra/src/bidiag.jl	/^function svd(M::Bidiagonal; kw...)$/;"	f
svd	stdlib/LinearAlgebra/src/bitarray.jl	/^svd(A::BitMatrix) = svd(float(A))$/;"	f
svd	stdlib/LinearAlgebra/src/diagonal.jl	/^function svd(D::Diagonal{<:Number})$/;"	f
svd	stdlib/LinearAlgebra/src/svd.jl	/^function svd(A::Adjoint; full::Bool = false, alg::Algorithm = default_svd_alg(A))$/;"	f
svd	stdlib/LinearAlgebra/src/svd.jl	/^function svd(A::StridedMatrix{TA}, B::StridedMatrix{TB}) where {TA,TB}$/;"	f
svd	stdlib/LinearAlgebra/src/svd.jl	/^function svd(A::StridedVecOrMat{T}; full::Bool = false, alg::Algorithm = default_svd_alg(A)) whe/;"	f
svd	stdlib/LinearAlgebra/src/svd.jl	/^function svd(A::Transpose; full::Bool = false, alg::Algorithm = default_svd_alg(A))$/;"	f
svd	stdlib/LinearAlgebra/src/svd.jl	/^function svd(x::Integer; full::Bool = false, alg::Algorithm = default_svd_alg(x))$/;"	f
svd	stdlib/LinearAlgebra/src/svd.jl	/^function svd(x::Number; full::Bool = false, alg::Algorithm = default_svd_alg(x))$/;"	f
svd	stdlib/LinearAlgebra/src/svd.jl	/^svd(A::StridedMatrix{T}, B::StridedMatrix{T}) where {T<:BlasFloat} = svd!(copy(A),copy(B))$/;"	f
svd	stdlib/LinearAlgebra/src/svd.jl	/^svd(x::Number, y::Number) = svd(fill(x, 1, 1), fill(y, 1, 1))$/;"	f
svd	stdlib/LinearAlgebra/src/symmetric.jl	/^function svd(A::RealHermSymComplexHerm, full::Bool=false)$/;"	f
svd!	stdlib/LinearAlgebra/src/bidiag.jl	/^function svd!(M::Bidiagonal{<:BlasReal}; full::Bool = false)$/;"	f
svd!	stdlib/LinearAlgebra/src/svd.jl	/^function svd!(A::StridedMatrix{T}, B::StridedMatrix{T}) where T<:BlasFloat$/;"	f
svd!	stdlib/LinearAlgebra/src/svd.jl	/^function svd!(A::StridedMatrix{T}; full::Bool = false, alg::Algorithm = default_svd_alg(A)) wher/;"	f
svdas	stdlib/Distributed/test/distributed_exec.jl	/^svdas = map(svd, as)$/;"	v
svdvals	stdlib/LinearAlgebra/src/diagonal.jl	/^svdvals(D::Diagonal) = [svdvals(v) for v in D.diag]$/;"	f
svdvals	stdlib/LinearAlgebra/src/diagonal.jl	/^svdvals(D::Diagonal{<:Number}) = sort!(abs.(D.diag), rev = true)$/;"	f
svdvals	stdlib/LinearAlgebra/src/svd.jl	/^function svdvals(A::StridedMatrix{TA}, B::StridedMatrix{TB}) where {TA,TB}$/;"	f
svdvals	stdlib/LinearAlgebra/src/svd.jl	/^svdvals(A::AbstractMatrix{<:BlasFloat}) = svdvals!(copy(A))$/;"	f
svdvals	stdlib/LinearAlgebra/src/svd.jl	/^svdvals(A::StridedMatrix{T},B::StridedMatrix{T}) where {T<:BlasFloat} = svdvals!(copy(A),copy(B)/;"	f
svdvals	stdlib/LinearAlgebra/src/svd.jl	/^svdvals(S::SVD{<:Any,T}) where {T} = (S.S)::Vector{T}$/;"	f
svdvals	stdlib/LinearAlgebra/src/svd.jl	/^svdvals(x::Number) = abs(x)$/;"	f
svdvals	stdlib/LinearAlgebra/src/svd.jl	/^svdvals(x::Number, y::Number) = abs(x\/y)$/;"	f
svdvals!	stdlib/LinearAlgebra/src/bidiag.jl	/^svdvals!(M::Bidiagonal{<:BlasReal}) = LAPACK.bdsdc!(M.uplo, 'N', M.dv, M.ev)[1]$/;"	f
svdvals!	stdlib/LinearAlgebra/src/svd.jl	/^function svdvals!(A::StridedMatrix{T}, B::StridedMatrix{T}) where T<:BlasFloat$/;"	f
svdvals!	stdlib/LinearAlgebra/src/svd.jl	/^svdvals!(A::StridedMatrix{T}) where {T<:BlasFloat} = isempty(A) ? zeros(real(T), 0) : LAPACK.ges/;"	f
svdvals!	stdlib/LinearAlgebra/src/symmetric.jl	/^function svdvals!(A::RealHermSymComplexHerm)$/;"	f
svdvals!	stdlib/LinearAlgebra/src/tridiag.jl	/^function svdvals!(A::SymTridiagonal)$/;"	f
swap	src/cgmemmgr.cpp	/^    void swap(SplitPtrBlock &other)$/;"	f	struct:__anon06c686bc0111::SplitPtrBlock	typeref:typename:void	file:
swapcols!	base/combinatorics.jl	/^function swapcols!(a::AbstractMatrix, i, j)$/;"	f
swapcontext	src/task.c	/^#define swapcontext /;"	d	file:
sweep_big	src/gc.c	/^static void sweep_big(jl_ptls_t ptls, int sweep_full) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void	file:
sweep_big_list	src/gc.c	/^static bigval_t **sweep_big_list(int sweep_full, bigval_t **pv) JL_NOTSAFEPOINT$/;"	f	typeref:typename:bigval_t **	file:
sweep_finalizer_list	src/gc.c	/^static void sweep_finalizer_list(arraylist_t *list)$/;"	f	typeref:typename:void	file:
sweep_finalizers	src/flisp/cvalues.c	/^static void sweep_finalizers(fl_context_t *fl_ctx)$/;"	f	typeref:typename:void	file:
sweep_malloced_arrays	src/gc.c	/^static void sweep_malloced_arrays(void) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void	file:
sweep_objs	src/julia_threads.h	/^    arraylist_t sweep_objs;$/;"	m	struct:_jl_tls_states_t	typeref:typename:arraylist_t
sweep_page	src/gc.c	/^static jl_taggedvalue_t **sweep_page(jl_gc_pool_t *p, jl_gc_pagemeta_t *pg, jl_taggedvalue_t **p/;"	f	typeref:typename:jl_taggedvalue_t **	file:
sweep_pool_page	src/gc.c	/^static inline void sweep_pool_page(jl_taggedvalue_t ***pfl, jl_gc_pagemeta_t *pg, int sweep_full/;"	f	typeref:typename:void	file:
sweep_pool_pagetable	src/gc.c	/^static void sweep_pool_pagetable(jl_taggedvalue_t ***pfl, int sweep_full) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void	file:
sweep_pool_pagetable0	src/gc.c	/^static inline int sweep_pool_pagetable0(jl_taggedvalue_t ***pfl, pagetable0_t *pagetable0, int s/;"	f	typeref:typename:int	file:
sweep_pool_pagetable1	src/gc.c	/^static inline int sweep_pool_pagetable1(jl_taggedvalue_t ***pfl, pagetable1_t *pagetable1, int s/;"	f	typeref:typename:int	file:
sweep_stack_data	test/gcext/gcext.c	/^void sweep_stack_data(jl_value_t *p)$/;"	f	typeref:typename:void
sweep_stack_pools	src/gc-stacks.c	/^void sweep_stack_pools(void)$/;"	f	typeref:typename:void
sweep_weak_refs	src/gc.c	/^static void sweep_weak_refs(void)$/;"	f	typeref:typename:void	file:
sweepfunc	src/julia_gcext.h	/^    jl_sweepfunc_t sweepfunc;$/;"	m	struct:__anonc2cfca210108	typeref:typename:jl_sweepfunc_t
switch_union_tuple	src/subtype.c	/^jl_value_t *switch_union_tuple(jl_value_t *a, jl_value_t *b)$/;"	f	typeref:typename:jl_value_t *
switchtupleunion	base/compiler/typeutils.jl	/^function switchtupleunion(@nospecialize(ty))$/;"	f
syconv!	stdlib/LinearAlgebra/src/lapack.jl	/^        function syconv!(uplo::AbstractChar, A::AbstractMatrix{$elty}, ipiv::AbstractVector{Blas/;"	f
syconvf_rook!	stdlib/LinearAlgebra/src/lapack.jl	/^        function syconvf_rook!(uplo::AbstractChar, way::AbstractChar,$/;"	f
syev!	stdlib/LinearAlgebra/src/lapack.jl	/^        function syev!(jobz::AbstractChar, uplo::AbstractChar, A::AbstractMatrix{$elty})$/;"	f
syevr!	stdlib/LinearAlgebra/src/lapack.jl	/^        function syevr!(jobz::AbstractChar, range::AbstractChar, uplo::AbstractChar, A::Abstract/;"	f
syevr!	stdlib/LinearAlgebra/src/lapack.jl	/^        syevr!(jobz::AbstractChar, A::AbstractMatrix{$elty}) =$/;"	f
sygvd!	stdlib/LinearAlgebra/src/lapack.jl	/^        function sygvd!(itype::Integer, jobz::AbstractChar, uplo::AbstractChar, A::AbstractMatri/;"	f
sylvester	stdlib/LinearAlgebra/src/dense.jl	/^function sylvester(A::StridedMatrix{T},B::StridedMatrix{T},C::StridedMatrix{T}) where T<:BlasFlo/;"	f
sylvester	stdlib/LinearAlgebra/src/dense.jl	/^sylvester(A::StridedMatrix{T}, B::StridedMatrix{T}, C::StridedMatrix{T}) where {T<:Integer} = sy/;"	f
sylvester	stdlib/LinearAlgebra/src/dense.jl	/^sylvester(a::Union{Real,Complex}, b::Union{Real,Complex}, c::Union{Real,Complex}) = -c \/ (a + b/;"	f
sym	src/flisp/flisp.c	/^    symbol_t *sym;$/;"	v	typeref:typename:symbol_t *
sym-dot?	src/ast.scm	/^(define (sym-dot? e)$/;"	f
sym-ref?	src/julia-syntax.scm	/^(define (sym-ref? e)$/;"	f
symMapDefault	src/ccall.cpp	/^static SymMapGV symMapDefault;$/;"	v	typeref:typename:SymMapGV	file:
symMapDl	src/ccall.cpp	/^static SymMapGV symMapDl;$/;"	v	typeref:typename:SymMapGV	file:
symMapExe	src/ccall.cpp	/^static SymMapGV symMapExe;$/;"	v	typeref:typename:SymMapGV	file:
sym_in	base/namedtuple.jl	/^@pure function sym_in(x::Symbol, itr::Tuple{Vararg{Symbol}})$/;"	f
sym_isless	base/compiler/utilities.jl	/^sym_isless(a::Symbol, b::Symbol) = ccall(:strcmp, Int32, (Ptr{UInt8}, Ptr{UInt8}), a, b) < 0$/;"	f
sym_to_numtype	src/flisp/cvalues.c	/^static numerictype_t sym_to_numtype(fl_context_t *fl_ctx, value_t type)$/;"	f	typeref:typename:numerictype_t	file:
sym_uplo	stdlib/LinearAlgebra/src/LinearAlgebra.jl	/^function sym_uplo(uplo::Char)$/;"	f
symbol	src/flisp/flisp.c	/^value_t symbol(fl_context_t *fl_ctx, const char *str)$/;"	f	typeref:typename:value_t
symbol->string	src/flisp/aliases.scm	/^(define (symbol->string s) (string s))$/;"	f
symbol-like?	src/ast.scm	/^(define (symbol-like? e)$/;"	f
symbol-or-interpolate?	src/julia-parser.scm	/^(define (symbol-or-interpolate? ex)$/;"	f
symbol-to-idx-map	src/julia-syntax.scm	/^(define (symbol-to-idx-map lst)$/;"	f
symbol_latex	stdlib/REPL/src/docview.jl	/^function symbol_latex(s::String)$/;"	f
symbol_name	src/flisp/flisp.c	/^char *symbol_name(fl_context_t *fl_ctx, value_t v)$/;"	f	typeref:typename:char *
symbol_nbytes	src/symbol.c	/^static size_t symbol_nbytes(size_t len) JL_NOTSAFEPOINT$/;"	f	typeref:typename:size_t	file:
symbol_t	src/flisp/flisp.h	/^} symbol_t;$/;"	t	typeref:struct:_symbol_t
symbol_table	src/staticdata.c	/^static htable_t symbol_table;$/;"	v	typeref:typename:htable_t	file:
symbol_value	src/flisp/flisp.h	/^#define symbol_value(/;"	d
symbols	src/staticdata.c	/^    ios_t *symbols;$/;"	m	struct:__anonc3a2e68f0108	typeref:typename:ios_t *	file:
symbols_latex	stdlib/REPL/src/docview.jl	/^const symbols_latex = Dict{String,String}()$/;"	v
symbolsym	src/flisp/flisp.h	/^    value_t pairsym, symbolsym, fixnumsym, vectorsym, builtinsym, vu8sym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
symchar	src/flisp/read.c	/^static inline int symchar(char c)$/;"	f	typeref:typename:int	file:
symcounts	src/gen_sysimg_symtab.jl	/^function symcounts()$/;"	f
symdiff	base/abstractset.jl	/^symdiff(s) = symdiff!(copy(s))$/;"	f
symdiff	base/abstractset.jl	/^symdiff(s, sets...) = symdiff!(emptymutable(s, promote_eltype(s, sets...)), s, sets...)$/;"	f
symdiff!	base/abstractset.jl	/^function symdiff!(s::AbstractSet, itr)$/;"	f
symdiff!	base/abstractset.jl	/^function symdiff!(s::AbstractSet, itrs...)$/;"	f
symdiff!	base/array.jl	/^symdiff!(v::AbstractVector{T}, itrs...) where {T} =$/;"	f
symdiff!	base/bitset.jl	/^function symdiff!(s::BitSet, ns)$/;"	f
symdiff!	base/bitset.jl	/^symdiff!(s1::BitSet, s2::BitSet) = _matched_map!(xor, s1, s2)$/;"	f
symlink	base/file.jl	/^function symlink(p::AbstractString, np::AbstractString)$/;"	f
symlink_install # (target-name, rel-from, abs-to)	deps/tools/common.mk	/^define symlink_install # (target-name, rel-from, abs-to)$/;"	m
symlink_libLLVM	base/Makefile	/^symlink_libLLVM: $(build_private_libdir)\/libLLVM.$(SHLIB_EXT)$/;"	t
symlink_q	doc/make.jl	/^symlink_q(tgt, link) = isfile(link) || symlink(tgt, link)$/;"	f
symlink_system_libraries	base/Makefile	/^symlink_system_libraries: $(SYMLINK_SYSTEM_LIBRARIES)$/;"	t
symlink_system_library	base/Makefile	/^define symlink_system_library$/;"	m
symm	stdlib/LinearAlgebra/src/blas.jl	/^        function symm(side::AbstractChar, uplo::AbstractChar, A::AbstractMatrix{$elty}, B::Abstr/;"	f
symm	stdlib/LinearAlgebra/src/blas.jl	/^        function symm(side::AbstractChar, uplo::AbstractChar, alpha::($elty), A::AbstractMatrix{/;"	f
symm!	stdlib/LinearAlgebra/src/blas.jl	/^        function symm!(side::AbstractChar, uplo::AbstractChar, alpha::Union{($elty), Bool},$/;"	f
symmetric	stdlib/LinearAlgebra/src/symmetric.jl	/^symmetric(A::AbstractMatrix, uplo::Symbol) = Symmetric(A, uplo)$/;"	f
symmetric	stdlib/LinearAlgebra/src/symmetric.jl	/^symmetric(A::Number, ::Symbol) = A$/;"	f
symmetric_type	stdlib/LinearAlgebra/src/symmetric.jl	/^function symmetric_type(::Type{T}) where {S, T<:AbstractMatrix{S}}$/;"	f
symmetric_type	stdlib/LinearAlgebra/src/symmetric.jl	/^function symmetric_type(::Type{T}) where {S<:AbstractMatrix, T<:AbstractMatrix{S}}$/;"	f
symmetric_type	stdlib/LinearAlgebra/src/symmetric.jl	/^function symmetric_type(::Type{T}) where {S<:Number, T<:AbstractMatrix{S}}$/;"	f
symmetric_type	stdlib/LinearAlgebra/src/symmetric.jl	/^symmetric_type(::Type{T}) where {T<:Number} = T$/;"	f
symmetry	stdlib/SuiteSparse/src/cholmod.jl	/^function symmetry(A::Sparse{Tv}, option::Integer) where Tv<:VTypes$/;"	f
sympow	stdlib/LinearAlgebra/src/symmetric.jl	/^function sympow(A::Symmetric, p::Integer)$/;"	f
syms	src/gen_sysimg_symtab.jl	/^syms = symcounts()$/;"	v
syms	stdlib/Distributed/test/distributed_exec.jl	/^syms = setup_syms(1, [id_other])$/;"	v
syms	stdlib/Distributed/test/distributed_exec.jl	/^syms = setup_syms(1, workers())$/;"	v
syms	stdlib/Distributed/test/distributed_exec.jl	/^syms = setup_syms(3, [id_other])$/;"	v
syms	stdlib/Distributed/test/distributed_exec.jl	/^syms = setup_syms(3, workers())$/;"	v
syms_2b_sent	stdlib/Distributed/src/clusterserialize.jl	/^function syms_2b_sent(s::ClusterSerializer, identifier)$/;"	f
symtab	src/flisp/flisp.h	/^    symbol_t *symtab;$/;"	m	struct:_fl_context_t	typeref:typename:symbol_t *
symtab	src/symbol.c	/^static jl_sym_t *symtab = NULL;$/;"	v	typeref:typename:jl_sym_t *	file:
symtab_lookup	src/flisp/flisp.c	/^static symbol_t **symtab_lookup(symbol_t **ptree, const char *str)$/;"	f	typeref:typename:symbol_t **	file:
symtab_lookup	src/symbol.c	/^static jl_sym_t *symtab_lookup(jl_sym_t **ptree, const char *str, size_t len, jl_sym_t ***slot) /;"	f	typeref:typename:jl_sym_t *	file:
symv	stdlib/LinearAlgebra/src/blas.jl	/^        function symv(uplo::AbstractChar, A::AbstractMatrix{$elty}, x::AbstractVector{$elty})$/;"	f
symv	stdlib/LinearAlgebra/src/blas.jl	/^        function symv(uplo::AbstractChar, alpha::($elty), A::AbstractMatrix{$elty}, x::AbstractV/;"	f
symv!	stdlib/LinearAlgebra/src/blas.jl	/^        function symv!(uplo::AbstractChar, alpha::Union{($elty), Bool},$/;"	f
symv!	stdlib/LinearAlgebra/src/blas.jl	/^function symv! end$/;"	f
sync	base/task.jl	/^macro sync(block)$/;"	f
sync!	stdlib/Mmap/src/Mmap.jl	/^function sync!(m::Array{T}, flags::Integer=MS_SYNC) where T$/;"	f
sync!	stdlib/Mmap/src/Mmap.jl	/^sync!(B::BitArray, flags::Integer=MS_SYNC) = sync!(B.chunks, flags)$/;"	f
sync_add	base/task.jl	/^macro sync_add(expr)$/;"	f
sync_end	base/task.jl	/^function sync_end(refs)$/;"	f
sync_varname	base/task.jl	/^const sync_varname = gensym(:sync)$/;"	v
syntactic-op?	src/julia-parser.scm	/^(define syntactic-op? (Set syntactic-operators))$/;"	f
syntactic-operators	src/julia-parser.scm	/^(define syntactic-operators$/;"	f
syntactic-unary-op?	src/julia-parser.scm	/^(define syntactic-unary-op? (Set syntactic-unary-operators))$/;"	f
syntactic-unary-operators	src/julia-parser.scm	/^(define syntactic-unary-operators '($ & |::|))$/;"	f
syntax-deprecation	src/jlfrontend.scm	/^(define (syntax-deprecation what instead lno)$/;"	f
syr!	stdlib/LinearAlgebra/src/blas.jl	/^        function syr!(uplo::AbstractChar, α::$elty, x::AbstractVector{$elty}, A::AbstractMatrix/;"	f
syr!	stdlib/LinearAlgebra/src/blas.jl	/^function syr! end$/;"	f
syr2k	stdlib/LinearAlgebra/src/blas.jl	/^function syr2k(uplo::AbstractChar, trans::AbstractChar, alpha::Number, A::AbstractVecOrMat, B::A/;"	f
syr2k	stdlib/LinearAlgebra/src/blas.jl	/^syr2k(uplo::AbstractChar, trans::AbstractChar, A::AbstractVecOrMat, B::AbstractVecOrMat) = syr2k/;"	f
syr2k!	stdlib/LinearAlgebra/src/blas.jl	/^        function syr2k!(uplo::AbstractChar, trans::AbstractChar,$/;"	f
syrk	stdlib/LinearAlgebra/src/blas.jl	/^function syrk end$/;"	f
syrk	stdlib/LinearAlgebra/src/blas.jl	/^function syrk(uplo::AbstractChar, trans::AbstractChar, alpha::Number, A::AbstractVecOrMat)$/;"	f
syrk	stdlib/LinearAlgebra/src/blas.jl	/^syrk(uplo::AbstractChar, trans::AbstractChar, A::AbstractVecOrMat) = syrk(uplo, trans, one(eltyp/;"	f
syrk!	stdlib/LinearAlgebra/src/blas.jl	/^       function syrk!(uplo::AbstractChar, trans::AbstractChar,$/;"	f
syrk!	stdlib/LinearAlgebra/src/blas.jl	/^function syrk! end$/;"	f
syrk_wrapper!	stdlib/LinearAlgebra/src/matmul.jl	/^function syrk_wrapper!(C::StridedMatrix{T}, tA::AbstractChar, A::StridedVecOrMat{T},$/;"	f
sysconfdir	deps/srccache/patchelf-0.9/Makefile.in	/^sysconfdir = @sysconfdir@$/;"	m
sysconfdir	deps/srccache/patchelf-0.9/src/Makefile.in	/^sysconfdir = @sysconfdir@$/;"	m
sysconfdir	deps/srccache/patchelf-0.9/tests/Makefile.in	/^sysconfdir = @sysconfdir@$/;"	m
sysimage_base	src/staticdata.c	/^static uint64_t sysimage_base = 0;$/;"	v	typeref:typename:uint64_t	file:
sysimg-debug	sysimage.mk	/^sysimg-debug: $(build_private_libdir)\/sys-debug.$(SHLIB_EXT)$/;"	t
sysimg-ji	sysimage.mk	/^sysimg-ji: $(build_private_libdir)\/sys.ji$/;"	t
sysimg-release	sysimage.mk	/^sysimg-release: $(build_private_libdir)\/sys.$(SHLIB_EXT)$/;"	t
sysimg_base	src/gc.c	/^static void *sysimg_base;$/;"	v	typeref:typename:void *	file:
sysimg_base	src/staticdata.c	/^static char* sysimg_base;$/;"	v	typeref:typename:char *	file:
sysimg_builder	sysimage.mk	/^define sysimg_builder$/;"	m
sysimg_end	src/gc.c	/^static void *sysimg_end;$/;"	v	typeref:typename:void *	file:
sysimg_fptrs	src/debuginfo.cpp	/^static jl_sysimg_fptrs_t sysimg_fptrs;$/;"	v	typeref:typename:jl_sysimg_fptrs_t	file:
sysimg_fptrs	src/staticdata.c	/^static jl_sysimg_fptrs_t sysimg_fptrs;$/;"	v	typeref:typename:jl_sysimg_fptrs_t	file:
sysimg_fvars_linfo	src/debuginfo.cpp	/^static jl_method_instance_t **sysimg_fvars_linfo;$/;"	v	typeref:typename:jl_method_instance_t **	file:
sysimg_fvars_n	src/debuginfo.cpp	/^static size_t sysimg_fvars_n;$/;"	v	typeref:typename:size_t	file:
sysimg_gvars	src/staticdata.c	/^static inline uintptr_t *sysimg_gvars(uintptr_t *base, size_t idx)$/;"	f	typeref:typename:uintptr_t *	file:
sysimg_gvars_base	src/staticdata.c	/^static uintptr_t *sysimg_gvars_base = NULL;$/;"	v	typeref:typename:uintptr_t *	file:
sysimg_gvars_offsets	src/staticdata.c	/^static const int32_t *sysimg_gvars_offsets = NULL;$/;"	v	typeref:typename:const int32_t *	file:
sysimg_init_cb	src/processor_arm.cpp	/^static uint32_t sysimg_init_cb(const void *id)$/;"	f	namespace:ARM	typeref:typename:uint32_t	file:
sysimg_init_cb	src/processor_fallback.cpp	/^static uint32_t sysimg_init_cb(const void *id)$/;"	f	namespace:Fallback	typeref:typename:uint32_t	file:
sysimg_init_cb	src/processor_x86.cpp	/^static uint32_t sysimg_init_cb(const void *id)$/;"	f	namespace:X86	typeref:typename:uint32_t	file:
sysimg_relocs	src/staticdata.c	/^static char* sysimg_relocs;$/;"	v	typeref:typename:char *	file:
sysimg_sort_order	src/staticdata.c	/^static int sysimg_sort_order(const void *pa, const void *pb)$/;"	f	typeref:typename:int	file:
system_id	src/julia_threads.h	/^    unsigned long system_id;$/;"	m	struct:_jl_tls_states_t	typeref:typename:unsigned long
system_image_path	src/jloptions.c	/^static const char system_image_path[256] = "\\0" JL_SYSTEM_IMAGE_PATH;$/;"	v	typeref:typename:const char[256]	file:
systemerror	base/error.jl	/^systemerror(p, b::Bool; extrainfo=nothing) = b ? throw(Main.Base.SystemError(string(p), Libc.err/;"	f
systemsleep	base/libc.jl	/^    function systemsleep(s::Real)$/;"	f
systemsleep	base/libc.jl	/^    systemsleep(s::Real) = ccall(:usleep, Int32, (UInt32,), round(UInt32, s*1e6))$/;"	f
sysv!	stdlib/LinearAlgebra/src/lapack.jl	/^        function sysv!(uplo::AbstractChar, A::AbstractMatrix{$elty}, B::AbstractVecOrMat{$elty})$/;"	f
sysv_rook!	stdlib/LinearAlgebra/src/lapack.jl	/^        function sysv_rook!(uplo::AbstractChar, A::AbstractMatrix{$elty}, B::AbstractVecOrMat{$e/;"	f
sytrf!	stdlib/LinearAlgebra/src/lapack.jl	/^        function sytrf!(uplo::AbstractChar, A::AbstractMatrix{$elty})$/;"	f
sytrf_rook!	stdlib/LinearAlgebra/src/lapack.jl	/^        function sytrf_rook!(uplo::AbstractChar, A::AbstractMatrix{$elty})$/;"	f
sytri!	stdlib/LinearAlgebra/src/lapack.jl	/^        function sytri!(uplo::AbstractChar, A::AbstractMatrix{$elty}, ipiv::AbstractVector{BlasI/;"	f
sytri_rook!	stdlib/LinearAlgebra/src/lapack.jl	/^        function sytri_rook!(uplo::AbstractChar, A::AbstractMatrix{$elty}, ipiv::AbstractVector{/;"	f
sytrs!	stdlib/LinearAlgebra/src/lapack.jl	/^        function sytrs!(uplo::AbstractChar, A::AbstractMatrix{$elty},$/;"	f
sytrs_rook!	stdlib/LinearAlgebra/src/lapack.jl	/^        function sytrs_rook!(uplo::AbstractChar, A::AbstractMatrix{$elty},$/;"	f
sz	src/abi_aarch64.cpp	/^    size_t sz;$/;"	m	struct:ABI_AArch64Layout::ElementType	typeref:typename:size_t	file:
sz	src/cgmemmgr.cpp	/^    size_t sz;$/;"	m	struct:__anon06c686bc0111::Allocation	typeref:typename:size_t	file:
sz	src/gc.h	/^        size_t sz;$/;"	m	union:_bigval_t::__anoncf30557c0e0a	typeref:typename:size_t
sz	stdlib/Mmap/test/runtests.jl	/^sz = filesize(file)$/;"	v
sz	stdlib/SharedArrays/test/runtests.jl	/^sz = (6,5)$/;"	v
szclass_table	src/julia_internal.h	/^static const uint8_t szclass_table[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16/;"	v	typeref:typename:const uint8_t[]
t	src/gf.c	/^    jl_value_t *t; \/\/ array of svec(argtypes, params, Method)$/;"	m	struct:ml_matches_env	typeref:typename:jl_value_t *	file:
t	src/subtype.c	/^    jl_value_t *t;$/;"	m	struct:subtype_unionall_env	typeref:typename:jl_value_t *	file:
t	stdlib/Distributed/src/cluster.jl	/^t = @async addprocs(...)$/;"	v
t	stdlib/Markdown/test/runtests.jl	/^t = """$/;"	v
t	stdlib/Mmap/test/runtests.jl	/^t = b"Hello World"$/;"	v
t	test/docs.jl	/^t(x::AbstractString) = x$/;"	f
t	test/docs.jl	/^t(x::Int, y) = y$/;"	f
t	test/docs.jl	/^t(x::S) where {S <: Integer} = x$/;"	f
t	test/worlds.jl	/^t = Task(()->begin$/;"	v
t0	src/timing.h	/^    uint64_t t0;$/;"	m	struct:_jl_timing_block_t	typeref:typename:uint64_t
t0_15600	test/goto.jl	/^function t0_15600(flag)$/;"	f
t11062	stdlib/Distributed/test/distributed_exec.jl	/^function t11062()$/;"	f
t11801	test/misc.jl	/^t11801 = @elapsed 1+1$/;"	v
t1_14825	test/core.jl	/^mutable struct t1_14825{A <: abstest_14825, B}$/;"	f
t1_15600	test/goto.jl	/^function t1_15600(flag)$/;"	f
t2	test/core.jl	/^t2 = deepcopy(A23567)$/;"	v
t20488	stdlib/SparseArrays/test/sparsevector.jl	/^mutable struct t20488 end$/;"	f
t265	test/worlds.jl	/^t265 = tasks[1]$/;"	v
t28284	test/compiler/inference.jl	/^struct t28284$/;"	f
t2_14825	test/core.jl	/^mutable struct t2_14825{C, B} <: abstest_14825$/;"	f
t3	test/core.jl	/^t3 = deepcopy(A23567)$/;"	v
t4	test/core.jl	/^t4 = vcat(A23567, t2, t3)$/;"	v
t_a7652	test/core.jl	/^t_a7652 = A7652$/;"	v
t_docs_abc	test/docs.jl	/^struct t_docs_abc end$/;"	f
t_fmt	src/support/strptime.c	/^	const char* t_fmt;$/;"	m	struct:__anon732973510108	typeref:typename:const char *	file:
t_fmt_ampm	src/support/strptime.c	/^	const char* t_fmt_ampm;$/;"	m	struct:__anon732973510108	typeref:typename:const char *	file:
t_log_Float32	base/special/log.jl	/^const t_log_Float32 = (0.0,0.007782140442054949,0.015504186535965254,0.02316705928153438,$/;"	v
t_log_Float64	base/special/log.jl	/^const t_log_Float64 = ((0.0,0.0),(0.007782140442941454,-8.865052917267247e-13),$/;"	v
t_uid_ctr	src/jltypes.c	/^static volatile int t_uid_ctr = 1;$/;"	v	typeref:typename:volatile int	file:
tab_should_complete	stdlib/REPL/src/LineEdit.jl	/^function tab_should_complete(s)$/;"	f
table	src/support/htable.h	/^    void **table;$/;"	m	struct:__anon806c816e0108	typeref:typename:void **
table	stdlib/Markdown/test/runtests.jl	/^table = md"""$/;"	v
table-ref	src/flisp/aliases.scm	/^(define table-ref get)$/;"	f
table-set!	src/flisp/aliases.scm	/^(define table-set! put!)$/;"	f
table.clone	src/utils.scm	/^(define (table.clone t)$/;"	f
table_init	src/flisp/table.c	/^void table_init(fl_context_t *fl_ctx)$/;"	f	typeref:typename:void
table_vtable	src/flisp/flisp.h	/^    cvtable_t table_vtable;$/;"	m	struct:_fl_context_t	typeref:typename:cvtable_t
tablefunc_info	src/flisp/table.c	/^static const builtinspec_t tablefunc_info[] = {$/;"	v	typeref:typename:const builtinspec_t[]	file:
tablesym	src/flisp/flisp.h	/^    value_t tablesym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
tabletype	src/flisp/flisp.h	/^    fltype_t *tabletype;$/;"	m	struct:_fl_context_t	typeref:typename:fltype_t *
tabsym	src/flisp/flisp.h	/^    value_t nulsym, alarmsym, backspacesym, tabsym, linefeedsym, newlinesym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
tag	src/flisp/flisp.h	/^#define tag(/;"	d
tag	src/gc.h	/^    uintptr_t tag; \/\/ The tag with the GC bits masked out$/;"	m	struct:__anoncf30557c0508	typeref:typename:uintptr_t
tag	src/staticdata.c	/^                uintptr_t tag;$/;"	m	struct:jl_reinit_item::binding	typeref:typename:uintptr_t	file:
tag	stdlib/InteractiveUtils/test/runtests.jl	/^tag = "ANY"$/;"	v
tag	stdlib/InteractiveUtils/test/runtests.jl	/^tag = "ARRAY{FLOAT64,N}"$/;"	v
tag	stdlib/InteractiveUtils/test/runtests.jl	/^tag = "UNION"$/;"	v
tag	stdlib/Markdown/src/render/html.jl	/^tag(io::IO, tag, attrs...) = withtag(nothing, io, tag, attrs...)$/;"	f
tag_create	stdlib/LibGit2/src/tag.jl	/^function tag_create(repo::GitRepo, tag::AbstractString, commit::Union{AbstractString,AbstractGit/;"	f
tag_delete	stdlib/LibGit2/src/tag.jl	/^function tag_delete(repo::GitRepo, tag::AbstractString)$/;"	f
tag_list	stdlib/LibGit2/src/tag.jl	/^function tag_list(repo::GitRepo)$/;"	f
tagptr	src/flisp/flisp.h	/^#define tagptr(/;"	d
tags	deps/srccache/patchelf-0.9/Makefile.in	/^tags: tags-recursive$/;"	t
tags	deps/srccache/patchelf-0.9/src/Makefile.in	/^tags: tags-am$/;"	t
tags	deps/srccache/patchelf-0.9/tests/Makefile.in	/^tags: tags-am$/;"	t
tags	src/staticdata.c	/^static jl_value_t **const*const tags = (jl_value_t**const*const)_tags;$/;"	v	typeref:typename:jl_value_t ** const * const	file:
tags-am	deps/srccache/patchelf-0.9/Makefile.in	/^tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)$/;"	t
tags-am	deps/srccache/patchelf-0.9/src/Makefile.in	/^tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)$/;"	t
tags-am	deps/srccache/patchelf-0.9/tests/Makefile.in	/^tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)$/;"	t
tail	base/essentials.jl	/^tail(::Tuple{}) = throw(ArgumentError("Cannot call tail on an empty tuple."))$/;"	f
tail	base/essentials.jl	/^tail(x::Tuple) = argtail(x...)$/;"	f
tail_if_any	base/iterators.jl	/^tail_if_any(::Tuple{}) = ()$/;"	f
tail_if_any	base/iterators.jl	/^tail_if_any(x::Tuple) = tail(x)$/;"	f
tailjoin	base/promotion.jl	/^function tailjoin(A, i)$/;"	f
tails	base/tuple.jl	/^tails(ts::Tuple...) = map(tail, ts)$/;"	f
take	base/iterators.jl	/^take(xs, n::Integer) = Take(xs, Int(n))$/;"	f
take	base/iterators.jl	/^take(xs::Take, n::Integer) = Take(xs.xs, min(Int(n), xs.n))$/;"	f
take	src/flisp/read.c	/^static void take(fl_context_t *fl_ctx)$/;"	f	typeref:typename:void	file:
take!	base/channels.jl	/^take!(c::Channel) = isbuffered(c) ? take_buffered(c) : take_unbuffered(c)$/;"	f
take!	base/iobuffer.jl	/^function take!(io::GenericIOBuffer)$/;"	f
take!	base/iobuffer.jl	/^function take!(io::IOBuffer)$/;"	f
take!	base/iostream.jl	/^take!(s::IOStream) =$/;"	f
take!	stdlib/Distributed/src/remotecall.jl	/^take!(rr::RemoteChannel, args...) = call_on_owner(take_ref, rr, myid(), args...)$/;"	f
take!	stdlib/Distributed/src/remotecall.jl	/^take!(rv::RemoteValue, args...) = take!(rv.c, args...)$/;"	f
take-char	src/julia-parser.scm	/^(define (take-char p)$/;"	f
take-lineendings	src/julia-parser.scm	/^(define (take-lineendings s)$/;"	f
take-token	src/julia-parser.scm	/^(define (take-token s)$/;"	f
take-while	src/utils.scm	/^(define (take-while f xs)$/;"	f
take_buffered	base/channels.jl	/^function take_buffered(c::Channel)$/;"	f
take_iteratorsize	base/iterators.jl	/^take_iteratorsize(::SizeUnknown) = SizeUnknown()$/;"	f
take_iteratorsize	base/iterators.jl	/^take_iteratorsize(a) = HasLength()$/;"	f
take_ref	stdlib/Distributed/src/remotecall.jl	/^function take_ref(rid, caller, args...)$/;"	f
take_unbuffered	base/channels.jl	/^function take_unbuffered(c::Channel{T}) where T$/;"	f
tan	base/complex.jl	/^function tan(z::Complex)$/;"	f
tan	base/special/trig.jl	/^function tan(x::T) where T<:Union{Float32, Float64}$/;"	f
tan	base/special/trig.jl	/^tan(x::Real) = tan(float(x))$/;"	f
tan	stdlib/LinearAlgebra/src/dense.jl	/^function tan(A::AbstractMatrix)$/;"	f
tan	test/core.jl	/^        tan() = nothing$/;"	f
tan_domain_error	base/special/trig.jl	/^@noinline tan_domain_error(x) = throw(DomainError(x, "tan(x) is only defined for finite x."))$/;"	f
tan_fast	base/fastmath.jl	/^    tan_fast(x::ComplexTypes) = -im*tanh(im*x)$/;"	f
tan_kernel	base/special/trig.jl	/^@inline function tan_kernel(y::DoubleFloat32, k)$/;"	f
tan_kernel	base/special/trig.jl	/^@inline function tan_kernel(y::DoubleFloat64, k)$/;"	f
tan_kernel	base/special/trig.jl	/^@inline tan_kernel(y::Float32) = tan_kernel(DoubleFloat32(y), 1)$/;"	f
tan_kernel	base/special/trig.jl	/^@inline tan_kernel(y::Float64) = tan_kernel(DoubleFloat64(y, 0.0), 1)$/;"	f
tan_kernel	base/special/trig.jl	/^tan_kernel(x::Real) = tan(x)$/;"	f
tand	base/special/trig.jl	/^tand(x::Real) = sind(x) \/ cosd(x)$/;"	f
tanh	base/complex.jl	/^function tanh(z::Complex{T}) where T<:AbstractFloat$/;"	f
tanh	base/complex.jl	/^tanh(z::Complex) = tanh(float(z))$/;"	f
tanh	base/special/hyperbolic.jl	/^function tanh(x::T) where T<:Union{Float32, Float64}$/;"	f
tanh	base/special/hyperbolic.jl	/^tanh(x::Real) = tanh(float(x))$/;"	f
tanh	stdlib/LinearAlgebra/src/dense.jl	/^function tanh(A::AbstractMatrix)$/;"	f
tanh_fast	base/fastmath.jl	/^    tanh_fast(x::ComplexTypes) = (a=exp(x); b=exp(-x); (a-b)\/(a+b))$/;"	f
targ	src/julia.h	/^    struct jl_ordereddict_t targ;$/;"	m	struct:_jl_typemap_level_t	typeref:struct:jl_ordereddict_t
target	stdlib/LibGit2/src/tag.jl	/^function target(tag::GitTag)$/;"	f
target!	stdlib/LibGit2/src/reference.jl	/^function target!(ref::GitReference, new_oid::GitHash; msg::AbstractString="")$/;"	f
target_alias	deps/srccache/patchelf-0.9/Makefile.in	/^target_alias = @target_alias@$/;"	m
target_alias	deps/srccache/patchelf-0.9/src/Makefile.in	/^target_alias = @target_alias@$/;"	m
target_alias	deps/srccache/patchelf-0.9/tests/Makefile.in	/^target_alias = @target_alias@$/;"	m
targets1	test/offsetarray.jl	/^targets1 = ["0-dimensional $OAs_name.OffsetArray{Float64,0,Array{Float64,0}}:\\n1.0",$/;"	v
targets2	test/offsetarray.jl	/^targets2 = ["(1.0, 1.0)",$/;"	v
task	base/task.jl	/^macro task(ex)$/;"	f
task	src/ast.c	/^    jl_task_t *task; \/\/ the current owner (user) of this jl_ast_context_t$/;"	m	struct:_jl_ast_context_t	typeref:typename:jl_task_t *	file:
taskTerminated:	contrib/mac/frameworkapp/ExecSandbox/ExecSandbox.m	/^- (void)taskTerminated:(JuliaTask *_Nonnull)jt {$/;"	m	implementation:ExecSandbox
taskTerminated:	contrib/mac/frameworkapp/ExecSandbox/ExecSandbox.m	/^- (void)taskTerminated:(JuliaTask *_Nonnull)jt;$/;"	m	interface:ExecSandbox	category:NSMutableArray
task_ctx_ptr	src/jsvm-emscripten/asyncify_setup.js	/^function task_ctx_ptr(task) {$/;"	f
task_ctx_ptr	src/task.c	/^JL_DLLEXPORT jl_ucontext_t *task_ctx_ptr(jl_task_t *t)$/;"	f	typeref:typename:JL_DLLEXPORT jl_ucontext_t *
task_done_hook	base/task.jl	/^function task_done_hook(t::Task)$/;"	f
task_local_storage	base/task.jl	/^function task_local_storage(body::Function, key, val)$/;"	f
task_local_storage	base/task.jl	/^task_local_storage() = get_task_tls(current_task())$/;"	f
task_local_storage	base/task.jl	/^task_local_storage(key) = task_local_storage()[key]$/;"	f
task_local_storage	base/task.jl	/^task_local_storage(key, val) = (task_local_storage()[key] = val)$/;"	f
task_result	base/task.jl	/^task_result(t::Task) = t.result$/;"	f
task_scanner	test/gcext/gcext.c	/^void task_scanner(jl_task_t *task, int root_task)$/;"	f	typeref:typename:void
taskheap_t	src/partr.c	/^} taskheap_t;$/;"	t	typeref:struct:taskheap_tag	file:
taskheap_tag	src/partr.c	/^typedef struct taskheap_tag {$/;"	s	file:
tasks	src/partr.c	/^    jl_task_t **tasks;$/;"	m	struct:taskheap_tag	typeref:typename:jl_task_t **	file:
tasks	test/read.jl	/^tasks = []$/;"	v
tasks_per_heap	src/partr.c	/^static const int tasks_per_heap = 65536; \/\/ TODO: this should be smaller by default, but growa/;"	v	typeref:typename:const int	file:
tbaa	src/codegen.cpp	/^    MDNode *tbaa; \/\/ The related tbaa node. Non-NULL iff this holds an address.$/;"	m	struct:jl_cgval_t	typeref:typename:MDNode *	file:
tbaa_array	src/codegen.cpp	/^static MDNode *tbaa_array;      \/\/ jl_array_t$/;"	v	typeref:typename:MDNode *	file:
tbaa_arraybuf	src/codegen.cpp	/^static MDNode *tbaa_arraybuf;       \/\/ Data in an array of POD$/;"	v	typeref:typename:MDNode *	file:
tbaa_arrayflags	src/codegen.cpp	/^static MDNode *tbaa_arrayflags;     \/\/ The flags in a jl_array_t$/;"	v	typeref:typename:MDNode *	file:
tbaa_arraylen	src/codegen.cpp	/^static MDNode *tbaa_arraylen;       \/\/ The len in a jl_array_t$/;"	v	typeref:typename:MDNode *	file:
tbaa_arrayoffset	src/codegen.cpp	/^static MDNode *tbaa_arrayoffset;     \/\/ The offset in a jl_array_t$/;"	v	typeref:typename:MDNode *	file:
tbaa_arrayptr	src/codegen.cpp	/^static MDNode *tbaa_arrayptr;       \/\/ The pointer inside a jl_array_t$/;"	v	typeref:typename:MDNode *	file:
tbaa_arrayselbyte	src/codegen.cpp	/^static MDNode *tbaa_arrayselbyte;   \/\/ a selector byte in a isbits Union jl_array_t$/;"	v	typeref:typename:MDNode *	file:
tbaa_arraysize	src/codegen.cpp	/^static MDNode *tbaa_arraysize;      \/\/ A size in a jl_array_t$/;"	v	typeref:typename:MDNode *	file:
tbaa_binding	src/codegen.cpp	/^static MDNode *tbaa_binding;        \/\/ jl_binding_t::value$/;"	v	typeref:typename:MDNode *	file:
tbaa_const	src/codegen.cpp	/^static MDNode *tbaa_const;      \/\/ Memory that is immutable by the time LLVM can see it$/;"	v	typeref:typename:MDNode *	file:
tbaa_const	src/llvm-multiversioning.cpp	/^    MDNode *tbaa_const;$/;"	m	struct:__anond5683ea40111::CloneCtx	typeref:typename:MDNode *	file:
tbaa_const	src/llvm-ptls.cpp	/^    MDNode *tbaa_const;$/;"	m	struct:__anonf46923380111::LowerPTLS	typeref:typename:MDNode *	file:
tbaa_data	src/codegen.cpp	/^static MDNode *tbaa_data;       \/\/ Any user data that `pointerset\/ref` are allowed to alias$/;"	v	typeref:typename:MDNode *	file:
tbaa_decorate	src/cgutils.cpp	/^static Instruction *tbaa_decorate(MDNode *md, Instruction *load_or_store)$/;"	f	typeref:typename:Instruction *	file:
tbaa_gcframe	src/codegen.cpp	/^static MDNode *tbaa_gcframe;    \/\/ GC frame$/;"	v	typeref:typename:MDNode *	file:
tbaa_gcframe	src/llvm-pass-helpers.h	/^    llvm::MDNode *tbaa_gcframe;$/;"	m	struct:JuliaPassContext	typeref:typename:llvm::MDNode *
tbaa_immut	src/codegen.cpp	/^static MDNode *tbaa_immut;              \/\/ immutable type$/;"	v	typeref:typename:MDNode *	file:
tbaa_make_child	src/codegen.cpp	/^std::pair<MDNode*,MDNode*> tbaa_make_child(const char *name, MDNode *parent=nullptr, bool isCons/;"	f	typeref:typename:std::pair<MDNode *,MDNode * >
tbaa_mutab	src/codegen.cpp	/^static MDNode *tbaa_mutab;              \/\/ mutable type$/;"	v	typeref:typename:MDNode *	file:
tbaa_ptrarraybuf	src/codegen.cpp	/^static MDNode *tbaa_ptrarraybuf;    \/\/ Data in an array of boxed values$/;"	v	typeref:typename:MDNode *	file:
tbaa_root	src/codegen.cpp	/^static MDNode *tbaa_root;     \/\/ Everything$/;"	v	typeref:typename:MDNode *	file:
tbaa_stack	src/codegen.cpp	/^static MDNode *tbaa_stack;      \/\/ stack slot$/;"	v	typeref:typename:MDNode *	file:
tbaa_tag	src/llvm-alloc-opt.cpp	/^    MDNode *tbaa_tag;$/;"	m	struct:__anon0a1571000111::AllocOpt	typeref:typename:MDNode *	file:
tbaa_tag	src/llvm-pass-helpers.h	/^    llvm::MDNode *tbaa_tag;$/;"	m	struct:JuliaPassContext	typeref:typename:llvm::MDNode *
tbaa_unionselbyte	src/codegen.cpp	/^static MDNode *tbaa_unionselbyte;   \/\/ a selector byte in isbits Union struct fields$/;"	v	typeref:typename:MDNode *	file:
tbaa_value	src/codegen.cpp	/^static MDNode *tbaa_value;          \/\/ jl_value_t, that is not jl_array_t$/;"	v	typeref:typename:MDNode *	file:
tc	test/bitarray.jl	/^tc(r1,r2) = false$/;"	f
tc	test/bitarray.jl	/^tc(r1::BitArray{N}, r2::Union{BitArray{N},Array{Bool,N}}) where {N} = true$/;"	f
tc	test/bitarray.jl	/^tc(r1::NTuple{N,Any}, r2::NTuple{N,Any}) where {N} = all(x->tc(x...), [zip(r1,r2)...])$/;"	f
tc	test/bitarray.jl	/^tc(r1::SubArray{Bool,N1,BitArray{N2}}, r2::SubArray{Bool,N1,<:Union{BitArray{N2},Array{Bool,N2}}/;"	f
tc	test/bitarray.jl	/^tc(r1::T, r2::T) where {T} = true$/;"	f
tc	test/bitarray.jl	/^tc(r1::Transpose{Bool,BitVector}, r2::Union{Transpose{Bool,BitVector},Transpose{Bool,Vector{Bool/;"	f
tchanged	base/compiler/typelattice.jl	/^@inline tchanged(@nospecialize(n), @nospecialize(o)) = o === NOT_FOUND || (n !== NOT_FOUND && !(/;"	f
tdata	stdlib/Mmap/test/runtests.jl	/^tdata = b"Hello World\\n"$/;"	v
tdiv_qr	base/gmp.jl	/^tdiv_qr(a::BigInt, b::BigInt) = tdiv_qr!(BigInt(), BigInt(), a, b)$/;"	f
tdiv_qr!	base/gmp.jl	/^function tdiv_qr!(x::BigInt, y::BigInt, a::BigInt, b::BigInt)$/;"	f
temp_buff	src/cgmemmgr.cpp	/^    SmallVector<Block, 16> temp_buff;$/;"	m	class:__anon06c686bc0111::SelfMemAllocator	typeref:typename:SmallVector<Block,16>	file:
temp_cleanup_later	base/file.jl	/^function temp_cleanup_later(path::AbstractString; asap::Bool=false)$/;"	f
temp_cleanup_purge	base/file.jl	/^function temp_cleanup_purge(all::Bool=true)$/;"	f
temp_prefix	base/file.jl	/^const temp_prefix = "jl_"$/;"	v
tempdir	base/file.jl	/^function tempdir()$/;"	f
tempdir	stdlib/SHA/test/runtests.jl	/^tempdir = mktempdir()$/;"	v
tempname	base/file.jl	/^function tempname(parent::AbstractString=tempdir(); cleanup::Bool=true)$/;"	f
ter_fintrinsic	src/runtime_intrinsics.c	/^#define ter_fintrinsic(/;"	d	file:
ter_intrinsic_ctype	src/runtime_intrinsics.c	/^#define ter_intrinsic_ctype(/;"	d	file:
term	stdlib/Markdown/src/GitHub/table.jl	/^function term(io::IO, md::Table, columns)$/;"	f
term	stdlib/Markdown/src/IPython/IPython.jl	/^term(io::IO, tex::LaTeX, cols) = printstyled(io, tex.formula, color=:magenta)$/;"	f
term	stdlib/Markdown/src/render/terminal/render.jl	/^function term(io::IO, br::HorizontalRule, columns)$/;"	f
term	stdlib/Markdown/src/render/terminal/render.jl	/^function term(io::IO, content::Vector, cols)$/;"	f
term	stdlib/Markdown/src/render/terminal/render.jl	/^function term(io::IO, f::Footnote, columns)$/;"	f
term	stdlib/Markdown/src/render/terminal/render.jl	/^function term(io::IO, md::Admonition, columns)$/;"	f
term	stdlib/Markdown/src/render/terminal/render.jl	/^function term(io::IO, md::BlockQuote, columns)$/;"	f
term	stdlib/Markdown/src/render/terminal/render.jl	/^function term(io::IO, md::Code, columns)$/;"	f
term	stdlib/Markdown/src/render/terminal/render.jl	/^function term(io::IO, md::Header{l}, columns) where l$/;"	f
term	stdlib/Markdown/src/render/terminal/render.jl	/^function term(io::IO, md::List, columns)$/;"	f
term	stdlib/Markdown/src/render/terminal/render.jl	/^function term(io::IO, md::Paragraph, columns)$/;"	f
term	stdlib/Markdown/src/render/terminal/render.jl	/^term(io::IO, br::LineBreak, columns) = nothing # line breaks already printed between subsequent /;"	f
term	stdlib/Markdown/src/render/terminal/render.jl	/^term(io::IO, md::MD, columns = cols(io)) = term(io, md.content, columns)$/;"	f
term	stdlib/Markdown/src/render/terminal/render.jl	/^term(io::IO, x, _) = show(io, MIME"text\/plain"(), x)$/;"	f
terminal	stdlib/REPL/src/LineEdit.jl	/^terminal(s::IO) = s$/;"	f
terminal	stdlib/REPL/src/LineEdit.jl	/^terminal(s::PrefixSearchState) = s.terminal$/;"	f
terminal	stdlib/REPL/src/LineEdit.jl	/^terminal(s::PromptState) = s.terminal$/;"	f
terminal	stdlib/REPL/src/LineEdit.jl	/^terminal(s::SearchState) = s.terminal$/;"	f
terminal	stdlib/REPL/src/REPL.jl	/^terminal(r::LineEditREPL) = r.t$/;"	f
terminal	stdlib/REPL/src/TerminalMenus/TerminalMenus.jl	/^terminal = nothing  # The user terminal$/;"	v
terminate	contrib/mac/frameworkapp/ExecSandbox/ExecSandbox.m	/^- (void)terminate {$/;"	m	implementation:JuliaTask
terminate	contrib/mac/frameworkapp/ExecSandbox/ExecSandboxProtocol.h	/^- (void)terminate;$/;"	m	protocol:TaskProtocol
terminate_all_workers	stdlib/Distributed/src/cluster.jl	/^function terminate_all_workers()$/;"	f
terminline	stdlib/Markdown/src/IPython/IPython.jl	/^terminline(io::IO, tex::LaTeX) = printstyled(io, tex.formula, color=:magenta)$/;"	f
terminline	stdlib/Markdown/src/render/terminal/render.jl	/^function terminline(io::IO, code::Code)$/;"	f
terminline	stdlib/Markdown/src/render/terminal/render.jl	/^function terminline(io::IO, content::Vector)$/;"	f
terminline	stdlib/Markdown/src/render/terminal/render.jl	/^function terminline(io::IO, md::AbstractString)$/;"	f
terminline	stdlib/Markdown/src/render/terminal/render.jl	/^function terminline(io::IO, md::Bold)$/;"	f
terminline	stdlib/Markdown/src/render/terminal/render.jl	/^function terminline(io::IO, md::Image)$/;"	f
terminline	stdlib/Markdown/src/render/terminal/render.jl	/^function terminline(io::IO, md::Italic)$/;"	f
terminline	stdlib/Markdown/src/render/terminal/render.jl	/^function terminline(io::IO, md::LineBreak)$/;"	f
terminline	stdlib/Markdown/src/render/terminal/render.jl	/^function terminline(io::IO, md::Link)$/;"	f
terminline	stdlib/Markdown/src/render/terminal/render.jl	/^terminline(io::IO, content...) = terminline(io, collect(content))$/;"	f
terminline	stdlib/Markdown/src/render/terminal/render.jl	/^terminline(io::IO, f::Footnote) = with_output_color(terminline, :bold, io, "[^$(f.id)]")$/;"	f
terminline	stdlib/Markdown/src/render/terminal/render.jl	/^terminline(io::IO, x) = show(io, MIME"text\/plain"(), x)$/;"	f
terminline_string	stdlib/Markdown/src/render/terminal/render.jl	/^terminline_string(io::IO, md) = sprint(terminline, md; context=io)$/;"	f
termlength	stdlib/Logging/src/ConsoleLogger.jl	/^function termlength(str)$/;"	f
test	Makefile	/^test: check-whitespace $(JULIA_BUILD_MODE)$/;"	t
test	base/logging.jl	/^function test(x)$/;"	f
test	src/flisp/Makefile	/^test:$/;"	t
test	stdlib/REPL/test/replcompletions.jl	/^        test(args...) = pass$/;"	f
test	stdlib/REPL/test/replcompletions.jl	/^        test(x::AbstractArray{T}, y) where {T<:Real} = pass$/;"	f
test	stdlib/REPL/test/replcompletions.jl	/^        test(x::Real, y::Real) = pass$/;"	f
test	stdlib/REPL/test/replcompletions.jl	/^        test(x::T, y::T) where {T<:Real} = pass$/;"	f
test	stdlib/Test/src/Test.jl	/^macro test(ex, kws...)$/;"	f
test	test/gcext/LocalTest.jl	/^function test()$/;"	f
test	test/llvmpasses/Makefile	/^test:$/;"	t
test	test/subtype.jl	/^    test(a::Type{Tuple{V, I}}) where {V <: Vecs, I <: Ints} = I$/;"	f
test-%	Makefile	/^test-%: check-whitespace $(JULIA_BUILD_MODE)$/;"	t
test/CodeGen/Hexagon/ifcvt-diamond-ret.mir	deps/patches/llvm-6.0.0-ifconv-D45819.patch	/^+++ test\/CodeGen\/Hexagon\/ifcvt-diamond-ret.mir$/;"	n
test/CodeGen/MIR/PowerPC/ifcvt-diamond-ret.mir	deps/patches/llvm-6.0.0-ifconv-D45819.patch	/^+++ test\/CodeGen\/MIR\/PowerPC\/ifcvt-diamond-ret.mir$/;"	n
test0	test/core.jl	/^    test0(::Type{IT4805{1, T}}, x) where {T <: Int64} = x$/;"	f
test1	base/docs/basedocs.jl	/^function test1(xs)$/;"	f
test1	stdlib/REPL/test/replcompletions.jl	/^        test1(x::Type{Float64}) = pass$/;"	f
test1	test/core.jl	/^    test1() = test0(IT4805{1, Int64}, 1)$/;"	f
test12806	test/core.jl	/^function test12806()$/;"	f
test13919	test/keywordargs.jl	/^    test13919(x::Vararg{Int}; key=100) = (x, key)$/;"	f
test18399	test/compiler/inference.jl	/^function test18399(C)$/;"	f
test18695	test/reduce.jl	/^test18695(r) = sum( t^2 for t in r )$/;"	f
test19864	stdlib/REPL/test/repl.jl	/^function test19864()$/;"	f
test1_dict	stdlib/REPL/test/lineedit.jl	/^test1_dict = LineEdit.keymap([foo_keymap])$/;"	v
test2	base/docs/basedocs.jl	/^function test2(xs)$/;"	f
test2	stdlib/REPL/test/replcompletions.jl	/^        test2(x::AbstractString) = pass$/;"	f
test2	stdlib/REPL/test/replcompletions.jl	/^        test2(x::Char) = pass$/;"	f
test2	stdlib/REPL/test/replcompletions.jl	/^        test2(x::Cmd) = pass$/;"	f
test2	test/core.jl	/^    test2() = test0(IT4805{1+0, Int64}, 1)$/;"	f
test27155	test/syntax.jl	/^macro test27155()$/;"	f
test27477	test/ccall.jl	/^test27477() = ccall((:ctest, Pkg27477.libccalltest), Complex{Int}, (Complex{Int},), 1 + 2im)$/;"	f
test27521	test/syntax.jl	/^macro test27521(f, x)$/;"	f
test27566	test/core.jl	/^function test27566(a,b)$/;"	f
test27566	test/core.jl	/^test27566(a, b, c, d) = a.*(b, c, d)$/;"	f
test27710	test/syntax.jl	/^function test27710()$/;"	f
test28079	test/compiler/inference.jl	/^test28079(p, n, m) = h28079(Foo28079(), Base.pointerref, p, n, m)$/;"	f
test2_12992	stdlib/FileWatching/test/runtests.jl	/^function test2_12992()$/;"	f
test2_dict	stdlib/REPL/test/lineedit.jl	/^test2_dict = LineEdit.keymap([foo2_keymap, foo_keymap])$/;"	v
test3	stdlib/REPL/test/replcompletions.jl	/^        test3(x::AbstractArray{Float64}, y::Float64) = pass$/;"	f
test3	stdlib/REPL/test/replcompletions.jl	/^        test3(x::AbstractArray{Int}, y::Int) = pass$/;"	f
test3	test/core.jl	/^    test3(n) = test0(IT4805{n, Int64}, 1)$/;"	f
test3_dict	stdlib/REPL/test/lineedit.jl	/^test3_dict = LineEdit.keymap([bar_keymap, foo_keymap])$/;"	v
test4	stdlib/REPL/test/replcompletions.jl	/^        test4(x::AbstractString, y::AbstractString) = pass$/;"	f
test4	stdlib/REPL/test/replcompletions.jl	/^        test4(x::AbstractString, y::Regex) = pass$/;"	f
test4974	test/keywordargs.jl	/^function test4974(;kwargs...)$/;"	f
test5	stdlib/REPL/test/replcompletions.jl	/^        test5(x::Array{Bool,1}) = pass$/;"	f
test5	stdlib/REPL/test/replcompletions.jl	/^        test5(x::BitArray{1}) = pass$/;"	f
test5	stdlib/REPL/test/replcompletions.jl	/^        test5(x::Float64) = pass$/;"	f
test5536	test/core.jl	/^test5536(a::Union{Real, AbstractArray}) = "Non-splatting"$/;"	f
test5536	test/core.jl	/^test5536(a::Union{Real, AbstractArray}...) = "Splatting"$/;"	f
test5884	test/core.jl	/^function test5884()$/;"	f
test5924	test/core.jl	/^    function test5924()$/;"	f
test6	stdlib/REPL/test/replcompletions.jl	/^        test6()=[a, a]$/;"	f
test6068	test/core.jl	/^function test6068()$/;"	f
test7	stdlib/REPL/test/replcompletions.jl	/^        test7() = rand(Bool) ? 1 : 1.0$/;"	f
test7302	test/core.jl	/^function test7302()$/;"	f
test7307	test/core.jl	/^function test7307(a, ret)$/;"	f
test8	stdlib/REPL/test/replcompletions.jl	/^        test8() = Any[1][1]$/;"	f
test8277	test/core.jl	/^function test8277(a)$/;"	f
test999_str	test/syntax.jl	/^macro test999_str(args...); args; end$/;"	f
testCases	test/mod2pi.jl	/^testCases = [$/;"	v
testModPi	test/mod2pi.jl	/^function testModPi()$/;"	f
testUcharX	src/ccalltest.c	/^JL_DLLEXPORT testUcharX(unsigned char x) {$/;"	f	typeref:typename:int (noinline)JL_DLLEXPORT
test_1	src/ccalltest.c	/^JL_DLLEXPORT struct1 test_1(struct1 a, float b) {$/;"	f	typeref:typename:JL_DLLEXPORT struct1
test_1	test/subtype.jl	/^function test_1()$/;"	f
test_10	src/ccalltest.c	/^JL_DLLEXPORT struct10 test_10(struct10 a, int8_t b) {$/;"	f	typeref:typename:JL_DLLEXPORT struct10
test_11	src/ccalltest.c	/^JL_DLLEXPORT struct11 test_11(struct11 a, float b) {$/;"	f	typeref:typename:JL_DLLEXPORT struct11
test_12	src/ccalltest.c	/^JL_DLLEXPORT struct12 test_12(struct12 a, float b) {$/;"	f	typeref:typename:JL_DLLEXPORT struct12
test_128	src/ccalltest.c	/^JL_DLLEXPORT int128_t test_128(int128_t a, int64_t b) {$/;"	f	typeref:typename:JL_DLLEXPORT int128_t
test_12992	stdlib/FileWatching/test/runtests.jl	/^function test_12992()$/;"	f
test_13	src/ccalltest.c	/^JL_DLLEXPORT struct13 test_13(struct13 a, double b) {$/;"	f	typeref:typename:JL_DLLEXPORT struct13
test_13315	test/abstractarray.jl	/^function test_13315(::Type{TestAbstractArray})$/;"	f
test_13559	test/stress.jl	/^    function test_13559()$/;"	f
test_14	src/ccalltest.c	/^JL_DLLEXPORT struct14 test_14(struct14 a, float b) {$/;"	f	typeref:typename:JL_DLLEXPORT struct14
test_15	src/ccalltest.c	/^JL_DLLEXPORT struct15 test_15(struct15 a, double b) {$/;"	f	typeref:typename:JL_DLLEXPORT struct15
test_15703	test/tuple.jl	/^    function test_15703()$/;"	f
test_16	src/ccalltest.c	/^JL_DLLEXPORT struct16 test_16(struct16 a, float b) {$/;"	f	typeref:typename:JL_DLLEXPORT struct16
test_17	src/ccalltest.c	/^JL_DLLEXPORT struct17 test_17(struct17 a, int8_t b) {$/;"	f	typeref:typename:JL_DLLEXPORT struct17
test_18	src/ccalltest.c	/^JL_DLLEXPORT struct18 test_18(struct18 a, int8_t b) {$/;"	f	typeref:typename:JL_DLLEXPORT struct18
test_1long_a	src/ccalltest.c	/^JL_DLLEXPORT struct1 test_1long_a(jint x1, jint x2, jint x3, struct1 a, float b) {$/;"	f	typeref:typename:JL_DLLEXPORT struct1
test_1long_b	src/ccalltest.c	/^JL_DLLEXPORT struct1 test_1long_b(jint x1, double x2, jint x3, struct1 a, float b) {$/;"	f	typeref:typename:JL_DLLEXPORT struct1
test_1long_c	src/ccalltest.c	/^JL_DLLEXPORT struct1 test_1long_c(jint x1, double x2, jint x3, jint x4, struct1 a, float b) {$/;"	f	typeref:typename:JL_DLLEXPORT struct1
test_2	test/subtype.jl	/^function test_2()$/;"	f
test_20902	test/compiler/inference.jl	/^@generated function test_20902()$/;"	f
test_22566	test/stress.jl	/^    function test_22566()$/;"	f
test_26037	test/syntax.jl	/^function test_26037()$/;"	f
test_2a	src/ccalltest.c	/^JL_DLLEXPORT struct2a test_2a(struct2a a, int32_t b) {$/;"	f	typeref:typename:JL_DLLEXPORT struct2a
test_2b	src/ccalltest.c	/^JL_DLLEXPORT struct2b test_2b(struct2b a, int32_t b) {$/;"	f	typeref:typename:JL_DLLEXPORT struct2b
test_3	test/subtype.jl	/^function test_3()$/;"	f
test_3a	src/ccalltest.c	/^JL_DLLEXPORT struct3a test_3a(struct3a a, int64_t b) {$/;"	f	typeref:typename:JL_DLLEXPORT struct3a
test_3b	src/ccalltest.c	/^JL_DLLEXPORT struct3b test_3b(struct3b a, int64_t b) {$/;"	f	typeref:typename:JL_DLLEXPORT struct3b
test_4	src/ccalltest.c	/^JL_DLLEXPORT struct4 test_4(struct4 a, int32_t b) {$/;"	f	typeref:typename:JL_DLLEXPORT struct4
test_4	test/subtype.jl	/^function test_4()$/;"	f
test_5	src/ccalltest.c	/^JL_DLLEXPORT struct5 test_5(struct5 a, int32_t b) {$/;"	f	typeref:typename:JL_DLLEXPORT struct5
test_5	test/subtype.jl	/^function test_5()$/;"	f
test_6	src/ccalltest.c	/^JL_DLLEXPORT struct6 test_6(struct6 a, int64_t b) {$/;"	f	typeref:typename:JL_DLLEXPORT struct6
test_6	test/subtype.jl	/^function test_6()$/;"	f
test_7	src/ccalltest.c	/^JL_DLLEXPORT struct7 test_7(struct7 a, int8_t b) {$/;"	f	typeref:typename:JL_DLLEXPORT struct7
test_7	test/subtype.jl	/^function test_7()$/;"	f
test_8	src/ccalltest.c	/^JL_DLLEXPORT struct8 test_8(struct8 a, int8_t b) {$/;"	f	typeref:typename:JL_DLLEXPORT struct8
test_9	src/ccalltest.c	/^JL_DLLEXPORT struct9 test_9(struct9 a, int16_t b) {$/;"	f	typeref:typename:JL_DLLEXPORT struct9
test_LibcFILE	test/file.jl	/^function test_LibcFILE(FILEp)$/;"	f
test_Type	test/subtype.jl	/^function test_Type()$/;"	f
test_UInt_indexing	test/abstractarray.jl	/^function test_UInt_indexing(::Type{TestAbstractArray})$/;"	f
test_aa64_fp16_1	src/ccalltest.c	/^JL_DLLEXPORT __fp16 test_aa64_fp16_1(int v1, float v2, double v3, __fp16 v4)$/;"	f	typeref:typename:JL_DLLEXPORT __fp16
test_aa64_fp16_2	src/ccalltest.c	/^JL_DLLEXPORT struct_aa64_2 test_aa64_fp16_2(int v1, float v2,$/;"	f	typeref:typename:JL_DLLEXPORT struct_aa64_2
test_aa64_i128_1	src/ccalltest.c	/^JL_DLLEXPORT __int128 test_aa64_i128_1(int64_t v1, __int128 v2)$/;"	f	typeref:typename:JL_DLLEXPORT __int128
test_aa64_i128_2	src/ccalltest.c	/^JL_DLLEXPORT struct_aa64_1 test_aa64_i128_2(int64_t v1, __int128 v2,$/;"	f	typeref:typename:JL_DLLEXPORT struct_aa64_1
test_aa64_vec_1	src/ccalltest.c	/^JL_DLLEXPORT int64x2_t test_aa64_vec_1(int32x2_t v1, float _v2, int32x2_t v3)$/;"	f	typeref:typename:JL_DLLEXPORT int64x2_t
test_aa64_vec_2	src/ccalltest.c	/^JL_DLLEXPORT struct_aa64_3 test_aa64_vec_2(struct_aa64_3 v1, struct_aa64_4 v2)$/;"	f	typeref:typename:JL_DLLEXPORT struct_aa64_3
test_add_procs_threaded_blas	stdlib/Distributed/test/distributed_exec.jl	/^function test_add_procs_threaded_blas()$/;"	f
test_all_bits	src/processor.cpp	/^static inline bool test_all_bits(T1 v, T2 mask)$/;"	f	namespace:__anon839834ed0111	typeref:typename:bool	file:
test_approx_eq	stdlib/Test/src/Test.jl	/^    function test_approx_eq(va, vb, Eps, astr, bstr)$/;"	f
test_approx_eq	stdlib/Test/src/Test.jl	/^    test_approx_eq(va, vb, astr, bstr) =$/;"	f
test_approx_eq_modphase	stdlib/LinearAlgebra/test/testutils.jl	/^function test_approx_eq_modphase(a::StridedVecOrMat{S}, b::StridedVecOrMat{T},$/;"	f
test_approx_eq_vecs	stdlib/LinearAlgebra/test/tridiag.jl	/^function test_approx_eq_vecs(a::StridedVecOrMat{S}, b::StridedVecOrMat{T}, error=nothing) where /;"	f
test_ast_reflection	stdlib/InteractiveUtils/test/runtests.jl	/^function test_ast_reflection(freflect, f, types)$/;"	f
test_ast_reflection	test/reflection.jl	/^function test_ast_reflection(freflect, f, types)$/;"	f
test_atomic	test/threads_exec.jl	/^function test_atomic()$/;"	f
test_atomic_bools	test/threads_exec.jl	/^function test_atomic_bools()$/;"	f
test_atomic_cas!	test/threads_exec.jl	/^function test_atomic_cas!(var::Atomic{T}, range::StepRange{Int,Int}) where T$/;"	f
test_atomic_float	test/threads_exec.jl	/^function test_atomic_float(varadd::Atomic{T}, varmax::Atomic{T}, varmin::Atomic{T}, i::Int) wher/;"	f
test_atomic_read	test/threads_exec.jl	/^function test_atomic_read(commbuf::CommBuf, n::Int)$/;"	f
test_atomic_write	test/threads_exec.jl	/^function test_atomic_write(commbuf::CommBuf, n::Int)$/;"	f
test_atomic_xchg!	test/threads_exec.jl	/^function test_atomic_xchg!(var::Atomic{T}, i::Int, accum::Atomic{Int}) where T$/;"	f
test_bidirectional	stdlib/Sockets/test/nettest.jl	/^function test_bidirectional(exp)$/;"	f
test_big	src/ccalltest.c	/^JL_DLLEXPORT struct_big test_big(struct_big a) {$/;"	f	typeref:typename:JL_DLLEXPORT struct_big
test_big_long	src/ccalltest.c	/^JL_DLLEXPORT struct_big test_big_long(jint x1, jint x2, jint x3, struct_big a) {$/;"	f	typeref:typename:JL_DLLEXPORT struct_big
test_bigval_range	test/gcext/gcext.c	/^static inline int test_bigval_range(treap_t *node, void *p)$/;"	f	typeref:typename:int	file:
test_bin_reflection	stdlib/InteractiveUtils/test/runtests.jl	/^function test_bin_reflection(freflect, f, types)$/;"	f
test_bin_reflection	test/reflection.jl	/^function test_bin_reflection(freflect, f, types)$/;"	f
test_bits	src/processor.cpp	/^static inline bool test_bits(T1 v, T2 mask, T3 test)$/;"	f	namespace:__anon839834ed0111	typeref:typename:bool	file:
test_bits_tuples	test/core.jl	/^function test_bits_tuples()$/;"	f
test_blas_config	stdlib/Distributed/test/distributed_exec.jl	/^function test_blas_config(pid, expected)$/;"	f
test_bounds	test/subarray.jl	/^function test_bounds(@nospecialize(A))$/;"	f
test_broken	stdlib/Test/src/Test.jl	/^macro test_broken(ex, kws...)$/;"	f
test_bslashcomplete	stdlib/REPL/test/replcompletions.jl	/^test_bslashcomplete(s) =  map_completion_text(bslash_completions(s,lastindex(s))[2])$/;"	f
test_cartesian	test/subarray.jl	/^function test_cartesian(@nospecialize(A), @nospecialize(B))$/;"	f
test_cat	test/abstractarray.jl	/^function test_cat(::Type{TestAbstractArray})$/;"	f
test_channel	stdlib/Distributed/test/distributed_exec.jl	/^function test_channel(c)$/;"	f
test_checksquare	test/abstractarray.jl	/^function test_checksquare()$/;"	f
test_clear	stdlib/Distributed/test/distributed_exec.jl	/^function test_clear(syms, pids)$/;"	f
test_code_reflection	stdlib/InteractiveUtils/test/runtests.jl	/^function test_code_reflection(freflect, f, types, tester)$/;"	f
test_code_reflection	test/reflection.jl	/^function test_code_reflection(freflect, f, types, tester)$/;"	f
test_code_reflections	stdlib/InteractiveUtils/test/runtests.jl	/^function test_code_reflections(tester, freflect)$/;"	f
test_code_reflections	test/reflection.jl	/^function test_code_reflections(tester, freflect)$/;"	f
test_complete	stdlib/REPL/test/replcompletions.jl	/^test_complete(s) = map_completion_text(completions(s,lastindex(s)))$/;"	f
test_complete_context	stdlib/REPL/test/replcompletions.jl	/^test_complete_context(s) =  map_completion_text(completions(s,lastindex(s),Main.CompletionFoo))$/;"	f
test_connect_disconnect	stdlib/Sockets/test/nettest.jl	/^function test_connect_disconnect(exp)$/;"	f
test_const_return	test/compiler/inference.jl	/^function test_const_return(@nospecialize(f), @nospecialize(t), @nospecialize(val))$/;"	f
test_copy_alias	test/core.jl	/^function test_copy_alias(::Type{T}) where T$/;"	f
test_crc32c	stdlib/CRC32c/test/runtests.jl	/^function test_crc32c(crc32c)$/;"	f
test_cycle	stdlib/REPL/test/lineedit.jl	/^const test_cycle = Dict($/;"	v
test_deprecated	stdlib/Test/src/logging.jl	/^macro test_deprecated(exs...)$/;"	f
test_diagonal	test/subtype.jl	/^function test_diagonal()$/;"	f
test_dict_completion	stdlib/REPL/test/replcompletions.jl	/^function test_dict_completion(dict_name)$/;"	f
test_dirmonitor_wait	stdlib/FileWatching/test/runtests.jl	/^function test_dirmonitor_wait(tval)$/;"	f
test_dirmonitor_wait2	stdlib/FileWatching/test/runtests.jl	/^function test_dirmonitor_wait2(tval)$/;"	f
test_div_pinv_consistency	stdlib/LinearAlgebra/test/dense.jl	/^function test_div_pinv_consistency(a, b)$/;"	f
test_echo_p	src/ccalltest.c	/^JL_DLLEXPORT void *test_echo_p(void *p) {$/;"	f	typeref:typename:JL_DLLEXPORT void *
test_eq_array_int	test/core.jl	/^test_eq_array_int() = ===(const_array_int1, const_array_int2)$/;"	f
test_exc_stack_catch_return	test/exceptions.jl	/^    function test_exc_stack_catch_return()$/;"	f
test_exc_stack_deep	test/exceptions.jl	/^    function test_exc_stack_deep(n)$/;"	f
test_exc_stack_tailpos	test/exceptions.jl	/^    function test_exc_stack_tailpos()$/;"	f
test_exc_stack_try_return	test/exceptions.jl	/^        function test_exc_stack_try_return()$/;"	f
test_existing_ref	stdlib/Distributed/src/remotecall.jl	/^function test_existing_ref(r::AbstractRemoteRef)$/;"	f
test_expr!	stdlib/Test/src/Test.jl	/^function test_expr!(m, ex, kws...)$/;"	f
test_expr!	stdlib/Test/src/Test.jl	/^test_expr!(m, ex) = ex$/;"	f
test_f_args	stdlib/Distributed/test/distributed_exec.jl	/^function test_f_args(result, args...; kwargs...)$/;"	f
test_fast_eq	test/compiler/inference.jl	/^test_fast_eq(a, b) = @fastmath a == b$/;"	f
test_fast_le	test/compiler/inference.jl	/^test_fast_le(a, b) = @fastmath a <= b$/;"	f
test_fast_lt	test/compiler/inference.jl	/^test_fast_lt(a, b) = @fastmath a < b$/;"	f
test_fast_ne	test/compiler/inference.jl	/^test_fast_ne(a, b) = @fastmath a != b$/;"	f
test_fence	test/threads_exec.jl	/^function test_fence()$/;"	f
test_fence	test/threads_exec.jl	/^function test_fence(p::Peterson, id::Int, n::Int)$/;"	f
test_file_poll	stdlib/FileWatching/test/runtests.jl	/^function test_file_poll(channel, interval, timeout_s)$/;"	f
test_find	test/loading.jl	/^function test_find($/;"	f
test_frame_func	test/gcext/gcext.c	/^typedef volatile int (*volatile test_frame_func)(volatile char *frame_addr);$/;"	t	typeref:typename:volatile int (* volatile)(volatile char * frame_addr)	file:
test_futures_dgc	stdlib/Distributed/test/distributed_exec.jl	/^function test_futures_dgc(id)$/;"	f
test_get	test/abstractarray.jl	/^function test_get(::Type{TestAbstractArray})$/;"	f
test_getindex_algs	stdlib/SparseArrays/test/sparse.jl	/^function test_getindex_algs(A::SparseMatrixCSC{Tv,Ti}, I::AbstractVector, J::AbstractVector, alg/;"	f
test_getindex_internals	test/abstractarray.jl	/^function test_getindex_internals(::Type{TestAbstractArray})$/;"	f
test_getindex_internals	test/abstractarray.jl	/^function test_getindex_internals(::Type{T}, shape, ::Type{TestAbstractArray}) where T$/;"	f
test_huge	src/ccalltest.c	/^#define test_huge(/;"	d	file:
test_huge	test/ccall.jl	/^macro test_huge(i, b, init)$/;"	f
test_in_bounds	test/abstractarray.jl	/^function test_in_bounds(::Type{TestAbstractArray})$/;"	f
test_ind2sub	test/abstractarray.jl	/^function test_ind2sub(::Type{TestAbstractArray})$/;"	f
test_indexing	stdlib/Distributed/test/distributed_exec.jl	/^function test_indexing(rr)$/;"	f
test_inferred_static	test/compiler/inference.jl	/^function test_inferred_static(arrow::Pair, all_ssa)$/;"	f
test_inferred_static	test/compiler/inference.jl	/^function test_inferred_static(expr::Expr)$/;"	f
test_inferred_static	test/compiler/inference.jl	/^test_inferred_static(@nospecialize(other)) = true$/;"	f
test_inferred_static	test/compiler/inference.jl	/^test_inferred_static(slot::TypedSlot) = @test isdispatchelem(slot.typ)$/;"	f
test_init_afile	stdlib/FileWatching/test/runtests.jl	/^function test_init_afile()$/;"	f
test_inline_bt	test/backtrace.jl	/^module test_inline_bt$/;"	f
test_inlined_symbols	test/compiler/inline.jl	/^function test_inlined_symbols(func, argtypes)$/;"	f
test_inner	test/compiler/inline.jl	/^@inline function test_inner(count)$/;"	f
test_intersection	test/subtype.jl	/^function test_intersection()$/;"	f
test_intersection_properties	test/subtype.jl	/^function test_intersection_properties()$/;"	f
test_iteration	stdlib/Distributed/test/distributed_exec.jl	/^function test_iteration(in_c, out_c)$/;"	f
test_jl_dump_compiles	test/compiler/codegen.jl	/^function test_jl_dump_compiles()$/;"	f
test_jl_dump_compiles_toplevel_thunks	test/compiler/codegen.jl	/^function test_jl_dump_compiles_toplevel_thunks()$/;"	f
test_keymap_1	stdlib/REPL/test/lineedit.jl	/^const test_keymap_1 = Dict($/;"	v
test_keymap_2	stdlib/REPL/test/lineedit.jl	/^const test_keymap_2 = Dict($/;"	v
test_keymap_3	stdlib/REPL/test/lineedit.jl	/^const test_keymap_3 = Dict($/;"	v
test_keymap_4	stdlib/REPL/test/lineedit.jl	/^const test_keymap_4 = Dict($/;"	v
test_keymap_5	stdlib/REPL/test/lineedit.jl	/^const test_keymap_5 = Dict($/;"	v
test_keymap_6	stdlib/REPL/test/lineedit.jl	/^const test_keymap_6 = Dict($/;"	v
test_keymap_7	stdlib/REPL/test/lineedit.jl	/^const test_keymap_7 = Dict($/;"	v
test_keymap_8	stdlib/REPL/test/lineedit.jl	/^const test_keymap_8 = Dict($/;"	v
test_keymap_9	stdlib/REPL/test/lineedit.jl	/^const test_keymap_9 = Dict($/;"	v
test_large_string20360	test/core.jl	/^    @noinline function test_large_string20360(slot)$/;"	f
test_ldiv_pinv_consistency	stdlib/LinearAlgebra/test/dense.jl	/^function test_ldiv_pinv_consistency(a, b)$/;"	f
test_linear	test/subarray.jl	/^function test_linear(@nospecialize(A), @nospecialize(B))$/;"	f
test_load_and_lookup_18020	test/threads_exec.jl	/^function test_load_and_lookup_18020(n)$/;"	f
test_loads_no_call	test/compiler/codegen.jl	/^function test_loads_no_call(ir, load_types)$/;"	f
test_logs	stdlib/Test/src/logging.jl	/^macro test_logs(exs...)$/;"	f
test_long_args_double	src/ccalltest.c	/^JL_DLLEXPORT double test_long_args_double(double a1, double a2, double a3,$/;"	f	typeref:typename:JL_DLLEXPORT double
test_long_args_float	src/ccalltest.c	/^JL_DLLEXPORT float test_long_args_float(float a1, float a2, float a3,$/;"	f	typeref:typename:JL_DLLEXPORT float
test_long_args_int	src/ccalltest.c	/^JL_DLLEXPORT int test_long_args_int(int a1, int a2, int a3, int a4,$/;"	f	typeref:typename:JL_DLLEXPORT int
test_long_args_intp	src/ccalltest.c	/^JL_DLLEXPORT int test_long_args_intp(int *a1, int *a2, int *a3, int *a4,$/;"	f	typeref:typename:JL_DLLEXPORT int
test_m128	src/ccalltest.c	/^JL_DLLEXPORT __m128 test_m128(__m128 a, __m128 b, __m128 c, __m128 d)$/;"	f	typeref:typename:JL_DLLEXPORT __m128
test_m128i	src/ccalltest.c	/^JL_DLLEXPORT __m128i test_m128i(__m128i a, __m128i b, __m128i c, __m128i d)$/;"	f	typeref:typename:JL_DLLEXPORT __m128i
test_me	stdlib/Printf/test/runtests.jl	/^macro test_me(ty, ex)$/;"	f
test_metadata_matches	test/core.jl	/^function test_metadata_matches(@nospecialize(f), @nospecialize(tt))$/;"	f
test_mixed	test/subarray.jl	/^test_mixed(::AbstractArray{T,1}, ::Array) where {T} = nothing$/;"	f
test_mixed	test/subarray.jl	/^test_mixed(::AbstractArray{T,2}, ::Array) where {T} = nothing$/;"	f
test_mixed	test/subarray.jl	/^test_mixed(A, B::Array) = _test_mixed(A, reshape(B, size(A)))$/;"	f
test_monitor_wait	stdlib/FileWatching/test/runtests.jl	/^function test_monitor_wait(tval)$/;"	f
test_monitor_wait_poll	stdlib/FileWatching/test/runtests.jl	/^function test_monitor_wait_poll()$/;"	f
test_mt	test/show.jl	/^function test_mt(f, str)$/;"	f
test_mul	stdlib/LinearAlgebra/test/matmul.jl	/^function test_mul(C, A, B)$/;"	f
test_n_remove_pids	stdlib/Distributed/test/distributed_exec.jl	/^    function test_n_remove_pids(new_pids)$/;"	f
test_nbit	src/processor.cpp	/^static inline bool test_nbit(const T1 &bits, T2 _bitidx)$/;"	f	namespace:__anon839834ed0111	typeref:typename:bool	file:
test_nested_loops	test/threads_exec.jl	/^function test_nested_loops()$/;"	f
test_no_apply	test/compiler/inference.jl	/^function test_no_apply(expr::Expr)$/;"	f
test_no_apply	test/compiler/inference.jl	/^function test_no_apply(ref::GlobalRef)$/;"	f
test_no_apply	test/compiler/inference.jl	/^test_no_apply(::Any) = true$/;"	f
test_nowarn	stdlib/Test/src/Test.jl	/^macro test_nowarn(expr)$/;"	f
test_old	test/subtype.jl	/^function test_old()$/;"	f
test_outer	test/compiler/inline.jl	/^function test_outer(a)$/;"	f
test_overlong	test/char.jl	/^    function test_overlong(c::Char, n::Integer, rep::String)$/;"	f
test_parseerror	test/syntax.jl	/^function test_parseerror(str, msg)$/;"	f
test_path	test/runtests.jl	/^function test_path(test)$/;"	f
test_pinv	stdlib/LinearAlgebra/test/pinv.jl	/^function test_pinv(a,m,n,tol1,tol2,tol3)$/;"	f
test_ppc64_vec1long	src/ccalltest.c	/^JL_DLLEXPORT int64_t test_ppc64_vec1long($/;"	f	typeref:typename:JL_DLLEXPORT int64_t
test_ppc64_vec1long_vec	src/ccalltest.c	/^JL_DLLEXPORT int64_t test_ppc64_vec1long_vec($/;"	f	typeref:typename:JL_DLLEXPORT int64_t
test_ppc64_vec2	src/ccalltest.c	/^JL_DLLEXPORT float32x4_t test_ppc64_vec2(int64_t d1, float32x4_t a, float32x4_t b, float32x4_t c/;"	f	typeref:typename:JL_DLLEXPORT float32x4_t
test_primitives	test/abstractarray.jl	/^function test_primitives(::Type{T}, shape, ::Type{TestAbstractArray}) where T$/;"	f
test_properties	test/subtype.jl	/^function test_properties()$/;"	f
test_range_identity	test/ranges.jl	/^    function test_range_identity(r::AbstractRange{T}, mr) where T$/;"	f
test_range_index	test/ranges.jl	/^    function test_range_index(r, s)$/;"	f
test_range_sum_diff	test/ranges.jl	/^    function test_range_sum_diff(r1, r2, r_sum, r_diff)$/;"	f
test_rdiv_pinv_consistency	stdlib/LinearAlgebra/test/dense.jl	/^function test_rdiv_pinv_consistency(a, b)$/;"	f
test_read_nbyte	test/read.jl	/^function test_read_nbyte()$/;"	f
test_regular_io_ser	stdlib/Distributed/test/distributed_exec.jl	/^function test_regular_io_ser(ref::Distributed.AbstractRemoteRef)$/;"	f
test_relpath	test/path.jl	/^        function test_relpath()$/;"	f
test_remoteexception_thrown	stdlib/Distributed/test/distributed_exec.jl	/^function test_remoteexception_thrown(expr)$/;"	f
test_remoteref_dgc	stdlib/Distributed/test/distributed_exec.jl	/^function test_remoteref_dgc(id)$/;"	f
test_repr	test/show.jl	/^function test_repr(x::String)$/;"	f
test_repr	test/show.jl	/^macro test_repr(x)$/;"	f
test_scalar_indexing	test/abstractarray.jl	/^function test_scalar_indexing(::Type{T}, shape, ::Type{TestAbstractArray}) where T$/;"	f
test_scomplete	stdlib/REPL/test/replcompletions.jl	/^test_scomplete(s) =  map_completion_text(shell_completions(s,lastindex(s)))$/;"	f
test_send	stdlib/Sockets/test/nettest.jl	/^function test_send(exp)$/;"	f
test_setindex!_internals	test/abstractarray.jl	/^function test_setindex!_internals(::Type{TestAbstractArray})$/;"	f
test_setindex!_internals	test/abstractarray.jl	/^function test_setindex!_internals(::Type{T}, shape, ::Type{TestAbstractArray}) where T$/;"	f
test_shared_array_resize	test/core.jl	/^function test_shared_array_resize(::Type{T}) where T$/;"	f
test_show_bigfloat	test/mpfr.jl	/^    function test_show_bigfloat(x::BigFloat; contains_e::Bool=true,$/;"	f
test_similar_codeinfo	test/reflection.jl	/^function test_similar_codeinfo(a, b)$/;"	f
test_skip	stdlib/Test/src/Test.jl	/^macro test_skip(ex, kws...)$/;"	f
test_spill_float1	src/ccalltest.c	/^JL_DLLEXPORT float test_spill_float1(float v1, struct_spill_float s)$/;"	f	typeref:typename:JL_DLLEXPORT float
test_spill_float10	src/ccalltest.c	/^JL_DLLEXPORT float test_spill_float10(float v1, float v2, float v3, float v4,$/;"	f	typeref:typename:JL_DLLEXPORT float
test_spill_float2	src/ccalltest.c	/^JL_DLLEXPORT float test_spill_float2(float v1, float v2, struct_spill_float s)$/;"	f	typeref:typename:JL_DLLEXPORT float
test_spill_float3	src/ccalltest.c	/^JL_DLLEXPORT float test_spill_float3(float v1, float v2, float v3,$/;"	f	typeref:typename:JL_DLLEXPORT float
test_spill_float4	src/ccalltest.c	/^JL_DLLEXPORT float test_spill_float4(float v1, float v2, float v3, float v4,$/;"	f	typeref:typename:JL_DLLEXPORT float
test_spill_float5	src/ccalltest.c	/^JL_DLLEXPORT float test_spill_float5(float v1, float v2, float v3, float v4,$/;"	f	typeref:typename:JL_DLLEXPORT float
test_spill_float6	src/ccalltest.c	/^JL_DLLEXPORT float test_spill_float6(float v1, float v2, float v3, float v4,$/;"	f	typeref:typename:JL_DLLEXPORT float
test_spill_float7	src/ccalltest.c	/^JL_DLLEXPORT float test_spill_float7(float v1, float v2, float v3, float v4,$/;"	f	typeref:typename:JL_DLLEXPORT float
test_spill_float8	src/ccalltest.c	/^JL_DLLEXPORT float test_spill_float8(float v1, float v2, float v3, float v4,$/;"	f	typeref:typename:JL_DLLEXPORT float
test_spill_float9	src/ccalltest.c	/^JL_DLLEXPORT float test_spill_float9(float v1, float v2, float v3, float v4,$/;"	f	typeref:typename:JL_DLLEXPORT float
test_spill_int1	src/ccalltest.c	/^JL_DLLEXPORT int test_spill_int1(int *v1, struct_spill_pint s)$/;"	f	typeref:typename:JL_DLLEXPORT int
test_spill_int10	src/ccalltest.c	/^JL_DLLEXPORT int test_spill_int10(int *v1, int *v2, int *v3, int *v4, int *v5,$/;"	f	typeref:typename:JL_DLLEXPORT int
test_spill_int2	src/ccalltest.c	/^JL_DLLEXPORT int test_spill_int2(int *v1, int *v2, struct_spill_pint s)$/;"	f	typeref:typename:JL_DLLEXPORT int
test_spill_int3	src/ccalltest.c	/^JL_DLLEXPORT int test_spill_int3(int *v1, int *v2, int *v3, struct_spill_pint s)$/;"	f	typeref:typename:JL_DLLEXPORT int
test_spill_int4	src/ccalltest.c	/^JL_DLLEXPORT int test_spill_int4(int *v1, int *v2, int *v3, int *v4,$/;"	f	typeref:typename:JL_DLLEXPORT int
test_spill_int5	src/ccalltest.c	/^JL_DLLEXPORT int test_spill_int5(int *v1, int *v2, int *v3, int *v4, int *v5,$/;"	f	typeref:typename:JL_DLLEXPORT int
test_spill_int6	src/ccalltest.c	/^JL_DLLEXPORT int test_spill_int6(int *v1, int *v2, int *v3, int *v4, int *v5,$/;"	f	typeref:typename:JL_DLLEXPORT int
test_spill_int7	src/ccalltest.c	/^JL_DLLEXPORT int test_spill_int7(int *v1, int *v2, int *v3, int *v4, int *v5,$/;"	f	typeref:typename:JL_DLLEXPORT int
test_spill_int8	src/ccalltest.c	/^JL_DLLEXPORT int test_spill_int8(int *v1, int *v2, int *v3, int *v4, int *v5,$/;"	f	typeref:typename:JL_DLLEXPORT int
test_spill_int9	src/ccalltest.c	/^JL_DLLEXPORT int test_spill_int9(int *v1, int *v2, int *v3, int *v4, int *v5,$/;"	f	typeref:typename:JL_DLLEXPORT int
test_spill_n	test/ccall.jl	/^macro test_spill_n(n::Int, intargs, floatargs)$/;"	f
test_splatting	test/logging.jl	/^        test_splatting(;kws...) = @info "test3" kws...$/;"	f
test_sse	test/ccall.jl	/^    function test_sse(a1::V4xF32, a2::V4xF32, a3::V4xF32, a4::V4xF32)$/;"	f
test_sse	test/ccall.jl	/^    function test_sse(a1::V4xI32, a2::V4xI32, a3::V4xI32, a4::V4xI32)$/;"	f
test_stat_error	test/file.jl	/^function test_stat_error(stat::Function, pth)$/;"	f
test_struct1	test/ccall.jl	/^function test_struct1(::Type{Struct}) where {Struct}$/;"	f
test_struct10	test/ccall.jl	/^function test_struct10(::Type{Struct}) where {Struct}$/;"	f
test_struct11	test/ccall.jl	/^function test_struct11(::Type{Struct}) where {Struct}$/;"	f
test_struct12	test/ccall.jl	/^function test_struct12(::Type{Struct}) where {Struct}$/;"	f
test_struct13	test/ccall.jl	/^function test_struct13(::Type{Struct}) where {Struct}$/;"	f
test_struct14	test/ccall.jl	/^function test_struct14(::Type{Struct}) where {Struct}$/;"	f
test_struct15	test/ccall.jl	/^function test_struct15(::Type{Struct}) where {Struct}$/;"	f
test_struct16	test/ccall.jl	/^function test_struct16(::Type{Struct}, quoteplz = false) where {Struct}$/;"	f
test_struct17	test/ccall.jl	/^function test_struct17(::Type{Struct}) where {Struct}$/;"	f
test_struct18	test/ccall.jl	/^function test_struct18(::Type{Struct}) where {Struct}$/;"	f
test_struct4	test/ccall.jl	/^function test_struct4(::Type{Struct}) where {Struct}$/;"	f
test_struct5	test/ccall.jl	/^function test_struct5(::Type{Struct}) where {Struct}$/;"	f
test_struct6	test/ccall.jl	/^function test_struct6(::Type{Struct}) where {Struct}$/;"	f
test_struct7	test/ccall.jl	/^function test_struct7(::Type{Struct}) where {Struct}$/;"	f
test_struct8	test/ccall.jl	/^function test_struct8(::Type{Struct}) where {Struct}$/;"	f
test_struct9	test/ccall.jl	/^function test_struct9(::Type{Struct}) where {Struct}$/;"	f
test_struct_big	test/ccall.jl	/^function test_struct_big(::Type{Struct}) where {Struct}$/;"	f
test_success	base/process.jl	/^function test_success(proc::Process)$/;"	f
test_thread_cfunction	test/threads_exec.jl	/^function test_thread_cfunction()$/;"	f
test_thread_range	test/threads_exec.jl	/^function test_thread_range()$/;"	f
test_thread_too_few_iters	test/threads_exec.jl	/^function test_thread_too_few_iters()$/;"	f
test_threaded_atomic_minmax	test/threads_exec.jl	/^function test_threaded_atomic_minmax(m::T,n::T) where T$/;"	f
test_threaded_loop_and_atomic_add	test/threads_exec.jl	/^function test_threaded_loop_and_atomic_add()$/;"	f
test_throw_commoning	test/backtrace.jl	/^@noinline function test_throw_commoning(x)$/;"	f
test_throw_on	stdlib/Distributed/test/distributed_exec.jl	/^    function test_throw_on(procs, msg)$/;"	f
test_throws	stdlib/Test/src/Test.jl	/^macro test_throws(extype, ex)$/;"	f
test_throws	test/simdloop.jl	/^macro test_throws(ty, ex)$/;"	f
test_timeout	stdlib/FileWatching/test/runtests.jl	/^function test_timeout(tval)$/;"	f
test_touch	stdlib/FileWatching/test/runtests.jl	/^function test_touch(slval)$/;"	f
test_type	test/errorshow.jl	/^test_type = Test_type()$/;"	v
test_typed_ast_printing	test/reflection.jl	/^function test_typed_ast_printing(Base.@nospecialize(f), Base.@nospecialize(types), must_used_var/;"	f
test_undef_var_9898	test/core.jl	/^function test_undef_var_9898(a)$/;"	f
test_unshare	test/core.jl	/^    function test_unshare(f)$/;"	f
test_vector_indexing	test/abstractarray.jl	/^function test_vector_indexing(::Type{T}, shape, ::Type{TestAbstractArray}) where T$/;"	f
test_warn	stdlib/Test/src/Test.jl	/^macro test_warn(msg, expr)$/;"	f
test_watch_file_change	stdlib/FileWatching/test/runtests.jl	/^function test_watch_file_change(tval)$/;"	f
test_watch_file_timeout	stdlib/FileWatching/test/runtests.jl	/^function test_watch_file_timeout(tval)$/;"	f
test_worker_counts	stdlib/Distributed/test/topology.jl	/^function test_worker_counts()$/;"	f
test_wr	test/core.jl	/^    @noinline test_wr(r, wr) = @test r[1] == wr[1].value$/;"	f
test_wr	test/core.jl	/^    function test_wr()$/;"	f
test_zeros	test/arrayops.jl	/^    function test_zeros(arr, T, s)$/;"	f
testall	Makefile	/^testall: check-whitespace $(JULIA_BUILD_MODE)$/;"	t
testall1	Makefile	/^testall1: check-whitespace $(JULIA_BUILD_MODE)$/;"	t
testclosure	test/ccall.jl	/^@noinline function testclosure(f, a::T, permanent::Bool=false, tt::Type{S}=Any) where {T, S}$/;"	f
testcmd_cmd	stdlib/REPL/test/replcompletions.jl	/^        macro testcmd_cmd(s) end$/;"	f
testcpt	test/channels.jl	/^    function testcpt(sz)$/;"	f
testdata	stdlib/LinearAlgebra/test/addmul.jl	/^testdata = []$/;"	v
tester20360	test/core.jl	/^    @noinline function tester20360()$/;"	f
testf	stdlib/Distributed/test/distributed_exec.jl	/^function testf(id)$/;"	f
testfull	test/subarray.jl	/^testfull = Bool(parse(Int,(get(ENV, "JULIA_TESTFULL", "0"))))$/;"	v
testintersect	test/subtype.jl	/^macro testintersect(a, b, result)$/;"	f
testlogger	test/deprecation_exec.jl	/^testlogger = Test.TestLogger()$/;"	v
testlogs	test/deprecation_exec.jl	/^testlogs = testlogger.logs$/;"	v
testmap_equivalence	test/generic_map_tests.jl	/^function testmap_equivalence(mapf, f, c...)$/;"	f
testmi	test/numbers.jl	/^    function testmi(numrange, denrange)$/;"	f
testruns	stdlib/Distributed/test/distributed_exec.jl	/^testruns = Any[]$/;"	v
tests	test/runtests.jl	/^tests = unique(tests)$/;"	v
testset	stdlib/Test/src/Test.jl	/^macro testset(args...)$/;"	f
testset_beginend	stdlib/Test/src/Test.jl	/^function testset_beginend(args, tests, source)$/;"	f
testset_depth17462	stdlib/Test/test/runtests.jl	/^testset_depth17462 = Test.get_testset_depth()$/;"	v
testset_depth17908	stdlib/Test/test/runtests.jl	/^testset_depth17908 = Test.get_testset_depth()$/;"	v
testset_forloop	stdlib/Test/src/Test.jl	/^function testset_forloop(args, testloop, source)$/;"	f
teststr_str	stdlib/REPL/test/replcompletions.jl	/^        macro teststr_str(s) end$/;"	f
testval	stdlib/Distributed/test/distributed_exec.jl	/^testval = remotecall_fetch(wid2, fstore) do x$/;"	v
tex	stdlib/Markdown/src/IPython/IPython.jl	/^function tex(stream::IO, md::MD)$/;"	f
text	test/read.jl	/^text = "C1,C2\\n1,2\\na,b\\n"$/;"	v
text_colors	base/util.jl	/^const text_colors = AnyDict($/;"	v
text_str	base/docs/utils.jl	/^macro text_str(s)$/;"	f
textwidth	base/strings/unicode.jl	/^function textwidth(c::AbstractChar)$/;"	f
textwidth	base/strings/unicode.jl	/^textwidth(s::AbstractString) = mapreduce(textwidth, +, s; init=0)$/;"	f
tf2	test/channels.jl	/^    tf2() = begin$/;"	f
tf3	test/channels.jl	/^    tf3(i) = begin$/;"	f
tfunc_cache	src/gf.c	/^const struct jl_typemap_info tfunc_cache = {$/;"	v	typeref:typename:const struct jl_typemap_info
tgsen!	stdlib/LinearAlgebra/src/lapack.jl	/^        function tgsen!(select::AbstractVector{BlasInt}, S::AbstractMatrix{$elty}, T::AbstractMa/;"	f
the_empty_vector	src/flisp/flisp.h	/^    value_t the_empty_vector;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
thefname	test/loading.jl	/^thefname = "the fname!\/\/\\\\&\\1*"$/;"	v
thing	stdlib/InteractiveUtils/test/runtests.jl	/^    function thing(a::AbstractArray, b::Int)$/;"	f
thing	stdlib/InteractiveUtils/test/runtests.jl	/^    function thing(a::Array, b::Real)$/;"	f
this	test/depot/packages/Baz/81oLe/src/Baz.jl	/^this = "Baz"$/;"	v
this	test/depot/packages/Foo/I05Qq/src/Foo.jl	/^this = "Foo1"$/;"	v
this	test/project/deps/Bar/src/Bar.jl	/^this = "Bar"$/;"	v
this	test/project/deps/Foo1/src/Foo.jl	/^this = "Foo1"$/;"	v
this	test/project/deps/Foo2.jl/src/Foo.jl	/^this = "Foo2"$/;"	v
this	test/project/deps/Qux.jl	/^this = "Qux"$/;"	v
thisind	base/strings/basic.jl	/^function thisind(s::AbstractString, i::Int)$/;"	f
thisind	base/strings/basic.jl	/^thisind(s::AbstractString, i::Integer) = thisind(s, Int(i))$/;"	f
thisind	base/strings/string.jl	/^Base.@propagate_inbounds thisind(s::String, i::Int) = _thisind_str(s, i)$/;"	f
thisind	base/strings/substring.jl	/^thisind(s::SubString{String}, i::Int) = _thisind_str(s, i)$/;"	f
thismajor	base/version.jl	/^thismajor(v::VersionNumber) = VersionNumber(v.major, 0, 0)$/;"	f
thisminor	base/version.jl	/^thisminor(v::VersionNumber) = VersionNumber(v.major, v.minor, 0)$/;"	f
thispatch	base/version.jl	/^thispatch(v::VersionNumber) = VersionNumber(v.major, v.minor, v.patch)$/;"	f
thrash	test/spawn.jl	/^    function thrash(handle::Ptr{Cvoid})$/;"	f
thread0_exit_count	src/signals-unix.c	/^static int thread0_exit_count = 0;$/;"	v	typeref:typename:int	file:
thread0_exit_state	src/signals-unix.c	/^static int thread0_exit_state = 0;$/;"	v	typeref:typename:int	file:
thread_init_done	src/threading.c	/^static uv_barrier_t thread_init_done;$/;"	v	typeref:typename:uv_barrier_t	file:
thread_n	src/gc.h	/^    uint16_t thread_n;        \/\/ thread id of the heap that owns this page$/;"	m	struct:__anoncf30557c1108	typeref:typename:uint16_t
thread_notifiers	base/threadcall.jl	/^const thread_notifiers = Union{Base.Condition, Nothing}[nothing for i in 1:max_ccall_threads]$/;"	v
threadcall	base/threadcall.jl	/^macro threadcall(f, rettype, argtypes, argvals...)$/;"	f
threadcall_args	src/ccalltest.c	/^JL_DLLEXPORT int threadcall_args(int a, int b) {$/;"	f	typeref:typename:JL_DLLEXPORT int
threadcall_restrictor	base/threadcall.jl	/^const threadcall_restrictor = Semaphore(max_ccall_threads)$/;"	v
threadcall_test_func	test/ccall.jl	/^threadcall_test_func(x) =$/;"	f
threaded_add_locked	test/threads_exec.jl	/^function threaded_add_locked(::Type{LockT}, x, n) where LockT$/;"	f
threaded_gc_locked	test/threads_exec.jl	/^function threaded_gc_locked(::Type{LockT}) where LockT$/;"	f
threaded_loop	test/threads_exec.jl	/^function threaded_loop(a, r, x)$/;"	f
threadid	base/threadingconstructs.jl	/^threadid() = Int(ccall(:jl_threadid, Int16, ())+1)$/;"	f
threadingOn	contrib/julia-config.jl	/^threadingOn() = ccall(:jl_threading_enabled, Cint, ()) != 0$/;"	f
threads	base/threadingconstructs.jl	/^macro threads(args...)$/;"	f
threadsafe	src/debuginfo.cpp	/^static uv_rwlock_t threadsafe;$/;"	v	typeref:typename:uv_rwlock_t	file:
threadsfor_fun	base/threadingconstructs.jl	/^        function threadsfor_fun(onethread=false)$/;"	f
thrice_iota	test/vecelement.jl	/^@generated function thrice_iota(::Type{Vec{N,T}}) where {N,T}$/;"	f
throw	stdlib/LinearAlgebra/src/bidiag.jl	/^        throw(DimensionMismatch("second entry of size(A)=$(size(A)) and first entry of size(B) =/;"	f
throw	stdlib/LinearAlgebra/src/bidiag.jl	/^        throw(DimensionMismatch("sizes size(A)=$(size(A)) and size(C) = $(size(C)) must match at/;"	f
throw	stdlib/LinearAlgebra/src/bidiag.jl	/^        throw(DimensionMismatch("sizes size(B)=$(size(B)) and size(C) = $(size(C)) must match at/;"	f
throw	stdlib/LinearAlgebra/src/blas.jl	/^                throw(DimensionMismatch("size of A is $n != length(x) = $(length(x))"))$/;"	f
throw	stdlib/SparseArrays/src/linalg.jl	/^        throw(DimensionMismatch("size(A, 2)=$(size(A, 2)) should be size(D, 1)=$k"))$/;"	f
throw	stdlib/SparseArrays/src/sparsematrix.jl	/^            throw(ArgumentError("nnz(A) going to exceed typemax(Ti) = $(typemax(Ti))"))$/;"	f
throw	stdlib/SuiteSparse/src/spqr.jl	/^        throw(DimensionMismatch("size(F) = $(size(F)) but size(B) = $(size(B))"))$/;"	f
throw	stdlib/SuiteSparse/src/spqr.jl	/^        throw(DimensionMismatch("size(Q) = $(size(Q)) but size(A) = $(size(A))"))$/;"	f
throw-unassigned-kw-args	src/julia-syntax.scm	/^(define (throw-unassigned-kw-args argl)$/;"	f
throw1	base/gmp.jl	/^    @noinline throw1(y) =$/;"	f
throw1	base/math.jl	/^    @noinline throw1(x) = throw(DomainError(x, "Cannot be NaN or Inf."))$/;"	f
throw1	base/reshapedarray.jl	/^    @noinline throw1(dims) = throw(DimensionMismatch(string("new dimensions $(dims) ",$/;"	f
throw2	base/math.jl	/^    @noinline throw2(x) = throw(DomainError(x, "Cannot be subnormal converted to 0."))$/;"	f
throw2	base/reshapedarray.jl	/^    @noinline throw2(A, dims) = throw(DimensionMismatch(string("array size $(length(A)) ",$/;"	f
throwTi	stdlib/SparseArrays/src/sparsematrix.jl	/^        @noinline throwTi(str, lbl, k) =$/;"	f
throw_boundserror	base/abstractarray.jl	/^throw_boundserror(A, I) = (@_noinline_meta; throw(BoundsError(A, I)))$/;"	f
throw_checksize_error	base/multidimensional.jl	/^@noinline throw_checksize_error(A, sz) = throw(DimensionMismatch("output array is the wrong size/;"	f
throw_complex_domainerror	base/math.jl	/^@noinline function throw_complex_domainerror(f::Symbol, x)$/;"	f
throw_dmrsa	base/reshapedarray.jl	/^    throw_dmrsa(dims, len) =$/;"	f
throw_domerr_powbysq	base/intfuncs.jl	/^@noinline throw_domerr_powbysq(::AbstractMatrix, p) = throw(DomainError(p,$/;"	f
throw_domerr_powbysq	base/intfuncs.jl	/^@noinline throw_domerr_powbysq(::Any, p) = throw(DomainError(p,$/;"	f
throw_domerr_powbysq	base/intfuncs.jl	/^@noinline throw_domerr_powbysq(::Integer, p) = throw(DomainError(p,$/;"	f
throw_eachindex_mismatch	base/abstractarray.jl	/^@noinline function throw_eachindex_mismatch(::IndexCartesian, A...)$/;"	f
throw_eachindex_mismatch	base/abstractarray.jl	/^@noinline function throw_eachindex_mismatch(::IndexLinear, A...)$/;"	f
throw_error	test/core.jl	/^@noinline throw_error() = error()$/;"	f
throw_exp_domainerror	base/math.jl	/^@noinline function throw_exp_domainerror(x)$/;"	f
throw_inexacterror	base/boot.jl	/^throw_inexacterror(f::Symbol, ::Type{T}, val) where {T} = (@_noinline_meta; throw(InexactError(f/;"	f
throw_internal	src/task.c	/^void JL_NORETURN throw_internal(jl_value_t *exception JL_MAYBE_UNROOTED)$/;"	f	typeref:typename:void JL_NORETURN
throw_internal	test/clangsa/MissingRoots.c	/^void JL_NORETURN throw_internal(jl_value_t *e JL_MAYBE_UNROOTED)$/;"	f	typeref:typename:void JL_NORETURN
throw_overflowerr_binaryop	base/checked.jl	/^throw_overflowerr_binaryop(op, x, y) = (@_noinline_meta;$/;"	f
throw_overflowerr_negation	base/checked.jl	/^throw_overflowerr_negation(x) = (@_noinline_meta;$/;"	f
throw_setindex_mismatch	base/indices.jl	/^function throw_setindex_mismatch(X, I)$/;"	f
throw_undef_if_not_sym	src/ast.c	/^jl_sym_t *throw_undef_if_not_sym; jl_sym_t *getfield_undefref_sym;$/;"	v	typeref:typename:jl_sym_t *
throw_uplo	stdlib/LinearAlgebra/src/LinearAlgebra.jl	/^@noinline throw_uplo() = throw(ArgumentError("uplo argument must be either :U (upper) or :L (low/;"	f
throwaxes1	base/reinterpretarray.jl	/^        function throwaxes1(::Type{S}, ::Type{T}, ax1)$/;"	f
throwbits	base/reinterpretarray.jl	/^        function throwbits(::Type{S}, ::Type{T}, ::Type{U}) where {S,T,U}$/;"	f
throwdm	base/broadcast.jl	/^@noinline throwdm(axdest, axsrc) =$/;"	f
throwing_frame	src/flisp/flisp.h	/^    uint32_t throwing_frame;  \/\/ active frame when exception was thrown$/;"	m	struct:_fl_context_t	typeref:typename:uint32_t
thrownonint	base/reinterpretarray.jl	/^        function thrownonint(::Type{S}, ::Type{T}, dim)$/;"	f
throwsize0	base/reinterpretarray.jl	/^        function throwsize0(::Type{S}, ::Type{T})$/;"	f
throwstart	base/range.jl	/^        throwstart(r) = (@_noinline_meta; throw(ArgumentError("first element must be 1, got $(fi/;"	f
throwstep	base/range.jl	/^        throwstep(r)  = (@_noinline_meta; throw(ArgumentError("step must be 1, got $(step(r))"))/;"	f
throwsz	stdlib/SparseArrays/src/sparsematrix.jl	/^        @noinline throwsz(str, lbl, k) =$/;"	f
throwto	base/task.jl	/^function throwto(t::Task, @nospecialize exc)$/;"	f
thunk_sym	src/ast.c	/^jl_sym_t *const_sym;   jl_sym_t *thunk_sym;$/;"	v	typeref:typename:jl_sym_t *
ti	src/julia_internal.h	/^    jl_value_t *ti; \/\/ intersection type$/;"	m	struct:typemap_intersection_env	typeref:typename:jl_value_t *
tid	src/jl_uv.c	/^    int       tid;$/;"	m	struct:work_baton	typeref:typename:int	file:
tid	src/julia.h	/^    int16_t tid;$/;"	m	struct:_jl_task_t	typeref:typename:int16_t
tid	src/julia_threads.h	/^    int16_t tid;$/;"	m	struct:_jl_tls_states_t	typeref:typename:int16_t
tid	src/threading.h	/^    int16_t tid;$/;"	m	struct:_jl_threadarg_t	typeref:typename:int16_t
tighttypes!	test/core.jl	/^function tighttypes!(adf)$/;"	f
tilebufsize	stdlib/LinearAlgebra/src/matmul.jl	/^const tilebufsize = 10800  # Approximately 32k\/3$/;"	v
time	base/libc.jl	/^time() = ccall(:jl_clock_now, Float64, ())$/;"	f
time	base/libc.jl	/^time(tm::TmStruct) = Float64(ccall(:mktime, Int, (Ref{TmStruct},), tm))$/;"	f
time	base/util.jl	/^macro time(ex)$/;"	f
time_ns	base/Base.jl	/^time_ns() = ccall(:jl_hrtime, UInt64, ())$/;"	f
time_print	base/util.jl	/^function time_print(elapsedtime, bytes=0, gctime=0, allocs=0)$/;"	f
time_tuple	stdlib/Dates/test/io.jl	/^        time_tuple(t::Dates.Time) = ($/;"	f
timed	base/util.jl	/^macro timed(ex)$/;"	f
timedwait	base/asyncevent.jl	/^function timedwait(testcb::Function, secs::Float64; pollint::Float64=0.1)$/;"	f
timedwait	stdlib/Dates/src/types.jl	/^timedwait(testcb::Function, time::Period) = timedwait(testcb, toms(time) \/ 1000)$/;"	f
timeit	base/compiler/utilities.jl	/^    macro timeit(args...)$/;"	f
timercb	base/asyncevent.jl	/^    function timercb(aw)$/;"	f
timerprof	src/signals-mach.c	/^mach_timespec_t timerprof;$/;"	v	typeref:typename:mach_timespec_t
timerprof	src/signals-unix.c	/^static timer_t timerprof;$/;"	v	typeref:typename:timer_t	file:
timerprof	src/signals-unix.c	/^struct itimerval timerprof;$/;"	v	typeref:struct:itimerval
times	src/disasm.cpp	/^        size_t times;$/;"	m	struct:DILineInfoPrinter::repeat	typeref:typename:size_t	file:
times10!	base/grisu/bignums.jl	/^times10!(x::Bignum) = multiplybyuint32!(x,UInt32(10))$/;"	f
timesofar	test/bitarray.jl	/^    function timesofar(str)$/;"	f
timev	base/util.jl	/^macro timev(ex)$/;"	f
timev_print	base/util.jl	/^function timev_print(elapsedtime, diff::GC_Diff)$/;"	f
timezone_t	src/support/strptime.c	/^typedef void* timezone_t;$/;"	t	typeref:typename:void *	file:
timing_stack	src/julia.h	/^    jl_timing_block_t *timing_stack;$/;"	m	struct:_jl_handler_t	typeref:typename:jl_timing_block_t *
timing_stack	src/julia.h	/^    jl_timing_block_t *timing_stack;$/;"	m	struct:_jl_task_t	typeref:typename:jl_timing_block_t *
tinline	test/staged.jl	/^tinline(a,b) = staged_t1(a,b)$/;"	f
tinyp	src/flisp/print.c	/^static inline int tinyp(fl_context_t *fl_ctx, value_t v)$/;"	f	typeref:typename:int	file:
titlecase	base/strings/unicode.jl	/^function titlecase(s::AbstractString; wordsep::Function = !iscased, strict::Bool=true)$/;"	f
titlecase	base/strings/unicode.jl	/^titlecase(c::T) where {T<:AbstractChar} = isascii(c) ? ('a' <= c <= 'z' ? c - 0x20 : c) :$/;"	f
tlayout	test/reflection.jl	/^tlayout = TLayout(5,7,11)$/;"	v
tls	src/julia.h	/^    jl_value_t *tls;$/;"	m	struct:_jl_task_t	typeref:typename:jl_value_t *
tls_world_age	test/worlds.jl	/^tls_world_age() = ccall(:jl_get_tls_world_age, UInt, ())$/;"	f
tmerge	base/compiler/typelimits.jl	/^function tmerge(@nospecialize(typea), @nospecialize(typeb))$/;"	f
tmerge_maybe_vararg	base/compiler/typeutils.jl	/^    tmerge_maybe_vararg(@nospecialize(a), @nospecialize(b)) = tmerge(a, tvar_extent(unwrapva(b))/;"	f
tmerge_test	test/compiler/inference.jl	/^function tmerge_test(a, b, r, commutative=true)$/;"	f
to	base/asyncmap.jl	/^function to achieve this.$/;"	f
to-kws	src/julia-parser.scm	/^(define (to-kws lst)$/;"	f
toInt128	base/boot.jl	/^toInt128(x::Bool)     = and_int(zext_int(Int128, x), Int128(1))$/;"	f
toInt128	base/boot.jl	/^toInt128(x::Int128)   = x$/;"	f
toInt128	base/boot.jl	/^toInt128(x::Int16)    = sext_int(Int128, x)$/;"	f
toInt128	base/boot.jl	/^toInt128(x::Int32)    = sext_int(Int128, x)$/;"	f
toInt128	base/boot.jl	/^toInt128(x::Int64)    = sext_int(Int128, x)$/;"	f
toInt128	base/boot.jl	/^toInt128(x::Int8)     = sext_int(Int128, x)$/;"	f
toInt128	base/boot.jl	/^toInt128(x::UInt128)  = bitcast(Int128, check_top_bit(x))$/;"	f
toInt128	base/boot.jl	/^toInt128(x::UInt16)   = zext_int(Int128, x)$/;"	f
toInt128	base/boot.jl	/^toInt128(x::UInt32)   = zext_int(Int128, x)$/;"	f
toInt128	base/boot.jl	/^toInt128(x::UInt64)   = zext_int(Int128, x)$/;"	f
toInt128	base/boot.jl	/^toInt128(x::UInt8)    = zext_int(Int128, x)$/;"	f
toInt16	base/boot.jl	/^toInt16(x::Bool)      = and_int(zext_int(Int16, x), Int16(1))$/;"	f
toInt16	base/boot.jl	/^toInt16(x::Int128)    = checked_trunc_sint(Int16, x)$/;"	f
toInt16	base/boot.jl	/^toInt16(x::Int16)     = x$/;"	f
toInt16	base/boot.jl	/^toInt16(x::Int32)     = checked_trunc_sint(Int16, x)$/;"	f
toInt16	base/boot.jl	/^toInt16(x::Int64)     = checked_trunc_sint(Int16, x)$/;"	f
toInt16	base/boot.jl	/^toInt16(x::Int8)      = sext_int(Int16, x)$/;"	f
toInt16	base/boot.jl	/^toInt16(x::UInt128)   = checked_trunc_sint(Int16, check_top_bit(x))$/;"	f
toInt16	base/boot.jl	/^toInt16(x::UInt16)    = bitcast(Int16, check_top_bit(x))$/;"	f
toInt16	base/boot.jl	/^toInt16(x::UInt32)    = checked_trunc_sint(Int16, check_top_bit(x))$/;"	f
toInt16	base/boot.jl	/^toInt16(x::UInt64)    = checked_trunc_sint(Int16, check_top_bit(x))$/;"	f
toInt16	base/boot.jl	/^toInt16(x::UInt8)     = zext_int(Int16, x)$/;"	f
toInt32	base/boot.jl	/^toInt32(x::Bool)      = and_int(zext_int(Int32, x), Int32(1))$/;"	f
toInt32	base/boot.jl	/^toInt32(x::Int128)    = checked_trunc_sint(Int32, x)$/;"	f
toInt32	base/boot.jl	/^toInt32(x::Int16)     = sext_int(Int32, x)$/;"	f
toInt32	base/boot.jl	/^toInt32(x::Int32)     = x$/;"	f
toInt32	base/boot.jl	/^toInt32(x::Int64)     = checked_trunc_sint(Int32, x)$/;"	f
toInt32	base/boot.jl	/^toInt32(x::Int8)      = sext_int(Int32, x)$/;"	f
toInt32	base/boot.jl	/^toInt32(x::UInt128)   = checked_trunc_sint(Int32, check_top_bit(x))$/;"	f
toInt32	base/boot.jl	/^toInt32(x::UInt16)    = zext_int(Int32, x)$/;"	f
toInt32	base/boot.jl	/^toInt32(x::UInt32)    = bitcast(Int32, check_top_bit(x))$/;"	f
toInt32	base/boot.jl	/^toInt32(x::UInt64)    = checked_trunc_sint(Int32, check_top_bit(x))$/;"	f
toInt32	base/boot.jl	/^toInt32(x::UInt8)     = zext_int(Int32, x)$/;"	f
toInt64	base/boot.jl	/^toInt64(x::Bool)      = and_int(zext_int(Int64, x), Int64(1))$/;"	f
toInt64	base/boot.jl	/^toInt64(x::Int128)    = checked_trunc_sint(Int64, x)$/;"	f
toInt64	base/boot.jl	/^toInt64(x::Int16)     = sext_int(Int64, x)$/;"	f
toInt64	base/boot.jl	/^toInt64(x::Int32)     = sext_int(Int64, x)$/;"	f
toInt64	base/boot.jl	/^toInt64(x::Int64)     = x$/;"	f
toInt64	base/boot.jl	/^toInt64(x::Int8)      = sext_int(Int64, x)$/;"	f
toInt64	base/boot.jl	/^toInt64(x::UInt128)   = checked_trunc_sint(Int64, check_top_bit(x))$/;"	f
toInt64	base/boot.jl	/^toInt64(x::UInt16)    = zext_int(Int64, x)$/;"	f
toInt64	base/boot.jl	/^toInt64(x::UInt32)    = zext_int(Int64, x)$/;"	f
toInt64	base/boot.jl	/^toInt64(x::UInt64)    = bitcast(Int64, check_top_bit(x))$/;"	f
toInt64	base/boot.jl	/^toInt64(x::UInt8)     = zext_int(Int64, x)$/;"	f
toInt8	base/boot.jl	/^toInt8(x::Bool)       = and_int(bitcast(Int8, x), Int8(1))$/;"	f
toInt8	base/boot.jl	/^toInt8(x::Int128)     = checked_trunc_sint(Int8, x)$/;"	f
toInt8	base/boot.jl	/^toInt8(x::Int16)      = checked_trunc_sint(Int8, x)$/;"	f
toInt8	base/boot.jl	/^toInt8(x::Int32)      = checked_trunc_sint(Int8, x)$/;"	f
toInt8	base/boot.jl	/^toInt8(x::Int64)      = checked_trunc_sint(Int8, x)$/;"	f
toInt8	base/boot.jl	/^toInt8(x::Int8)       = x$/;"	f
toInt8	base/boot.jl	/^toInt8(x::UInt128)    = checked_trunc_sint(Int8, check_top_bit(x))$/;"	f
toInt8	base/boot.jl	/^toInt8(x::UInt16)     = checked_trunc_sint(Int8, check_top_bit(x))$/;"	f
toInt8	base/boot.jl	/^toInt8(x::UInt32)     = checked_trunc_sint(Int8, check_top_bit(x))$/;"	f
toInt8	base/boot.jl	/^toInt8(x::UInt64)     = checked_trunc_sint(Int8, check_top_bit(x))$/;"	f
toInt8	base/boot.jl	/^toInt8(x::UInt8)      = bitcast(Int8, check_top_bit(x))$/;"	f
toUInt128	base/boot.jl	/^toUInt128(x::Bool)    = and_int(zext_int(UInt128, x), UInt128(1))$/;"	f
toUInt128	base/boot.jl	/^toUInt128(x::Int128)  = bitcast(UInt128, check_top_bit(x))$/;"	f
toUInt128	base/boot.jl	/^toUInt128(x::Int16)   = sext_int(UInt128, check_top_bit(x))$/;"	f
toUInt128	base/boot.jl	/^toUInt128(x::Int32)   = sext_int(UInt128, check_top_bit(x))$/;"	f
toUInt128	base/boot.jl	/^toUInt128(x::Int64)   = sext_int(UInt128, check_top_bit(x))$/;"	f
toUInt128	base/boot.jl	/^toUInt128(x::Int8)    = sext_int(UInt128, check_top_bit(x))$/;"	f
toUInt128	base/boot.jl	/^toUInt128(x::UInt128) = x$/;"	f
toUInt128	base/boot.jl	/^toUInt128(x::UInt16)  = zext_int(UInt128, x)$/;"	f
toUInt128	base/boot.jl	/^toUInt128(x::UInt32)  = zext_int(UInt128, x)$/;"	f
toUInt128	base/boot.jl	/^toUInt128(x::UInt64)  = zext_int(UInt128, x)$/;"	f
toUInt128	base/boot.jl	/^toUInt128(x::UInt8)   = zext_int(UInt128, x)$/;"	f
toUInt16	base/boot.jl	/^toUInt16(x::Bool)     = and_int(zext_int(UInt16, x), UInt16(1))$/;"	f
toUInt16	base/boot.jl	/^toUInt16(x::Int128)   = checked_trunc_uint(UInt16, x)$/;"	f
toUInt16	base/boot.jl	/^toUInt16(x::Int16)    = bitcast(UInt16, check_top_bit(x))$/;"	f
toUInt16	base/boot.jl	/^toUInt16(x::Int32)    = checked_trunc_uint(UInt16, x)$/;"	f
toUInt16	base/boot.jl	/^toUInt16(x::Int64)    = checked_trunc_uint(UInt16, x)$/;"	f
toUInt16	base/boot.jl	/^toUInt16(x::Int8)     = sext_int(UInt16, check_top_bit(x))$/;"	f
toUInt16	base/boot.jl	/^toUInt16(x::UInt128)  = checked_trunc_uint(UInt16, x)$/;"	f
toUInt16	base/boot.jl	/^toUInt16(x::UInt16)   = x$/;"	f
toUInt16	base/boot.jl	/^toUInt16(x::UInt32)   = checked_trunc_uint(UInt16, x)$/;"	f
toUInt16	base/boot.jl	/^toUInt16(x::UInt64)   = checked_trunc_uint(UInt16, x)$/;"	f
toUInt16	base/boot.jl	/^toUInt16(x::UInt8)    = zext_int(UInt16, x)$/;"	f
toUInt32	base/boot.jl	/^toUInt32(x::Bool)     = and_int(zext_int(UInt32, x), UInt32(1))$/;"	f
toUInt32	base/boot.jl	/^toUInt32(x::Int128)   = checked_trunc_uint(UInt32, x)$/;"	f
toUInt32	base/boot.jl	/^toUInt32(x::Int16)    = sext_int(UInt32, check_top_bit(x))$/;"	f
toUInt32	base/boot.jl	/^toUInt32(x::Int32)    = bitcast(UInt32, check_top_bit(x))$/;"	f
toUInt32	base/boot.jl	/^toUInt32(x::Int64)    = checked_trunc_uint(UInt32, x)$/;"	f
toUInt32	base/boot.jl	/^toUInt32(x::Int8)     = sext_int(UInt32, check_top_bit(x))$/;"	f
toUInt32	base/boot.jl	/^toUInt32(x::UInt128)  = checked_trunc_uint(UInt32, x)$/;"	f
toUInt32	base/boot.jl	/^toUInt32(x::UInt16)   = zext_int(UInt32, x)$/;"	f
toUInt32	base/boot.jl	/^toUInt32(x::UInt32)   = x$/;"	f
toUInt32	base/boot.jl	/^toUInt32(x::UInt64)   = checked_trunc_uint(UInt32, x)$/;"	f
toUInt32	base/boot.jl	/^toUInt32(x::UInt8)    = zext_int(UInt32, x)$/;"	f
toUInt64	base/boot.jl	/^toUInt64(x::Bool)     = and_int(zext_int(UInt64, x), UInt64(1))$/;"	f
toUInt64	base/boot.jl	/^toUInt64(x::Int128)   = checked_trunc_uint(UInt64, x)$/;"	f
toUInt64	base/boot.jl	/^toUInt64(x::Int16)    = sext_int(UInt64, check_top_bit(x))$/;"	f
toUInt64	base/boot.jl	/^toUInt64(x::Int32)    = sext_int(UInt64, check_top_bit(x))$/;"	f
toUInt64	base/boot.jl	/^toUInt64(x::Int64)    = bitcast(UInt64, check_top_bit(x))$/;"	f
toUInt64	base/boot.jl	/^toUInt64(x::Int8)     = sext_int(UInt64, check_top_bit(x))$/;"	f
toUInt64	base/boot.jl	/^toUInt64(x::UInt128)  = checked_trunc_uint(UInt64, x)$/;"	f
toUInt64	base/boot.jl	/^toUInt64(x::UInt16)   = zext_int(UInt64, x)$/;"	f
toUInt64	base/boot.jl	/^toUInt64(x::UInt32)   = zext_int(UInt64, x)$/;"	f
toUInt64	base/boot.jl	/^toUInt64(x::UInt64)   = x$/;"	f
toUInt64	base/boot.jl	/^toUInt64(x::UInt8)    = zext_int(UInt64, x)$/;"	f
toUInt8	base/boot.jl	/^toUInt8(x::Bool)      = and_int(bitcast(UInt8, x), UInt8(1))$/;"	f
toUInt8	base/boot.jl	/^toUInt8(x::Int128)    = checked_trunc_uint(UInt8, x)$/;"	f
toUInt8	base/boot.jl	/^toUInt8(x::Int16)     = checked_trunc_uint(UInt8, x)$/;"	f
toUInt8	base/boot.jl	/^toUInt8(x::Int32)     = checked_trunc_uint(UInt8, x)$/;"	f
toUInt8	base/boot.jl	/^toUInt8(x::Int64)     = checked_trunc_uint(UInt8, x)$/;"	f
toUInt8	base/boot.jl	/^toUInt8(x::Int8)      = bitcast(UInt8, check_top_bit(x))$/;"	f
toUInt8	base/boot.jl	/^toUInt8(x::UInt128)   = checked_trunc_uint(UInt8, x)$/;"	f
toUInt8	base/boot.jl	/^toUInt8(x::UInt16)    = checked_trunc_uint(UInt8, x)$/;"	f
toUInt8	base/boot.jl	/^toUInt8(x::UInt32)    = checked_trunc_uint(UInt8, x)$/;"	f
toUInt8	base/boot.jl	/^toUInt8(x::UInt64)    = checked_trunc_uint(UInt8, x)$/;"	f
toUInt8	base/boot.jl	/^toUInt8(x::UInt8)     = x$/;"	f
to_dim	base/array.jl	/^to_dim(d::Integer) = d$/;"	f
to_dim	base/array.jl	/^to_dim(d::OneTo) = last(d)$/;"	f
to_fenv	base/rounding.jl	/^to_fenv(::RoundingMode{:Down}) = JL_FE_DOWNWARD$/;"	f
to_fenv	base/rounding.jl	/^to_fenv(::RoundingMode{:Nearest}) = JL_FE_TONEAREST$/;"	f
to_fenv	base/rounding.jl	/^to_fenv(::RoundingMode{:ToZero}) = JL_FE_TOWARDZERO$/;"	f
to_fenv	base/rounding.jl	/^to_fenv(::RoundingMode{:Up}) = JL_FE_UPWARD$/;"	f
to_finalize	src/gc.c	/^arraylist_t to_finalize;$/;"	v	typeref:typename:arraylist_t
to_index	base/indices.jl	/^to_index(::Colon) = throw(ArgumentError("colons must be converted by to_indices(...)"))$/;"	f
to_index	base/indices.jl	/^to_index(A, i) = to_index(i)$/;"	f
to_index	base/indices.jl	/^to_index(A::Array, i::UInt) = reinterpret(Int, i)$/;"	f
to_index	base/indices.jl	/^to_index(I::AbstractArray) = I$/;"	f
to_index	base/indices.jl	/^to_index(I::AbstractArray{<:Union{AbstractArray, Colon}}) =$/;"	f
to_index	base/indices.jl	/^to_index(I::AbstractArray{Bool}) = LogicalIndex(I)$/;"	f
to_index	base/indices.jl	/^to_index(I::AbstractArray{Union{}}) = I$/;"	f
to_index	base/indices.jl	/^to_index(i) = throw(ArgumentError("invalid index: $(limitrepr(i)) of type $(typeof(i))"))$/;"	f
to_index	base/indices.jl	/^to_index(i::Bool) = throw(ArgumentError("invalid index: $i of type Bool"))$/;"	f
to_index	base/indices.jl	/^to_index(i::Integer) = convert(Int,i)::Int$/;"	f
to_indices	base/indices.jl	/^to_indices(A, I::Tuple) = (@_inline_meta; to_indices(A, axes(A), I))$/;"	f
to_indices	base/indices.jl	/^to_indices(A, I::Tuple{Any}) = (@_inline_meta; to_indices(A, (eachindex(IndexLinear(), A),), I))$/;"	f
to_indices	base/indices.jl	/^to_indices(A, inds, ::Tuple{}) = ()$/;"	f
to_indices	base/indices.jl	/^to_indices(A, inds, I::Tuple{Any, Vararg{Any}}) =$/;"	f
to_indices	base/multidimensional.jl	/^@inline function to_indices(A, inds, I::Tuple{AbstractArray{Bool, N}, Vararg{Any}}) where N$/;"	f
to_indices	base/multidimensional.jl	/^@inline function to_indices(A, inds, I::Tuple{AbstractArray{CartesianIndex{N}}, Vararg{Any}}) wh/;"	f
to_indices	base/multidimensional.jl	/^@inline to_indices(A, I::Tuple{Vararg{Union{Integer, CartesianIndex}}}) = to_indices(A, (), I)$/;"	f
to_indices	base/multidimensional.jl	/^@inline to_indices(A, inds, I::Tuple{CartesianIndex, Vararg{Any}}) =$/;"	f
to_indices	base/multidimensional.jl	/^@inline to_indices(A, inds, I::Tuple{Colon, Vararg{Any}}) =$/;"	f
to_indices	base/multidimensional.jl	/^@inline to_indices(A, inds, I::Tuple{Union{Array{Bool,N}, BitArray{N}}}) where {N} =$/;"	f
to_indices	base/multidimensional.jl	/^to_indices(A, I::Tuple{}) = ()$/;"	f
to_md_tree	src/cgutils.cpp	/^Metadata *to_md_tree(jl_value_t *val) {$/;"	f	typeref:typename:Metadata *
to_power_type	base/intfuncs.jl	/^to_power_type(x) = convert(Base._return_type(*, Tuple{typeof(x), typeof(x)}), x)$/;"	f
to_shape	base/abstractarray.jl	/^to_shape(::Tuple{}) = ()$/;"	f
to_shape	base/abstractarray.jl	/^to_shape(dims::Dims) = dims$/;"	f
to_shape	base/abstractarray.jl	/^to_shape(dims::DimsOrInds) = map(to_shape, dims)::DimsOrInds$/;"	f
to_shape	base/abstractarray.jl	/^to_shape(i::Int) = i$/;"	f
to_shape	base/abstractarray.jl	/^to_shape(i::Integer) = Int(i)$/;"	f
to_shape	base/abstractarray.jl	/^to_shape(r::AbstractUnitRange) = r$/;"	f
to_shape	base/abstractarray.jl	/^to_shape(r::OneTo) = Int(last(r))$/;"	f
to_sized_ptr	src/flisp/cvalues.c	/^void to_sized_ptr(fl_context_t *fl_ctx, value_t v, const char *fname, char **pdata, size_t *psz)$/;"	f	typeref:typename:void
to_tuple_type	base/reflection.jl	/^function to_tuple_type(@nospecialize(t))$/;"	f
tochain	src/flisp/flisp.h	/^    void *tochain;$/;"	m	struct:_fl_context_t	typeref:typename:void *
today	stdlib/Dates/src/conversions.jl	/^today() = Date(now())$/;"	f
todouble	test/ryu.jl	/^todouble(sign, exp, mant) = Core.bitcast(Float64, (UInt64(sign) << 63) | (UInt64(exp) << 52) | (/;"	f
toexpr	stdlib/Markdown/src/Julia/interp.jl	/^    @eval function toexpr(md::$T)$/;"	f
toexpr	stdlib/Markdown/src/Julia/interp.jl	/^toexpr(x) = x$/;"	f
toexpr	stdlib/Markdown/src/Julia/interp.jl	/^toexpr(xs::Vector{Any}) = Expr(:call, GlobalRef(Base,:getindex), Any, map(toexpr, xs)...)$/;"	f
tofirst	stdlib/Dates/src/adjusters.jl	/^function tofirst(dt::TimeType, dow::Int; of::Union{Type{Year}, Type{Month}}=Month)$/;"	f
toggle	stdlib/LibGit2/src/utils.jl	/^toggle(val::Integer, flag::Integer) = (val |= flag)$/;"	f
tohtml	stdlib/Markdown/src/render/rich.jl	/^function tohtml(io::IO, m::MIME"image\/png", img)$/;"	f
tohtml	stdlib/Markdown/src/render/rich.jl	/^function tohtml(io::IO, m::MIME"image\/svg+xml", img)$/;"	f
tohtml	stdlib/Markdown/src/render/rich.jl	/^function tohtml(io::IO, m::MIME"text\/html", x)$/;"	f
tohtml	stdlib/Markdown/src/render/rich.jl	/^function tohtml(io::IO, m::MIME"text\/plain", x)$/;"	f
tohtml	stdlib/Markdown/src/render/rich.jl	/^tohtml(io::IO, x) = tohtml(io, bestmime(x), x)$/;"	f
toiostream	src/flisp/iostream.c	/^static ios_t *toiostream(fl_context_t *fl_ctx, value_t v, const char *fname)$/;"	f	typeref:typename:ios_t *	file:
tolast	stdlib/Dates/src/adjusters.jl	/^function tolast(dt::TimeType, dow::Int; of::Union{Type{Year}, Type{Month}}=Month)$/;"	f
toms	stdlib/Dates/src/periods.jl	/^toms(c::CompoundPeriod) = isempty(c.periods) ? 0.0 : Float64(sum(toms, c.periods))$/;"	f
toms	stdlib/Dates/src/periods.jl	/^toms(c::Day)         = 86400000 * value(c)$/;"	f
toms	stdlib/Dates/src/periods.jl	/^toms(c::Hour)        = 3600000 * value(c)$/;"	f
toms	stdlib/Dates/src/periods.jl	/^toms(c::Microsecond) = div(value(c), 1000)$/;"	f
toms	stdlib/Dates/src/periods.jl	/^toms(c::Millisecond) = value(c)$/;"	f
toms	stdlib/Dates/src/periods.jl	/^toms(c::Minute)      = 60000 * value(c)$/;"	f
toms	stdlib/Dates/src/periods.jl	/^toms(c::Month)       = 86400000.0 * 30.436875 * value(c)$/;"	f
toms	stdlib/Dates/src/periods.jl	/^toms(c::Nanosecond)  = div(value(c), 1000000)$/;"	f
toms	stdlib/Dates/src/periods.jl	/^toms(c::Second)      = 1000 * value(c)$/;"	f
toms	stdlib/Dates/src/periods.jl	/^toms(c::Week)        = 604800000 * value(c)$/;"	f
toms	stdlib/Dates/src/periods.jl	/^toms(c::Year)        = 86400000.0 * 365.2425 * value(c)$/;"	f
tonext	stdlib/Dates/src/adjusters.jl	/^function tonext(func::Function, dt::TimeType; step::Period=Day(1), limit::Int=10000, same::Bool=/;"	f
tonext	stdlib/Dates/src/adjusters.jl	/^tonext(dt::TimeType, dow::Int; same::Bool=false) = adjust(ISDAYOFWEEK[dow], same ? dt : dt + Day/;"	f
tons	stdlib/Dates/src/periods.jl	/^tons(c::CompoundPeriod) = isempty(c.periods) ? 0.0 : Float64(sum(tons, c.periods))$/;"	f
tons	stdlib/Dates/src/periods.jl	/^tons(x)              = toms(x) * 1000000$/;"	f
tons	stdlib/Dates/src/periods.jl	/^tons(x::Microsecond) = value(x) * 1000$/;"	f
tons	stdlib/Dates/src/periods.jl	/^tons(x::Nanosecond)  = value(x)$/;"	f
top	src/julia_internal.h	/^    size_t top;$/;"	m	struct:_jl_excstack_t	typeref:typename:size_t
top	test/gcext/LocalTest.jl	/^function top(stack :: Stack)$/;"	f
top_build_prefix	deps/srccache/patchelf-0.9/Makefile.in	/^top_build_prefix = @top_build_prefix@$/;"	m
top_build_prefix	deps/srccache/patchelf-0.9/src/Makefile.in	/^top_build_prefix = @top_build_prefix@$/;"	m
top_build_prefix	deps/srccache/patchelf-0.9/tests/Makefile.in	/^top_build_prefix = @top_build_prefix@$/;"	m
top_builddir	deps/srccache/patchelf-0.9/Makefile.in	/^top_builddir = @top_builddir@$/;"	m
top_builddir	deps/srccache/patchelf-0.9/src/Makefile.in	/^top_builddir = @top_builddir@$/;"	m
top_builddir	deps/srccache/patchelf-0.9/tests/Makefile.in	/^top_builddir = @top_builddir@$/;"	m
top_distdir	deps/srccache/patchelf-0.9/Makefile.in	/^top_distdir = $(distdir)$/;"	m
top_frame	src/flisp/flisp.c	/^    uint32_t top_frame = fl_ctx->curr_frame;$/;"	v	typeref:typename:uint32_t
top_function	base/compiler/ssair/show.jl	/^top_function() = h()$/;"	f
top_level_scope_sym	base/stacktraces.jl	/^const top_level_scope_sym = Symbol("top-level scope")$/;"	v
top_srcdir	deps/srccache/patchelf-0.9/Makefile.in	/^top_srcdir = @top_srcdir@$/;"	m
top_srcdir	deps/srccache/patchelf-0.9/src/Makefile.in	/^top_srcdir = @top_srcdir@$/;"	m
top_srcdir	deps/srccache/patchelf-0.9/tests/Makefile.in	/^top_srcdir = @top_srcdir@$/;"	m
top_sym	src/ast.c	/^jl_sym_t *empty_sym;   jl_sym_t *top_sym;$/;"	v	typeref:typename:jl_sym_t *
toplevel-only-expr?	src/jlfrontend.scm	/^(define (toplevel-only-expr? e)$/;"	f
toplevel-preserving?	src/julia-syntax.scm	/^(define (toplevel-preserving? e)$/;"	f
toplevel_load	base/loading.jl	/^const toplevel_load = Ref(true)$/;"	v
toplevel_sym	src/ast.c	/^jl_sym_t *toplevel_sym; jl_sym_t *quote_sym;$/;"	v	typeref:typename:jl_sym_t *
toplevelinstall	contrib/mac/framework/Makefile	/^toplevelinstall:$/;"	t
topology	stdlib/Distributed/src/cluster.jl	/^function topology(t)$/;"	f
toprev	stdlib/Dates/src/adjusters.jl	/^function toprev(func::Function, dt::TimeType; step::Period=Day(-1), limit::Int=10000, same::Bool/;"	f
toprev	stdlib/Dates/src/adjusters.jl	/^toprev(dt::TimeType, dow::Int; same::Bool=false) = adjust(ISDAYOFWEEK[dow], same ? dt : dt + Day/;"	f
tosize	src/flisp/cvalues.c	/^size_t tosize(fl_context_t *fl_ctx, value_t n, const char *fname)$/;"	f	typeref:typename:size_t
tospace	src/flisp/flisp.h	/^    unsigned char *tospace;$/;"	m	struct:_fl_context_t	typeref:typename:unsigned char *
tostr	src/julia-parser.scm	/^(define (tostr raw io)$/;"	f
tostr_sizehint	base/strings/io.jl	/^tostr_sizehint(x) = 8$/;"	f
tostr_sizehint	base/strings/io.jl	/^tostr_sizehint(x::AbstractString) = lastindex(x)$/;"	f
tostr_sizehint	base/strings/io.jl	/^tostr_sizehint(x::Float32) = 12$/;"	f
tostr_sizehint	base/strings/io.jl	/^tostr_sizehint(x::Float64) = 20$/;"	f
tostr_sizehint	base/strings/io.jl	/^tostr_sizehint(x::Union{String,SubString{String}}) = sizeof(x)$/;"	f
tot_time	base/sysimg.jl	/^tot_time = tot_time_base + Base.tot_time_stdlib[] + tot_time_userimg$/;"	v
tot_time_base	base/sysimg.jl	/^tot_time_base = (Base.end_base_include - Base.start_base_include) * 10.0^(-9)$/;"	v
tot_time_stdlib	base/Base.jl	/^const tot_time_stdlib = RefValue(0.0)$/;"	v
tot_time_userimg	base/sysimg.jl	/^tot_time_userimg = @elapsed (Base.isfile("userimg.jl") && Base.include(Main, "userimg.jl"))$/;"	v
totable	src/flisp/table.c	/^static htable_t *totable(fl_context_t *fl_ctx, value_t v, char *fname)$/;"	f	typeref:typename:htable_t *	file:
total	src/cgmemmgr.cpp	/^    size_t total{0};$/;"	m	struct:__anon06c686bc0111::Block	typeref:typename:size_t	file:
total	src/timing.h	/^    uint64_t total;$/;"	m	struct:_jl_timing_block_t	typeref:typename:uint64_t
total_allocd	src/gc.h	/^    uint64_t    total_allocd;$/;"	m	struct:__anoncf30557c0308	typeref:typename:uint64_t
total_fin_time	src/gc-debug.c	/^static uint64_t total_fin_time = 0;$/;"	v	typeref:typename:uint64_t	file:
total_freed_bytes	src/gc-debug.c	/^static size_t total_freed_bytes = 0;$/;"	v	typeref:typename:size_t	file:
total_mark_time	src/gc-debug.c	/^static uint64_t total_mark_time = 0;$/;"	v	typeref:typename:uint64_t	file:
total_memory	base/sysinfo.jl	/^total_memory() = ccall(:uv_get_total_memory, UInt64, ())$/;"	f
total_pages	src/gc-debug.c	/^static int64_t total_pages = 0;$/;"	v	typeref:typename:int64_t	file:
total_size	src/threading.c	/^    size_t total_size;$/;"	m	struct:__anon46b360a30108	typeref:typename:size_t	file:
total_sweep_time	src/gc-debug.c	/^static uint64_t total_sweep_time = 0;$/;"	v	typeref:typename:uint64_t	file:
total_time	src/gc.h	/^    uint64_t    total_time;$/;"	m	struct:__anoncf30557c0308	typeref:typename:uint64_t
totaldays	stdlib/Dates/src/types.jl	/^function totaldays(y, m, d)$/;"	f
totally_not_five26034	test/arrayops.jl	/^struct totally_not_five26034 end$/;"	f
touch	base/file.jl	/^function touch(path::AbstractString)$/;"	f
tpara	test/subtype.jl	/^tpara(::Type{AbstractMyType12580{I}}) where {I} = I$/;"	f
tpara	test/subtype.jl	/^tpara(::Type{A}) where {A<:AbstractMyType12580} = tpara(supertype(A))$/;"	f
tpara18457	test/compiler/inference.jl	/^tpara18457(::Type{AbstractMyType18457{I}}) where {I} = I$/;"	f
tpara18457	test/compiler/inference.jl	/^tpara18457(::Type{A}) where {A<:AbstractMyType18457} = tpara18457(supertype(A))$/;"	f
tparam0	test/clangsa/MissingRoots.c	/^void tparam0(jl_value_t *atype) {$/;"	f	typeref:typename:void
tparam0_global	test/clangsa/MissingRoots.c	/^void tparam0_global() {$/;"	f	typeref:typename:void
tr	stdlib/LinearAlgebra/src/dense.jl	/^function tr(A::Matrix{T}) where T$/;"	f
tr	stdlib/LinearAlgebra/src/diagonal.jl	/^tr(D::Diagonal) = sum(tr, D.diag)$/;"	f
tr	stdlib/LinearAlgebra/src/generic.jl	/^function tr(A::AbstractMatrix)$/;"	f
tr	stdlib/LinearAlgebra/src/generic.jl	/^tr(x::Number) = x$/;"	f
tr	stdlib/LinearAlgebra/src/symmetric.jl	/^tr(A::Hermitian) = real(tr(A.data))$/;"	f
tr	stdlib/SparseArrays/src/sparsematrix.jl	/^function tr(A::AbstractSparseMatrixCSC{Tv}) where Tv$/;"	f
trace	test/stacktraces.jl	/^trace = (try; f(3); catch; stacktrace(catch_backtrace()); end)[1:3]$/;"	v
trace	test/stacktraces.jl	/^trace = StackTracesTestMod.filtered_stacktrace()$/;"	v
trace	test/stacktraces.jl	/^trace = StackTracesTestMod.unfiltered_stacktrace()$/;"	v
trace_compile	src/julia.h	/^    const char *trace_compile;$/;"	m	struct:__anon055fe4271808	typeref:typename:const char *
trace_en	src/gf.c	/^static int trace_en = 0;$/;"	v	typeref:typename:int	file:
trace_globals	src/flisp/flisp.c	/^static void trace_globals(fl_context_t *fl_ctx, symbol_t *root)$/;"	f	typeref:typename:void	file:
trace_method	src/dump.c	/^static int trace_method(jl_typemap_entry_t *entry, void *closure)$/;"	f	typeref:typename:int	file:
tracefoo	test/reflection.jl	/^function tracefoo end$/;"	f
tracefoo	test/reflection.jl	/^tracefoo(x::Int64, y::Int64) = x*y$/;"	f
tracefoo2	test/reflection.jl	/^tracefoo2(x, y) = x*y$/;"	f
tracer_cb	src/julia_internal.h	/^typedef void (*tracer_cb)(jl_value_t *tracee);$/;"	t	typeref:typename:void (*)(jl_value_t * tracee)
track_allocations	src/julia.h	/^    int track_allocations;  \/\/ can we track allocations?$/;"	m	struct:__anon055fe4271b08	typeref:typename:int
trailingBytesForUTF8	src/support/utf8.c	/^static const char trailingBytesForUTF8[256] = {$/;"	v	typeref:typename:const char[256]	file:
trailing_ones	base/gmp.jl	/^trailing_ones(x::BigInt) = MPZ.scan0(x, 0)$/;"	f
trailing_ones	base/int.jl	/^trailing_ones(x::Integer) = trailing_zeros(~x)$/;"	f
trailing_zeros	base/gmp.jl	/^trailing_zeros(x::BigInt) = MPZ.scan1(x, 0)$/;"	f
trailing_zeros	base/int.jl	/^trailing_zeros(x::BitInteger) = Int(cttz_int(x))$/;"	f
trailingsize	base/abstractarray.jl	/^function trailingsize(A, n)$/;"	f
trailingsize	base/abstractarray.jl	/^function trailingsize(inds::Indices)$/;"	f
trailingsize	base/abstractarray.jl	/^function trailingsize(inds::Indices, n)$/;"	f
trampoline_alloc	src/runtime_ccall.cpp	/^static void *trampoline_alloc()$/;"	f	typeref:typename:void *	file:
trampoline_deleter	src/runtime_ccall.cpp	/^static void trampoline_deleter(void **f)$/;"	f	typeref:typename:void	file:
trampoline_free	src/runtime_ccall.cpp	/^static void trampoline_free(void *tramp)$/;"	f	typeref:typename:void	file:
trampoline_freelist	src/runtime_ccall.cpp	/^static void *trampoline_freelist;$/;"	v	typeref:typename:void *	file:
trans-op	src/julia-parser.scm	/^(define trans-op (string->symbol ".'"))$/;"	f
transact	stdlib/LibGit2/src/LibGit2.jl	/^function transact(f::Function, repo::GitRepo)$/;"	f
transcode	base/c.jl	/^function transcode end$/;"	f
transcode	base/c.jl	/^function transcode(::Type{UInt16}, src::AbstractVector{UInt8})$/;"	f
transcode	base/c.jl	/^function transcode(::Type{UInt8}, src::AbstractVector{UInt16})$/;"	f
transcode	base/c.jl	/^function transcode(::Type{UInt8}, src::Vector{<:Union{Int32,UInt32}})$/;"	f
transcode	base/c.jl	/^transcode(::Type{String}, src) = String(transcode(UInt8, src))$/;"	f
transcode	base/c.jl	/^transcode(::Type{String}, src::String) = src$/;"	f
transcode	base/c.jl	/^transcode(::Type{T}, src::AbstractVector{T}) where {T<:Union{UInt8,UInt16,UInt32,Int32}} = src$/;"	f
transcode	base/c.jl	/^transcode(::Type{T}, src::AbstractVector{UInt8}) where {T<:Union{Int32,UInt32}} =$/;"	f
transcode	base/c.jl	/^transcode(::Type{T}, src::CodeUnits{UInt8,String}) where {T<:Union{Int32,UInt32}} =$/;"	f
transcode	base/c.jl	/^transcode(::Type{T}, src::String) where {T<:Union{Int32,UInt32}} = T[T(c) for c in src]$/;"	f
transcode	base/c.jl	/^transcode(T, src::String) = transcode(T, codeunits(src))$/;"	f
transfer_progress	stdlib/LibGit2/test/online.jl	/^function transfer_progress(progress::Ptr{LibGit2.TransferProgress}, payload::Dict)$/;"	f
transform	deps/srccache/patchelf-0.9/Makefile.in	/^transform = $(program_transform_name)$/;"	m
transform	deps/srccache/patchelf-0.9/src/Makefile.in	/^transform = $(program_transform_name)$/;"	m
transform	deps/srccache/patchelf-0.9/tests/Makefile.in	/^transform = $(program_transform_name)$/;"	m
transform	test/compiler/contextual.jl	/^        transform(expr) = transform_expr(expr, map_slot_number, map_ssa_value, sparams)$/;"	f
transform!	stdlib/REPL/test/lineedit.jl	/^function transform!(f, s, i = -1) # i is char-based (not bytes) buffer position$/;"	f
transform!	stdlib/SHA/src/sha1.jl	/^function transform!(context::SHA1_CTX)$/;"	f
transform!	stdlib/SHA/src/sha2.jl	/^function transform!(context::T) where {T<:Union{SHA2_224_CTX,SHA2_256_CTX}}$/;"	f
transform!	stdlib/SHA/src/sha2.jl	/^function transform!(context::Union{SHA2_384_CTX,SHA2_512_CTX})$/;"	f
transform!	stdlib/SHA/src/sha3.jl	/^function transform!(context::T) where {T<:SHA3_CTX}$/;"	f
transform!	test/compiler/contextual.jl	/^    function transform!(ci, nargs, sparams)$/;"	f
transform_expr	test/compiler/contextual.jl	/^    function transform_expr(expr, map_slot_number, map_ssa_value, sparams)$/;"	f
transition	stdlib/REPL/src/LineEdit.jl	/^function transition(f::Function, s::MIState, newmode)$/;"	f
transition	stdlib/REPL/src/LineEdit.jl	/^function transition(f::Function, s::PrefixSearchState, mode)$/;"	f
transition	stdlib/REPL/src/LineEdit.jl	/^transition(s::MIState, mode) = transition((args...)->nothing, s, mode)$/;"	f
translate27368	test/core.jl	/^translate27368(::Type{Val{name}}) where {name} =$/;"	f
translate27368	test/core.jl	/^translate27368(name::Symbol) =$/;"	f
transpose	base/number.jl	/^transpose(x::Number) = x$/;"	f
transpose	stdlib/LinearAlgebra/src/adjtrans.jl	/^transpose(A::AbstractVecOrMat) = Transpose(A)$/;"	f
transpose	stdlib/LinearAlgebra/src/adjtrans.jl	/^transpose(A::Adjoint{<:Real}) = A.parent$/;"	f
transpose	stdlib/LinearAlgebra/src/adjtrans.jl	/^transpose(A::Transpose) = A.parent$/;"	f
transpose	stdlib/LinearAlgebra/src/bidiag.jl	/^transpose(B::Bidiagonal) = Transpose(B)$/;"	f
transpose	stdlib/LinearAlgebra/src/bidiag.jl	/^transpose(B::Bidiagonal{<:Number}) = Bidiagonal(B.dv, B.ev, B.uplo == 'U' ? :L : :U)$/;"	f
transpose	stdlib/LinearAlgebra/src/bitarray.jl	/^transpose(B::Union{BitVector,BitMatrix}) = Transpose(B)$/;"	f
transpose	stdlib/LinearAlgebra/src/diagonal.jl	/^transpose(D::Diagonal) = Diagonal(transpose.(D.diag))$/;"	f
transpose	stdlib/LinearAlgebra/src/diagonal.jl	/^transpose(D::Diagonal{<:Number}) = D$/;"	f
transpose	stdlib/LinearAlgebra/src/givens.jl	/^transpose(R::AbstractRotation) = error("transpose not implemented for $(typeof(R)). Consider usi/;"	f
transpose	stdlib/LinearAlgebra/src/lu.jl	/^transpose(F::LU) = Transpose(F)$/;"	f
transpose	stdlib/LinearAlgebra/src/symmetric.jl	/^transpose(A::Hermitian) = Transpose(A)$/;"	f
transpose	stdlib/LinearAlgebra/src/symmetric.jl	/^transpose(A::Hermitian{<:Real}) = A$/;"	f
transpose	stdlib/LinearAlgebra/src/symmetric.jl	/^transpose(A::Symmetric) = A$/;"	f
transpose	stdlib/LinearAlgebra/src/transpose.jl	/^transpose(a::AbstractArray) = error("transpose not defined for $(typeof(a)). Consider using `per/;"	f
transpose	stdlib/LinearAlgebra/src/triangular.jl	/^transpose(A::LowerTriangular) = Transpose(A)$/;"	f
transpose	stdlib/LinearAlgebra/src/triangular.jl	/^transpose(A::UnitLowerTriangular) = Transpose(A)$/;"	f
transpose	stdlib/LinearAlgebra/src/triangular.jl	/^transpose(A::UnitUpperTriangular) = Transpose(A)$/;"	f
transpose	stdlib/LinearAlgebra/src/triangular.jl	/^transpose(A::UpperTriangular) = Transpose(A)$/;"	f
transpose	stdlib/LinearAlgebra/src/tridiag.jl	/^transpose(S::SymTridiagonal) = S$/;"	f
transpose	stdlib/LinearAlgebra/src/tridiag.jl	/^transpose(S::Tridiagonal) = Transpose(S)$/;"	f
transpose	stdlib/LinearAlgebra/src/tridiag.jl	/^transpose(S::Tridiagonal{<:Number}) = Tridiagonal(S.du, S.d, S.dl)$/;"	f
transpose	stdlib/LinearAlgebra/src/uniformscaling.jl	/^transpose(J::UniformScaling) = J$/;"	f
transpose	stdlib/LinearAlgebra/test/matmul.jl	/^transpose(x::RootInt) = x$/;"	f
transpose	stdlib/SparseArrays/src/sparsematrix.jl	/^transpose(A::AbstractSparseMatrixCSC) = Transpose(A)$/;"	f
transpose	stdlib/SparseArrays/src/sparsevector.jl	/^transpose(sv::SparseVector) = Transpose(sv)$/;"	f
transpose!	stdlib/LinearAlgebra/src/bitarray.jl	/^function transpose!(C::BitMatrix, B::BitMatrix)$/;"	f
transpose!	stdlib/LinearAlgebra/src/transpose.jl	/^function transpose!(B::AbstractMatrix, A::AbstractVector)$/;"	f
transpose!	stdlib/LinearAlgebra/src/transpose.jl	/^function transpose!(B::AbstractVector, A::AbstractMatrix)$/;"	f
transpose!	stdlib/LinearAlgebra/src/transpose.jl	/^transpose!(B::AbstractMatrix, A::AbstractMatrix) = transpose_f!(transpose, B, A)$/;"	f
transpose!	stdlib/LinearAlgebra/src/triangular.jl	/^transpose!(A::LowerTriangular) = UpperTriangular(copytri!(A.data, 'L', false, true))$/;"	f
transpose!	stdlib/LinearAlgebra/src/triangular.jl	/^transpose!(A::UnitLowerTriangular) = UnitUpperTriangular(copytri!(A.data, 'L', false, true))$/;"	f
transpose!	stdlib/LinearAlgebra/src/triangular.jl	/^transpose!(A::UnitUpperTriangular) = UnitLowerTriangular(copytri!(A.data, 'U', false, true))$/;"	f
transpose!	stdlib/LinearAlgebra/src/triangular.jl	/^transpose!(A::UpperTriangular) = LowerTriangular(copytri!(A.data, 'U', false, true))$/;"	f
transpose!	stdlib/REPL/test/lineedit.jl	/^    transpose!(i) = transform!(buf -> LineEdit.edit_transpose_words(buf, mode[]),$/;"	f
transpose!	stdlib/SparseArrays/src/sparsematrix.jl	/^transpose!(X::AbstractSparseMatrixCSC{Tv,Ti}, A::AbstractSparseMatrixCSC{Tv,Ti}) where {Tv,Ti} =/;"	f
transpose8x8	stdlib/LinearAlgebra/src/bitarray.jl	/^function transpose8x8(x::UInt64)$/;"	f
transpose_	stdlib/SuiteSparse/src/cholmod.jl	/^function transpose_(A::Sparse{Tv}, values::Integer) where Tv<:VTypes$/;"	f
transpose_f!	stdlib/LinearAlgebra/src/transpose.jl	/^function transpose_f!(f, B::AbstractMatrix, A::AbstractMatrix)$/;"	f
transpose_lines_down!	stdlib/REPL/test/lineedit.jl	/^    transpose_lines_down!(buf) = LineEdit.edit_transpose_lines_down!(buf, position(buf)=>positio/;"	f
transpose_lines_down_reg!	stdlib/REPL/test/lineedit.jl	/^    transpose_lines_down_reg!(buf) = LineEdit.edit_transpose_lines_down!(buf, region(buf))$/;"	f
transpose_lines_up!	stdlib/REPL/test/lineedit.jl	/^    transpose_lines_up!(buf) = LineEdit.edit_transpose_lines_up!(buf, position(buf)=>position(bu/;"	f
transpose_lines_up_reg!	stdlib/REPL/test/lineedit.jl	/^    transpose_lines_up_reg!(buf) = LineEdit.edit_transpose_lines_up!(buf, region(buf))$/;"	f
transposebaselength	stdlib/LinearAlgebra/src/transpose.jl	/^const transposebaselength=64$/;"	v
transposeblock!	stdlib/LinearAlgebra/src/transpose.jl	/^function transposeblock!(f, B::AbstractMatrix, A::AbstractMatrix, m::Int, n::Int, offseti::Int, /;"	f
trcon!	stdlib/LinearAlgebra/src/lapack.jl	/^        function trcon!(norm::AbstractChar, uplo::AbstractChar, diag::AbstractChar, A::AbstractM/;"	f
treap_delete	test/gcext/gcext.c	/^static int treap_delete(treap_t **treap, void *addr)$/;"	f	typeref:typename:int	file:
treap_delete_node	test/gcext/gcext.c	/^static void treap_delete_node(treap_t **treap)$/;"	f	typeref:typename:void	file:
treap_find	test/gcext/gcext.c	/^static treap_t *treap_find(treap_t *treap, void *p)$/;"	f	typeref:typename:treap_t *	file:
treap_free_list	test/gcext/gcext.c	/^static treap_t *treap_free_list;$/;"	v	typeref:typename:treap_t *	file:
treap_insert	test/gcext/gcext.c	/^static void treap_insert(treap_t **treap, treap_t *val)$/;"	f	typeref:typename:void	file:
treap_rot_left	test/gcext/gcext.c	/^static inline void treap_rot_left(treap_t **treap)$/;"	f	typeref:typename:void	file:
treap_rot_right	test/gcext/gcext.c	/^static inline void treap_rot_right(treap_t **treap)$/;"	f	typeref:typename:void	file:
treap_t	test/gcext/gcext.c	/^typedef struct treap_t {$/;"	s	file:
treap_t	test/gcext/gcext.c	/^} treap_t;$/;"	t	typeref:struct:treap_t	file:
tree	stdlib/LibGit2/src/tree.jl	/^tree = LibGit2.GitTree(repo, "HEAD^{tree}")$/;"	v
tree	stdlib/Profile/src/Profile.jl	/^function tree(io::IO, bt::StackFrameTree, cols::Int, fmt::ProfileFormat)$/;"	f
tree	stdlib/Profile/src/Profile.jl	/^function tree(io::IO, data::Vector{UInt64}, lidict::Union{LineInfoFlatDict, LineInfoDict}, cols:/;"	f
tree!	stdlib/Profile/src/Profile.jl	/^function tree!(root::StackFrameTree{T}, all::Vector{UInt64}, lidict::Union{LineInfoFlatDict, Lin/;"	f
tree_entry	stdlib/LibGit2/src/tree.jl	/^tree_entry = tree[1]$/;"	v
tree_format	stdlib/Profile/src/Profile.jl	/^function tree_format(lilist::Vector{StackFrame}, counts::Vector{Int}, level::Int, cols::Int)$/;"	f
tree_format_linewidth	stdlib/Profile/src/Profile.jl	/^tree_format_linewidth(x::StackFrame) = ndigits(x.line) + 6$/;"	f
treewalk	stdlib/LibGit2/src/tree.jl	/^function treewalk(f, tree::GitTree, post::Bool = false)$/;"	f
trevc!	stdlib/LinearAlgebra/src/lapack.jl	/^        function trevc!(side::AbstractChar, howmny::AbstractChar, select::AbstractVector{BlasInt/;"	f
trexc!	stdlib/LinearAlgebra/src/lapack.jl	/^        function trexc!(compq::AbstractChar, ifst::BlasInt, ilst::BlasInt, T::AbstractMatrix{$el/;"	f
trexc!	stdlib/LinearAlgebra/src/lapack.jl	/^        trexc!(ifst::BlasInt, ilst::BlasInt, T::AbstractMatrix{$elty}, Q::AbstractMatrix{$elty})/;"	f
triangular	test/subtype.jl	/^    triangular(::Type{<:AbstractArray{T}}) where {T} = T$/;"	f
triangular	test/subtype.jl	/^    triangular(::Type{<:AbstractArray}) = Any$/;"	f
triangular_methodshow	test/show.jl	/^function triangular_methodshow(x::T1, y::T2) where {T2<:Integer, T1<:T2}$/;"	f
tridiag	stdlib/LinearAlgebra/test/pinv.jl	/^function tridiag(T::Type, m::Integer, n::Integer)$/;"	f
tridiag	stdlib/LinearAlgebra/test/pinv.jl	/^tridiag(m::Integer, n::Integer) = tridiag(Float64, m::Integer, n::Integer)$/;"	f
trigger	stdlib/Markdown/src/parse/config.jl	/^macro trigger(ex)$/;"	f
trigger14878	test/core.jl	/^function trigger14878()$/;"	f
triggers	stdlib/Markdown/src/parse/config.jl	/^triggers(f) = get(meta(f), :triggers, Set{Char}())$/;"	f
triggers!	stdlib/Markdown/src/parse/config.jl	/^triggers!(f, ts) = meta(f)[:triggers] = Set{Char}(ts)$/;"	f
tril	stdlib/LinearAlgebra/src/bitarray.jl	/^function tril(B::BitMatrix, k::Integer=0)$/;"	f
tril	stdlib/LinearAlgebra/src/dense.jl	/^tril(M::Matrix, k::Integer) = tril!(copy(M), k)$/;"	f
tril	stdlib/LinearAlgebra/src/generic.jl	/^tril(M::AbstractMatrix) = tril!(copy(M))$/;"	f
tril	stdlib/LinearAlgebra/src/generic.jl	/^tril(M::AbstractMatrix,k::Integer) = tril!(copy(M),k)$/;"	f
tril	stdlib/LinearAlgebra/src/symmetric.jl	/^function tril(A::Hermitian, k::Integer=0)$/;"	f
tril	stdlib/LinearAlgebra/src/symmetric.jl	/^function tril(A::Symmetric, k::Integer=0)$/;"	f
tril	stdlib/SparseArrays/src/linalg.jl	/^function tril(S::AbstractSparseMatrixCSC{Tv,Ti}, k::Integer=0) where {Tv,Ti}$/;"	f
tril!	stdlib/LinearAlgebra/src/bidiag.jl	/^function tril!(M::Bidiagonal, k::Integer=0)$/;"	f
tril!	stdlib/LinearAlgebra/src/dense.jl	/^function tril!(M::AbstractMatrix, k::Integer)$/;"	f
tril!	stdlib/LinearAlgebra/src/diagonal.jl	/^function tril!(D::Diagonal,k::Integer=0)$/;"	f
tril!	stdlib/LinearAlgebra/src/generic.jl	/^tril!(M::AbstractMatrix) = tril!(M,0)$/;"	f
tril!	stdlib/LinearAlgebra/src/triangular.jl	/^function tril!(A::UnitLowerTriangular, k::Integer=0)$/;"	f
tril!	stdlib/LinearAlgebra/src/triangular.jl	/^function tril!(A::UnitUpperTriangular{T}, k::Integer=0) where T$/;"	f
tril!	stdlib/LinearAlgebra/src/triangular.jl	/^function tril!(A::UpperTriangular, k::Integer=0)$/;"	f
tril!	stdlib/LinearAlgebra/src/triangular.jl	/^tril!(A::LowerTriangular, k::Integer=0) = LowerTriangular(tril!(A.data,k))$/;"	f
tril!	stdlib/LinearAlgebra/src/tridiag.jl	/^function tril!(M::SymTridiagonal, k::Integer=0)$/;"	f
tril!	stdlib/LinearAlgebra/src/tridiag.jl	/^function tril!(M::Tridiagonal, k::Integer=0)$/;"	f
tril!	stdlib/SparseArrays/src/sparsematrix.jl	/^tril!(A::AbstractSparseMatrixCSC, k::Integer = 0, trim::Bool = true) =$/;"	f
trimrep	test/grisu.jl	/^function trimrep(buffer)$/;"	f
trimstorage!	stdlib/SparseArrays/src/higherorderfns.jl	/^function trimstorage!(A::SparseVecOrMat, maxstored)$/;"	f
trimzeros	base/grisu/fastfixed.jl	/^function trimzeros(buffer, len, decimal_point)$/;"	f
triplequoted-string-indentation	src/julia-parser.scm	/^(define (triplequoted-string-indentation lst)$/;"	f
triplequoted-string-indentation-	src/julia-parser.scm	/^(define (triplequoted-string-indentation- s)$/;"	f
triu	stdlib/LinearAlgebra/src/bitarray.jl	/^function triu(B::BitMatrix, k::Integer=0)$/;"	f
triu	stdlib/LinearAlgebra/src/dense.jl	/^triu(M::Matrix, k::Integer) = triu!(copy(M), k)$/;"	f
triu	stdlib/LinearAlgebra/src/generic.jl	/^triu(M::AbstractMatrix) = triu!(copy(M))$/;"	f
triu	stdlib/LinearAlgebra/src/generic.jl	/^triu(M::AbstractMatrix,k::Integer) = triu!(copy(M),k)$/;"	f
triu	stdlib/LinearAlgebra/src/symmetric.jl	/^function triu(A::Hermitian, k::Integer=0)$/;"	f
triu	stdlib/LinearAlgebra/src/symmetric.jl	/^function triu(A::Symmetric, k::Integer=0)$/;"	f
triu	stdlib/SparseArrays/src/linalg.jl	/^function triu(S::AbstractSparseMatrixCSC{Tv,Ti}, k::Integer=0) where {Tv,Ti}$/;"	f
triu!	stdlib/LinearAlgebra/src/bidiag.jl	/^function triu!(M::Bidiagonal, k::Integer=0)$/;"	f
triu!	stdlib/LinearAlgebra/src/dense.jl	/^function triu!(M::AbstractMatrix, k::Integer)$/;"	f
triu!	stdlib/LinearAlgebra/src/diagonal.jl	/^function triu!(D::Diagonal,k::Integer=0)$/;"	f
triu!	stdlib/LinearAlgebra/src/generic.jl	/^triu!(M::AbstractMatrix) = triu!(M,0)$/;"	f
triu!	stdlib/LinearAlgebra/src/triangular.jl	/^function triu!(A::LowerTriangular, k::Integer=0)$/;"	f
triu!	stdlib/LinearAlgebra/src/triangular.jl	/^function triu!(A::UnitLowerTriangular{T}, k::Integer=0) where T$/;"	f
triu!	stdlib/LinearAlgebra/src/triangular.jl	/^function triu!(A::UnitUpperTriangular, k::Integer=0)$/;"	f
triu!	stdlib/LinearAlgebra/src/triangular.jl	/^triu!(A::UpperTriangular, k::Integer=0) = UpperTriangular(triu!(A.data,k))$/;"	f
triu!	stdlib/LinearAlgebra/src/tridiag.jl	/^function triu!(M::SymTridiagonal, k::Integer=0)$/;"	f
triu!	stdlib/LinearAlgebra/src/tridiag.jl	/^function triu!(M::Tridiagonal, k::Integer=0)$/;"	f
triu!	stdlib/SparseArrays/src/sparsematrix.jl	/^triu!(A::AbstractSparseMatrixCSC, k::Integer = 0, trim::Bool = true) =$/;"	f
trmm	stdlib/LinearAlgebra/src/blas.jl	/^        function trmm(side::AbstractChar, uplo::AbstractChar, transa::AbstractChar, diag::Abstra/;"	f
trmm	stdlib/LinearAlgebra/src/blas.jl	/^function trmm end$/;"	f
trmm!	stdlib/LinearAlgebra/src/blas.jl	/^        function trmm!(side::AbstractChar, uplo::AbstractChar, transa::AbstractChar, diag::Abstr/;"	f
trmm!	stdlib/LinearAlgebra/src/blas.jl	/^function trmm! end$/;"	f
trmv	stdlib/LinearAlgebra/src/blas.jl	/^        function trmv(uplo::AbstractChar, trans::AbstractChar, diag::AbstractChar, A::AbstractMa/;"	f
trmv	stdlib/LinearAlgebra/src/blas.jl	/^function trmv end$/;"	f
trmv!	stdlib/LinearAlgebra/src/blas.jl	/^        function trmv!(uplo::AbstractChar, trans::AbstractChar, diag::AbstractChar, A::AbstractM/;"	f
trmv!	stdlib/LinearAlgebra/src/blas.jl	/^function trmv! end$/;"	f
trrfs!	stdlib/LinearAlgebra/src/lapack.jl	/^        function trrfs!(uplo::AbstractChar, trans::AbstractChar, diag::AbstractChar,$/;"	f
trsen!	stdlib/LinearAlgebra/src/lapack.jl	/^        function trsen!(job::AbstractChar, compq::AbstractChar, select::AbstractVector{BlasInt},$/;"	f
trsen!	stdlib/LinearAlgebra/src/lapack.jl	/^        trsen!(select::AbstractVector{BlasInt}, T::AbstractMatrix{$elty}, Q::AbstractMatrix{$elt/;"	f
trsm	stdlib/LinearAlgebra/src/blas.jl	/^        function trsm(side::AbstractChar, uplo::AbstractChar, transa::AbstractChar, diag::Abstra/;"	f
trsm	stdlib/LinearAlgebra/src/blas.jl	/^function trsm end$/;"	f
trsm!	stdlib/LinearAlgebra/src/blas.jl	/^        function trsm!(side::AbstractChar, uplo::AbstractChar, transa::AbstractChar, diag::Abstr/;"	f
trsm!	stdlib/LinearAlgebra/src/blas.jl	/^function trsm! end$/;"	f
trsv	stdlib/LinearAlgebra/src/blas.jl	/^        function trsv(uplo::AbstractChar, trans::AbstractChar, diag::AbstractChar, A::AbstractMa/;"	f
trsv	stdlib/LinearAlgebra/src/blas.jl	/^function trsv end$/;"	f
trsv!	stdlib/LinearAlgebra/src/blas.jl	/^        function trsv!(uplo::AbstractChar, trans::AbstractChar, diag::AbstractChar, A::AbstractM/;"	f
trsv!	stdlib/LinearAlgebra/src/blas.jl	/^function trsv! end$/;"	f
trsyl!	stdlib/LinearAlgebra/src/lapack.jl	/^        function trsyl!(transa::AbstractChar, transb::AbstractChar, A::AbstractMatrix{$elty},$/;"	f
trtri!	stdlib/LinearAlgebra/src/lapack.jl	/^        function trtri!(uplo::AbstractChar, diag::AbstractChar, A::AbstractMatrix{$elty})$/;"	f
trtrs!	stdlib/LinearAlgebra/src/lapack.jl	/^        function trtrs!(uplo::AbstractChar, trans::AbstractChar, diag::AbstractChar,$/;"	f
true_sym	src/ast.c	/^    value_t true_sym;$/;"	m	struct:_jl_ast_context_t	typeref:typename:value_t	file:
truebools	stdlib/SparseArrays/src/sparsematrix.jl	/^truebools(r::AbstractRNG, n::Integer) = fill(true, n)$/;"	f
truecmd	test/spawn.jl	/^truecmd = `true`$/;"	v
trues	base/bitarray.jl	/^trues(dims::DimOrInd...) = trues(dims)$/;"	f
trues	base/bitarray.jl	/^trues(dims::NTuple{N, Integer}) where {N} = fill!(BitArray(undef, dims), true)$/;"	f
trues	base/bitarray.jl	/^trues(dims::NTuple{N, Union{Integer, OneTo}}) where {N} = trues(map(to_dim, dims))$/;"	f
trues	base/bitarray.jl	/^trues(dims::Tuple{}) = fill!(BitArray(undef, dims), true)$/;"	f
trunc	base/float.jl	/^                function trunc(::Type{$Ti},x::$Tf)$/;"	f
trunc	base/float.jl	/^trunc(::Type{Integer}, x::Float32) = trunc(Int,x)$/;"	f
trunc	base/float.jl	/^trunc(::Type{Integer}, x::Float64) = trunc(Int,x)$/;"	f
trunc	base/float.jl	/^trunc(::Type{Signed}, x::Float32) = trunc(Int,x)$/;"	f
trunc	base/float.jl	/^trunc(::Type{Signed}, x::Float64) = trunc(Int,x)$/;"	f
trunc	base/float.jl	/^trunc(::Type{T}, x::Float16) where {T<:Integer} = trunc(T, Float32(x))$/;"	f
trunc	base/float.jl	/^trunc(::Type{Unsigned}, x::Float32) = trunc(UInt,x)$/;"	f
trunc	base/float.jl	/^trunc(::Type{Unsigned}, x::Float64) = trunc(UInt,x)$/;"	f
trunc	base/floatfuncs.jl	/^trunc(x::Real; kwargs...) = round(x, RoundToZero; kwargs...)$/;"	f
trunc	base/gmp.jl	/^function trunc(::Type{BigInt}, x::Union{Float32,Float64})$/;"	f
trunc	base/int.jl	/^function trunc end$/;"	f
trunc	base/int.jl	/^trunc(::Type{T}, x::Integer) where {T<:Integer} = convert(T, x)$/;"	f
trunc	base/mpfr.jl	/^function trunc(::Type{T}, x::BigFloat) where T<:Union{Signed,Unsigned}$/;"	f
trunc	base/mpfr.jl	/^trunc(::Type{BigInt}, x::BigFloat) = unsafe_cast(BigInt, x, RoundToZero)$/;"	f
trunc	base/mpfr.jl	/^trunc(::Type{Integer}, x::BigFloat) = trunc(BigInt, x)$/;"	f
trunc	base/rational.jl	/^trunc(::Type{T}, x::Rational) where {T} = convert(T,div(x.num,x.den))$/;"	f
trunc	base/rational.jl	/^trunc(x::Rational{T}) where {T} = Rational(trunc(T,x))$/;"	f
trunc_float	src/runtime_intrinsics.c	/^#define trunc_float(/;"	d	file:
truncate	base/filesystem.jl	/^function truncate(f::File, n::Integer)$/;"	f
truncate	base/iobuffer.jl	/^function truncate(io::GenericIOBuffer, n::Integer)$/;"	f
truncate	base/iostream.jl	/^function truncate(s::IOStream, n::Integer)$/;"	f
truncbits	base/special/log.jl	/^@inline function truncbits(x::Float64)$/;"	f
truncbits	base/twiceprecision.jl	/^function truncbits(x::F, nb) where {F<:IEEEFloat}$/;"	f
truncbits	base/twiceprecision.jl	/^truncbits(x, nb) = x$/;"	f
truncmask	base/twiceprecision.jl	/^function truncmask(x::F, mask) where {F<:IEEEFloat}$/;"	f
truncmask	base/twiceprecision.jl	/^truncmask(x, mask) = x$/;"	f
truncsym	src/flisp/flisp.h	/^    value_t iostreamsym, rdsym, wrsym, apsym, crsym, truncsym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
truncto	stdlib/Profile/src/Profile.jl	/^truncto(str::Symbol, w::Int) = truncto(string(str), w)$/;"	f
try-arg-name	src/macroexpand.scm	/^(define (try-arg-name v)$/;"	f
trySuperRegion	src/clangsa/GCChecker.cpp	/^  static SymbolRef trySuperRegion(SValExplainer &Ex, ProgramStateRef State, SVal Val) {$/;"	f	namespace:Helpers	typeref:typename:SymbolRef	file:
try_bool_conversion	base/multidimensional.jl	/^@inline try_bool_conversion(x::Real) =$/;"	f
try_catch	test/stacktraces.jl	/^    @noinline function try_catch()$/;"	f
try_compute_fieldidx	base/compiler/tfuncs.jl	/^function try_compute_fieldidx(typ::DataType, @nospecialize(field))$/;"	f
try_compute_fieldidx_expr	base/compiler/ssair/passes.jl	/^function try_compute_fieldidx_expr(@nospecialize(typ), @nospecialize(use_expr))$/;"	f
try_emit_union_alloca	src/cgutils.cpp	/^static AllocaInst *try_emit_union_alloca(jl_codectx_t &ctx, jl_uniontype_t *ut, bool &allunbox, /;"	f	typeref:typename:AllocaInst *	file:
try_eval	src/ccall.cpp	/^static jl_value_t* try_eval(jl_codectx_t &ctx, jl_value_t *ex, const char *failure)$/;"	f	typeref:typename:jl_value_t *	file:
try_get_type	stdlib/REPL/src/REPLCompletions.jl	/^function try_get_type(sym::Expr, fn::Module)$/;"	f
try_get_type	stdlib/REPL/src/REPLCompletions.jl	/^try_get_type(other, fn::Module) = get_type(other, fn)$/;"	f
try_read_procfs_line	src/processor_arm.cpp	/^static inline bool try_read_procfs_line(llvm::StringRef line, const char *prefix, T &out,$/;"	f	namespace:ARM	typeref:typename:bool	file:
try_stacktrace	test/stacktraces.jl	/^    @noinline function try_stacktrace()$/;"	f
try_subtype_in_env	src/subtype.c	/^static int try_subtype_in_env(jl_value_t *a, jl_value_t *b, jl_stenv_t *e, int R, int d)$/;"	f	typeref:typename:int	file:
try_yieldto	base/task.jl	/^function try_yieldto(undo, reftask::Ref{Task})$/;"	f
trylisten	stdlib/Sockets/src/Sockets.jl	/^function trylisten(sock::LibuvServer; backlog::Integer=BACKLOG_DEFAULT)$/;"	f
trylock	base/channels.jl	/^trylock(c::Channel) = trylock(c.cond_take)$/;"	f
trylock	base/condition.jl	/^function trylock end$/;"	f
trylock	base/condition.jl	/^trylock(c::GenericCondition) = trylock(c.lock)$/;"	f
trylock	base/condition.jl	/^trylock(l::AlwaysLockedST) = l.ownertid == Threads.threadid()$/;"	f
trylock	base/lock.jl	/^function trylock(f, l::AbstractLock)$/;"	f
trylock	base/lock.jl	/^function trylock(rl::ReentrantLock)$/;"	f
trylock	base/locks-mt.jl	/^function trylock(l::SpinLock)$/;"	f
trylock	base/weakkeydict.jl	/^trylock(f, wkh::WeakKeyDict) = trylock(f, wkh.lock)$/;"	f
tryparse	base/mpfr.jl	/^function tryparse(::Type{BigFloat}, s::AbstractString; base::Integer=0, precision::Integer=DEFAU/;"	f
tryparse	base/parse.jl	/^function tryparse(::Type{Float32}, s::String)$/;"	f
tryparse	base/parse.jl	/^function tryparse(::Type{Float32}, s::SubString{String})$/;"	f
tryparse	base/parse.jl	/^function tryparse(::Type{Float64}, s::String)$/;"	f
tryparse	base/parse.jl	/^function tryparse(::Type{Float64}, s::SubString{String})$/;"	f
tryparse	base/parse.jl	/^function tryparse(::Type{T}, s::AbstractString; base::Union{Nothing,Integer} = nothing) where {T/;"	f
tryparse	base/parse.jl	/^tryparse(::Type{Float16}, s::AbstractString) =$/;"	f
tryparse	base/parse.jl	/^tryparse(::Type{T}, s::AbstractString) where {T<:Union{Float32,Float64}} = tryparse(T, String(s)/;"	f
tryparse_internal	base/gmp.jl	/^function tryparse_internal(::Type{BigInt}, s::AbstractString, startpos::Int, endpos::Int, base_:/;"	f
tryparse_internal	base/parse.jl	/^function tryparse_internal(::Type{Bool}, sbuff::Union{String,SubString{String}},$/;"	f
tryparse_internal	base/parse.jl	/^function tryparse_internal(::Type{Complex{T}}, s::Union{String,SubString{String}}, i::Int, e::In/;"	f
tryparse_internal	base/parse.jl	/^function tryparse_internal(::Type{Float32}, s::String, startpos::Int, endpos::Int)$/;"	f
tryparse_internal	base/parse.jl	/^function tryparse_internal(::Type{Float32}, s::SubString{String}, startpos::Int, endpos::Int)$/;"	f
tryparse_internal	base/parse.jl	/^function tryparse_internal(::Type{Float64}, s::String, startpos::Int, endpos::Int)$/;"	f
tryparse_internal	base/parse.jl	/^function tryparse_internal(::Type{Float64}, s::SubString{String}, startpos::Int, endpos::Int)$/;"	f
tryparse_internal	base/parse.jl	/^function tryparse_internal(::Type{T}, s::AbstractString, raise::Bool; kwargs...) where T<:Real$/;"	f
tryparse_internal	base/parse.jl	/^function tryparse_internal(::Type{T}, s::AbstractString, startpos::Int, endpos::Int, base_::Inte/;"	f
tryparse_internal	base/parse.jl	/^function tryparse_internal(::Type{T}, s::AbstractString, startpos::Int, endpos::Int, raise::Bool/;"	f
tryparse_internal	base/parse.jl	/^tryparse_internal(::Type{Float16}, s::AbstractString, startpos::Int, endpos::Int) =$/;"	f
tryparsenext	stdlib/Dates/src/io.jl	/^        @inline function tryparsenext(d::DatePart{$c}, str, i, len)$/;"	f
tryparsenext	stdlib/Dates/src/io.jl	/^    @eval @inline function tryparsenext(d::DatePart{$tok}, str, i, len, locale)$/;"	f
tryparsenext	stdlib/Dates/src/io.jl	/^@inline function tryparsenext(d::AbstractDateToken, str, i, len, locale)$/;"	f
tryparsenext	stdlib/Dates/src/io.jl	/^@inline function tryparsenext(d::DatePart{'s'}, str, i, len)$/;"	f
tryparsenext	stdlib/Dates/src/io.jl	/^@inline function tryparsenext(d::Delim{<:AbstractChar, N}, str, i::Int, len) where N$/;"	f
tryparsenext	stdlib/Dates/src/io.jl	/^@inline function tryparsenext(d::Delim{String, N}, str, i::Int, len) where N$/;"	f
tryparsenext	stdlib/Dates/src/io.jl	/^function tryparsenext end$/;"	f
tryparsenext	stdlib/Dates/src/io.jl	/^function tryparsenext(d::DatePart{'p'}, str, i, len)$/;"	f
tryparsenext_base10	stdlib/Dates/src/parse.jl	/^@inline function tryparsenext_base10(str::AbstractString, i::Int, len::Int, min_width::Int=1, ma/;"	f
tryparsenext_core	stdlib/Dates/src/parse.jl	/^@generated function tryparsenext_core(str::AbstractString, pos::Int, len::Int,$/;"	f
tryparsenext_internal	stdlib/Dates/src/parse.jl	/^@generated function tryparsenext_internal(::Type{T}, str::AbstractString, pos::Int, len::Int,$/;"	f
tryparsenext_word	stdlib/Dates/src/parse.jl	/^@inline function tryparsenext_word(str::AbstractString, i, len, locale, maxchars=0)$/;"	f
trypoptask	base/task.jl	/^function trypoptask(W::StickyWorkqueue)$/;"	f
ts	stdlib/Test/test/runtests.jl	/^ts = @testset "@testset should return the testset" begin$/;"	v
ts	stdlib/Test/test/runtests.jl	/^ts = @testset CustomTestSet "Testing custom testsets" begin$/;"	v
ts	stdlib/Test/test/runtests.jl	/^ts = try$/;"	v
ts:last-tok	src/julia-parser.scm	/^(define-macro (ts:last-tok s)   `(aref ,s 0))$/;"	f
ts:pbtok	src/julia-parser.scm	/^(define-macro (ts:pbtok s)      `(aref ,s 3))$/;"	f
ts:port	src/julia-parser.scm	/^(define-macro (ts:port s)       `(aref ,s 1))$/;"	f
ts:put-back!	src/julia-parser.scm	/^(define (ts:put-back! s t spc)$/;"	f
ts:set-tok!	src/julia-parser.scm	/^(define-macro (ts:set-tok! s t) `(aset! ,s 0 ,t))$/;"	f
ts:space?	src/julia-parser.scm	/^(define (ts:space? s)           (aref s (if (ts:pbtok s) 4 2)))$/;"	f
tss	stdlib/Test/test/runtests.jl	/^tss = @testset "@testset\/for should return an array of testsets: $i" for i in 1:3$/;"	v
tss	stdlib/Test/test/runtests.jl	/^tss = @testset CustomTestSet foo=3 "custom testset $i" for i in 1:6$/;"	v
tss17462	stdlib/Test/test/runtests.jl	/^tss17462 = @testset for x in [1,2,3,4]$/;"	v
tstStringType	test/strings/basic.jl	/^struct tstStringType <: AbstractString$/;"	f
tstbit	base/gmp.jl	/^tstbit(a::BigInt, b) = ccall((:__gmpz_tstbit, :libgmp), Cint, (mpz_t, bitcnt_t), a, b) % Bool$/;"	f
tsym	src/flisp/flisp.h	/^    value_t tsym, Tsym, fsym, Fsym, booleansym, nullsym, evalsym, fnsym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
tt	src/jltypes.c	/^    jl_datatype_t *tt;$/;"	m	struct:_jl_typestack_t	typeref:typename:jl_datatype_t *	file:
ttt7049	test/core.jl	/^function ttt7049(;init::Maybe7049{Union{AbstractString,Tuple{Int,Char}}} = nothing)$/;"	f
tunnel_hosts_map	stdlib/Distributed/src/managers.jl	/^const tunnel_hosts_map = Dict{String, Semaphore}()$/;"	v
tup2val	test/subarray.jl	/^tup2val(::NTuple{N}) where {N} = Val(N)$/;"	f
tuple-to-arglist	src/julia-parser.scm	/^(define (tuple-to-arglist e)$/;"	f
tuple-to-assignments	src/julia-syntax.scm	/^(define (tuple-to-assignments lhss0 x)$/;"	f
tuple_full_length	src/subtype.c	/^static size_t tuple_full_length(jl_value_t *t)$/;"	f	typeref:typename:size_t	file:
tuple_morespecific	src/subtype.c	/^static int tuple_morespecific(jl_datatype_t *cdt, jl_datatype_t *pdt, int invariant, jl_typeenv_/;"	f	typeref:typename:int	file:
tuple_tail_elem	base/compiler/typeutils.jl	/^function tuple_tail_elem(@nospecialize(init), ct::Vector{Any})$/;"	f
tuple_tfunc	base/compiler/tfuncs.jl	/^function tuple_tfunc(atypes::Vector{Any})$/;"	f
tuple_type_cons	base/essentials.jl	/^function tuple_type_cons(::Type{S}, ::Type{T}) where T<:Tuple where S$/;"	f
tuple_type_cons	base/essentials.jl	/^tuple_type_cons(::Type, ::Type{Union{}}) = Union{}$/;"	f
tuple_type_head	base/essentials.jl	/^tuple_type_head(T::Type) = (@_pure_meta; fieldtype(T::Type{<:Tuple}, 1))$/;"	f
tuple_type_tail	base/essentials.jl	/^function tuple_type_tail(T::Type)$/;"	f
tupledispatch	test/core.jl	/^function tupledispatch(a::TupleParam{(1,:a)})$/;"	f
tuplehash_seed	base/tuple.jl	/^const tuplehash_seed = UInt === UInt64 ? 0x77cfa1eef01bca90 : 0xf01bca90$/;"	v
tuplemerge	base/compiler/typelimits.jl	/^function tuplemerge(a::DataType, b::DataType)$/;"	f
tuplevec_20847	test/compiler/inference.jl	/^tuplevec_20847 = Tuple{Float64, Float64}[(0.0,0.0), (1.0,0.0)]$/;"	v
tvar	base/docs/Docs.jl	/^tvar(s::Symbol) = :($s <: Any)$/;"	f
tvar	base/docs/Docs.jl	/^tvar(x::Expr)   = x$/;"	f
tvar	src/jltypes.c	/^static jl_tvar_t *tvar(const char *name)$/;"	f	typeref:typename:jl_tvar_t *	file:
tvar_callback	src/subtype.c	/^typedef int (*tvar_callback)(void*, int8_t, jl_stenv_t *, int);$/;"	t	typeref:typename:int (*)(void *,int8_t,jl_stenv_t *,int)	file:
tvar_extent	base/compiler/typeutils.jl	/^function tvar_extent(@nospecialize t)$/;"	f
twiceprecision	base/twiceprecision.jl	/^function twiceprecision(val::T, nb::Integer) where {T<:IEEEFloat}$/;"	f
twiceprecision	base/twiceprecision.jl	/^function twiceprecision(val::TwicePrecision{T}, nb::Integer) where {T<:IEEEFloat}$/;"	f
two_breakpoint	test/compiler/codegen.jl	/^function two_breakpoint(a::Float64)$/;"	f
typ	src/codegen.cpp	/^    jl_value_t *typ; \/\/ the original type of V, never NULL$/;"	m	struct:jl_cgval_t	typeref:typename:jl_value_t *	file:
typ_for_val	base/compiler/ssair/slot2ssa.jl	/^function typ_for_val(@nospecialize(x), ci::CodeInfo, sptypes::Vector{Any}, idx::Int, slottypes::/;"	f
type	base/reflection.jl	/^struct type with no fields.$/;"	f
type	src/abi_aarch64.cpp	/^    Type *type;$/;"	m	struct:ABI_AArch64Layout::ElementType	typeref:typename:Type *	file:
type	src/flisp/flisp.h	/^    fltype_t *type;$/;"	m	struct:__anonb455601d0408	typeref:typename:fltype_t *
type	src/flisp/flisp.h	/^    fltype_t *type;$/;"	m	struct:__anonb455601d0608	typeref:typename:fltype_t *
type	src/flisp/flisp.h	/^    struct _fltype_t *type;$/;"	m	struct:__anonb455601d0208	typeref:struct:_fltype_t *
type	src/flisp/flisp.h	/^    struct _fltype_t *type;$/;"	m	struct:_symbol_t	typeref:struct:_fltype_t *
type	src/flisp/flisp.h	/^    value_t type;$/;"	m	struct:_fltype_t	typeref:typename:value_t
type	src/julia.h	/^        jl_value_t *type; \/\/ 16-byte aligned$/;"	m	union:_jl_taggedvalue_t::__anon055fe427010a	typeref:typename:jl_value_t *
type	src/julia.h	/^    uv_handle_type type;$/;"	m	struct:__anon055fe4271708	typeref:typename:uv_handle_type
type	src/julia_internal.h	/^    jl_value_t *type; \/\/ type to match$/;"	m	struct:typemap_intersection_env	typeref:typename:jl_value_t *
type-for-closure	src/julia-syntax.scm	/^(define (type-for-closure name fields super)$/;"	f
type-for-closure-parameterized	src/julia-syntax.scm	/^(define (type-for-closure-parameterized name P names fields types super)$/;"	f
typeA	test/precompile.jl	/^              struct typeA end$/;"	f
typeB	test/precompile.jl	/^              struct typeB$/;"	f
type_1	test/core.jl	/^mutable struct type_1{T <: Number} <: Number$/;"	f
type_1	test/core.jl	/^type_1(c::T) where {T <: Number} = type_1{T}([c])$/;"	f
type_1	test/core.jl	/^type_1(x::Vector{T}) where {T <: Number} = type_1{T}(x)$/;"	f
type_2	test/core.jl	/^mutable struct type_2{T <: Integer, N} <: Number$/;"	f
type_annotate!	base/compiler/typeinfer.jl	/^function type_annotate!(sv::InferenceState)$/;"	f
type_close_enough	stdlib/InteractiveUtils/src/InteractiveUtils.jl	/^function type_close_enough(@nospecialize(x), @nospecialize(t))$/;"	f
type_error	src/flisp/flisp.c	/^void type_error(fl_context_t *fl_ctx, const char *fname, const char *expected, value_t got)$/;"	f	typeref:typename:void
type_in_worklist	src/dump.c	/^static int type_in_worklist(jl_datatype_t *dt) JL_NOTSAFEPOINT$/;"	f	typeref:typename:int	file:
type_is_ghost	src/codegen.cpp	/^static bool type_is_ghost(Type *ty)$/;"	f	typeref:typename:bool	file:
type_lift_pass!	base/compiler/ssair/passes.jl	/^function type_lift_pass!(ir::IRCode)$/;"	f
type_more_complex	base/compiler/typelimits.jl	/^function type_more_complex(@nospecialize(t), @nospecialize(c), sources::SimpleVector, depth::Int/;"	f
type_morespecific_	src/subtype.c	/^static int type_morespecific_(jl_value_t *a, jl_value_t *b, int invariant, jl_typeenv_t *env)$/;"	f	typeref:typename:int	file:
type_object_id_	src/builtins.c	/^static uintptr_t type_object_id_(jl_value_t *v, jl_varidx_t *env) JL_NOTSAFEPOINT$/;"	f	typeref:typename:uintptr_t	file:
type_parameter_recursively_external	src/dump.c	/^static int type_parameter_recursively_external(jl_value_t *p0) JL_NOTSAFEPOINT$/;"	f	typeref:typename:int	file:
type_recursively_external	src/dump.c	/^static int type_recursively_external(jl_datatype_t *dt) JL_NOTSAFEPOINT$/;"	f	typeref:typename:int	file:
type_type	test/clangsa/MissingRoots.c	/^int type_type(jl_value_t *v) {$/;"	f	typeref:typename:int
typeargs	test/compiler/inference.jl	/^typeargs = (Type{Int},)$/;"	v
typeargs	test/compiler/inference.jl	/^typeargs = (Type{Int},Type{Int},Type{Int},Type{Int},Type{Int},Type{Int})$/;"	v
typeassert_input	src/ccall.cpp	/^static void typeassert_input(jl_codectx_t &ctx, const jl_cgval_t &jvinfo, jl_value_t *jlto, jl_u/;"	f	typeref:typename:void	file:
typeassert_instead_of_decl	test/core.jl	/^function typeassert_instead_of_decl()$/;"	f
typeassert_tfunc	base/compiler/tfuncs.jl	/^function typeassert_tfunc(@nospecialize(v), @nospecialize(t))$/;"	f
typebound_nothrow	base/compiler/tfuncs.jl	/^function typebound_nothrow(b)$/;"	f
typecache_lock	src/threading.c	/^jl_mutex_t typecache_lock;$/;"	v	typeref:typename:jl_mutex_t
typed_code	test/compiler/inference.jl	/^typed_code = Core.Compiler.code_typed(f26826, (Float64,))[1].first$/;"	v
typed_hcat	base/abstractarray.jl	/^typed_hcat(::Type{T}) where {T} = Vector{T}()$/;"	f
typed_hcat	base/abstractarray.jl	/^typed_hcat(::Type{T}, A::AbstractVecOrMat...) where {T} = _typed_hcat(T, A)$/;"	f
typed_hcat	base/abstractarray.jl	/^typed_hcat(::Type{T}, X::Number...) where {T} = hvcat_fill(Matrix{T}(undef, 1,length(X)), X)$/;"	f
typed_hcat	base/abstractarray.jl	/^typed_hcat(T::Type, A::AbstractArray) = cat_t(T, A; dims=Val(2))$/;"	f
typed_hcat	base/abstractarray.jl	/^typed_hcat(T::Type, A::AbstractArray, B::AbstractArray) = cat_t(T, A, B; dims=Val(2))$/;"	f
typed_hcat	base/abstractarray.jl	/^typed_hcat(T::Type, A::AbstractArray...) = cat_t(T, A...; dims=Val(2))$/;"	f
typed_hcat	base/abstractarray.jl	/^typed_hcat(T::Type, X...) = cat_t(T, X...; dims=Val(2))$/;"	f
typed_hcat	stdlib/LinearAlgebra/src/adjtrans.jl	/^typed_hcat(::Type{T}, avs::Union{Number,AdjointAbsVec}...) where {T} = adjoint(typed_vcat(T, map/;"	f
typed_hcat	stdlib/LinearAlgebra/src/adjtrans.jl	/^typed_hcat(::Type{T}, tvs::Union{Number,TransposeAbsVec}...) where {T} = transpose(typed_vcat(T,/;"	f
typed_hvcat	base/abstractarray.jl	/^function typed_hvcat(::Type{T}, rows::Tuple{Vararg{Int}}, as...) where T$/;"	f
typed_hvcat	base/abstractarray.jl	/^function typed_hvcat(::Type{T}, rows::Tuple{Vararg{Int}}, as::AbstractVecOrMat...) where T$/;"	f
typed_hvcat	base/abstractarray.jl	/^function typed_hvcat(::Type{T}, rows::Tuple{Vararg{Int}}, xs::Number...) where T$/;"	f
typed_hvcat	base/abstractarray.jl	/^typed_hvcat(::Type{T}, rows::Tuple{Vararg{Int}}) where {T} = Vector{T}()$/;"	f
typed_load	src/cgutils.cpp	/^static jl_cgval_t typed_load(jl_codectx_t &ctx, Value *ptr, Value *idx_0based, jl_value_t *jltyp/;"	f	typeref:typename:jl_cgval_t	file:
typed_store	src/cgutils.cpp	/^static void typed_store(jl_codectx_t &ctx,$/;"	f	typeref:typename:void	file:
typed_vcat	base/abstractarray.jl	/^typed_vcat(::Type{T}) where {T} = Vector{T}()$/;"	f
typed_vcat	base/abstractarray.jl	/^typed_vcat(::Type{T}, A::AbstractVecOrMat...) where {T} = _typed_vcat(T, A)$/;"	f
typed_vcat	base/abstractarray.jl	/^typed_vcat(::Type{T}, X::Number...) where {T} = hvcat_fill(Vector{T}(undef, length(X)), X)$/;"	f
typed_vcat	base/abstractarray.jl	/^typed_vcat(T::Type, A::AbstractArray) = cat_t(T, A; dims=Val(1))$/;"	f
typed_vcat	base/abstractarray.jl	/^typed_vcat(T::Type, A::AbstractArray, B::AbstractArray) = cat_t(T, A, B; dims=Val(1))$/;"	f
typed_vcat	base/abstractarray.jl	/^typed_vcat(T::Type, A::AbstractArray...) = cat_t(T, A...; dims=Val(1))$/;"	f
typed_vcat	base/abstractarray.jl	/^typed_vcat(T::Type, X...) = cat_t(T, X...; dims=Val(1))$/;"	f
typedef-expr-name	src/macroexpand.scm	/^(define (typedef-expr-name e)$/;"	f
typedef-expr-tvars	src/macroexpand.scm	/^(define (typedef-expr-tvars e)$/;"	f
typeenv_has	src/jltypes.c	/^static int typeenv_has(jl_typeenv_t *env, jl_tvar_t *v) JL_NOTSAFEPOINT$/;"	f	typeref:typename:int	file:
typeinf	base/compiler/typeinfer.jl	/^function typeinf(frame::InferenceState)$/;"	f
typeinf	base/compiler/typeinfer.jl	/^function typeinf(result::InferenceResult, cached::Bool, params::Params)$/;"	f
typeinf_code	base/compiler/typeinfer.jl	/^function typeinf_code(method::Method, @nospecialize(atypes), sparams::SimpleVector, run_optimize/;"	f
typeinf_edge	base/compiler/typeinfer.jl	/^function typeinf_edge(method::Method, @nospecialize(atypes), sparams::SimpleVector, caller::Infe/;"	f
typeinf_ext	base/compiler/typeinfer.jl	/^@timeit function typeinf_ext(linfo::MethodInstance, world::UInt)$/;"	f
typeinf_ext	base/compiler/typeinfer.jl	/^function typeinf_ext(mi::MethodInstance, params::Params)$/;"	f
typeinf_local	base/compiler/abstractinterpretation.jl	/^function typeinf_local(frame::InferenceState)$/;"	f
typeinf_lock	src/gf.c	/^#define typeinf_lock /;"	d	file:
typeinf_nocycle	base/compiler/abstractinterpretation.jl	/^function typeinf_nocycle(frame::InferenceState)$/;"	f
typeinf_type	base/compiler/typeinfer.jl	/^function typeinf_type(method::Method, @nospecialize(atypes), sparams::SimpleVector, params::Para/;"	f
typeinfo_eltype	base/arrayshow.jl	/^typeinfo_eltype(typeinfo) = nothing # element type not precisely known$/;"	f
typeinfo_eltype	base/arrayshow.jl	/^typeinfo_eltype(typeinfo::Type{<:AbstractArray{T}}) where {T} = eltype(typeinfo)$/;"	f
typeinfo_eltype	base/arrayshow.jl	/^typeinfo_eltype(typeinfo::Type{<:AbstractDict{K,V}}) where {K,V} = eltype(typeinfo)$/;"	f
typeinfo_eltype	base/arrayshow.jl	/^typeinfo_eltype(typeinfo::Type{<:AbstractSet{T}}) where {T} = eltype(typeinfo)$/;"	f
typeinfo_prefix	base/arrayshow.jl	/^function typeinfo_prefix(io::IO, X)$/;"	f
typeintersect	base/reflection.jl	/^typeintersect(@nospecialize(a),@nospecialize(b)) = (@_pure_meta; ccall(:jl_type_intersection, An/;"	f
typejoin	base/promotion.jl	/^function typejoin(@nospecialize(a), @nospecialize(b))$/;"	f
typejoin	base/promotion.jl	/^typejoin() = (@_pure_meta; Bottom)$/;"	f
typejoin	base/promotion.jl	/^typejoin(@nospecialize(t)) = (@_pure_meta; t)$/;"	f
typejoin	base/promotion.jl	/^typejoin(@nospecialize(t), ts...) = (@_pure_meta; typejoin(t, typejoin(ts...)))$/;"	f
typekey_compare	src/jltypes.c	/^static int typekey_compare(jl_datatype_t *tt, jl_value_t **key, size_t n) JL_NOTSAFEPOINT$/;"	f	typeref:typename:int	file:
typekey_eq	src/jltypes.c	/^static int typekey_eq(jl_datatype_t *tt, jl_value_t **key, size_t n)$/;"	f	typeref:typename:int	file:
typemap_intersection_env	src/julia_internal.h	/^struct typemap_intersection_env {$/;"	s
typemap_search	src/gf.c	/^static int typemap_search(jl_typemap_entry_t *entry, void *closure)$/;"	f	typeref:typename:int	file:
typemax	base/bool.jl	/^typemax(::Type{Bool}) = true$/;"	f
typemax	base/char.jl	/^typemax(::Type{Char}) = reinterpret(Char, typemax(UInt32))$/;"	f
typemax	base/float.jl	/^    typemax(::Type{Float16}) = $(Inf16)$/;"	f
typemax	base/float.jl	/^    typemax(::Type{Float32}) = $(Inf32)$/;"	f
typemax	base/float.jl	/^    typemax(::Type{Float64}) = $(Inf64)$/;"	f
typemax	base/float.jl	/^    typemax(x::T) where {T<:Real} = typemax(T)$/;"	f
typemax	base/int.jl	/^@eval typemax(::Type{Int128} ) = $(bitcast(Int128, typemax(UInt128) >> 1))$/;"	f
typemax	base/int.jl	/^@eval typemax(::Type{UInt128}) = $(bitcast(UInt128, convert(Int128, -1)))$/;"	f
typemax	base/int.jl	/^function typemax end$/;"	f
typemax	base/int.jl	/^typemax(::Type{Int16 }) = Int16(32767)$/;"	f
typemax	base/int.jl	/^typemax(::Type{Int32 }) = Int32(2147483647)$/;"	f
typemax	base/int.jl	/^typemax(::Type{Int64 }) = 9223372036854775807$/;"	f
typemax	base/int.jl	/^typemax(::Type{Int8  }) = Int8(127)$/;"	f
typemax	base/int.jl	/^typemax(::Type{UInt16}) = UInt16(65535)$/;"	f
typemax	base/int.jl	/^typemax(::Type{UInt32}) = UInt32(4294967295)$/;"	f
typemax	base/int.jl	/^typemax(::Type{UInt64}) = 0xffffffffffffffff$/;"	f
typemax	base/int.jl	/^typemax(::Type{UInt8 }) = UInt8(255)$/;"	f
typemax	base/mpfr.jl	/^@eval typemax(::Type{BigFloat}) = $(BigFloat(Inf))$/;"	f
typemax	base/rational.jl	/^typemax(::Type{Rational{T}}) where {T<:Integer} = one(T)\/\/zero(T)$/;"	f
typemax	base/version.jl	/^function typemax(::Type{VersionNumber})$/;"	f
typemax_UInt	base/boot.jl	/^const typemax_UInt = ccall(:jl_typemax_uint, Any, (Any,), UInt)$/;"	v
typemin	base/bool.jl	/^typemin(::Type{Bool}) = false$/;"	f
typemin	base/char.jl	/^typemin(::Type{Char}) = reinterpret(Char, typemin(UInt32))$/;"	f
typemin	base/float.jl	/^    typemin(::Type{Float16}) = $(bitcast(Float16, 0xfc00))$/;"	f
typemin	base/float.jl	/^    typemin(::Type{Float32}) = $(-Inf32)$/;"	f
typemin	base/float.jl	/^    typemin(::Type{Float64}) = $(-Inf64)$/;"	f
typemin	base/float.jl	/^    typemin(x::T) where {T<:Real} = typemin(T)$/;"	f
typemin	base/int.jl	/^@eval typemin(::Type{Int128} ) = $(convert(Int128, 1) << 127)$/;"	f
typemin	base/int.jl	/^@eval typemin(::Type{UInt128}) = $(convert(UInt128, 0))$/;"	f
typemin	base/int.jl	/^function typemin end$/;"	f
typemin	base/int.jl	/^typemin(::Type{Int16 }) = Int16(-32768)$/;"	f
typemin	base/int.jl	/^typemin(::Type{Int32 }) = Int32(-2147483648)$/;"	f
typemin	base/int.jl	/^typemin(::Type{Int64 }) = -9223372036854775808$/;"	f
typemin	base/int.jl	/^typemin(::Type{Int8  }) = Int8(-128)$/;"	f
typemin	base/int.jl	/^typemin(::Type{UInt16}) = UInt16(0)$/;"	f
typemin	base/int.jl	/^typemin(::Type{UInt32}) = UInt32(0)$/;"	f
typemin	base/int.jl	/^typemin(::Type{UInt64}) = UInt64(0)$/;"	f
typemin	base/int.jl	/^typemin(::Type{UInt8 }) = UInt8(0)$/;"	f
typemin	base/mpfr.jl	/^@eval typemin(::Type{BigFloat}) = $(BigFloat(-Inf))$/;"	f
typemin	base/rational.jl	/^typemin(::Type{Rational{T}}) where {T<:Integer} = -one(T)\/\/zero(T)$/;"	f
typemin	base/strings/string.jl	/^typemin(::String) = typemin(String)$/;"	f
typemin	base/strings/string.jl	/^typemin(::Type{String}) = ""$/;"	f
typemin	base/version.jl	/^typemin(::Type{VersionNumber}) = v"0-"$/;"	f
typename	base/essentials.jl	/^function typename(a::Union)$/;"	f
typename	base/essentials.jl	/^typename(a) = error("typename does not apply to this type")$/;"	f
typename	base/essentials.jl	/^typename(a::DataType) = a.name$/;"	f
typename	base/essentials.jl	/^typename(union::UnionAll) = typename(union.body)$/;"	f
typename_static	base/compiler/tfuncs.jl	/^function typename_static(@nospecialize(t))$/;"	f
typeof_concrete_vararg	base/compiler/tfuncs.jl	/^function typeof_concrete_vararg(t::DataType)$/;"	f
typeof_func	src/llvm-alloc-opt.cpp	/^    Function *typeof_func;$/;"	m	struct:__anon0a1571000111::AllocOpt	typeref:typename:Function *	file:
typeof_func	src/llvm-pass-helpers.h	/^    llvm::Function *typeof_func;$/;"	m	struct:JuliaPassContext	typeref:typename:llvm::Function *
typeof_tfunc	base/compiler/tfuncs.jl	/^function typeof_tfunc(@nospecialize(t))$/;"	f
types	base/compiler/ssair/ir.jl	/^types(ir::Union{IRCode, IncrementalCompact}) = TypesView(ir)$/;"	f
types	src/julia.h	/^    jl_svec_t *types;$/;"	m	struct:_jl_datatype_t	typeref:typename:jl_svec_t *
types	test/hashing.jl	/^types = Any[$/;"	v
types	test/reflection.jl	/^types = (Float64, Int32, String)$/;"	v
types27268	test/syntax.jl	/^types27268 = (Int64,Int8)$/;"	v
typesof	base/errorshow.jl	/^typesof(args...) = Tuple{Any[ Core.Typeof(a) for a in args ]...}$/;"	f
typesubtract	base/compiler/typeutils.jl	/^function typesubtract(@nospecialize(a), @nospecialize(b))$/;"	f
typevar-expr-name	src/macroexpand.scm	/^(define (typevar-expr-name e) (car (analyze-typevar e)))$/;"	f
typevar-names	src/macroexpand.scm	/^(define (typevar-names lst)$/;"	f
typevar_nothrow	base/compiler/tfuncs.jl	/^function typevar_nothrow(n, lb, ub)$/;"	f
typevar_tfunc	base/compiler/tfuncs.jl	/^function typevar_tfunc(@nospecialize(n), @nospecialize(lb_arg), @nospecialize(ub_arg))$/;"	f
tzalloc	src/support/strptime.c	/^#define tzalloc(/;"	d	file:
tzfree	src/support/strptime.c	/^#define tzfree(/;"	d	file:
tzh_charcnt	src/support/tzfile.h	/^	char	tzh_charcnt[4];		\/* coded number of abbr. chars *\/$/;"	m	struct:tzhead	typeref:typename:char[4]
tzh_leapcnt	src/support/tzfile.h	/^	char	tzh_leapcnt[4];		\/* coded number of leap seconds *\/$/;"	m	struct:tzhead	typeref:typename:char[4]
tzh_magic	src/support/tzfile.h	/^	char	tzh_magic[4];		\/* TZ_MAGIC *\/$/;"	m	struct:tzhead	typeref:typename:char[4]
tzh_reserved	src/support/tzfile.h	/^	char	tzh_reserved[15];	\/* reserved; must be zero *\/$/;"	m	struct:tzhead	typeref:typename:char[15]
tzh_timecnt	src/support/tzfile.h	/^	char	tzh_timecnt[4];		\/* coded number of transition times *\/$/;"	m	struct:tzhead	typeref:typename:char[4]
tzh_ttisgmtcnt	src/support/tzfile.h	/^	char	tzh_ttisgmtcnt[4];	\/* coded number of trans. time flags *\/$/;"	m	struct:tzhead	typeref:typename:char[4]
tzh_ttisstdcnt	src/support/tzfile.h	/^	char	tzh_ttisstdcnt[4];	\/* coded number of trans. time flags *\/$/;"	m	struct:tzhead	typeref:typename:char[4]
tzh_typecnt	src/support/tzfile.h	/^	char	tzh_typecnt[4];		\/* coded number of local time types *\/$/;"	m	struct:tzhead	typeref:typename:char[4]
tzh_version	src/support/tzfile.h	/^	char	tzh_version[1];		\/* '\\0' or '2' or '3' as of 2013 *\/$/;"	m	struct:tzhead	typeref:typename:char[1]
tzhead	src/support/tzfile.h	/^struct tzhead {$/;"	s
tzrzf!	stdlib/LinearAlgebra/src/lapack.jl	/^        function tzrzf!(A::AbstractMatrix{$elty})$/;"	f
tϵsτcmδ_cmd	stdlib/REPL/test/replcompletions.jl	/^        macro tϵsτcmδ_cmd(s) end$/;"	f
tϵsτstρ_str	stdlib/REPL/test/replcompletions.jl	/^        macro tϵsτstρ_str(s) end$/;"	f
u	test/subarray.jl	/^u = (1,2:3)$/;"	v
u1	stdlib/UUIDs/test/runtests.jl	/^u1 = uuid1()$/;"	v
u4	stdlib/UUIDs/test/runtests.jl	/^u4 = uuid4()$/;"	v
u5	stdlib/UUIDs/test/runtests.jl	/^u5 = uuid5(u1, "julia")$/;"	v
u8_charlen	src/support/utf8.c	/^size_t u8_charlen(uint32_t ch)$/;"	f	typeref:typename:size_t
u8_charnum	src/support/utf8.c	/^size_t u8_charnum(const char *s, size_t offset)$/;"	f	typeref:typename:size_t
u8_dec	src/support/utf8.c	/^void u8_dec(const char *s, size_t *i)$/;"	f	typeref:typename:void
u8_escape	src/support/utf8.c	/^size_t u8_escape(char *buf, size_t sz, const char *src, size_t *pi, size_t end,$/;"	f	typeref:typename:size_t
u8_escape_wchar	src/support/utf8.c	/^int u8_escape_wchar(char *buf, size_t sz, uint32_t ch)$/;"	f	typeref:typename:int
u8_inc	src/support/utf8.c	/^void u8_inc(const char *s, size_t *i)$/;"	f	typeref:typename:void
u8_isvalid	src/support/utf8.c	/^int u8_isvalid(const char *str, size_t len)$/;"	f	typeref:typename:int
u8_memchr	src/support/utf8.c	/^char *u8_memchr(const char *s, uint32_t ch, size_t sz, size_t *charn)$/;"	f	typeref:typename:char *
u8_memrchr	src/support/utf8.c	/^char *u8_memrchr(const char *s, uint32_t ch, size_t sz)$/;"	f	typeref:typename:char *
u8_nextchar	src/support/utf8.c	/^uint32_t u8_nextchar(const char *s, size_t *i)$/;"	f	typeref:typename:uint32_t
u8_nextmemchar	src/support/utf8.c	/^uint32_t u8_nextmemchar(const char *s, size_t *i)$/;"	f	typeref:typename:uint32_t
u8_offset	src/support/utf8.c	/^size_t u8_offset(const char *s, size_t charnum)$/;"	f	typeref:typename:size_t
u8_printf	src/support/utf8.c	/^size_t u8_printf(const char *fmt, ...)$/;"	f	typeref:typename:size_t
u8_read_escape_sequence	src/support/utf8.c	/^size_t u8_read_escape_sequence(const char *str, size_t ssz, uint32_t *dest)$/;"	f	typeref:typename:size_t
u8_seqlen	src/support/utf8.c	/^size_t u8_seqlen(const char *s)$/;"	f	typeref:typename:size_t
u8_strwidth	src/support/utf8.c	/^size_t u8_strwidth(const char *s)$/;"	f	typeref:typename:size_t
u8_toucs	src/support/utf8.c	/^size_t u8_toucs(uint32_t *dest, size_t sz, const char *src, size_t srcsz)$/;"	f	typeref:typename:size_t
u8_toutf8	src/support/utf8.c	/^size_t u8_toutf8(char *dest, size_t sz, const uint32_t *src, size_t srcsz)$/;"	f	typeref:typename:size_t
u8_vprintf	src/support/utf8.c	/^size_t u8_vprintf(const char *fmt, va_list ap)$/;"	f	typeref:typename:size_t
u8_wc_toutf8	src/support/utf8.c	/^size_t u8_wc_toutf8(char *dest, uint32_t ch)$/;"	f	typeref:typename:size_t
u8str	test/strings/search.jl	/^u8str = "∀ ε > 0, ∃ δ > 0: |x-y| < δ ⇒ |f(x)-f(y)| < ε"$/;"	v
u8str	test/strings/types.jl	/^u8str = "∀ ε > 0, ∃ δ > 0: |x-y| < δ ⇒ |f(x)-f(y)| < ε"$/;"	v
u8str2	test/strings/types.jl	/^u8str2 = u8str^2$/;"	v
u8str2plain	test/strings/types.jl	/^u8str2plain = String(u8str2)$/;"	v
uT	src/debuginfo.cpp	/^    typedef typename std::make_unsigned<T>::type uT;$/;"	t	function:parse_leb128	typeref:typename:std::make_unsigned<T>::type	file:
uTYPEMAX	src/runtime_intrinsics.c	/^#define uTYPEMAX(/;"	d	file:
uTYPEMIN	src/runtime_intrinsics.c	/^#define uTYPEMIN(/;"	d	file:
u_char	src/support/strptime.c	/^typedef unsigned char u_char;$/;"	t	typeref:typename:unsigned char	file:
uabs	base/float.jl	/^uabs(x::BitSigned) = unsigned(abs(x))$/;"	f
uabs	base/float.jl	/^uabs(x::Integer) = abs(x)$/;"	f
uambig	test/reflection.jl	/^uambig(::Union{Float64,Nothing}) = 2$/;"	f
uambig	test/reflection.jl	/^uambig(::Union{Int,Nothing}) = 1$/;"	f
ub	src/gc.h	/^    int ub;$/;"	m	struct:__anoncf30557c1208	typeref:typename:int
ub	src/gc.h	/^    int ub;$/;"	m	struct:__anoncf30557c1308	typeref:typename:int
ub	src/gc.h	/^    int ub;$/;"	m	struct:__anoncf30557c1408	typeref:typename:int
ub	src/gc.h	/^    uintptr_t ub;$/;"	m	struct:__anoncf30557c0a08	typeref:typename:uintptr_t
ub	src/julia.h	/^    jl_value_t *ub;   \/\/ upper bound$/;"	m	struct:__anon055fe4270808	typeref:typename:jl_value_t *
ub	src/subtype.c	/^    jl_value_t *ub;$/;"	m	struct:jl_varbinding_t	typeref:typename:jl_value_t *	file:
ub	test/clangsa/MissingRoots.c	/^    jl_value_t *ub;$/;"	m	struct:_varbinding	typeref:typename:jl_value_t *	file:
ubody	src/subtype.c	/^    jl_value_t *ubody;$/;"	m	struct:subtype_unionall_env	typeref:typename:jl_value_t *	file:
uc_mcontext	src/julia_threads.h	/^    jl_jmp_buf uc_mcontext;$/;"	m	struct:__anonf8aecdb10108	typeref:typename:jl_jmp_buf
uc_mcontext	src/support/win32_ucontext.h	/^    jmp_buf uc_mcontext;$/;"	m	struct:__anon4cf1a00a0108	typeref:typename:jmp_buf
uc_stack	src/support/win32_ucontext.h	/^    } uc_stack;$/;"	m	struct:__anon4cf1a00a0108	typeref:struct:__anon4cf1a00a0108::stack_t
ud	src/runtime_intrinsics.c	/^    uint32_t ud;$/;"	m	union:__anonc5a5d9f6010a	typeref:typename:uint32_t	file:
ud	src/runtime_intrinsics.c	/^    uint64_t ud;$/;"	m	union:__anonc5a5d9f6020a	typeref:typename:uint64_t	file:
ui_sub	base/gmp.jl	/^ui_sub(a, b::BigInt) = ui_sub!(BigInt(), a, b)$/;"	f
ui_sub!	base/gmp.jl	/^ui_sub!(x::BigInt, a, b::BigInt) = (ccall((:__gmpz_ui_sub, :libgmp), Cvoid, (mpz_t, Culong, mpz_/;"	f
uid	src/julia.h	/^    uint32_t uid;$/;"	m	struct:_jl_datatype_t	typeref:typename:uint32_t
uint	base/ryu/utils.jl	/^uint(x::Float16) = Core.bitcast(UInt16, x)$/;"	f
uint	base/ryu/utils.jl	/^uint(x::Float32) = Core.bitcast(UInt32, x)$/;"	f
uint	base/ryu/utils.jl	/^uint(x::Float64) = Core.bitcast(UInt64, x)$/;"	f
uint	src/support/strptime.c	/^typedef unsigned int uint;$/;"	t	typeref:typename:unsigned int	file:
uint128_str	base/boot.jl	/^macro uint128_str end$/;"	f
uint128_str	base/int.jl	/^macro uint128_str(s)$/;"	f
uint16sym	src/flisp/flisp.h	/^    value_t int8sym, uint8sym, int16sym, uint16sym, int32sym, uint32sym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
uint16type	src/flisp/flisp.h	/^    fltype_t *int16type, *uint16type;$/;"	m	struct:_fl_context_t	typeref:typename:fltype_t **
uint2str	src/support/int2str.c	/^char *uint2str(char *dest, size_t len, uint64_t num, uint32_t base)$/;"	f	typeref:typename:char *
uint32sym	src/flisp/flisp.h	/^    value_t int8sym, uint8sym, int16sym, uint16sym, int32sym, uint32sym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
uint32type	src/flisp/flisp.h	/^    fltype_t *int32type, *uint32type;$/;"	m	struct:_fl_context_t	typeref:typename:fltype_t **
uint64sym	src/flisp/flisp.h	/^    value_t int64sym, uint64sym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
uint64type	src/flisp/flisp.h	/^    fltype_t *int64type, *uint64type;$/;"	m	struct:_fl_context_t	typeref:typename:fltype_t **
uint8sym	src/flisp/flisp.h	/^    value_t int8sym, uint8sym, int16sym, uint16sym, int32sym, uint32sym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
uint8type	src/flisp/flisp.h	/^    fltype_t *int8type, *uint8type;$/;"	m	struct:_fl_context_t	typeref:typename:fltype_t **
uint_cnvt	src/intrinsics.cpp	/^static Value *uint_cnvt(jl_codectx_t &ctx, Type *to, Value *x)$/;"	f	typeref:typename:Value *	file:
uint_default	stdlib/Random/src/Random.jl	/^        uint_default(::$UI) = $UI{uint_sup($UI)}()$/;"	f
uint_sup	stdlib/Random/src/Random.jl	/^uint_sup(::Type{<:Union{UInt10,UInt10Raw}}) = UInt16$/;"	f
uint_sup	stdlib/Random/src/Random.jl	/^uint_sup(::Type{<:Union{UInt104,UInt104Raw}}) = UInt128$/;"	f
uint_sup	stdlib/Random/src/Random.jl	/^uint_sup(::Type{<:Union{UInt23,UInt23Raw}}) = UInt32$/;"	f
uint_sup	stdlib/Random/src/Random.jl	/^uint_sup(::Type{<:Union{UInt2x52,UInt2x52Raw}}) = UInt128$/;"	f
uint_sup	stdlib/Random/src/Random.jl	/^uint_sup(::Type{<:Union{UInt52,UInt52Raw}}) = UInt64$/;"	f
uint_sup	stdlib/Random/src/generation.jl	/^uint_sup(::Type{<:Base.BitInteger32}) = UInt32$/;"	f
uint_sup	stdlib/Random/src/generation.jl	/^uint_sup(::Type{<:Union{Int128,UInt128}}) = UInt128$/;"	f
uint_sup	stdlib/Random/src/generation.jl	/^uint_sup(::Type{<:Union{Int64,UInt64}}) = UInt64$/;"	f
uint_t	base/grisu/float.jl	/^uint_t(d::Float16) = reinterpret(UInt16,d)$/;"	f
uint_t	base/grisu/float.jl	/^uint_t(d::Float32) = reinterpret(UInt32,d)$/;"	f
uint_t	base/grisu/float.jl	/^uint_t(d::Float64) = reinterpret(UInt64,d)$/;"	f
uint_t	src/support/dtypes.h	/^typedef uint32_t uint_t;$/;"	t	typeref:typename:uint32_t
uint_t	src/support/dtypes.h	/^typedef uint64_t uint_t;  \/\/ preferred int type on platform$/;"	t	typeref:typename:uint64_t
uinttype	base/float.jl	/^uinttype(::Type{Float16}) = UInt16$/;"	f
uinttype	base/float.jl	/^uinttype(::Type{Float32}) = UInt32$/;"	f
uinttype	base/float.jl	/^uinttype(::Type{Float64}) = UInt64$/;"	f
uintval	src/flisp/flisp.h	/^#define uintval(/;"	d
umf_ctrl	stdlib/SuiteSparse/src/umfpack.jl	/^const umf_ctrl = Vector{Float64}(undef, UMFPACK_CONTROL)$/;"	v
umf_extract	stdlib/SuiteSparse/src/umfpack.jl	/^        function umf_extract(lu::UmfpackLU{ComplexF64,$itype})$/;"	f
umf_extract	stdlib/SuiteSparse/src/umfpack.jl	/^        function umf_extract(lu::UmfpackLU{Float64,$itype})$/;"	f
umf_info	stdlib/SuiteSparse/src/umfpack.jl	/^const umf_info = Vector{Float64}(undef, UMFPACK_INFO)$/;"	v
umf_lunz	stdlib/SuiteSparse/src/umfpack.jl	/^        function umf_lunz(lu::UmfpackLU{ComplexF64,$itype})$/;"	f
umf_lunz	stdlib/SuiteSparse/src/umfpack.jl	/^        function umf_lunz(lu::UmfpackLU{Float64,$itype})$/;"	f
umf_nm	stdlib/SuiteSparse/src/umfpack.jl	/^umf_nm(nm,Tv,Ti) = "umfpack_" * (Tv == :Float64 ? "d" : "z") * (Ti == :Int64 ? "l_" : "i_") * nm$/;"	f
umferror	stdlib/SuiteSparse/src/umfpack.jl	/^function umferror(status::Integer)$/;"	f
umfpack_free_numeric	stdlib/SuiteSparse/src/umfpack.jl	/^        function umfpack_free_numeric(lu::UmfpackLU{$Tv,$Ti})$/;"	f
umfpack_free_symbolic	stdlib/SuiteSparse/src/umfpack.jl	/^        function umfpack_free_symbolic(lu::UmfpackLU{$Tv,$Ti})$/;"	f
umfpack_numeric!	stdlib/SuiteSparse/src/umfpack.jl	/^        function umfpack_numeric!(U::UmfpackLU{ComplexF64,$itype})$/;"	f
umfpack_numeric!	stdlib/SuiteSparse/src/umfpack.jl	/^        function umfpack_numeric!(U::UmfpackLU{Float64,$itype})$/;"	f
umfpack_report_numeric	stdlib/SuiteSparse/src/umfpack.jl	/^function umfpack_report_numeric(lu::UmfpackLU, level::Real)$/;"	f
umfpack_report_numeric	stdlib/SuiteSparse/src/umfpack.jl	/^function umfpack_report_numeric(num::Ptr{Cvoid}, level::Real)$/;"	f
umfpack_report_numeric	stdlib/SuiteSparse/src/umfpack.jl	/^umfpack_report_numeric(lu::UmfpackLU) = umfpack_report_numeric(lu,4.)$/;"	f
umfpack_report_numeric	stdlib/SuiteSparse/src/umfpack.jl	/^umfpack_report_numeric(num::Ptr{Cvoid}) = umfpack_report_numeric(num, 4.)$/;"	f
umfpack_report_symbolic	stdlib/SuiteSparse/src/umfpack.jl	/^function umfpack_report_symbolic(lu::UmfpackLU, level::Real)$/;"	f
umfpack_report_symbolic	stdlib/SuiteSparse/src/umfpack.jl	/^function umfpack_report_symbolic(symb::Ptr{Cvoid}, level::Real)$/;"	f
umfpack_report_symbolic	stdlib/SuiteSparse/src/umfpack.jl	/^umfpack_report_symbolic(lu::UmfpackLU) = umfpack_report_symbolic(lu.symbolic,4.)$/;"	f
umfpack_report_symbolic	stdlib/SuiteSparse/src/umfpack.jl	/^umfpack_report_symbolic(symb::Ptr{Cvoid}) = umfpack_report_symbolic(symb, 4.)$/;"	f
umfpack_symbolic!	stdlib/SuiteSparse/src/umfpack.jl	/^        function umfpack_symbolic!(U::UmfpackLU{ComplexF64,$itype})$/;"	f
umfpack_symbolic!	stdlib/SuiteSparse/src/umfpack.jl	/^        function umfpack_symbolic!(U::UmfpackLU{Float64,$itype})$/;"	f
umul256	base/ryu/utils.jl	/^@inline function umul256(a, bHi, bLo)$/;"	f
umul256_hi	base/ryu/utils.jl	/^@inline umul256_hi(a, bHi, bLo) = umul256(a, bHi, bLo)[2]$/;"	f
un_fintrinsic	src/runtime_intrinsics.c	/^#define un_fintrinsic(/;"	d	file:
un_fintrinsic_ctype	src/runtime_intrinsics.c	/^#define un_fintrinsic_ctype(/;"	d	file:
un_fintrinsic_withtype	src/runtime_intrinsics.c	/^#define un_fintrinsic_withtype(/;"	d	file:
un_iintrinsic	src/runtime_intrinsics.c	/^#define un_iintrinsic(/;"	d	file:
un_iintrinsic_ctype	src/runtime_intrinsics.c	/^#define un_iintrinsic_ctype(/;"	d	file:
un_iintrinsic_fast	src/runtime_intrinsics.c	/^#define un_iintrinsic_fast(/;"	d	file:
un_iintrinsic_slow	src/runtime_intrinsics.c	/^#define un_iintrinsic_slow(/;"	d	file:
unalias	base/abstractarray.jl	/^unalias(dest, A) = A$/;"	f
unalias	base/abstractarray.jl	/^unalias(dest, A::AbstractArray) = mightalias(dest, A) ? unaliascopy(A) : A$/;"	f
unalias	base/abstractarray.jl	/^unalias(dest, A::AbstractRange) = A$/;"	f
unalias_unionall	src/subtype.c	/^static jl_unionall_t *unalias_unionall(jl_unionall_t *u, jl_stenv_t *e)$/;"	f	typeref:typename:jl_unionall_t *	file:
unaliascopy	base/abstractarray.jl	/^unaliascopy(A) = A$/;"	f
unaliascopy	base/abstractarray.jl	/^unaliascopy(A::AbstractArray)::typeof(A) = (@_noinline_meta; _unaliascopy(A, copy(A)))$/;"	f
unaliascopy	base/abstractarray.jl	/^unaliascopy(A::Array) = copy(A)$/;"	f
unaliascopy	base/reinterpretarray.jl	/^unaliascopy(a::ReinterpretArray{T}) where {T} = reinterpret(T, unaliascopy(a.parent))$/;"	f
unaliascopy	base/reshapedarray.jl	/^unaliascopy(A::ReshapedArray) = typeof(A)(unaliascopy(A.parent), A.dims, A.mi)$/;"	f
unaliascopy	base/subarray.jl	/^function unaliascopy(V::SubArray{T,N,A,I,LD}) where {T,N,A<:Array,I<:Tuple{Vararg{Union{Real,Abs/;"	f
unaliascopy	base/subarray.jl	/^unaliascopy(A::SubArray) = typeof(A)(unaliascopy(A.parent), map(unaliascopy, A.indices), A.offse/;"	f
unary-and-binary-op?	src/julia-parser.scm	/^(define unary-and-binary-op? (Set unary-and-binary-ops))$/;"	f
unary-and-binary-ops	src/julia-parser.scm	/^(define unary-and-binary-ops '(+ - $ & ~ ⋆ |.+| |.-| |.⋆|))$/;"	f
unary-op?	src/julia-parser.scm	/^(define unary-op? (Set unary-ops))$/;"	f
unary-ops	src/julia-parser.scm	/^(define unary-ops (append! '(|<:| |>:|)$/;"	f
unary_ops_tests	stdlib/LinearAlgebra/test/cholesky.jl	/^function unary_ops_tests(a, ca, tol; n=size(a, 1))$/;"	f
unarymap_nz2z_z2z	stdlib/SparseArrays/src/sparsevector.jl	/^macro unarymap_nz2z_z2z(op, TF)$/;"	f
unarymap_z2nz	stdlib/SparseArrays/src/sparsevector.jl	/^macro unarymap_z2nz(op, TF)$/;"	f
unbias_cong	src/julia_internal.h	/^STATIC_INLINE void unbias_cong(uint64_t max, uint64_t *unbias)$/;"	f	typeref:typename:STATIC_INLINE void
unblock	base/docs/Docs.jl	/^function unblock(@nospecialize ex)$/;"	f
unboxedunions	test/core.jl	/^const unboxedunions = [Union{Int8, Nothing},$/;"	v
uncalled	test/syntax.jl	/^uncalled(x) = @test false$/;"	f
unchecked_aliasing_permute!	stdlib/SparseArrays/src/sparsematrix.jl	/^function unchecked_aliasing_permute!(A::AbstractSparseMatrixCSC{Tv,Ti},$/;"	f
unchecked_bool_convert	base/multidimensional.jl	/^@inline unchecked_bool_convert(x::Real) = x == 1$/;"	f
unchecked_noalias_permute!	stdlib/SparseArrays/src/sparsematrix.jl	/^function unchecked_noalias_permute!(X::AbstractSparseMatrixCSC{Tv,Ti},$/;"	f
uncolon	base/multidimensional.jl	/^uncolon(inds::Tuple,      I::Tuple{Colon, Vararg{Any}}) = Slice(inds[1])$/;"	f
uncolon	base/multidimensional.jl	/^uncolon(inds::Tuple{},    I::Tuple{Colon, Vararg{Any}}) = Slice(OneTo(1))$/;"	f
uncompressed_ast	base/reflection.jl	/^uncompressed_ast(m::Method) = isdefined(m, :source) ? _uncompressed_ast(m, m.source) :$/;"	f
unconstrain_vararg_length	base/essentials.jl	/^function unconstrain_vararg_length(@nospecialize(va))$/;"	f
uncurly	base/docs/Docs.jl	/^uncurly(@nospecialize ex) = isexpr(ex, :curly) ? ex.args[1] : ex$/;"	f
undeclared_ceil	test/llvmcall.jl	/^function undeclared_ceil(x::Float64)$/;"	f
undef	base/boot.jl	/^const undef = UndefInitializer()$/;"	v
undef_ref_alignment	base/arrayshow.jl	/^const undef_ref_alignment = (3,3)$/;"	v
undef_ref_str	base/show.jl	/^const undef_ref_str = "#undef"$/;"	v
undef_token	base/compiler/ssair/slot2ssa.jl	/^const undef_token = UndefToken()$/;"	v
undef_var_error_ifnot	src/codegen.cpp	/^static void undef_var_error_ifnot(jl_codectx_t &ctx, Value *ok, jl_sym_t *name)$/;"	f	typeref:typename:void	file:
undefined_x16090	test/core.jl	/^undefined_x16090 = (Int,)$/;"	v
underscore_bold	stdlib/Markdown/src/Common/inline.jl	/^function underscore_bold(stream::IO, md::MD)$/;"	f
underscore_italic	stdlib/Markdown/src/Common/inline.jl	/^function underscore_italic(stream::IO, md::MD)$/;"	f
undocumented	test/docs.jl	/^undocumented() = 1$/;"	f
undocumented	test/docs.jl	/^undocumented(x) = 2$/;"	f
undocumented	test/docs.jl	/^undocumented(x,y) = 3$/;"	f
undot	base/broadcast.jl	/^function undot(x::Expr)$/;"	f
undot	base/broadcast.jl	/^undot(x) = x$/;"	f
undot	test/syntax.jl	/^    undot(op) = Symbol(string(op)[2:end])$/;"	f
undot-name	src/ast.scm	/^(define (undot-name e)$/;"	f
undotop	src/ast.scm	/^(define (undotop op)$/;"	f
unescape	base/boot.jl	/^const unescape = Symbol("hygienic-scope")$/;"	v
unescape	src/macroexpand.scm	/^(define (unescape e)$/;"	f
unescape-string	src/julia-parser.scm	/^(define (unescape-string s)$/;"	f
unescape_string	base/strings/io.jl	/^function unescape_string(io::IO, s::AbstractString, keep = ())$/;"	f
unescape_string	base/strings/io.jl	/^unescape_string(s::AbstractString, keep = ()) =$/;"	f
unfiltered_stacktrace	test/stacktraces.jl	/^    unfiltered_stacktrace() = stacktrace()$/;"	f
uni_ops	base/show.jl	/^const uni_ops = Set{Symbol}([:(+), :(-), :(!), :(¬), :(~), :(<:), :(>:), :(√), :(∛), :(∜)/;"	v
uni_syms	base/show.jl	/^const uni_syms = Set{Symbol}([:(::), :(<:), :(>:)])$/;"	v
uniform	stdlib/Random/src/Random.jl	/^uniform(::Type{T}) where {T} = UniformT{T}()$/;"	f
unindent	base/strings/io.jl	/^function unindent(str::AbstractString, indent::Int; tabwidth=8)$/;"	f
uninferrable_function	stdlib/Test/test/runtests.jl	/^uninferrable_function(i) = (1, "1")[i]$/;"	f
uninferrable_kwtest	stdlib/Test/test/runtests.jl	/^uninferrable_kwtest(x; y=1) = 2x+y$/;"	f
uninferrable_small_union	stdlib/Test/test/runtests.jl	/^uninferrable_small_union(i) = (1, nothing)[i]$/;"	f
uninferred	src/julia.h	/^    jl_value_t *uninferred; \/\/ cached uncompressed code, for generated functions, top-level th/;"	m	struct:_jl_method_instance_t	typeref:typename:jl_value_t *
uninstall	contrib/windows/build-installer.nsi	/^Section "uninstall"$/;"	s
uninstall	deps/Makefile	/^uninstall: $(addprefix uninstall-, $(DEP_LIBS_STAGED))$/;"	t
uninstall	deps/srccache/patchelf-0.9/Makefile.in	/^uninstall: uninstall-recursive$/;"	t
uninstall	deps/srccache/patchelf-0.9/src/Makefile.in	/^uninstall: uninstall-am$/;"	t
uninstall	deps/srccache/patchelf-0.9/tests/Makefile.in	/^uninstall: uninstall-am$/;"	t
uninstall-am	deps/srccache/patchelf-0.9/Makefile.in	/^uninstall-am: uninstall-docDATA uninstall-man$/;"	t
uninstall-am	deps/srccache/patchelf-0.9/src/Makefile.in	/^uninstall-am: uninstall-binPROGRAMS$/;"	t
uninstall-am	deps/srccache/patchelf-0.9/tests/Makefile.in	/^uninstall-am:$/;"	t
uninstall-binPROGRAMS	deps/srccache/patchelf-0.9/src/Makefile.in	/^uninstall-binPROGRAMS:$/;"	t
uninstall-docDATA	deps/srccache/patchelf-0.9/Makefile.in	/^uninstall-docDATA:$/;"	t
uninstall-man	deps/srccache/patchelf-0.9/Makefile.in	/^uninstall-man: uninstall-man1$/;"	t
uninstall-man1	deps/srccache/patchelf-0.9/Makefile.in	/^uninstall-man1:$/;"	t
uninstall-suitesparse	deps/suitesparse.mk	/^uninstall-suitesparse:$/;"	t
union	base/abstractset.jl	/^function union end$/;"	f
union	base/abstractset.jl	/^union(s, sets...) = union!(emptymutable(s, promote_eltype(s, sets...)), s, sets...)$/;"	f
union	base/abstractset.jl	/^union(s::AbstractSet) = copy(s)$/;"	f
union	base/bitset.jl	/^union(s::BitSet, sets...) = union!(copy(s), sets...)$/;"	f
union!	base/abstractset.jl	/^function union!(s::AbstractSet, sets...)$/;"	f
union!	base/abstractset.jl	/^function union!(s::AbstractSet{T}, itr) where T$/;"	f
union!	base/array.jl	/^union!(v::AbstractVector{T}, itrs...) where {T} =$/;"	f
union!	base/bitset.jl	/^function union!(s::BitSet, itr)$/;"	f
union!	base/bitset.jl	/^function union!(s::BitSet, r::AbstractUnitRange{<:Integer})$/;"	f
union!	base/bitset.jl	/^union!(s1::BitSet, s2::BitSet) = _matched_map!(|, s1, s2)$/;"	f
union_align	src/codegen.cpp	/^    size_t union_align;$/;"	m	struct:jl_returninfo_t	typeref:typename:size_t	file:
union_alloca_type	src/cgutils.cpp	/^static void union_alloca_type(jl_uniontype_t *ut,$/;"	f	typeref:typename:void	file:
union_bytes	src/codegen.cpp	/^    size_t union_bytes;$/;"	m	struct:jl_returninfo_t	typeref:typename:size_t	file:
union_caller_cycle!	base/compiler/typeinfer.jl	/^function union_caller_cycle!(a::InferenceState, b::InferenceState)$/;"	f
union_isbits	src/datatype.c	/^static unsigned union_isbits(jl_value_t *ty, size_t *nbytes, size_t *align) JL_NOTSAFEPOINT$/;"	f	typeref:typename:unsigned	file:
union_minalign	src/codegen.cpp	/^    size_t union_minalign;$/;"	m	struct:jl_returninfo_t	typeref:typename:size_t	file:
union_sort_cmp	src/jltypes.c	/^int union_sort_cmp(const void *ap, const void *bp) JL_NOTSAFEPOINT$/;"	f	typeref:typename:int
unionall_env	src/ccall.cpp	/^    jl_unionall_t *unionall_env; \/\/ UnionAll environment for `at` and `rt`$/;"	m	class:function_sig_t	typeref:typename:jl_unionall_t *	file:
unionall_sig_generated	test/compiler/inference.jl	/^@generated unionall_sig_generated(::Vector{T}, b::Vector{S}) where {T, S} = :($b)$/;"	f
unioncomplexity	base/compiler/typeutils.jl	/^function unioncomplexity(t::DataType)$/;"	f
unioncomplexity	base/compiler/typeutils.jl	/^function unioncomplexity(u::Union)$/;"	f
unioncomplexity	base/compiler/typeutils.jl	/^unioncomplexity(@nospecialize(x)) = 0$/;"	f
unioncomplexity	base/compiler/typeutils.jl	/^unioncomplexity(u::UnionAll) = max(unioncomplexity(u.body), unioncomplexity(u.var.ub))$/;"	f
unionlen	base/reflection.jl	/^unionlen(@nospecialize(x)) = 1$/;"	f
unionlen	base/reflection.jl	/^unionlen(x::Union) = unionlen(x.a) + unionlen(x.b)$/;"	f
uniontypes	base/reflection.jl	/^uniontypes(@nospecialize(x)) = _uniontypes(x, Any[])$/;"	f
unique	base/multidimensional.jl	/^unique(A::AbstractArray; dims::Union{Colon,Integer} = :) = _unique_dims(A, dims)$/;"	f
unique	base/set.jl	/^function unique(f, C)$/;"	f
unique	base/set.jl	/^function unique(itr)$/;"	f
unique!	base/set.jl	/^function unique!(A)$/;"	f
unique!	base/set.jl	/^function unique!(A::Union{AbstractVector{<:Real}, AbstractVector{<:AbstractString},$/;"	f
unique!	base/set.jl	/^function unique!(f, A::AbstractVector)$/;"	f
unique_from	base/set.jl	/^@inline function unique_from(itr, out::Vector{T}, seen, i) where T$/;"	f
uniquify	contrib/fixup-libgfortran.sh	/^uniquify()$/;"	f
unitrange_last	base/range.jl	/^unitrange_last(::Bool, stop::Bool) = stop$/;"	f
unitrange_last	base/range.jl	/^unitrange_last(start::T, stop::T) where {T<:Integer} =$/;"	f
unitrange_last	base/range.jl	/^unitrange_last(start::T, stop::T) where {T} =$/;"	f
unix2date	stdlib/LibGit2/src/signature.jl	/^function unix2date(t)$/;"	f
unix2datetime	stdlib/Dates/src/conversions.jl	/^function unix2datetime(x)$/;"	f
unlink	base/file.jl	/^function unlink(p::AbstractString)$/;"	f
unlock	base/channels.jl	/^unlock(c::Channel) = unlock(c.cond_take)$/;"	f
unlock	base/condition.jl	/^function unlock end$/;"	f
unlock	base/condition.jl	/^unlock(c::GenericCondition) = unlock(c.lock)$/;"	f
unlock	base/condition.jl	/^unlock(f, c::GenericCondition) = unlock(f, c.lock)$/;"	f
unlock	base/condition.jl	/^unlock(l::AlwaysLockedST) = assert_havelock(l)$/;"	f
unlock	base/io.jl	/^unlock(::IO) = nothing$/;"	f
unlock	base/lock.jl	/^function unlock(rl::ReentrantLock)$/;"	f
unlock	base/locks-mt.jl	/^function unlock(l::SpinLock)$/;"	f
unlock	base/show.jl	/^unlock(io::IOContext) = unlock(io.io)$/;"	f
unlock	base/stream.jl	/^unlock(s::LibuvStream) = unlock(s.lock)$/;"	f
unlockall	base/condition.jl	/^unlockall(l::AbstractLock) = unlock(l) # internal function for implementing `wait`$/;"	f
unlockall	base/lock.jl	/^function unlockall(rl::ReentrantLock)$/;"	f
unmangled-name	src/julia-syntax.scm	/^(define (unmangled-name v)$/;"	f
unmap_page	src/cgmemmgr.cpp	/^static void unmap_page(void *ptr, size_t size)$/;"	f	namespace:__anon06c686bc0111	typeref:typename:void	file:
unmark	base/io.jl	/^function unmark(io::IO)$/;"	f
unmark	base/stream.jl	/^unmark(x::LibuvStream)   = unmark(x.buffer)$/;"	f
unmark_cons	src/flisp/flisp.c	/^#define unmark_cons(/;"	d	file:
unpeel	test/vecelement.jl	/^unpeel(x) = x.elts[1].value$/;"	f
unpreserve_handle	base/libuv.jl	/^function unpreserve_handle(x)$/;"	f
unquoted	base/show.jl	/^unquoted(ex::Expr)       = ex.args[1]$/;"	f
unquoted	base/show.jl	/^unquoted(ex::QuoteNode)  = ex.value$/;"	f
unreachable_sym	src/ast.c	/^jl_sym_t *return_sym;  jl_sym_t *unreachable_sym;$/;"	v	typeref:typename:jl_sym_t *
unreference_module	base/loading.jl	/^function unreference_module(key::PkgId)$/;"	f
unrooted	test/clangsa/MissingRoots.c	/^int unrooted() {$/;"	f	typeref:typename:int
unrooted_argument	test/clangsa/MissingRoots.c	/^void unrooted_argument() {$/;"	f	typeref:typename:void
unsafe_SecretBuffer!	base/secretbuffer.jl	/^function unsafe_SecretBuffer!(p::Ptr{UInt8}, len=1)$/;"	f
unsafe_SecretBuffer!	base/secretbuffer.jl	/^unsafe_SecretBuffer!(s::Cstring) = unsafe_SecretBuffer!(convert(Ptr{UInt8}, s), ccall(:strlen, C/;"	f
unsafe_bitfindnext	base/bitarray.jl	/^function unsafe_bitfindnext(Bc::Vector{UInt64}, start::Integer)$/;"	f
unsafe_bitfindprev	base/bitarray.jl	/^function unsafe_bitfindprev(Bc::Vector{UInt64}, start::Integer)$/;"	f
unsafe_bitgetindex	base/bitarray.jl	/^@inline function unsafe_bitgetindex(Bc::Vector{UInt64}, i::Int)$/;"	f
unsafe_bitsetindex!	base/bitarray.jl	/^@inline function unsafe_bitsetindex!(Bc::Array{UInt64}, x::Bool, i::Int)$/;"	f
unsafe_cast	base/mpfr.jl	/^function unsafe_cast(::Type{BigInt}, x::BigFloat, r::MPFRRoundingMode)$/;"	f
unsafe_cast	base/mpfr.jl	/^function unsafe_cast(::Type{Int64}, x::BigFloat, r::MPFRRoundingMode)$/;"	f
unsafe_cast	base/mpfr.jl	/^function unsafe_cast(::Type{T}, x::BigFloat, r::MPFRRoundingMode) where T<:Signed$/;"	f
unsafe_cast	base/mpfr.jl	/^function unsafe_cast(::Type{T}, x::BigFloat, r::MPFRRoundingMode) where T<:Unsigned$/;"	f
unsafe_cast	base/mpfr.jl	/^function unsafe_cast(::Type{UInt64}, x::BigFloat, r::MPFRRoundingMode)$/;"	f
unsafe_cast	base/mpfr.jl	/^unsafe_cast(::Type{Int128}, x::BigFloat, r::MPFRRoundingMode) = Int128(unsafe_cast(BigInt, x, r)/;"	f
unsafe_cast	base/mpfr.jl	/^unsafe_cast(::Type{UInt128}, x::BigFloat, r::MPFRRoundingMode) = UInt128(unsafe_cast(BigInt, x, /;"	f
unsafe_cast	base/mpfr.jl	/^unsafe_cast(T, x::BigFloat, r::RoundingMode) = unsafe_cast(T, x, convert(MPFRRoundingMode, r))$/;"	f
unsafe_convert	base/asyncevent.jl	/^unsafe_convert(::Type{Ptr{Cvoid}}, async::AsyncCondition) = async.handle$/;"	f
unsafe_convert	base/asyncevent.jl	/^unsafe_convert(::Type{Ptr{Cvoid}}, t::Timer) = t.handle$/;"	f
unsafe_convert	base/atomics.jl	/^unsafe_convert(::Type{Ptr{T}}, x::Atomic{T}) where {T} = convert(Ptr{T}, pointer_from_objref(x))$/;"	f
unsafe_convert	base/boot.jl	/^unsafe_convert(::Type{T}, x::T) where {T} = x$/;"	f
unsafe_convert	base/c.jl	/^function unsafe_convert(::Type{Cstring}, s::Union{String,AbstractVector{UInt8}})$/;"	f
unsafe_convert	base/c.jl	/^function unsafe_convert(::Type{Cwstring}, v::Vector{Cwchar_t})$/;"	f
unsafe_convert	base/c.jl	/^unsafe_convert(::Type{Cstring}, s::Symbol) = Cstring(unsafe_convert(Ptr{Cchar}, s))$/;"	f
unsafe_convert	base/c.jl	/^unsafe_convert(::Type{Ptr{Cvoid}}, cf::CFunction) = cf.ptr$/;"	f
unsafe_convert	base/essentials.jl	/^unsafe_convert(::Type{P}, x::Ptr) where {P<:Ptr} = convert(P, x)$/;"	f
unsafe_convert	base/essentials.jl	/^unsafe_convert(::Type{T}, x::T) where {T<:Ptr} = x  # to resolve ambiguity with the next method$/;"	f
unsafe_convert	base/essentials.jl	/^unsafe_convert(::Type{T}, x::T) where {T} = x # unsafe_convert (like convert) defaults to assumi/;"	f
unsafe_convert	base/iostream.jl	/^unsafe_convert(T::Type{Ptr{Cvoid}}, s::IOStream) = convert(T, pointer(s.ios))$/;"	f
unsafe_convert	base/pointer.jl	/^function unsafe_convert end$/;"	f
unsafe_convert	base/pointer.jl	/^unsafe_convert(::Type{Ptr{Int8}}, s::String) = convert(Ptr{Int8}, pointer_from_objref(s)+sizeof(/;"	f
unsafe_convert	base/pointer.jl	/^unsafe_convert(::Type{Ptr{Int8}}, x::Symbol) = ccall(:jl_symbol_name, Ptr{Int8}, (Any,), x)$/;"	f
unsafe_convert	base/pointer.jl	/^unsafe_convert(::Type{Ptr{S}}, a::AbstractArray{T}) where {S,T} = convert(Ptr{S}, unsafe_convert/;"	f
unsafe_convert	base/pointer.jl	/^unsafe_convert(::Type{Ptr{T}}, a::AbstractArray{T}) where {T} = error("conversion to pointer not/;"	f
unsafe_convert	base/pointer.jl	/^unsafe_convert(::Type{Ptr{T}}, a::Array{T}) where {T} = ccall(:jl_array_ptr, Ptr{T}, (Any,), a)$/;"	f
unsafe_convert	base/pointer.jl	/^unsafe_convert(::Type{Ptr{UInt8}}, s::String) = convert(Ptr{UInt8}, pointer_from_objref(s)+sizeo/;"	f
unsafe_convert	base/pointer.jl	/^unsafe_convert(::Type{Ptr{UInt8}}, x::Symbol) = ccall(:jl_symbol_name, Ptr{UInt8}, (Any,), x)$/;"	f
unsafe_convert	base/refpointer.jl	/^function unsafe_convert(P::Type{Ptr{Any}}, b::RefArray{Any})$/;"	f
unsafe_convert	base/refpointer.jl	/^function unsafe_convert(P::Type{Ptr{T}}, b::RefArray{T}) where T$/;"	f
unsafe_convert	base/refpointer.jl	/^unsafe_convert(::Type{Ptr{Cvoid}}, b::RefArray{T}) where {T} = convert(Ptr{Cvoid}, unsafe_conver/;"	f
unsafe_convert	base/refpointer.jl	/^unsafe_convert(::Type{Ref{T}}, x) where {T} = unsafe_convert(Ptr{T}, x)$/;"	f
unsafe_convert	base/refpointer.jl	/^unsafe_convert(::Type{Ref{T}}, x::Ref{T}) where {T} = unsafe_convert(Ptr{T}, x)$/;"	f
unsafe_convert	base/refvalue.jl	/^function unsafe_convert(P::Type{Ptr{Any}}, b::RefValue{Any})$/;"	f
unsafe_convert	base/refvalue.jl	/^function unsafe_convert(P::Type{Ptr{T}}, b::RefValue{T}) where T$/;"	f
unsafe_convert	base/refvalue.jl	/^unsafe_convert(::Type{Ptr{Cvoid}}, b::RefValue{T}) where {T} = convert(Ptr{Cvoid}, unsafe_conver/;"	f
unsafe_convert	base/reinterpretarray.jl	/^unsafe_convert(::Type{Ptr{T}}, a::ReinterpretArray{T,N,S} where N) where {T,S} = Ptr{T}(unsafe_c/;"	f
unsafe_convert	base/reshapedarray.jl	/^unsafe_convert(::Type{Ptr{T}}, a::ReshapedArray{T}) where {T} = unsafe_convert(Ptr{T}, parent(a)/;"	f
unsafe_convert	base/secretbuffer.jl	/^function unsafe_convert(::Type{Cstring}, s::SecretBuffer)$/;"	f
unsafe_convert	base/stream.jl	/^unsafe_convert(::Type{Ptr{Cvoid}}, s::Union{LibuvStream, LibuvServer}) = s.handle$/;"	f
unsafe_convert	base/strings/basic.jl	/^unsafe_convert(::Type{Ptr{Int8}}, s::CodeUnits{UInt8}) = unsafe_convert(Ptr{Int8}, s.s)$/;"	f
unsafe_convert	base/strings/basic.jl	/^unsafe_convert(::Type{Ptr{T}},    s::CodeUnits{T}) where {T} = unsafe_convert(Ptr{T}, s.s)$/;"	f
unsafe_convert	base/strings/substring.jl	/^function unsafe_convert(::Type{Ptr{R}}, s::SubString{String}) where R<:Union{Int8, UInt8}$/;"	f
unsafe_convert	base/subarray.jl	/^unsafe_convert(::Type{Ptr{T}}, V::SubArray{T,N,P,<:Tuple{Vararg{RangeIndex}}}) where {T,N,P} =$/;"	f
unsafe_convert	stdlib/SharedArrays/src/SharedArrays.jl	/^unsafe_convert(::Type{Ptr{T}}, S::SharedArray   ) where {T} = unsafe_convert(Ptr{T}, sdata(S))$/;"	f
unsafe_convert	stdlib/SharedArrays/src/SharedArrays.jl	/^unsafe_convert(::Type{Ptr{T}}, S::SharedArray{T}) where {T} = unsafe_convert(Ptr{T}, sdata(S))$/;"	f
unsafe_copyto!	base/array.jl	/^function unsafe_copyto!(dest::Array{T}, doffs, src::Array{T}, soffs, n) where T$/;"	f
unsafe_copyto!	base/array.jl	/^function unsafe_copyto!(dest::Ptr{T}, src::Ptr{T}, n) where T$/;"	f
unsafe_copyto!	base/bitarray.jl	/^function unsafe_copyto!(dest::BitArray, doffs::Integer, src::Union{BitArray,Array}, soffs::Integ/;"	f
unsafe_crc32c	base/util.jl	/^unsafe_crc32c(a, n, crc) = ccall(:jl_crc32c, UInt32, (UInt32, Ptr{UInt8}, Csize_t), crc, a, n)$/;"	f
unsafe_crc32c_sw	stdlib/CRC32c/test/runtests.jl	/^unsafe_crc32c_sw(a, n, crc) =$/;"	f
unsafe_filter!	base/abstractset.jl	/^unsafe_filter!(pred, s::AbstractSet) = mapfilter(!pred, delete!, s, s)$/;"	f
unsafe_getindex	base/abstractarray.jl	/^function unsafe_getindex(A::AbstractArray, I...)$/;"	f
unsafe_getindex	base/range.jl	/^function unsafe_getindex(r::LinRange, i::Integer)$/;"	f
unsafe_getindex	base/range.jl	/^function unsafe_getindex(r::StepRangeLen{T}, i::Integer) where T$/;"	f
unsafe_getindex	base/twiceprecision.jl	/^function unsafe_getindex(r::StepRangeLen{T,<:TwicePrecision,<:TwicePrecision}, i::Integer) where/;"	f
unsafe_indices	base/abstractarray.jl	/^unsafe_indices(A) = axes(A)$/;"	f
unsafe_indices	base/abstractarray.jl	/^unsafe_indices(r::AbstractRange) = (OneTo(unsafe_length(r)),) # Ranges use checked_sub for size$/;"	f
unsafe_indices	base/indices.jl	/^unsafe_indices(S::IdentityUnitRange) = (S,)$/;"	f
unsafe_indices	base/indices.jl	/^unsafe_indices(S::IdentityUnitRange{<:OneTo}) = (S.indices,)$/;"	f
unsafe_indices	base/indices.jl	/^unsafe_indices(S::Slice) = (IdentityUnitRange(S.indices),)$/;"	f
unsafe_indices	base/indices.jl	/^unsafe_indices(S::Slice{<:OneTo}) = (S.indices,)$/;"	f
unsafe_length	base/indices.jl	/^unsafe_length(S::IdentityUnitRange) = unsafe_length(S.indices)$/;"	f
unsafe_length	base/indices.jl	/^unsafe_length(S::Slice) = unsafe_length(S.indices)$/;"	f
unsafe_length	base/range.jl	/^function unsafe_length(r::StepRange)$/;"	f
unsafe_length	base/range.jl	/^unsafe_length(r::AbstractRange) = length(r)  # generic fallback$/;"	f
unsafe_length	base/range.jl	/^unsafe_length(r::AbstractUnitRange) = Integer(last(r) - first(r) + step(r))$/;"	f
unsafe_length	base/range.jl	/^unsafe_length(r::OneTo) = Integer(r.stop - zero(r.stop))$/;"	f
unsafe_load	base/pointer.jl	/^unsafe_load(p::Ptr, i::Integer=1) = pointerref(p, Int(i), 1)$/;"	f
unsafe_load_commands	base/options.jl	/^function unsafe_load_commands(v::Ptr{Ptr{UInt8}})$/;"	f
unsafe_maxmultiple	stdlib/Random/src/generation.jl	/^unsafe_maxmultiple(k::T, sup::T) where {T<:Unsigned} =$/;"	f
unsafe_pointer_to_objref	base/pointer.jl	/^unsafe_pointer_to_objref(x::Ptr) = ccall(:jl_value_ptr, Any, (Ptr{Cvoid},), x)$/;"	f
unsafe_read	base/filesystem.jl	/^function unsafe_read(f::File, p::Ptr{UInt8}, nel::UInt)$/;"	f
unsafe_read	base/io.jl	/^@noinline unsafe_read(s::IO, p::Ref{T}, n::Integer) where {T} = unsafe_read(s, unsafe_convert(Re/;"	f
unsafe_read	base/io.jl	/^function unsafe_read(s::IO, p::Ptr{UInt8}, n::UInt)$/;"	f
unsafe_read	base/io.jl	/^unsafe_read(io::AbstractPipe, p::Ptr{UInt8}, nb::UInt) = unsafe_read(pipe_reader(io), p, nb)$/;"	f
unsafe_read	base/io.jl	/^unsafe_read(s::IO, p::Ptr, n::Integer) = unsafe_read(s, convert(Ptr{UInt8}, p), convert(UInt, n)/;"	f
unsafe_read	base/iobuffer.jl	/^function unsafe_read(from::GenericIOBuffer, p::Ptr{UInt8}, nb::UInt)$/;"	f
unsafe_read	base/iostream.jl	/^function unsafe_read(s::IOStream, p::Ptr{UInt8}, nb::UInt)$/;"	f
unsafe_read	base/stream.jl	/^function unsafe_read(s::BufferStream, a::Ptr{UInt8}, nb::UInt)$/;"	f
unsafe_read	base/stream.jl	/^function unsafe_read(s::LibuvStream, p::Ptr{UInt8}, nb::UInt)$/;"	f
unsafe_securezero!	base/util.jl	/^@noinline unsafe_securezero!(p::Ptr{T}, len::Integer=1) where {T} =$/;"	f
unsafe_securezero!	base/util.jl	/^unsafe_securezero!(p::Ptr{Cvoid}, len::Integer=1) = Ptr{Cvoid}(unsafe_securezero!(Ptr{UInt8}(p),/;"	f
unsafe_setindex!	base/abstractarray.jl	/^function unsafe_setindex!(A::AbstractArray, v, I...)$/;"	f
unsafe_store!	base/pointer.jl	/^unsafe_store!(p::Ptr{Any}, @nospecialize(x), i::Integer=1) = pointerset(p, x, Int(i), 1)$/;"	f
unsafe_store!	base/pointer.jl	/^unsafe_store!(p::Ptr{T}, x, i::Integer=1) where {T} = pointerset(p, convert(T,x), Int(i), 1)$/;"	f
unsafe_string	base/c.jl	/^unsafe_string(s::Cstring) = unsafe_string(convert(Ptr{UInt8}, s))$/;"	f
unsafe_string	base/strings/string.jl	/^function unsafe_string(p::Union{Ptr{UInt8},Ptr{Int8}})$/;"	f
unsafe_string	base/strings/string.jl	/^function unsafe_string(p::Union{Ptr{UInt8},Ptr{Int8}}, len::Integer)$/;"	f
unsafe_trunc	base/float.jl	/^        unsafe_trunc(::Type{$Ti}, x::Float16) = unsafe_trunc($Ti, Float32(x))$/;"	f
unsafe_trunc	base/float.jl	/^        unsafe_trunc(::Type{$Ti}, x::Float32) = fptosi($Ti, x)$/;"	f
unsafe_trunc	base/float.jl	/^        unsafe_trunc(::Type{$Ti}, x::Float32) = fptoui($Ti, x)$/;"	f
unsafe_trunc	base/float.jl	/^        unsafe_trunc(::Type{$Ti}, x::Float64) = fptosi($Ti, x)$/;"	f
unsafe_trunc	base/float.jl	/^        unsafe_trunc(::Type{$Ti}, x::Float64) = fptoui($Ti, x)$/;"	f
unsafe_trunc	base/float.jl	/^function unsafe_trunc end$/;"	f
unsafe_trunc	base/float.jl	/^function unsafe_trunc(::Type{Int128}, x::Float32)$/;"	f
unsafe_trunc	base/float.jl	/^function unsafe_trunc(::Type{Int128}, x::Float64)$/;"	f
unsafe_trunc	base/float.jl	/^function unsafe_trunc(::Type{UInt128}, x::Float32)$/;"	f
unsafe_trunc	base/float.jl	/^function unsafe_trunc(::Type{UInt128}, x::Float64)$/;"	f
unsafe_trunc	base/float.jl	/^unsafe_trunc(::Type{Int128}, x::Float16) = unsafe_trunc(Int128, Float32(x))$/;"	f
unsafe_trunc	base/float.jl	/^unsafe_trunc(::Type{UInt128}, x::Float16) = unsafe_trunc(UInt128, Float32(x))$/;"	f
unsafe_trunc	base/gmp.jl	/^unsafe_trunc(::Type{BigInt}, x::Union{Float32,Float64}) = MPZ.set_d(x)$/;"	f
unsafe_trunc	base/int.jl	/^unsafe_trunc(::Type{T}, x::Integer) where {T<:Integer} = rem(x, T)$/;"	f
unsafe_trunc	base/mpfr.jl	/^unsafe_trunc(::Type{T}, x::BigFloat) where {T<:Integer} = unsafe_cast(T, x, RoundToZero)$/;"	f
unsafe_view	base/subarray.jl	/^function unsafe_view(A::AbstractArray, I::Vararg{ViewIndex,N}) where {N}$/;"	f
unsafe_view	base/subarray.jl	/^unsafe_view(V::SubArray, I::Vararg{ViewIndex,N}) where {N} =$/;"	f
unsafe_wrap	base/pointer.jl	/^function unsafe_wrap(::Union{Type{Array},Type{Array{T}},Type{Array{T,1}}},$/;"	f
unsafe_wrap	base/pointer.jl	/^function unsafe_wrap(::Union{Type{Array},Type{Array{T}},Type{Array{T,N}}},$/;"	f
unsafe_wrap	base/pointer.jl	/^unsafe_wrap(Atype::Type, p::Ptr, dims::NTuple{N,<:Integer}; own::Bool = false) where {N} =$/;"	f
unsafe_wrap	base/strings/string.jl	/^unsafe_wrap(::Type{Vector{UInt8}}, s::String) = ccall(:jl_string_to_array, Ref{Vector{UInt8}}, (/;"	f
unsafe_write	base/boot.jl	/^unsafe_write(io::IO, x::Ptr{UInt8}, nb::Int) =$/;"	f
unsafe_write	base/boot.jl	/^unsafe_write(io::IO, x::Ptr{UInt8}, nb::UInt) =$/;"	f
unsafe_write	base/coreio.jl	/^    unsafe_write(io::CoreIO, x::Ptr{UInt8}, nb::UInt) = Core.unsafe_write(io, x, nb)$/;"	f
unsafe_write	base/filesystem.jl	/^function unsafe_write(f::File, buf::Ptr{UInt8}, len::UInt, offset::Int64=Int64(-1))$/;"	f
unsafe_write	base/io.jl	/^@noinline unsafe_write(s::IO, p::Ref{T}, n::Integer) where {T} =$/;"	f
unsafe_write	base/io.jl	/^function unsafe_write(s::IO, p::Ptr{UInt8}, n::UInt)$/;"	f
unsafe_write	base/io.jl	/^unsafe_write(io::AbstractPipe, p::Ptr{UInt8}, nb::UInt) = unsafe_write(pipe_writer(io), p, nb)$/;"	f
unsafe_write	base/io.jl	/^unsafe_write(s::IO, p::Ptr, n::Integer) = unsafe_write(s, convert(Ptr{UInt8}, p), convert(UInt, /;"	f
unsafe_write	base/iobuffer.jl	/^function unsafe_write(to::GenericIOBuffer, p::Ptr{UInt8}, nb::UInt)$/;"	f
unsafe_write	base/iostream.jl	/^function unsafe_write(s::IOStream, p::Ptr{UInt8}, nb::UInt)$/;"	f
unsafe_write	base/stream.jl	/^function unsafe_write(s::BufferStream, p::Ptr{UInt8}, nb::UInt)$/;"	f
unsafe_write	base/stream.jl	/^function unsafe_write(s::LibuvStream, p::Ptr{UInt8}, n::UInt)$/;"	f
unscaled_covzm	stdlib/Statistics/src/Statistics.jl	/^unscaled_covzm(x::AbstractMatrix, vardim::Int) = (vardim == 1 ? _conj(x'x) : x * x')$/;"	f
unscaled_covzm	stdlib/Statistics/src/Statistics.jl	/^unscaled_covzm(x::AbstractMatrix, y::AbstractMatrix, vardim::Int) =$/;"	f
unscaled_covzm	stdlib/Statistics/src/Statistics.jl	/^unscaled_covzm(x::AbstractMatrix, y::AbstractVector, vardim::Int) =$/;"	f
unscaled_covzm	stdlib/Statistics/src/Statistics.jl	/^unscaled_covzm(x::AbstractVector)              = sum(t -> t*t', x)$/;"	f
unscaled_covzm	stdlib/Statistics/src/Statistics.jl	/^unscaled_covzm(x::AbstractVector, y::AbstractMatrix, vardim::Int) =$/;"	f
unscaled_covzm	stdlib/Statistics/src/Statistics.jl	/^unscaled_covzm(x::AbstractVector, y::AbstractVector) = sum(conj(y[i])*x[i] for i in eachindex(y,/;"	f
unscaled_covzm	stdlib/Statistics/src/Statistics.jl	/^unscaled_covzm(x::AbstractVector{<:Number})    = sum(abs2, x)$/;"	f
unset_bits	src/processor.cpp	/^static inline void unset_bits(T &bits)$/;"	f	namespace:__anon839834ed0111	typeref:typename:void	file:
unset_bits	src/processor.cpp	/^static inline void unset_bits(T &bits, T1 _bitidx, Rest... rest)$/;"	f	namespace:__anon839834ed0111	typeref:typename:void	file:
unsigned	base/essentials.jl	/^unsigned(x::Int) = reinterpret(UInt, x)$/;"	f
unsigned	base/int.jl	/^unsigned(x) = convert(Unsigned, x)$/;"	f
unsigned	base/int.jl	/^unsigned(x::BitSigned) = reinterpret(typeof(convert(Unsigned, zero(x))), x)$/;"	f
unsigned	base/int.jl	/^unsigned(x::Bool) = convert(Unsigned, x)$/;"	f
unsigned	base/multinverses.jl	/^unsigned(::Type{Int128}) = UInt128$/;"	f
unsigned	base/multinverses.jl	/^unsigned(::Type{Int16}) = UInt16$/;"	f
unsigned	base/multinverses.jl	/^unsigned(::Type{Int32}) = UInt32$/;"	f
unsigned	base/multinverses.jl	/^unsigned(::Type{Int64}) = UInt64$/;"	f
unsigned	base/multinverses.jl	/^unsigned(::Type{Int8}) = UInt8$/;"	f
unsigned	base/multinverses.jl	/^unsigned(::Type{T}) where {T<:Unsigned} = T$/;"	f
unsorted	src/julia_internal.h	/^    int8_t unsorted; \/\/ whether this should be unsorted$/;"	m	struct:jl_typemap_info	typeref:typename:int8_t
unspecialized	src/julia.h	/^    struct _jl_method_instance_t *unspecialized;  \/\/ unspecialized executable method instance,/;"	m	struct:_jl_method_t	typeref:struct:_jl_method_instance_t *
unused_sym	src/ast.c	/^jl_sym_t *polly_sym; jl_sym_t *unused_sym;$/;"	v	typeref:typename:jl_sym_t *
unused_uv_loop_arg	src/julia_internal.h	/^static uv_loop_t *const unused_uv_loop_arg = (uv_loop_t *)0xBAD10;$/;"	v	typeref:typename:uv_loop_t * const
unw	stdlib/LinearAlgebra/src/triangular.jl	/^unw(x::Number) = ceil((imag(x) - pi) \/ (2 * pi))$/;"	f
unw	stdlib/LinearAlgebra/src/triangular.jl	/^unw(x::Real) = 0$/;"	f
unw_table_entry	src/debuginfo.cpp	/^struct unw_table_entry$/;"	s	file:
unwatch_folder	stdlib/FileWatching/src/FileWatching.jl	/^function unwatch_folder(s::String)$/;"	f
unwatch_folder	stdlib/FileWatching/src/FileWatching.jl	/^unwatch_folder(s::AbstractString) = unwatch_folder(String(s))$/;"	f
unwrap	stdlib/SparseArrays/src/sparseconvert.jl	/^unwrap(A::AbstractMatrix) = iswrsparse(A) ? convert(SparseMatrixCSC, A) : convert(Array, A)$/;"	f
unwrap	stdlib/SparseArrays/src/sparseconvert.jl	/^unwrap(A::Any) = A$/;"	f
unwrap-where	src/julia-parser.scm	/^(define (unwrap-where x)$/;"	f
unwrap_1_unionall	src/subtype.c	/^static jl_datatype_t *unwrap_1_unionall(jl_value_t *t, jl_tvar_t **p1) JL_NOTSAFEPOINT$/;"	f	typeref:typename:jl_datatype_t *	file:
unwrap_unionall	base/essentials.jl	/^function unwrap_unionall(@nospecialize(a))$/;"	f
unwrapcontext	base/show.jl	/^unwrapcontext(io::IO) = io, get(io,:color,false) ? ImmutableDict{Symbol,Any}(:color, true) : Imm/;"	f
unwrapcontext	base/show.jl	/^unwrapcontext(io::IOContext) = io.io, io.dict$/;"	f
unwrapva	base/essentials.jl	/^function unwrapva(@nospecialize(t))$/;"	f
update!	stdlib/LibGit2/src/index.jl	/^function update!(idx::GitIndex, files::AbstractString...)$/;"	f
update!	stdlib/LibGit2/src/index.jl	/^function update!(repo::GitRepo, files::AbstractString...)$/;"	f
update!	stdlib/SHA/src/common.jl	/^function update!(context::T, data::U, datalen=length(data)) where {T<:SHA_CTX, U<:AbstractBytes}$/;"	f
update!	stdlib/SHA/src/hmac.jl	/^function update!(ctx::HMAC_CTX, data, datalen=length(data))$/;"	f
update-llvm	deps/llvm.mk	/^update-llvm:$/;"	t
update21311!	test/compiler/inline.jl	/^@noinline function update21311!(x)$/;"	f
update23685!	test/compiler/inference.jl	/^@inline function update23685!(::Node23685{T}) where T$/;"	f
update_arg	base/shell.jl	/^    function update_arg(x)$/;"	f
update_display_buffer	stdlib/REPL/src/LineEdit.jl	/^function update_display_buffer(s::SearchState, data)$/;"	f
update_julia_type	src/codegen.cpp	/^static inline jl_cgval_t update_julia_type(jl_codectx_t &ctx, const jl_cgval_t &v, jl_value_t *t/;"	f	typeref:typename:jl_cgval_t	file:
update_key_repeats	stdlib/REPL/src/LineEdit.jl	/^function update_key_repeats(s::MIState, keystroke)$/;"	f
update_key_repeats	stdlib/REPL/src/LineEdit.jl	/^update_key_repeats(s, keystroke) = nothing$/;"	f
update_level!	base/compiler/ssair/domtree.jl	/^function update_level!(domtree::Vector{DomTreeNode}, node::Int, level::Int)$/;"	f
update_max_args	src/gf.c	/^static void update_max_args(jl_methtable_t *mt, jl_value_t *type)$/;"	f	typeref:typename:void	file:
update_stackframes_callback	base/errorshow.jl	/^const update_stackframes_callback = Ref{Function}(identity)$/;"	v
update_valid_age!	base/compiler/inferencestate.jl	/^function update_valid_age!(min_valid::UInt, max_valid::UInt, sv::InferenceState)$/;"	f
update_valid_age!	base/compiler/inferencestate.jl	/^update_valid_age!(edge::InferenceState, sv::InferenceState) = update_valid_age!(edge.min_valid, /;"	f
update_valid_age!	base/compiler/optimize.jl	/^function update_valid_age!(min_valid::UInt, max_valid::UInt, sv::OptimizationState)$/;"	f
updatingVersion	contrib/mac/frameworkapp/JuliaLauncher/AppDelegate.m	/^@property(readonly) BOOL updatingVersion;$/;"	p	interface:JuliaVariant
uperm	base/stat.jl	/^uperm(st::StatStruct) = UInt8((filemode(st) >> 6) & 0x7)$/;"	f
upper	deps/tools/common.mk	/^upper = $(shell echo $1 | tr a-z A-Z)$/;"	m
upperbound	base/version.jl	/^upperbound(v::VersionNumber) = VersionNumber(v.major, v.minor, v.patch, (), ("",))$/;"	f
uppercase	base/strings/unicode.jl	/^uppercase(c::T) where {T<:AbstractChar} = isascii(c) ? ('a' <= c <= 'z' ? c - 0x20 : c) :$/;"	f
uppercase	base/strings/unicode.jl	/^uppercase(s::AbstractString) = map(uppercase, s)$/;"	f
uppercasefirst	base/strings/unicode.jl	/^function uppercasefirst(s::AbstractString)$/;"	f
upst_ann	stdlib/LibGit2/src/merge.jl	/^upst_ann = LibGit2.GitAnnotated(repo, "branch\/a")$/;"	v
upst_ann_1	stdlib/LibGit2/src/merge.jl	/^upst_ann_1 = LibGit2.GitAnnotated(repo, "branch\/a")$/;"	v
upst_ann_2	stdlib/LibGit2/src/merge.jl	/^upst_ann_2 = LibGit2.GitAnnotated(repo, "branch\/b")$/;"	v
upstream	stdlib/LibGit2/src/reference.jl	/^function upstream(ref::GitReference)$/;"	f
uptime	base/sysinfo.jl	/^function uptime()$/;"	f
url	base/methodshow.jl	/^function url(m::Method)$/;"	f
url	stdlib/LibGit2/src/remote.jl	/^function url(rmt::GitRemote)$/;"	f
us	stdlib/Dates/test/periods.jl	/^us = Dates.Microsecond(1)$/;"	v
usage	src/jloptions.c	/^static const char usage[] = "julia [switches] -- [programfile] [args...]\\n";$/;"	v	typeref:typename:const char[]	file:
usage_error	deps/srccache/patchelf-0.9/build-aux/test-driver	/^usage_error ()$/;"	f
use	src/llvm-multiversioning.cpp	/^        Use *use;$/;"	m	struct:__anond5683ea40111::ConstantUses::Info	typeref:typename:Use *	file:
use	test/compiler/codegen.jl	/^    @noinline use(x) = ccall(:jl_breakpoint, Cvoid, ())$/;"	f
use30594	test/compiler/irpasses.jl	/^    @noinline use30594(x) = push!(results, x.x); nothing$/;"	f
use30783	test/compiler/inference.jl	/^@noinline use30783(x) = nothing$/;"	f
use_compiled_modules	src/julia.h	/^    int8_t use_compiled_modules;$/;"	m	struct:__anon055fe4271808	typeref:typename:int8_t
use_end	src/llvm-alloc-opt.cpp	/^            Instruction::use_iterator use_end;$/;"	m	struct:__anon0a1571000111::Optimizer::CheckInst::Frame	typeref:typename:Instruction::use_iterator	file:
use_http_path	stdlib/LibGit2/src/gitcredential.jl	/^function use_http_path(cfg::GitConfig, cred::GitCredential)$/;"	f
use_info	src/llvm-alloc-opt.cpp	/^    AllocUseInfo use_info;$/;"	m	struct:__anon0a1571000111::Optimizer	typeref:typename:AllocUseInfo	file:
use_it	src/llvm-alloc-opt.cpp	/^            Instruction::use_iterator use_it;$/;"	m	struct:__anon0a1571000111::Optimizer::CheckInst::Frame	typeref:typename:Instruction::use_iterator	file:
use_sret	src/abi_aarch64.cpp	/^bool use_sret(jl_datatype_t *dt) override$/;"	f	struct:ABI_AArch64Layout	typeref:typename:bool	file:
use_sret	src/abi_arm.cpp	/^bool use_sret(jl_datatype_t *dt) override$/;"	f	struct:ABI_ARMLayout	typeref:typename:bool	file:
use_sret	src/abi_llvm.cpp	/^bool use_sret(jl_datatype_t *ty) override$/;"	f	struct:ABI_LLVMLayout	typeref:typename:bool	file:
use_sret	src/abi_ppc64le.cpp	/^bool use_sret(jl_datatype_t *dt) override$/;"	f	struct:ABI_PPC64leLayout	typeref:typename:bool	file:
use_sret	src/abi_win32.cpp	/^bool use_sret(jl_datatype_t *dt) override$/;"	f	struct:ABI_Win32Layout	typeref:typename:bool	file:
use_sret	src/abi_win64.cpp	/^bool use_sret(jl_datatype_t *dt) override$/;"	f	struct:ABI_Win64Layout	typeref:typename:bool	file:
use_sret	src/abi_x86.cpp	/^bool use_sret(jl_datatype_t *dt) override$/;"	f	struct:ABI_x86Layout	typeref:typename:bool	file:
use_sret	src/abi_x86_64.cpp	/^bool use_sret(jl_datatype_t *dt) override$/;"	f	struct:ABI_x86_64Layout	typeref:typename:bool	file:
use_sysimage_native_code	src/julia.h	/^    int8_t use_sysimage_native_code;$/;"	m	struct:__anon055fe4271808	typeref:typename:int8_t
use_tuple28445	test/core.jl	/^@noinline function use_tuple28445(c)$/;"	f
usec	src/support/timefuncs.h	/^    int64_t usec;   \/* microseconds *\/$/;"	m	struct:jl_timeval	typeref:typename:int64_t
used	src/codegen.cpp	/^    bool used;$/;"	m	struct:jl_varinfo_t	typeref:typename:bool	file:
usedUndef	src/codegen.cpp	/^    bool usedUndef;$/;"	m	struct:jl_varinfo_t	typeref:typename:bool	file:
used_dup_var_tested15714	test/reflection.jl	/^used_dup_var_tested15714 = false$/;"	v
used_unique_var_tested15714	test/reflection.jl	/^used_unique_var_tested15714 = false$/;"	v
user_abort	stdlib/LibGit2/src/callbacks.jl	/^function user_abort()$/;"	f
userefs	base/compiler/ssair/ir.jl	/^function userefs(@nospecialize(x))$/;"	f
uses	src/llvm-alloc-opt.cpp	/^        SmallSet<Instruction*,16> uses;$/;"	m	struct:__anon0a1571000111::Optimizer::AllocUseInfo	typeref:typename:SmallSet<Instruction *,16>	file:
uses_specsig	src/codegen.cpp	/^static bool uses_specsig(jl_value_t *sig, size_t nreq, jl_value_t *rettype, bool needsparam, boo/;"	f	typeref:typename:bool	file:
usignbitbyte	src/runtime_intrinsics.c	/^static inline char usignbitbyte(void *a, unsigned bytes) JL_NOTSAFEPOINT$/;"	f	typeref:typename:char	file:
using_resolve_binding	src/module.c	/^static jl_binding_t *using_resolve_binding(jl_module_t *m JL_PROPAGATES_ROOT, jl_sym_t *var, mod/;"	f	typeref:typename:jl_binding_t *	file:
using_sym	src/ast.c	/^jl_sym_t *new_sym;     jl_sym_t *using_sym;$/;"	v	typeref:typename:jl_sym_t *
usings	src/julia.h	/^    arraylist_t usings;  \/\/ modules with all bindings potentially imported$/;"	m	struct:_jl_module_t	typeref:typename:arraylist_t
usr2_handler	src/signals-unix.c	/^void usr2_handler(int sig, siginfo_t *info, void *ctx)$/;"	f	typeref:typename:void
utc	src/support/strptime.c	/^static char utc[] = { "UTC" };$/;"	v	typeref:typename:char[]	file:
utf8proc_error	base/strings/unicode.jl	/^utf8proc_error(result) = error(unsafe_string(ccall(:utf8proc_errmsg, Cstring, (Cssize_t,), resul/;"	f
utf8proc_map	base/strings/unicode.jl	/^function utf8proc_map(str::String, options::Integer)$/;"	f
utf8proc_map	base/strings/unicode.jl	/^utf8proc_map(s::AbstractString, flags::Integer) = utf8proc_map(String(s), flags)$/;"	f
uu_iintrinsic	src/runtime_intrinsics.c	/^#define uu_iintrinsic(/;"	d	file:
uu_iintrinsic_ctype	src/runtime_intrinsics.c	/^#define uu_iintrinsic_ctype(/;"	d	file:
uu_iintrinsic_fast	src/runtime_intrinsics.c	/^#define uu_iintrinsic_fast(/;"	d	file:
uu_iintrinsic_slow	src/runtime_intrinsics.c	/^#define uu_iintrinsic_slow(/;"	d	file:
uuid	src/julia.h	/^    jl_uuid_t uuid;$/;"	m	struct:_jl_module_t	typeref:typename:jl_uuid_t
uuid1	stdlib/UUIDs/src/UUIDs.jl	/^function uuid1(rng::AbstractRNG=Random.default_rng())$/;"	f
uuid4	stdlib/UUIDs/src/UUIDs.jl	/^function uuid4(rng::AbstractRNG=Random.default_rng())$/;"	f
uuid5	base/loading.jl	/^function uuid5(namespace::UUID, key::String)$/;"	f
uuid5	stdlib/UUIDs/src/UUIDs.jl	/^function uuid5(ns::UUID, name::String)$/;"	f
uuid_version	stdlib/UUIDs/src/UUIDs.jl	/^uuid_version(u::UUID) = Int((u.value >> 76) & 0xf)$/;"	f
uuids	stdlib/UUIDs/test/runtests.jl	/^uuids = [uuid.UUID("22b4a8a1-e548-4eeb-9270-60426d66a48e")]$/;"	v
uv__stream_fd	src/jl_uv.c	/^#define uv__stream_fd(/;"	d	file:
uv_alloc_buf	base/libuv.jl	/^function uv_alloc_buf end$/;"	f
uv_alloc_buf	base/stream.jl	/^function uv_alloc_buf(handle::Ptr{Cvoid}, size::Csize_t, buf::Ptr{Cvoid})$/;"	f
uv_asynccb	base/asyncevent.jl	/^function uv_asynccb(handle::Ptr{Cvoid})$/;"	f
uv_asynccb	base/libuv.jl	/^function uv_asynccb end$/;"	f
uv_connectcb	stdlib/Sockets/src/Sockets.jl	/^function uv_connectcb(conn::Ptr{Cvoid}, status::Cint)$/;"	f
uv_connectioncb	stdlib/Sockets/src/Sockets.jl	/^function uv_connectioncb(stream::Ptr{Cvoid}, status::Cint)$/;"	f
uv_dirent_t	base/file.jl	/^struct uv_dirent_t$/;"	f
uv_dup	src/init.c	/^int uv_dup(uv_os_fd_t fd, uv_os_fd_t* dupfd) {$/;"	f	typeref:typename:int
uv_error	base/libuv.jl	/^uv_error(prefix::AbstractString, c::Integer) = c < 0 ? throw(_UVError(prefix, c)) : nothing$/;"	f
uv_error	base/libuv.jl	/^uv_error(prefix::Symbol, c::Integer) = uv_error(string(prefix), c)$/;"	f
uv_flush_callback	src/jl_uv.c	/^static void uv_flush_callback(uv_write_t *req, int status)$/;"	f	typeref:typename:void	file:
uv_fseventscb_file	stdlib/FileWatching/src/FileWatching.jl	/^function uv_fseventscb_file(handle::Ptr{Cvoid}, filename::Ptr, events::Int32, status::Int32)$/;"	f
uv_fseventscb_folder	stdlib/FileWatching/src/FileWatching.jl	/^function uv_fseventscb_folder(handle::Ptr{Cvoid}, filename::Ptr, events::Int32, status::Int32)$/;"	f
uv_fspollcb	stdlib/FileWatching/src/FileWatching.jl	/^function uv_fspollcb(handle::Ptr{Cvoid}, status::Int32, prev::Ptr, curr::Ptr)$/;"	f
uv_getaddrinfocb	stdlib/Sockets/src/addrinfo.jl	/^function uv_getaddrinfocb(req::Ptr{Cvoid}, status::Cint, addrinfo::Ptr{Cvoid})$/;"	f
uv_getnameinfocb	stdlib/Sockets/src/addrinfo.jl	/^function uv_getnameinfocb(req::Ptr{Cvoid}, status::Cint, hostname::Cstring, service::Cstring)$/;"	f
uv_handle_data	base/libuv.jl	/^uv_handle_data(handle) = ccall(:jl_uv_handle_data, Ptr{Cvoid}, (Ptr{Cvoid},), handle)$/;"	f
uv_pollcb	stdlib/FileWatching/src/FileWatching.jl	/^function uv_pollcb(handle::Ptr{Cvoid}, status::Int32, events::Int32)$/;"	f
uv_readcb	base/libuv.jl	/^function uv_readcb end$/;"	f
uv_readcb	base/stream.jl	/^function uv_readcb(handle::Ptr{Cvoid}, nread::Cssize_t, buf::Ptr{Cvoid})$/;"	f
uv_recvcb	stdlib/Sockets/src/Sockets.jl	/^function uv_recvcb(handle::Ptr{Cvoid}, nread::Cssize_t, buf::Ptr{Cvoid}, addr::Ptr{Cvoid}, flags/;"	f
uv_req_data	base/libuv.jl	/^uv_req_data(handle) = ccall(:jl_uv_req_data, Ptr{Cvoid}, (Ptr{Cvoid},), handle)$/;"	f
uv_req_set_data	base/libuv.jl	/^uv_req_set_data(req, data) = ccall(:jl_uv_req_set_data, Cvoid, (Ptr{Cvoid}, Any), req, data)$/;"	f
uv_req_set_data	base/libuv.jl	/^uv_req_set_data(req, data::Ptr{Cvoid}) = ccall(:jl_uv_req_set_data, Cvoid, (Ptr{Cvoid}, Ptr{Cvoi/;"	f
uv_return_spawn	base/libuv.jl	/^function uv_return_spawn end$/;"	f
uv_return_spawn	base/process.jl	/^function uv_return_spawn(p::Ptr{Cvoid}, exit_status::Int64, termsignal::Int32)$/;"	f
uv_shutdown_queue	src/init.c	/^struct uv_shutdown_queue { struct uv_shutdown_queue_item *first; struct uv_shutdown_queue_item */;"	s	file:
uv_shutdown_queue_item	src/init.c	/^struct uv_shutdown_queue_item { uv_handle_t *h; struct uv_shutdown_queue_item *next; };$/;"	s	file:
uv_sizeof_handle	base/libuv.jl	/^function uv_sizeof_handle(handle)$/;"	f
uv_sizeof_req	base/libuv.jl	/^function uv_sizeof_req(req)$/;"	f
uv_sockaddr_in	src/jl_uv.c	/^} uv_sockaddr_in;$/;"	t	typeref:union:__anonef7d25cd010a	file:
uv_status_string	base/stream.jl	/^function uv_status_string(x)$/;"	f
uv_timercb	base/asyncevent.jl	/^function uv_timercb(handle::Ptr{Cvoid})$/;"	f
uv_timercb	base/libuv.jl	/^function uv_timercb end$/;"	f
uv_write	base/stream.jl	/^function uv_write(s::LibuvStream, p::Ptr{UInt8}, n::UInt)$/;"	f
uv_write	base/stream.jl	/^uv_write(s::LibuvStream, p::Vector{UInt8}) = uv_write(s, pointer(p), UInt(sizeof(p)))$/;"	f
uv_write_async	base/stream.jl	/^function uv_write_async(s::LibuvStream, p::Ptr{UInt8}, n::UInt)$/;"	f
uv_writecb_task	base/libuv.jl	/^function uv_writecb_task end$/;"	f
uv_writecb_task	base/stream.jl	/^function uv_writecb_task(req::Ptr{Cvoid}, status::Cint)$/;"	f
uverrorname	base/libuv.jl	/^uverrorname(err::Int32) = unsafe_string(ccall(:uv_err_name, Cstring, (Int32,), err))$/;"	f
uvfinalize	base/asyncevent.jl	/^function uvfinalize(t::Union{Timer, AsyncCondition})$/;"	f
uvfinalize	base/process.jl	/^function uvfinalize(proc::Process)$/;"	f
uvfinalize	base/stream.jl	/^function uvfinalize(uv::Union{LibuvStream, LibuvServer})$/;"	f
uvfinalize	base/stream.jl	/^uvfinalize(s::BufferStream) = nothing$/;"	f
uvfinalize	stdlib/FileWatching/src/FileWatching.jl	/^        function uvfinalize(t::_FDWatcher)$/;"	f
uvfinalize	stdlib/FileWatching/src/FileWatching.jl	/^function uvfinalize(uv::Union{FileMonitor, FolderMonitor, PollingFileWatcher})$/;"	f
uvhandles	base/libuv.jl	/^const uvhandles = IdDict()$/;"	v
v	src/ccalltest.c	/^    float32x4_t v;$/;"	m	struct:__anon84ad8c4c2c08	typeref:typename:float32x4_t	file:
v	src/ccalltest.c	/^    } v[2];$/;"	m	struct:__anon84ad8c4c3408	typeref:struct:__anon84ad8c4c3408::__anon84ad8c4c3508[2]	file:
v	src/rtutils.c	/^    jl_value_t *v;$/;"	m	struct:recur_list	typeref:typename:jl_value_t *	file:
v	stdlib/Distributed/test/distributed_exec.jl	/^v = rand()$/;"	v
v	test/grisu.jl	/^v = -3.9292015898194142585311918e-10$/;"	v
v	test/grisu.jl	/^v = 1.0000000000000012800000000e+17$/;"	v
v	test/grisu.jl	/^v = 3.3161339052167390562200598e-237$/;"	v
v	test/grisu.jl	/^v = 3.9292015898194142585311918e-10$/;"	v
v	test/grisu.jl	/^v = 4194304.0$/;"	v
v	test/grisu.jl	/^v = 7.9885183916008099497815232e+191$/;"	v
v	test/grisu.jl	/^v = reinterpret(Float32,0x007FFFFF)$/;"	v
v	test/grisu.jl	/^v = reinterpret(Float32,0x00800000)$/;"	v
v	test/grisu.jl	/^v = reinterpret(Float32,largest_denormal32)$/;"	v
v	test/grisu.jl	/^v = reinterpret(Float32,smallest_normal32)$/;"	v
v	test/grisu.jl	/^v = reinterpret(Float64,0x000FFFFFFFFFFFFF)$/;"	v
v	test/grisu.jl	/^v = reinterpret(Float64,0x0010000000000000)$/;"	v
v	test/grisu.jl	/^v = reinterpret(Float64,largest_denormal64)$/;"	v
v	test/grisu.jl	/^v = reinterpret(Float64,smallest_normal64)$/;"	v
v	test/offsetarray.jl	/^v = OffsetArray(rand(3), (-2,))$/;"	v
v	test/offsetarray.jl	/^v = OffsetArray(rand(4), (-3,))$/;"	v
v	test/offsetarray.jl	/^v = OffsetArray(rand(8), (-2,))$/;"	v
v	test/offsetarray.jl	/^v = OffsetArray(v0, (-3,))$/;"	v
v	test/offsetarray.jl	/^v = view(A0, 1:1, i1)$/;"	v
v	test/offsetarray.jl	/^v = view(A0, i1, 1)$/;"	v
v0	test/offsetarray.jl	/^v0 = rand(4)$/;"	v
v1	src/ccalltest.c	/^    __fp16 v1;$/;"	m	struct:__anon84ad8c4c2908	typeref:typename:__fp16	file:
v1	src/ccalltest.c	/^    float32x2_t v1;$/;"	m	struct:__anon84ad8c4c3008	typeref:typename:float32x2_t	file:
v1	src/ccalltest.c	/^    float32x4_t v1;$/;"	m	struct:__anon84ad8c4c2d08	typeref:typename:float32x4_t	file:
v1	src/ccalltest.c	/^    float32x4_t v1;$/;"	m	struct:__anon84ad8c4c2e08	typeref:typename:float32x4_t	file:
v1	src/ccalltest.c	/^    float32x4_t v1;$/;"	m	struct:__anon84ad8c4c3908	typeref:typename:float32x4_t	file:
v1	src/ccalltest.c	/^    float32x4_t v1[8];$/;"	m	struct:__anon84ad8c4c3208	typeref:typename:float32x4_t[8]	file:
v1	src/ccalltest.c	/^    float32x4_t v1[8];$/;"	m	struct:__anon84ad8c4c3308	typeref:typename:float32x4_t[8]	file:
v1	src/ccalltest.c	/^    float32x4_t v1[9];$/;"	m	struct:__anon84ad8c4c3108	typeref:typename:float32x4_t[9]	file:
v1	src/ccalltest.c	/^    int16x8_t v1;$/;"	m	struct:__anon84ad8c4c2b08	typeref:typename:int16x8_t	file:
v1	src/ccalltest.c	/^    int32_t v1;$/;"	m	struct:__anon84ad8c4c2808	typeref:typename:int32_t	file:
v1	src/ccalltest.c	/^    int32x4_t v1;$/;"	m	struct:__anon84ad8c4c3808	typeref:typename:int32x4_t	file:
v1	src/ccalltest.c	/^    int8x8_t v1;$/;"	m	struct:__anon84ad8c4c2a08	typeref:typename:int8x8_t	file:
v1	test/bitarray.jl	/^v1 = 260$/;"	v
v15406	stdlib/Distributed/test/distributed_exec.jl	/^v15406 = remotecall_wait(() -> 1, id_other)$/;"	v
v18236	test/core.jl	/^v18236 = VecElement(1.0)$/;"	v
v18236_2	test/core.jl	/^v18236_2 = VecElement((Int8(1), Int8(2)))$/;"	v
v2	src/ccalltest.c	/^    __int128 v2;$/;"	m	struct:__anon84ad8c4c2808	typeref:typename:__int128	file:
v2	src/ccalltest.c	/^    double v2;$/;"	m	struct:__anon84ad8c4c2908	typeref:typename:double	file:
v2	src/ccalltest.c	/^    float32x2_t v2;$/;"	m	struct:__anon84ad8c4c2a08	typeref:typename:float32x2_t	file:
v2	src/ccalltest.c	/^    float32x2_t v2;$/;"	m	struct:__anon84ad8c4c2b08	typeref:typename:float32x2_t	file:
v2	src/ccalltest.c	/^    float32x4_t v2;$/;"	m	struct:__anon84ad8c4c3208	typeref:typename:float32x4_t	file:
v2	src/ccalltest.c	/^    float32x4_t v2;$/;"	m	struct:__anon84ad8c4c3808	typeref:typename:float32x4_t	file:
v2	src/ccalltest.c	/^    float64x2_t v2;$/;"	m	struct:__anon84ad8c4c3008	typeref:typename:float64x2_t	file:
v2	src/ccalltest.c	/^    float64x2_t v2;$/;"	m	struct:__anon84ad8c4c3908	typeref:typename:float64x2_t	file:
v2	src/ccalltest.c	/^    int32x2_t v2;$/;"	m	struct:__anon84ad8c4c2d08	typeref:typename:int32x2_t	file:
v2	test/offsetarray.jl	/^v2 = copy(v)$/;"	v
v20704	test/compiler/inference.jl	/^v20704() = Val{b20704(Any[1.0][1])}$/;"	f
v23024	test/compiler/inference.jl	/^v23024 = 0$/;"	v
v2669	stdlib/Distributed/test/distributed_exec.jl	/^v2669=10$/;"	v
v31252	stdlib/Distributed/test/distributed_exec.jl	/^v31252 = :a$/;"	v
v31252	stdlib/Distributed/test/distributed_exec.jl	/^v31252 = :b$/;"	v
v4	src/jl_uv.c	/^    struct sockaddr_in v4;$/;"	m	union:__anonef7d25cd010a	typeref:struct:sockaddr_in	file:
v5	stdlib/Distributed/test/distributed_exec.jl	/^v5 = FooStructEverywhere$/;"	v
v5	stdlib/Distributed/test/distributed_exec.jl	/^v5 = FooStructLocal$/;"	v
v6	src/jl_uv.c	/^    struct sockaddr_in6 v6;$/;"	m	union:__anonef7d25cd010a	typeref:struct:sockaddr_in6	file:
v6	stdlib/Distributed/test/distributed_exec.jl	/^v6 = FooModEverywhere$/;"	v
v6	stdlib/Distributed/test/distributed_exec.jl	/^v6 = FooModLocal$/;"	v
v6387	test/core.jl	/^function v6387(r::AbstractRange{T}) where T$/;"	f
v7	stdlib/Distributed/test/distributed_exec.jl	/^v7 = ones(10)$/;"	v
v_str	base/version.jl	/^macro v_str(v); VersionNumber(v); end$/;"	f
va	src/julia.h	/^    int8_t va; \/\/ isVararg(sig)$/;"	m	struct:_jl_typemap_entry_t	typeref:typename:int8_t
va	src/julia_internal.h	/^    jl_value_t *va; \/\/ the tparam0 for the vararg in type, if applicable (or NULL)$/;"	m	struct:typemap_intersection_env	typeref:typename:jl_value_t *
vaSlot	src/codegen.cpp	/^    int vaSlot = -1;        \/\/ name of vararg argument$/;"	m	class:jl_codectx_t	typeref:typename:int	file:
val	src/getopt.h	/^  int val;$/;"	m	struct:option	typeref:typename:int
val	src/julia_internal.h	/^    jl_value_t *val;$/;"	m	struct:jl_typeenv_t	typeref:typename:jl_value_t *
val	src/llvm-multiversioning.cpp	/^        T *val;$/;"	m	struct:__anond5683ea40111::ConstantUses::Info	typeref:typename:T *	file:
val	test/docs.jl	/^const val = Foo(1.0)$/;"	v
val_for_def_expr	base/compiler/ssair/passes.jl	/^function val_for_def_expr(ir::IRCode, def::Int, fidx::Int)$/;"	f
val_opts	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^function val_opts(opts)$/;"	f
valgrind_do_client_request_expr	deps/valgrind/valgrind.h	/^valgrind_do_client_request_expr(uintptr_t _zzq_default, uintptr_t _zzq_request,$/;"	f	typeref:typename:uintptr_t
valgrind_off	test/spawn.jl	/^valgrind_off = ccall(:jl_running_on_valgrind, Cint, ()) == 0$/;"	v
valid-1arg-func-sig?	src/julia-parser.scm	/^(define (valid-1arg-func-sig? sig)$/;"	f
valid-func-sig?	src/julia-parser.scm	/^(define (valid-func-sig? paren sig)$/;"	f
valid-ir-argument?	src/julia-syntax.scm	/^(define (valid-ir-argument? e)$/;"	f
valid-ir-return?	src/julia-syntax.scm	/^(define (valid-ir-return? e)$/;"	f
valid-ir-rvalue?	src/julia-syntax.scm	/^(define (valid-ir-rvalue? lhs e)$/;"	f
valid-modref?	src/julia-parser.scm	/^(define (valid-modref? e)$/;"	f
valid-name?	src/ast.scm	/^(define (valid-name? s)$/;"	f
valid_import_path	base/show.jl	/^function valid_import_path(@nospecialize ex)$/;"	f
valid_numtype	src/flisp/flisp.h	/^#define valid_numtype(/;"	d
valid_opt_types	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^const valid_opt_types = [Bool, Bool, Bool, Bool, Bool, NTuple{2,Integer}, Char, Integer, Bool]$/;"	v
valid_opts	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^const valid_opts = [:header, :has_header, :use_mmap, :quotes, :comments, :dims, :comment_char, :/;"	v
valid_python	deps/tools/find_python2	/^valid_python() {$/;"	f
valid_tparam	base/compiler/typeutils.jl	/^function valid_tparam(@nospecialize(x))$/;"	f
validargs	stdlib/Dates/src/types.jl	/^function validargs end$/;"	f
validargs	stdlib/Dates/src/types.jl	/^function validargs(::Type{DateTime}, y::Int64, m::Int64, d::Int64,$/;"	f
validargs	stdlib/Dates/src/types.jl	/^function validargs(::Type{Date}, y::Int64, m::Int64, d::Int64)$/;"	f
validargs	stdlib/Dates/src/types.jl	/^function validargs(::Type{Time}, h::Int64, mi::Int64, s::Int64, ms::Int64, us::Int64, ns::Int64,/;"	f
validate_code	base/compiler/validation.jl	/^validate_code(args...) = validate_code!(Vector{InvalidCodeError}(), args...)$/;"	f
validate_code!	base/compiler/validation.jl	/^function validate_code!(errors::Vector{>:InvalidCodeError}, c::CodeInfo, is_top_level::Bool = fa/;"	f
validate_code!	base/compiler/validation.jl	/^function validate_code!(errors::Vector{>:InvalidCodeError}, mi::Core.MethodInstance,$/;"	f
validate_code_in_debug_mode	base/compiler/validation.jl	/^function validate_code_in_debug_mode(linfo::MethodInstance, src::CodeInfo, kind::String)$/;"	f
validate_keymap	stdlib/REPL/src/LineEdit.jl	/^function validate_keymap(keymap)$/;"	f
validate_val!	base/compiler/validation.jl	/^    function validate_val!(@nospecialize(x))$/;"	f
validcall	base/docs/Docs.jl	/^validcall(x) = isa(x, Symbol) || isexpr(x, (:(::), :..., :kw, :parameters))$/;"	f
vals	src/flisp/flisp.h	/^    value_t vals;$/;"	m	struct:__anonb455601d0708	typeref:typename:value_t
vals	test/enums.jl	/^vals = [apple,orange,kiwi]$/;"	v
vals	test/hashing.jl	/^vals = Any[$/;"	v
vals	test/hashing.jl	/^vals = vcat($/;"	v
valtype	base/abstractarray.jl	/^valtype(A::Type{<:AbstractArray}) = eltype(A)$/;"	f
valtype	base/abstractarray.jl	/^valtype(a::AbstractArray) = valtype(typeof(a))$/;"	f
valtype	base/abstractdict.jl	/^valtype(::Type{<:AbstractDict{K,V}}) where {K,V} = V$/;"	f
valtype	base/abstractdict.jl	/^valtype(a::AbstractDict) = valtype(typeof(a))$/;"	f
valtype_is_correct	test/ranges.jl	/^        valtype_is_correct(r) = valtype(r) == eltype(values(r))$/;"	f
value	src/codegen.cpp	/^    jl_cgval_t value; \/\/ a stack slot or constant value$/;"	m	struct:jl_varinfo_t	typeref:typename:jl_cgval_t	file:
value	src/julia.h	/^        jl_value_t *value; \/\/ generic accessor$/;"	m	union:_jl_method_instance_t::__anon055fe427070a	typeref:typename:jl_value_t *
value	src/julia.h	/^        jl_value_t *value; \/\/ generic accessor$/;"	m	union:_jl_typemap_entry_t::__anon055fe427130a	typeref:typename:jl_value_t *
value	src/julia.h	/^    double value;$/;"	m	struct:__anon055fe4271908	typeref:typename:double
value	src/julia.h	/^    float value;$/;"	m	struct:__anon055fe4271a08	typeref:typename:float
value	src/julia.h	/^    jl_value_t *value;$/;"	m	struct:__anon055fe4271008	typeref:typename:JL_DATA_TYPE jl_value_t *
value	src/julia.h	/^    jl_value_t *value;$/;"	m	struct:__anon055fe4271108	typeref:typename:jl_value_t *
value	stdlib/Dates/src/accessors.jl	/^value(dt::TimeType) = dt.instant.periods.value$/;"	f
value	stdlib/Dates/src/accessors.jl	/^value(t::Time) = t.instant.value$/;"	f
value	stdlib/Dates/src/periods.jl	/^value(x::Period) = x.value$/;"	f
value2c	src/flisp/flisp.h	/^#define value2c(/;"	d
value_t	src/flisp/flisp.h	/^typedef uintptr_t value_t;$/;"	t	typeref:typename:uintptr_t
value_to_pointer	src/codegen.cpp	/^static inline jl_cgval_t value_to_pointer(jl_codectx_t &ctx, Value *v, jl_value_t *typ, Value *t/;"	f	typeref:typename:jl_cgval_t	file:
value_to_pointer	src/codegen.cpp	/^static inline jl_cgval_t value_to_pointer(jl_codectx_t &ctx, const jl_cgval_t &v)$/;"	f	typeref:typename:jl_cgval_t	file:
values	base/abstractdict.jl	/^values(a::AbstractDict) = ValueIterator(a)$/;"	f
values	base/essentials.jl	/^values(itr) = itr$/;"	f
values	base/iterators.jl	/^values(v::Pairs) = v.data$/;"	f
values	base/namedtuple.jl	/^values(nt::NamedTuple) = Tuple(nt)$/;"	f
values	src/julia.h	/^    jl_array_t *values; \/\/ Array{jl_typemap_t*}$/;"	m	struct:jl_ordereddict_t	typeref:typename:jl_array_t *
var	base/docs/bindings.jl	/^macro var(x)$/;"	f
var	src/builtins.c	/^    jl_tvar_t *var;$/;"	m	struct:_varidx	typeref:typename:jl_tvar_t *	file:
var	src/julia.h	/^    jl_tvar_t *var;$/;"	m	struct:__anon055fe4270908	typeref:typename:JL_DATA_TYPE jl_tvar_t *
var	src/julia_internal.h	/^    jl_tvar_t *var;$/;"	m	struct:jl_typeenv_t	typeref:typename:jl_tvar_t *
var	src/subtype.c	/^    jl_tvar_t *var;$/;"	m	struct:jl_varbinding_t	typeref:typename:jl_tvar_t *	file:
var	stdlib/Statistics/src/Statistics.jl	/^function var(v::AbstractRange)$/;"	f
var	stdlib/Statistics/src/Statistics.jl	/^var(A::AbstractArray; corrected::Bool=true, mean=nothing, dims=:) = _var(A, corrected, mean, dim/;"	f
var	stdlib/Statistics/src/Statistics.jl	/^var(iterable; corrected::Bool=true, mean=nothing) = _var(iterable, corrected, mean)$/;"	f
var	test/clangsa/MissingRoots.c	/^    jl_tvar_t *var;$/;"	m	struct:_varbinding	typeref:typename:jl_tvar_t *	file:
var-info-for	src/ast.scm	/^(define var-info-for assq)$/;"	f
var-kind	src/julia-syntax.scm	/^(define (var-kind var scope)$/;"	f
var_gt	src/subtype.c	/^static int var_gt(jl_tvar_t *b, jl_value_t *a, jl_stenv_t *e, int param)$/;"	f	typeref:typename:int	file:
var_lt	src/subtype.c	/^static int var_lt(jl_tvar_t *b, jl_value_t *a, jl_stenv_t *e, int param)$/;"	f	typeref:typename:int	file:
var_occurs_inside	src/subtype.c	/^static int var_occurs_inside(jl_value_t *v, jl_tvar_t *var, int inside, int want_inv) JL_NOTSAFE/;"	f	typeref:typename:int	file:
var_outside	src/subtype.c	/^static int var_outside(jl_stenv_t *e, jl_tvar_t *x, jl_tvar_t *y)$/;"	f	typeref:typename:int	file:
vararg-op	src/julia-parser.scm	/^(define vararg-op (string->symbol "..."))$/;"	f
vararg?	src/ast.scm	/^(define (vararg? x) (and (pair? x) (eq? (car x) '...)))$/;"	f
varargexpr?	src/ast.scm	/^(define (varargexpr? x) (and$/;"	f
variant	src/processor_arm.cpp	/^    uint8_t variant;$/;"	m	struct:ARM::CPUID	typeref:typename:uint8_t	file:
varinfo	stdlib/InteractiveUtils/src/InteractiveUtils.jl	/^function varinfo(m::Module=Main, pattern::Regex=r"")$/;"	f
varinfo	stdlib/InteractiveUtils/src/InteractiveUtils.jl	/^varinfo(pat::Regex) = varinfo(Main, pat)$/;"	f
varm	stdlib/Statistics/src/Statistics.jl	/^varm(A::AbstractArray, m::AbstractArray; corrected::Bool=true, dims=:) = _varm(A, m, corrected, /;"	f
varm	stdlib/Statistics/src/Statistics.jl	/^varm(A::AbstractArray, m; corrected::Bool=true) = _varm(A, m, corrected, :)$/;"	f
varm	stdlib/Statistics/src/Statistics.jl	/^varm(iterable, m; corrected::Bool=true) = _var(iterable, corrected, m)$/;"	f
varm	stdlib/Statistics/src/Statistics.jl	/^varm(v::AbstractRange, m) = range_varm(v, m)$/;"	f
varm	stdlib/Statistics/src/Statistics.jl	/^varm(v::AbstractRange, m::AbstractArray) = range_varm(v, m)$/;"	f
varm!	stdlib/Statistics/src/Statistics.jl	/^function varm!(R::AbstractArray{S}, A::AbstractArray, m::AbstractArray; corrected::Bool=true) wh/;"	f
vars	src/subtype.c	/^    jl_varbinding_t *vars;    \/\/ type variable environment$/;"	m	struct:jl_stenv_t	typeref:typename:jl_varbinding_t *	file:
vars-introduced-by-patterns	src/macroexpand.scm	/^(define vars-introduced-by-patterns$/;"	f
vasprintf	src/support/asprintf.c	/^vasprintf(char **str, const char *fmt, va_list ap)$/;"	f	typeref:typename:int
vcat	base/abstractarray.jl	/^vcat(A::AbstractArray) = cat(A; dims=Val(1))$/;"	f
vcat	base/abstractarray.jl	/^vcat(A::AbstractArray, B::AbstractArray) = cat(A, B; dims=Val(1))$/;"	f
vcat	base/abstractarray.jl	/^vcat(A::AbstractArray...) = cat(A...; dims=Val(1))$/;"	f
vcat	base/abstractarray.jl	/^vcat(A::AbstractVecOrMat...) = typed_vcat(promote_eltype(A...), A...)$/;"	f
vcat	base/abstractarray.jl	/^vcat(A::AbstractVecOrMat{T}...) where {T} = typed_vcat(T, A...)$/;"	f
vcat	base/abstractarray.jl	/^vcat(V::AbstractVector...) = typed_vcat(promote_eltype(V...), V...)$/;"	f
vcat	base/abstractarray.jl	/^vcat(V::AbstractVector{T}...) where {T} = typed_vcat(T, V...)$/;"	f
vcat	base/abstractarray.jl	/^vcat(X...) = cat(X...; dims=Val(1))$/;"	f
vcat	base/abstractarray.jl	/^vcat(X::Number...) = hvcat_fill(Vector{promote_typeof(X...)}(undef, length(X)), X)$/;"	f
vcat	base/abstractarray.jl	/^vcat(X::T...) where {T<:Number} = T[ X[i] for i=1:length(X) ]$/;"	f
vcat	base/abstractarray.jl	/^vcat(X::T...) where {T}         = T[ X[i] for i=1:length(X) ]$/;"	f
vcat	base/array.jl	/^function vcat(arrays::Vector{T}...) where T$/;"	f
vcat	base/array.jl	/^vcat() = Vector{Any}()$/;"	f
vcat	base/bitarray.jl	/^function vcat(A::BitMatrix...)$/;"	f
vcat	base/bitarray.jl	/^function vcat(V::BitVector...)$/;"	f
vcat	base/range.jl	/^function vcat(rs::AbstractRange{T}...) where T$/;"	f
vcat	stdlib/SparseArrays/src/sparsematrix.jl	/^function vcat(X::AbstractSparseMatrixCSC...)$/;"	f
vcat	stdlib/SparseArrays/src/sparsevector.jl	/^function vcat(X::SparseVector...)$/;"	f
vcat	stdlib/SparseArrays/src/sparsevector.jl	/^function vcat(Xin::_SparseConcatGroup...)$/;"	f
vcat	stdlib/SparseArrays/src/sparsevector.jl	/^vcat(A::Vector...) = Base.typed_vcat(promote_eltype(A...), A...)$/;"	f
vcat	stdlib/SparseArrays/src/sparsevector.jl	/^vcat(A::_DenseConcatGroup...) = Base.typed_vcat(promote_eltype(A...), A...)$/;"	f
vcat	stdlib/SparseArrays/src/sparsevector.jl	/^vcat(A::_TypedDenseConcatGroup{T}...) where {T} = Base.typed_vcat(T, A...)$/;"	f
vcat	stdlib/SparseArrays/src/sparsevector.jl	/^vcat(X::AbstractSparseVector{Tv,Ti}...) where {Tv,Ti<:Integer} = _absspvec_vcat(X...)$/;"	f
vcat	stdlib/SparseArrays/src/sparsevector.jl	/^vcat(X::SparseVector{Tv,Ti}...) where {Tv,Ti<:Integer} = _absspvec_vcat(X...)$/;"	f
vcat	stdlib/SparseArrays/src/sparsevector.jl	/^vcat(X::Union{Vector,SparseVector}...) = vcat(map(sparse, X)...)$/;"	f
vcat	stdlib/SparseArrays/src/sparsevector.jl	/^vcat(Xin::Union{Vector, AbstractSparseVector}...) = vcat(map(sparse, Xin)...)$/;"	f
vd_aux	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word	vd_aux;			\/* Offset in bytes to verdaux array *\/$/;"	m	struct:__anonff7a58691308	typeref:typename:Elf32_Word
vd_aux	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Word	vd_aux;			\/* Offset in bytes to verdaux array *\/$/;"	m	struct:__anonff7a58691408	typeref:typename:Elf64_Word
vd_cnt	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Half	vd_cnt;			\/* Number of associated aux entries *\/$/;"	m	struct:__anonff7a58691308	typeref:typename:Elf32_Half
vd_cnt	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Half	vd_cnt;			\/* Number of associated aux entries *\/$/;"	m	struct:__anonff7a58691408	typeref:typename:Elf64_Half
vd_flags	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Half	vd_flags;		\/* Version information *\/$/;"	m	struct:__anonff7a58691308	typeref:typename:Elf32_Half
vd_flags	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Half	vd_flags;		\/* Version information *\/$/;"	m	struct:__anonff7a58691408	typeref:typename:Elf64_Half
vd_hash	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word	vd_hash;		\/* Version name hash value *\/$/;"	m	struct:__anonff7a58691308	typeref:typename:Elf32_Word
vd_hash	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Word	vd_hash;		\/* Version name hash value *\/$/;"	m	struct:__anonff7a58691408	typeref:typename:Elf64_Word
vd_ndx	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Half	vd_ndx;			\/* Version Index *\/$/;"	m	struct:__anonff7a58691308	typeref:typename:Elf32_Half
vd_ndx	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Half	vd_ndx;			\/* Version Index *\/$/;"	m	struct:__anonff7a58691408	typeref:typename:Elf64_Half
vd_next	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word	vd_next;		\/* Offset in bytes to next verdef$/;"	m	struct:__anonff7a58691308	typeref:typename:Elf32_Word
vd_next	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Word	vd_next;		\/* Offset in bytes to next verdef$/;"	m	struct:__anonff7a58691408	typeref:typename:Elf64_Word
vd_version	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Half	vd_version;		\/* Version revision *\/$/;"	m	struct:__anonff7a58691308	typeref:typename:Elf32_Half
vd_version	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Half	vd_version;		\/* Version revision *\/$/;"	m	struct:__anonff7a58691408	typeref:typename:Elf64_Half
vda_name	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word	vda_name;		\/* Version or dependency names *\/$/;"	m	struct:__anonff7a58691508	typeref:typename:Elf32_Word
vda_name	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Word	vda_name;		\/* Version or dependency names *\/$/;"	m	struct:__anonff7a58691608	typeref:typename:Elf64_Word
vda_next	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word	vda_next;		\/* Offset in bytes to next verdaux$/;"	m	struct:__anonff7a58691508	typeref:typename:Elf32_Word
vda_next	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Word	vda_next;		\/* Offset in bytes to next verdaux$/;"	m	struct:__anonff7a58691608	typeref:typename:Elf64_Word
vec	base/abstractarraymath.jl	/^vec(a::AbstractArray) = reshape(a,length(a))$/;"	f
vec	base/abstractarraymath.jl	/^vec(a::AbstractVector) = a$/;"	f
vec	stdlib/LinearAlgebra/src/adjtrans.jl	/^vec(v::TransposeAbsVec) = parent(v)$/;"	f
vec	stdlib/SparseArrays/src/sparsevector.jl	/^vec(x::AbstractSparseVector) = x$/;"	f
vecadd	test/vecelement.jl	/^@generated function vecadd(x::Vec{N, T}, y::Vec{N, T}) where {N, T}$/;"	f
vect	base/array.jl	/^function vect(X...)$/;"	f
vect	base/array.jl	/^vect() = Vector{Any}()$/;"	f
vect	base/array.jl	/^vect(X::T...) where {T} = T[ X[i] for i = 1:length(X) ]$/;"	f
vector-length	src/flisp/aliases.scm	/^(define vector-length length)$/;"	f
vector-ref	src/flisp/aliases.scm	/^(define vector-ref aref)$/;"	f
vector-set!	src/flisp/aliases.scm	/^(define vector-set! aset!)$/;"	f
vector_elt	src/flisp/flisp.h	/^#define vector_elt(/;"	d
vector_grow	src/flisp/read.c	/^static value_t vector_grow(fl_context_t *fl_ctx, value_t v, int rewrite_refs)$/;"	f	typeref:typename:value_t	file:
vector_grow_amt	src/flisp/flisp.h	/^#define vector_grow_amt(/;"	d
vector_setsize	src/flisp/flisp.h	/^#define vector_setsize(/;"	d
vector_size	src/flisp/flisp.h	/^#define vector_size(/;"	d
vectorfilter	base/array.jl	/^vectorfilter(f, v) = [x for x in v if f(x)]$/;"	f
vectorfilter	base/array.jl	/^vectorfilter(f, v::AbstractVector) = filter(f, v) # TODO: do we want this special case?$/;"	f
vectorsym	src/flisp/flisp.h	/^    value_t pairsym, symbolsym, fixnumsym, vectorsym, builtinsym, vu8sym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
vendor	stdlib/Libdl/src/Libdl.jl	/^vendor = dlopen("libblas") do lib$/;"	v
vendor	stdlib/LinearAlgebra/src/blas.jl	/^vendor() = _vendor$/;"	f
verbose	src/ccalltest.c	/^int verbose = 1;$/;"	v	typeref:typename:int
verbose	test/ccall.jl	/^const verbose = false$/;"	v
verbose	test/read.jl	/^verbose = false$/;"	v
verbosity	src/disasm.cpp	/^    } verbosity = output_source;$/;"	m	class:DILineInfoPrinter	typeref:enum:DILineInfoPrinter::__anon2853c92e0103	file:
verify_batch_size	base/asyncmap.jl	/^function verify_batch_size(batch_size)$/;"	f
verify_ccall_sig	src/ccall.cpp	/^static const std::string verify_ccall_sig(jl_value_t *&rt, jl_value_t *at,$/;"	f	typeref:typename:const std::string	file:
verify_error	base/compiler/ssair/verify.jl	/^    macro verify_error(arg)$/;"	f
verify_huge	test/ccall.jl	/^function verify_huge(init, a, b)$/;"	f
verify_ir	base/compiler/ssair/verify.jl	/^function verify_ir(ir::IRCode)$/;"	f
verify_linetable	base/compiler/ssair/verify.jl	/^function verify_linetable(linetable::Vector{LineInfoNode})$/;"	f
verify_ntasks	base/asyncmap.jl	/^function verify_ntasks(iterable, ntasks)$/;"	f
verify_parent	src/gc.h	/^#define verify_parent(/;"	d
verify_parent1	src/gc.h	/^#define verify_parent1(/;"	d
verify_parent2	src/gc.h	/^#define verify_parent2(/;"	d
verify_ref_type	src/ccall.cpp	/^static bool verify_ref_type(jl_codectx_t &ctx, jl_value_t* ref, jl_unionall_t *unionall_env, int/;"	f	typeref:typename:bool	file:
verify_type	src/gf.c	/^STATIC_INLINE jl_value_t *verify_type(jl_value_t *v) JL_NOTSAFEPOINT$/;"	f	typeref:typename:STATIC_INLINE jl_value_t *
verify_val	src/gc.h	/^#define verify_val(/;"	d
version	base/gmp.jl	/^version() = VersionNumber(unsafe_string(unsafe_load(cglobal((:__gmp_version, :libgmp), Ptr{Cchar/;"	f
version	base/mpfr.jl	/^version() = VersionNumber(unsafe_string(ccall((:mpfr_get_version,:libmpfr), Ptr{Cchar}, ())))$/;"	f
version	contrib/mac/frameworkapp/JuliaLauncher/AppDelegate.m	/^@property(readonly, nullable) NSString *version;$/;"	p	interface:JuliaVariant
version	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/AppIcon.appiconset/Contents.json	/^    "version" : 1,$/;"	n	object:info
version	contrib/mac/frameworkapp/JuliaLauncher/Assets.xcassets/Contents.json	/^    "version" : 1,$/;"	n	object:info
version	stdlib/LibGit2/src/utils.jl	/^function version()$/;"	f
version	stdlib/LinearAlgebra/src/lapack.jl	/^function version()$/;"	f
versionComponents	contrib/mac/frameworkapp/JuliaLauncher/AppDelegate.m	/^- (NSArray<NSNumber *> *)versionComponents {$/;"	m	implementation:JuliaVariant
versionComponents	contrib/mac/frameworkapp/JuliaLauncher/AppDelegate.m	/^@property(readonly, nullable) NSArray<NSNumber *> *versionComponents;$/;"	p	interface:JuliaVariant
version_slug	base/loading.jl	/^function version_slug(uuid::UUID, sha1::SHA1, p::Int=5)$/;"	f
versioninfo	stdlib/InteractiveUtils/src/InteractiveUtils.jl	/^function versioninfo(io::IO=stdout; verbose::Bool=false)$/;"	f
versioninfo	stdlib/LinearAlgebra/src/LinearAlgebra.jl	/^function versioninfo(io::IO=stdout)$/;"	f
vertcat	stdlib/SuiteSparse/src/cholmod.jl	/^function vertcat(A::Sparse{Tv}, B::Sparse{Tv}, values::Bool) where Tv<:VRealTypes$/;"	f
very_general_type	src/gf.c	/^static int very_general_type(jl_value_t *t)$/;"	f	typeref:typename:int	file:
veteransday	stdlib/Dates/test/adjusters.jl	/^        veteransday(y) = (y, 11, 11)$/;"	f
vf	src/ccalltest.c	/^        float32x4_t vf[2];$/;"	m	struct:__anon84ad8c4c3408::__anon84ad8c4c3508	typeref:typename:float32x4_t[2]	file:
vf1	src/ccalltest.c	/^    float32x4_t vf1;$/;"	m	struct:__anon84ad8c4c3608	typeref:typename:float32x4_t	file:
vf2	src/ccalltest.c	/^        float32x4_t vf2[2];$/;"	m	struct:__anon84ad8c4c3608::__anon84ad8c4c3708	typeref:typename:float32x4_t[2]	file:
view	base/subarray.jl	/^function view(A::AbstractArray, I::Vararg{Any,N}) where {N}$/;"	f
view	base/views.jl	/^macro view(ex)$/;"	f
viewindexing	base/subarray.jl	/^viewindexing(I::Tuple{AbstractArray, Vararg{Any}}) = IndexCartesian()$/;"	f
viewindexing	base/subarray.jl	/^viewindexing(I::Tuple{AbstractRange, Vararg{ScalarIndex}}) = IndexLinear()$/;"	f
viewindexing	base/subarray.jl	/^viewindexing(I::Tuple{ScalarIndex, Vararg{Any}}) = (@_inline_meta; viewindexing(tail(I)))$/;"	f
viewindexing	base/subarray.jl	/^viewindexing(I::Tuple{Slice, AbstractUnitRange, Vararg{ScalarIndex}}) = IndexLinear()$/;"	f
viewindexing	base/subarray.jl	/^viewindexing(I::Tuple{Slice, Slice, Vararg{Any}}) = (@_inline_meta; viewindexing(tail(I)))$/;"	f
viewindexing	base/subarray.jl	/^viewindexing(I::Tuple{Slice, Slice, Vararg{ScalarIndex}}) = IndexLinear() # disambiguate$/;"	f
viewindexing	base/subarray.jl	/^viewindexing(I::Tuple{Vararg{Any}}) = IndexCartesian()$/;"	f
viewindexing	base/subarray.jl	/^viewindexing(I::Tuple{}) = IndexLinear()$/;"	f
views	base/views.jl	/^macro views(x)$/;"	f
vinfo:asgn	src/ast.scm	/^(define (vinfo:asgn v) (< 0 (logand (caddr v) 2)))$/;"	f
vinfo:capt	src/ast.scm	/^(define (vinfo:capt v) (< 0 (logand (caddr v) 1)))$/;"	f
vinfo:heap?	src/flisp/compiler.lsp	/^(define vinfo:heap? cadr)$/;"	f
vinfo:index	src/flisp/compiler.lsp	/^(define vinfo:index caddr)$/;"	f
vinfo:name	src/ast.scm	/^(define vinfo:name car)$/;"	f
vinfo:never-undef	src/ast.scm	/^(define (vinfo:never-undef v) (< 0 (logand (caddr v) 4)))$/;"	f
vinfo:not-capt	src/julia-syntax.scm	/^(define (vinfo:not-capt vi)$/;"	f
vinfo:read	src/ast.scm	/^(define (vinfo:read v) (< 0 (logand (caddr v) 8)))$/;"	f
vinfo:sa	src/ast.scm	/^(define (vinfo:sa v) (< 0 (logand (caddr v) 16)))$/;"	f
vinfo:set-asgn!	src/ast.scm	/^(define (vinfo:set-asgn! v a)  (set-car! (cddr v) (set-bit (caddr v) 2 a)))$/;"	f
vinfo:set-called!	src/ast.scm	/^(define (vinfo:set-called! v a)  (set-car! (cddr v) (set-bit (caddr v) 64 a)))$/;"	f
vinfo:set-capt!	src/ast.scm	/^(define (vinfo:set-capt! v c)  (set-car! (cddr v) (set-bit (caddr v) 1 c)))$/;"	f
vinfo:set-never-undef!	src/ast.scm	/^(define (vinfo:set-never-undef! v a) (set-car! (cddr v) (set-bit (caddr v) 4 a)))$/;"	f
vinfo:set-read!	src/ast.scm	/^(define (vinfo:set-read! v a) (set-car! (cddr v) (set-bit (caddr v) 8 a)))$/;"	f
vinfo:set-sa!	src/ast.scm	/^(define (vinfo:set-sa! v a)    (set-car! (cddr v) (set-bit (caddr v) 16 a)))$/;"	f
vinfo:set-type!	src/ast.scm	/^(define (vinfo:set-type! v t) (set-car! (cdr v) t))$/;"	f
vinfo:sym	src/flisp/compiler.lsp	/^(define vinfo:sym car)$/;"	f
vinfo:type	src/ast.scm	/^(define vinfo:type cadr)$/;"	f
visit	base/reflection.jl	/^function visit(f, d::Core.TypeMapEntry)$/;"	f
visit	base/reflection.jl	/^function visit(f, mc::Core.TypeMapLevel)$/;"	f
visit	base/reflection.jl	/^function visit(f, mt::Core.MethodTable)$/;"	f
visitAddrSpaceCastInst	src/llvm-gc-invariant-verifier.cpp	/^void GCInvariantVerifier::visitAddrSpaceCastInst(AddrSpaceCastInst &I) {$/;"	f	class:GCInvariantVerifier	typeref:typename:void
visitCallInst	src/llvm-gc-invariant-verifier.cpp	/^void GCInvariantVerifier::visitCallInst(CallInst &CI) {$/;"	f	class:GCInvariantVerifier	typeref:typename:void
visitGetElementPtrInst	src/llvm-gc-invariant-verifier.cpp	/^void GCInvariantVerifier::visitGetElementPtrInst(GetElementPtrInst &GEP) {$/;"	f	class:GCInvariantVerifier	typeref:typename:void
visitIntToPtrInst	src/llvm-gc-invariant-verifier.cpp	/^void GCInvariantVerifier::visitIntToPtrInst(IntToPtrInst &IPI) {$/;"	f	class:GCInvariantVerifier	typeref:typename:void
visitLine	src/codegen.cpp	/^static void visitLine(jl_codectx_t &ctx, std::vector<logdata_block*> &vec, int line, Value *adde/;"	f	typeref:typename:void	file:
visitLoadInst	src/llvm-gc-invariant-verifier.cpp	/^void GCInvariantVerifier::visitLoadInst(LoadInst &LI) {$/;"	f	class:GCInvariantVerifier	typeref:typename:void
visitLoadInst	src/llvm-propagate-addrspaces.cpp	/^void PropagateJuliaAddrspaces::visitLoadInst(LoadInst &LI) {$/;"	f	class:PropagateJuliaAddrspaces	typeref:typename:void
visitMemSetInst	src/llvm-propagate-addrspaces.cpp	/^void PropagateJuliaAddrspaces::visitMemSetInst(MemSetInst &MI) {$/;"	f	class:PropagateJuliaAddrspaces	typeref:typename:void
visitMemTransferInst	src/llvm-propagate-addrspaces.cpp	/^void PropagateJuliaAddrspaces::visitMemTransferInst(MemTransferInst &MTI) {$/;"	f	class:PropagateJuliaAddrspaces	typeref:typename:void
visitPtrToIntInst	src/llvm-gc-invariant-verifier.cpp	/^void GCInvariantVerifier::visitPtrToIntInst(PtrToIntInst &PII) {$/;"	f	class:GCInvariantVerifier	typeref:typename:void
visitReturnInst	src/llvm-gc-invariant-verifier.cpp	/^void GCInvariantVerifier::visitReturnInst(ReturnInst &RI) {$/;"	f	class:GCInvariantVerifier	typeref:typename:void
visitStoreInst	src/llvm-gc-invariant-verifier.cpp	/^void GCInvariantVerifier::visitStoreInst(StoreInst &SI) {$/;"	f	class:GCInvariantVerifier	typeref:typename:void
visitStoreInst	src/llvm-propagate-addrspaces.cpp	/^void PropagateJuliaAddrspaces::visitStoreInst(StoreInst &SI) {$/;"	f	class:PropagateJuliaAddrspaces	typeref:typename:void
visit_slot_load!	base/compiler/typeinfer.jl	/^function visit_slot_load!(sl::Slot, vtypes::VarTable, sv::InferenceState, undefs::Array{Bool,1})$/;"	f
visited	src/gf.c	/^    htable_t visited;$/;"	m	struct:ml_matches_env	typeref:typename:htable_t	file:
vmap	src/llvm-multiversioning.cpp	/^        std::unique_ptr<ValueToValueMapTy> vmap; \/\/ ValueToValueMapTy is not movable....$/;"	m	struct:__anond5683ea40111::CloneCtx::Target	typeref:typename:std::unique_ptr<ValueToValueMapTy>	file:
vn_aux	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word	vn_aux;			\/* Offset in bytes to vernaux array *\/$/;"	m	struct:__anonff7a58691708	typeref:typename:Elf32_Word
vn_aux	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Word	vn_aux;			\/* Offset in bytes to vernaux array *\/$/;"	m	struct:__anonff7a58691808	typeref:typename:Elf64_Word
vn_cnt	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Half	vn_cnt;			\/* Number of associated aux entries *\/$/;"	m	struct:__anonff7a58691708	typeref:typename:Elf32_Half
vn_cnt	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Half	vn_cnt;			\/* Number of associated aux entries *\/$/;"	m	struct:__anonff7a58691808	typeref:typename:Elf64_Half
vn_file	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word	vn_file;		\/* Offset of filename for this$/;"	m	struct:__anonff7a58691708	typeref:typename:Elf32_Word
vn_file	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Word	vn_file;		\/* Offset of filename for this$/;"	m	struct:__anonff7a58691808	typeref:typename:Elf64_Word
vn_next	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word	vn_next;		\/* Offset in bytes to next verneed$/;"	m	struct:__anonff7a58691708	typeref:typename:Elf32_Word
vn_next	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Word	vn_next;		\/* Offset in bytes to next verneed$/;"	m	struct:__anonff7a58691808	typeref:typename:Elf64_Word
vn_version	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Half	vn_version;		\/* Version of structure *\/$/;"	m	struct:__anonff7a58691708	typeref:typename:Elf32_Half
vn_version	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Half	vn_version;		\/* Version of structure *\/$/;"	m	struct:__anonff7a58691808	typeref:typename:Elf64_Half
vna_flags	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Half	vna_flags;		\/* Dependency specific information *\/$/;"	m	struct:__anonff7a58691908	typeref:typename:Elf32_Half
vna_flags	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Half	vna_flags;		\/* Dependency specific information *\/$/;"	m	struct:__anonff7a58691a08	typeref:typename:Elf64_Half
vna_hash	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word	vna_hash;		\/* Hash value of dependency name *\/$/;"	m	struct:__anonff7a58691908	typeref:typename:Elf32_Word
vna_hash	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Word	vna_hash;		\/* Hash value of dependency name *\/$/;"	m	struct:__anonff7a58691a08	typeref:typename:Elf64_Word
vna_name	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word	vna_name;		\/* Dependency name string offset *\/$/;"	m	struct:__anonff7a58691908	typeref:typename:Elf32_Word
vna_name	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Word	vna_name;		\/* Dependency name string offset *\/$/;"	m	struct:__anonff7a58691a08	typeref:typename:Elf64_Word
vna_next	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Word	vna_next;		\/* Offset in bytes to next vernaux$/;"	m	struct:__anonff7a58691908	typeref:typename:Elf32_Word
vna_next	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Word	vna_next;		\/* Offset in bytes to next vernaux$/;"	m	struct:__anonff7a58691a08	typeref:typename:Elf64_Word
vna_other	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf32_Half	vna_other;		\/* Unused *\/$/;"	m	struct:__anonff7a58691908	typeref:typename:Elf32_Half
vna_other	deps/srccache/patchelf-0.9/src/elf.h	/^  Elf64_Half	vna_other;		\/* Unused *\/$/;"	m	struct:__anonff7a58691a08	typeref:typename:Elf64_Half
void24363	test/core.jl	/^void24363 = A24363(nothing)$/;"	v
voidsym	src/flisp/flisp.h	/^    value_t arraysym, cfunctionsym, voidsym, pointersym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
vreg_size	src/processor.cpp	/^    int vreg_size{0};$/;"	m	struct:__anon839834ed0111::SysimgMatch	typeref:typename:int	file:
vtable	src/flisp/flisp.h	/^    const cvtable_t *vtable;$/;"	m	struct:_fltype_t	typeref:typename:const cvtable_t *
vtabsym	src/flisp/flisp.h	/^    value_t vtabsym, pagesym, returnsym, escsym, spacesym, deletesym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
vtx	src/subtype.c	/^    jl_value_t *vtx;$/;"	m	struct:subtype_tuple_env	typeref:typename:jl_value_t *	file:
vty	src/subtype.c	/^    jl_value_t *vty;$/;"	m	struct:subtype_tuple_env	typeref:typename:jl_value_t *	file:
vu8sym	src/flisp/flisp.h	/^    value_t pairsym, symbolsym, fixnumsym, vectorsym, builtinsym, vu8sym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
vvx	src/subtype.c	/^    jl_vararg_kind_t vvx, vvy;$/;"	m	struct:subtype_tuple_env	typeref:typename:jl_vararg_kind_t	file:
vvy	src/subtype.c	/^    jl_vararg_kind_t vvx, vvy;$/;"	m	struct:subtype_tuple_env	typeref:typename:jl_vararg_kind_t	file:
vx	src/subtype.c	/^    int vx, vy;$/;"	m	struct:subtype_tuple_env	typeref:typename:int	file:
vy	src/subtype.c	/^    int vx, vy;$/;"	m	struct:subtype_tuple_env	typeref:typename:int	file:
w	stdlib/Dates/test/periods.jl	/^w = Dates.Week(1)$/;"	v
w	stdlib/Dates/test/types.jl	/^w = Dates.Week(1)$/;"	v
wait	base/asyncevent.jl	/^function wait(t::Union{Timer, AsyncCondition})$/;"	f
wait	base/channels.jl	/^function wait(c::Channel)$/;"	f
wait	base/condition.jl	/^function wait(c::GenericCondition)$/;"	f
wait	base/lock.jl	/^function wait(e::Event)$/;"	f
wait	base/process.jl	/^function wait(x::Process)$/;"	f
wait	base/process.jl	/^wait(x::ProcessChain) = foreach(wait, x.processes)$/;"	f
wait	base/task.jl	/^function wait()$/;"	f
wait	base/task.jl	/^function wait(t::Task)$/;"	f
wait	stdlib/Distributed/src/process_messages.jl	/^wait(rv::RemoteValue) = wait(rv.c)$/;"	f
wait	stdlib/Distributed/src/remotecall.jl	/^wait(r::Future) = (r.v !== nothing && return r; call_on_owner(wait_ref, r, myid()); r)$/;"	f
wait	stdlib/Distributed/src/remotecall.jl	/^wait(r::RemoteChannel, args...) = (call_on_owner(wait_ref, r, myid(), args...); r)$/;"	f
wait	stdlib/FileWatching/src/FileWatching.jl	/^    function wait(socket::WindowsRawSocket; readable=false, writable=false)$/;"	f
wait	stdlib/FileWatching/src/FileWatching.jl	/^function wait(fd::RawFD; readable=false, writable=false)$/;"	f
wait	stdlib/FileWatching/src/FileWatching.jl	/^function wait(fdw::FDWatcher)$/;"	f
wait	stdlib/FileWatching/src/FileWatching.jl	/^function wait(fdw::_FDWatcher; readable=true, writable=true)$/;"	f
wait	stdlib/FileWatching/src/FileWatching.jl	/^function wait(m::FileMonitor)$/;"	f
wait	stdlib/FileWatching/src/FileWatching.jl	/^function wait(m::FolderMonitor)$/;"	f
wait	stdlib/FileWatching/src/FileWatching.jl	/^function wait(pfw::PollingFileWatcher)$/;"	f
wait_close	base/coreio.jl	/^wait_close(::DevNull) = wait()$/;"	f
wait_close	base/io.jl	/^function wait_close end$/;"	f
wait_close	base/io.jl	/^wait_close(io::AbstractPipe) = (wait_close(pipe_writer(io)); wait_close(pipe_reader(io)))$/;"	f
wait_close	base/stream.jl	/^function wait_close(s::BufferStream)$/;"	f
wait_close	base/stream.jl	/^function wait_close(x::Union{LibuvStream, LibuvServer})$/;"	f
wait_connected	stdlib/Sockets/src/Sockets.jl	/^function wait_connected(x::LibuvStream)$/;"	f
wait_done	base/asyncmap.jl	/^function wait_done(itr::AsyncCollector, state::AsyncCollectorState)$/;"	f
wait_for_conn	stdlib/Distributed/src/cluster.jl	/^function wait_for_conn(w)$/;"	f
wait_for_debugger	src/gc.h	/^    int wait_for_debugger;$/;"	m	struct:__anoncf30557c0208	typeref:typename:int
wait_locked	base/stream.jl	/^    function wait_locked(s, buf, nb)$/;"	f
wait_readnb	base/coreio.jl	/^wait_readnb(::DevNull) = wait()$/;"	f
wait_readnb	base/io.jl	/^function wait_readnb end$/;"	f
wait_readnb	base/io.jl	/^wait_readnb(io::AbstractPipe, nb::Int) = wait_readnb(pipe_reader(io), nb)$/;"	f
wait_readnb	base/stream.jl	/^function wait_readnb(s::BufferStream, nb::Int)$/;"	f
wait_readnb	base/stream.jl	/^function wait_readnb(x::LibuvStream, nb::Int)$/;"	f
wait_ref	stdlib/Distributed/src/remotecall.jl	/^function wait_ref(rid, caller, args...)$/;"	f
wait_with_timeout	stdlib/Sockets/test/runtests.jl	/^        function wait_with_timeout(recvs)$/;"	f
waitpid	src/sys.c	/^#define waitpid(/;"	d	file:
wake_signal	src/julia_threads.h	/^    uv_cond_t wake_signal;$/;"	m	struct:_jl_tls_states_t	typeref:typename:uv_cond_t
wake_thread	src/partr.c	/^static void wake_thread(int16_t tid)$/;"	f	typeref:typename:void	file:
walk	test/compiler/inline.jl	/^function walk(func, expr)$/;"	f
walk_args	stdlib/Distributed/test/distributed_exec.jl	/^function walk_args(i)$/;"	f
walk_back_to_global_VR	src/clangsa/GCChecker.cpp	/^  static const VarRegion *walk_back_to_global_VR(const MemRegion *Region) {$/;"	f	namespace:Helpers	typeref:typename:const VarRegion *	file:
walk_to_defs	base/compiler/ssair/passes.jl	/^function walk_to_defs(compact::IncrementalCompact, @nospecialize(defssa), @nospecialize(typecons/;"	f
walkdir	base/file.jl	/^function walkdir(root; topdown=true, follow_symlinks=false, onerror=throw)$/;"	f
warn	base/logging.jl	/^macro  warn(exs...) logmsg_code((@_sourceinfo)..., :Warn,  exs...) end$/;"	f
warn_color	base/client.jl	/^warn_color()  = repl_color("JULIA_WARN_COLOR" , default_color_warn)$/;"	f
warn_overwrite	src/julia.h	/^    int8_t warn_overwrite;$/;"	m	struct:__anon055fe4271808	typeref:typename:int8_t
warn_shell_special	base/shell.jl	/^@noinline warn_shell_special(str,special) =$/;"	f
warning_empty	stdlib/Profile/src/Profile.jl	/^warning_empty() = @warn """$/;"	f
warntype_hastag	stdlib/InteractiveUtils/test/runtests.jl	/^function warntype_hastag(f, types, tag)$/;"	f
warntype_type_printer	stdlib/InteractiveUtils/src/codeview.jl	/^function warntype_type_printer(io::IO, @nospecialize(ty), used::Bool)$/;"	f
watch_file	stdlib/FileWatching/src/FileWatching.jl	/^function watch_file(s::AbstractString, timeout_s::Real=-1)$/;"	f
watch_folder	stdlib/FileWatching/src/FileWatching.jl	/^function watch_folder(s::String, timeout_s::Real=-1)$/;"	f
watch_folder	stdlib/FileWatching/src/FileWatching.jl	/^watch_folder(s::AbstractString, timeout_s::Real=-1) = watch_folder(String(s), timeout_s)$/;"	f
watched_folders	stdlib/FileWatching/src/FileWatching.jl	/^const watched_folders = Dict{String, FolderMonitor}()$/;"	v
wc265	test/worlds.jl	/^wc265 = get_world_counter()$/;"	v
wcharsym	src/flisp/flisp.h	/^    value_t ptrdiffsym, sizesym, bytesym, wcharsym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
wchartype	src/flisp/flisp.h	/^    fltype_t *bytetype, *wchartype;$/;"	m	struct:_fl_context_t	typeref:typename:fltype_t **
wcstringtype	src/flisp/flisp.h	/^    fltype_t *stringtype, *wcstringtype;$/;"	m	struct:_fl_context_t	typeref:typename:fltype_t **
wcstringtypesym	src/flisp/flisp.h	/^    value_t stringtypesym, wcstringtypesym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
we	stdlib/Random/src/normal.jl	/^const we =$/;"	v
we	stdlib/Random/test/runtests.jl	/^we = Vector{Float64}(undef, ziggurat_table_size)$/;"	v
weak_refs	src/julia_threads.h	/^    arraylist_t weak_refs;$/;"	m	struct:__anonf8aecdb10608	typeref:typename:arraylist_t
week	stdlib/Dates/src/accessors.jl	/^function week(days)$/;"	f
week	stdlib/Dates/src/accessors.jl	/^week(dt::TimeType) = week(days(dt))$/;"	f
weight	src/llvm-late-gc-lowering.cpp	/^        unsigned weight;$/;"	m	struct:PEOIterator::Element	typeref:typename:unsigned	file:
westmere	src/processor_x86.cpp	/^constexpr auto westmere = nehalem | get_feature_masks(aes, pclmul);$/;"	v	namespace:X86::Feature	typeref:typename:auto
wfunc	test/worlds.jl	/^function wfunc(c1,c2)$/;"	f
where-enabled	src/julia-parser.scm	/^(define where-enabled #t)$/;"	f
where1090	test/core.jl	/^function where1090(x::Array{T})::T where T<:Real$/;"	f
which	base/operators.jl	/^function which computes the boolean negation of `f`.$/;"	f
which	base/reflection.jl	/^function which(@nospecialize(f), @nospecialize(t))$/;"	f
which	base/reflection.jl	/^function which(m::Module, s::Symbol)$/;"	f
which	base/sysinfo.jl	/^function which(program_name::String)$/;"	f
which	base/sysinfo.jl	/^which(program_name::AbstractString) = which(String(program_name))$/;"	f
which	stdlib/InteractiveUtils/src/macros.jl	/^macro which(ex0::Symbol)$/;"	f
which	test/depot/packages/Foo/I05Qq/src/Foo.jl	/^which = "depot"$/;"	v
which	test/project/deps/Foo1/src/Foo.jl	/^which = "path"$/;"	v
whitespace	stdlib/Markdown/src/parse/util.jl	/^const whitespace = " \\t\\r"$/;"	v
whitespace-newline	src/julia-parser.scm	/^(define whitespace-newline #f)$/;"	f
whitespace_chars	stdlib/REPL/src/REPLCompletions.jl	/^const whitespace_chars = [" \\t\\n\\r"...]$/;"	v
wi	stdlib/Random/src/normal.jl	/^const wi =$/;"	v
wi	stdlib/Random/test/runtests.jl	/^wi = Vector{Float64}(undef, ziggurat_table_size)$/;"	v
wid	stdlib/Distributed/test/distributed_exec.jl	/^wid = workers()[1]$/;"	v
wid1	stdlib/Distributed/test/distributed_exec.jl	/^wid1 = workers()[1]$/;"	v
wid2	stdlib/Distributed/test/distributed_exec.jl	/^wid2 = workers()[2]$/;"	v
wideint_t	src/array.c	/^typedef __uint128_t wideint_t;$/;"	t	typeref:typename:__uint128_t	file:
wideint_t	src/array.c	/^typedef uint64_t wideint_t;$/;"	t	typeref:typename:uint64_t	file:
widemul	base/int.jl	/^    function widemul(u::Int64, v::Int64)$/;"	f
widemul	base/int.jl	/^    function widemul(u::UInt64, v::UInt64)$/;"	f
widemul	base/int.jl	/^widemul(x::Bool,y::Bool) = x * y$/;"	f
widemul	base/int.jl	/^widemul(x::Bool,y::Number) = x * y$/;"	f
widemul	base/int.jl	/^widemul(x::Number,y::Bool) = x * y$/;"	f
widemul	base/int.jl	/^widemul(x::Signed,y::Unsigned) = widen(x) * signed(widen(y))$/;"	f
widemul	base/int.jl	/^widemul(x::Unsigned,y::Signed) = signed(widen(x)) * widen(y)$/;"	f
widemul	base/number.jl	/^widemul(x::Number, y::Number) = widen(x)*widen(y)$/;"	f
widen	base/char.jl	/^widen(::Type{T}) where {T<:AbstractChar} = T$/;"	f
widen	base/complex.jl	/^widen(::Type{Complex{T}}) where {T} = Complex{widen(T)}$/;"	f
widen	base/float.jl	/^widen(::Type{Float16}) = Float32$/;"	f
widen	base/float.jl	/^widen(::Type{Float32}) = Float64$/;"	f
widen	base/gmp.jl	/^widen(::Type{BigInt})  = BigInt$/;"	f
widen	base/gmp.jl	/^widen(::Type{Int128})  = BigInt$/;"	f
widen	base/gmp.jl	/^widen(::Type{UInt128}) = BigInt$/;"	f
widen	base/int.jl	/^widen(::Type{Int16}) = Int32$/;"	f
widen	base/int.jl	/^widen(::Type{Int32}) = Int64$/;"	f
widen	base/int.jl	/^widen(::Type{Int64}) = Int128$/;"	f
widen	base/int.jl	/^widen(::Type{Int8}) = Int16$/;"	f
widen	base/int.jl	/^widen(::Type{UInt16}) = UInt32$/;"	f
widen	base/int.jl	/^widen(::Type{UInt32}) = UInt64$/;"	f
widen	base/int.jl	/^widen(::Type{UInt64}) = UInt128$/;"	f
widen	base/int.jl	/^widen(::Type{UInt8}) = UInt16$/;"	f
widen	base/irrationals.jl	/^widen(::Type{T}) where {T<:Irrational} = T$/;"	f
widen	base/mpfr.jl	/^widen(::Type{BigFloat}) = BigFloat$/;"	f
widen	base/mpfr.jl	/^widen(::Type{Float64}) = BigFloat$/;"	f
widen	base/operators.jl	/^widen(x::T) where {T} = convert(widen(T), x)$/;"	f
widen	base/operators.jl	/^widen(x::Type{T}) where {T} = throw(MethodError(widen, (T,)))$/;"	f
widen	base/rational.jl	/^widen(::Type{Rational{T}}) where {T} = Rational{widen(T)}$/;"	f
widen_Type	src/subtype.c	/^static jl_value_t *widen_Type(jl_value_t *t JL_PROPAGATES_ROOT) JL_NOTSAFEPOINT$/;"	f	typeref:typename:jl_value_t *	file:
widen_all_consts!	base/compiler/typeinfer.jl	/^function widen_all_consts!(src::CodeInfo)$/;"	f
widenconditional	base/compiler/typelattice.jl	/^function widenconditional(typ::Conditional)$/;"	f
widenconditional	base/compiler/typelattice.jl	/^widenconditional(@nospecialize typ) = typ$/;"	f
widenconst	base/compiler/typelattice.jl	/^function widenconst(c::Const)$/;"	f
widenconst	base/compiler/typelattice.jl	/^widenconst(@nospecialize(t)) = t$/;"	f
widenconst	base/compiler/typelattice.jl	/^widenconst(c::Conditional) = Bool$/;"	f
widenconst	base/compiler/typelattice.jl	/^widenconst(c::PartialTypeVar) = TypeVar$/;"	f
widenconst	base/compiler/typelattice.jl	/^widenconst(m::MaybeUndef) = widenconst(m.typ)$/;"	f
widenconst	base/compiler/typelattice.jl	/^widenconst(t::PartialStruct) = t.typ$/;"	f
widenconst_bestguess	base/compiler/typeinfer.jl	/^function widenconst_bestguess(bestguess)$/;"	f
width	stdlib/REPL/src/Terminals.jl	/^width(t::TextTerminal) = displaysize(t)[2]$/;"	f
wildcard	stdlib/REPL/src/LineEdit.jl	/^const wildcard = '\\U10f7ff' # "Private Use" Char$/;"	v
will	base/io.jl	/^function will block to wait for more data if necessary, and then return `false`. Therefore$/;"	f
will	base/pointer.jl	/^function will be used. Accordingly, the argument `x` to this function should never be an$/;"	f
win-extras	Makefile	/^win-extras:$/;"	t
win32_ucontext_t	src/support/win32_ucontext.h	/^} win32_ucontext_t;$/;"	t	typeref:struct:__anon4cf1a00a0108
win64_reg_size	src/abi_win64.cpp	/^static bool win64_reg_size(size_t size)$/;"	f	typeref:typename:bool	file:
windows_version	base/sysinfo.jl	/^    function windows_version()$/;"	f
windows_version	base/sysinfo.jl	/^    windows_version() = v"0.0"$/;"	f
windowserror	base/error.jl	/^windowserror(p, b::Bool; extrainfo=nothing) = b ? throw(Main.Base.SystemError(string(p), Libc.er/;"	f
winprompt	base/util.jl	/^    function winprompt(message, caption, default_username; prompt_username = true)$/;"	f
winuppercase	base/env.jl	/^    function winuppercase(s::AbstractString)$/;"	f
with	stdlib/LibGit2/src/types.jl	/^function with(f::Function, obj)$/;"	f
with	stdlib/LibGit2/src/types.jl	/^with(f::Function, ::Type{T}, args...) where {T} = with(f, T(args...))$/;"	f
with-end-symbol	src/julia-parser.scm	/^(define-macro (with-end-symbol . body)$/;"	f
with-exception-catcher	src/flisp/aliases.scm	/^(define (with-exception-catcher hand thk)$/;"	f
with-normal-context	src/julia-parser.scm	/^(define-macro (with-normal-context . body)$/;"	f
with-space-sensitive	src/julia-parser.scm	/^(define-macro (with-space-sensitive . body)$/;"	f
with-wheres	src/julia-syntax.scm	/^(define (with-wheres call wheres)$/;"	f
with-whitespace-newline	src/julia-parser.scm	/^(define-macro (with-whitespace-newline . body)$/;"	f
with_atype	base/compiler/ssair/inlining.jl	/^with_atype(sig::Signature) = Signature(sig.f, sig.ft, sig.atypes, argtypes_to_type(sig.atypes))$/;"	f
with_fake_pty	test/testhelpers/FakePTYs.jl	/^function with_fake_pty(f)$/;"	f
with_libgit2_temp_home	stdlib/LibGit2/test/libgit2.jl	/^function with_libgit2_temp_home(f)$/;"	f
with_logger	base/logging.jl	/^with_logger(f::Function, logger::AbstractLogger) = with_logstate(f, LogState(logger))$/;"	f
with_logstate	base/logging.jl	/^function with_logstate(f::Function, logstate)$/;"	f
with_output_color	base/show.jl	/^function with_output_color end$/;"	f
with_output_color	base/util.jl	/^function with_output_color(f::Function, color::Union{Int, Symbol}, io::IO, args...; bold::Bool =/;"	f
with_temp_cleanup	test/file.jl	/^function with_temp_cleanup(f::Function, n::Int)$/;"	f
with_tvar	src/subtype.c	/^static int with_tvar(tvar_callback callback, void *context, jl_unionall_t *u, int8_t R, jl_stenv/;"	f	typeref:typename:int	file:
with_ulimit	stdlib/Sockets/test/runtests.jl	/^function with_ulimit(f::Function, stacksize::Int)$/;"	f
with_warn	stdlib/LibGit2/src/types.jl	/^function with_warn(f::Function, ::Type{T}, args...) where T$/;"	f
withenv	base/env.jl	/^function withenv(f::Function, keyvals::Pair{T}...) where T<:AbstractString$/;"	f
withenv	base/env.jl	/^withenv(f::Function) = f() # handle empty keyvals case; see #10853$/;"	f
withenv	test/cmdlineargs.jl	/^        withenv((Sys.iswindows() ? "USERPROFILE" : "HOME") => dir) do$/;"	f
within-int128?	src/julia-parser.scm	/^(define (within-int128? s)$/;"	f
within_typevar	src/jltypes.c	/^static int within_typevar(jl_value_t *t, jl_value_t *vlb, jl_value_t *vub)$/;"	f	typeref:typename:int	file:
without	base/threadcall.jl	/^function without causing the main `julia` thread to become blocked. Concurrency$/;"	f
without-generated	src/julia-syntax.scm	/^(define (without-generated stmts)$/;"	f
without-range-colon	src/julia-parser.scm	/^(define-macro (without-range-colon . body)$/;"	f
without_path	stdlib/LibGit2/test/libgit2.jl	/^                    function without_path(cred)$/;"	f
withstream	stdlib/Markdown/src/parse/util.jl	/^function withstream(f, stream)$/;"	f
withtag	stdlib/Markdown/src/render/html.jl	/^function withtag(f, io::IO, tag, attrs...)$/;"	f
wl	stdlib/Distributed/test/topology.jl	/^wl = workers()$/;"	v
words	stdlib/Markdown/src/render/terminal/formatting.jl	/^words(s) = split(s, " ")$/;"	f
work_args	src/jl_uv.c	/^    void      *work_args;$/;"	m	struct:work_baton	typeref:typename:void *	file:
work_baton	src/jl_uv.c	/^struct work_baton {$/;"	s	file:
work_cb_t	src/jl_uv.c	/^typedef int (*work_cb_t)(void *, void *);$/;"	t	typeref:typename:int (*)(void *,void *)	file:
work_func	src/jl_uv.c	/^    work_cb_t work_func;$/;"	m	struct:work_baton	typeref:typename:work_cb_t	file:
work_retval	src/jl_uv.c	/^    void      *work_retval;$/;"	m	struct:work_baton	typeref:typename:void *	file:
workdir	stdlib/LibGit2/src/repository.jl	/^function workdir(repo::GitRepo)$/;"	f
worker	src/julia.h	/^    int8_t worker;$/;"	m	struct:__anon055fe4271808	typeref:typename:int8_t
worker_from_id	stdlib/Distributed/src/cluster.jl	/^function worker_from_id(pg::ProcessGroup, i)$/;"	f
worker_from_id	stdlib/Distributed/src/cluster.jl	/^worker_from_id(i) = worker_from_id(PGRP, i)$/;"	f
worker_id_from_socket	stdlib/Distributed/src/cluster.jl	/^function worker_id_from_socket(s)$/;"	f
worker_lock	stdlib/Distributed/src/cluster.jl	/^const worker_lock = ReentrantLock()$/;"	v
worker_timeout	stdlib/Distributed/src/cluster.jl	/^worker_timeout() = parse(Float64, get(ENV, "JULIA_WORKER_TIMEOUT", "60.0"))$/;"	f
workers	stdlib/Distributed/src/cluster.jl	/^function workers()$/;"	f
worklist	src/llvm-alloc-opt.cpp	/^    SetVector<std::pair<CallInst*,size_t>> worklist;$/;"	m	struct:__anon0a1571000111::Optimizer	typeref:typename:SetVector<std::pair<CallInst *,size_t>>	file:
worklist	test/compiler/inference.jl	/^worklist = Int[]$/;"	v
workloads	stdlib/Distributed/test/distributed_exec.jl	/^workloads = Int[sum(ids .== i) for i in 2:nprocs()]$/;"	v
world	src/codegen.cpp	/^    size_t world = 0;$/;"	m	class:jl_codectx_t	typeref:typename:size_t	file:
world	src/gf.c	/^            size_t world;$/;"	m	struct:jl_method_error_bare::jl_method_error	typeref:typename:size_t	file:
world	src/gf.c	/^    size_t world;$/;"	m	struct:ml_matches_env	typeref:typename:size_t	file:
world	test/compiler/validation.jl	/^world = typemax(UInt)$/;"	v
world_age	src/julia.h	/^    size_t world_age;$/;"	m	struct:_jl_handler_t	typeref:typename:size_t
world_age	src/julia.h	/^    size_t world_age;$/;"	m	struct:_jl_task_t	typeref:typename:size_t
world_age	src/julia_threads.h	/^    size_t world_age;$/;"	m	struct:_jl_tls_states_t	typeref:typename:size_t
world_age_field	src/codegen.cpp	/^    Value *world_age_field = NULL;$/;"	m	class:jl_codectx_t	typeref:typename:Value *	file:
wp	stdlib/Distributed/src/workerpool.jl	/^wp = CachingPool(workers())$/;"	v
wp	stdlib/Distributed/test/distributed_exec.jl	/^wp = CachingPool(workers())$/;"	v
wp	stdlib/Distributed/test/distributed_exec.jl	/^wp = WorkerPool(workers())$/;"	v
wp_bind_addr	stdlib/Distributed/src/cluster.jl	/^wp_bind_addr(p) = p.config.bind_addr$/;"	f
wp_bind_addr	stdlib/Distributed/src/cluster.jl	/^wp_bind_addr(p::LocalProcess) = p.bind_addr$/;"	f
wp_local_isready	stdlib/Distributed/src/workerpool.jl	/^wp_local_isready(pool::AbstractWorkerPool) = isready(pool.channel)$/;"	f
wp_local_length	stdlib/Distributed/src/workerpool.jl	/^wp_local_length(pool::AbstractWorkerPool) = length(pool.workers)$/;"	f
wp_local_nworkers	stdlib/Distributed/src/workerpool.jl	/^function wp_local_nworkers(pool::AbstractWorkerPool)$/;"	f
wp_local_push!	stdlib/Distributed/src/workerpool.jl	/^wp_local_push!(pool::AbstractWorkerPool, w::Int) = (push!(pool.workers, w); put!(pool.channel, w/;"	f
wp_local_put!	stdlib/Distributed/src/workerpool.jl	/^function wp_local_put!(pool::AbstractWorkerPool, w::Int)$/;"	f
wp_local_take!	stdlib/Distributed/src/workerpool.jl	/^function wp_local_take!(pool::AbstractWorkerPool)$/;"	f
wp_local_workers	stdlib/Distributed/src/workerpool.jl	/^function wp_local_workers(pool::AbstractWorkerPool)$/;"	f
wr_addr	src/cgmemmgr.cpp	/^    void *wr_addr;$/;"	m	struct:__anon06c686bc0111::Allocation	typeref:typename:void *	file:
wr_ptr	src/cgmemmgr.cpp	/^    uintptr_t wr_ptr{0};$/;"	m	struct:__anon06c686bc0111::SplitPtrBlock	typeref:typename:uintptr_t	file:
wrap22291	test/core.jl	/^wrap22291(ind) = (ind...,)$/;"	f
wrap_batch	stdlib/Distributed/src/pmap.jl	/^function wrap_batch(f, p, handle_errors)$/;"	f
wrap_n_exec_twice	base/asyncmap.jl	/^function wrap_n_exec_twice(chnl, worker_tasks, ntasks, exec_func, c...)$/;"	f
wrap_on_error	stdlib/Distributed/src/pmap.jl	/^function wrap_on_error(f, on_error; capture_data=false)$/;"	f
wrap_retry	stdlib/Distributed/src/pmap.jl	/^function wrap_retry(f, retry_delays, retry_check)$/;"	f
wrap_string	base/regex.jl	/^wrap_string(r::Regex, unshared::UInt32) = string("(?", regex_opts_str(r.compile_options & unshar/;"	f
wrap_string	base/regex.jl	/^wrap_string(s::AbstractChar, ::UInt32) = string("\\\\Q", s, "\\\\E")$/;"	f
wrap_string	base/regex.jl	/^wrap_string(s::AbstractString, ::UInt32) =  string("\\\\Q", replace(s, raw"\\E" => raw"\\\\E\\QE/;"	f
wrapblock	stdlib/Markdown/src/render/latex.jl	/^function wrapblock(f, io, env)$/;"	f
wrapinline	stdlib/Markdown/src/render/latex.jl	/^function wrapinline(f, io, cmd)$/;"	f
wrapped_lines	stdlib/Markdown/src/render/terminal/formatting.jl	/^function wrapped_lines(io::IO, s::AbstractString; width = 80, i = 0)$/;"	f
wrapped_lines	stdlib/Markdown/src/render/terminal/formatting.jl	/^wrapped_lines(io::IO, f::Function, args...; width = 80, i = 0) =$/;"	f
wrapped_var_ser_tests	stdlib/Distributed/test/distributed_exec.jl	/^function wrapped_var_ser_tests()$/;"	f
wrapper	src/julia.h	/^    jl_value_t *wrapper;$/;"	m	struct:__anon055fe4270a08	typeref:typename:jl_value_t *
wrapperT	test/reflection.jl	/^    wrapperT(T) = Base.typename(T).wrapper$/;"	f
wrapper_id	src/jltypes.c	/^static intptr_t wrapper_id(jl_value_t *t) JL_NOTSAFEPOINT$/;"	f	typeref:typename:intptr_t	file:
wrapperop	stdlib/LinearAlgebra/src/adjtrans.jl	/^wrapperop(A::Adjoint) = adjoint$/;"	f
wrapperop	stdlib/LinearAlgebra/src/adjtrans.jl	/^wrapperop(A::Transpose) = transpose$/;"	f
wri	deps/srccache/patchelf-0.9/src/patchelf.cc	/^    I wri(I & t, unsigned long long i)$/;"	f	class:ElfFile	typeref:typename:I	file:
write	base/bitarray.jl	/^write(s::IO, B::BitArray) = write(s, B.chunks)$/;"	f
write	base/boot.jl	/^function write(io::IO, x::String)$/;"	f
write	base/boot.jl	/^write(io::IO, x::UInt8) =$/;"	f
write	base/complex.jl	/^function write(s::IO, z::Complex)$/;"	f
write	base/coreio.jl	/^    write(io::CoreIO, x::UInt8) = Core.write(io, x)$/;"	f
write	base/coreio.jl	/^write(::DevNull, ::UInt8) = 1$/;"	f
write	base/filesystem.jl	/^write(f::File, c::UInt8) = write(f, Ref{UInt8}(c))$/;"	f
write	base/io.jl	/^function write end$/;"	f
write	base/io.jl	/^function write(io::IO, c::Char)$/;"	f
write	base/io.jl	/^function write(io::IO, s::Symbol)$/;"	f
write	base/io.jl	/^function write(io::IO, x1, xs...)$/;"	f
write	base/io.jl	/^function write(s::IO, A::AbstractArray)$/;"	f
write	base/io.jl	/^function write(s::IO, a::Array)$/;"	f
write	base/io.jl	/^function write(s::IO, a::SubArray{T,N,<:Array}) where {T,N}$/;"	f
write	base/io.jl	/^function write(s::IO, x::Union{Int16,UInt16,Int32,UInt32,Int64,UInt64,Int128,UInt128,Float16,Flo/;"	f
write	base/io.jl	/^function write(to::IO, from::IO)$/;"	f
write	base/io.jl	/^write(filename::AbstractString, a1, args...) = open(io->write(io, a1, args...), filename, "w")$/;"	f
write	base/io.jl	/^write(io::AbstractPipe, byte::UInt8) = write(pipe_writer(io), byte)$/;"	f
write	base/io.jl	/^write(io::IO, x) = throw(MethodError(write, (io, x)))$/;"	f
write	base/io.jl	/^write(s::IO, x::Bool) = write(s, UInt8(x))$/;"	f
write	base/io.jl	/^write(s::IO, x::Int8) = write(s, reinterpret(UInt8, x))$/;"	f
write	base/io.jl	/^write(s::IO, x::Ref{T}) where {T} = unsafe_write(s, x, Core.sizeof(T))$/;"	f
write	base/io.jl	/^write(s::IO, x::UInt8) = error(typeof(s)," does not support byte I\/O")$/;"	f
write	base/io.jl	/^write(to::IO, p::Ptr) = write(to, convert(UInt, p))$/;"	f
write	base/iobuffer.jl	/^@inline function write(to::GenericIOBuffer, a::UInt8)$/;"	f
write	base/iobuffer.jl	/^function write(to::GenericIOBuffer, from::GenericIOBuffer)$/;"	f
write	base/iostream.jl	/^function write(s::IOStream, b::UInt8)$/;"	f
write	base/rational.jl	/^function write(s::IO, z::Rational)$/;"	f
write	base/secretbuffer.jl	/^function write(io::IO, s::SecretBuffer)$/;"	f
write	base/secretbuffer.jl	/^function write(io::SecretBuffer, b::UInt8)$/;"	f
write	base/stream.jl	/^function write(s::LibuvStream, b::UInt8)$/;"	f
write	base/stream.jl	/^write(s::BufferStream, b::UInt8) = write(s, Ref{UInt8}(b))$/;"	f
write	base/strings/basic.jl	/^write(io::IO, s::CodeUnits) = write(io, s.s)$/;"	f
write	base/strings/io.jl	/^write(io::IO, s::AbstractString) = (len = 0; for c in s; len += write(io, c); end; len)$/;"	f
write	base/strings/io.jl	/^write(io::IO, s::Union{String,SubString{String}}) =$/;"	f
write	src/jl_uv.c	/^#define write /;"	d	file:
write	stdlib/REPL/test/repl.jl	/^    write(stdin_write, "Base.show(io::IO, ::Errs) = throw(Errs())\\n")$/;"	f
write!	stdlib/LibGit2/src/index.jl	/^function write!(idx::GitIndex)$/;"	f
write-char	src/flisp/aliases.scm	/^(define (write-char c (s *output-stream*)) (io.putc s c))$/;"	f
writeFile	deps/srccache/patchelf-0.9/src/patchelf.cc	/^static void writeFile(string fileName)$/;"	f	typeref:typename:void	file:
writeLine	stdlib/REPL/src/TerminalMenus/AbstractMenu.jl	/^function writeLine(buf::IOBuffer, m::AbstractMenu, idx::Int, cur::Bool)$/;"	f
writeLine	stdlib/REPL/src/TerminalMenus/MultiSelectMenu.jl	/^function writeLine(buf::IOBuffer, menu::MultiSelectMenu, idx::Int, cursor::Bool)$/;"	f
writeLine	stdlib/REPL/src/TerminalMenus/RadioMenu.jl	/^function writeLine(buf::IOBuffer, menu::RadioMenu, idx::Int, cursor::Bool)$/;"	f
writeReplacedSections	deps/srccache/patchelf-0.9/src/patchelf.cc	/^void ElfFile<ElfFileParamNames>::writeReplacedSections(Elf_Off & curOff,$/;"	f	class:ElfFile	typeref:typename:void
write_as_tag	stdlib/Serialization/src/Serialization.jl	/^function write_as_tag(s::IO, tag)$/;"	f
write_barrier_func	src/llvm-alloc-opt.cpp	/^    Function *write_barrier_func;$/;"	m	struct:__anon0a1571000111::AllocOpt	typeref:typename:Function *	file:
write_barrier_func	src/llvm-pass-helpers.h	/^    llvm::Function *write_barrier_func;$/;"	m	struct:JuliaPassContext	typeref:typename:llvm::Function *
write_cookie	stdlib/Distributed/src/cluster.jl	/^write_cookie(io::IO) = print(io.in, string(cluster_cookie(), "\\n"))$/;"	f
write_dependency_list	src/dump.c	/^static int64_t write_dependency_list(ios_t *s, jl_array_t **udepsp, jl_array_t *mod_array)$/;"	f	typeref:typename:int64_t	file:
write_float64	src/dump.c	/^static void write_float64(ios_t *s, double x) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void	file:
write_gctaggedfield	src/staticdata.c	/^static void write_gctaggedfield(jl_serializer_state *s, uintptr_t ref) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void	file:
write_header	src/dump.c	/^static void write_header(ios_t *s)$/;"	f	typeref:typename:void	file:
write_int32	src/dump.c	/^static void write_int32(ios_t *s, int32_t i) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void	file:
write_int64	src/dump.c	/^static void write_int64(ios_t *s, int64_t i) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void	file:
write_int8	src/dump.c	/^#define write_int8(/;"	d	file:
write_lcov_data	src/codegen.cpp	/^static void write_lcov_data(logdata_t &logData, const std::string &outfile)$/;"	f	typeref:typename:void	file:
write_log_data	src/codegen.cpp	/^static void write_log_data(logdata_t &logData, const char *extension)$/;"	f	typeref:typename:void	file:
write_mod_list	src/dump.c	/^static void write_mod_list(ios_t *s, jl_array_t *a)$/;"	f	typeref:typename:void	file:
write_module_path	src/dump.c	/^static void write_module_path(ios_t *s, jl_module_t *depmod) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void	file:
write_padding	src/staticdata.c	/^static void write_padding(ios_t *s, size_t nb) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void	file:
write_pointer	src/staticdata.c	/^static void write_pointer(ios_t *s) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void	file:
write_pointerfield	src/staticdata.c	/^static void write_pointerfield(jl_serializer_state *s, jl_value_t *fld) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void	file:
write_prompt	stdlib/REPL/src/LineEdit.jl	/^function write_prompt(terminal, p::Prompt)$/;"	f
write_prompt	stdlib/REPL/src/LineEdit.jl	/^function write_prompt(terminal, s::Union{AbstractString,Function})$/;"	f
write_prompt	stdlib/REPL/src/LineEdit.jl	/^write_prompt(terminal, s::PrefixSearchState) = write_prompt(terminal, s.histprompt.parent_prompt/;"	f
write_prompt	stdlib/REPL/src/LineEdit.jl	/^write_prompt(terminal, s::PromptState) = write_prompt(terminal, s.p)$/;"	f
write_self_mem	src/cgmemmgr.cpp	/^static void write_self_mem(void *dest, void *ptr, size_t size)$/;"	f	namespace:__anon06c686bc0111	typeref:typename:void	file:
write_sub	base/iobuffer.jl	/^function write_sub(to::GenericIOBuffer, a::AbstractArray{UInt8}, offs, nel)$/;"	f
write_tree!	stdlib/LibGit2/src/index.jl	/^function write_tree!(idx::GitIndex)$/;"	f
write_uint16	src/dump.c	/^static void write_uint16(ios_t *s, uint16_t i) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void	file:
write_uint32	src/staticdata.c	/^static void write_uint32(ios_t *s, uint32_t i) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void	file:
write_uint64	src/dump.c	/^static void write_uint64(ios_t *s, uint64_t i) JL_NOTSAFEPOINT$/;"	f	typeref:typename:void	file:
write_uint8	src/dump.c	/^#define write_uint8(/;"	d	file:
write_uint8	src/staticdata.c	/^#define write_uint8(/;"	d	file:
write_work_list	src/dump.c	/^static void write_work_list(ios_t *s)$/;"	f	typeref:typename:void	file:
writedlm	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^function writedlm(fname::AbstractString, a, dlm; opts...)$/;"	f
writedlm	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^function writedlm(io::IO, a::AbstractMatrix, dlm; opts...)$/;"	f
writedlm	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^function writedlm(io::IO, itr, dlm; opts...)$/;"	f
writedlm	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^writedlm(io, a; opts...) = writedlm(io, a, '\\t'; opts...)$/;"	f
writedlm	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^writedlm(io::IO, a::AbstractArray{<:Any,0}, dlm; opts...) = writedlm(io, reshape(a,1), dlm; opts/;"	f
writedlm_cell	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^function writedlm_cell(io::IO, elt::AbstractString, dlm::T, quotes::Bool) where T$/;"	f
writedlm_cell	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^writedlm_cell(io::IO, elt, dlm, quotes) = print(io, elt)$/;"	f
writedlm_cell	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^writedlm_cell(io::IO, elt::AbstractFloat, dlm, quotes) = print(io, elt)$/;"	f
writedlm_row	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^function writedlm_row(io::IO, row, dlm, quotes)$/;"	f
writedlm_row	stdlib/DelimitedFiles/src/DelimitedFiles.jl	/^function writedlm_row(io::IO, row::Union{Number,AbstractString}, dlm, quotes)$/;"	f
writeexp	base/ryu/Ryu.jl	/^function writeexp(x::T, precision) where {T <: Base.IEEEFloat}$/;"	f
writeexp	base/ryu/exp.jl	/^@inline function writeexp(buf, pos, v::T,$/;"	f
writefixed	base/ryu/Ryu.jl	/^function writefixed(x::T, precision) where {T <: Base.IEEEFloat}$/;"	f
writefixed	base/ryu/fixed.jl	/^@inline function writefixed(buf, pos, v::T,$/;"	f
writeheader	stdlib/Serialization/src/Serialization.jl	/^function writeheader(s::AbstractSerializer)$/;"	f
writelock	src/julia.h	/^    jl_mutex_t writelock;$/;"	m	struct:_jl_method_t	typeref:typename:jl_mutex_t
writelock	src/julia.h	/^    jl_mutex_t writelock;$/;"	m	struct:_jl_methtable_t	typeref:typename:jl_mutex_t
writereadpipeline	test/cmdlineargs.jl	/^function writereadpipeline(input, exename)$/;"	f
writeshortest	base/ryu/Ryu.jl	/^function writeshortest(x::T,$/;"	f
writeshortest	base/ryu/shortest.jl	/^@inline function writeshortest(buf::Vector{UInt8}, pos, x::T,$/;"	f
writetag	stdlib/Serialization/src/Serialization.jl	/^writetag(s::IO, tag) = (write(s, UInt8(tag)); nothing)$/;"	f
wrkr1	stdlib/Distributed/test/distributed_exec.jl	/^wrkr1 = workers()[1]$/;"	v
wrkr2	stdlib/Distributed/test/distributed_exec.jl	/^wrkr2 = workers()[end]$/;"	v
wrsym	src/flisp/flisp.h	/^    value_t iostreamsym, rdsym, wrsym, apsym, crsym, truncsym;$/;"	m	struct:_fl_context_t	typeref:typename:value_t
x	base/docs/basedocs.jl	/^const x = 5$/;"	v
x	base/logging.jl	/^x = 10$/;"	v
x	src/ccalltest.c	/^    char x;$/;"	m	struct:__anon84ad8c4c1108	typeref:typename:char	file:
x	src/ccalltest.c	/^    complex double x;$/;"	m	struct:__anon84ad8c4c1408	typeref:typename:complex double	file:
x	src/ccalltest.c	/^    complex float x;$/;"	m	struct:__anon84ad8c4c1208	typeref:typename:complex float	file:
x	src/ccalltest.c	/^    complex float x;$/;"	m	struct:__anon84ad8c4c1308	typeref:typename:complex float	file:
x	src/ccalltest.c	/^    double x;$/;"	m	struct:__anon84ad8c4c1608	typeref:typename:double	file:
x	src/ccalltest.c	/^    float x,y,z;$/;"	m	struct:__anon84ad8c4c1708	typeref:typename:float	file:
x	src/ccalltest.c	/^    float x;$/;"	m	struct:__anon84ad8c4c0208	typeref:typename:float	file:
x	src/ccalltest.c	/^    float x;$/;"	m	struct:__anon84ad8c4c1508	typeref:typename:float	file:
x	src/ccalltest.c	/^    int32_t x;$/;"	m	struct:__anon84ad8c4c0608	typeref:typename:int32_t	file:
x	src/ccalltest.c	/^    int32_t x;$/;"	m	struct:__anon84ad8c4c0b08	typeref:typename:int32_t	file:
x	src/ccalltest.c	/^    int32_t x;$/;"	m	struct:__anon84ad8c4c0c08	typeref:typename:int32_t	file:
x	src/ccalltest.c	/^    int32_t x;$/;"	m	struct:__anon84ad8c4c0f08	typeref:typename:int32_t	file:
x	src/ccalltest.c	/^    int32_t x;$/;"	m	struct:__anon84ad8c4c1008	typeref:typename:int32_t	file:
x	src/ccalltest.c	/^    int64_t x;$/;"	m	struct:__anon84ad8c4c0a08	typeref:typename:int64_t	file:
x	src/ccalltest.c	/^    int64_t x;$/;"	m	struct:__anon84ad8c4c0d08	typeref:typename:int64_t	file:
x	src/ccalltest.c	/^    int64_t x;$/;"	m	struct:__anon84ad8c4c0e08	typeref:typename:int64_t	file:
x	src/ccalltest.c	/^    jint x;$/;"	m	struct:__anon84ad8c4c1a08	typeref:typename:jint	file:
x	src/ccalltest.c	/^    struct { int32_t x; } x;$/;"	m	struct:__anon84ad8c4c0308	typeref:struct:__anon84ad8c4c0308::__anon84ad8c4c0408	file:
x	src/ccalltest.c	/^    struct { int32_t x; } x;$/;"	m	struct:__anon84ad8c4c0308::__anon84ad8c4c0408	typeref:typename:int32_t	file:
x	src/ccalltest.c	/^    struct { int64_t x; } x;$/;"	m	struct:__anon84ad8c4c0708	typeref:struct:__anon84ad8c4c0708::__anon84ad8c4c0808	file:
x	src/ccalltest.c	/^    struct { int64_t x; } x;$/;"	m	struct:__anon84ad8c4c0708::__anon84ad8c4c0808	typeref:typename:int64_t	file:
x	stdlib/InteractiveUtils/test/runtests.jl	/^x = 1.0$/;"	v
x	test/core.jl	/^const x = (1,2)$/;"	v
x	test/core.jl	/^macro x()$/;"	f
x	test/core.jl	/^x = 14893$/;"	v
x	test/reduce.jl	/^x = [j+7 for j in i]$/;"	v
x	test/reduce.jl	/^x = [j^2 for j in i]$/;"	v
x11289	test/subarray.jl	/^x11289 = randn(5,5)$/;"	v
x13250	test/arrayops.jl	/^x13250 = zeros(3)$/;"	v
x18672	test/core.jl	/^macro x18672()$/;"	f
x19333	test/core.jl	/^x19333 = 1$/;"	v
x1_full	stdlib/SparseArrays/test/sparsevector.jl	/^x1_full = zeros(length(spv_x1))$/;"	v
x23595	test/compiler/codegen.jl	/^x23595 = rand(1)$/;"	v
x25652	test/core.jl	/^x25652 = 1$/;"	v
x25652_2	test/core.jl	/^x25652_2 = let (x25652, _) = (x25652, nothing)$/;"	v
x26037	test/syntax.jl	/^x26037() = 10$/;"	f
x26826	test/compiler/inference.jl	/^x26826 = rand()$/;"	v
x27164	test/misc.jl	/^const x27164 = Ref(0)$/;"	v
x3220	test/core.jl	/^function x3220()$/;"	f
x32499	test/syntax.jl	/^x32499 = begin$/;"	v
x3789	test/core.jl	/^x3789 = 0$/;"	v
x4873	test/core.jl	/^x4873 = 1$/;"	v
x6068	test/core.jl	/^x6068 = 1$/;"	v
x6074	test/core.jl	/^x6074 = 6074$/;"	v
x7864	test/core.jl	/^x7864 = 1$/;"	v
x86_trap_flags	src/signals-mach.c	/^enum x86_trap_flags {$/;"	g	file:
x8d003	test/core.jl	/^x8d003 = Any[:y8d003]$/;"	v
x8d003	test/show.jl	/^x8d003 = 2$/;"	v
x9634	test/core.jl	/^x9634 = 3$/;"	v
x9770	test/compiler/inference.jl	/^@noinline x9770() = false$/;"	f
x::Int	test/core.jl	/^(x::Int)(y::Int) = x + 3y$/;"	f
x_19281	test/misc.jl	/^x_19281 = [(), (1,)]$/;"	v
x_24305	test/subtype.jl	/^x_24305 = fill(1.,3)$/;"	v
x_str	test/syntax.jl	/^macro x_str(x)$/;"	f
xd	src/subtype.c	/^    jl_datatype_t *xd, *yd;$/;"	m	struct:subtype_tuple_env	typeref:typename:jl_datatype_t *	file:
xdisplayable	base/multimedia.jl	/^xdisplayable(D::AbstractDisplay, @nospecialize args...) = applicable(display, D, args...)$/;"	f
xdoc	stdlib/REPL/src/latex_symbols.jl	/^xdoc = parse_file("unicode.xml")$/;"	v
xfer	stdlib/Sockets/test/nettest.jl	/^@everywhere function xfer(s, exp)$/;"	f
xlink	doc/images/jltypes.svg	/^	 xml:space="preserve">$/;"	n	uri:http://www.w3.org/1999/xlink
xor	base/bool.jl	/^xor(x::Bool, y::Bool) = (x != y)$/;"	f
xor	base/int.jl	/^xor(x::T, y::T) where {T<:BitInteger} = xor_int(x, y)$/;"	f
xor	base/missing.jl	/^xor(::Integer, ::Missing) = missing$/;"	f
xor	base/missing.jl	/^xor(::Missing, ::Integer) = missing$/;"	f
xor	base/missing.jl	/^xor(::Missing, ::Missing) = missing$/;"	f
xor	base/missing.jl	/^xor(a::Missing, b::Bool) = missing$/;"	f
xor	base/missing.jl	/^xor(b::Bool, a::Missing) = missing$/;"	f
xor	base/operators.jl	/^xor(x::Integer) = x$/;"	f
xor	base/promotion.jl	/^xor(x::T, y::T) where {T<:Integer} = no_op_err("xor", T)$/;"	f
xor!	stdlib/Random/src/DSFMT.jl	/^xor!(f::GF2X, g::GF2X) = (MPZ.xor!(f.z, g.z); f)$/;"	f
xor_op	src/runtime_intrinsics.c	/^#define xor_op(/;"	d	file:
xorshift_rng	test/gcext/gcext.c	/^static uint64_t xorshift_rng(void)$/;"	f	typeref:typename:uint64_t	file:
xorshift_rng_state	test/gcext/gcext.c	/^static uint64_t xorshift_rng_state = 1;$/;"	v	typeref:typename:uint64_t	file:
xs	src/ccalltest.c	/^int xs[300] = {0,0,0,1,0};$/;"	v	typeref:typename:int[300]
xs23917	test/syntax.jl	/^xs23917 = [1,2,3]$/;"	v
xs5165	test/core.jl	/^xs5165 = T5165[make_t(Int64(1))]$/;"	v
xtyp	stdlib/SuiteSparse/src/cholmod_h.jl	/^xtyp(::Type{ComplexF32}) = COMPLEX$/;"	f
xtyp	stdlib/SuiteSparse/src/cholmod_h.jl	/^xtyp(::Type{ComplexF64}) = COMPLEX$/;"	f
xtyp	stdlib/SuiteSparse/src/cholmod_h.jl	/^xtyp(::Type{Float32})    = REAL$/;"	f
xtyp	stdlib/SuiteSparse/src/cholmod_h.jl	/^xtyp(::Type{Float64})    = REAL$/;"	f
y	src/ccalltest.c	/^    char y;$/;"	m	struct:__anon84ad8c4c0e08	typeref:typename:char	file:
y	src/ccalltest.c	/^    char y;$/;"	m	struct:__anon84ad8c4c0f08	typeref:typename:char	file:
y	src/ccalltest.c	/^    char y;$/;"	m	struct:__anon84ad8c4c1108	typeref:typename:char	file:
y	src/ccalltest.c	/^    complex float y;$/;"	m	struct:__anon84ad8c4c1308	typeref:typename:complex float	file:
y	src/ccalltest.c	/^    double y;$/;"	m	struct:__anon84ad8c4c0208	typeref:typename:double	file:
y	src/ccalltest.c	/^    double y;$/;"	m	struct:__anon84ad8c4c1608	typeref:typename:double	file:
y	src/ccalltest.c	/^    float x,y,z;$/;"	m	struct:__anon84ad8c4c1708	typeref:typename:float	file:
y	src/ccalltest.c	/^    float y;$/;"	m	struct:__anon84ad8c4c1508	typeref:typename:float	file:
y	src/ccalltest.c	/^    int16_t y;$/;"	m	struct:__anon84ad8c4c1008	typeref:typename:int16_t	file:
y	src/ccalltest.c	/^    int32_t y;$/;"	m	struct:__anon84ad8c4c0608	typeref:typename:int32_t	file:
y	src/ccalltest.c	/^    int32_t y;$/;"	m	struct:__anon84ad8c4c0b08	typeref:typename:int32_t	file:
y	src/ccalltest.c	/^    int32_t y;$/;"	m	struct:__anon84ad8c4c0c08	typeref:typename:int32_t	file:
y	src/ccalltest.c	/^    int64_t y;$/;"	m	struct:__anon84ad8c4c0a08	typeref:typename:int64_t	file:
y	src/ccalltest.c	/^    int64_t y;$/;"	m	struct:__anon84ad8c4c0d08	typeref:typename:int64_t	file:
y	src/ccalltest.c	/^    jint y;$/;"	m	struct:__anon84ad8c4c1a08	typeref:typename:jint	file:
y	src/ccalltest.c	/^    struct { int32_t y; } y;$/;"	m	struct:__anon84ad8c4c0308	typeref:struct:__anon84ad8c4c0308::__anon84ad8c4c0508	file:
y	src/ccalltest.c	/^    struct { int32_t y; } y;$/;"	m	struct:__anon84ad8c4c0308::__anon84ad8c4c0508	typeref:typename:int32_t	file:
y	src/ccalltest.c	/^    struct { int64_t y; } y;$/;"	m	struct:__anon84ad8c4c0708	typeref:struct:__anon84ad8c4c0708::__anon84ad8c4c0908	file:
y	src/ccalltest.c	/^    struct { int64_t y; } y;$/;"	m	struct:__anon84ad8c4c0708::__anon84ad8c4c0908	typeref:typename:int64_t	file:
y	stdlib/Dates/test/periods.jl	/^y = Dates.Year(1)$/;"	v
y	stdlib/Dates/test/types.jl	/^y = Dates.Year(1)$/;"	v
y	stdlib/LinearAlgebra/src/givens.jl	/^y = G*x$/;"	v
y	test/arrayops.jl	/^y = Int[i for i in 1:10]$/;"	v
y	test/core.jl	/^const y = (x,(3,4))$/;"	v
y	test/core.jl	/^y = 1$/;"	v
y	test/namedtuple.jl	/^y = map(v -> (a=v.a, b=v.a + v.b), [(a=1, b=missing), (a=1, b=2)])$/;"	v
y20327	test/core.jl	/^y20327 = 1$/;"	v
y8d003	test/core.jl	/^y8d003 = 777$/;"	v
y_cmd	test/syntax.jl	/^macro y_cmd(x)$/;"	f
yd	src/subtype.c	/^    jl_datatype_t *xd, *yd;$/;"	m	struct:subtype_tuple_env	typeref:typename:jl_datatype_t **	file:
year	stdlib/Dates/src/accessors.jl	/^function year(days)$/;"	f
year	stdlib/Dates/src/accessors.jl	/^year(dt::TimeType) = year(days(dt))$/;"	f
yearmonth	stdlib/Dates/src/accessors.jl	/^function yearmonth(days)$/;"	f
yearmonth	stdlib/Dates/src/accessors.jl	/^yearmonth(dt::TimeType) = yearmonth(days(dt))$/;"	f
yearmonthday	stdlib/Dates/src/accessors.jl	/^function yearmonthday(days)$/;"	f
yearmonthday	stdlib/Dates/src/accessors.jl	/^yearmonthday(dt::TimeType) = yearmonthday(days(dt))$/;"	f
yearmonthday	stdlib/LibGit2/src/signature.jl	/^function yearmonthday(days)$/;"	f
yearwrap	stdlib/Dates/src/arithmetic.jl	/^yearwrap(y, m1, m2) = y + fld(m1 + m2 - 1, 12)$/;"	f
yescmd	test/spawn.jl	/^yescmd = `yes`$/;"	v
yfib	test/core.jl	/^yfib = Yc(fib->(n->(n < 2 ? n : fib(n-1) + fib(n-2))))$/;"	v
yield	base/task.jl	/^function yield()$/;"	f
yield	base/task.jl	/^function yield(t::Task, @nospecialize(x=nothing))$/;"	f
yieldto	base/task.jl	/^function yieldto(t::Task, @nospecialize(x=nothing))$/;"	f
yonah	src/processor_x86.cpp	/^constexpr auto yonah = get_feature_masks(sse3);$/;"	v	namespace:X86::Feature	typeref:typename:auto
z	src/ccalltest.c	/^    char z;$/;"	m	struct:__anon84ad8c4c1108	typeref:typename:char	file:
z	src/ccalltest.c	/^    char z;$/;"	m	struct:__anon84ad8c4c1a08	typeref:typename:char	file:
z	src/ccalltest.c	/^    float x,y,z;$/;"	m	struct:__anon84ad8c4c1708	typeref:typename:float	file:
z	src/ccalltest.c	/^    int32_t z;$/;"	m	struct:__anon84ad8c4c0b08	typeref:typename:int32_t	file:
z	src/ccalltest.c	/^    int32_t z;$/;"	m	struct:__anon84ad8c4c0c08	typeref:typename:int32_t	file:
z	src/ccalltest.c	/^    int64_t z;$/;"	m	struct:__anon84ad8c4c0d08	typeref:typename:int64_t	file:
z	test/core.jl	/^z = convert(Complex{Float64},2)$/;"	v
z	test/offsetarray.jl	/^z = OffsetArray([0 0; 2 0; 0 0; 0 0], (-3,-1))$/;"	v
z	test/reduce.jl	/^z = [-4, -3, 2, 5]$/;"	v
z	test/reduce.jl	/^z = rand(10^6)$/;"	v
z	test/reduce.jl	/^z = reshape(1:16, (2,2,2,2))$/;"	v
z	test/worlds.jl	/^z = Any["ABC"]$/;"	v
z10	test/complex.jl	/^z10 = Complex{Float64}( 1.02951151789360578e-84, 6.97145987515076231e-220)$/;"	v
z27103	test/core.jl	/^z27103 = 1$/;"	v
z7	test/complex.jl	/^z7 = Complex{Float64}(3.898125604559113300e289, 8.174961907852353577e295)$/;"	v
z9	test/complex.jl	/^z9 = Complex{Float64}(0.001953125, -0.001953125)$/;"	v
zdotc_	deps/gfortblas.c	/^complex double zdotc_(int *N, void *CX, int *INCX, void *CY, int *INCY) {$/;"	f	typeref:typename:complex double
zdotu_	deps/gfortblas.c	/^complex double zdotu_(int *N, void *CX, int *INCX, void *CY, int *INCY) {$/;"	f	typeref:typename:complex double
zero	base/abstractarray.jl	/^zero(x::AbstractArray{T}) where {T} = fill!(similar(x), zero(T))$/;"	f
zero	base/multidimensional.jl	/^    zero(::CartesianIndex{N}) where {N} = zero(CartesianIndex{N})$/;"	f
zero	base/multidimensional.jl	/^    zero(::Type{CartesianIndex{N}}) where {N} = CartesianIndex(ntuple(x -> 0, Val(N)))$/;"	f
zero	base/number.jl	/^zero(::Type{T}) where {T<:Number} = convert(T,0)$/;"	f
zero	base/number.jl	/^zero(x::Number) = oftype(x,0)$/;"	f
zero	base/twiceprecision.jl	/^zero(::Type{TwicePrecision{T}}) where {T} = TwicePrecision{T}(0, 0)$/;"	f
zero	stdlib/LinearAlgebra/src/uniformscaling.jl	/^zero(::Type{UniformScaling{T}}) where {T} = UniformScaling(zero(T))$/;"	f
zero	stdlib/LinearAlgebra/src/uniformscaling.jl	/^zero(J::UniformScaling{T}) where {T} = zero(UniformScaling{T})$/;"	f
zero	stdlib/LinearAlgebra/test/matmul.jl	/^    zero(::Type{TypeC}) = TypeC(0)$/;"	f
zero	stdlib/LinearAlgebra/test/matmul.jl	/^    zero(c::TypeC) = TypeC(0)$/;"	f
zero!	base/grisu/bignums.jl	/^function zero!(x::Bignum)$/;"	f
zero-width-space?	src/julia-parser.scm	/^(define (zero-width-space? c)$/;"	f
zero2small	test/complex.jl	/^    zero2small(r::Real) = iszero(r) ? copysign(1e-15, r) : r$/;"	f
zero2small	test/complex.jl	/^    zero2small(z::Complex) = complex(zero2small(real(z)), zero2small(imag(z)))$/;"	f
zeroinit	src/julia.h	/^    uint8_t zeroinit; \/\/ if one or more fields requires zero-initialization$/;"	m	struct:_jl_datatype_t	typeref:typename:uint8_t
zeros	base/array.jl	/^function zeros end$/;"	f
zeros	stdlib/SuiteSparse/src/cholmod.jl	/^function zeros(m::Integer, n::Integer, ::Type{Tv}) where Tv<:VTypes$/;"	f
zeros	stdlib/SuiteSparse/src/cholmod.jl	/^zeros(m::Integer, n::Integer) = zeros(m, n, Float64)$/;"	f
zeros5575	test/compiler/inference.jl	/^zeros5575(::Type{T}, dims...) where {T} = zeros5575(T, dims)$/;"	f
zeros5575	test/compiler/inference.jl	/^zeros5575(::Type{T}, dims::Tuple{Vararg{Any,N}}) where {T,N} = Array{T,N}(undef, dims)$/;"	f
zeros5575	test/compiler/inference.jl	/^zeros5575(a::AbstractArray) = zeros5575(a, Float64)$/;"	f
zeros5575	test/compiler/inference.jl	/^zeros5575(a::AbstractArray, ::Type{T}) where {T} = zeros5575(a, T, size(a))$/;"	f
zeros5575	test/compiler/inference.jl	/^zeros5575(a::AbstractArray, ::Type{T}, dims...) where {T} = zeros5575(T, dims)$/;"	f
zeros5575	test/compiler/inference.jl	/^zeros5575(a::AbstractArray, ::Type{T}, dims::Tuple) where {T} = zeros5575(T, dims)$/;"	f
zeros5575	test/compiler/inference.jl	/^zeros5575(dims...) = zeros5575(dims)$/;"	f
zeros5575	test/compiler/inference.jl	/^zeros5575(dims::Tuple) = zeros5575(Float64, dims)$/;"	f
ziggurat_exp_r	stdlib/Random/src/normal.jl	/^const ziggurat_exp_r      = 7.6971174701310497140446280481$/;"	v
ziggurat_exp_r	stdlib/Random/test/runtests.jl	/^ziggurat_exp_r      = parse(BigFloat,"7.69711747013104971404462804811408952334296818528283253278/;"	v
ziggurat_nor_inv_r	stdlib/Random/src/normal.jl	/^const ziggurat_nor_inv_r  = inv(ziggurat_nor_r)$/;"	v
ziggurat_nor_r	stdlib/Random/src/normal.jl	/^const ziggurat_nor_r      = 3.6541528853610087963519472518$/;"	v
ziggurat_nor_r	stdlib/Random/test/runtests.jl	/^ziggurat_nor_r      = parse(BigFloat,"3.65415288536100879635194725185604664812733315920964488827/;"	v
ziggurat_table_size	stdlib/Random/test/runtests.jl	/^ziggurat_table_size = 256$/;"	v
zip	base/iterators.jl	/^zip(a...) = Zip(a)$/;"	f
zip_iteratorsize	base/iterators.jl	/^zip_iteratorsize(::HasLength, ::IsInfinite) = HasLength()$/;"	f
zip_iteratorsize	base/iterators.jl	/^zip_iteratorsize(::HasShape, ::IsInfinite) = HasLength()$/;"	f
zip_iteratorsize	base/iterators.jl	/^zip_iteratorsize(a, b) = and_iteratorsize(a,b) # as `and_iteratorsize` but inherit `Union{HasLen/;"	f
zip_iteratorsize	base/iterators.jl	/^zip_iteratorsize(a::IsInfinite, b) = zip_iteratorsize(b,a)$/;"	f
zip_iteratorsize	base/iterators.jl	/^zip_iteratorsize(a::IsInfinite, b::IsInfinite) = IsInfinite()$/;"	f
znver1	src/processor_x86.cpp	/^constexpr auto znver1 = haswell | get_feature_masks(adx, clflushopt, clzero, mwaitx, prfchw,$/;"	v	namespace:X86::Feature	typeref:typename:auto
|	base/bool.jl	/^(|)(x::Bool, y::Bool) = or_int(x, y)$/;"	f
|	base/int.jl	/^(|)(x::T, y::T) where {T<:BitInteger} = or_int(x, y)$/;"	f
|	base/missing.jl	/^(|)(::Integer, ::Missing) = missing$/;"	f
|	base/missing.jl	/^(|)(::Missing, ::Integer) = missing$/;"	f
|	base/missing.jl	/^(|)(::Missing, ::Missing) = missing$/;"	f
|	base/missing.jl	/^(|)(a::Missing, b::Bool) = ifelse(b, true, missing)$/;"	f
|	base/missing.jl	/^(|)(b::Bool, a::Missing) = ifelse(b, true, missing)$/;"	f
|	base/operators.jl	/^(|)(x::Integer) = x$/;"	f
|	base/promotion.jl	/^(|)(x::T, y::T) where {T<:Integer} = no_op_err("|", T)$/;"	f
|	stdlib/FileWatching/src/FileWatching.jl	/^|(a::FDEvent, b::FDEvent) =$/;"	f
|	stdlib/FileWatching/src/FileWatching.jl	/^|(a::FileEvent, b::FileEvent) =$/;"	f
|>	base/operators.jl	/^|>(x, f) = f(x)$/;"	f
~	base/bool.jl	/^(~)(x::Bool) = !x$/;"	f
~	base/gmp.jl	/^(~)(x::BigInt) = MPZ.com(x)$/;"	f
~	base/int.jl	/^(~)(x::BitInteger)             = not_int(x)$/;"	f
~	base/int.jl	/^~(n::Integer) = -n-1$/;"	f
~AbiLayout	src/ccall.cpp	/^    virtual ~AbiLayout() {}$/;"	f	class:AbiLayout	file:
~JuliaJITEventListener	src/debuginfo.cpp	/^    virtual ~JuliaJITEventListener() {}$/;"	f	class:JuliaJITEventListener	file:
~ROAllocator	src/cgmemmgr.cpp	/^    virtual ~ROAllocator() {}$/;"	f	class:__anon06c686bc0111::ROAllocator	file:
~RTDyldMemoryManagerJL	src/cgmemmgr.cpp	/^    ~RTDyldMemoryManagerJL() override$/;"	f	class:__anon06c686bc0111::RTDyldMemoryManagerJL	file:
~jl_codectx_t	src/codegen.cpp	/^    ~jl_codectx_t() {$/;"	f	class:jl_codectx_t	file:
~jl_timing_block_cpp_t	src/timing.h	/^    ~jl_timing_block_cpp_t() {$/;"	f	struct:jl_timing_block_cpp_t
~math_builder	src/intrinsics.cpp	/^    ~math_builder() {$/;"	f	struct:math_builder	file:
×	stdlib/LinearAlgebra/src/LinearAlgebra.jl	/^const × = cross$/;"	v
÷	base/operators.jl	/^const ÷ = div$/;"	v
γ	base/mathconstants.jl	/^γ = 0.5772156649015...$/;"	v
π	base/mathconstants.jl	/^π = 3.1415926535897...$/;"	v
φ	base/mathconstants.jl	/^φ = 1.6180339887498...$/;"	v
ℯ	base/mathconstants.jl	/^ℯ = 2.7182818284590...$/;"	v
∈	base/operators.jl	/^const ∈ = in$/;"	v
∉	base/operators.jl	/^∉(x, itr) = !∈(x, itr)$/;"	f
∋	base/operators.jl	/^∋(itr, x) = ∈(x, itr)$/;"	f
∌	base/operators.jl	/^∌(itr, x) = !∋(itr, x)$/;"	f
∘	base/operators.jl	/^∘(f, g) = (x...)->f(g(x...))$/;"	f
∩	base/abstractset.jl	/^const ∩ = intersect$/;"	v
∪	base/abstractset.jl	/^const ∪ = union$/;"	v
≅	stdlib/LinearAlgebra/test/hessenberg.jl	/^≅(x,y) = all(p -> p[1] ≈ p[2], zip(x,y))$/;"	f
≅	test/math.jl	/^≅(a,b) = relerrc(a,b) ≤ 1e-13$/;"	f
≈	base/floatfuncs.jl	/^const ≈ = isapprox$/;"	v
≉	base/floatfuncs.jl	/^≉(args...; kws...) = !≈(args...; kws...)$/;"	f
≊	stdlib/LinearAlgebra/test/svd.jl	/^    ≊(x,y) = isapprox(x,y,rtol=1e-15)$/;"	f
≋	test/complex.jl	/^    ≋(x::Complex, y::Complex) = real(x) ≋ real(y) && imag(x) ≋ imag(y)$/;"	f
≋	test/complex.jl	/^    ≋(x::Real, y::Real) = x*y == 0 ? abs(x) < 1e-8 && abs(y) < 1e-8 && signbit(x)==signbit(y) /;"	f
≛	test/file.jl	/^    ≛(a, b) = sort(a) == sort(b)$/;"	f
≟	test/complex.jl	/^    ≟(x,y) = isequal(x,y)$/;"	f
≠	base/operators.jl	/^const ≠ = !=$/;"	v
≡	base/operators.jl	/^const ≡ = ===$/;"	v
≢	base/operators.jl	/^const ≢ = !==$/;"	v
≣	test/numbers.jl	/^const ≣ = isequal # convenient for comparing NaNs$/;"	v
≤	base/operators.jl	/^const ≤ = <=$/;"	v
≥	base/operators.jl	/^const ≥ = >=$/;"	v
⊆	base/abstractset.jl	/^const ⊆ = issubset$/;"	v
⊇	base/abstractset.jl	/^function ⊇ end$/;"	f
⊇	base/abstractset.jl	/^⊇(l, r) = r ⊆ l$/;"	f
⊈	base/abstractset.jl	/^function ⊈ end$/;"	f
⊈	base/abstractset.jl	/^⊈(l, r) = !⊆(l, r)$/;"	f
⊉	base/abstractset.jl	/^function ⊉ end$/;"	f
⊉	base/abstractset.jl	/^⊉(l, r) = r ⊈ l$/;"	f
⊊	base/abstractset.jl	/^function ⊊ end$/;"	f
⊊	base/abstractset.jl	/^⊊(l, r) = Set(l) ⊊ r$/;"	f
⊊	base/abstractset.jl	/^⊊(l::AbstractSet, r) = length(l) < length(r) && l ⊆ r$/;"	f
⊊	base/bitset.jl	/^⊊(a::BitSet, b::BitSet) = a <= b && a != b$/;"	f
⊋	base/abstractset.jl	/^function ⊋ end$/;"	f
⊋	base/abstractset.jl	/^⊋(l, r) = r ⊊ l$/;"	f
⊑	base/compiler/typelattice.jl	/^function ⊑(@nospecialize(a), @nospecialize(b))$/;"	f
⊻	base/operators.jl	/^const ⊻ = xor$/;"	v
⋅	stdlib/LinearAlgebra/src/LinearAlgebra.jl	/^const ⋅ = dot$/;"	v
